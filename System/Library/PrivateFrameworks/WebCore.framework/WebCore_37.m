void WebCore::JSServiceWorkerClientsOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  _DWORD *v27;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = *((_QWORD *)v3 + 1);
    if (v24)
    {
      v25 = *(unsigned int *)(v24 - 4);
      if ((_DWORD)v25)
      {
        v26 = (_DWORD **)(v24 + 8);
        do
        {
          if (*(v26 - 1) != (_DWORD *)-1)
          {
            v27 = *v26;
            *v26 = 0;
            if (v27)
            {
              if (v27[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
              else
                --v27[4];
            }
          }
          v26 += 2;
          --v25;
        }
        while (v25);
      }
      WTF::fastFree((WTF *)(v24 - 16), a2);
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::JSServiceWorkerContainer::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSServiceWorkerContainerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSServiceWorkerContainerPrototype::create(WebCore::JSServiceWorkerContainerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(this, (uint64_t)&WebCore::JSServiceWorkerContainer::s_info, (uint64_t)&WebCore::JSServiceWorkerContainerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerContainer>,(WebCore::DOMConstructorID)906>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7248);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerContainer>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSServiceWorkerContainer::s_info
         + ~((_QWORD)&WebCore::JSServiceWorkerContainer::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorkerContainer::s_info
                                                                          + ~((_QWORD)&WebCore::JSServiceWorkerContainer::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSServiceWorkerContainer::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSServiceWorkerContainer::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSServiceWorkerContainerPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSServiceWorkerContainerPrototype::create((WebCore::JSServiceWorkerContainerPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSServiceWorkerContainer::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSServiceWorkerContainer::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7248) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsServiceWorkerContainerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSServiceWorkerContainerPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerContainer>,(WebCore::DOMConstructorID)906>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsServiceWorkerContainer_controller(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 104)) != 0)
    return WebCore::wrap<WebCore::ServiceWorker>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4);
  else
    return 2;
}

uint64_t WebCore::jsServiceWorkerContainer_ready(JSC::JSGlobalObject *a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  unint64_t v8;
  uint64_t v9;
  JSC::Structure *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  JSC::VM *v17;
  unint64_t v18;
  uint64_t v19;
  WebCore::DOMGuardedObject *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v32;
  unsigned __int8 v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v40[8];
  WTF::StringImpl *v41;
  objc_class *v42;

  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v5 = (char **)(16 * v3);
    if ((_DWORD)v3)
      v6 = v5 == &WebCore::JSServiceWorkerContainer::s_info;
    else
      v6 = 1;
    if (!v6)
    {
      do
      {
        v5 = (char **)v5[2];
        v4 = v5 != 0;
      }
      while (v5 != &WebCore::JSServiceWorkerContainer::s_info && v5 != 0);
    }
    if (v4)
    {
      v8 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
      v9 = WebCore::ServiceWorkerContainer::ready(*(WebCore::ServiceWorkerContainer **)(a2 + 24));
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E330BDF8;
      v11[1] = v9;
      v12 = *(unsigned int *)(v9 + 44);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD *)(v9 + 32);
        v14 = 8 * v12;
        while (1)
        {
          v15 = *(_QWORD *)(*(_QWORD *)v13 + 32);
          if (v15)
          {
            if ((*(_BYTE *)(v15 + 8) & 3) == 0 && *(_QWORD *)v15 == v8)
              break;
          }
          v13 += 8;
          v14 -= 8;
          if (!v14)
            goto LABEL_18;
        }
        v28 = *(_QWORD *)(*(_QWORD *)v13 + 24);
        if (v28 && (v29 = *(_QWORD *)v28) != 0 && (*(_BYTE *)(v28 + 8) & 3) == 0)
        {
          if ((v29 & 0xFFFE000000000002) != 0)
          {
            v30 = 0;
          }
          else if (*(_BYTE *)(v29 + 5) == 68)
          {
            v30 = *(_QWORD *)v28;
          }
          else
          {
            v30 = 0;
          }
        }
        else
        {
          v30 = 10;
        }
        goto LABEL_61;
      }
LABEL_18:
      v16 = *(_DWORD *)(v8 + 1164);
      if (v16)
        v17 = (JSC::VM *)(16 * (v16 & 0xFFFFFFFE));
      else
        v17 = 0;
      v18 = JSC::JSPromise::create(*(JSC::JSPromise **)(v8 + 56), v17, v10);
      v19 = WTF::fastMalloc((WTF *)0x30);
      v20 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v19, v8, v18);
      *(_QWORD *)v20 = &off_1E3226868;
      *((_DWORD *)v20 + 10) = 1;
      *((_BYTE *)v20 + 44) = 0;
      v21 = *(unsigned int *)(v9 + 44);
      if ((_DWORD)v21 == *(_DWORD *)(v9 + 40))
      {
        v22 = v21 + (v21 >> 2);
        if (v22 >= 0x10)
          v23 = v22 + 1;
        else
          v23 = 16;
        if (v23 <= v21 + 1)
          v24 = v21 + 1;
        else
          v24 = v23;
        v25 = *(void **)(v9 + 32);
        if (v24 < 2)
        {
          v26 = (void *)(v9 + 48);
          *(_QWORD *)(v9 + 32) = v9 + 48;
          *(_DWORD *)(v9 + 40) = 1;
        }
        else
        {
          if (v24 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x194F6BB28);
          }
          v26 = (void *)WTF::fastMalloc((WTF *)(8 * v24));
          *(_DWORD *)(v9 + 40) = v24;
          *(_QWORD *)(v9 + 32) = v26;
        }
        memcpy(v26, v25, 8 * v21);
        if ((void *)(v9 + 48) != v25 && v25)
        {
          if (*(void **)(v9 + 32) == v25)
          {
            *(_QWORD *)(v9 + 32) = 0;
            *(_DWORD *)(v9 + 40) = 0;
          }
          WTF::fastFree((WTF *)v25, v31);
        }
        v21 = *(unsigned int *)(v9 + 44);
        v27 = (uint64_t *)(*(_QWORD *)(v9 + 32) + 8 * v21);
      }
      else
      {
        v27 = (uint64_t *)(*(_QWORD *)(v9 + 32) + 8 * v21);
      }
      ++*(_DWORD *)(v19 + 16);
      *v27 = v19;
      *(_DWORD *)(v9 + 44) = v21 + 1;
      if (!*(_BYTE *)(v9 + 24))
        goto LABEL_51;
      v32 = *(_DWORD *)(v9 + 16);
      if (!v32)
      {
        (*(void (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v19);
        goto LABEL_51;
      }
      if (v32 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_76;
      }
      v33 = *(_BYTE *)v9;
      v34 = *(WTF::StringImpl **)(v9 + 8);
      if (v34)
        *(_DWORD *)v34 += 4;
      v41 = v34;
      v42 = 0;
      v40[0] = v33;
      WebCore::DeferredPromise::reject(v19, v40, 0, &v42);
      v36 = v41;
      v41 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::destroy(v36, v35);
          if (v34)
          {
LABEL_48:
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v35);
            else
              *(_DWORD *)v34 -= 2;
          }
LABEL_51:
          v37 = *(_QWORD *)(v19 + 24);
          if (!v37 || (v38 = *(_QWORD *)v37) == 0 || (*(_BYTE *)(v37 + 8) & 3) != 0)
          {
            v30 = 10;
            goto LABEL_59;
          }
          if ((v38 & 0xFFFE000000000002) == 0)
          {
            if (*(_BYTE *)(v38 + 5) == 68)
              v30 = *(_QWORD *)v37;
            else
              v30 = 0;
            goto LABEL_59;
          }
LABEL_76:
          v30 = 0;
LABEL_59:
          if (*(_DWORD *)(v19 + 16) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
          else
            --*(_DWORD *)(v19 + 16);
LABEL_61:
          (*(void (**)(_QWORD *))(*v11 + 8))(v11);
          return v30;
        }
        *(_DWORD *)v36 -= 2;
      }
      if (v34)
        goto LABEL_48;
      goto LABEL_51;
    }
  }
  return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSServiceWorkerContainer::s_info, a3);
}

uint64_t WebCore::jsServiceWorkerContainer_oncontrollerchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v5 = *(WebCore **)(a2 + 24);
  ++*(_DWORD *)(*((_QWORD *)v5 + 8) + 16);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 504), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v10 = (_DWORD *)*((_QWORD *)v5 + 8);
  if (v10[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
  else
    --v10[4];
  return v9;
}

BOOL WebCore::setJSServiceWorkerContainer_oncontrollerchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSServiceWorkerContainer::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSServiceWorkerContainer::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*(_DWORD *)(*((_QWORD *)v11 + 8) + 16);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 504), a3, (_DWORD *)a2);
      v15 = (_DWORD *)*((_QWORD *)v11 + 8);
      if (v15[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --v15[4];
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerContainer_onmessage(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v5 = *(WebCore **)(a2 + 24);
  ++*(_DWORD *)(*((_QWORD *)v5 + 8) + 16);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1192), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v10 = (_DWORD *)*((_QWORD *)v5 + 8);
  if (v10[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
  else
    --v10[4];
  return v9;
}

BOOL WebCore::setJSServiceWorkerContainer_onmessage(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSServiceWorkerContainer::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSServiceWorkerContainer::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*(_DWORD *)(*((_QWORD *)v11 + 8) + 16);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1192), a3, (_DWORD *)a2);
      v15 = (_DWORD *)*((_QWORD *)v11 + 8);
      if (v15[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --v15[4];
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerContainer_onmessageerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v5 = *(WebCore **)(a2 + 24);
  ++*(_DWORD *)(*((_QWORD *)v5 + 8) + 16);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1200), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v10 = (_DWORD *)*((_QWORD *)v5 + 8);
  if (v10[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
  else
    --v10[4];
  return v9;
}

BOOL WebCore::setJSServiceWorkerContainer_onmessageerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSServiceWorkerContainer::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSServiceWorkerContainer::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*(_DWORD *)(*((_QWORD *)v11 + 8) + 16);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1200), a3, (_DWORD *)a2);
      v15 = (_DWORD *)*((_QWORD *)v11 + 8);
      if (v15[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --v15[4];
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSServiceWorkerContainerOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF::ConcurrentPtrHashSet *v12;
  _DWORD *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  uint64_t result;
  void *v22;

  v7 = *a2;
  v8 = *(_QWORD **)(*a2 + 24);
  v9 = v8[4];
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (!*(_BYTE *)(v10 + 180))
      {
        if (v8[5] || ((*(uint64_t (**)(_QWORD *))(v8[3] + 64))(v8 + 3) & 1) != 0)
        {
          if (a5)
          {
            *a5 = "ActiveDOMObject with pending activity";
            a5[1] = 38;
          }
          return 1;
        }
        v8 = *(_QWORD **)(v7 + 24);
      }
    }
  }
  v11 = (void *)v8[8];
  if (!v11)
    return 0;
  if (a5)
  {
    *a5 = "Reachable from Navigator";
    a5[1] = 25;
  }
  v12 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v13 = (_DWORD *)*((_QWORD *)v12 + 6);
  if ((_DWORD *)((char *)v12 + 56) != v13)
  {
    v14 = v13[1];
    v15 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = v18;
    while (1)
    {
      v20 = *(void **)&v13[2 * v19 + 4];
      if (!v20)
        return 0;
      if (v11 == v20)
        goto LABEL_21;
      v19 = (v19 + 1) & v14;
      if (v19 == v18)
      {
        __break(0xC471u);
        JUMPOUT(0x194F6C2C8);
      }
    }
  }
  v22 = v11;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v12, v11);
  v11 = v22;
  if ((_DWORD)result)
  {
LABEL_21:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v11);
    return 1;
  }
  return result;
}

_DWORD *WebCore::JSServiceWorkerContainerOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *result;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = *(_DWORD **)(v3 + 64);
  v5 = result[4];
  result[4] = v5 + 1;
  v6 = v3 + 8;
  if (!v3)
    v6 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v8 + 16 * v14);
      if (v15 != v3)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v8 + 16 * v14);
          ++v16;
          if (v15 == v3)
            goto LABEL_15;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
      if (v14 == *(_DWORD *)(v8 - 4))
        goto LABEL_25;
LABEL_15:
      v17 = (_QWORD *)(v8 + 16 * v14);
      *v17 = -1;
      v20 = v17[1];
      v19 = v17 + 1;
      v18 = v20;
      if (v20)
      {
        *(_QWORD *)(v18 + 8) = 3;
        *v19 = 0;
      }
      ++*(_DWORD *)(*v7 - 16);
      v21 = *v7;
      v22 = *v7 ? *(_DWORD *)(v21 - 12) - 1 : -1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v7;
      if (*v7
        && ((v24 = 6 * *(_DWORD *)(v23 - 12), v25 = *(_DWORD *)(v23 - 4), v24 < v25) ? (v26 = v25 >= 9) : (v26 = 0), v26))
      {
        v27 = v3;
        result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
        v3 = v27;
        if (!v27)
          return result;
      }
      else
      {
LABEL_25:
        if (!v3)
          return result;
      }
      result = *(_DWORD **)(v3 + 64);
      v5 = result[4] - 1;
    }
  }
  else if (*(_QWORD *)v6)
  {
    *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
    *(_QWORD *)v6 = 0;
  }
  if (!v5)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
  result[4] = v5;
  return result;
}

unint64_t WebCore::wrap<WebCore::ServiceWorkerContainer>(int a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  WebCore::JSDOMGlobalObject *v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(WebCore::JSDOMGlobalObject **)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(WebCore::JSDOMGlobalObject **)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)a3 + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(*((_QWORD *)a3 + 8) + 16);
  if (*(uint64_t (***)(WebCore::ServiceWorkerContainer *__hidden))a3 != off_1E347EED8)
  {
    __break(0xC471u);
    JUMPOUT(0x194F6C99CLL);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSServiceWorkerContainer::s_info
         + ~((_QWORD)&WebCore::JSServiceWorkerContainer::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorkerContainer::s_info
                                                                          + ~((_QWORD)&WebCore::JSServiceWorkerContainer::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSServiceWorkerContainer::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSServiceWorkerContainer::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, a3);
  Structure = WebCore::JSServiceWorkerContainerPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSServiceWorkerContainerPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSServiceWorkerContainer::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSServiceWorkerContainer::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 7328);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 7328);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 7328);
    *(_QWORD *)(v30 + 7328) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 7328);
  *(_QWORD *)(v26 + 7328) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE3369B0 & 1) == 0)
  {
    qword_1EE3369A8 = (uint64_t)&off_1E3307C00;
    byte_1EE3369B0 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3369A8;
    Allocator[2] = v42;
    v46 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE3369A8;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

uint64_t WebCore::JSServiceWorkerGlobalScope::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSWorkerGlobalScope::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  return WebCore::JSServiceWorkerGlobalScope::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSServiceWorkerGlobalScope::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  WebCore::JSWorkerGlobalScope::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSServiceWorkerGlobalScope::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, (uint64_t)a2);
}

uint64_t WebCore::JSServiceWorkerGlobalScopePrototype::finishCreation(WebCore::JSServiceWorkerGlobalScopePrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  JSC::Structure *v8;
  int v9;
  uint64_t result;
  WTF::StringImpl *v11[6];
  int v12;
  int v13;
  JSC::Structure *v14;
  int v15;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = JSC::JSString::create((uint64_t)a2, v11);
  v7 = v11[0];
  v11[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  v15 = *(_DWORD *)this;
  v14 = (JSC::Structure *)(16 * (v15 & 0xFFFFFFFE));
  v9 = JSC::Structure::outOfLineCapacity(v14);
  v12 = 0;
  v13 = v9;
  v11[0] = (WTF::StringImpl *)&v13;
  v11[1] = this;
  v11[2] = a2;
  v11[3] = (WTF::StringImpl *)&v15;
  v11[4] = (WTF::StringImpl *)&v14;
  v11[5] = (WTF::StringImpl *)&v12;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v8, a2, v4, 6, (uint64_t)v11);
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  result = JSC::JSObject::putDirectOffset((uint64_t)this, (uint64_t)a2, v12, v6);
  *((_DWORD *)v8 + 4) |= 0x10u;
  return result;
}

uint64_t WebCore::JSServiceWorkerGlobalScope::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 3400));
  v4 = *(_QWORD *)(a1 + 3400);
  if (!v4)
    return WebCore::JSWorkerGlobalScope::analyzeHeap(a1, a2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSWorkerGlobalScope::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSWorkerGlobalScope::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSServiceWorkerGlobalScope::visitChildren(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  WebCore::JSWorkerGlobalScopeBase::visitChildren(a1, (uint64_t)a2);
  WebCore::JSWorkerGlobalScope::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSServiceWorkerGlobalScope::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, (uint64_t)a2);
}

uint64_t WebCore::JSServiceWorkerGlobalScope::visitChildren(WebCore::JSServiceWorkerGlobalScope *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    WebCore::JSWorkerGlobalScope::visitChildren(this, a2, a3);
    result = WebCore::JSServiceWorkerGlobalScope::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSServiceWorkerGlobalScope::finishCreation(WebCore::JSServiceWorkerGlobalScope *this, JSC::VM *a2, JSC::JSGlobalProxy *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t SlowCase;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  int v154;
  uint64_t v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  unint64_t v171;
  int v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  uint64_t v179;
  unint64_t v180;
  int v181;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;

  v5 = (uint64_t *)((char *)a2 + 37936);
  WebCore::JSWorkerGlobalScope::finishCreation(this, a2, a3);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 136))(v6) + 432) & 0x1000000000000000) == 0)
    goto LABEL_8;
  v7 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7) + 432) & 0x4000000000000000) == 0)
    goto LABEL_8;
  SlowCase = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    SlowCase = v5[2];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_5;
    }
    v211 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v211);
    v5[2] = SlowCase + (int)v211;
  }
  *v5 = SlowCase + 32;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v9 = v5[450];
  v10 = *(_DWORD *)(v9 + 8);
  *(_DWORD *)SlowCase = v9 >> 4;
  *(_DWORD *)(SlowCase + 4) = v10;
  *(_QWORD *)(SlowCase + 8) = WebCore::jsServiceWorkerGlobalScope_cookieStore;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_8:
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 136))(v11) + 432) & 0x1000000000000000) == 0)
    goto LABEL_15;
  v12 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 136))(v12) + 432) & 0x4000000000000000) == 0)
    goto LABEL_15;
  v13 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v13 = v5[2];
    if ((v13 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v13 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_12;
    }
    v212 = *(_QWORD *)(v13 + 8) ^ v5[3];
    v5[1] = v13 + HIDWORD(v212);
    v5[2] = v13 + (int)v212;
  }
  *v5 = v13 + 32;
LABEL_12:
  *(_DWORD *)v13 = 0;
  v14 = v5[450];
  v15 = *(_DWORD *)(v14 + 8);
  *(_DWORD *)v13 = v14 >> 4;
  *(_DWORD *)(v13 + 4) = v15;
  *(_QWORD *)(v13 + 8) = WebCore::jsServiceWorkerGlobalScope_oncookiechange;
  *(_QWORD *)(v13 + 16) = WebCore::setJSServiceWorkerGlobalScope_oncookiechange;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_15:
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 136))(v16) + 480) & 0x400000000) == 0)
    goto LABEL_21;
  v17 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v17 = v5[2];
    if ((v17 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v17 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_18;
    }
    v195 = *(_QWORD *)(v17 + 8) ^ v5[3];
    v5[1] = v17 + HIDWORD(v195);
    v5[2] = v17 + (int)v195;
  }
  *v5 = v17 + 32;
LABEL_18:
  *(_DWORD *)v17 = 0;
  v18 = v5[450];
  v19 = *(_DWORD *)(v18 + 8);
  *(_DWORD *)v17 = v18 >> 4;
  *(_DWORD *)(v17 + 4) = v19;
  *(_QWORD *)(v17 + 8) = WebCore::jsServiceWorkerGlobalScope_onnotificationclick;
  *(_QWORD *)(v17 + 16) = WebCore::setJSServiceWorkerGlobalScope_onnotificationclick;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_21:
  v20 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 136))(v20) + 480) & 0x400000000) == 0)
    goto LABEL_27;
  v21 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v21 = v5[2];
    if ((v21 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v21 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_24;
    }
    v196 = *(_QWORD *)(v21 + 8) ^ v5[3];
    v5[1] = v21 + HIDWORD(v196);
    v5[2] = v21 + (int)v196;
  }
  *v5 = v21 + 32;
LABEL_24:
  *(_DWORD *)v21 = 0;
  v22 = v5[450];
  v23 = *(_DWORD *)(v22 + 8);
  *(_DWORD *)v21 = v22 >> 4;
  *(_DWORD *)(v21 + 4) = v23;
  *(_QWORD *)(v21 + 8) = WebCore::jsServiceWorkerGlobalScope_onnotificationclose;
  *(_QWORD *)(v21 + 16) = WebCore::setJSServiceWorkerGlobalScope_onnotificationclose;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_27:
  v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 136))(v24) + 432) & 0x80000000000000) == 0)
    goto LABEL_33;
  v25 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v25 = v5[2];
    if ((v25 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v25 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_30;
    }
    v197 = *(_QWORD *)(v25 + 8) ^ v5[3];
    v5[1] = v25 + HIDWORD(v197);
    v5[2] = v25 + (int)v197;
  }
  *v5 = v25 + 32;
LABEL_30:
  *(_DWORD *)v25 = 0;
  v26 = v5[450];
  v27 = *(_DWORD *)(v26 + 8);
  *(_DWORD *)v25 = v26 >> 4;
  *(_DWORD *)(v25 + 4) = v27;
  *(_QWORD *)(v25 + 8) = WebCore::jsServiceWorkerGlobalScope_CompressionStreamConstructor;
  *(_QWORD *)(v25 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_33:
  v28 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 136))(v28) + 432) & 0x80000000000000) == 0)
    goto LABEL_39;
  v29 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v29 = v5[2];
    if ((v29 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v29 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_36;
    }
    v198 = *(_QWORD *)(v29 + 8) ^ v5[3];
    v5[1] = v29 + HIDWORD(v198);
    v5[2] = v29 + (int)v198;
  }
  *v5 = v29 + 32;
LABEL_36:
  *(_DWORD *)v29 = 0;
  v30 = v5[450];
  v31 = *(_DWORD *)(v30 + 8);
  *(_DWORD *)v29 = v30 >> 4;
  *(_DWORD *)(v29 + 4) = v31;
  *(_QWORD *)(v29 + 8) = WebCore::jsServiceWorkerGlobalScope_CompressionStreamEncoderConstructor;
  *(_QWORD *)(v29 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_39:
  v32 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 136))(v32) + 432) & 0x80000000000000) == 0)
    goto LABEL_45;
  v33 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v33 = v5[2];
    if ((v33 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v33 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_42;
    }
    v199 = *(_QWORD *)(v33 + 8) ^ v5[3];
    v5[1] = v33 + HIDWORD(v199);
    v5[2] = v33 + (int)v199;
  }
  *v5 = v33 + 32;
LABEL_42:
  *(_DWORD *)v33 = 0;
  v34 = v5[450];
  v35 = *(_DWORD *)(v34 + 8);
  *(_DWORD *)v33 = v34 >> 4;
  *(_DWORD *)(v33 + 4) = v35;
  *(_QWORD *)(v33 + 8) = WebCore::jsServiceWorkerGlobalScope_DecompressionStreamConstructor;
  *(_QWORD *)(v33 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_45:
  v36 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 136))(v36) + 432) & 0x80000000000000) == 0)
    goto LABEL_51;
  v37 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v37 = v5[2];
    if ((v37 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v37 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_48;
    }
    v200 = *(_QWORD *)(v37 + 8) ^ v5[3];
    v5[1] = v37 + HIDWORD(v200);
    v5[2] = v37 + (int)v200;
  }
  *v5 = v37 + 32;
LABEL_48:
  *(_DWORD *)v37 = 0;
  v38 = v5[450];
  v39 = *(_DWORD *)(v38 + 8);
  *(_DWORD *)v37 = v38 >> 4;
  *(_DWORD *)(v37 + 4) = v39;
  *(_QWORD *)(v37 + 8) = WebCore::jsServiceWorkerGlobalScope_DecompressionStreamDecoderConstructor;
  *(_QWORD *)(v37 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_51:
  v40 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40))
    goto LABEL_58;
  v41 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 136))(v41) + 432) & 0x1000000000000000) == 0)
    goto LABEL_58;
  v42 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v42 = v5[2];
    if ((v42 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v42 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_55;
    }
    v213 = *(_QWORD *)(v42 + 8) ^ v5[3];
    v5[1] = v42 + HIDWORD(v213);
    v5[2] = v42 + (int)v213;
  }
  *v5 = v42 + 32;
LABEL_55:
  *(_DWORD *)v42 = 0;
  v43 = v5[450];
  v44 = *(_DWORD *)(v43 + 8);
  *(_DWORD *)v42 = v43 >> 4;
  *(_DWORD *)(v42 + 4) = v44;
  *(_QWORD *)(v42 + 8) = WebCore::jsServiceWorkerGlobalScope_CookieStoreConstructor;
  *(_QWORD *)(v42 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_58:
  v45 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45))
    goto LABEL_66;
  v46 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 136))(v46) + 432) & 0x1000000000000000) == 0)
    goto LABEL_66;
  v47 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 136))(v47) + 432) & 0x4000000000000000) == 0)
    goto LABEL_66;
  v48 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v48 = v5[2];
    if ((v48 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v48 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_63;
    }
    v225 = *(_QWORD *)(v48 + 8) ^ v5[3];
    v5[1] = v48 + HIDWORD(v225);
    v5[2] = v48 + (int)v225;
  }
  *v5 = v48 + 32;
LABEL_63:
  *(_DWORD *)v48 = 0;
  v49 = v5[450];
  v50 = *(_DWORD *)(v49 + 8);
  *(_DWORD *)v48 = v49 >> 4;
  *(_DWORD *)(v48 + 4) = v50;
  *(_QWORD *)(v48 + 8) = WebCore::jsServiceWorkerGlobalScope_CookieStoreManagerConstructor;
  *(_QWORD *)(v48 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_66:
  v51 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 136))(v51) + 432) & 0x1000000000000000) == 0)
    goto LABEL_73;
  v52 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 136))(v52) + 432) & 0x4000000000000000) == 0)
    goto LABEL_73;
  v53 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v53 = v5[2];
    if ((v53 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v53 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_70;
    }
    v214 = *(_QWORD *)(v53 + 8) ^ v5[3];
    v5[1] = v53 + HIDWORD(v214);
    v5[2] = v53 + (int)v214;
  }
  *v5 = v53 + 32;
LABEL_70:
  *(_DWORD *)v53 = 0;
  v54 = v5[450];
  v55 = *(_DWORD *)(v54 + 8);
  *(_DWORD *)v53 = v54 >> 4;
  *(_DWORD *)(v53 + 4) = v55;
  *(_QWORD *)(v53 + 8) = WebCore::jsServiceWorkerGlobalScope_ExtendableCookieChangeEventConstructor;
  *(_QWORD *)(v53 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_73:
  v56 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 136))(v56) + 480) & 0x200000000) == 0)
    goto LABEL_79;
  v57 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v57 = v5[2];
    if ((v57 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v57 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_76;
    }
    v201 = *(_QWORD *)(v57 + 8) ^ v5[3];
    v5[1] = v57 + HIDWORD(v201);
    v5[2] = v57 + (int)v201;
  }
  *v5 = v57 + 32;
LABEL_76:
  *(_DWORD *)v57 = 0;
  v58 = v5[450];
  v59 = *(_DWORD *)(v58 + 8);
  *(_DWORD *)v57 = v58 >> 4;
  *(_DWORD *)(v57 + 4) = v59;
  *(_QWORD *)(v57 + 8) = WebCore::jsServiceWorkerGlobalScope_NotificationConstructor;
  *(_QWORD *)(v57 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_79:
  v60 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 136))(v60) + 480) & 0x400000000) == 0)
    goto LABEL_85;
  v61 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v61 = v5[2];
    if ((v61 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v61 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_82;
    }
    v202 = *(_QWORD *)(v61 + 8) ^ v5[3];
    v5[1] = v61 + HIDWORD(v202);
    v5[2] = v61 + (int)v202;
  }
  *v5 = v61 + 32;
LABEL_82:
  *(_DWORD *)v61 = 0;
  v62 = v5[450];
  v63 = *(_DWORD *)(v62 + 8);
  *(_DWORD *)v61 = v62 >> 4;
  *(_DWORD *)(v61 + 4) = v63;
  *(_QWORD *)(v61 + 8) = WebCore::jsServiceWorkerGlobalScope_NotificationEventConstructor;
  *(_QWORD *)(v61 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_85:
  v64 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64))
    goto LABEL_92;
  v65 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 136))(v65) + 456) & 0x4000000000) == 0)
    goto LABEL_92;
  v66 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v66 = v5[2];
    if ((v66 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v66 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_89;
    }
    v215 = *(_QWORD *)(v66 + 8) ^ v5[3];
    v5[1] = v66 + HIDWORD(v215);
    v5[2] = v66 + (int)v215;
  }
  *v5 = v66 + 32;
LABEL_89:
  *(_DWORD *)v66 = 0;
  v67 = v5[450];
  v68 = *(_DWORD *)(v67 + 8);
  *(_DWORD *)v66 = v67 >> 4;
  *(_DWORD *)(v66 + 4) = v68;
  *(_QWORD *)(v66 + 8) = WebCore::jsServiceWorkerGlobalScope_PushEventConstructor;
  *(_QWORD *)(v66 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_92:
  v69 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 136))(v69) + 456) & 0x4000000000) == 0)
    goto LABEL_98;
  v70 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v70 = v5[2];
    if ((v70 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v70 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_95;
    }
    v203 = *(_QWORD *)(v70 + 8) ^ v5[3];
    v5[1] = v70 + HIDWORD(v203);
    v5[2] = v70 + (int)v203;
  }
  *v5 = v70 + 32;
LABEL_95:
  *(_DWORD *)v70 = 0;
  v71 = v5[450];
  v72 = *(_DWORD *)(v71 + 8);
  *(_DWORD *)v70 = v71 >> 4;
  *(_DWORD *)(v70 + 4) = v72;
  *(_QWORD *)(v70 + 8) = WebCore::jsServiceWorkerGlobalScope_PushMessageDataConstructor;
  *(_QWORD *)(v70 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_98:
  v73 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
    goto LABEL_105;
  v74 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 136))(v74) + 472) & 0x1000000000000) == 0)
    goto LABEL_105;
  v75 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v75 = v5[2];
    if ((v75 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v75 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_102;
    }
    v216 = *(_QWORD *)(v75 + 8) ^ v5[3];
    v5[1] = v75 + HIDWORD(v216);
    v5[2] = v75 + (int)v216;
  }
  *v5 = v75 + 32;
LABEL_102:
  *(_DWORD *)v75 = 0;
  v76 = v5[450];
  v77 = *(_DWORD *)(v76 + 8);
  *(_DWORD *)v75 = v76 >> 4;
  *(_DWORD *)(v75 + 4) = v77;
  *(_QWORD *)(v75 + 8) = WebCore::jsServiceWorkerGlobalScope_PushNotificationEventConstructor;
  *(_QWORD *)(v75 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_105:
  v78 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 24))(v78))
    goto LABEL_112;
  v79 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 136))(v79) + 456) & 0x4000000000) == 0)
    goto LABEL_112;
  v80 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v80 = v5[2];
    if ((v80 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v80 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_109;
    }
    v217 = *(_QWORD *)(v80 + 8) ^ v5[3];
    v5[1] = v80 + HIDWORD(v217);
    v5[2] = v80 + (int)v217;
  }
  *v5 = v80 + 32;
LABEL_109:
  *(_DWORD *)v80 = 0;
  v81 = v5[450];
  v82 = *(_DWORD *)(v81 + 8);
  *(_DWORD *)v80 = v81 >> 4;
  *(_DWORD *)(v80 + 4) = v82;
  *(_QWORD *)(v80 + 8) = WebCore::jsServiceWorkerGlobalScope_PushSubscriptionChangeEventConstructor;
  *(_QWORD *)(v80 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_112:
  v83 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 136))(v83) + 464) & 0x80) == 0)
    goto LABEL_118;
  v84 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v84 = v5[2];
    if ((v84 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v84 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_115;
    }
    v204 = *(_QWORD *)(v84 + 8) ^ v5[3];
    v5[1] = v84 + HIDWORD(v204);
    v5[2] = v84 + (int)v204;
  }
  *v5 = v84 + 32;
LABEL_115:
  *(_DWORD *)v84 = 0;
  v85 = v5[450];
  v86 = *(_DWORD *)(v85 + 8);
  *(_DWORD *)v84 = v85 >> 4;
  *(_DWORD *)(v84 + 4) = v86;
  *(_QWORD *)(v84 + 8) = WebCore::jsServiceWorkerGlobalScope_ExtendableEventConstructor;
  *(_QWORD *)(v84 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_118:
  v87 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 136))(v87) + 464) & 0x80) == 0)
    goto LABEL_124;
  v88 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v88 = v5[2];
    if ((v88 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v88 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_121;
    }
    v205 = *(_QWORD *)(v88 + 8) ^ v5[3];
    v5[1] = v88 + HIDWORD(v205);
    v5[2] = v88 + (int)v205;
  }
  *v5 = v88 + 32;
LABEL_121:
  *(_DWORD *)v88 = 0;
  v89 = v5[450];
  v90 = *(_DWORD *)(v89 + 8);
  *(_DWORD *)v88 = v89 >> 4;
  *(_DWORD *)(v88 + 4) = v90;
  *(_QWORD *)(v88 + 8) = WebCore::jsServiceWorkerGlobalScope_ExtendableMessageEventConstructor;
  *(_QWORD *)(v88 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_124:
  v91 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 136))(v91) + 464) & 0x80) == 0)
    goto LABEL_130;
  v92 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v92 = v5[2];
    if ((v92 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v92 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_127;
    }
    v206 = *(_QWORD *)(v92 + 8) ^ v5[3];
    v5[1] = v92 + HIDWORD(v206);
    v5[2] = v92 + (int)v206;
  }
  *v5 = v92 + 32;
LABEL_127:
  *(_DWORD *)v92 = 0;
  v93 = v5[450];
  v94 = *(_DWORD *)(v93 + 8);
  *(_DWORD *)v92 = v93 >> 4;
  *(_DWORD *)(v92 + 4) = v94;
  *(_QWORD *)(v92 + 8) = WebCore::jsServiceWorkerGlobalScope_FetchEventConstructor;
  *(_QWORD *)(v92 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_130:
  v95 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 136))(v95) + 464) & 0x80) == 0)
    goto LABEL_136;
  v96 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v96 = v5[2];
    if ((v96 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v96 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_133;
    }
    v207 = *(_QWORD *)(v96 + 8) ^ v5[3];
    v5[1] = v96 + HIDWORD(v207);
    v5[2] = v96 + (int)v207;
  }
  *v5 = v96 + 32;
LABEL_133:
  *(_DWORD *)v96 = 0;
  v97 = v5[450];
  v98 = *(_DWORD *)(v97 + 8);
  *(_DWORD *)v96 = v97 >> 4;
  *(_DWORD *)(v96 + 4) = v98;
  *(_QWORD *)(v96 + 8) = WebCore::jsServiceWorkerGlobalScope_ClientConstructor;
  *(_QWORD *)(v96 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_136:
  v99 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 136))(v99) + 464) & 0x80) == 0)
    goto LABEL_142;
  v100 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v100 = v5[2];
    if ((v100 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v100 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_139;
    }
    v208 = *(_QWORD *)(v100 + 8) ^ v5[3];
    v5[1] = v100 + HIDWORD(v208);
    v5[2] = v100 + (int)v208;
  }
  *v5 = v100 + 32;
LABEL_139:
  *(_DWORD *)v100 = 0;
  v101 = v5[450];
  v102 = *(_DWORD *)(v101 + 8);
  *(_DWORD *)v100 = v101 >> 4;
  *(_DWORD *)(v100 + 4) = v102;
  *(_QWORD *)(v100 + 8) = WebCore::jsServiceWorkerGlobalScope_ClientsConstructor;
  *(_QWORD *)(v100 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_142:
  v103 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 136))(v103) + 464) & 0x80) == 0)
    goto LABEL_148;
  v104 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v104 = v5[2];
    if ((v104 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v104 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_145;
    }
    v209 = *(_QWORD *)(v104 + 8) ^ v5[3];
    v5[1] = v104 + HIDWORD(v209);
    v5[2] = v104 + (int)v209;
  }
  *v5 = v104 + 32;
LABEL_145:
  *(_DWORD *)v104 = 0;
  v105 = v5[450];
  v106 = *(_DWORD *)(v105 + 8);
  *(_DWORD *)v104 = v105 >> 4;
  *(_DWORD *)(v104 + 4) = v106;
  *(_QWORD *)(v104 + 8) = WebCore::jsServiceWorkerGlobalScope_ServiceWorkerGlobalScopeConstructor;
  *(_QWORD *)(v104 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_148:
  v107 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 136))(v107) + 464) & 0x80) == 0)
    goto LABEL_154;
  v108 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v108 = v5[2];
    if ((v108 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v108 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_151;
    }
    v210 = *(_QWORD *)(v108 + 8) ^ v5[3];
    v5[1] = v108 + HIDWORD(v210);
    v5[2] = v108 + (int)v210;
  }
  *v5 = v108 + 32;
LABEL_151:
  *(_DWORD *)v108 = 0;
  v109 = v5[450];
  v110 = *(_DWORD *)(v109 + 8);
  *(_DWORD *)v108 = v109 >> 4;
  *(_DWORD *)(v108 + 4) = v110;
  *(_QWORD *)(v108 + 8) = WebCore::jsServiceWorkerGlobalScope_WindowClientConstructor;
  *(_QWORD *)(v108 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_154:
  v111 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 136))(v111) + 464) & 0x80) == 0)
    goto LABEL_161;
  v112 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 136))(v112) + 432) & 0x2000000000) == 0)
    goto LABEL_161;
  v113 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v113 = v5[2];
    if ((v113 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v113 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_158;
    }
    v218 = *(_QWORD *)(v113 + 8) ^ v5[3];
    v5[1] = v113 + HIDWORD(v218);
    v5[2] = v113 + (int)v218;
  }
  *v5 = v113 + 32;
LABEL_158:
  *(_DWORD *)v113 = 0;
  v114 = v5[450];
  v115 = *(_DWORD *)(v114 + 8);
  *(_DWORD *)v113 = v114 >> 4;
  *(_DWORD *)(v113 + 4) = v115;
  *(_QWORD *)(v113 + 8) = WebCore::jsServiceWorkerGlobalScope_BackgroundFetchEventConstructor;
  *(_QWORD *)(v113 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_161:
  v116 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v116 + 136))(v116) + 464) & 0x80) == 0)
    goto LABEL_168;
  v117 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 136))(v117) + 456) & 0x4000000000) == 0)
    goto LABEL_168;
  v118 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v118 = v5[2];
    if ((v118 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v118 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_165;
    }
    v219 = *(_QWORD *)(v118 + 8) ^ v5[3];
    v5[1] = v118 + HIDWORD(v219);
    v5[2] = v118 + (int)v219;
  }
  *v5 = v118 + 32;
LABEL_165:
  *(_DWORD *)v118 = 0;
  v119 = v5[450];
  v120 = *(_DWORD *)(v119 + 8);
  *(_DWORD *)v118 = v119 >> 4;
  *(_DWORD *)(v118 + 4) = v120;
  *(_QWORD *)(v118 + 8) = WebCore::jsServiceWorkerGlobalScope_onpush;
  *(_QWORD *)(v118 + 16) = WebCore::setJSServiceWorkerGlobalScope_onpush;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_168:
  v121 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 136))(v121) + 464) & 0x80) == 0)
    goto LABEL_175;
  v122 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 136))(v122) + 456) & 0x4000000000) == 0)
    goto LABEL_175;
  v123 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v123 = v5[2];
    if ((v123 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v123 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_172;
    }
    v220 = *(_QWORD *)(v123 + 8) ^ v5[3];
    v5[1] = v123 + HIDWORD(v220);
    v5[2] = v123 + (int)v220;
  }
  *v5 = v123 + 32;
LABEL_172:
  *(_DWORD *)v123 = 0;
  v124 = v5[450];
  v125 = *(_DWORD *)(v124 + 8);
  *(_DWORD *)v123 = v124 >> 4;
  *(_DWORD *)(v123 + 4) = v125;
  *(_QWORD *)(v123 + 8) = WebCore::jsServiceWorkerGlobalScope_onpushsubscriptionchange;
  *(_QWORD *)(v123 + 16) = WebCore::setJSServiceWorkerGlobalScope_onpushsubscriptionchange;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_175:
  v126 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 136))(v126) + 464) & 0x80) == 0)
    goto LABEL_182;
  v127 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v127 + 136))(v127) + 432) & 0x2000000000) == 0)
    goto LABEL_182;
  v128 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v128 = v5[2];
    if ((v128 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v128 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_179;
    }
    v221 = *(_QWORD *)(v128 + 8) ^ v5[3];
    v5[1] = v128 + HIDWORD(v221);
    v5[2] = v128 + (int)v221;
  }
  *v5 = v128 + 32;
LABEL_179:
  *(_DWORD *)v128 = 0;
  v129 = v5[450];
  v130 = *(_DWORD *)(v129 + 8);
  *(_DWORD *)v128 = v129 >> 4;
  *(_DWORD *)(v128 + 4) = v130;
  *(_QWORD *)(v128 + 8) = WebCore::jsServiceWorkerGlobalScope_onbackgroundfetchsuccess;
  *(_QWORD *)(v128 + 16) = WebCore::setJSServiceWorkerGlobalScope_onbackgroundfetchsuccess;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_182:
  v131 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 136))(v131) + 464) & 0x80) == 0)
    goto LABEL_189;
  v132 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 136))(v132) + 432) & 0x2000000000) == 0)
    goto LABEL_189;
  v133 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v133 = v5[2];
    if ((v133 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v133 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_186;
    }
    v222 = *(_QWORD *)(v133 + 8) ^ v5[3];
    v5[1] = v133 + HIDWORD(v222);
    v5[2] = v133 + (int)v222;
  }
  *v5 = v133 + 32;
LABEL_186:
  *(_DWORD *)v133 = 0;
  v134 = v5[450];
  v135 = *(_DWORD *)(v134 + 8);
  *(_DWORD *)v133 = v134 >> 4;
  *(_DWORD *)(v133 + 4) = v135;
  *(_QWORD *)(v133 + 8) = WebCore::jsServiceWorkerGlobalScope_onbackgroundfetchfail;
  *(_QWORD *)(v133 + 16) = WebCore::setJSServiceWorkerGlobalScope_onbackgroundfetchfail;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_189:
  v136 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v136 + 136))(v136) + 464) & 0x80) == 0)
    goto LABEL_196;
  v137 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 136))(v137) + 432) & 0x2000000000) == 0)
    goto LABEL_196;
  v138 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v138 = v5[2];
    if ((v138 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v138 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_193;
    }
    v223 = *(_QWORD *)(v138 + 8) ^ v5[3];
    v5[1] = v138 + HIDWORD(v223);
    v5[2] = v138 + (int)v223;
  }
  *v5 = v138 + 32;
LABEL_193:
  *(_DWORD *)v138 = 0;
  v139 = v5[450];
  v140 = *(_DWORD *)(v139 + 8);
  *(_DWORD *)v138 = v139 >> 4;
  *(_DWORD *)(v138 + 4) = v140;
  *(_QWORD *)(v138 + 8) = WebCore::jsServiceWorkerGlobalScope_onbackgroundfetchabort;
  *(_QWORD *)(v138 + 16) = WebCore::setJSServiceWorkerGlobalScope_onbackgroundfetchabort;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_196:
  v141 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 136))(v141) + 464) & 0x80) == 0)
    goto LABEL_203;
  v142 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 136))(v142) + 432) & 0x2000000000) == 0)
    goto LABEL_203;
  v143 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v143 = v5[2];
    if ((v143 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v143 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_200;
    }
    v224 = *(_QWORD *)(v143 + 8) ^ v5[3];
    v5[1] = v143 + HIDWORD(v224);
    v5[2] = v143 + (int)v224;
  }
  *v5 = v143 + 32;
LABEL_200:
  *(_DWORD *)v143 = 0;
  v144 = v5[450];
  v145 = *(_DWORD *)(v144 + 8);
  *(_DWORD *)v143 = v144 >> 4;
  *(_DWORD *)(v143 + 4) = v145;
  *(_QWORD *)(v143 + 8) = WebCore::jsServiceWorkerGlobalScope_onbackgroundfetchclick;
  *(_QWORD *)(v143 + 16) = WebCore::setJSServiceWorkerGlobalScope_onbackgroundfetchclick;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_203:
  v146 = *v5;
  if (*v5 < (unint64_t)v5[1])
  {
LABEL_204:
    *v5 = v146 + 32;
    goto LABEL_205;
  }
  v146 = v5[2];
  if ((v146 & 1) == 0)
  {
    v183 = *(_QWORD *)(v146 + 8) ^ v5[3];
    v5[1] = v146 + HIDWORD(v183);
    v5[2] = v146 + (int)v183;
    goto LABEL_204;
  }
  JSC::sanitizeStackForVM();
  v146 = JSC::LocalAllocator::allocateSlowCase();
LABEL_205:
  *(_DWORD *)v146 = 0;
  v147 = v5[450];
  v148 = *(_DWORD *)(v147 + 8);
  *(_DWORD *)v146 = v147 >> 4;
  *(_DWORD *)(v146 + 4) = v148;
  *(_QWORD *)(v146 + 8) = WebCore::jsServiceWorkerGlobalScope_ReadableByteStreamControllerConstructor;
  *(_QWORD *)(v146 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v149 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_208;
  v149 = v5[2];
  if ((v149 & 1) == 0)
  {
    v184 = *(_QWORD *)(v149 + 8) ^ v5[3];
    v5[1] = v149 + HIDWORD(v184);
    v5[2] = v149 + (int)v184;
LABEL_208:
    *v5 = v149 + 32;
    goto LABEL_209;
  }
  JSC::sanitizeStackForVM();
  v149 = JSC::LocalAllocator::allocateSlowCase();
LABEL_209:
  *(_DWORD *)v149 = 0;
  v150 = v5[450];
  v151 = *(_DWORD *)(v150 + 8);
  *(_DWORD *)v149 = v150 >> 4;
  *(_DWORD *)(v149 + 4) = v151;
  *(_QWORD *)(v149 + 8) = WebCore::jsServiceWorkerGlobalScope_ReadableStreamConstructor;
  *(_QWORD *)(v149 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v152 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_212;
  v152 = v5[2];
  if ((v152 & 1) == 0)
  {
    v185 = *(_QWORD *)(v152 + 8) ^ v5[3];
    v5[1] = v152 + HIDWORD(v185);
    v5[2] = v152 + (int)v185;
LABEL_212:
    *v5 = v152 + 32;
    goto LABEL_213;
  }
  JSC::sanitizeStackForVM();
  v152 = JSC::LocalAllocator::allocateSlowCase();
LABEL_213:
  *(_DWORD *)v152 = 0;
  v153 = v5[450];
  v154 = *(_DWORD *)(v153 + 8);
  *(_DWORD *)v152 = v153 >> 4;
  *(_DWORD *)(v152 + 4) = v154;
  *(_QWORD *)(v152 + 8) = WebCore::jsServiceWorkerGlobalScope_ReadableStreamBYOBReaderConstructor;
  *(_QWORD *)(v152 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v155 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_216;
  v155 = v5[2];
  if ((v155 & 1) == 0)
  {
    v186 = *(_QWORD *)(v155 + 8) ^ v5[3];
    v5[1] = v155 + HIDWORD(v186);
    v5[2] = v155 + (int)v186;
LABEL_216:
    *v5 = v155 + 32;
    goto LABEL_217;
  }
  JSC::sanitizeStackForVM();
  v155 = JSC::LocalAllocator::allocateSlowCase();
LABEL_217:
  *(_DWORD *)v155 = 0;
  v156 = v5[450];
  v157 = *(_DWORD *)(v156 + 8);
  *(_DWORD *)v155 = v156 >> 4;
  *(_DWORD *)(v155 + 4) = v157;
  *(_QWORD *)(v155 + 8) = WebCore::jsServiceWorkerGlobalScope_ReadableStreamBYOBRequestConstructor;
  *(_QWORD *)(v155 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v158 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_220;
  v158 = v5[2];
  if ((v158 & 1) == 0)
  {
    v187 = *(_QWORD *)(v158 + 8) ^ v5[3];
    v5[1] = v158 + HIDWORD(v187);
    v5[2] = v158 + (int)v187;
LABEL_220:
    *v5 = v158 + 32;
    goto LABEL_221;
  }
  JSC::sanitizeStackForVM();
  v158 = JSC::LocalAllocator::allocateSlowCase();
LABEL_221:
  *(_DWORD *)v158 = 0;
  v159 = v5[450];
  v160 = *(_DWORD *)(v159 + 8);
  *(_DWORD *)v158 = v159 >> 4;
  *(_DWORD *)(v158 + 4) = v160;
  *(_QWORD *)(v158 + 8) = WebCore::jsServiceWorkerGlobalScope_ReadableStreamDefaultControllerConstructor;
  *(_QWORD *)(v158 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v161 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_224;
  v161 = v5[2];
  if ((v161 & 1) == 0)
  {
    v188 = *(_QWORD *)(v161 + 8) ^ v5[3];
    v5[1] = v161 + HIDWORD(v188);
    v5[2] = v161 + (int)v188;
LABEL_224:
    *v5 = v161 + 32;
    goto LABEL_225;
  }
  JSC::sanitizeStackForVM();
  v161 = JSC::LocalAllocator::allocateSlowCase();
LABEL_225:
  *(_DWORD *)v161 = 0;
  v162 = v5[450];
  v163 = *(_DWORD *)(v162 + 8);
  *(_DWORD *)v161 = v162 >> 4;
  *(_DWORD *)(v161 + 4) = v163;
  *(_QWORD *)(v161 + 8) = WebCore::jsServiceWorkerGlobalScope_ReadableStreamDefaultReaderConstructor;
  *(_QWORD *)(v161 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v164 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_228;
  v164 = v5[2];
  if ((v164 & 1) == 0)
  {
    v189 = *(_QWORD *)(v164 + 8) ^ v5[3];
    v5[1] = v164 + HIDWORD(v189);
    v5[2] = v164 + (int)v189;
LABEL_228:
    *v5 = v164 + 32;
    goto LABEL_229;
  }
  JSC::sanitizeStackForVM();
  v164 = JSC::LocalAllocator::allocateSlowCase();
LABEL_229:
  *(_DWORD *)v164 = 0;
  v165 = v5[450];
  v166 = *(_DWORD *)(v165 + 8);
  *(_DWORD *)v164 = v165 >> 4;
  *(_DWORD *)(v164 + 4) = v166;
  *(_QWORD *)(v164 + 8) = WebCore::jsServiceWorkerGlobalScope_TransformStreamConstructor;
  *(_QWORD *)(v164 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v167 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_232;
  v167 = v5[2];
  if ((v167 & 1) == 0)
  {
    v190 = *(_QWORD *)(v167 + 8) ^ v5[3];
    v5[1] = v167 + HIDWORD(v190);
    v5[2] = v167 + (int)v190;
LABEL_232:
    *v5 = v167 + 32;
    goto LABEL_233;
  }
  JSC::sanitizeStackForVM();
  v167 = JSC::LocalAllocator::allocateSlowCase();
LABEL_233:
  *(_DWORD *)v167 = 0;
  v168 = v5[450];
  v169 = *(_DWORD *)(v168 + 8);
  *(_DWORD *)v167 = v168 >> 4;
  *(_DWORD *)(v167 + 4) = v169;
  *(_QWORD *)(v167 + 8) = WebCore::jsServiceWorkerGlobalScope_TransformStreamDefaultControllerConstructor;
  *(_QWORD *)(v167 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v170 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_236;
  v170 = v5[2];
  if ((v170 & 1) == 0)
  {
    v191 = *(_QWORD *)(v170 + 8) ^ v5[3];
    v5[1] = v170 + HIDWORD(v191);
    v5[2] = v170 + (int)v191;
LABEL_236:
    *v5 = v170 + 32;
    goto LABEL_237;
  }
  JSC::sanitizeStackForVM();
  v170 = JSC::LocalAllocator::allocateSlowCase();
LABEL_237:
  *(_DWORD *)v170 = 0;
  v171 = v5[450];
  v172 = *(_DWORD *)(v171 + 8);
  *(_DWORD *)v170 = v171 >> 4;
  *(_DWORD *)(v170 + 4) = v172;
  *(_QWORD *)(v170 + 8) = WebCore::jsServiceWorkerGlobalScope_WritableStreamConstructor;
  *(_QWORD *)(v170 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v173 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_240;
  v173 = v5[2];
  if ((v173 & 1) == 0)
  {
    v192 = *(_QWORD *)(v173 + 8) ^ v5[3];
    v5[1] = v173 + HIDWORD(v192);
    v5[2] = v173 + (int)v192;
LABEL_240:
    *v5 = v173 + 32;
    goto LABEL_241;
  }
  JSC::sanitizeStackForVM();
  v173 = JSC::LocalAllocator::allocateSlowCase();
LABEL_241:
  *(_DWORD *)v173 = 0;
  v174 = v5[450];
  v175 = *(_DWORD *)(v174 + 8);
  *(_DWORD *)v173 = v174 >> 4;
  *(_DWORD *)(v173 + 4) = v175;
  *(_QWORD *)(v173 + 8) = WebCore::jsServiceWorkerGlobalScope_WritableStreamDefaultControllerConstructor;
  *(_QWORD *)(v173 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v176 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_244;
  v176 = v5[2];
  if ((v176 & 1) == 0)
  {
    v193 = *(_QWORD *)(v176 + 8) ^ v5[3];
    v5[1] = v176 + HIDWORD(v193);
    v5[2] = v176 + (int)v193;
LABEL_244:
    *v5 = v176 + 32;
    goto LABEL_245;
  }
  JSC::sanitizeStackForVM();
  v176 = JSC::LocalAllocator::allocateSlowCase();
LABEL_245:
  *(_DWORD *)v176 = 0;
  v177 = v5[450];
  v178 = *(_DWORD *)(v177 + 8);
  *(_DWORD *)v176 = v177 >> 4;
  *(_DWORD *)(v176 + 4) = v178;
  *(_QWORD *)(v176 + 8) = WebCore::jsServiceWorkerGlobalScope_WritableStreamDefaultWriterConstructor;
  *(_QWORD *)(v176 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v179 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_248;
  v179 = v5[2];
  if ((v179 & 1) == 0)
  {
    v194 = *(_QWORD *)(v179 + 8) ^ v5[3];
    v5[1] = v179 + HIDWORD(v194);
    v5[2] = v179 + (int)v194;
LABEL_248:
    *v5 = v179 + 32;
    goto LABEL_249;
  }
  JSC::sanitizeStackForVM();
  v179 = JSC::LocalAllocator::allocateSlowCase();
LABEL_249:
  *(_DWORD *)v179 = 0;
  v180 = v5[450];
  v181 = *(_DWORD *)(v180 + 8);
  *(_DWORD *)v179 = v180 >> 4;
  *(_DWORD *)(v179 + 4) = v181;
  *(_QWORD *)(v179 + 8) = WebCore::jsServiceWorkerGlobalScope_AbortSignalConstructor;
  *(_QWORD *)(v179 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  return JSC::JSObject::putDirectCustomAccessor();
}

unint64_t WebCore::jsServiceWorkerGlobalScope_cookieStore(JSC::JSCell *a1, JSC::JSCell *a2)
{
  int v2;
  uint64_t Object;
  WebCore::CookieStore **v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::CookieStore *v10;
  uint64_t v11;
  void *v12;
  WebCore::CookieStore *v13;
  uint64_t v15;
  BOOL v16;
  char **v17;
  BOOL v18;
  bmalloc::api *v20;
  void *v21;
  uint64_t v22;

  v2 = (int)a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = (WebCore::CookieStore **)Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v15 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v16 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v17 = (char **)(16 * v15);
    if ((_DWORD)v15)
      v18 = v17 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v18 = 1;
    if (!v18)
    {
      do
      {
        v17 = (char **)v17[2];
        v16 = v17 != 0;
      }
      while (v17 != &WebCore::JSServiceWorkerGlobalScope::s_info && v17 != 0);
    }
    if (v16)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(WebCore::CookieStore ***)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = v4[425];
  v11 = *((_QWORD *)v10 + 246);
  if (!v11)
  {
    WebCore::CookieStore::create(v4[425], &v22);
    v11 = v22;
    v13 = (WebCore::CookieStore *)*((_QWORD *)v10 + 246);
    *((_QWORD *)v10 + 246) = v22;
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 1)
      {
        WebCore::CookieStore::~CookieStore(v13, v12);
        bmalloc::api::isoDeallocate(v20, v21);
        v11 = *((_QWORD *)v10 + 246);
      }
      else
      {
        --*((_DWORD *)v13 + 6);
      }
    }
  }
  return WebCore::wrap<WebCore::CookieStore>(v2, (JSC::VM *)v4, v11);
}

uint64_t WebCore::jsServiceWorkerGlobalScope_oncookiechange(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 512), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_oncookiechange(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 512), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_onnotificationclick(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 1328), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_onnotificationclick(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 1328), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_onnotificationclose(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 1336), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_onnotificationclose(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 1336), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_CompressionStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 512);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSCompressionStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSCompressionStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 512) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_CompressionStreamEncoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSCompressionStreamEncoder>,(WebCore::DOMConstructorID)65>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSCompressionStreamEncoder>,(WebCore::DOMConstructorID)65>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_DecompressionStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 528);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSDecompressionStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSDecompressionStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 528) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_DecompressionStreamDecoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDecompressionStreamDecoder>,(WebCore::DOMConstructorID)67>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDecompressionStreamDecoder>,(WebCore::DOMConstructorID)67>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_CookieStoreConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSCookieStore>,(WebCore::DOMConstructorID)70>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSCookieStore>,(WebCore::DOMConstructorID)70>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_CookieStoreManagerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSCookieStoreManager>,(WebCore::DOMConstructorID)71>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSCookieStoreManager>,(WebCore::DOMConstructorID)71>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ExtendableCookieChangeEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableCookieChangeEvent>,(WebCore::DOMConstructorID)72>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableCookieChangeEvent>,(WebCore::DOMConstructorID)72>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_NotificationConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSNotification>,(WebCore::DOMConstructorID)174>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSNotification>,(WebCore::DOMConstructorID)174>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_NotificationEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSNotificationEvent>,(WebCore::DOMConstructorID)175>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSNotificationEvent>,(WebCore::DOMConstructorID)175>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_PushEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPushEvent>,(WebCore::DOMConstructorID)186>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPushEvent>,(WebCore::DOMConstructorID)186>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_PushMessageDataConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPushMessageData>,(WebCore::DOMConstructorID)188>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPushMessageData>,(WebCore::DOMConstructorID)188>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_PushNotificationEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPushNotificationEvent>,(WebCore::DOMConstructorID)189>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPushNotificationEvent>,(WebCore::DOMConstructorID)189>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_PushSubscriptionChangeEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPushSubscriptionChangeEvent>,(WebCore::DOMConstructorID)191>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPushSubscriptionChangeEvent>,(WebCore::DOMConstructorID)191>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ExtendableEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableEvent>,(WebCore::DOMConstructorID)899>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableEvent>,(WebCore::DOMConstructorID)899>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ExtendableMessageEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableMessageEvent>,(WebCore::DOMConstructorID)900>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableMessageEvent>,(WebCore::DOMConstructorID)900>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_FetchEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFetchEvent>,(WebCore::DOMConstructorID)901>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFetchEvent>,(WebCore::DOMConstructorID)901>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ClientConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerClient>,(WebCore::DOMConstructorID)904>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerClient>,(WebCore::DOMConstructorID)904>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ClientsConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerClients>,(WebCore::DOMConstructorID)905>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerClients>,(WebCore::DOMConstructorID)905>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ServiceWorkerGlobalScopeConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerGlobalScope>,(WebCore::DOMConstructorID)907>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerGlobalScope>,(WebCore::DOMConstructorID)907>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_WindowClientConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerWindowClient>,(WebCore::DOMConstructorID)909>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerWindowClient>,(WebCore::DOMConstructorID)909>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_BackgroundFetchEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSBackgroundFetchEvent>,(WebCore::DOMConstructorID)910>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSBackgroundFetchEvent>,(WebCore::DOMConstructorID)910>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_onpush(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 1592), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_onpush(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 1592), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_onpushsubscriptionchange(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 1608), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_onpushsubscriptionchange(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 1608), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_onbackgroundfetchsuccess(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 216), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_onbackgroundfetchsuccess(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 216), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_onbackgroundfetchfail(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 208), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_onbackgroundfetchfail(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 208), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_onbackgroundfetchabort(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 192), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_onbackgroundfetchabort(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 192), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_onbackgroundfetchclick(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 200), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_onbackgroundfetchclick(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 200), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ReadableByteStreamControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1720);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableByteStreamController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableByteStreamController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1720) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ReadableStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSReadableStream>,(WebCore::DOMConstructorID)216>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSReadableStream>,(WebCore::DOMConstructorID)216>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ReadableStreamBYOBReaderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1736);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBReader>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBReader>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1736) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ReadableStreamBYOBRequestConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1744);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBRequest>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBRequest>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1744) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ReadableStreamDefaultControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1752);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1752) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ReadableStreamDefaultReaderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1760);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultReader>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultReader>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1760) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_TransformStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTransformStream>,(WebCore::DOMConstructorID)223>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTransformStream>,(WebCore::DOMConstructorID)223>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_TransformStreamDefaultControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1792);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTransformStreamDefaultController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSTransformStreamDefaultController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1792) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_WritableStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWritableStream>,(WebCore::DOMConstructorID)225>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWritableStream>,(WebCore::DOMConstructorID)225>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_WritableStreamDefaultControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1808);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1808) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_WritableStreamDefaultWriterConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1816);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultWriter>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultWriter>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1816) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_AbortSignalConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbortSignal>,(WebCore::DOMConstructorID)412>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbortSignal>,(WebCore::DOMConstructorID)412>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerGlobalScope>,(WebCore::DOMConstructorID)907>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7256);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWorkerGlobalScope>,(WebCore::DOMConstructorID)897>(a1, a2);
  v7 = v6;
  LODWORD(v21) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerGlobalScope>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v20);
    v10[2848] = v2 + (int)v20;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v21);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v21);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
  if (!v17)
    v17 = *(_QWORD *)(a2 + 16);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7256) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsServiceWorkerGlobalScopeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSServiceWorkerGlobalScopePrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerGlobalScope>,(WebCore::DOMConstructorID)907>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsServiceWorkerGlobalScope_clients(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WTF *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  unint64_t SlowCase;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  int v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v31;
  JSC::Structure *v32;
  JSC::JSCell *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  BOOL v42;
  char **v43;
  BOOL v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *Allocator;
  unint64_t v61;
  _QWORD *v62;
  WTF *v63;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v3 = Object;
  if (*(_BYTE *)(Object + 5) == 32)
  {
    v3 = *(_QWORD *)(Object + 16);
    v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
    v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
    v6 = (char **)(16 * v4);
    if ((_DWORD)v4)
      v7 = v6 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v7 = 1;
    if (!v7)
    {
      do
      {
        v6 = (char **)v6[2];
        v5 = v6 != 0;
      }
      while (v6 != &WebCore::JSServiceWorkerGlobalScope::s_info && v6 != 0);
    }
    if (v5)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v41 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v42 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v43 = (char **)(16 * v41);
  if ((_DWORD)v41)
    v44 = v43 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v44 = 1;
  if (!v44)
  {
    do
    {
      v43 = (char **)v43[2];
      v42 = v43 != 0;
    }
    while (v43 != &WebCore::JSServiceWorkerGlobalScope::s_info && v43 != 0);
  }
  if (!v42)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v9 = *(WTF **)(*(_QWORD *)(v3 + 3400) + 1824);
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 - 8);
    v12 = ((unint64_t)v9 + ~((_QWORD)v9 << 32)) ^ (((unint64_t)v9 + ~((_QWORD)v9 << 32)) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(WTF **)(v10 + 16 * v15);
    if (v16 == v9)
    {
LABEL_21:
      v18 = *(_QWORD *)(v10 + 16 * v15 + 8);
      if (v18)
      {
        if ((*(_BYTE *)(v18 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v18;
          if (*(_QWORD *)v18)
            return SlowCase;
        }
      }
    }
    else
    {
      v17 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v17) & v11;
        v16 = *(WTF **)(v10 + 16 * v15);
        ++v17;
        if (v16 == v9)
          goto LABEL_21;
      }
    }
  }
  ++*(_DWORD *)v9;
  v20 = *(_QWORD *)(v3 + 3296);
  if (v20)
  {
    v21 = *(_DWORD *)(v20 - 8);
    v22 = ((unint64_t)&WebCore::JSServiceWorkerClients::s_info
         + ~((_QWORD)&WebCore::JSServiceWorkerClients::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorkerClients::s_info
                                                                        + ~((_QWORD)&WebCore::JSServiceWorkerClients::s_info << 32)) >> 22);
    v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
    v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
    v25 = v21 & ((v24 >> 31) ^ v24);
    v26 = *(char ***)(v20 + 16 * v25);
    if (v26 == &WebCore::JSServiceWorkerClients::s_info)
    {
LABEL_29:
      v28 = *(_QWORD *)(v20 + 16 * v25 + 8);
      if (v28)
        goto LABEL_31;
    }
    else
    {
      v27 = 1;
      while (v26)
      {
        v25 = ((_DWORD)v25 + v27) & v21;
        v26 = *(char ***)(v20 + 16 * v25);
        ++v27;
        if (v26 == &WebCore::JSServiceWorkerClients::s_info)
          goto LABEL_29;
      }
    }
  }
  v29 = *(uint64_t **)(v3 + 56);
  Structure = WebCore::JSServiceWorkerClientsPrototype::createStructure(v29, v3, *(JSC::JSCell **)(v3 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v33 = (JSC::JSCell *)WebCore::JSServiceWorkerClientsPrototype::create((WebCore::JSServiceWorkerClientsPrototype *)v29, Structure, v31, v32);
  v34 = WebCore::JSServiceWorkerClients::createStructure(v29, v3, v33);
  v28 = WebCore::cacheDOMStructure((JSCell *)v3, v34, (uint64_t)&WebCore::JSServiceWorkerClients::s_info);
LABEL_31:
  v35 = *(_QWORD *)(v3 + 56);
  v36 = *(_QWORD *)(v35 + 41456);
  v37 = *(_QWORD *)(v36 + 23536);
  v38 = *(_QWORD **)(v37 + 7320);
  if (v38)
    goto LABEL_62;
  v39 = *(_QWORD *)(v36 + 22648);
  if (__ldaxr((unsigned __int8 *)v39))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v39))
  {
    goto LABEL_47;
  }
  MEMORY[0x19AEA534C](v39);
LABEL_47:
  v46 = *(_QWORD *)(v39 + 2824);
  if (!*(_QWORD *)(v46 + 7320))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v63, "IsoSpace T");
    v62 = 0;
    MEMORY[0x19AEA3204](v47, &v63, v35 + 192, v35 + 1872, 32, 8, &v62);
    v49 = (uint64_t)v62;
    v62 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v63;
    v63 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 7320);
    *(_QWORD *)(v46 + 7320) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v37 + 7320);
  *(_QWORD *)(v37 + 7320) = v38;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v39);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_61;
  }
  if (__stlxr(0, (unsigned __int8 *)v39))
LABEL_61:
    WTF::Lock::unlockSlow((WTF::Lock *)v39);
LABEL_62:
  SlowCase = v38[3];
  if (SlowCase >= v38[4])
  {
    SlowCase = v38[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_64;
    }
    v61 = *(_QWORD *)(SlowCase + 8) ^ v38[6];
    v38[4] = SlowCase + HIDWORD(v61);
    v38[5] = SlowCase + (int)v61;
  }
  v38[3] = SlowCase + 32;
LABEL_64:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v28);
  *(_QWORD *)(SlowCase + 24) = v9;
  if (*(_BYTE *)(v35 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(v3 + 3320);
  if ((byte_1EE3369A0 & 1) == 0)
  {
    qword_1EE336998 = (uint64_t)&off_1E3307BD0;
    byte_1EE3369A0 = 1;
  }
  v63 = v9;
  if ((SlowCase & 8) != 0)
    v57 = (SlowCase - 112) | 1;
  else
    v57 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(_QWORD **)(v58 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336998;
  Allocator[2] = v56;
  v62 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)&v63, (uint64_t *)&v62);
  if (v62)
    v62[1] = 3;
  return SlowCase;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_registration(JSC::JSCell *a1, JSC::JSCell *a2)
{
  int v2;
  uint64_t Object;
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = (int)a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (JSC::VM *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(JSC::VM **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::wrap<WebCore::ServiceWorkerRegistration>(v2, v4, *(_QWORD *)(*((_QWORD *)v4 + 425) + 1808));
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::wrap<WebCore::ServiceWorkerRegistration>(v2, v4, *(_QWORD *)(*((_QWORD *)v4 + 425) + 1808));
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_serviceWorker(JSC::JSCell *a1, JSC::JSCell *a2)
{
  int v2;
  uint64_t Object;
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = (int)a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (JSC::VM *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(JSC::VM **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::wrap<WebCore::ServiceWorker>(v2, v4, *(_QWORD *)(*((_QWORD *)v4 + 425) + 1816));
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::wrap<WebCore::ServiceWorker>(v2, v4, *(_QWORD *)(*((_QWORD *)v4 + 425) + 1816));
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_oninstall(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 1024), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_oninstall(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 1024), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_onactivate(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 72), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_onactivate(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 72), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_onfetch(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 800), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_onfetch(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 800), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_onmessage(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 1192), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_onmessage(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 1192), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_onmessageerror(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 1200), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSServiceWorkerGlobalScope_onmessageerror(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSServiceWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSServiceWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 1200), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ByteLengthQueuingStrategyConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1704);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSByteLengthQueuingStrategy>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSByteLengthQueuingStrategy>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1704) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_CountQueuingStrategyConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1712);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSCountQueuingStrategy>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSCountQueuingStrategy>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1712) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_AbortControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAbortController>,(WebCore::DOMConstructorID)411>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAbortController>,(WebCore::DOMConstructorID)411>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_CustomEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  JSC::JSCell *v12;
  uint64_t Structure;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSServiceWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3392);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    v12 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(v11, v4);
    Structure = WebCore::JSDOMConstructor<WebCore::JSCustomEvent>::createStructure((uint64_t *)v11, v4, v12);
    v10 = WebCore::JSDOMConstructor<WebCore::JSCustomEvent>::create(v11, Structure, (JSC::VM *)v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3392) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_ErrorEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSErrorEvent>,(WebCore::DOMConstructorID)447>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSErrorEvent>,(WebCore::DOMConstructorID)447>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_EventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_EventTargetConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_PromiseRejectionEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPromiseRejectionEvent>,(WebCore::DOMConstructorID)476>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPromiseRejectionEvent>,(WebCore::DOMConstructorID)476>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_TextDecoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDecoder>,(WebCore::DOMConstructorID)482>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDecoder>,(WebCore::DOMConstructorID)482>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_TextDecoderStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3864);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextDecoderStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextDecoderStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3864) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_TextEncoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextEncoder>,(WebCore::DOMConstructorID)485>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextEncoder>,(WebCore::DOMConstructorID)485>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_TextEncoderStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3888);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextEncoderStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextEncoderStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3888) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_URLConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDOMURL>,(WebCore::DOMConstructorID)507>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDOMURL>,(WebCore::DOMConstructorID)507>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_URLSearchParamsConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>,(WebCore::DOMConstructorID)598>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>,(WebCore::DOMConstructorID)598>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_PerformanceConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformance>,(WebCore::DOMConstructorID)727>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformance>,(WebCore::DOMConstructorID)727>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_PerformanceEntryConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceEntry>,(WebCore::DOMConstructorID)728>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceEntry>,(WebCore::DOMConstructorID)728>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_PerformanceMarkConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPerformanceMark>,(WebCore::DOMConstructorID)729>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPerformanceMark>,(WebCore::DOMConstructorID)729>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_PerformanceMeasureConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceMeasure>,(WebCore::DOMConstructorID)730>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceMeasure>,(WebCore::DOMConstructorID)730>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_PerformanceObserverConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSServiceWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSServiceWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 5864);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMConstructor<WebCore::JSPerformanceObserver>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMConstructor<WebCore::JSPerformanceObserver>::create(v11, Structure, (JSC::VM *)v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 5864) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsServiceWorkerGlobalScope_PerformanceObserverEntryListConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceObserverEntryList>,(WebCore::DOMConstructorID)734>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceObserverEntryList>,(WebCore::DOMConstructorID)734>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_PerformanceResourceTimingConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceResourceTiming>,(WebCore::DOMConstructorID)736>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceResourceTiming>,(WebCore::DOMConstructorID)736>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsServiceWorkerGlobalScope_PerformanceServerTimingConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSServiceWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceServerTiming>,(WebCore::DOMConstructorID)737>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSServiceWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceServerTiming>,(WebCore::DOMConstructorID)737>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::JSServiceWorkerGlobalScope::subspaceForImpl(WebCore::JSServiceWorkerGlobalScope *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7336);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 7336);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, v6 + 224, 3408, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 7336);
    *(_QWORD *)(v8 + 7336) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 7336);
  *(_QWORD *)(v3 + 7336) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSServiceWorkerRegistration::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSServiceWorkerRegistrationPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSServiceWorkerRegistrationPrototype::create(WebCore::JSServiceWorkerRegistrationPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v5;
  unint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  JSC::Structure *v41;
  int v42;
  unint64_t v44;
  JSC::VM *v45;
  uint64_t SlowCase;
  WTF::StringImpl *v47[6];
  int v48;
  int v49;
  JSC::Structure *v50;
  int v51;

  v5 = (_QWORD *)((char *)this + 38904);
  v6 = *((_QWORD *)this + 4863);
  if (v6 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v6 = *((_QWORD *)this + 4865);
  if ((v6 & 1) == 0)
  {
    v44 = *(_QWORD *)(v6 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v6 + HIDWORD(v44);
    *((_QWORD *)this + 4865) = v6 + (int)v44;
LABEL_2:
    *v5 = v6 + 16;
    goto LABEL_3;
  }
  v45 = (JSC::VM *)a2;
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
  a2 = (unint64_t)v45;
  v6 = SlowCase;
LABEL_3:
  v7 = (int *)((char *)this + 93124);
  *(_DWORD *)v6 = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v8;
  *(_QWORD *)(v6 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<15u>(this, (uint64_t)&WebCore::JSServiceWorkerRegistration::s_info, (uint64_t)&WebCore::JSServiceWorkerRegistrationPrototypeTableValues, (JSC::JSObject *)v6);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                         + 0x28));
  v10 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 480);
  v11 = (v10 & 0x400000000) == 0;
  if ((v10 & 0x400000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v12 = v47[0];
    v13 = *v7;
    *v7 = 1;
    LODWORD(v47[0]) = -1;
    WORD2(v47[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v13;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v14);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15) + 480) & 0x400000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v16 = v47[0];
    v17 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v47[0]) = -1;
    WORD2(v47[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v17;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v18);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  v19 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 136))(v19) + 464) & 0x40) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v20 = v47[0];
    v21 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v47[0]) = -1;
    WORD2(v47[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v21;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v22);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  v23 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v23) + 432) & 0x1000000000000000) == 0
    || (v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                                * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                                + 0x28)),
        (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 136))(v24) + 432) & 0x4000000000000000) == 0))
  {
    WTF::AtomStringImpl::addLiteral();
    v25 = v47[0];
    v26 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v47[0]) = -1;
    WORD2(v47[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v26;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v27);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  v28 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 136))(v28) + 456) & 0x4000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v29 = v47[0];
    v30 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v47[0]) = -1;
    WORD2(v47[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v30;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v31);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  v32 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 136))(v32) + 464) & 0x80) != 0
    && (v33 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                                * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                                + 0x28)),
        (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 136))(v33) + 432) & 0x2000000000) != 0))
  {
    if (!v11)
      goto LABEL_33;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v34 = v47[0];
    v35 = *v7;
    *v7 = 1;
    LODWORD(v47[0]) = -1;
    WORD2(v47[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v35;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v36);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE)), this, (JSC::JSObject *)v6);
LABEL_33:
  v37 = *(_QWORD *)(v5[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v39 = JSC::JSString::create((uint64_t)this, v47);
  v40 = v47[0];
  v47[0] = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v38);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = (JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE));
  v51 = *(_DWORD *)v6;
  v50 = v41;
  v42 = JSC::Structure::outOfLineCapacity(v41);
  v48 = 0;
  v49 = v42;
  v47[0] = (WTF::StringImpl *)&v49;
  v47[1] = (WTF::StringImpl *)v6;
  v47[2] = this;
  v47[3] = (WTF::StringImpl *)&v51;
  v47[4] = (WTF::StringImpl *)&v50;
  v47[5] = (WTF::StringImpl *)&v48;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v41, this, v37, 6, (uint64_t)v47);
  if ((*(_BYTE *)((16 * *(unsigned int *)v6) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v6, (uint64_t)this, v48, v39);
  *((_DWORD *)v41 + 4) |= 0x10u;
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerRegistration>,(WebCore::DOMConstructorID)908>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7264);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerRegistration>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSServiceWorkerRegistration::s_info
         + ~((_QWORD)&WebCore::JSServiceWorkerRegistration::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorkerRegistration::s_info
                                                                             + ~((_QWORD)&WebCore::JSServiceWorkerRegistration::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSServiceWorkerRegistration::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSServiceWorkerRegistration::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSServiceWorkerRegistrationPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSServiceWorkerRegistrationPrototype::create((WebCore::JSServiceWorkerRegistrationPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSServiceWorkerRegistration::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSServiceWorkerRegistration::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7264) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsServiceWorkerRegistrationConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSServiceWorkerRegistrationPrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerRegistration>,(WebCore::DOMConstructorID)908>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsServiceWorkerRegistration_installing(int a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 432);
  if (v2)
    return WebCore::wrap<WebCore::ServiceWorker>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

unint64_t WebCore::jsServiceWorkerRegistration_waiting(int a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 440);
  if (v2)
    return WebCore::wrap<WebCore::ServiceWorker>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

unint64_t WebCore::jsServiceWorkerRegistration_active(int a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 448);
  if (v2)
    return WebCore::wrap<WebCore::ServiceWorker>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

unint64_t WebCore::jsServiceWorkerRegistration_navigationPreload(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(WTF **)(v3 + 456);
  if (!v5)
  {
    v5 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v5 = v3;
    v7 = *(WTF **)(v3 + 456);
    *(_QWORD *)(v3 + 456) = v5;
    if (v7)
    {
      WTF::fastFree(v7, v6);
      v5 = *(WTF **)(v3 + 456);
    }
  }
  return WebCore::wrap<WebCore::NavigationPreloadManager>(a1, v4, v5);
}

uint64_t WebCore::jsServiceWorkerRegistration_scope(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 152);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsServiceWorkerRegistration_updateViaCache(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 192);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  if ((byte_1EE33694D & 1) == 0)
  {
    dword_1ECE7A020 += 2;
    byte_1EE33694D = 1;
    dword_1ECE7A040 += 2;
    qword_1EE336AD8 = (uint64_t)&dword_1ECE7A020;
    unk_1EE336AE0 = &dword_1ECE7A040;
    dword_1ECE7A060 += 2;
    qword_1EE336AE8 = (uint64_t)&dword_1ECE7A060;
  }
  v5 = *(_QWORD *)&_MergedGlobals_774[8 * v2 + 400];
  if (!v5)
    return *v4;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v3 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v4;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

unint64_t WebCore::jsServiceWorkerRegistration_cookies(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(WTF **)(v3 + 464);
  if (!v5)
  {
    v5 = (WTF *)WTF::fastMalloc((WTF *)4);
    *(_DWORD *)v5 = 1;
    v7 = *(WTF **)(v3 + 464);
    *(_QWORD *)(v3 + 464) = v5;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WTF::fastFree(v7, v6);
        v5 = *(WTF **)(v3 + 464);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  return WebCore::wrap<WebCore::CookieStoreManager>(a1, v4, v5);
}

uint64_t WebCore::jsServiceWorkerRegistration_onupdatefound(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 2200), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::ServiceWorkerRegistration::~ServiceWorkerRegistration(v5);
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v9;
}

BOOL WebCore::setJSServiceWorkerRegistration_onupdatefound(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSServiceWorkerRegistration::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSServiceWorkerRegistration::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 2200), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::ServiceWorkerRegistration::~ServiceWorkerRegistration(v11);
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

unint64_t WebCore::jsServiceWorkerRegistration_pushManager(uint64_t a1, WebCore::ServiceWorkerRegistrationPushAPI **a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WTF *)WebCore::ServiceWorkerRegistrationPushAPI::pushManager(a2[3], (WebCore::ServiceWorkerRegistration *)a2);
  return WebCore::wrap<WebCore::PushManager>(a1, v3, v4);
}

unint64_t WebCore::jsServiceWorkerRegistration_backgroundFetch(uint64_t a1, WebCore::ServiceWorkerRegistrationBackgroundFetchAPI **a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WTF *)WebCore::ServiceWorkerRegistrationBackgroundFetchAPI::backgroundFetch(a2[3], (WebCore::ServiceWorkerRegistration *)a2);
  return WebCore::wrap<WebCore::BackgroundFetchManager>(a1, v3, v4);
}

uint64_t WebCore::JSServiceWorkerRegistrationOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::ConcurrentPtrHashSet *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t result;
  _QWORD *v21;

  v7 = *a2;
  v8 = *(_QWORD **)(*a2 + 24);
  v9 = v8[6];
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0 || *(_BYTE *)(v10 + 180))
  {
    if (!a5)
      goto LABEL_5;
    goto LABEL_17;
  }
  if (v8[7] || ((*(uint64_t (**)(_QWORD *))(v8[5] + 64))(v8 + 5) & 1) != 0)
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  v8 = *(_QWORD **)(v7 + 24);
  if (a5)
  {
LABEL_17:
    *a5 = "Reachable from ServiceWorkerRegistration";
    a5[1] = 41;
  }
LABEL_5:
  v11 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v12 = (_DWORD *)*((_QWORD *)v11 + 6);
  if ((_DWORD *)((char *)v11 + 56) == v12)
  {
    v21 = v8;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v11, v8);
    v8 = v21;
    if (!(_DWORD)result)
      return result;
LABEL_19:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a4 + 152))(a4, v8);
    return 1;
  }
  v13 = v12[1];
  v14 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = v17;
  while (1)
  {
    v19 = *(_QWORD **)&v12[2 * v18 + 4];
    if (!v19)
      return 0;
    if (v8 == v19)
      goto LABEL_19;
    v18 = (v18 + 1) & v13;
    if (v18 == v17)
    {
      __break(0xC471u);
      JUMPOUT(0x194F79408);
    }
  }
}

void WebCore::JSServiceWorkerRegistrationOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::ServiceWorkerRegistration *v3;
  int v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::ServiceWorkerRegistration *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WebCore::ServiceWorkerRegistration **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 6);
  *((_DWORD *)v3 + 6) = v4 + 1;
  v5 = (_DWORD *)((char *)v3 + 8);
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::ServiceWorkerRegistration **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::ServiceWorkerRegistration **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_14;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_14:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 6) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 6) = v4;
  }
  else
  {
    WebCore::ServiceWorkerRegistration::~ServiceWorkerRegistration(v3);
    bmalloc::api::isoDeallocate(v6, v7);
  }
}

unint64_t WebCore::wrap<WebCore::ServiceWorkerRegistration>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::ServiceWorkerRegistration *__hidden))a3 != off_1E347F3A8)
  {
    __break(0xC471u);
    JUMPOUT(0x194F79AFCLL);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSServiceWorkerRegistration::s_info
         + ~((_QWORD)&WebCore::JSServiceWorkerRegistration::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorkerRegistration::s_info
                                                                             + ~((_QWORD)&WebCore::JSServiceWorkerRegistration::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSServiceWorkerRegistration::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSServiceWorkerRegistration::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSServiceWorkerRegistrationPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSServiceWorkerRegistrationPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSServiceWorkerRegistration::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSServiceWorkerRegistration::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 7344);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 7344);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 7344);
    *(_QWORD *)(v30 + 7344) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 7344);
  *(_QWORD *)(v26 + 7344) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE3369C0 & 1) == 0)
  {
    qword_1EE3369B8 = (uint64_t)&off_1E3307C30;
    byte_1EE3369C0 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3369B8;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE3369B8;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

uint64_t WebCore::JSServiceWorkerWindowClient::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSServiceWorkerClient::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSServiceWorkerClient::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSServiceWorkerClient::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSServiceWorkerWindowClient::createPrototype(WebCore::JSServiceWorkerWindowClient *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSServiceWorkerClient::s_info
      + ~((_QWORD)&WebCore::JSServiceWorkerClient::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorkerClient::s_info
                                                                    + ~((_QWORD)&WebCore::JSServiceWorkerClient::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSServiceWorkerClient::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSServiceWorkerClient::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSServiceWorkerClientPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSServiceWorkerClientPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSServiceWorkerClient::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSServiceWorkerClient::s_info);
  }
  v18 = WebCore::JSServiceWorkerWindowClientPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSServiceWorkerWindowClientPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSServiceWorkerWindowClientPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSServiceWorkerWindowClientPrototype::create(WebCore::JSServiceWorkerWindowClientPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSServiceWorkerWindowClient::s_info, &WebCore::JSServiceWorkerWindowClientPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerWindowClient>,(WebCore::DOMConstructorID)909>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7272);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerClient>,(WebCore::DOMConstructorID)904>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerWindowClient>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSServiceWorkerWindowClient::s_info
       + ~((_QWORD)&WebCore::JSServiceWorkerWindowClient::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorkerWindowClient::s_info
                                                                           + ~((_QWORD)&WebCore::JSServiceWorkerWindowClient::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSServiceWorkerWindowClient::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSServiceWorkerWindowClient::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSServiceWorkerWindowClient::createPrototype((WebCore::JSServiceWorkerWindowClient *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSServiceWorkerWindowClient::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSServiceWorkerWindowClient::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7272) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsServiceWorkerWindowClientConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSServiceWorkerWindowClientPrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerWindowClient>,(WebCore::DOMConstructorID)909>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsServiceWorkerWindowClient_visibilityState(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::VisibilityState>(*(_QWORD *)(a1 + 56), *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 196));
}

uint64_t WebCore::jsServiceWorkerWindowClient_focused(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 197))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsServiceWorkerWindowClient_ancestorOrigins(JSC *a1, uint64_t a2)
{
  return WebCore::JSConverter<WebCore::IDLFrozenArray<WebCore::IDLUSVString>>::convert<WTF::String,0ul>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(a2 + 24) + 208);
}

uint64_t WebCore::JSServiceWorkerWindowClient::subspaceForImpl(WebCore::JSServiceWorkerWindowClient *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7352);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 7352))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 7352);
    *(_QWORD *)(v8 + 7352) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 7352);
  *(_QWORD *)(v3 + 7352) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSShadowRealmGlobalScope::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  uint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 3400));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3400) + 8);
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(WebCore::JSDOMGlobalObject **)v4;
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(v5))
    return JSC::JSSegmentedVariableObject::analyzeHeap();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 3400) + 8);
  if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
    v7 = 0;
  else
    v7 = *(WebCore::JSDOMGlobalObject **)v6;
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v11 = *(_DWORD *)(v10 + 4);
    *(_DWORD *)v10 += 2;
    if (v11 < 0 || (result = (v11 + 4), __OFADD__(v11, 4)))
    {
      v15 = 0;
      goto LABEL_27;
    }
    v12 = (*(unsigned __int8 *)(v10 + 16) >> 2) & 1;
  }
  else
  {
    v12 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, (int8x16_t *)"url ", 4u, v10, &v15);
  if (v15)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v15);
    v14 = v15;
    v15 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v13);
        if (v10)
        {
LABEL_17:
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v10, v13);
          else
            *(_DWORD *)v10 -= 2;
        }
        return JSC::JSSegmentedVariableObject::analyzeHeap();
      }
      *(_DWORD *)v14 -= 2;
    }
    if (v10)
      goto LABEL_17;
    return JSC::JSSegmentedVariableObject::analyzeHeap();
  }
LABEL_27:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSShadowRealmGlobalScope::finishCreation(unint64_t this, JSC::VM *a2, JSC::JSGlobalProxy *a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *Allocator;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t SlowCase;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t result;
  uint64_t v192;
  unint64_t v193;
  int v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;

  *(_QWORD *)(this + 3336) = a3;
  if (this && a3 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)this);
  if ((this & 8) != 0)
    v5 = (this - 112) | 1;
  else
    v5 = this & 0xFFFFFFFFFFFFC000;
  if ((v5 & 1) != 0)
    v6 = v5 + 47;
  else
    v6 = *(_QWORD *)v5 + 32;
  Allocator = *(_QWORD **)(v6 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  v8 = (uint64_t *)((char *)a2 + 37936);
  *(_QWORD *)(v6 + 16) = *Allocator;
  *Allocator = this;
  Allocator[1] = 0;
  Allocator[2] = 0;
  v9 = *(_QWORD *)(this + 3400);
  v10 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v9 + 24) = Allocator;
  if (v10)
    *(_QWORD *)(v10 + 8) = 3;
  WebCore::JSDOMGlobalObject::finishCreation((WebCore::JSDOMGlobalObject *)this, a2, *(JSC::JSObject **)(this + 3336));
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 136))(v11) + 472) & 0x8000) != 0)
  {
    v12 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
    if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 136))(v12) + 432) & 0x80000000000000) != 0)
    {
      SlowCase = *v8;
      if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
      {
        SlowCase = *((_QWORD *)a2 + 4744);
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
          goto LABEL_15;
        }
        v238 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)a2 + 4745);
        *((_QWORD *)a2 + 4743) = SlowCase + HIDWORD(v238);
        *((_QWORD *)a2 + 4744) = SlowCase + (int)v238;
      }
      *v8 = SlowCase + 32;
LABEL_15:
      *(_DWORD *)SlowCase = 0;
      v14 = *((_QWORD *)a2 + 5192);
      v15 = *(_DWORD *)(v14 + 8);
      *(_DWORD *)SlowCase = v14 >> 4;
      *(_DWORD *)(SlowCase + 4) = v15;
      *(_QWORD *)(SlowCase + 8) = WebCore::jsShadowRealmGlobalScope_CompressionStreamConstructor;
      *(_QWORD *)(SlowCase + 16) = 0;
      if (*((_BYTE *)a2 + 755))
        __dmb(0xAu);
      JSC::JSObject::putDirectCustomAccessor();
    }
  }
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 136))(v16) + 472) & 0x8000) == 0)
    goto LABEL_25;
  v17 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 136))(v17) + 432) & 0x80000000000000) == 0)
    goto LABEL_25;
  v18 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v18 = *((_QWORD *)a2 + 4744);
    if ((v18 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v18 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_22;
    }
    v239 = *(_QWORD *)(v18 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v18 + HIDWORD(v239);
    *((_QWORD *)a2 + 4744) = v18 + (int)v239;
  }
  *v8 = v18 + 32;
LABEL_22:
  *(_DWORD *)v18 = 0;
  v19 = *((_QWORD *)a2 + 5192);
  v20 = *(_DWORD *)(v19 + 8);
  *(_DWORD *)v18 = v19 >> 4;
  *(_DWORD *)(v18 + 4) = v20;
  *(_QWORD *)(v18 + 8) = WebCore::jsShadowRealmGlobalScope_CompressionStreamEncoderConstructor;
  *(_QWORD *)(v18 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_25:
  v21 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 136))(v21) + 472) & 0x8000) == 0)
    goto LABEL_32;
  v22 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 136))(v22) + 432) & 0x80000000000000) == 0)
    goto LABEL_32;
  v23 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v23 = *((_QWORD *)a2 + 4744);
    if ((v23 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v23 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_29;
    }
    v240 = *(_QWORD *)(v23 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v23 + HIDWORD(v240);
    *((_QWORD *)a2 + 4744) = v23 + (int)v240;
  }
  *v8 = v23 + 32;
LABEL_29:
  *(_DWORD *)v23 = 0;
  v24 = *((_QWORD *)a2 + 5192);
  v25 = *(_DWORD *)(v24 + 8);
  *(_DWORD *)v23 = v24 >> 4;
  *(_DWORD *)(v23 + 4) = v25;
  *(_QWORD *)(v23 + 8) = WebCore::jsShadowRealmGlobalScope_DecompressionStreamConstructor;
  *(_QWORD *)(v23 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_32:
  v26 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 136))(v26) + 472) & 0x8000) == 0)
    goto LABEL_39;
  v27 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 136))(v27) + 432) & 0x80000000000000) == 0)
    goto LABEL_39;
  v28 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v28 = *((_QWORD *)a2 + 4744);
    if ((v28 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v28 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_36;
    }
    v241 = *(_QWORD *)(v28 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v28 + HIDWORD(v241);
    *((_QWORD *)a2 + 4744) = v28 + (int)v241;
  }
  *v8 = v28 + 32;
LABEL_36:
  *(_DWORD *)v28 = 0;
  v29 = *((_QWORD *)a2 + 5192);
  v30 = *(_DWORD *)(v29 + 8);
  *(_DWORD *)v28 = v29 >> 4;
  *(_DWORD *)(v28 + 4) = v30;
  *(_QWORD *)(v28 + 8) = WebCore::jsShadowRealmGlobalScope_DecompressionStreamDecoderConstructor;
  *(_QWORD *)(v28 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_39:
  v31 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 136))(v31) + 472) & 0x8000) == 0)
    goto LABEL_45;
  v32 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v32 = *((_QWORD *)a2 + 4744);
    if ((v32 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v32 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_42;
    }
    v195 = *(_QWORD *)(v32 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v32 + HIDWORD(v195);
    *((_QWORD *)a2 + 4744) = v32 + (int)v195;
  }
  *v8 = v32 + 32;
LABEL_42:
  *(_DWORD *)v32 = 0;
  v33 = *((_QWORD *)a2 + 5192);
  v34 = *(_DWORD *)(v33 + 8);
  *(_DWORD *)v32 = v33 >> 4;
  *(_DWORD *)(v32 + 4) = v34;
  *(_QWORD *)(v32 + 8) = WebCore::jsShadowRealmGlobalScope_ByteLengthQueuingStrategyConstructor;
  *(_QWORD *)(v32 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_45:
  v35 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 136))(v35) + 472) & 0x8000) == 0)
    goto LABEL_51;
  v36 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v36 = *((_QWORD *)a2 + 4744);
    if ((v36 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v36 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_48;
    }
    v196 = *(_QWORD *)(v36 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v36 + HIDWORD(v196);
    *((_QWORD *)a2 + 4744) = v36 + (int)v196;
  }
  *v8 = v36 + 32;
LABEL_48:
  *(_DWORD *)v36 = 0;
  v37 = *((_QWORD *)a2 + 5192);
  v38 = *(_DWORD *)(v37 + 8);
  *(_DWORD *)v36 = v37 >> 4;
  *(_DWORD *)(v36 + 4) = v38;
  *(_QWORD *)(v36 + 8) = WebCore::jsShadowRealmGlobalScope_CountQueuingStrategyConstructor;
  *(_QWORD *)(v36 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_51:
  v39 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 136))(v39) + 472) & 0x8000) == 0)
    goto LABEL_57;
  v40 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v40 = *((_QWORD *)a2 + 4744);
    if ((v40 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v40 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_54;
    }
    v197 = *(_QWORD *)(v40 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v40 + HIDWORD(v197);
    *((_QWORD *)a2 + 4744) = v40 + (int)v197;
  }
  *v8 = v40 + 32;
LABEL_54:
  *(_DWORD *)v40 = 0;
  v41 = *((_QWORD *)a2 + 5192);
  v42 = *(_DWORD *)(v41 + 8);
  *(_DWORD *)v40 = v41 >> 4;
  *(_DWORD *)(v40 + 4) = v42;
  *(_QWORD *)(v40 + 8) = WebCore::jsShadowRealmGlobalScope_ReadableByteStreamControllerConstructor;
  *(_QWORD *)(v40 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_57:
  v43 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 136))(v43) + 472) & 0x8000) == 0)
    goto LABEL_67;
  v44 = *v8;
  if (*((_QWORD *)a2 + 4742) < *((_QWORD *)a2 + 4743))
    goto LABEL_59;
  v44 = *((_QWORD *)a2 + 4744);
  if ((v44 & 1) == 0)
  {
    v198 = *(_QWORD *)(v44 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v44 + HIDWORD(v198);
    *((_QWORD *)a2 + 4744) = v44 + (int)v198;
LABEL_59:
    *v8 = v44 + 32;
    goto LABEL_60;
  }
  JSC::sanitizeStackForVM();
  v44 = JSC::LocalAllocator::allocateSlowCase();
LABEL_60:
  *(_DWORD *)v44 = 0;
  v45 = *((_QWORD *)a2 + 5192);
  v46 = *(_DWORD *)(v45 + 8);
  *(_DWORD *)v44 = v45 >> 4;
  *(_DWORD *)(v44 + 4) = v46;
  *(_QWORD *)(v44 + 8) = WebCore::jsShadowRealmGlobalScope_ReadableStreamConstructor;
  *(_QWORD *)(v44 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v47 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v47 = *((_QWORD *)a2 + 4744);
    if ((v47 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v47 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_64;
    }
    v199 = *(_QWORD *)(v47 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v47 + HIDWORD(v199);
    *((_QWORD *)a2 + 4744) = v47 + (int)v199;
  }
  *v8 = v47 + 32;
LABEL_64:
  *(_DWORD *)v47 = 0;
  v48 = *((_QWORD *)a2 + 5192);
  v49 = *(_DWORD *)(v48 + 8);
  *(_DWORD *)v47 = v48 >> 4;
  *(_DWORD *)(v47 + 4) = v49;
  *(_QWORD *)(v47 + 8) = WebCore::jsShadowRealmGlobalScope_ReadableStreamConstructor;
  *(_QWORD *)(v47 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_67:
  v50 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 136))(v50) + 472) & 0x8000) == 0)
    goto LABEL_73;
  v51 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v51 = *((_QWORD *)a2 + 4744);
    if ((v51 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v51 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_70;
    }
    v200 = *(_QWORD *)(v51 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v51 + HIDWORD(v200);
    *((_QWORD *)a2 + 4744) = v51 + (int)v200;
  }
  *v8 = v51 + 32;
LABEL_70:
  *(_DWORD *)v51 = 0;
  v52 = *((_QWORD *)a2 + 5192);
  v53 = *(_DWORD *)(v52 + 8);
  *(_DWORD *)v51 = v52 >> 4;
  *(_DWORD *)(v51 + 4) = v53;
  *(_QWORD *)(v51 + 8) = WebCore::jsShadowRealmGlobalScope_ReadableStreamBYOBReaderConstructor;
  *(_QWORD *)(v51 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_73:
  v54 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 136))(v54) + 472) & 0x8000) == 0)
    goto LABEL_79;
  v55 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v55 = *((_QWORD *)a2 + 4744);
    if ((v55 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v55 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_76;
    }
    v201 = *(_QWORD *)(v55 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v55 + HIDWORD(v201);
    *((_QWORD *)a2 + 4744) = v55 + (int)v201;
  }
  *v8 = v55 + 32;
LABEL_76:
  *(_DWORD *)v55 = 0;
  v56 = *((_QWORD *)a2 + 5192);
  v57 = *(_DWORD *)(v56 + 8);
  *(_DWORD *)v55 = v56 >> 4;
  *(_DWORD *)(v55 + 4) = v57;
  *(_QWORD *)(v55 + 8) = WebCore::jsShadowRealmGlobalScope_ReadableStreamBYOBRequestConstructor;
  *(_QWORD *)(v55 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_79:
  v58 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 136))(v58) + 472) & 0x8000) == 0)
    goto LABEL_89;
  v59 = *v8;
  if (*((_QWORD *)a2 + 4742) < *((_QWORD *)a2 + 4743))
    goto LABEL_81;
  v59 = *((_QWORD *)a2 + 4744);
  if ((v59 & 1) == 0)
  {
    v202 = *(_QWORD *)(v59 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v59 + HIDWORD(v202);
    *((_QWORD *)a2 + 4744) = v59 + (int)v202;
LABEL_81:
    *v8 = v59 + 32;
    goto LABEL_82;
  }
  JSC::sanitizeStackForVM();
  v59 = JSC::LocalAllocator::allocateSlowCase();
LABEL_82:
  *(_DWORD *)v59 = 0;
  v60 = *((_QWORD *)a2 + 5192);
  v61 = *(_DWORD *)(v60 + 8);
  *(_DWORD *)v59 = v60 >> 4;
  *(_DWORD *)(v59 + 4) = v61;
  *(_QWORD *)(v59 + 8) = WebCore::jsShadowRealmGlobalScope_ReadableStreamDefaultControllerConstructor;
  *(_QWORD *)(v59 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v62 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v62 = *((_QWORD *)a2 + 4744);
    if ((v62 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v62 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_86;
    }
    v203 = *(_QWORD *)(v62 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v62 + HIDWORD(v203);
    *((_QWORD *)a2 + 4744) = v62 + (int)v203;
  }
  *v8 = v62 + 32;
LABEL_86:
  *(_DWORD *)v62 = 0;
  v63 = *((_QWORD *)a2 + 5192);
  v64 = *(_DWORD *)(v63 + 8);
  *(_DWORD *)v62 = v63 >> 4;
  *(_DWORD *)(v62 + 4) = v64;
  *(_QWORD *)(v62 + 8) = WebCore::jsShadowRealmGlobalScope_ReadableStreamDefaultControllerConstructor;
  *(_QWORD *)(v62 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_89:
  v65 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 136))(v65) + 472) & 0x8000) == 0)
    goto LABEL_99;
  v66 = *v8;
  if (*((_QWORD *)a2 + 4742) < *((_QWORD *)a2 + 4743))
    goto LABEL_91;
  v66 = *((_QWORD *)a2 + 4744);
  if ((v66 & 1) == 0)
  {
    v204 = *(_QWORD *)(v66 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v66 + HIDWORD(v204);
    *((_QWORD *)a2 + 4744) = v66 + (int)v204;
LABEL_91:
    *v8 = v66 + 32;
    goto LABEL_92;
  }
  JSC::sanitizeStackForVM();
  v66 = JSC::LocalAllocator::allocateSlowCase();
LABEL_92:
  *(_DWORD *)v66 = 0;
  v67 = *((_QWORD *)a2 + 5192);
  v68 = *(_DWORD *)(v67 + 8);
  *(_DWORD *)v66 = v67 >> 4;
  *(_DWORD *)(v66 + 4) = v68;
  *(_QWORD *)(v66 + 8) = WebCore::jsShadowRealmGlobalScope_ReadableStreamDefaultReaderConstructor;
  *(_QWORD *)(v66 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v69 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v69 = *((_QWORD *)a2 + 4744);
    if ((v69 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v69 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_96;
    }
    v205 = *(_QWORD *)(v69 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v69 + HIDWORD(v205);
    *((_QWORD *)a2 + 4744) = v69 + (int)v205;
  }
  *v8 = v69 + 32;
LABEL_96:
  *(_DWORD *)v69 = 0;
  v70 = *((_QWORD *)a2 + 5192);
  v71 = *(_DWORD *)(v70 + 8);
  *(_DWORD *)v69 = v70 >> 4;
  *(_DWORD *)(v69 + 4) = v71;
  *(_QWORD *)(v69 + 8) = WebCore::jsShadowRealmGlobalScope_ReadableStreamDefaultReaderConstructor;
  *(_QWORD *)(v69 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_99:
  v72 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 136))(v72) + 472) & 0x8000) == 0)
    goto LABEL_109;
  v73 = *v8;
  if (*((_QWORD *)a2 + 4742) < *((_QWORD *)a2 + 4743))
    goto LABEL_101;
  v73 = *((_QWORD *)a2 + 4744);
  if ((v73 & 1) == 0)
  {
    v206 = *(_QWORD *)(v73 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v73 + HIDWORD(v206);
    *((_QWORD *)a2 + 4744) = v73 + (int)v206;
LABEL_101:
    *v8 = v73 + 32;
    goto LABEL_102;
  }
  JSC::sanitizeStackForVM();
  v73 = JSC::LocalAllocator::allocateSlowCase();
LABEL_102:
  *(_DWORD *)v73 = 0;
  v74 = *((_QWORD *)a2 + 5192);
  v75 = *(_DWORD *)(v74 + 8);
  *(_DWORD *)v73 = v74 >> 4;
  *(_DWORD *)(v73 + 4) = v75;
  *(_QWORD *)(v73 + 8) = WebCore::jsShadowRealmGlobalScope_TransformStreamConstructor;
  *(_QWORD *)(v73 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v76 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v76 = *((_QWORD *)a2 + 4744);
    if ((v76 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v76 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_106;
    }
    v207 = *(_QWORD *)(v76 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v76 + HIDWORD(v207);
    *((_QWORD *)a2 + 4744) = v76 + (int)v207;
  }
  *v8 = v76 + 32;
LABEL_106:
  *(_DWORD *)v76 = 0;
  v77 = *((_QWORD *)a2 + 5192);
  v78 = *(_DWORD *)(v77 + 8);
  *(_DWORD *)v76 = v77 >> 4;
  *(_DWORD *)(v76 + 4) = v78;
  *(_QWORD *)(v76 + 8) = WebCore::jsShadowRealmGlobalScope_TransformStreamConstructor;
  *(_QWORD *)(v76 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_109:
  v79 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 136))(v79) + 472) & 0x8000) == 0)
    goto LABEL_119;
  v80 = *v8;
  if (*((_QWORD *)a2 + 4742) < *((_QWORD *)a2 + 4743))
    goto LABEL_111;
  v80 = *((_QWORD *)a2 + 4744);
  if ((v80 & 1) == 0)
  {
    v208 = *(_QWORD *)(v80 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v80 + HIDWORD(v208);
    *((_QWORD *)a2 + 4744) = v80 + (int)v208;
LABEL_111:
    *v8 = v80 + 32;
    goto LABEL_112;
  }
  JSC::sanitizeStackForVM();
  v80 = JSC::LocalAllocator::allocateSlowCase();
LABEL_112:
  *(_DWORD *)v80 = 0;
  v81 = *((_QWORD *)a2 + 5192);
  v82 = *(_DWORD *)(v81 + 8);
  *(_DWORD *)v80 = v81 >> 4;
  *(_DWORD *)(v80 + 4) = v82;
  *(_QWORD *)(v80 + 8) = WebCore::jsShadowRealmGlobalScope_TransformStreamDefaultControllerConstructor;
  *(_QWORD *)(v80 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v83 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v83 = *((_QWORD *)a2 + 4744);
    if ((v83 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v83 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_116;
    }
    v209 = *(_QWORD *)(v83 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v83 + HIDWORD(v209);
    *((_QWORD *)a2 + 4744) = v83 + (int)v209;
  }
  *v8 = v83 + 32;
LABEL_116:
  *(_DWORD *)v83 = 0;
  v84 = *((_QWORD *)a2 + 5192);
  v85 = *(_DWORD *)(v84 + 8);
  *(_DWORD *)v83 = v84 >> 4;
  *(_DWORD *)(v83 + 4) = v85;
  *(_QWORD *)(v83 + 8) = WebCore::jsShadowRealmGlobalScope_TransformStreamDefaultControllerConstructor;
  *(_QWORD *)(v83 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_119:
  v86 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 136))(v86) + 472) & 0x8000) == 0)
    goto LABEL_129;
  v87 = *v8;
  if (*((_QWORD *)a2 + 4742) < *((_QWORD *)a2 + 4743))
    goto LABEL_121;
  v87 = *((_QWORD *)a2 + 4744);
  if ((v87 & 1) == 0)
  {
    v210 = *(_QWORD *)(v87 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v87 + HIDWORD(v210);
    *((_QWORD *)a2 + 4744) = v87 + (int)v210;
LABEL_121:
    *v8 = v87 + 32;
    goto LABEL_122;
  }
  JSC::sanitizeStackForVM();
  v87 = JSC::LocalAllocator::allocateSlowCase();
LABEL_122:
  *(_DWORD *)v87 = 0;
  v88 = *((_QWORD *)a2 + 5192);
  v89 = *(_DWORD *)(v88 + 8);
  *(_DWORD *)v87 = v88 >> 4;
  *(_DWORD *)(v87 + 4) = v89;
  *(_QWORD *)(v87 + 8) = WebCore::jsShadowRealmGlobalScope_WritableStreamConstructor;
  *(_QWORD *)(v87 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v90 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v90 = *((_QWORD *)a2 + 4744);
    if ((v90 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v90 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_126;
    }
    v211 = *(_QWORD *)(v90 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v90 + HIDWORD(v211);
    *((_QWORD *)a2 + 4744) = v90 + (int)v211;
  }
  *v8 = v90 + 32;
LABEL_126:
  *(_DWORD *)v90 = 0;
  v91 = *((_QWORD *)a2 + 5192);
  v92 = *(_DWORD *)(v91 + 8);
  *(_DWORD *)v90 = v91 >> 4;
  *(_DWORD *)(v90 + 4) = v92;
  *(_QWORD *)(v90 + 8) = WebCore::jsShadowRealmGlobalScope_WritableStreamConstructor;
  *(_QWORD *)(v90 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_129:
  v93 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 136))(v93) + 472) & 0x8000) == 0)
    goto LABEL_139;
  v94 = *v8;
  if (*((_QWORD *)a2 + 4742) < *((_QWORD *)a2 + 4743))
    goto LABEL_131;
  v94 = *((_QWORD *)a2 + 4744);
  if ((v94 & 1) == 0)
  {
    v212 = *(_QWORD *)(v94 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v94 + HIDWORD(v212);
    *((_QWORD *)a2 + 4744) = v94 + (int)v212;
LABEL_131:
    *v8 = v94 + 32;
    goto LABEL_132;
  }
  JSC::sanitizeStackForVM();
  v94 = JSC::LocalAllocator::allocateSlowCase();
LABEL_132:
  *(_DWORD *)v94 = 0;
  v95 = *((_QWORD *)a2 + 5192);
  v96 = *(_DWORD *)(v95 + 8);
  *(_DWORD *)v94 = v95 >> 4;
  *(_DWORD *)(v94 + 4) = v96;
  *(_QWORD *)(v94 + 8) = WebCore::jsShadowRealmGlobalScope_WritableStreamDefaultControllerConstructor;
  *(_QWORD *)(v94 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v97 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v97 = *((_QWORD *)a2 + 4744);
    if ((v97 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v97 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_136;
    }
    v213 = *(_QWORD *)(v97 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v97 + HIDWORD(v213);
    *((_QWORD *)a2 + 4744) = v97 + (int)v213;
  }
  *v8 = v97 + 32;
LABEL_136:
  *(_DWORD *)v97 = 0;
  v98 = *((_QWORD *)a2 + 5192);
  v99 = *(_DWORD *)(v98 + 8);
  *(_DWORD *)v97 = v98 >> 4;
  *(_DWORD *)(v97 + 4) = v99;
  *(_QWORD *)(v97 + 8) = WebCore::jsShadowRealmGlobalScope_WritableStreamDefaultControllerConstructor;
  *(_QWORD *)(v97 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_139:
  v100 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 136))(v100) + 472) & 0x8000) == 0)
    goto LABEL_149;
  v101 = *v8;
  if (*((_QWORD *)a2 + 4742) < *((_QWORD *)a2 + 4743))
    goto LABEL_141;
  v101 = *((_QWORD *)a2 + 4744);
  if ((v101 & 1) == 0)
  {
    v214 = *(_QWORD *)(v101 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v101 + HIDWORD(v214);
    *((_QWORD *)a2 + 4744) = v101 + (int)v214;
LABEL_141:
    *v8 = v101 + 32;
    goto LABEL_142;
  }
  JSC::sanitizeStackForVM();
  v101 = JSC::LocalAllocator::allocateSlowCase();
LABEL_142:
  *(_DWORD *)v101 = 0;
  v102 = *((_QWORD *)a2 + 5192);
  v103 = *(_DWORD *)(v102 + 8);
  *(_DWORD *)v101 = v102 >> 4;
  *(_DWORD *)(v101 + 4) = v103;
  *(_QWORD *)(v101 + 8) = WebCore::jsShadowRealmGlobalScope_WritableStreamDefaultWriterConstructor;
  *(_QWORD *)(v101 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v104 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v104 = *((_QWORD *)a2 + 4744);
    if ((v104 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v104 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_146;
    }
    v215 = *(_QWORD *)(v104 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v104 + HIDWORD(v215);
    *((_QWORD *)a2 + 4744) = v104 + (int)v215;
  }
  *v8 = v104 + 32;
LABEL_146:
  *(_DWORD *)v104 = 0;
  v105 = *((_QWORD *)a2 + 5192);
  v106 = *(_DWORD *)(v105 + 8);
  *(_DWORD *)v104 = v105 >> 4;
  *(_DWORD *)(v104 + 4) = v106;
  *(_QWORD *)(v104 + 8) = WebCore::jsShadowRealmGlobalScope_WritableStreamDefaultWriterConstructor;
  *(_QWORD *)(v104 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_149:
  v107 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 136))(v107) + 472) & 0x8000) == 0)
    goto LABEL_155;
  v108 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v108 = *((_QWORD *)a2 + 4744);
    if ((v108 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v108 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_152;
    }
    v216 = *(_QWORD *)(v108 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v108 + HIDWORD(v216);
    *((_QWORD *)a2 + 4744) = v108 + (int)v216;
  }
  *v8 = v108 + 32;
LABEL_152:
  *(_DWORD *)v108 = 0;
  v109 = *((_QWORD *)a2 + 5192);
  v110 = *(_DWORD *)(v109 + 8);
  *(_DWORD *)v108 = v109 >> 4;
  *(_DWORD *)(v108 + 4) = v110;
  *(_QWORD *)(v108 + 8) = WebCore::jsShadowRealmGlobalScope_AbortControllerConstructor;
  *(_QWORD *)(v108 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_155:
  v111 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 136))(v111) + 472) & 0x8000) == 0)
    goto LABEL_165;
  v112 = *v8;
  if (*((_QWORD *)a2 + 4742) < *((_QWORD *)a2 + 4743))
    goto LABEL_157;
  v112 = *((_QWORD *)a2 + 4744);
  if ((v112 & 1) == 0)
  {
    v217 = *(_QWORD *)(v112 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v112 + HIDWORD(v217);
    *((_QWORD *)a2 + 4744) = v112 + (int)v217;
LABEL_157:
    *v8 = v112 + 32;
    goto LABEL_158;
  }
  JSC::sanitizeStackForVM();
  v112 = JSC::LocalAllocator::allocateSlowCase();
LABEL_158:
  *(_DWORD *)v112 = 0;
  v113 = *((_QWORD *)a2 + 5192);
  v114 = *(_DWORD *)(v113 + 8);
  *(_DWORD *)v112 = v113 >> 4;
  *(_DWORD *)(v112 + 4) = v114;
  *(_QWORD *)(v112 + 8) = WebCore::jsShadowRealmGlobalScope_AbortSignalConstructor;
  *(_QWORD *)(v112 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v115 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v115 = *((_QWORD *)a2 + 4744);
    if ((v115 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v115 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_162;
    }
    v218 = *(_QWORD *)(v115 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v115 + HIDWORD(v218);
    *((_QWORD *)a2 + 4744) = v115 + (int)v218;
  }
  *v8 = v115 + 32;
LABEL_162:
  *(_DWORD *)v115 = 0;
  v116 = *((_QWORD *)a2 + 5192);
  v117 = *(_DWORD *)(v116 + 8);
  *(_DWORD *)v115 = v116 >> 4;
  *(_DWORD *)(v115 + 4) = v117;
  *(_QWORD *)(v115 + 8) = WebCore::jsShadowRealmGlobalScope_AbortSignalConstructor;
  *(_QWORD *)(v115 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_165:
  v118 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 136))(v118) + 472) & 0x8000) == 0)
    goto LABEL_171;
  v119 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v119 = *((_QWORD *)a2 + 4744);
    if ((v119 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v119 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_168;
    }
    v219 = *(_QWORD *)(v119 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v119 + HIDWORD(v219);
    *((_QWORD *)a2 + 4744) = v119 + (int)v219;
  }
  *v8 = v119 + 32;
LABEL_168:
  *(_DWORD *)v119 = 0;
  v120 = *((_QWORD *)a2 + 5192);
  v121 = *(_DWORD *)(v120 + 8);
  *(_DWORD *)v119 = v120 >> 4;
  *(_DWORD *)(v119 + 4) = v121;
  *(_QWORD *)(v119 + 8) = WebCore::jsShadowRealmGlobalScope_CustomEventConstructor;
  *(_QWORD *)(v119 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_171:
  v122 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 136))(v122) + 472) & 0x8000) == 0)
    goto LABEL_177;
  v123 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v123 = *((_QWORD *)a2 + 4744);
    if ((v123 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v123 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_174;
    }
    v220 = *(_QWORD *)(v123 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v123 + HIDWORD(v220);
    *((_QWORD *)a2 + 4744) = v123 + (int)v220;
  }
  *v8 = v123 + 32;
LABEL_174:
  *(_DWORD *)v123 = 0;
  v124 = *((_QWORD *)a2 + 5192);
  v125 = *(_DWORD *)(v124 + 8);
  *(_DWORD *)v123 = v124 >> 4;
  *(_DWORD *)(v123 + 4) = v125;
  *(_QWORD *)(v123 + 8) = WebCore::jsShadowRealmGlobalScope_ErrorEventConstructor;
  *(_QWORD *)(v123 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_177:
  v126 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 136))(v126) + 472) & 0x8000) == 0)
    goto LABEL_183;
  v127 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v127 = *((_QWORD *)a2 + 4744);
    if ((v127 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v127 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_180;
    }
    v221 = *(_QWORD *)(v127 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v127 + HIDWORD(v221);
    *((_QWORD *)a2 + 4744) = v127 + (int)v221;
  }
  *v8 = v127 + 32;
LABEL_180:
  *(_DWORD *)v127 = 0;
  v128 = *((_QWORD *)a2 + 5192);
  v129 = *(_DWORD *)(v128 + 8);
  *(_DWORD *)v127 = v128 >> 4;
  *(_DWORD *)(v127 + 4) = v129;
  *(_QWORD *)(v127 + 8) = WebCore::jsShadowRealmGlobalScope_EventConstructor;
  *(_QWORD *)(v127 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_183:
  v130 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 136))(v130) + 472) & 0x8000) == 0)
    goto LABEL_189;
  v131 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v131 = *((_QWORD *)a2 + 4744);
    if ((v131 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v131 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_186;
    }
    v222 = *(_QWORD *)(v131 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v131 + HIDWORD(v222);
    *((_QWORD *)a2 + 4744) = v131 + (int)v222;
  }
  *v8 = v131 + 32;
LABEL_186:
  *(_DWORD *)v131 = 0;
  v132 = *((_QWORD *)a2 + 5192);
  v133 = *(_DWORD *)(v132 + 8);
  *(_DWORD *)v131 = v132 >> 4;
  *(_DWORD *)(v131 + 4) = v133;
  *(_QWORD *)(v131 + 8) = WebCore::jsShadowRealmGlobalScope_EventTargetConstructor;
  *(_QWORD *)(v131 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_189:
  v134 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 136))(v134) + 472) & 0x8000) == 0)
    goto LABEL_195;
  v135 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v135 = *((_QWORD *)a2 + 4744);
    if ((v135 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v135 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_192;
    }
    v223 = *(_QWORD *)(v135 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v135 + HIDWORD(v223);
    *((_QWORD *)a2 + 4744) = v135 + (int)v223;
  }
  *v8 = v135 + 32;
LABEL_192:
  *(_DWORD *)v135 = 0;
  v136 = *((_QWORD *)a2 + 5192);
  v137 = *(_DWORD *)(v136 + 8);
  *(_DWORD *)v135 = v136 >> 4;
  *(_DWORD *)(v135 + 4) = v137;
  *(_QWORD *)(v135 + 8) = WebCore::jsShadowRealmGlobalScope_PromiseRejectionEventConstructor;
  *(_QWORD *)(v135 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_195:
  v138 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 136))(v138) + 472) & 0x8000) == 0)
    goto LABEL_201;
  v139 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v139 = *((_QWORD *)a2 + 4744);
    if ((v139 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v139 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_198;
    }
    v224 = *(_QWORD *)(v139 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v139 + HIDWORD(v224);
    *((_QWORD *)a2 + 4744) = v139 + (int)v224;
  }
  *v8 = v139 + 32;
LABEL_198:
  *(_DWORD *)v139 = 0;
  v140 = *((_QWORD *)a2 + 5192);
  v141 = *(_DWORD *)(v140 + 8);
  *(_DWORD *)v139 = v140 >> 4;
  *(_DWORD *)(v139 + 4) = v141;
  *(_QWORD *)(v139 + 8) = WebCore::jsShadowRealmGlobalScope_TextDecoderConstructor;
  *(_QWORD *)(v139 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_201:
  v142 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 136))(v142) + 472) & 0x8000) == 0)
    goto LABEL_207;
  v143 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v143 = *((_QWORD *)a2 + 4744);
    if ((v143 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v143 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_204;
    }
    v225 = *(_QWORD *)(v143 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v143 + HIDWORD(v225);
    *((_QWORD *)a2 + 4744) = v143 + (int)v225;
  }
  *v8 = v143 + 32;
LABEL_204:
  *(_DWORD *)v143 = 0;
  v144 = *((_QWORD *)a2 + 5192);
  v145 = *(_DWORD *)(v144 + 8);
  *(_DWORD *)v143 = v144 >> 4;
  *(_DWORD *)(v143 + 4) = v145;
  *(_QWORD *)(v143 + 8) = WebCore::jsShadowRealmGlobalScope_TextDecoderStreamConstructor;
  *(_QWORD *)(v143 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_207:
  v146 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v146 + 136))(v146) + 472) & 0x8000) == 0)
    goto LABEL_213;
  v147 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v147 = *((_QWORD *)a2 + 4744);
    if ((v147 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v147 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_210;
    }
    v226 = *(_QWORD *)(v147 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v147 + HIDWORD(v226);
    *((_QWORD *)a2 + 4744) = v147 + (int)v226;
  }
  *v8 = v147 + 32;
LABEL_210:
  *(_DWORD *)v147 = 0;
  v148 = *((_QWORD *)a2 + 5192);
  v149 = *(_DWORD *)(v148 + 8);
  *(_DWORD *)v147 = v148 >> 4;
  *(_DWORD *)(v147 + 4) = v149;
  *(_QWORD *)(v147 + 8) = WebCore::jsShadowRealmGlobalScope_TextEncoderConstructor;
  *(_QWORD *)(v147 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_213:
  v150 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v150 + 136))(v150) + 472) & 0x8000) == 0)
    goto LABEL_219;
  v151 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v151 = *((_QWORD *)a2 + 4744);
    if ((v151 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v151 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_216;
    }
    v227 = *(_QWORD *)(v151 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v151 + HIDWORD(v227);
    *((_QWORD *)a2 + 4744) = v151 + (int)v227;
  }
  *v8 = v151 + 32;
LABEL_216:
  *(_DWORD *)v151 = 0;
  v152 = *((_QWORD *)a2 + 5192);
  v153 = *(_DWORD *)(v152 + 8);
  *(_DWORD *)v151 = v152 >> 4;
  *(_DWORD *)(v151 + 4) = v153;
  *(_QWORD *)(v151 + 8) = WebCore::jsShadowRealmGlobalScope_TextEncoderStreamConstructor;
  *(_QWORD *)(v151 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_219:
  v154 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v154 + 136))(v154) + 472) & 0x8000) == 0)
    goto LABEL_225;
  v155 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v155 = *((_QWORD *)a2 + 4744);
    if ((v155 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v155 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_222;
    }
    v228 = *(_QWORD *)(v155 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v155 + HIDWORD(v228);
    *((_QWORD *)a2 + 4744) = v155 + (int)v228;
  }
  *v8 = v155 + 32;
LABEL_222:
  *(_DWORD *)v155 = 0;
  v156 = *((_QWORD *)a2 + 5192);
  v157 = *(_DWORD *)(v156 + 8);
  *(_DWORD *)v155 = v156 >> 4;
  *(_DWORD *)(v155 + 4) = v157;
  *(_QWORD *)(v155 + 8) = WebCore::jsShadowRealmGlobalScope_URLConstructor;
  *(_QWORD *)(v155 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_225:
  v158 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 136))(v158) + 472) & 0x8000) == 0)
    goto LABEL_231;
  v159 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v159 = *((_QWORD *)a2 + 4744);
    if ((v159 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v159 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_228;
    }
    v229 = *(_QWORD *)(v159 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v159 + HIDWORD(v229);
    *((_QWORD *)a2 + 4744) = v159 + (int)v229;
  }
  *v8 = v159 + 32;
LABEL_228:
  *(_DWORD *)v159 = 0;
  v160 = *((_QWORD *)a2 + 5192);
  v161 = *(_DWORD *)(v160 + 8);
  *(_DWORD *)v159 = v160 >> 4;
  *(_DWORD *)(v159 + 4) = v161;
  *(_QWORD *)(v159 + 8) = WebCore::jsShadowRealmGlobalScope_URLSearchParamsConstructor;
  *(_QWORD *)(v159 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_231:
  v162 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v162 + 136))(v162) + 472) & 0x8000) == 0)
    goto LABEL_237;
  v163 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v163 = *((_QWORD *)a2 + 4744);
    if ((v163 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v163 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_234;
    }
    v230 = *(_QWORD *)(v163 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v163 + HIDWORD(v230);
    *((_QWORD *)a2 + 4744) = v163 + (int)v230;
  }
  *v8 = v163 + 32;
LABEL_234:
  *(_DWORD *)v163 = 0;
  v164 = *((_QWORD *)a2 + 5192);
  v165 = *(_DWORD *)(v164 + 8);
  *(_DWORD *)v163 = v164 >> 4;
  *(_DWORD *)(v163 + 4) = v165;
  *(_QWORD *)(v163 + 8) = WebCore::jsShadowRealmGlobalScope_PerformanceConstructor;
  *(_QWORD *)(v163 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_237:
  v166 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v166 + 136))(v166) + 472) & 0x8000) == 0)
    goto LABEL_243;
  v167 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v167 = *((_QWORD *)a2 + 4744);
    if ((v167 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v167 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_240;
    }
    v231 = *(_QWORD *)(v167 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v167 + HIDWORD(v231);
    *((_QWORD *)a2 + 4744) = v167 + (int)v231;
  }
  *v8 = v167 + 32;
LABEL_240:
  *(_DWORD *)v167 = 0;
  v168 = *((_QWORD *)a2 + 5192);
  v169 = *(_DWORD *)(v168 + 8);
  *(_DWORD *)v167 = v168 >> 4;
  *(_DWORD *)(v167 + 4) = v169;
  *(_QWORD *)(v167 + 8) = WebCore::jsShadowRealmGlobalScope_PerformanceEntryConstructor;
  *(_QWORD *)(v167 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_243:
  v170 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v170 + 136))(v170) + 472) & 0x8000) == 0)
    goto LABEL_249;
  v171 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v171 = *((_QWORD *)a2 + 4744);
    if ((v171 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v171 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_246;
    }
    v232 = *(_QWORD *)(v171 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v171 + HIDWORD(v232);
    *((_QWORD *)a2 + 4744) = v171 + (int)v232;
  }
  *v8 = v171 + 32;
LABEL_246:
  *(_DWORD *)v171 = 0;
  v172 = *((_QWORD *)a2 + 5192);
  v173 = *(_DWORD *)(v172 + 8);
  *(_DWORD *)v171 = v172 >> 4;
  *(_DWORD *)(v171 + 4) = v173;
  *(_QWORD *)(v171 + 8) = WebCore::jsShadowRealmGlobalScope_PerformanceMarkConstructor;
  *(_QWORD *)(v171 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_249:
  v174 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 136))(v174) + 472) & 0x8000) == 0)
    goto LABEL_255;
  v175 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v175 = *((_QWORD *)a2 + 4744);
    if ((v175 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v175 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_252;
    }
    v233 = *(_QWORD *)(v175 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v175 + HIDWORD(v233);
    *((_QWORD *)a2 + 4744) = v175 + (int)v233;
  }
  *v8 = v175 + 32;
LABEL_252:
  *(_DWORD *)v175 = 0;
  v176 = *((_QWORD *)a2 + 5192);
  v177 = *(_DWORD *)(v176 + 8);
  *(_DWORD *)v175 = v176 >> 4;
  *(_DWORD *)(v175 + 4) = v177;
  *(_QWORD *)(v175 + 8) = WebCore::jsShadowRealmGlobalScope_PerformanceMeasureConstructor;
  *(_QWORD *)(v175 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_255:
  v178 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 136))(v178) + 472) & 0x8000) == 0)
    goto LABEL_261;
  v179 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v179 = *((_QWORD *)a2 + 4744);
    if ((v179 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v179 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_258;
    }
    v234 = *(_QWORD *)(v179 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v179 + HIDWORD(v234);
    *((_QWORD *)a2 + 4744) = v179 + (int)v234;
  }
  *v8 = v179 + 32;
LABEL_258:
  *(_DWORD *)v179 = 0;
  v180 = *((_QWORD *)a2 + 5192);
  v181 = *(_DWORD *)(v180 + 8);
  *(_DWORD *)v179 = v180 >> 4;
  *(_DWORD *)(v179 + 4) = v181;
  *(_QWORD *)(v179 + 8) = WebCore::jsShadowRealmGlobalScope_PerformanceObserverConstructor;
  *(_QWORD *)(v179 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_261:
  v182 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v182 + 136))(v182) + 472) & 0x8000) == 0)
    goto LABEL_267;
  v183 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v183 = *((_QWORD *)a2 + 4744);
    if ((v183 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v183 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_264;
    }
    v235 = *(_QWORD *)(v183 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v183 + HIDWORD(v235);
    *((_QWORD *)a2 + 4744) = v183 + (int)v235;
  }
  *v8 = v183 + 32;
LABEL_264:
  *(_DWORD *)v183 = 0;
  v184 = *((_QWORD *)a2 + 5192);
  v185 = *(_DWORD *)(v184 + 8);
  *(_DWORD *)v183 = v184 >> 4;
  *(_DWORD *)(v183 + 4) = v185;
  *(_QWORD *)(v183 + 8) = WebCore::jsShadowRealmGlobalScope_PerformanceObserverEntryListConstructor;
  *(_QWORD *)(v183 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_267:
  v186 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v186 + 136))(v186) + 472) & 0x8000) == 0)
    goto LABEL_273;
  v187 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v187 = *((_QWORD *)a2 + 4744);
    if ((v187 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v187 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_270;
    }
    v236 = *(_QWORD *)(v187 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v187 + HIDWORD(v236);
    *((_QWORD *)a2 + 4744) = v187 + (int)v236;
  }
  *v8 = v187 + 32;
LABEL_270:
  *(_DWORD *)v187 = 0;
  v188 = *((_QWORD *)a2 + 5192);
  v189 = *(_DWORD *)(v188 + 8);
  *(_DWORD *)v187 = v188 >> 4;
  *(_DWORD *)(v187 + 4) = v189;
  *(_QWORD *)(v187 + 8) = WebCore::jsShadowRealmGlobalScope_PerformanceResourceTimingConstructor;
  *(_QWORD *)(v187 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_273:
  v190 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v190 + 136))(v190);
  if ((*(_QWORD *)(result + 472) & 0x8000) == 0)
    return result;
  v192 = *v8;
  if (*((_QWORD *)a2 + 4742) >= *((_QWORD *)a2 + 4743))
  {
    v192 = *((_QWORD *)a2 + 4744);
    if ((v192 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v192 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_276;
    }
    v237 = *(_QWORD *)(v192 + 8) ^ *((_QWORD *)a2 + 4745);
    *((_QWORD *)a2 + 4743) = v192 + HIDWORD(v237);
    *((_QWORD *)a2 + 4744) = v192 + (int)v237;
  }
  *v8 = v192 + 32;
LABEL_276:
  *(_DWORD *)v192 = 0;
  v193 = *((_QWORD *)a2 + 5192);
  v194 = *(_DWORD *)(v193 + 8);
  *(_DWORD *)v192 = v193 >> 4;
  *(_DWORD *)(v192 + 4) = v194;
  *(_QWORD *)(v192 + 8) = WebCore::jsShadowRealmGlobalScope_PerformanceServerTimingConstructor;
  *(_QWORD *)(v192 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  return JSC::JSObject::putDirectCustomAccessor();
}

uint64_t WebCore::jsShadowRealmGlobalScope_CompressionStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 512);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSCompressionStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSCompressionStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 512) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_CompressionStreamEncoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSCompressionStreamEncoder>,(WebCore::DOMConstructorID)65>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSCompressionStreamEncoder>,(WebCore::DOMConstructorID)65>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_DecompressionStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 528);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSDecompressionStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSDecompressionStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 528) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_DecompressionStreamDecoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDecompressionStreamDecoder>,(WebCore::DOMConstructorID)67>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDecompressionStreamDecoder>,(WebCore::DOMConstructorID)67>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_ByteLengthQueuingStrategyConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1704);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSByteLengthQueuingStrategy>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSByteLengthQueuingStrategy>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1704) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_CountQueuingStrategyConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1712);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSCountQueuingStrategy>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSCountQueuingStrategy>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1712) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_ReadableByteStreamControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1720);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableByteStreamController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableByteStreamController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1720) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_ReadableStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSReadableStream>,(WebCore::DOMConstructorID)216>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSReadableStream>,(WebCore::DOMConstructorID)216>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_ReadableStreamBYOBReaderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1736);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBReader>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBReader>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1736) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_ReadableStreamBYOBRequestConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1744);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBRequest>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBRequest>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1744) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_ReadableStreamDefaultControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1752);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1752) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_ReadableStreamDefaultReaderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1760);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultReader>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultReader>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1760) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_TransformStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTransformStream>,(WebCore::DOMConstructorID)223>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTransformStream>,(WebCore::DOMConstructorID)223>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_TransformStreamDefaultControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1792);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTransformStreamDefaultController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSTransformStreamDefaultController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1792) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_WritableStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWritableStream>,(WebCore::DOMConstructorID)225>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWritableStream>,(WebCore::DOMConstructorID)225>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_WritableStreamDefaultControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1808);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1808) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_WritableStreamDefaultWriterConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1816);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultWriter>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultWriter>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1816) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_AbortControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAbortController>,(WebCore::DOMConstructorID)411>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAbortController>,(WebCore::DOMConstructorID)411>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_AbortSignalConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbortSignal>,(WebCore::DOMConstructorID)412>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbortSignal>,(WebCore::DOMConstructorID)412>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_CustomEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  JSC::JSCell *v12;
  uint64_t Structure;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSShadowRealmGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3392);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    v12 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(v11, v4);
    Structure = WebCore::JSDOMConstructor<WebCore::JSCustomEvent>::createStructure((uint64_t *)v11, v4, v12);
    v10 = WebCore::JSDOMConstructor<WebCore::JSCustomEvent>::create(v11, Structure, (JSC::VM *)v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3392) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_ErrorEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSErrorEvent>,(WebCore::DOMConstructorID)447>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSErrorEvent>,(WebCore::DOMConstructorID)447>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_EventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_EventTargetConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_PromiseRejectionEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPromiseRejectionEvent>,(WebCore::DOMConstructorID)476>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPromiseRejectionEvent>,(WebCore::DOMConstructorID)476>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_TextDecoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDecoder>,(WebCore::DOMConstructorID)482>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDecoder>,(WebCore::DOMConstructorID)482>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_TextDecoderStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3864);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextDecoderStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextDecoderStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3864) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_TextEncoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextEncoder>,(WebCore::DOMConstructorID)485>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextEncoder>,(WebCore::DOMConstructorID)485>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_TextEncoderStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3888);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextEncoderStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextEncoderStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3888) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_URLConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDOMURL>,(WebCore::DOMConstructorID)507>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDOMURL>,(WebCore::DOMConstructorID)507>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_URLSearchParamsConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>,(WebCore::DOMConstructorID)598>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>,(WebCore::DOMConstructorID)598>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_PerformanceConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformance>,(WebCore::DOMConstructorID)727>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformance>,(WebCore::DOMConstructorID)727>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_PerformanceEntryConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceEntry>,(WebCore::DOMConstructorID)728>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceEntry>,(WebCore::DOMConstructorID)728>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_PerformanceMarkConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPerformanceMark>,(WebCore::DOMConstructorID)729>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPerformanceMark>,(WebCore::DOMConstructorID)729>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_PerformanceMeasureConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceMeasure>,(WebCore::DOMConstructorID)730>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceMeasure>,(WebCore::DOMConstructorID)730>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_PerformanceObserverConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSShadowRealmGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSShadowRealmGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 5864);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMConstructor<WebCore::JSPerformanceObserver>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMConstructor<WebCore::JSPerformanceObserver>::create(v11, Structure, (JSC::VM *)v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 5864) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsShadowRealmGlobalScope_PerformanceObserverEntryListConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceObserverEntryList>,(WebCore::DOMConstructorID)734>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceObserverEntryList>,(WebCore::DOMConstructorID)734>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_PerformanceResourceTimingConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceResourceTiming>,(WebCore::DOMConstructorID)736>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceResourceTiming>,(WebCore::DOMConstructorID)736>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_PerformanceServerTimingConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSShadowRealmGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceServerTiming>,(WebCore::DOMConstructorID)737>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSShadowRealmGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceServerTiming>,(WebCore::DOMConstructorID)737>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsShadowRealmGlobalScope_self(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v9;
  BOOL v10;
  char **v11;
  BOOL v12;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      if (*(_BYTE *)(Object + 5) == 32)
      {
        Object = *(_QWORD *)(Object + 16);
        v3 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v4 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v5 = (char **)(16 * v3);
        if ((_DWORD)v3)
          v6 = v5 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v6 = 1;
        if (!v6)
        {
          do
          {
            v5 = (char **)v5[2];
            v4 = v5 != 0;
          }
          while (v5 != &WebCore::JSShadowRealmGlobalScope::s_info && v5 != 0);
        }
        if (v4)
          return *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(Object + 3400) + 24) + 3336);
      }
      else
      {
        v9 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v10 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v11 = (char **)(16 * v9);
        if ((_DWORD)v9)
          v12 = v11 == &WebCore::JSShadowRealmGlobalScope::s_info;
        else
          v12 = 1;
        if (!v12)
        {
          do
          {
            v11 = (char **)v11[2];
            v10 = v11 != 0;
          }
          while (v11 != &WebCore::JSShadowRealmGlobalScope::s_info && v11 != 0);
        }
        if (v10)
          return *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(Object + 3400) + 24) + 3336);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::JSShadowRealmGlobalScope::subspaceForImpl(WebCore::JSShadowRealmGlobalScope *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6032);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6032))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, v6 + 200, 3408, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6032);
    *(_QWORD *)(v8 + 6032) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6032);
  *(_QWORD *)(v3 + 6032) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSShadowRoot>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSShadowRoot>((WebCore::JSDocumentFragment *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

uint64_t WebCore::JSShadowRoot::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSDocumentFragment::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSDocumentFragment::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSDocumentFragment::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSShadowRoot::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  result = WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSShadowRoot::visitChildren(WebCore::JSShadowRoot *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = WebCore::JSNode::visitChildren(this, a2, a3);
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t WebCore::JSShadowRoot::createPrototype(WebCore::JSShadowRoot *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSDocumentFragment::prototype(this, a2, a3);
  Structure = WebCore::JSShadowRootPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSShadowRootPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSShadowRootPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSShadowRootPrototype::create(WebCore::JSShadowRootPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Document *v21;
  WebCore::Quirks *v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  JSC::Structure *v27;
  int v28;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  WTF::StringImpl *v46[6];
  int v47;
  int v48;
  JSC::Structure *v49;
  int v50;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v45 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v45);
    *((_QWORD *)this + 4865) = SlowCase + (int)v45;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<20u>(this, (uint64_t)&WebCore::JSShadowRoot::s_info, (uint64_t)&WebCore::JSShadowRootPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194F81530);
  }
  v10 = (int *)((char *)this + 93124);
  v11 = v9 - 192;
  if (!v9)
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 680) + 672);
  v13 = (v12 & 0x10000000000) == 0;
  if ((v12 & 0x10000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v30 = v46[0];
    v31 = *v10;
    *v10 = 1;
    LODWORD(v46[0]) = -1;
    WORD2(v46[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v31;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v32);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v14 && *(_BYTE *)(v14 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194F81550);
  }
  v15 = v14 - 192;
  if (!v14)
    v15 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v15 + 680) + 672) & 0x20000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v33 = v46[0];
    v34 = *v10;
    v13 = 1;
    *v10 = 1;
    LODWORD(v46[0]) = -1;
    WORD2(v46[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v34;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v35);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v16 && *(_BYTE *)(v16 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194F81570);
  }
  v17 = v16 - 192;
  if (!v16)
    v17 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v17 + 680) + 672) & 0x20000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v36 = v46[0];
    v37 = *v10;
    v13 = 1;
    *v10 = 1;
    LODWORD(v46[0]) = -1;
    WORD2(v46[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v37;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v38);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  v18 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v18 && *(_BYTE *)(v18 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194F81590);
  }
  v19 = v18 - 192;
  if (!v18)
    v19 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v19 + 680) + 712) & 0x10000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v39 = v46[0];
    v40 = *v10;
    v13 = 1;
    *v10 = 1;
    LODWORD(v46[0]) = -1;
    WORD2(v46[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v40;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v41);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  v20 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v20 && *(_BYTE *)(v20 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194F815B0);
  }
  v21 = (WebCore::Document *)(v20 - 192);
  if (!v20)
    v21 = 0;
  v22 = (WebCore::Quirks *)*((_QWORD *)v21 + 86);
  if (!v22)
    v22 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v21);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v22))
  {
    WTF::AtomStringImpl::addLiteral();
    v42 = v46[0];
    v43 = *v10;
    *v10 = 1;
    LODWORD(v46[0]) = -1;
    WORD2(v46[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v43;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v44);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
  else if (!v13)
  {
    goto LABEL_33;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_33:
  v23 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = JSC::JSString::create((uint64_t)this, v46);
  v26 = v46[0];
  v46[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v50 = *(_DWORD *)SlowCase;
  v49 = v27;
  v28 = JSC::Structure::outOfLineCapacity(v27);
  v47 = 0;
  v48 = v28;
  v46[0] = (WTF::StringImpl *)&v48;
  v46[1] = (WTF::StringImpl *)SlowCase;
  v46[2] = this;
  v46[3] = (WTF::StringImpl *)&v50;
  v46[4] = (WTF::StringImpl *)&v49;
  v46[5] = (WTF::StringImpl *)&v47;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v27, this, v23, 6, (uint64_t)v46);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v47, v25);
  *((_DWORD *)v27 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSShadowRoot>,(WebCore::DOMConstructorID)479>(WebCore::JSDocumentFragment *this, uint64_t a2, const JSC::JSGlobalObject *a3)
{
  unint64_t result;
  JSC::JSCell *Constructor;
  uint64_t Structure;
  JSC::Heap *v8;
  unint64_t v9;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3832);
  if (!result)
  {
    Constructor = (JSC::JSCell *)WebCore::JSDocumentFragment::getConstructor(this, (JSC::VM *)a2, a3);
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSShadowRoot>::createStructure((uint64_t *)this, a2, Constructor);
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSShadowRoot>::create((uint64_t)this, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3832) = result;
    if (result)
    {
      if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(a2 + 7))
      {
        v8 = (WebCore::JSDocumentFragment *)((char *)this + 192);
        v9 = result;
        JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
        return v9;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsShadowRootConstructor(uint64_t a1, unint64_t a2, const JSC::JSGlobalObject *a3)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSShadowRootPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSShadowRoot>,(WebCore::DOMConstructorID)479>(*(WebCore::JSDocumentFragment **)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), a3);
  }
}

uint64_t WebCore::jsShadowRoot_mode(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 193);
  if ((byte_1EE33694E & 1) == 0)
  {
    dword_1ECE7A080 += 2;
    byte_1EE33694E = 1;
    dword_1ECE7A0A0 += 2;
    qword_1EE336AF0 = (uint64_t)&dword_1ECE7A080;
    unk_1EE336AF8 = &dword_1ECE7A0A0;
    dword_1ECE7A0C0 += 2;
    qword_1EE336B00 = (uint64_t)&dword_1ECE7A0C0;
  }
  v5 = *(_QWORD *)&_MergedGlobals_774[8 * v4 + 424];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsShadowRoot_delegatesFocus(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 192) & 2) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsShadowRoot_slotAssignment(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 194);
  if ((byte_1EE33694F & 1) == 0)
  {
    dword_1ECE7A0E0 += 2;
    byte_1EE33694F = 1;
    qword_1EE336AB8 = (uint64_t)&dword_1ECE7A0E0;
    dword_1ECE7A100 += 2;
    qword_1EE336AC0 = (uint64_t)&dword_1ECE7A100;
  }
  v5 = *(_QWORD *)&_MergedGlobals_774[8 * v4 + 368];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsShadowRoot_clonable(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 192) & 4) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsShadowRoot_serializable(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 192) & 8) != 0)
    return 7;
  else
    return 6;
}

unint64_t WebCore::jsShadowRoot_host(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v4;
  WebCore::JSDOMGlobalObject *v5;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 200);
  if (v4 && (v5 = *(WebCore::JSDOMGlobalObject **)(v4 + 8)) != 0)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v5, a4);
  else
    return 2;
}

uint64_t WebCore::jsShadowRoot_onslotchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1864), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSShadowRoot_onslotchange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSShadowRoot *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(v5);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v7, (WTF::StringImpl **)(v10 + 1864), a3, v6);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v4 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v4 + 192), (const JSCell *)v6);
  return 1;
}

unint64_t WebCore::jsShadowRoot_activeElement(WebCore *a1, uint64_t a2)
{
  JSC::JSGlobalObject *v3;
  WebCore::JSDOMGlobalObject *v4;
  WebCore::Element *v5;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WebCore::JSDOMGlobalObject *)WebCore::TreeScope::focusedElementInScope(*(WebCore::TreeScope **)(*(_QWORD *)(a2 + 24) + 40));
  if (v4)
    return WebCore::toJS(a1, v3, v4, v5);
  else
    return 2;
}

uint64_t WebCore::jsShadowRoot_pictureInPictureElement()
{
  return 2;
}

unint64_t WebCore::jsShadowRoot_styleSheets(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  WebCore::StyleSheetList *v7;
  WTF *v9;
  void *v10;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(WTF **)(v3 + 208);
  if (!v5)
  {
    v5 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v5 = 1;
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = v3;
    *((_QWORD *)v5 + 3) = 0;
    *((_QWORD *)v5 + 4) = 0;
    v7 = *(WebCore::StyleSheetList **)(v3 + 208);
    *(_QWORD *)(v3 + 208) = v5;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::StyleSheetList::~StyleSheetList(v7, v6);
        WTF::fastFree(v9, v10);
        v5 = *(WTF **)(v3 + 208);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  return WebCore::wrap<WebCore::StyleSheetList>(a1, v4, v5);
}

unint64_t WebCore::jsShadowRoot_adoptedStyleSheets(WebCore::JSDOMGlobalObject *a1, uint64_t a2)
{
  unint64_t v2;
  JSC::VM *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 32);
  if (!v2)
  {
    v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v2 = WebCore::TreeScope::adoptedStyleSheetWrapper((WebCore::TreeScope *)(*(_QWORD *)(a2 + 24) + 96), a1);
    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v6 = *((_QWORD *)a1 + 7);
      *(_QWORD *)(a2 + 32) = v2;
      if ((v2 & 0xFFFE000000000002) == 0 && v2 && *(_DWORD *)(v6 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v6 + 192), (const JSCell *)a2);
    }
  }
  return v2;
}

uint64_t WebCore::setJSShadowRoot_adoptedStyleSheets(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSShadowRoot::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSShadowRoot::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  WebCore::setAdoptedStyleSheetsOnTreeScope((uint64_t *)(*(_QWORD *)(a2 + 24) + 96), a1, a3);
  return 1;
}

unint64_t WebCore::jsShadowRoot_fullscreenElement(WebCore *a1, WebCore::TreeScope *a2)
{
  JSC::JSGlobalObject *v3;
  WebCore::Element *v4;
  WebCore::Element *v5;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = WebCore::DocumentOrShadowRootFullscreen::fullscreenElement((WebCore::DocumentOrShadowRootFullscreen *)(*((_QWORD *)a2 + 3) + 96), a2);
  if (v4)
    return WebCore::toJS(a1, v3, v4, v5);
  else
    return 2;
}

BOOL WebCore::setJSShadowRoot_fullscreenElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSShadowRoot::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSShadowRoot::s_info && v4 != 0);
  }
  return v3 || JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsShadowRoot_innerHTML(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WebCore::TrustedHTML *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  _BYTE v14[40];
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD v18[5];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::ShadowRoot::innerHTML(*(WebCore::ShadowRoot **)(a2 + 24), &v11);
  v4 = v11;
  v11 = 0;
  v12 = v4;
  v13 = 1;
  v17 = 1;
  LOBYTE(v15) = 0;
  v16 = 0;
  v18[0] = &v17;
  v18[1] = &v15;
  v18[2] = a1;
  v18[3] = v3;
  v18[4] = &v12;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_11TrustedHTMLEEENS_33IDLLegacyNullToEmptyStringAdaptorINS_12IDLDOMStringEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSJ_12RawPtrTraitsIS5_EENSJ_21DefaultRefDerefTraitsIS5_EEEENSJ_6StringEEEEEUlTyvE_JNSH_17integral_constantIlLl0EEENSV_IlLl1EEEEEET_SY_((uint64_t)v18, v5, (uint64_t)v14);
  if (v16)
  {
    v7 = v15;
    if (v13 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E3309CA0[v13])(v18, &v12);
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    return v7;
  }
  else
  {
    v10 = std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::setJSShadowRoot_innerHTML(v10);
  }
}

BOOL WebCore::setJSShadowRoot_innerHTML(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::ContainerNode *v10;
  WTF::StringImpl *v11;
  int v12;
  _BOOL8 v13;
  int v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF *v24;
  uint64_t v25;
  _BYTE v26[40];
  uint64_t v27;
  JSC::JSGlobalObject *v28;
  int v29;
  WTF::StringImpl *v30;
  char v31;
  _BYTE v32[8];
  WTF::StringImpl *v33;
  char v34;
  _BYTE v35[8];
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRoot::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRoot::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(WebCore::ContainerNode **)(a2 + 24);
  v24 = (WTF *)v26;
  v25 = 4;
  v26[32] = 0;
  v27 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v28 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v24;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedHTML>,WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>>::convert(a1, a3, (uint64_t)v35);
  v12 = v38;
  v13 = v38 == 0;
  if (!v38)
  {
    v32[0] = 0;
    LODWORD(v33) = -1;
    v14 = v37;
    if (v37 != -1)
    {
      ((void (*)(int *, _BYTE *, uint64_t *))off_1E3309CB0[v37])(&v29, v32, &v36);
      LODWORD(v33) = v14;
    }
    WebCore::ShadowRoot::setInnerHTML(v10, (uint64_t)v32, (uint64_t)&v29);
    if ((_DWORD)v33 != -1)
      ((void (*)(char *, _BYTE *))off_1E3309CA0[v33])(&v34, v32);
    if (v31)
    {
      v11 = (WTF::StringImpl *)v29;
      v32[0] = v29;
      v21 = v30;
      v30 = 0;
      v33 = v21;
      if (!*((_QWORD *)v4 + 2))
      {
        v22.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v29, (JSC::JSGlobalObject *)&v33);
        JSC::VM::throwException(v4, a1, v22);
        v21 = v33;
      }
      v33 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v11);
        else
          *(_DWORD *)v21 -= 2;
      }
      if (v31)
      {
        v23 = v30;
        v30 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v11);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
    }
    v12 = v38;
  }
  if (v12 != -1)
    ((void (*)(int *, uint64_t *))off_1E3309CC0[v12])(&v29, &v36);
  if (HIDWORD(v25))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v24, v28);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v27;
    if (HIDWORD(v25))
    {
      v18 = v24;
      v19 = 8 * HIDWORD(v25);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v11);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v27;
  }
  v15 = v24;
  if (v26 != (_BYTE *)v24 && v24 != 0)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    WTF::fastFree(v15, v11);
  }
  return v13;
}

uint64_t WebCore::JSShadowRoot::subspaceForImpl(WebCore::JSShadowRoot *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3912);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v21 = *(_QWORD *)(v9 + 3912);
  if (!v21)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v14, &v23, (char *)this + 192, (char *)this + 1872, 40, 8, &v22);
    v16 = v22;
    v22 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v21 = v14;
    v18 = *(_QWORD *)(v9 + 3912);
    *(_QWORD *)(v9 + 3912) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      v20 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 2832, v19 + 1, (unint64_t)&v21);
      v19 = *(unsigned int *)(v7 + 2844);
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = *v20;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
    }
    *(_DWORD *)(v7 + 2844) = v19 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 3912);
  *(_QWORD *)(v3 + 3912) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::ShadowRoot,WebCore::ShadowRoot>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  WebCore::JSDocumentFragment *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  int v22;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_4;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSShadowRoot::s_info + ~((_QWORD)&WebCore::JSShadowRoot::s_info << 32)) ^ (((unint64_t)&WebCore::JSShadowRoot::s_info + ~((_QWORD)&WebCore::JSShadowRoot::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSShadowRoot::s_info)
  {
    v22 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v22) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v22;
      if (v12 == &WebCore::JSShadowRoot::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v13)
  {
LABEL_4:
    v14 = (WebCore::JSDocumentFragment *)*((_QWORD *)a1 + 7);
    v15 = (JSC::JSCell *)WebCore::JSDocumentFragment::prototype(v14, a1, a3);
    Structure = WebCore::JSShadowRootPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSShadowRootPrototype::create(v14, a1, Structure, v17);
    v19 = WebCore::JSShadowRoot::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
    v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSShadowRoot::s_info);
  }
  v20 = WebCore::JSShadowRoot::create(v13, a1, a2);
  WebCore::cacheWrapper<WebCore::CDATASection,WebCore::JSCDATASection>(*((_QWORD *)a1 + 415), v5, v20);
  return v20;
}

uint64_t WebCore::wrap<WebCore::ShadowRoot>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v7 = *(_QWORD *)(v3 + 32);
    if (!v7)
      goto LABEL_12;
    v8 = *(_DWORD *)(v7 - 8);
    v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v7 + 16 * v12);
    if (v13 != a3)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v7 + 16 * v12);
        ++v14;
        if (v13 == a3)
          goto LABEL_11;
      }
      goto LABEL_12;
    }
LABEL_11:
    v4 = *(_QWORD *)(v7 + 16 * v12 + 8);
    if (!v4)
      goto LABEL_12;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (!v4)
      goto LABEL_12;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_12:
  *(_DWORD *)(a3 + 24) += 2;
  v17 = (WebCore::Node *)a3;
  if (*(uint64_t (***)(WebCore::Node *__hidden))a3 == off_1E33A7A70)
  {
    v5 = WebCore::createWrapper<WebCore::ShadowRoot,WebCore::ShadowRoot>(a2, (uint64_t *)&v17, (WebCore::JSDOMGlobalObject *)a3);
    v16 = v17;
    v17 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v15);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    return v5;
  }
  result = 715;
  __break(0xC471u);
  return result;
}

unint64_t JSC::jsDynamicCast<WebCore::JSShadowRoot *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSShadowRoot::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSShadowRoot::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::ShadowRootInit>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  BOOL v9;
  JSC::VM *v10;
  double v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  BOOL v14;
  JSC::VM *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  int v22;
  char **v23;
  char v24;
  int v25;
  uint64_t result;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  int *v31;
  int v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint16x8_t v39;
  uint16x8_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  BOOL v45;
  JSC::VM *v46;
  double v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  char v51;
  JSC::VM *v52;
  int v53;
  const char *v54;
  int v55;
  char **v56;
  int v57;
  BOOL v58;
  int v59;
  uint64_t v60;
  int *v61;
  int v62;
  JSC::VM *v64;
  JSC::VM *v65;
  uint64_t v66;
  WTF::StringImpl *v67;

  v64 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_82:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v64, "mode", 5, "ShadowRootInit", 15, "ShadowRootMode", 15);
    goto LABEL_66;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0)
    goto LABEL_65;
  Object = JSC::JSCell::getObject(this);
  if (!Object)
    goto LABEL_65;
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v67);
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v7);
    else
      *(_DWORD *)v67 -= 2;
  }
  if (*((_DWORD *)v64 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v64);
    if ((result & 1) != 0)
      goto LABEL_66;
  }
  if (v8 == 10)
  {
    v9 = 0;
    goto LABEL_15;
  }
  v10 = a2[7];
  if (v8 >= 0xFFFE000000000000)
  {
    v28 = (_DWORD)v8 == 0;
    goto LABEL_84;
  }
  *(_QWORD *)&v11 = v8 - 0x2000000000000;
  if (v8 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v8 & 0xFFFE000000000002) != 0)
    {
      v9 = v8 == 7;
      goto LABEL_14;
    }
    v29 = *(unsigned __int8 *)(v8 + 5);
    if (v29 == 3)
    {
      v32 = *(_DWORD *)(v8 + 8);
    }
    else
    {
      if (v29 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v9 = 1;
          goto LABEL_14;
        }
        v28 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
        goto LABEL_84;
      }
      v30 = *(_QWORD *)(v8 + 8);
      if ((v30 & 1) != 0)
        v31 = (int *)(v8 + 16);
      else
        v31 = (int *)(v30 + 4);
      v32 = *v31;
    }
    v28 = v32 == 0;
LABEL_84:
    v9 = !v28;
    goto LABEL_14;
  }
  v9 = v11 > 0.0 || v11 < 0.0;
LABEL_14:
  if (*((_DWORD *)v10 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
    if ((result & 1) != 0)
      goto LABEL_66;
  }
LABEL_15:
  WTF::AtomStringImpl::addLiteral();
  v13 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v67);
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v12);
    else
      *(_DWORD *)v67 -= 2;
  }
  if (*((_DWORD *)v64 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v64);
    if ((result & 1) != 0)
      goto LABEL_66;
  }
  if (v13 == 10)
  {
    v14 = 0;
    goto LABEL_26;
  }
  v15 = a2[7];
  if (v13 >= 0xFFFE000000000000)
  {
    v33 = (_DWORD)v13 == 0;
    goto LABEL_97;
  }
  if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v13 & 0xFFFE000000000002) != 0)
    {
      v14 = v13 == 7;
      goto LABEL_25;
    }
    v34 = *(unsigned __int8 *)(v13 + 5);
    if (v34 == 3)
    {
      v37 = *(_DWORD *)(v13 + 8);
    }
    else
    {
      if (v34 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v14 = 1;
          goto LABEL_25;
        }
        v33 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
        goto LABEL_97;
      }
      v35 = *(_QWORD *)(v13 + 8);
      if ((v35 & 1) != 0)
        v36 = (int *)(v13 + 16);
      else
        v36 = (int *)(v35 + 4);
      v37 = *v36;
    }
    v33 = v37 == 0;
LABEL_97:
    v14 = !v33;
    goto LABEL_25;
  }
  v14 = COERCE_DOUBLE(v13 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v13 - 0x2000000000000) < 0.0;
LABEL_25:
  if (*((_DWORD *)v15 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
    if ((result & 1) != 0)
      goto LABEL_66;
  }
LABEL_26:
  WTF::AtomStringImpl::addLiteral();
  v17 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v67);
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v16);
    else
      *(_DWORD *)v67 -= 2;
  }
  if (*((_DWORD *)v64 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v64);
    if ((result & 1) != 0)
      goto LABEL_66;
  }
  if (v17 == 10)
    goto LABEL_82;
  v18 = a2[7];
  v65 = v18;
  v67 = (WTF::StringImpl *)v17;
  if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v67, (JSC::JSGlobalObject *)a2);
    v19 = v66;
  }
  else
  {
    v19 = *(_QWORD *)(v17 + 8);
    if ((v19 & 1) != 0)
      v19 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v17, (JSC::JSGlobalObject *)a2);
    if (v19)
      *(_DWORD *)v19 += 2;
    v66 = v19;
  }
  if (!v19)
  {
    v24 = 0;
    v25 = 0;
    goto LABEL_140;
  }
  v20 = *(_DWORD *)(v19 + 16);
  v21 = *(const char **)(v19 + 8);
  v22 = *(_DWORD *)(v19 + 4);
  if (v21 == "closed" || v22 != 6)
  {
    if (v21 == "closed" && v22 == 6)
      goto LABEL_45;
    if (v21 == "open" || v22 != 4)
    {
      if (v21 != "open" || v22 != 4)
      {
        if (v21 == "user-agent" || v22 != 10)
        {
          if (v22 != 10 || v21 != "user-agent")
            goto LABEL_137;
        }
        else if ((v20 & 4) != 0)
        {
          if (*v21 != 117
            || *(_QWORD *)(v21 + 1) != 0x6E6567612D726573
            || *(_QWORD *)(v21 + 2) != 0x746E6567612D7265)
          {
            goto LABEL_137;
          }
        }
        else
        {
          if (*(_WORD *)v21 != 117)
            goto LABEL_137;
          v39 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v21 + 2), (int16x8_t)xmmword_1968C0F30);
          v39.i16[0] = vminvq_u16(v39);
          if (!v39.i32[0])
            goto LABEL_137;
          v40 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v21 + 4), (int16x8_t)xmmword_1968C0F40);
          v40.i16[0] = vminvq_u16(v40);
          if (!v40.i32[0])
            goto LABEL_137;
        }
        v23 = &off_1E33033C0;
        goto LABEL_46;
      }
    }
    else if ((v20 & 4) != 0)
    {
      if (*v21 != 111 || *(_WORD *)(v21 + 1) != 25968 || *((_WORD *)v21 + 1) != 28261)
        goto LABEL_137;
    }
    else
    {
      if (*(_WORD *)v21 != 111)
        goto LABEL_137;
      v25 = 0;
      if (*(_DWORD *)(v21 + 2) != 6619248)
        goto LABEL_71;
      v24 = 0;
      if (*((_DWORD *)v21 + 1) != 7209061)
        goto LABEL_138;
    }
    v23 = &off_1E33033A8;
    goto LABEL_46;
  }
  if ((v20 & 4) != 0)
  {
    if (*v21 == 99 && *(_DWORD *)(v21 + 1) == 1702063980 && *(_DWORD *)(v21 + 2) == 1684370287)
      goto LABEL_45;
    goto LABEL_137;
  }
  if (*(_WORD *)v21 != 99)
  {
LABEL_137:
    v25 = 0;
    v24 = 0;
    goto LABEL_138;
  }
  v25 = 0;
  if (*(_QWORD *)(v21 + 2) != 0x650073006F006CLL)
  {
LABEL_71:
    v24 = 0;
    goto LABEL_138;
  }
  v24 = 0;
  if (*(_QWORD *)(v21 + 4) == 0x6400650073006FLL)
  {
LABEL_45:
    v23 = &WebCore::parseEnumerationFromString<WebCore::ShadowRootMode>(WTF::String const&)::mappings;
LABEL_46:
    v24 = *((_BYTE *)v23 + 16);
    v25 = 1;
  }
LABEL_138:
  v66 = 0;
  if (*(_DWORD *)v19 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v19, v16);
  else
    *(_DWORD *)v19 -= 2;
LABEL_140:
  if (*((_DWORD *)v18 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v18);
    if ((result & 1) != 0)
      goto LABEL_66;
  }
  if (v25)
  {
    v41 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)a2);
    if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 136))(v41) + 440) & 0x20000000000) == 0)
      goto LABEL_148;
    WTF::AtomStringImpl::addLiteral();
    v42 = v67;
    v44 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v67);
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v43);
      else
        *(_DWORD *)v42 -= 2;
    }
    if (*((_DWORD *)v64 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v64);
      if ((result & 1) != 0)
        goto LABEL_66;
    }
    if (v44 == 10)
    {
LABEL_148:
      v45 = 0;
      goto LABEL_154;
    }
    v46 = a2[7];
    if (v44 >= 0xFFFE000000000000)
    {
      v58 = (_DWORD)v44 == 0;
      goto LABEL_217;
    }
    *(_QWORD *)&v47 = v44 - 0x2000000000000;
    if (v44 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v47 <= 0.0)
      {
        v45 = v47 < 0.0;
        goto LABEL_153;
      }
    }
    else
    {
      if ((v44 & 0xFFFE000000000002) != 0)
      {
        v45 = v44 == 7;
        goto LABEL_153;
      }
      v59 = *(unsigned __int8 *)(v44 + 5);
      if (v59 == 3)
      {
        v62 = *(_DWORD *)(v44 + 8);
LABEL_230:
        v58 = v62 == 0;
        goto LABEL_217;
      }
      if (v59 == 2)
      {
        v60 = *(_QWORD *)(v44 + 8);
        if ((v60 & 1) != 0)
          v61 = (int *)(v44 + 16);
        else
          v61 = (int *)(v60 + 4);
        v62 = *v61;
        goto LABEL_230;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v58 = *(_QWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_217:
        v45 = !v58;
LABEL_153:
        if (*((_DWORD *)v46 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v46);
          if ((result & 1) != 0)
            goto LABEL_66;
        }
LABEL_154:
        WTF::AtomStringImpl::addLiteral();
        v48 = v67;
        v50 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v67);
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, v49);
          else
            *(_DWORD *)v48 -= 2;
        }
        result = (uint64_t)v64;
        if (*((_DWORD *)v64 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v64);
          if ((result & 1) != 0)
            goto LABEL_66;
        }
        if (v50 == 10)
        {
          v51 = 1;
LABEL_202:
          v27 = 0;
          *(_BYTE *)a3 = v24;
          *(_BYTE *)(a3 + 1) = v14;
          *(_BYTE *)(a3 + 2) = v9;
          *(_BYTE *)(a3 + 3) = v45;
          *(_BYTE *)(a3 + 4) = v51;
          goto LABEL_203;
        }
        v52 = a2[7];
        v65 = v52;
        v67 = (WTF::StringImpl *)v50;
        if ((v50 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v50 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v67, (JSC::JSGlobalObject *)a2);
          result = v66;
        }
        else
        {
          result = *(_QWORD *)(v50 + 8);
          if ((result & 1) != 0)
            result = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v50, (JSC::JSGlobalObject *)a2);
          if (result)
            *(_DWORD *)result += 2;
          v66 = result;
        }
        if (!result)
        {
          v51 = 0;
          v57 = 0;
LABEL_200:
          if (*((_DWORD *)v52 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v52);
            if ((result & 1) != 0)
              goto LABEL_66;
          }
          if (v57)
            goto LABEL_202;
          goto LABEL_65;
        }
        v53 = *(_DWORD *)(result + 16);
        v54 = *(const char **)(result + 8);
        v55 = *(_DWORD *)(result + 4);
        if (v54 != "manual" && v55 == 6)
        {
          if ((v53 & 4) != 0)
          {
            if (*v54 == 109 && *(_DWORD *)(v54 + 1) == 1635085921 && *(_DWORD *)(v54 + 2) == 1818326382)
              goto LABEL_174;
          }
          else if (*(_WORD *)v54 == 109)
          {
            v57 = 0;
            if (*(_QWORD *)(v54 + 2) == 0x610075006E0061)
            {
              v51 = 0;
              if (*(_QWORD *)(v54 + 4) == 0x6C00610075006ELL)
              {
LABEL_174:
                v56 = &WebCore::parseEnumerationFromString<WebCore::SlotAssignmentMode>(WTF::String const&)::mappings;
LABEL_175:
                v51 = *((_BYTE *)v56 + 16);
                v57 = 1;
              }
            }
            else
            {
              v51 = 0;
            }
LABEL_198:
            v66 = 0;
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v49);
            else
              *(_DWORD *)result -= 2;
            goto LABEL_200;
          }
LABEL_197:
          v57 = 0;
          v51 = 0;
          goto LABEL_198;
        }
        if (v54 == "manual" && v55 == 6)
          goto LABEL_174;
        if (v54 == "named" || v55 != 5)
        {
          if (v55 != 5 || v54 != "named")
            goto LABEL_197;
        }
        else if ((v53 & 4) != 0)
        {
          if (*v54 != 110 || *(_WORD *)(v54 + 1) != 28001 || *(_WORD *)(v54 + 3) != 25701)
            goto LABEL_197;
        }
        else if (*(_WORD *)v54 != 110 || *(_QWORD *)(v54 + 2) != 0x640065006D0061)
        {
          goto LABEL_197;
        }
        v56 = &off_1E3303848;
        goto LABEL_175;
      }
    }
    v45 = 1;
    goto LABEL_153;
  }
LABEL_65:
  result = JSC::throwTypeError();
LABEL_66:
  v27 = 1;
LABEL_203:
  *(_DWORD *)(a3 + 8) = v27;
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::ShareData>@<X0>(JSC::JSCell *this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  int v5;
  unsigned int v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  JSC::JSGlobalObject *v10;
  uint64_t Object;
  JSC::Structure *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  JSValue v16;
  int i;
  unsigned int v18;
  uint64_t IndexQuickly;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  void *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  int v49;
  JSC::VM *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;

  v4 = *(JSC::VM **)(result + 56);
  v50 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
LABEL_75:
    v41 = 0;
LABEL_78:
    *(_QWORD *)a3 = v9;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v41;
    *(_QWORD *)(a3 + 24) = v7;
    *(_DWORD *)(a3 + 32) = v5;
    *(_DWORD *)(a3 + 36) = v6;
    *(_DWORD *)(a3 + 40) = 0;
    return result;
  }
  v10 = (JSC::JSGlobalObject *)result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
LABEL_43:
    *(_DWORD *)(a3 + 40) = 1;
    return result;
  }
  v12 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v14 = JSC::JSObject::get(v12, v10, (unint64_t)v47);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v13);
    else
      *(_DWORD *)v47 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_43;
  }
  if (v14 == 10)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_54;
  }
  v15 = *((_QWORD *)v10 + 7);
  v51 = v15;
  if ((v14 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v14 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v21 = v52;
    v52 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v7 = 0;
    v6 = 0;
    v5 = 0;
    v22 = 0;
    v23 = 1;
    v49 = 1;
    *(_DWORD *)(a3 + 40) = 1;
    goto LABEL_53;
  }
  v52 = 0;
  v53 = 0;
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v18 = (*(_BYTE *)(v14 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v14 + 8) - 8) : 0;
      if (i - 1 >= v18)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v14, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v14, v10, (i - 1));
      if (*(_DWORD *)(v15 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15);
        if ((result & 1) != 0)
          break;
      }
      result = WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::File>>::convert((uint64_t)v10, IndexQuickly, (uint64_t)&v52);
      if (*(_QWORD *)(v15 + 16))
      {
        v26 = JSC::JSArrayIterator::create();
        v27 = i | 0xFFFE000000000000;
        if (i < 0)
          v27 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v26 + 16) = v27;
        goto LABEL_47;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(v10, (JSC::JSGlobalObject *)v14, v16);
    if (!*(_DWORD *)(v15 + 80)
      || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v15 + 16) || result == 6)
          break;
        v25 = JSC::iteratorValue();
        if (*(_DWORD *)(v15 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15);
          if ((result & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::File>>::convert((uint64_t)v10, v25, (uint64_t)&v52);
        if (*(_QWORD *)(v15 + 16))
        {
LABEL_47:
          result = JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (!*(_DWORD *)(v15 + 80))
  {
    v28 = v52;
LABEL_50:
    v47 = v28;
    v48 = v53;
    v49 = 0;
    goto LABEL_51;
  }
  result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15);
  v28 = v52;
  if ((result & 1) == 0)
    goto LABEL_50;
  v49 = 1;
  if (HIDWORD(v53))
  {
    v46 = 8 * HIDWORD(v53);
    do
    {
      result = *(_QWORD *)v28;
      *(_QWORD *)v28 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 16) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 16);
      }
      v28 = (WTF::StringImpl *)((char *)v28 + 8);
      v46 -= 8;
    }
    while (v46);
    v28 = v52;
  }
  if (v28)
  {
    v52 = 0;
    LODWORD(v53) = 0;
    result = WTF::fastFree(v28, v45);
  }
LABEL_51:
  v23 = v49;
  if (v49)
  {
    *(_DWORD *)(a3 + 40) = 1;
    if (v23 == -1)
      return result;
    v7 = 0;
    v6 = 0;
    v5 = 0;
    v22 = 0;
  }
  else
  {
    v7 = v47;
    v5 = v48;
    v6 = HIDWORD(v48);
    v22 = 1;
    v47 = 0;
    v48 = 0;
  }
LABEL_53:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3309CE0[v23])(&v52, &v47);
  if (!v22)
  {
LABEL_93:
    v8 = 0;
    goto LABEL_94;
  }
LABEL_54:
  WTF::AtomStringImpl::addLiteral();
  v30 = v47;
  v32 = JSC::JSObject::get(v12, v10, (unint64_t)v47);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v31);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
    {
      v8 = 0;
LABEL_88:
      v9 = 0;
LABEL_90:
      *(_DWORD *)(a3 + 40) = 1;
      goto LABEL_95;
    }
  }
  if (v32 == 10)
  {
    v8 = 0;
    goto LABEL_62;
  }
  result = WebCore::valueToUSVString(v10, v32, (uint64_t)&v47);
  v33 = v48;
  if ((_DWORD)v48)
  {
    *(_DWORD *)(a3 + 40) = 1;
    if ((_DWORD)v33 != -1)
      result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33088B8[v33])(&v52, &v47);
    goto LABEL_93;
  }
  v8 = v47;
  v47 = 0;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v52, (WTF::StringImpl *)&v47);
LABEL_62:
  WTF::AtomStringImpl::addLiteral();
  v34 = v47;
  v36 = JSC::JSObject::get(v12, v10, (unint64_t)v47);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v35);
    else
      *(_DWORD *)v34 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_88;
  }
  if (v36 != 10)
  {
    result = WebCore::valueToUSVString(v10, v36, (uint64_t)&v47);
    v37 = v48;
    if (!(_DWORD)v48)
    {
      v9 = v47;
      v47 = 0;
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v52, (WTF::StringImpl *)&v47);
      goto LABEL_70;
    }
    *(_DWORD *)(a3 + 40) = 1;
    if ((_DWORD)v37 != -1)
      result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33088B8[v37])(&v52, &v47);
LABEL_94:
    v9 = 0;
    goto LABEL_95;
  }
  v9 = 0;
LABEL_70:
  WTF::AtomStringImpl::addLiteral();
  v38 = v47;
  result = JSC::JSObject::get(v12, v10, (unint64_t)v47);
  v40 = result;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      result = WTF::StringImpl::destroy(v38, v39);
    else
      *(_DWORD *)v38 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_90;
  }
  if (v40 == 10)
    goto LABEL_75;
  result = WebCore::valueToUSVString(v10, v40, (uint64_t)&v47);
  v42 = v48;
  if (!(_DWORD)v48)
  {
    v41 = v47;
    v47 = 0;
    result = (uint64_t)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v52, (WTF::StringImpl *)&v47);
    goto LABEL_78;
  }
  *(_DWORD *)(a3 + 40) = 1;
  if ((_DWORD)v42 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33088B8[v42])(&v52, &v47);
LABEL_95:
  if (v6)
  {
    v43 = 8 * v6;
    v44 = (uint64_t *)v7;
    do
    {
      result = *v44;
      *v44 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 16) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 16);
      }
      ++v44;
      v43 -= 8;
    }
    while (v43);
  }
  if (v7)
    result = WTF::fastFree(v7, v29);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      result = WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v29);
      if (!v9)
        return result;
      goto LABEL_109;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v9)
    return result;
LABEL_109:
  if (*(_DWORD *)v9 == 2)
    return WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v29);
  *(_DWORD *)v9 -= 2;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSSharedWorker>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t (*v19)();
  int v20;
  int v21;
  unint64_t *v22;
  int v23;
  WebCore::JSDOMGlobalObject *v24;
  JSC::VM *v25;
  JSC::VM *v26;
  WTF *v27;
  JSCell *v28;
  JSC::JSCell *v29;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v31;
  JSC::JSGlobalObject *v32;
  JSC::VM *v33;
  JSC::JSObject *v34;
  JSC::Structure *v35;
  JSC::VM *FunctionRealm;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char **v43;
  int v44;
  JSC::JSCell *v45;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v47;
  JSC::Structure *v48;
  JSC::JSCell *v49;
  uint64_t v50;
  unint64_t SubclassStructure;
  JSValue v53;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  JSValue v57;
  WTF::StringImpl *v58;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v60;
  JSC::VM *v61;
  WTF::StringImpl *v62;
  int v63;
  int v64;
  int v65[2];
  WTF::StringImpl *v66;
  int v67;
  char v68;
  char v69;
  char v70[8];
  _BYTE v71[16];
  int v72;
  char v73;
  int v74;
  char v75[8];
  uint64_t v76;
  int v77;
  int v78;
  WTF *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v61 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v53.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, this, v53);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v61, (uint64_t)"SharedWorker", 13);
  v7 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194F84100);
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScriptURL>,WebCore::IDLUSVString>>::convert(this, *(_QWORD *)(a2 + 48), (uint64_t)v75);
  v8 = v78;
  if (v78)
  {
    v28 = 0;
LABEL_80:
    if (v8 != -1)
      ((void (*)(char *, uint64_t *))off_1E3309D50[v8])(v70, &v76);
    return v28;
  }
  if ((unint64_t)(*(int *)(a2 + 32) - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    v9 = *(_QWORD *)(a2 + 56);
    if (v9 != 10)
    {
      if ((v9 & 0xFFFFFFFFFFFFFFF7) == 2)
        goto LABEL_9;
      if ((v9 & 0xFFFE000000000002) != 0)
      {
        v79 = *(WTF **)(a2 + 56);
        v10 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_14:
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v79, this);
        goto LABEL_23;
      }
      v12 = *(unsigned __int8 *)(v9 + 5);
      if (v12 >= 0x17)
      {
LABEL_9:
        WebCore::convertDictionary<WebCore::WorkerOptions>(*(JSC::JSCell **)(a2 + 56), (uint64_t)this, (uint64_t)v65);
        if (v67)
        {
          v83 = 1;
          if (v67 == -1)
          {
LABEL_27:
            v17 = v83;
            if (v83)
            {
              v74 = 1;
              goto LABEL_38;
            }
            LOBYTE(v62) = 0;
            v64 = -1;
            v18 = v82;
            if (v82 == -1)
            {
              LOBYTE(v65[0]) = 0;
              v68 = 1;
              v71[0] = 0;
              v72 = -1;
              v73 = 1;
              v74 = 0;
            }
            else
            {
              v19 = off_1E3309D20[v82];
              ((void (*)(int *, WTF::StringImpl **, WTF::StringImpl **))v19)(v65, &v62, &v80);
              v64 = v18;
              LOBYTE(v65[0]) = 0;
              v67 = -1;
              ((void (*)(char *, int *, WTF::StringImpl **))v19)(&v69, v65, &v62);
              v67 = v18;
              v68 = 1;
              v71[0] = 0;
              v73 = 0;
              v72 = -1;
              ((void (*)(char *, _BYTE *, int *))v19)(&v69, v71, v65);
              v72 = v18;
              v73 = 1;
              v74 = 0;
              if (!v68)
              {
LABEL_35:
                if (v64 != -1)
                  ((void (*)(char *, WTF::StringImpl **))off_1E3309D10[v64])(&v69, &v62);
                v17 = v83;
LABEL_38:
                if (v17 != -1)
                  ((void (*)(int *, WTF::StringImpl **))off_1E330BE20[v17])(v65, &v80);
                v20 = v74;
                if (v74)
                {
                  v28 = 0;
LABEL_77:
                  if (v20 != -1)
                    ((void (*)(WTF **, _BYTE *))off_1E3309D40[v20])(&v79, v71);
                  v8 = v78;
                  goto LABEL_80;
                }
                if (v78)
                  goto LABEL_117;
                goto LABEL_42;
              }
              if (v67 != -1)
                ((void (*)(char *, int *))off_1E3309D10[v67])(&v69, v65);
            }
            v67 = -1;
            goto LABEL_35;
          }
        }
        else
        {
          v11 = v66;
          v66 = 0;
          LOWORD(v80) = v65[0];
          v81 = v11;
          v82 = 1;
          v83 = 0;
        }
        ((void (*)(WTF::StringImpl **, int *))off_1E330BE10[v67])(&v62, v65);
        goto LABEL_27;
      }
      v79 = *(WTF **)(a2 + 56);
      v10 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v12 != 2)
        goto LABEL_14;
      v13 = *(WTF::StringImpl **)(v9 + 8);
      if ((v13 & 1) != 0)
      {
        v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v9, this);
        if (!v13)
          goto LABEL_22;
      }
      else if (!v13)
      {
LABEL_22:
        v62 = v13;
LABEL_23:
        if (*((_DWORD *)v10 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
          v14 = v62;
          if (hasExceptionsAfterHandlingTraps)
          {
            LODWORD(v66) = 1;
            v62 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v58);
              else
                *(_DWORD *)v14 -= 2;
            }
            v15 = 1;
            v16 = 1;
            goto LABEL_26;
          }
        }
        else
        {
          v14 = v62;
        }
        v15 = 0;
        v16 = 0;
        LODWORD(v66) = 0;
        *(_QWORD *)v65 = 0;
        v80 = v14;
        v82 = 0;
LABEL_26:
        v83 = v15;
        ((void (*)(WTF::StringImpl **, int *))off_1E33088B8[v16])(&v62, v65);
        goto LABEL_27;
      }
      *(_DWORD *)v13 += 2;
      goto LABEL_22;
    }
  }
  v71[0] = 0;
  v73 = 0;
  v74 = 0;
LABEL_42:
  LOBYTE(v62) = 0;
  v63 = -1;
  v21 = v77;
  if (v77 == -1
    || (((void (*)(WTF **, WTF::StringImpl **, uint64_t *))off_1E3309D00[v77])(&v79, &v62, &v76),
        v63 = v21,
        !v74))
  {
    v22 = (unint64_t *)(v7 - 192);
    LOBYTE(v79) = 0;
    LOBYTE(v82) = 0;
    if (v73)
    {
      LODWORD(v81) = -1;
      v23 = v72;
      if (v72 != -1)
      {
        ((void (*)(char *, WTF **, _BYTE *))off_1E3309D20[v72])(&v69, &v79, v71);
        LODWORD(v81) = v23;
      }
      LOBYTE(v82) = 1;
    }
    WebCore::SharedWorker::create(v22, (uint64_t)&v62, (char *)&v79, (uint64_t *)v65);
    if ((_BYTE)v82 && (_DWORD)v81 != -1)
      ((void (*)(char *, WTF **))off_1E3309D10[v81])(&v69, &v79);
    if (v63 != -1)
      ((void (*)(WTF **, WTF::StringImpl **))off_1E3309CF0[v63])(&v79, &v62);
    v25 = v61;
    if (*((_DWORD *)v61 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v61) & 1) != 0)
      goto LABEL_105;
    if (!v67)
    {
      v26 = *(JSC::VM **)(v5 + 40);
      v27 = *(WTF **)v65;
      *(_QWORD *)v65 = 0;
      v79 = v27;
      if (*(uint64_t (***)(WebCore::SharedWorker *__hidden))v27 != off_1E3482B60)
      {
        __break(0xC471u);
        JUMPOUT(0x194F841A8);
      }
      v28 = (JSCell *)WebCore::createWrapper<WebCore::SharedWorker,WebCore::SharedWorker>(v26, &v79, v24);
      if (v79)
      {
        if (*((_DWORD *)v79 + 6) == 1)
          (*(void (**)(WTF *))(*(_QWORD *)v79 + 72))(v79);
        else
          --*((_DWORD *)v79 + 6);
      }
      goto LABEL_59;
    }
    if (v67 == 1)
    {
      v55 = (WTF::StringImpl *)LOBYTE(v65[0]);
      LOBYTE(v79) = v65[0];
      v56 = v66;
      v66 = 0;
      v80 = v56;
      if (!*((_QWORD *)v61 + 2))
      {
        v57.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v65[0]), (JSC::JSGlobalObject *)&v80);
        JSC::VM::throwException(v61, this, v57);
        v56 = v80;
      }
      v80 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v55);
        else
          *(_DWORD *)v56 -= 2;
      }
      v28 = 0;
LABEL_59:
      if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
      {
LABEL_105:
        v28 = 0;
LABEL_74:
        if (v67 != -1)
          ((void (*)(WTF **, int *))off_1E3309D30[v67])(&v79, v65);
        v20 = v74;
        goto LABEL_77;
      }
      v29 = *(JSC::JSCell **)(a2 + 40);
      if (((unint64_t)v29 & 0xFFFE000000000002) != 0
        || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v29)) == 0
        || (v32 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
        || (v33 = (JSC::VM *)*((_QWORD *)this + 7),
            FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, Object, v31),
            *((_DWORD *)v33 + 20))
        && (JSC::VM::hasExceptionsAfterHandlingTraps(v33) & 1) != 0)
      {
LABEL_73:
        if (!*((_DWORD *)v25 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) == 0)
          goto LABEL_74;
        goto LABEL_105;
      }
      v37 = *((_QWORD *)FunctionRealm + 412);
      if (v37)
      {
        v38 = *(_DWORD *)(v37 - 8);
        v39 = ((unint64_t)&WebCore::JSSharedWorker::s_info + ~((_QWORD)&WebCore::JSSharedWorker::s_info << 32)) ^ (((unint64_t)&WebCore::JSSharedWorker::s_info + ~((_QWORD)&WebCore::JSSharedWorker::s_info << 32)) >> 22);
        v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
        v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
        v42 = v38 & ((v41 >> 31) ^ v41);
        v43 = *(char ***)(v37 + 16 * v42);
        if (v43 == &WebCore::JSSharedWorker::s_info)
        {
LABEL_69:
          v34 = *(JSC::JSObject **)(v37 + 16 * v42 + 8);
          if (v34)
          {
LABEL_71:
            SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v32, v34, v35);
            if (!*((_DWORD *)v33 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v33) & 1) == 0)
              JSC::JSObject::setStructure(v28, v33, SubclassStructure);
            goto LABEL_73;
          }
        }
        else
        {
          v44 = 1;
          while (v43)
          {
            v42 = ((_DWORD)v42 + v44) & v38;
            v43 = *(char ***)(v37 + 16 * v42);
            ++v44;
            if (v43 == &WebCore::JSSharedWorker::s_info)
              goto LABEL_69;
          }
        }
      }
      v45 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v33, FunctionRealm, v34);
      Structure = WebCore::JSSharedWorkerPrototype::createStructure((uint64_t *)v33, (uint64_t)FunctionRealm, v45);
      *(_DWORD *)(Structure + 16) |= 0x80000u;
      v49 = (JSC::JSCell *)WebCore::JSSharedWorkerPrototype::create(v33, Structure, v47, v48);
      v50 = WebCore::JSSharedWorker::createStructure((uint64_t *)v33, (uint64_t)FunctionRealm, v49);
      v34 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v50, (uint64_t)&WebCore::JSSharedWorker::s_info);
      goto LABEL_71;
    }
  }
LABEL_117:
  v60 = std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSSharedWorker::analyzeHeap(v60);
}

uint64_t WebCore::JSSharedWorker::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSharedWorkerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSharedWorkerPrototype::create(WebCore::JSSharedWorkerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSharedWorker::s_info, &WebCore::JSSharedWorkerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSharedWorker>,(WebCore::DOMConstructorID)915>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7320);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructor<WebCore::JSSharedWorker>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSharedWorker::s_info + ~((_QWORD)&WebCore::JSSharedWorker::s_info << 32)) ^ (((unint64_t)&WebCore::JSSharedWorker::s_info + ~((_QWORD)&WebCore::JSSharedWorker::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSharedWorker::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSharedWorker::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSharedWorkerPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSharedWorkerPrototype::create((WebCore::JSSharedWorkerPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSharedWorker::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSharedWorker::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7320) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSharedWorkerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSharedWorkerPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSharedWorker>,(WebCore::DOMConstructorID)915>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSharedWorker_port(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::MessagePort>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 184));
}

uint64_t WebCore::jsSharedWorker_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSSharedWorker_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSharedWorker::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSharedWorker::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 784), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSSharedWorkerOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[5];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[6] || (result = (*(uint64_t (**)(_QWORD *))(v5[4] + 64))(v5 + 4), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSSharedWorkerOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v4 + 1;
  v5 = result + 8;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 24) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  *(_DWORD *)(result + 24) = v4;
  return result;
}

unint64_t WebCore::createWrapper<WebCore::SharedWorker,WebCore::SharedWorker>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  WTF *v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *Allocator;
  uint64_t v47;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  WTF *v55;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSSharedWorker::s_info + ~((_QWORD)&WebCore::JSSharedWorker::s_info << 32)) ^ (((unint64_t)&WebCore::JSSharedWorker::s_info + ~((_QWORD)&WebCore::JSSharedWorker::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSSharedWorker::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSSharedWorker::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSSharedWorkerPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSSharedWorkerPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSSharedWorker::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSSharedWorker::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 7400);
  if (v25)
    goto LABEL_31;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  v53 = *(_QWORD *)(v28 + 7400);
  if (!v53)
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v55, "IsoSpace T");
    v54 = 0;
    MEMORY[0x19AEA3204](v29, &v55, v22 + 192, v22 + 1872, 32, 8, &v54);
    v31 = (uint64_t)v54;
    v54 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v55;
    v55 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v53 = v29;
    v33 = *(_QWORD *)(v28 + 7400);
    *(_QWORD *)(v28 + 7400) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v34 == *(_DWORD *)(v26 + 2840))
    {
      v35 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 2832, v34 + 1, (unint64_t)&v53);
      v34 = *(unsigned int *)(v26 + 2844);
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = *v35;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = v29;
    }
    *(_DWORD *)(v26 + 2844) = v34 + 1;
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v24 + 7400);
  *(_QWORD *)(v24 + 7400) = v25;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v26);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_31:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_32:
    v25[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v52 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v52);
    v25[5] = SlowCase + (int)v52;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v41 = *a2;
  *a2 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v41;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a1 + 415);
  if ((byte_1EE3369D0 & 1) == 0)
  {
    qword_1EE3369C8 = (uint64_t)&off_1E3307C60;
    byte_1EE3369D0 = 1;
  }
  if (v5)
    v43 = (uint64_t *)((char *)v5 + 8);
  else
    v43 = 0;
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v44 = (SlowCase - 112) | 1;
    else
      v44 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v44 & 1) != 0)
      v45 = v44 + 47;
    else
      v45 = *(_QWORD *)v44 + 32;
    Allocator = *(_QWORD **)(v45 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v45 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3369C8;
    Allocator[2] = v42;
    v47 = *v43;
    *v43 = (uint64_t)Allocator;
    if (!v47)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v47 + 8) = 3;
    return SlowCase;
  }
  v55 = v5;
  if ((SlowCase & 8) != 0)
    v49 = (SlowCase - 112) | 1;
  else
    v49 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v49 & 1) != 0)
    v50 = v49 + 47;
  else
    v50 = *(_QWORD *)v49 + 32;
  v51 = *(_QWORD **)(v50 + 16);
  if (!v51)
    v51 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v50 + 16) = *v51;
  *v51 = SlowCase;
  v51[1] = &qword_1EE3369C8;
  v51[2] = v42;
  v54 = v51;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v55, (uint64_t *)&v54);
  v47 = (uint64_t)v54;
  if (v54)
    goto LABEL_58;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::SharedWorker>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WTF *v15;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v7 = *(_QWORD *)(v3 + 32);
    if (!v7)
      goto LABEL_5;
    v8 = *(_DWORD *)(v7 - 8);
    v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v7 + 16 * v12);
    if (v13 != a3)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v7 + 16 * v12);
        ++v14;
        if (v13 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(_QWORD *)(v7 + 16 * v12 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  v15 = (WTF *)a3;
  if (*(uint64_t (***)(WebCore::SharedWorker *__hidden))a3 == off_1E3482B60)
  {
    v5 = WebCore::createWrapper<WebCore::SharedWorker,WebCore::SharedWorker>(a2, &v15, (WebCore::JSDOMGlobalObject *)a3);
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 1)
        (*(void (**)(void))(*(_QWORD *)v15 + 72))();
      else
        --*((_DWORD *)v15 + 6);
    }
    return v5;
  }
  result = 311;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSharedWorkerGlobalScopePrototype::finishCreation(WebCore::JSSharedWorkerGlobalScopePrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  JSC::Structure *v8;
  int v9;
  uint64_t result;
  WTF::StringImpl *v11[6];
  int v12;
  int v13;
  JSC::Structure *v14;
  int v15;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = JSC::JSString::create((uint64_t)a2, v11);
  v7 = v11[0];
  v11[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  v15 = *(_DWORD *)this;
  v14 = (JSC::Structure *)(16 * (v15 & 0xFFFFFFFE));
  v9 = JSC::Structure::outOfLineCapacity(v14);
  v12 = 0;
  v13 = v9;
  v11[0] = (WTF::StringImpl *)&v13;
  v11[1] = this;
  v11[2] = a2;
  v11[3] = (WTF::StringImpl *)&v15;
  v11[4] = (WTF::StringImpl *)&v14;
  v11[5] = (WTF::StringImpl *)&v12;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v8, a2, v4, 6, (uint64_t)v11);
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  result = JSC::JSObject::putDirectOffset((uint64_t)this, (uint64_t)a2, v12, v6);
  *((_DWORD *)v8 + 4) |= 0x10u;
  return result;
}

uint64_t WebCore::JSSharedWorkerGlobalScope::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 3400));
  v4 = *(_QWORD *)(a1 + 3400);
  if (!v4)
    return WebCore::JSWorkerGlobalScope::analyzeHeap(a1, a2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSWorkerGlobalScope::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSWorkerGlobalScope::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSharedWorkerGlobalScope::finishCreation(WebCore::JSSharedWorkerGlobalScope *this, JSC::VM *a2, JSC::JSGlobalProxy *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t SlowCase;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;

  v5 = (uint64_t *)((char *)a2 + 37936);
  WebCore::JSWorkerGlobalScope::finishCreation(this, a2, a3);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 136))(v6) + 432) & 0x80000000000000) == 0)
    goto LABEL_7;
  SlowCase = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    SlowCase = v5[2];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_4;
    }
    v79 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v79);
    v5[2] = SlowCase + (int)v79;
  }
  *v5 = SlowCase + 32;
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  v8 = v5[450];
  v9 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)SlowCase = v8 >> 4;
  *(_DWORD *)(SlowCase + 4) = v9;
  *(_QWORD *)(SlowCase + 8) = WebCore::jsSharedWorkerGlobalScope_CompressionStreamConstructor;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_7:
  v10 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10) + 432) & 0x80000000000000) == 0)
    goto LABEL_13;
  v11 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v11 = v5[2];
    if ((v11 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v11 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_10;
    }
    v80 = *(_QWORD *)(v11 + 8) ^ v5[3];
    v5[1] = v11 + HIDWORD(v80);
    v5[2] = v11 + (int)v80;
  }
  *v5 = v11 + 32;
LABEL_10:
  *(_DWORD *)v11 = 0;
  v12 = v5[450];
  v13 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)v11 = v12 >> 4;
  *(_DWORD *)(v11 + 4) = v13;
  *(_QWORD *)(v11 + 8) = WebCore::jsSharedWorkerGlobalScope_CompressionStreamEncoderConstructor;
  *(_QWORD *)(v11 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_13:
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 136))(v14) + 432) & 0x80000000000000) == 0)
    goto LABEL_19;
  v15 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v15 = v5[2];
    if ((v15 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v15 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_16;
    }
    v81 = *(_QWORD *)(v15 + 8) ^ v5[3];
    v5[1] = v15 + HIDWORD(v81);
    v5[2] = v15 + (int)v81;
  }
  *v5 = v15 + 32;
LABEL_16:
  *(_DWORD *)v15 = 0;
  v16 = v5[450];
  v17 = *(_DWORD *)(v16 + 8);
  *(_DWORD *)v15 = v16 >> 4;
  *(_DWORD *)(v15 + 4) = v17;
  *(_QWORD *)(v15 + 8) = WebCore::jsSharedWorkerGlobalScope_DecompressionStreamConstructor;
  *(_QWORD *)(v15 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_19:
  v18 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 136))(v18) + 432) & 0x80000000000000) == 0)
    goto LABEL_25;
  v19 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v19 = v5[2];
    if ((v19 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v19 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_22;
    }
    v82 = *(_QWORD *)(v19 + 8) ^ v5[3];
    v5[1] = v19 + HIDWORD(v82);
    v5[2] = v19 + (int)v82;
  }
  *v5 = v19 + 32;
LABEL_22:
  *(_DWORD *)v19 = 0;
  v20 = v5[450];
  v21 = *(_DWORD *)(v20 + 8);
  *(_DWORD *)v19 = v20 >> 4;
  *(_DWORD *)(v19 + 4) = v21;
  *(_QWORD *)(v19 + 8) = WebCore::jsSharedWorkerGlobalScope_DecompressionStreamDecoderConstructor;
  *(_QWORD *)(v19 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_25:
  v22 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 136))(v22) + 448) & 1) == 0)
    goto LABEL_31;
  v23 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v23 = v5[2];
    if ((v23 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v23 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_28;
    }
    v83 = *(_QWORD *)(v23 + 8) ^ v5[3];
    v5[1] = v23 + HIDWORD(v83);
    v5[2] = v23 + (int)v83;
  }
  *v5 = v23 + 32;
LABEL_28:
  *(_DWORD *)v23 = 0;
  v24 = v5[450];
  v25 = *(_DWORD *)(v24 + 8);
  *(_DWORD *)v23 = v24 >> 4;
  *(_DWORD *)(v23 + 4) = v25;
  *(_QWORD *)(v23 + 8) = WebCore::jsSharedWorkerGlobalScope_FileReaderSyncConstructor;
  *(_QWORD *)(v23 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_31:
  v26 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 136))(v26) + 464) & 0x400) == 0)
    goto LABEL_37;
  v27 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v27 = v5[2];
    if ((v27 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v27 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_34;
    }
    v84 = *(_QWORD *)(v27 + 8) ^ v5[3];
    v5[1] = v27 + HIDWORD(v84);
    v5[2] = v27 + (int)v84;
  }
  *v5 = v27 + 32;
LABEL_34:
  *(_DWORD *)v27 = 0;
  v28 = v5[450];
  v29 = *(_DWORD *)(v28 + 8);
  *(_DWORD *)v27 = v28 >> 4;
  *(_DWORD *)(v27 + 4) = v29;
  *(_QWORD *)(v27 + 8) = WebCore::jsSharedWorkerGlobalScope_SharedWorkerGlobalScopeConstructor;
  *(_QWORD *)(v27 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_37:
  v30 = *v5;
  if (*v5 < (unint64_t)v5[1])
  {
LABEL_38:
    *v5 = v30 + 32;
    goto LABEL_39;
  }
  v30 = v5[2];
  if ((v30 & 1) == 0)
  {
    v67 = *(_QWORD *)(v30 + 8) ^ v5[3];
    v5[1] = v30 + HIDWORD(v67);
    v5[2] = v30 + (int)v67;
    goto LABEL_38;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_39:
  *(_DWORD *)v30 = 0;
  v31 = v5[450];
  v32 = *(_DWORD *)(v31 + 8);
  *(_DWORD *)v30 = v31 >> 4;
  *(_DWORD *)(v30 + 4) = v32;
  *(_QWORD *)(v30 + 8) = WebCore::jsSharedWorkerGlobalScope_ReadableByteStreamControllerConstructor;
  *(_QWORD *)(v30 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v33 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_42;
  v33 = v5[2];
  if ((v33 & 1) == 0)
  {
    v68 = *(_QWORD *)(v33 + 8) ^ v5[3];
    v5[1] = v33 + HIDWORD(v68);
    v5[2] = v33 + (int)v68;
LABEL_42:
    *v5 = v33 + 32;
    goto LABEL_43;
  }
  JSC::sanitizeStackForVM();
  v33 = JSC::LocalAllocator::allocateSlowCase();
LABEL_43:
  *(_DWORD *)v33 = 0;
  v34 = v5[450];
  v35 = *(_DWORD *)(v34 + 8);
  *(_DWORD *)v33 = v34 >> 4;
  *(_DWORD *)(v33 + 4) = v35;
  *(_QWORD *)(v33 + 8) = WebCore::jsSharedWorkerGlobalScope_ReadableStreamConstructor;
  *(_QWORD *)(v33 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v36 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_46;
  v36 = v5[2];
  if ((v36 & 1) == 0)
  {
    v69 = *(_QWORD *)(v36 + 8) ^ v5[3];
    v5[1] = v36 + HIDWORD(v69);
    v5[2] = v36 + (int)v69;
LABEL_46:
    *v5 = v36 + 32;
    goto LABEL_47;
  }
  JSC::sanitizeStackForVM();
  v36 = JSC::LocalAllocator::allocateSlowCase();
LABEL_47:
  *(_DWORD *)v36 = 0;
  v37 = v5[450];
  v38 = *(_DWORD *)(v37 + 8);
  *(_DWORD *)v36 = v37 >> 4;
  *(_DWORD *)(v36 + 4) = v38;
  *(_QWORD *)(v36 + 8) = WebCore::jsSharedWorkerGlobalScope_ReadableStreamBYOBReaderConstructor;
  *(_QWORD *)(v36 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v39 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_50;
  v39 = v5[2];
  if ((v39 & 1) == 0)
  {
    v70 = *(_QWORD *)(v39 + 8) ^ v5[3];
    v5[1] = v39 + HIDWORD(v70);
    v5[2] = v39 + (int)v70;
LABEL_50:
    *v5 = v39 + 32;
    goto LABEL_51;
  }
  JSC::sanitizeStackForVM();
  v39 = JSC::LocalAllocator::allocateSlowCase();
LABEL_51:
  *(_DWORD *)v39 = 0;
  v40 = v5[450];
  v41 = *(_DWORD *)(v40 + 8);
  *(_DWORD *)v39 = v40 >> 4;
  *(_DWORD *)(v39 + 4) = v41;
  *(_QWORD *)(v39 + 8) = WebCore::jsSharedWorkerGlobalScope_ReadableStreamBYOBRequestConstructor;
  *(_QWORD *)(v39 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v42 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_54;
  v42 = v5[2];
  if ((v42 & 1) == 0)
  {
    v71 = *(_QWORD *)(v42 + 8) ^ v5[3];
    v5[1] = v42 + HIDWORD(v71);
    v5[2] = v42 + (int)v71;
LABEL_54:
    *v5 = v42 + 32;
    goto LABEL_55;
  }
  JSC::sanitizeStackForVM();
  v42 = JSC::LocalAllocator::allocateSlowCase();
LABEL_55:
  *(_DWORD *)v42 = 0;
  v43 = v5[450];
  v44 = *(_DWORD *)(v43 + 8);
  *(_DWORD *)v42 = v43 >> 4;
  *(_DWORD *)(v42 + 4) = v44;
  *(_QWORD *)(v42 + 8) = WebCore::jsSharedWorkerGlobalScope_ReadableStreamDefaultControllerConstructor;
  *(_QWORD *)(v42 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v45 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_58;
  v45 = v5[2];
  if ((v45 & 1) == 0)
  {
    v72 = *(_QWORD *)(v45 + 8) ^ v5[3];
    v5[1] = v45 + HIDWORD(v72);
    v5[2] = v45 + (int)v72;
LABEL_58:
    *v5 = v45 + 32;
    goto LABEL_59;
  }
  JSC::sanitizeStackForVM();
  v45 = JSC::LocalAllocator::allocateSlowCase();
LABEL_59:
  *(_DWORD *)v45 = 0;
  v46 = v5[450];
  v47 = *(_DWORD *)(v46 + 8);
  *(_DWORD *)v45 = v46 >> 4;
  *(_DWORD *)(v45 + 4) = v47;
  *(_QWORD *)(v45 + 8) = WebCore::jsSharedWorkerGlobalScope_ReadableStreamDefaultReaderConstructor;
  *(_QWORD *)(v45 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v48 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_62;
  v48 = v5[2];
  if ((v48 & 1) == 0)
  {
    v73 = *(_QWORD *)(v48 + 8) ^ v5[3];
    v5[1] = v48 + HIDWORD(v73);
    v5[2] = v48 + (int)v73;
LABEL_62:
    *v5 = v48 + 32;
    goto LABEL_63;
  }
  JSC::sanitizeStackForVM();
  v48 = JSC::LocalAllocator::allocateSlowCase();
LABEL_63:
  *(_DWORD *)v48 = 0;
  v49 = v5[450];
  v50 = *(_DWORD *)(v49 + 8);
  *(_DWORD *)v48 = v49 >> 4;
  *(_DWORD *)(v48 + 4) = v50;
  *(_QWORD *)(v48 + 8) = WebCore::jsSharedWorkerGlobalScope_TransformStreamConstructor;
  *(_QWORD *)(v48 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v51 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_66;
  v51 = v5[2];
  if ((v51 & 1) == 0)
  {
    v74 = *(_QWORD *)(v51 + 8) ^ v5[3];
    v5[1] = v51 + HIDWORD(v74);
    v5[2] = v51 + (int)v74;
LABEL_66:
    *v5 = v51 + 32;
    goto LABEL_67;
  }
  JSC::sanitizeStackForVM();
  v51 = JSC::LocalAllocator::allocateSlowCase();
LABEL_67:
  *(_DWORD *)v51 = 0;
  v52 = v5[450];
  v53 = *(_DWORD *)(v52 + 8);
  *(_DWORD *)v51 = v52 >> 4;
  *(_DWORD *)(v51 + 4) = v53;
  *(_QWORD *)(v51 + 8) = WebCore::jsSharedWorkerGlobalScope_TransformStreamDefaultControllerConstructor;
  *(_QWORD *)(v51 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v54 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_70;
  v54 = v5[2];
  if ((v54 & 1) == 0)
  {
    v75 = *(_QWORD *)(v54 + 8) ^ v5[3];
    v5[1] = v54 + HIDWORD(v75);
    v5[2] = v54 + (int)v75;
LABEL_70:
    *v5 = v54 + 32;
    goto LABEL_71;
  }
  JSC::sanitizeStackForVM();
  v54 = JSC::LocalAllocator::allocateSlowCase();
LABEL_71:
  *(_DWORD *)v54 = 0;
  v55 = v5[450];
  v56 = *(_DWORD *)(v55 + 8);
  *(_DWORD *)v54 = v55 >> 4;
  *(_DWORD *)(v54 + 4) = v56;
  *(_QWORD *)(v54 + 8) = WebCore::jsSharedWorkerGlobalScope_WritableStreamConstructor;
  *(_QWORD *)(v54 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v57 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_74;
  v57 = v5[2];
  if ((v57 & 1) == 0)
  {
    v76 = *(_QWORD *)(v57 + 8) ^ v5[3];
    v5[1] = v57 + HIDWORD(v76);
    v5[2] = v57 + (int)v76;
LABEL_74:
    *v5 = v57 + 32;
    goto LABEL_75;
  }
  JSC::sanitizeStackForVM();
  v57 = JSC::LocalAllocator::allocateSlowCase();
LABEL_75:
  *(_DWORD *)v57 = 0;
  v58 = v5[450];
  v59 = *(_DWORD *)(v58 + 8);
  *(_DWORD *)v57 = v58 >> 4;
  *(_DWORD *)(v57 + 4) = v59;
  *(_QWORD *)(v57 + 8) = WebCore::jsSharedWorkerGlobalScope_WritableStreamDefaultControllerConstructor;
  *(_QWORD *)(v57 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v60 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_78;
  v60 = v5[2];
  if ((v60 & 1) == 0)
  {
    v77 = *(_QWORD *)(v60 + 8) ^ v5[3];
    v5[1] = v60 + HIDWORD(v77);
    v5[2] = v60 + (int)v77;
LABEL_78:
    *v5 = v60 + 32;
    goto LABEL_79;
  }
  JSC::sanitizeStackForVM();
  v60 = JSC::LocalAllocator::allocateSlowCase();
LABEL_79:
  *(_DWORD *)v60 = 0;
  v61 = v5[450];
  v62 = *(_DWORD *)(v61 + 8);
  *(_DWORD *)v60 = v61 >> 4;
  *(_DWORD *)(v60 + 4) = v62;
  *(_QWORD *)(v60 + 8) = WebCore::jsSharedWorkerGlobalScope_WritableStreamDefaultWriterConstructor;
  *(_QWORD *)(v60 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v63 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_82;
  v63 = v5[2];
  if ((v63 & 1) == 0)
  {
    v78 = *(_QWORD *)(v63 + 8) ^ v5[3];
    v5[1] = v63 + HIDWORD(v78);
    v5[2] = v63 + (int)v78;
LABEL_82:
    *v5 = v63 + 32;
    goto LABEL_83;
  }
  JSC::sanitizeStackForVM();
  v63 = JSC::LocalAllocator::allocateSlowCase();
LABEL_83:
  *(_DWORD *)v63 = 0;
  v64 = v5[450];
  v65 = *(_DWORD *)(v64 + 8);
  *(_DWORD *)v63 = v64 >> 4;
  *(_DWORD *)(v63 + 4) = v65;
  *(_QWORD *)(v63 + 8) = WebCore::jsSharedWorkerGlobalScope_AbortSignalConstructor;
  *(_QWORD *)(v63 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  return JSC::JSObject::putDirectCustomAccessor();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_CompressionStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 512);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSCompressionStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSCompressionStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 512) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_CompressionStreamEncoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSCompressionStreamEncoder>,(WebCore::DOMConstructorID)65>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSCompressionStreamEncoder>,(WebCore::DOMConstructorID)65>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_DecompressionStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 528);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSDecompressionStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSDecompressionStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 528) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_DecompressionStreamDecoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDecompressionStreamDecoder>,(WebCore::DOMConstructorID)67>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDecompressionStreamDecoder>,(WebCore::DOMConstructorID)67>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_FileReaderSyncConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFileReaderSync>,(WebCore::DOMConstructorID)504>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFileReaderSync>,(WebCore::DOMConstructorID)504>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_SharedWorkerGlobalScopeConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSharedWorkerGlobalScope>,(WebCore::DOMConstructorID)916>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSharedWorkerGlobalScope>,(WebCore::DOMConstructorID)916>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_ReadableByteStreamControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1720);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableByteStreamController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableByteStreamController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1720) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_ReadableStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSReadableStream>,(WebCore::DOMConstructorID)216>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSReadableStream>,(WebCore::DOMConstructorID)216>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_ReadableStreamBYOBReaderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1736);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBReader>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBReader>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1736) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_ReadableStreamBYOBRequestConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1744);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBRequest>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBRequest>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1744) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_ReadableStreamDefaultControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1752);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1752) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_ReadableStreamDefaultReaderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1760);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultReader>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultReader>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1760) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_TransformStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTransformStream>,(WebCore::DOMConstructorID)223>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTransformStream>,(WebCore::DOMConstructorID)223>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_TransformStreamDefaultControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1792);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTransformStreamDefaultController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSTransformStreamDefaultController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1792) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_WritableStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWritableStream>,(WebCore::DOMConstructorID)225>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWritableStream>,(WebCore::DOMConstructorID)225>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_WritableStreamDefaultControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1808);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1808) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_WritableStreamDefaultWriterConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1816);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultWriter>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultWriter>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1816) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_AbortSignalConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbortSignal>,(WebCore::DOMConstructorID)412>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbortSignal>,(WebCore::DOMConstructorID)412>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSharedWorkerGlobalScope>,(WebCore::DOMConstructorID)916>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7328);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWorkerGlobalScope>,(WebCore::DOMConstructorID)897>(a1, a2);
  v7 = v6;
  LODWORD(v21) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSharedWorkerGlobalScope>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v20);
    v10[2848] = v2 + (int)v20;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v21);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v21);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
  if (!v17)
    v17 = *(_QWORD *)(a2 + 16);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7328) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSharedWorkerGlobalScopeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSharedWorkerGlobalScopePrototype::s_info != (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSharedWorkerGlobalScope>,(WebCore::DOMConstructorID)916>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSharedWorkerGlobalScope_name(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  if (*(_BYTE *)(Object + 5) == 32)
  {
    Object = *(_QWORD *)(Object + 16);
    v4 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v5 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v6 = (char **)(16 * v4);
    if ((_DWORD)v4)
      v7 = v6 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v7 = 1;
    if (!v7)
    {
      do
      {
        v6 = (char **)v6[2];
        v5 = v6 != 0;
      }
      while (v6 != &WebCore::JSSharedWorkerGlobalScope::s_info && v6 != 0);
    }
    if (v5)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v15 = (char **)(16 * v13);
  if ((_DWORD)v13)
    v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v16 = 1;
  if (!v16)
  {
    do
    {
      v15 = (char **)v15[2];
      v14 = v15 != 0;
    }
    while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
  }
  if (!v14)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v9 = *((_QWORD *)v2 + 7);
  v10 = *(_QWORD *)(*(_QWORD *)(Object + 3400) + 1216);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  v11 = *(_DWORD *)(v10 + 4);
  if (!v11)
    return *(_QWORD *)(v9 + 41968);
  if (v11 != 1)
    goto LABEL_19;
  v18 = *(unsigned __int8 **)(v10 + 8);
  if ((*(_BYTE *)(v10 + 16) & 4) != 0)
  {
    v19 = *v18;
    return *(_QWORD *)(v9 + 8 * v19 + 42216);
  }
  v20 = *(unsigned __int16 *)v18;
  if (v20 <= 0xFF)
  {
    v19 = v20;
    return *(_QWORD *)(v9 + 8 * v19 + 42216);
  }
LABEL_19:
  result = *(_QWORD *)(v9 + 64760);
  if (!result || v10 != *(_QWORD *)(result + 8))
    return JSC::jsStringWithCacheSlowCase();
  return result;
}

BOOL WebCore::setJSSharedWorkerGlobalScope_name(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  _DWORD *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v6 = (char **)(16 * v11);
    if ((_DWORD)v11)
      v13 = v6 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v13 = 1;
    if (!v13)
    {
      v14 = 16 * v11;
      do
      {
        v14 = *(_QWORD *)(v14 + 16);
        v12 = v14 != 0;
      }
      while ((char **)v14 != &WebCore::JSSharedWorkerGlobalScope::s_info && v14 != 0);
    }
    if (v12)
      goto LABEL_17;
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  }
  v3 = *(_DWORD **)(Object + 16);
  v4 = *(unsigned int *)(16 * (*v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = 16 * v4;
    do
    {
      v8 = *(_QWORD *)(v8 + 16);
      v5 = v8 != 0;
    }
    while ((char **)v8 != &WebCore::JSSharedWorkerGlobalScope::s_info && v8 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
LABEL_17:
  v10 = 1;
  ((void (*)(void))v6[18])();
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_onconnect(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v20;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSSharedWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_DWORD **)(v4 + 3400);
  ++v10[78];
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (Object = *(_QWORD *)(v11 + 96)) == 0)
    Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
  v12 = *(_QWORD *)(Object + 40);
  if (!v12)
  {
    v20 = Object;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
    v12 = *(_QWORD *)(v20 + 40);
  }
  v13 = WebCore::eventHandlerAttribute((WebCore *)(v10 + 80), (WebCore::EventTarget *)(v12 + 464), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (v10[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
  else
    --v10[78];
  return v13;
}

BOOL WebCore::setJSSharedWorkerGlobalScope_onconnect(JSC::JSCell *a1, JSC::JSCell *a2, uint64_t a3)
{
  JSC::JSCell *v3;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v22;

  v3 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v6 = Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v6 = *(_QWORD *)(Object + 16);
        v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
        v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
        v9 = (char **)(16 * v7);
        if ((_DWORD)v7)
          v10 = v9 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v10 = 1;
        if (!v10)
        {
          do
          {
            v9 = (char **)v9[2];
            v8 = v9 != 0;
          }
          while (v9 != &WebCore::JSSharedWorkerGlobalScope::s_info && v9 != 0);
        }
        if (v8)
          goto LABEL_16;
      }
      else
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSSharedWorkerGlobalScope::s_info && v19 != 0);
        }
        if (v18)
        {
LABEL_16:
          v12 = *((_QWORD *)v3 + 7);
          v13 = *(_DWORD **)(v6 + 3400);
          ++v13[78];
          v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v14 || (Object = *(_QWORD *)(v14 + 96)) == 0)
            Object = WebCore::threadGlobalDataSlow((WebCore *)Object);
          v15 = *(_QWORD *)(Object + 40);
          if (!v15)
          {
            v22 = Object;
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)Object);
            v15 = *(_QWORD *)(v22 + 40);
          }
          WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v13 + 80), (WTF::StringImpl **)(v15 + 464), a3, (_DWORD *)v6);
          if (v13[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
            if (a3)
            {
LABEL_23:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v6 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)v6);
              }
            }
          }
          else
          {
            --v13[78];
            if (a3)
              goto LABEL_23;
          }
          return 1;
        }
      }
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_ByteLengthQueuingStrategyConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1704);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSByteLengthQueuingStrategy>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSByteLengthQueuingStrategy>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1704) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_CountQueuingStrategyConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1712);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSCountQueuingStrategy>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSCountQueuingStrategy>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1712) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_AbortControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAbortController>,(WebCore::DOMConstructorID)411>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAbortController>,(WebCore::DOMConstructorID)411>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_CustomEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  JSC::JSCell *v12;
  uint64_t Structure;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSSharedWorkerGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3392);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    v12 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(v11, v4);
    Structure = WebCore::JSDOMConstructor<WebCore::JSCustomEvent>::createStructure((uint64_t *)v11, v4, v12);
    v10 = WebCore::JSDOMConstructor<WebCore::JSCustomEvent>::create(v11, Structure, (JSC::VM *)v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3392) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_ErrorEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSErrorEvent>,(WebCore::DOMConstructorID)447>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSErrorEvent>,(WebCore::DOMConstructorID)447>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_EventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_EventTargetConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_PromiseRejectionEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPromiseRejectionEvent>,(WebCore::DOMConstructorID)476>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPromiseRejectionEvent>,(WebCore::DOMConstructorID)476>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_TextDecoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDecoder>,(WebCore::DOMConstructorID)482>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDecoder>,(WebCore::DOMConstructorID)482>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_TextDecoderStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3864);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextDecoderStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextDecoderStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3864) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_TextEncoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextEncoder>,(WebCore::DOMConstructorID)485>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextEncoder>,(WebCore::DOMConstructorID)485>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_TextEncoderStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3888);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextEncoderStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextEncoderStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3888) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_URLConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDOMURL>,(WebCore::DOMConstructorID)507>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDOMURL>,(WebCore::DOMConstructorID)507>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_URLSearchParamsConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>,(WebCore::DOMConstructorID)598>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>,(WebCore::DOMConstructorID)598>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_PerformanceConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformance>,(WebCore::DOMConstructorID)727>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformance>,(WebCore::DOMConstructorID)727>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_PerformanceEntryConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceEntry>,(WebCore::DOMConstructorID)728>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceEntry>,(WebCore::DOMConstructorID)728>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_PerformanceMarkConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPerformanceMark>,(WebCore::DOMConstructorID)729>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPerformanceMark>,(WebCore::DOMConstructorID)729>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_PerformanceMeasureConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceMeasure>,(WebCore::DOMConstructorID)730>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceMeasure>,(WebCore::DOMConstructorID)730>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_PerformanceObserverConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSSharedWorkerGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 5864);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMConstructor<WebCore::JSPerformanceObserver>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMConstructor<WebCore::JSPerformanceObserver>::create(v11, Structure, (JSC::VM *)v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 5864) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsSharedWorkerGlobalScope_PerformanceObserverEntryListConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceObserverEntryList>,(WebCore::DOMConstructorID)734>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceObserverEntryList>,(WebCore::DOMConstructorID)734>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_PerformanceResourceTimingConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceResourceTiming>,(WebCore::DOMConstructorID)736>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceResourceTiming>,(WebCore::DOMConstructorID)736>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_PerformanceServerTimingConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceServerTiming>,(WebCore::DOMConstructorID)737>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceServerTiming>,(WebCore::DOMConstructorID)737>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsSharedWorkerGlobalScope_XMLHttpRequestConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSSharedWorkerGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSXMLHttpRequest>,(WebCore::DOMConstructorID)922>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSSharedWorkerGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSSharedWorkerGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSXMLHttpRequest>,(WebCore::DOMConstructorID)922>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::JSSharedWorkerGlobalScope::subspaceForImpl(WebCore::JSSharedWorkerGlobalScope *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7408);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 7408);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, v6 + 176, 3408, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 7408);
    *(_QWORD *)(v8 + 7408) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 7408);
  *(_QWORD *)(v3 + 7408) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSourceBuffer::prototype(WebCore::JSSourceBuffer *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSourceBuffer::s_info + ~((_QWORD)&WebCore::JSSourceBuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSSourceBuffer::s_info + ~((_QWORD)&WebCore::JSSourceBuffer::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSourceBuffer::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSourceBuffer::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSSourceBufferPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSSourceBufferPrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSSourceBuffer::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSSourceBuffer::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSSourceBuffer::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 40);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSourceBuffer::estimatedSize(WebCore::JSSourceBuffer *this, JSC::JSCell *a2, JSC::VM *a3)
{
  return JSC::JSObject::estimatedSize(this, a2, a3) + *(_QWORD *)(*((_QWORD *)this + 3) + 272) + 400;
}

uint64_t WebCore::JSSourceBuffer::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  JSC::JSObject::visitChildren();
  result = WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  if (!*(_BYTE *)(a2 + 130))
  {
    v5 = *(_QWORD *)(a1 + 24) - 40;
    result = *(_QWORD *)(a2 + 120);
    v6 = *(_QWORD *)(result + 48);
    v7 = *(_DWORD *)(v6 + 4);
    v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = v11;
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 8 * v12 + 16);
      if (!v13)
        break;
      if (v5 == v13)
        goto LABEL_11;
      v12 = (v12 + 1) & v7;
      if (v12 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x194F8AC5CLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_11:
  if (*(_BYTE *)(a2 + 184))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 272) + 400;
    *(_QWORD *)(a2 + 144) += v14;
    v15 = *(_QWORD *)(a2 + 160);
    v16 = __CFADD__(v15, v14);
    v17 = v15 + v14;
    if (v16)
      *(_BYTE *)(a2 + 152) = 1;
    else
      *(_QWORD *)(a2 + 160) = v17;
  }
  return result;
}

uint64_t WebCore::JSSourceBuffer::visitChildren(WebCore::JSSourceBuffer *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];
  uint64_t v17;
  char v18;

  v16[0] = a2;
  v16[1] = this;
  v18 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v17 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194F8AE44);
  }
  *((_QWORD *)a2 + 11) = v16;
  WebCore::JSEventTarget::visitChildren(this, a2, a3);
  if (!*((_BYTE *)a2 + 130))
  {
    v6 = *((_QWORD *)this + 3) - 40;
    v7 = *(_QWORD *)(*((_QWORD *)a2 + 15) + 48);
    v8 = *(_DWORD *)(v7 + 4);
    v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(_QWORD *)(v7 + 8 * v13 + 16);
      if (!v14)
        break;
      if (v6 == v14)
        goto LABEL_13;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x194F8ADC8);
      }
    }
    if (WTF::ConcurrentPtrHashSet::addSlow())
    {
      if (*((_BYTE *)a2 + 131))
        (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v6);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_13:
  result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, *(_QWORD *)(*((_QWORD *)this + 3) + 272) + 400);
  *(_QWORD *)(v16[0] + 88) = v17;
  return result;
}

uint64_t WebCore::JSSourceBuffer::JSSourceBuffer(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 40;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 40;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

uint64_t WebCore::JSSourceBuffer::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 - 16);
  *a2 = v2 - 40;
  return this;
}

uint64_t WebCore::JSSourceBuffer::finishCreation(uint64_t this, JSC::VM *a2)
{
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)(this + 24) + 272) + 400) >= 0x101)
    return JSC::Heap::reportExtraMemoryAllocatedSlowCase();
  return this;
}

unint64_t WebCore::JSSourceBuffer::createPrototype(WebCore::JSSourceBuffer *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  Structure = WebCore::JSSourceBufferPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSSourceBufferPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSSourceBufferPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSourceBufferPrototype::create(WebCore::JSSourceBufferPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<19u>(this, (uint64_t)&WebCore::JSSourceBuffer::s_info, (uint64_t)&WebCore::JSSourceBufferPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 480) & 0x4000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSourceBuffer>,(WebCore::DOMConstructorID)131>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1048);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSourceBuffer>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSSourceBuffer::prototype((WebCore::JSSourceBuffer *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1048) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSourceBufferConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSourceBufferPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSourceBuffer>,(WebCore::DOMConstructorID)131>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSourceBuffer_mode(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(int *)(*((_QWORD *)a2 + 3) + 104);
  if ((byte_1EE336950 & 1) == 0)
  {
    qword_1EE336AC8 = (uint64_t)&dword_1ECE7A120;
    dword_1ECE7A120 += 2;
    dword_1ECE7A140 += 2;
    qword_1EE336AD0 = (uint64_t)&dword_1ECE7A140;
    byte_1EE336950 = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_774[8 * v4 + 384];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSSourceBuffer_mode(JSC *this, unint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  char **v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  JSValue v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSourceBuffer::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSourceBuffer::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v31 = a3;
  if ((a3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a3 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v31, this);
    v11 = v33;
    if (v33)
      goto LABEL_18;
LABEL_47:
    v20 = 0;
    goto LABEL_64;
  }
  v11 = *(_QWORD *)(a3 + 8);
  if ((v11 & 1) == 0)
  {
    if (!v11)
      goto LABEL_17;
    goto LABEL_16;
  }
  v11 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a3, this);
  if (v11)
LABEL_16:
    *(_DWORD *)v11 += 2;
LABEL_17:
  v33 = v11;
  if (!v11)
    goto LABEL_47;
LABEL_18:
  v12 = *(_DWORD *)(v11 + 16);
  v13 = *(const char **)(v11 + 8);
  v14 = *(_DWORD *)(v11 + 4);
  v15 = v14 != 8;
  if (v13 != "segments" && v14 == 8)
  {
    if ((v12 & 4) != 0)
    {
      if (*v13 != 115 || *(_DWORD *)(v13 + 1) != 1701668709 || *((_DWORD *)v13 + 1) != 1937010277)
      {
LABEL_24:
        v16 = 8;
        goto LABEL_29;
      }
    }
    else
    {
      if (*(_WORD *)v13 != 115)
        goto LABEL_24;
      if (*(_QWORD *)(v13 + 2) != 0x65006D00670065 || *((_QWORD *)v13 + 1) != 0x730074006E0065)
        goto LABEL_24;
    }
LABEL_54:
    v19 = &WebCore::parseEnumerationFromString<WebCore::SourceBuffer::AppendMode>(WTF::String const&)::mappings;
    goto LABEL_55;
  }
  v17 = v13 == "segments" && v14 == 8;
  v16 = *(_DWORD *)(v11 + 4);
  if (v17)
    goto LABEL_54;
LABEL_29:
  if (v13 == "sequence")
    v15 = 1;
  if (v15)
  {
    if (v14 != 8 || v13 != "sequence")
      goto LABEL_61;
    goto LABEL_43;
  }
  if (!v16)
    goto LABEL_43;
  if ((v12 & 4) == 0)
  {
    if (*(_WORD *)v13 != 115)
      goto LABEL_61;
    if (*((_QWORD *)v13 + 1) != 0x650063006E0065 || *(_QWORD *)(v13 + 2) != 0x65007500710065)
      goto LABEL_61;
    goto LABEL_43;
  }
  if (*v13 == 115 && *(_DWORD *)(v13 + 1) == 1702195557 && *((_DWORD *)v13 + 1) == 1701015141)
  {
LABEL_43:
    v19 = &off_1E3303878;
LABEL_55:
    v20 = *((unsigned int *)v19 + 4) | 0x100000000;
    goto LABEL_62;
  }
LABEL_61:
  v20 = 0;
LABEL_62:
  v33 = 0;
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)a2);
  else
    *(_DWORD *)v11 -= 2;
LABEL_64:
  if (!*(_DWORD *)(v4 + 80))
  {
    if (!HIDWORD(v20))
      return 0;
LABEL_66:
    if ((_DWORD)v20 || !*(_BYTE *)(v10 + 283))
    {
      v24 = *(_QWORD *)(v10 + 96);
      if (v24 && !*(_BYTE *)(v10 + 280))
      {
        if (!*(_BYTE *)(v24 + 232))
        {
          v30 = *(_QWORD *)(v24 + 88);
          if (v30)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 112))(v30) == 2)
              WebCore::MediaSource::openIfInEndedState(*(_QWORD *)(v10 + 96));
          }
        }
        if (*(_DWORD *)(v10 + 256) != 2)
        {
          if ((_DWORD)v20 == 1)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 80) + 168))(*(_QWORD *)(v10 + 80));
            *(_DWORD *)(v10 + 104) = 1;
          }
          else
          {
            *(_DWORD *)(v10 + 104) = v20;
            if (!(_DWORD)v20)
            {
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v10 + 80) + 112))(*(_QWORD *)(v10 + 80), 0);
              return 1;
            }
          }
          v28 = 1;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 80) + 112))(*(_QWORD *)(v10 + 80), 1);
          return v28;
        }
      }
      v23 = 8;
    }
    else
    {
      v23 = 33;
    }
    LOBYTE(v31) = v23;
    v32 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v25.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v23, (JSC::JSGlobalObject *)&v32);
      JSC::VM::throwException((JSC::VM *)v4, this, v25);
      v27 = v32;
      v32 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
    }
    return 1;
  }
  v28 = 0;
  if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0 && HIDWORD(v20))
    goto LABEL_66;
  return v28;
}

uint64_t WebCore::jsSourceBuffer_updating(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 280))
    return 7;
  else
    return 6;
}

unint64_t WebCore::jsSourceBuffer_buffered(JSC *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  JSValue v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v14;
  _QWORD v15[2];
  int v16;
  char v17[8];
  WTF::StringImpl *v18;

  v3 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(v3 + 96))
  {
    v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    v5 = *(_QWORD *)(v3 + 288);
    ++*(_DWORD *)v5;
    v16 = 0;
    v15[0] = 0;
    v7 = WebCore::wrap<WebCore::TimeRanges>((uint64_t)this, v4, v5);
    if (*(_DWORD *)v5 == 1)
    {
      v14 = *(WTF **)(v5 + 8);
      if (v14)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        WTF::fastFree(v14, v6);
      }
      WTF::fastFree((WTF *)v5, v6);
      v8 = 0;
    }
    else
    {
      v8 = 0;
      --*(_DWORD *)v5;
    }
  }
  else
  {
    v9 = (JSC::VM *)*((_QWORD *)this + 7);
    LOBYTE(v15[0]) = 8;
    v16 = 1;
    v17[0] = 8;
    v15[1] = 0;
    v18 = 0;
    if (!*((_QWORD *)v9 + 2))
    {
      v10.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v18);
      JSC::VM::throwException(v9, this, v10);
      v12 = v18;
      v18 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    v7 = 0;
    v8 = 1;
  }
  ((void (*)(char *, _QWORD *))off_1E330BE30[v8])(v17, v15);
  return v7;
}

unint64_t WebCore::jsSourceBuffer_timestampOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 80) + 304))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 80));
  v6[1] = v2;
  WTF::MediaTime::toDouble((WTF::MediaTime *)v6);
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v3, v3 == (double)(int)v4)
    && ((_DWORD)v4 || (*(_QWORD *)&v3 & 0x8000000000000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSourceBuffer_timestampOffset(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  uint64_t v12;
  WTF::MediaTime *v13;
  JSValue v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v18;
  double v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSourceBuffer::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSourceBuffer::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v20 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v20, this);
    v11 = v19;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v12 = *(_QWORD *)(v10 + 96);
  if (!v12
    || *(_BYTE *)(v10 + 280)
    || (v13 = (WTF::MediaTime *)WebCore::MediaSource::openIfInEndedState(v12), *(_DWORD *)(v10 + 256) == 2))
  {
    LOBYTE(v20) = 8;
    v21 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v21);
      JSC::VM::throwException((JSC::VM *)v4, this, v14);
      v16 = v21;
      v21 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
  }
  else
  {
    v20 = WTF::MediaTime::createWithDouble(v13, v11);
    v21 = v18;
    if (*(_DWORD *)(v10 + 104) == 1)
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v10 + 80) + 160))(*(_QWORD *)(v10 + 80), &v20);
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v10 + 80) + 240))(*(_QWORD *)(v10 + 80), &v20);
    (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 80) + 224))(*(_QWORD *)(v10 + 80));
  }
  return 1;
}

unint64_t WebCore::jsSourceBuffer_audioTracks(int a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;

  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = WebCore::SourceBuffer::audioTracks((WebCore::SourceBuffer *)(*(_QWORD *)(a2 + 24) - 40));
  return WebCore::wrap<WebCore::AudioTrackList>(a1, v3, v4);
}

unint64_t WebCore::jsSourceBuffer_videoTracks(int a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;

  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = WebCore::SourceBuffer::videoTracks((WebCore::SourceBuffer *)(*(_QWORD *)(a2 + 24) - 40));
  return WebCore::wrap<WebCore::VideoTrackList>(a1, v3, v4);
}

unint64_t WebCore::jsSourceBuffer_textTracks(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = WebCore::SourceBuffer::textTracks((WebCore::SourceBuffer *)(*(_QWORD *)(a2 + 24) - 40));
  return WebCore::wrap<WebCore::TextTrackList>(a1, v3, v4);
}

unint64_t WebCore::jsSourceBuffer_appendWindowStart(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  WTF::MediaTime::toDouble((WTF::MediaTime *)(*(_QWORD *)(a2 + 24) + 208));
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSourceBuffer_appendWindowStart(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  uint64_t v12;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::MediaTime *v17;
  double v18;
  uint64_t v19;
  int v20;
  char v21;
  double v22;
  unint64_t v23;
  WTF::StringImpl *v24;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSourceBuffer::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSourceBuffer::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v23 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v23, this);
    v11 = v22;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
  {
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      JSC::throwTypeError();
      return 0;
    }
    if (*(_QWORD *)(v10 + 96) && !*(_BYTE *)(v10 + 280))
    {
      if (v11 >= 0.0)
      {
        v17 = (WTF::MediaTime *)WTF::MediaTime::toDouble((WTF::MediaTime *)(v10 + 224));
        if (v18 > v11)
        {
          *(_QWORD *)(v10 + 208) = WTF::MediaTime::createWithDouble(v17, v11);
          v19 = v10 + 208;
          *(_DWORD *)(v19 + 8) = v20;
          *(_BYTE *)(v19 + 12) = v21;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v19 - 128) + 248))(*(_QWORD *)(v19 - 128), v19);
          return 1;
        }
      }
      v12 = 33;
    }
    else
    {
      v12 = 8;
    }
    LOBYTE(v23) = v12;
    v24 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v12, (JSC::JSGlobalObject *)&v24);
      JSC::VM::throwException((JSC::VM *)v4, this, v13);
      v15 = v24;
      v24 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    return 1;
  }
  return 0;
}

unint64_t WebCore::jsSourceBuffer_appendWindowEnd(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  WTF::MediaTime::toDouble((WTF::MediaTime *)(*(_QWORD *)(a2 + 24) + 224));
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSourceBuffer_appendWindowEnd(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  uint64_t v12;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::MediaTime *v17;
  double v18;
  uint64_t v19;
  int v20;
  char v21;
  double v22;
  unint64_t v23;
  WTF::StringImpl *v24;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSourceBuffer::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSourceBuffer::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v23 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v23, this);
    v11 = v22;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v4 + 80) || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
  {
    if (*(_QWORD *)(v10 + 96) && !*(_BYTE *)(v10 + 280))
    {
      v17 = (WTF::MediaTime *)WTF::MediaTime::toDouble((WTF::MediaTime *)(v10 + 208));
      if (v18 < v11)
      {
        *(_QWORD *)(v10 + 224) = WTF::MediaTime::createWithDouble(v17, v11);
        v19 = v10 + 224;
        *(_DWORD *)(v19 + 8) = v20;
        *(_BYTE *)(v19 + 12) = v21;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v19 - 144) + 256))(*(_QWORD *)(v19 - 144), v19);
        return 1;
      }
      v12 = 33;
    }
    else
    {
      v12 = 8;
    }
    LOBYTE(v23) = v12;
    v24 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v12, (JSC::JSGlobalObject *)&v24);
      JSC::VM::throwException((JSC::VM *)v4, this, v13);
      v15 = v24;
      v24 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t WebCore::jsSourceBuffer_onupdatestart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 4);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 2216), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 4) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 5) + 16))((uint64_t)v5 - 40);
  else
    --*((_DWORD *)v5 - 4);
  return v9;
}

BOOL WebCore::setJSSourceBuffer_onupdatestart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSourceBuffer::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSourceBuffer::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 4);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 2216), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 4) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 5) + 16))((uint64_t)v11 - 40);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 4);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSourceBuffer_onupdate(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 4);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 2184), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 4) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 5) + 16))((uint64_t)v5 - 40);
  else
    --*((_DWORD *)v5 - 4);
  return v9;
}

BOOL WebCore::setJSSourceBuffer_onupdate(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSourceBuffer::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSourceBuffer::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 4);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 2184), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 4) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 5) + 16))((uint64_t)v11 - 40);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 4);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSourceBuffer_onupdateend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 4);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 2192), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 4) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 5) + 16))((uint64_t)v5 - 40);
  else
    --*((_DWORD *)v5 - 4);
  return v9;
}

BOOL WebCore::setJSSourceBuffer_onupdateend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSourceBuffer::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSourceBuffer::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 4);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 2192), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 4) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 5) + 16))((uint64_t)v11 - 40);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 4);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSourceBuffer_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 4);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 4) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 5) + 16))((uint64_t)v5 - 40);
  else
    --*((_DWORD *)v5 - 4);
  return v9;
}

BOOL WebCore::setJSSourceBuffer_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSourceBuffer::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSourceBuffer::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 4);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 784), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 4) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 5) + 16))((uint64_t)v11 - 40);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 4);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSourceBuffer_onabort(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 4);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 64), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 4) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 5) + 16))((uint64_t)v5 - 40);
  else
    --*((_DWORD *)v5 - 4);
  return v9;
}

BOOL WebCore::setJSSourceBuffer_onabort(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSourceBuffer::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSourceBuffer::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 4);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 64), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 4) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 5) + 16))((uint64_t)v11 - 40);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 4);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSSourceBuffer::subspaceForImpl(WebCore::JSSourceBuffer *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1072);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1072);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1072);
    *(_QWORD *)(v8 + 1072) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1072);
  *(_QWORD *)(v3 + 1072) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSourceBufferOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 32);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 24)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 40) + 64))(v5 - 40), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSSourceBufferOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = v3 - 40;
  v5 = *(_DWORD *)(v3 - 16);
  *(_DWORD *)(v3 - 16) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v8 + 16 * v14);
      if (v15 != result)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v8 + 16 * v14);
          ++v16;
          if (v15 == result)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_12:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
          {
            v27 = v3;
            v28 = v3 - 40;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
            v3 = v27;
            result = v28;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 16) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (!v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_DWORD *)(v3 - 16) = v5;
  return result;
}

uint64_t WebCore::JSSourceBuffer::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSSourceBuffer::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSSourceBuffer::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24) - 40;
  else
    return 0;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSSourceBufferList>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSSourceBufferList>((WebCore::JSSourceBufferList *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSSourceBufferListPrototype::finishCreation(WebCore::JSSourceBufferListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(a2, (uint64_t)&WebCore::JSSourceBufferList::s_info, &WebCore::JSSourceBufferListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSSourceBufferList::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::VM *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int OwnProperty;
  int v34;
  int v35;
  char hasExceptionsAfterHandlingTraps;
  _BYTE v37[16];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (v15)
  {
    v16 = v15;
    if (!*(_BYTE *)(v15 + 274))
    {
      v17 = *(_BYTE **)(v15 + 496);
      if (!v17)
        v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
      if (*(_QWORD *)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 680);
          if (*(_BYTE *)(v19 + 243))
          {
            if (!*(_BYTE *)(v19 + 242))
              goto LABEL_23;
          }
          else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
          {
            goto LABEL_23;
          }
          if (v17[65])
            return JSC::JSObject::put();
        }
      }
    }
  }
LABEL_23:
  if (!a3)
    return JSC::JSObject::put();
  v20 = *(_DWORD *)(a3 + 16);
  if ((v20 & 0x20) != 0)
    return JSC::JSObject::put();
  v21 = *(JSC::VM **)(a2 + 56);
  v22 = *(_BYTE **)(a3 + 8);
  v23 = *(unsigned int *)(a3 + 4);
  if ((v20 & 4) != 0)
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *v22 - 48;
    if (v24 > 9 || v23 >= 2 && *v22 == 48)
      return JSC::JSObject::put();
    v30 = v23 - 1;
    v31 = v22 + 1;
    while (v30)
    {
      if (v24 <= 0x19999999)
      {
        v32 = *v31 - 48;
        if (v32 <= 9)
        {
          v29 = __CFADD__(v32, 10 * v24);
          v24 = v32 + 10 * v24;
          --v30;
          ++v31;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  else
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *(unsigned __int16 *)v22 - 48;
    if (v24 > 9 || v23 >= 2 && *(_WORD *)v22 == 48)
      return JSC::JSObject::put();
    v26 = (unsigned __int16 *)(v22 + 2);
    v27 = v23 - 1;
    while (v27)
    {
      if (v24 <= 0x19999999)
      {
        v28 = *v26 - 48;
        if (v28 <= 9)
        {
          v29 = __CFADD__(v28, 10 * v24);
          v24 = v28 + 10 * v24;
          ++v26;
          --v27;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  if (v24 == -1)
    return JSC::JSObject::put();
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 14;
  v38 = 0xFFFFFFFF00000000;
  v40 = 0;
  v41 = 0;
  v39 = v8;
  v42 = 0x20000;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  OwnProperty = WebCore::JSSourceBufferList::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v37);
  if (*((_DWORD *)v21 + 20)
    && (v35 = OwnProperty,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21),
        OwnProperty = v35,
        (hasExceptionsAfterHandlingTraps & 1) != 0)
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v21 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v45)
  {
    v34 = *(_DWORD *)(v44 + 4);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x194F8D9E0);
    }
    *(_DWORD *)(v44 + 4) = v34 - 1;
  }
  return result;
}

uint64_t WebCore::JSSourceBufferList::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSSourceBufferList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (!*(_BYTE *)(v15 + 242))
              goto LABEL_22;
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) == 0)
          {
            goto LABEL_22;
          }
          if (v13[65])
            return JSC::JSObject::deleteProperty();
        }
      }
    }
  }
LABEL_22:
  if (!a3)
    return JSC::JSObject::deleteProperty();
  v16 = *(_DWORD *)(a3 + 16);
  if ((v16 & 0x20) != 0)
    return JSC::JSObject::deleteProperty();
  v17 = *(_WORD **)(a3 + 8);
  v18 = *(unsigned int *)(a3 + 4);
  if ((v16 & 4) == 0)
  {
    if ((_DWORD)v18 && (v19 = (unsigned __int16)*v17 - 48, v19 <= 9) && (v18 < 2 || *v17 != 48))
    {
      v25 = v17 + 1;
      v26 = v18 - 1;
      while (v26)
      {
        if (v19 <= 0x19999999)
        {
          v27 = *v25 - 48;
          if (v27 <= 9)
          {
            v28 = __CFADD__(v27, 10 * v19);
            v19 = v27 + 10 * v19;
            ++v25;
            --v26;
            if (!v28)
              continue;
          }
        }
        goto LABEL_29;
      }
      v7 = v19 == -1;
      v22 = v19 & 0xFFFFFF00;
      v21 = v19;
      v20 = 0x100000000;
      if (v7)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
      }
    }
    else
    {
LABEL_29:
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
    v23 = v22 | v21;
    if ((v20 & 0x100000000) != 0)
      return *(_DWORD *)(v9 + 68) <= v23;
    return JSC::JSObject::deleteProperty();
  }
  if (!(_DWORD)v18)
  {
    v30 = 0;
    goto LABEL_47;
  }
  v29 = *(unsigned __int8 *)v17 - 48;
  if (v29 > 9 || v18 >= 2 && *(_BYTE *)v17 == 48)
  {
LABEL_46:
    v30 = 0;
    LODWORD(v18) = 0;
LABEL_47:
    v31 = 0;
    goto LABEL_48;
  }
  v32 = v18 - 1;
  v33 = (unsigned __int8 *)v17 + 1;
  while (v32)
  {
    if (v29 > 0x19999999)
      goto LABEL_46;
    v34 = *v33 - 48;
    if (v34 > 9)
      goto LABEL_46;
    v30 = 0;
    LODWORD(v18) = 0;
    v31 = 0;
    v28 = __CFADD__(v34, 10 * v29);
    v29 = v34 + 10 * v29;
    --v32;
    ++v33;
    if (v28)
      goto LABEL_48;
  }
  if (v29 == -1)
    v30 = 0;
  else
    v30 = v29 & 0xFFFFFF00;
  if (v29 == -1)
    LODWORD(v18) = 0;
  else
    LODWORD(v18) = v29;
  if (v29 == -1)
    v31 = 0;
  else
    v31 = 0x100000000;
LABEL_48:
  v23 = v18 | v30;
  if ((v31 & 0x100000000) != 0)
    return *(_DWORD *)(v9 + 68) <= v23;
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSSourceBufferList::deletePropertyByIndex(WebCore::JSSourceBufferList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 68) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 68) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 68) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 68) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 68) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 68) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 68) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSSourceBufferList::getOwnPropertySlotByIndex(WebCore::JSSourceBufferList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  unint64_t v10;
  uint64_t result;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v7 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v7 + 68) <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * a3);
  if (!v8)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v10 = WebCore::wrap<WebCore::SourceBuffer>((uint64_t)a2, *(JSC::VM **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v8);
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v10;
  *(_DWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSSourceBufferList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 68);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSSourceBufferList::defineOwnProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;

  if (!a3)
    return JSC::JSObject::defineOwnProperty();
  v5 = *(_DWORD *)(a3 + 16);
  if ((v5 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty();
  v6 = *(_BYTE **)(a3 + 8);
  v7 = *(unsigned int *)(a3 + 4);
  if ((v5 & 4) != 0)
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *v6 - 48;
    if (v8 > 9 || v7 >= 2 && *v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v14 = v7 - 1;
    v15 = v6 + 1;
    while (v14)
    {
      if (v8 <= 0x19999999)
      {
        v16 = *v15 - 48;
        if (v16 <= 9)
        {
          v13 = __CFADD__(v16, 10 * v8);
          v8 = v16 + 10 * v8;
          --v14;
          ++v15;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  else
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *(unsigned __int16 *)v6 - 48;
    if (v8 > 9 || v7 >= 2 && *(_WORD *)v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v10 = (unsigned __int16 *)(v6 + 2);
    v11 = v7 - 1;
    while (v11)
    {
      if (v8 <= 0x19999999)
      {
        v12 = *v10 - 48;
        if (v12 <= 9)
        {
          v13 = __CFADD__(v12, 10 * v8);
          v8 = v12 + 10 * v8;
          ++v10;
          --v11;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  if (v8 == -1)
    return JSC::JSObject::defineOwnProperty();
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSSourceBufferList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSourceBufferList::createPrototype(WebCore::JSSourceBufferList *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSSourceBufferListPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSSourceBufferListPrototype::create(WebCore::JSSourceBufferListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSourceBufferListPrototype::finishCreation((WebCore::JSSourceBufferListPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSourceBufferList>,(WebCore::DOMConstructorID)132>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  JSC::JSCell *v5;
  uint64_t Structure;
  JSC::Heap *v7;
  unint64_t v8;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1056);
  if (!result)
  {
    v5 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSourceBufferList>::createStructure((uint64_t *)a1, a2, v5);
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSourceBufferList>::create(a1, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1056) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v7 = (JSC::Heap *)(a1 + 192);
        v8 = result;
        JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)a2);
        return v8;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSSourceBufferList::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v8;
  _WORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unint64_t v54;

  v6 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v8 = *(_DWORD *)(a3 + 16);
  if ((v8 & 0x20) != 0)
    goto LABEL_35;
  v9 = *(_WORD **)(a3 + 8);
  v10 = *(unsigned int *)(a3 + 4);
  if ((v8 & 4) == 0)
  {
    if ((_DWORD)v10 && (v11 = (unsigned __int16)*v9 - 48, v11 <= 9))
    {
      if (v10 < 2 || *v9 != 48)
      {
        v19 = v9 + 1;
        v20 = v10 - 1;
        while (v20)
        {
          if (v11 <= 0x19999999)
          {
            v21 = *v19 - 48;
            if (v21 <= 9)
            {
              v22 = __CFADD__(v21, 10 * v11);
              v11 = v21 + 10 * v11;
              ++v19;
              --v20;
              if (!v22)
                continue;
            }
          }
          goto LABEL_6;
        }
        v23 = v11 == -1;
        v13 = v11 & 0xFFFFFF00;
        v12 = 0x100000000;
        if (v11 == -1)
        {
          v12 = 0;
          LOBYTE(v11) = 0;
        }
        if (v23)
          v13 = 0;
LABEL_8:
        v11 = v11;
        if ((v12 & 0x100000000) == 0)
          goto LABEL_35;
        goto LABEL_9;
      }
      v12 = 0;
    }
    else
    {
LABEL_6:
      v12 = 0;
      LOBYTE(v11) = 0;
    }
    v13 = 0;
    goto LABEL_8;
  }
  if (!(_DWORD)v10)
  {
    v11 = 0;
    goto LABEL_33;
  }
  v24 = *(unsigned __int8 *)v9 - 48;
  if (v24 > 9 || v10 >= 2 && *(_BYTE *)v9 == 48)
  {
LABEL_32:
    v11 = 0;
    LOBYTE(v10) = 0;
LABEL_33:
    v25 = 0;
    goto LABEL_34;
  }
  v48 = v10 - 1;
  v49 = (unsigned __int8 *)v9 + 1;
  while (v48)
  {
    if (v24 > 0x19999999)
      goto LABEL_32;
    v50 = *v49 - 48;
    if (v50 > 9)
      goto LABEL_32;
    v11 = 0;
    LOBYTE(v10) = 0;
    v25 = 0;
    v22 = __CFADD__(v50, 10 * v24);
    v24 = v50 + 10 * v24;
    --v48;
    ++v49;
    if (v22)
      goto LABEL_34;
  }
  if (v24 == -1)
    v11 = 0;
  else
    v11 = v24 & 0xFFFFFF00;
  if (v24 == -1)
    LOBYTE(v10) = 0;
  else
    LOBYTE(v10) = v24;
  if (v24 == -1)
    v25 = 0;
  else
    v25 = 0x100000000;
LABEL_34:
  v13 = v10;
  if ((v25 & 0x100000000) == 0)
    goto LABEL_35;
LABEL_9:
  v14 = v13 | v11;
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v15 + 68) > v14)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v14);
    if (v16)
    {
      v17 = WebCore::wrap<WebCore::SourceBuffer>(a2, *(JSC::VM **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v16);
      if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
      {
        *(_QWORD *)a4 = v17;
        *(_DWORD *)(a4 + 16) = 2;
        *(_QWORD *)(a4 + 32) = a1;
        result = 1;
        *(_BYTE *)(a4 + 49) = 1;
        return result;
      }
      return 0;
    }
  }
LABEL_35:
  if (!(a3 >> 4)
    || (v26 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v26 + 0x20)) != 0)
    || (v27 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56))) == 0|| (v54 = a3, v28 = JSC::PropertyTable::get(v27, (uint64_t *)&v54), (_DWORD)v28 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v29 = *(_DWORD *)(a3 + 16);
    if ((v29 & 0x20) == 0)
    {
      v30 = *(_BYTE **)(a3 + 8);
      v31 = *(unsigned int *)(a3 + 4);
      if ((v29 & 4) != 0)
      {
        if (!(_DWORD)v31 || (v46 = *v30 - 48, v46 > 9) || v31 >= 2 && *v30 == 48)
        {
LABEL_81:
          v47 = 0;
        }
        else
        {
          v51 = v31 - 1;
          v52 = v30 + 1;
          while (v51)
          {
            if (v46 > 0x19999999)
              goto LABEL_81;
            v53 = *v52 - 48;
            if (v53 > 9)
              goto LABEL_81;
            v47 = 0;
            v22 = __CFADD__(v53, 10 * v46);
            v46 = v53 + 10 * v46;
            --v51;
            ++v52;
            if (v22)
              goto LABEL_82;
          }
          v47 = 0x100000000;
          if (v46 == -1)
            v47 = 0;
        }
LABEL_82:
        if ((v47 & 0x100000000) == 0)
          return 0;
      }
      else
      {
        if ((_DWORD)v31
          && (v32 = *(unsigned __int16 *)v30 - 48, v32 <= 9)
          && (v31 < 2 || *(_WORD *)v30 != 48))
        {
          v38 = (unsigned __int16 *)(v30 + 2);
          v39 = v31 - 1;
          while (v39)
          {
            if (v32 <= 0x19999999)
            {
              v40 = *v38 - 48;
              if (v40 <= 9)
              {
                v22 = __CFADD__(v40, 10 * v32);
                v32 = v40 + 10 * v32;
                ++v38;
                --v39;
                if (!v22)
                  continue;
              }
            }
            goto LABEL_46;
          }
          v23 = v32 == -1;
          v33 = 0x100000000;
          if (v23)
            v33 = 0;
        }
        else
        {
LABEL_46:
          v33 = 0;
        }
        if ((v33 & 0x100000000) == 0)
          return 0;
      }
      return JSC::JSObject::getOwnPropertySlotByIndex();
    }
    return 0;
  }
  if ((int)v28 > 63)
  {
    v34 = *(_QWORD *)(a1 + 8) - 8;
    v35 = 0x3F00000000 - (v28 << 32);
  }
  else
  {
    v34 = a1 + 16;
    v35 = v28 << 32;
  }
  v36 = *(_QWORD *)(v34 + (v35 >> 29));
  if ((v36 & 0xFFFE000000000002) != 0)
  {
LABEL_55:
    *(_QWORD *)a4 = v36;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v28);
    *(_DWORD *)(a4 + 20) = v28;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v37 = *(unsigned __int8 *)(v36 + 5);
  if (v37 != 6)
  {
    if (v37 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot();
      return 1;
    }
    goto LABEL_55;
  }
  v41 = *(_DWORD *)(v26 + 16) & 3;
  v43 = *(_QWORD *)(v36 + 8);
  v42 = *(_QWORD *)(v36 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C))
  {
    v45 = *(_QWORD *)(v36 + 24);
    v44 = *(_QWORD *)(v36 + 32);
    *(_QWORD *)a4 = v43;
    *(_QWORD *)(a4 + 8) = v42;
    *(_DWORD *)(a4 + 16) = HIDWORD(v28);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v41 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v45;
    *(_QWORD *)(a4 + 80) = v44;
  }
  else
  {
    *(_QWORD *)a4 = v43;
    *(_QWORD *)(a4 + 8) = v42;
    *(_DWORD *)(a4 + 16) = HIDWORD(v28);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v41 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

unint64_t WebCore::jsSourceBufferListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSourceBufferListPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSourceBufferList>,(WebCore::DOMConstructorID)132>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSourceBufferList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 68);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsSourceBufferList_onaddsourcebuffer(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF *v16;
  void *v17;
  bmalloc::api *v18;
  void *v19;

  v5 = *(_QWORD *)(a2 + 24);
  ++*(_DWORD *)(v5 + 24);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 88), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 1)
  {
    v12 = *(unsigned int *)(v5 + 68);
    if ((_DWORD)v12)
    {
      v13 = *(_DWORD ***)(v5 + 56);
      v14 = 8 * v12;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (v15[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
          else
            --v15[6];
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    v16 = *(WTF **)(v5 + 56);
    if (v16)
    {
      *(_QWORD *)(v5 + 56) = 0;
      *(_DWORD *)(v5 + 64) = 0;
      WTF::fastFree(v16, v9);
    }
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v5 + 32), v9);
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v5, v17);
    bmalloc::api::isoDeallocate(v18, v19);
  }
  else
  {
    --*(_DWORD *)(v5 + 24);
  }
  return v10;
}

BOOL WebCore::setJSSourceBufferList_onaddsourcebuffer(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;
  WTF *v21;
  void *v22;
  bmalloc::api *v23;
  void *v24;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSourceBufferList::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSourceBufferList::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(_QWORD *)(a2 + 24);
      ++*(_DWORD *)(v11 + 24);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 88), a3, (_DWORD *)a2);
      if (*(_DWORD *)(v11 + 24) == 1)
      {
        v17 = *(unsigned int *)(v11 + 68);
        if ((_DWORD)v17)
        {
          v18 = *(_DWORD ***)(v11 + 56);
          v19 = 8 * v17;
          do
          {
            v20 = *v18;
            *v18 = 0;
            if (v20)
            {
              if (v20[6] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
              else
                --v20[6];
            }
            ++v18;
            v19 -= 8;
          }
          while (v19);
        }
        v21 = *(WTF **)(v11 + 56);
        if (v21)
        {
          *(_QWORD *)(v11 + 56) = 0;
          *(_DWORD *)(v11 + 64) = 0;
          WTF::fastFree(v21, v15);
        }
        WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v11 + 32), v15);
        WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v11, v22);
        bmalloc::api::isoDeallocate(v23, v24);
        if (!a3)
          return 1;
      }
      else
      {
        --*(_DWORD *)(v11 + 24);
        if (!a3)
          return 1;
      }
      if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSourceBufferList_onremovesourcebuffer(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF *v16;
  void *v17;
  bmalloc::api *v18;
  void *v19;

  v5 = *(_QWORD *)(a2 + 24);
  ++*(_DWORD *)(v5 + 24);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1664), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 1)
  {
    v12 = *(unsigned int *)(v5 + 68);
    if ((_DWORD)v12)
    {
      v13 = *(_DWORD ***)(v5 + 56);
      v14 = 8 * v12;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (v15[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
          else
            --v15[6];
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    v16 = *(WTF **)(v5 + 56);
    if (v16)
    {
      *(_QWORD *)(v5 + 56) = 0;
      *(_DWORD *)(v5 + 64) = 0;
      WTF::fastFree(v16, v9);
    }
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v5 + 32), v9);
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v5, v17);
    bmalloc::api::isoDeallocate(v18, v19);
  }
  else
  {
    --*(_DWORD *)(v5 + 24);
  }
  return v10;
}

BOOL WebCore::setJSSourceBufferList_onremovesourcebuffer(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;
  WTF *v21;
  void *v22;
  bmalloc::api *v23;
  void *v24;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSourceBufferList::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSourceBufferList::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(_QWORD *)(a2 + 24);
      ++*(_DWORD *)(v11 + 24);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1664), a3, (_DWORD *)a2);
      if (*(_DWORD *)(v11 + 24) == 1)
      {
        v17 = *(unsigned int *)(v11 + 68);
        if ((_DWORD)v17)
        {
          v18 = *(_DWORD ***)(v11 + 56);
          v19 = 8 * v17;
          do
          {
            v20 = *v18;
            *v18 = 0;
            if (v20)
            {
              if (v20[6] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
              else
                --v20[6];
            }
            ++v18;
            v19 -= 8;
          }
          while (v19);
        }
        v21 = *(WTF **)(v11 + 56);
        if (v21)
        {
          *(_QWORD *)(v11 + 56) = 0;
          *(_DWORD *)(v11 + 64) = 0;
          WTF::fastFree(v21, v15);
        }
        WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v11 + 32), v15);
        WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v11, v22);
        bmalloc::api::isoDeallocate(v23, v24);
        if (!a3)
          return 1;
      }
      else
      {
        --*(_DWORD *)(v11 + 24);
        if (!a3)
          return 1;
      }
      if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSSourceBufferListOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::ConcurrentPtrHashSet *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t result;
  _QWORD *v21;

  v7 = *a2;
  v8 = *(_QWORD **)(*a2 + 24);
  v9 = v8[5];
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0 || *(_BYTE *)(v10 + 180))
  {
    if (!a5)
      goto LABEL_5;
    goto LABEL_17;
  }
  if (v8[6] || ((*(uint64_t (**)(_QWORD *))(v8[4] + 64))(v8 + 4) & 1) != 0)
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  v8 = *(_QWORD **)(v7 + 24);
  if (a5)
  {
LABEL_17:
    *a5 = "Reachable from SourceBufferList";
    a5[1] = 32;
  }
LABEL_5:
  v11 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v12 = (_DWORD *)*((_QWORD *)v11 + 6);
  if ((_DWORD *)((char *)v11 + 56) == v12)
  {
    v21 = v8;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v11, v8);
    v8 = v21;
    if (!(_DWORD)result)
      return result;
LABEL_19:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a4 + 152))(a4, v8);
    return 1;
  }
  v13 = v12[1];
  v14 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = v17;
  while (1)
  {
    v19 = *(_QWORD **)&v12[2 * v18 + 4];
    if (!v19)
      return 0;
    if (v8 == v19)
      goto LABEL_19;
    v18 = (v18 + 1) & v13;
    if (v18 == v17)
    {
      __break(0xC471u);
      JUMPOUT(0x194F8F3B8);
    }
  }
}

void WebCore::JSSourceBufferListOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  WTF *v10;
  void *v11;
  bmalloc::api *v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v4 + 1;
  v5 = v3 + 8;
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v16 = *(_QWORD *)(a3 + 32);
    v14 = (uint64_t *)(a3 + 32);
    v15 = v16;
    if (v16)
    {
      v17 = *(_DWORD *)(v15 - 8);
      v18 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = *(_QWORD *)(v15 + 16 * v21);
      if (v22 != v3)
      {
        v23 = 1;
        while (v22)
        {
          v21 = ((_DWORD)v21 + v23) & v17;
          v22 = *(_QWORD *)(v15 + 16 * v21);
          ++v23;
          if (v22 == v3)
            goto LABEL_24;
        }
        v21 = *(unsigned int *)(v15 - 4);
      }
LABEL_24:
      if (v21 != *(_DWORD *)(v15 - 4))
      {
        v24 = (_QWORD *)(v15 + 16 * v21);
        *v24 = -1;
        v27 = v24[1];
        v26 = v24 + 1;
        v25 = v27;
        if (v27)
        {
          *(_QWORD *)(v25 + 8) = 3;
          *v26 = 0;
        }
        ++*(_DWORD *)(*v14 - 16);
        v28 = *v14;
        if (*v14)
          v29 = *(_DWORD *)(v28 - 12) - 1;
        else
          v29 = -1;
        *(_DWORD *)(v28 - 12) = v29;
        v30 = *v14;
        if (*v14)
        {
          v31 = 6 * *(_DWORD *)(v30 - 12);
          v32 = *(_DWORD *)(v30 - 4);
          if (v31 < v32 && v32 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v14, v32 >> 1, 0);
        }
      }
    }
    v4 = *(_DWORD *)(v3 + 24) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *(_DWORD *)(v3 + 24) = v4;
  }
  else
  {
    v6 = *(unsigned int *)(v3 + 68);
    if ((_DWORD)v6)
    {
      v7 = *(_DWORD ***)(v3 + 56);
      v8 = 8 * v6;
      do
      {
        v9 = *v7;
        *v7 = 0;
        if (v9)
        {
          if (v9[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
          else
            --v9[6];
        }
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    v10 = *(WTF **)(v3 + 56);
    if (v10)
    {
      *(_QWORD *)(v3 + 56) = 0;
      *(_DWORD *)(v3 + 64) = 0;
      WTF::fastFree(v10, a2);
    }
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v3 + 32), a2);
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v3, v11);
    bmalloc::api::isoDeallocate(v12, v13);
  }
}

unint64_t WebCore::wrap<WebCore::SourceBufferList>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *Allocator;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  WTF *v47;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v36 = *(_QWORD *)(v5 + 32);
    if (!v36)
      goto LABEL_5;
    v37 = *(_DWORD *)(v36 - 8);
    v38 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
    v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
    v41 = v37 & ((v40 >> 31) ^ v40);
    v42 = *(_QWORD *)(v36 + 16 * v41);
    if (v42 != a3)
    {
      v43 = 1;
      while (v42)
      {
        v41 = ((_DWORD)v41 + v43) & v37;
        v42 = *(_QWORD *)(v36 + 16 * v41);
        ++v43;
        if (v42 == a3)
          goto LABEL_59;
      }
      goto LABEL_5;
    }
LABEL_59:
    v6 = *(_QWORD *)(v36 + 16 * v41 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::SourceBufferList *__hidden))a3 != off_1E335E340)
  {
    __break(0xC471u);
    JUMPOUT(0x194F8FA44);
  }
  v8 = WebCore::getDOMStructure<WebCore::JSSourceBufferList>(*(WebCore::JSSourceBufferList **)(a2 + 56), (JSC::VM *)a2);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(v9 + 41456);
  v11 = *(_QWORD *)(v10 + 23536);
  v12 = *(_QWORD **)(v11 + 1080);
  if (!v12)
  {
    v13 = *(_QWORD *)(v10 + 22648);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_11:
    v15 = *(_QWORD *)(v13 + 2824);
    v45 = *(_QWORD *)(v15 + 1080);
    if (!v45)
    {
      v16 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v47, "IsoSpace T");
      v46 = 0;
      MEMORY[0x19AEA3204](v16, &v47, v9 + 192, v9 + 1872, 32, 8, &v46);
      v18 = (uint64_t)v46;
      v46 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v19 = v47;
      v47 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          WTF::fastFree(v19, v17);
        else
          --*(_DWORD *)v19;
      }
      v45 = v16;
      v20 = *(_QWORD *)(v15 + 1080);
      *(_QWORD *)(v15 + 1080) = v16;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      v21 = *(unsigned int *)(v13 + 2844);
      if ((_DWORD)v21 == *(_DWORD *)(v13 + 2840))
      {
        v22 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 + 2832, v21 + 1, (unint64_t)&v45);
        v21 = *(unsigned int *)(v13 + 2844);
        *(_QWORD *)(*(_QWORD *)(v13 + 2832) + 8 * v21) = *v22;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v13 + 2832) + 8 * v21) = v16;
      }
      *(_DWORD *)(v13 + 2844) = v21 + 1;
    }
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v23 = *(_QWORD *)(v11 + 1080);
    *(_QWORD *)(v11 + 1080) = v12;
    if (v23)
    {
      v24 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v24, v25);
    }
    v26 = __ldxr((unsigned __int8 *)v13);
    if (v26 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  }
LABEL_29:
  SlowCase = v12[3];
  if (SlowCase < v12[4])
  {
LABEL_30:
    v12[3] = SlowCase + 32;
    goto LABEL_31;
  }
  SlowCase = v12[5];
  if ((SlowCase & 1) == 0)
  {
    v44 = *(_QWORD *)(SlowCase + 8) ^ v12[6];
    v12[4] = SlowCase + HIDWORD(v44);
    v12[5] = SlowCase + (int)v44;
    goto LABEL_30;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_31:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v8);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  v27 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3369E0 & 1) == 0)
  {
    qword_1EE3369D8 = (uint64_t)&off_1E3307C90;
    byte_1EE3369E0 = 1;
  }
  if (!*(_DWORD *)(v27 + 48))
  {
    if ((SlowCase & 8) != 0)
      v28 = (SlowCase - 112) | 1;
    else
      v28 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v28 & 1) != 0)
      v29 = v28 + 47;
    else
      v29 = *(_QWORD *)v28 + 32;
    Allocator = *(_QWORD **)(v29 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v29 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3369D8;
    Allocator[2] = v27;
    v31 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v31)
      return SlowCase;
LABEL_53:
    *(_QWORD *)(v31 + 8) = 3;
    return SlowCase;
  }
  v47 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v33 = (SlowCase - 112) | 1;
  else
    v33 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v33 & 1) != 0)
    v34 = v33 + 47;
  else
    v34 = *(_QWORD *)v33 + 32;
  v35 = *(_QWORD **)(v34 + 16);
  if (!v35)
    v35 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v34 + 16) = *v35;
  *v35 = SlowCase;
  v35[1] = &qword_1EE3369D8;
  v35[2] = v27;
  v46 = v35;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v27 + 32), (uint64_t *)&v47, (uint64_t *)&v46);
  v31 = (uint64_t)v46;
  if (v46)
    goto LABEL_53;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSSpeechRecognition>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Document *v7;
  WebCore::SpeechRecognition *v8;
  WebCore::JSDOMGlobalObject *v9;
  WTF::StringImpl *v10;
  JSCell *v11;
  JSC::JSCell *v12;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v14;
  JSC::JSGlobalObject *v15;
  JSC::VM *v16;
  JSC::JSObject *v17;
  JSC::Structure *v18;
  JSC::VM *FunctionRealm;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  int v27;
  JSC::JSCell *v28;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v30;
  JSC::Structure *v31;
  JSC::JSCell *v32;
  uint64_t v33;
  unint64_t SubclassStructure;
  bmalloc::api *v36;
  void *v37;
  WebCore::SpeechRecognition *v38;
  JSC::VM *v39;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v39 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v39, (uint64_t)"webkitSpeechRecognition", 24);
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194F8FD48);
  }
  v7 = (WebCore::Document *)(v6 - 192);
  v8 = (WebCore::SpeechRecognition *)bmalloc::api::isoAllocate();
  v38 = (WebCore::SpeechRecognition *)WebCore::SpeechRecognition::SpeechRecognition(v8, v7);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v38 + 3);
  if (*(void (***)(WebCore::SpeechRecognition *__hidden))v8 != off_1E33665E8)
  {
    __break(0xC471u);
    JUMPOUT(0x194F8FD68);
  }
  v11 = (JSCell *)WebCore::createWrapper<WebCore::SpeechRecognition,WebCore::SpeechRecognition>(*(JSC::VM **)(v5 + 40), &v38, v9);
  v12 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v12 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v12);
    if (Object)
    {
      v15 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v16 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v14);
        if (!*((_DWORD *)v16 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) == 0)
        {
          v20 = *((_QWORD *)FunctionRealm + 412);
          if (v20)
          {
            v21 = *(_DWORD *)(v20 - 8);
            v22 = ((unint64_t)&WebCore::JSSpeechRecognition::s_info
                 + ~((_QWORD)&WebCore::JSSpeechRecognition::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognition::s_info
                                                                             + ~((_QWORD)&WebCore::JSSpeechRecognition::s_info << 32)) >> 22);
            v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
            v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
            v25 = v21 & ((v24 >> 31) ^ v24);
            v26 = *(char ***)(v20 + 16 * v25);
            if (v26 == &WebCore::JSSpeechRecognition::s_info)
            {
LABEL_13:
              v17 = *(JSC::JSObject **)(v20 + 16 * v25 + 8);
              if (v17)
              {
LABEL_15:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v15, v17, v18);
                if (!*((_DWORD *)v16 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) == 0)
                  JSC::JSObject::setStructure(v11, v16, SubclassStructure);
                goto LABEL_17;
              }
            }
            else
            {
              v27 = 1;
              while (v26)
              {
                v25 = ((_DWORD)v25 + v27) & v21;
                v26 = *(char ***)(v20 + 16 * v25);
                ++v27;
                if (v26 == &WebCore::JSSpeechRecognition::s_info)
                  goto LABEL_13;
              }
            }
          }
          v28 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v16, FunctionRealm, v17);
          Structure = WebCore::JSSpeechRecognitionPrototype::createStructure((uint64_t *)v16, (uint64_t)FunctionRealm, v28);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v32 = (JSC::JSCell *)WebCore::JSSpeechRecognitionPrototype::create(v16, Structure, v30, v31);
          v33 = WebCore::JSSpeechRecognition::createStructure((uint64_t *)v16, (uint64_t)FunctionRealm, v32);
          v17 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v33, (uint64_t)&WebCore::JSSpeechRecognition::s_info);
          goto LABEL_15;
        }
      }
    }
  }
LABEL_17:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v11 = 0;
  if (v38)
  {
    if (*((_DWORD *)v38 + 12) == 1)
    {
      WebCore::SpeechRecognition::~SpeechRecognition(v38, v10);
      bmalloc::api::isoDeallocate(v36, v37);
    }
    else
    {
      --*((_DWORD *)v38 + 12);
    }
  }
  return v11;
}

uint64_t WebCore::JSSpeechRecognition::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 56);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSpeechRecognitionPrototype::create(WebCore::JSSpeechRecognitionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<19u>(this, (uint64_t)&WebCore::JSSpeechRecognition::s_info, (uint64_t)&WebCore::JSSpeechRecognitionPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSpeechRecognition>,(WebCore::DOMConstructorID)201>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1608);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructor<WebCore::JSSpeechRecognition>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSpeechRecognition::s_info
         + ~((_QWORD)&WebCore::JSSpeechRecognition::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognition::s_info
                                                                     + ~((_QWORD)&WebCore::JSSpeechRecognition::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSpeechRecognition::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSpeechRecognition::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSpeechRecognitionPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSpeechRecognitionPrototype::create((WebCore::JSSpeechRecognitionPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSpeechRecognition::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSpeechRecognition::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1608) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSpeechRecognitionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSpeechRecognitionPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSpeechRecognition>,(WebCore::DOMConstructorID)201>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSpeechRecognition_lang(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

BOOL WebCore::setJSSpeechRecognition_lang(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  unint64_t v20;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSpeechRecognition::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSpeechRecognition::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(this + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v19 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v19;
    if (hasExceptionsAfterHandlingTraps)
    {
      v18 = 1;
      v19 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v14 = 0;
      v13 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v11 = v19;
  }
  v18 = 0;
  v17 = 0;
  v12 = *(WTF::StringImpl **)(v9 + 24);
  *(_QWORD *)(v9 + 24) = v11;
  if (!v12)
    goto LABEL_29;
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
LABEL_29:
    v13 = 0;
    goto LABEL_23;
  }
  v13 = 0;
  *(_DWORD *)v12 -= 2;
LABEL_23:
  v14 = 1;
LABEL_24:
  ((void (*)(unint64_t *, uint64_t *))off_1E33088B8[v13])(&v20, &v17);
  return v14;
}

uint64_t WebCore::jsSpeechRecognition_continuous(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 32))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSSpeechRecognition_continuous(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  BOOL v11;
  uint64_t v12;
  BOOL v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSpeechRecognition::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSpeechRecognition::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v14 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v15 = *(unsigned __int8 *)(a3 + 5);
    if (v15 == 3)
    {
      v18 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v15 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v14 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v16 = *(_QWORD *)(a3 + 8);
      if ((v16 & 1) != 0)
        v17 = (int *)(a3 + 16);
      else
        v17 = (int *)(v16 + 4);
      v18 = *v17;
    }
    v14 = v18 == 0;
LABEL_37:
    v11 = !v14;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  *(_BYTE *)(v12 + 32) = v11;
  return 1;
}

uint64_t WebCore::jsSpeechRecognition_interimResults(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 33))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSSpeechRecognition_interimResults(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  BOOL v11;
  uint64_t v12;
  BOOL v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSpeechRecognition::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSpeechRecognition::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v14 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v15 = *(unsigned __int8 *)(a3 + 5);
    if (v15 == 3)
    {
      v18 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v15 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v14 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v16 = *(_QWORD *)(a3 + 8);
      if ((v16 & 1) != 0)
        v17 = (int *)(a3 + 16);
      else
        v17 = (int *)(v16 + 4);
      v18 = *v17;
    }
    v14 = v18 == 0;
LABEL_37:
    v11 = !v14;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  *(_BYTE *)(v12 + 33) = v11;
  return 1;
}

unint64_t WebCore::jsSpeechRecognition_maxAlternatives(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) | 0xFFFE000000000000;
}

BOOL WebCore::setJSSpeechRecognition_maxAlternatives(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  _BOOL8 result;
  unsigned int v10;
  int v11;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSSpeechRecognition::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSSpeechRecognition::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, a3, &v10);
  result = v11 == 0;
  if (!v11)
    *(_QWORD *)(v8 + 40) = v10;
  return result;
}

uint64_t WebCore::jsSpeechRecognition_onaudiostart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 168), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition((WebCore *)((char *)v5 - 56), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechRecognition_onaudiostart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechRecognition::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechRecognition::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 168), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechRecognition::~SpeechRecognition((WebCore::EventTarget *)((char *)v11 - 56), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechRecognition_onsoundstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1880), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition((WebCore *)((char *)v5 - 56), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechRecognition_onsoundstart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechRecognition::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechRecognition::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1880), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechRecognition::~SpeechRecognition((WebCore::EventTarget *)((char *)v11 - 56), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechRecognition_onspeechstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1920), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition((WebCore *)((char *)v5 - 56), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechRecognition_onspeechstart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechRecognition::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechRecognition::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1920), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechRecognition::~SpeechRecognition((WebCore::EventTarget *)((char *)v11 - 56), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechRecognition_onspeechend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1912), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition((WebCore *)((char *)v5 - 56), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechRecognition_onspeechend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechRecognition::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechRecognition::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1912), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechRecognition::~SpeechRecognition((WebCore::EventTarget *)((char *)v11 - 56), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechRecognition_onsoundend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1872), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition((WebCore *)((char *)v5 - 56), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechRecognition_onsoundend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechRecognition::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechRecognition::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1872), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechRecognition::~SpeechRecognition((WebCore::EventTarget *)((char *)v11 - 56), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechRecognition_onaudioend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 152), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition((WebCore *)((char *)v5 - 56), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechRecognition_onaudioend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechRecognition::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechRecognition::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 152), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechRecognition::~SpeechRecognition((WebCore::EventTarget *)((char *)v11 - 56), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechRecognition_onresult(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1712), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition((WebCore *)((char *)v5 - 56), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechRecognition_onresult(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechRecognition::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechRecognition::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1712), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechRecognition::~SpeechRecognition((WebCore::EventTarget *)((char *)v11 - 56), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechRecognition_onnomatch(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1320), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition((WebCore *)((char *)v5 - 56), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechRecognition_onnomatch(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechRecognition::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechRecognition::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1320), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechRecognition::~SpeechRecognition((WebCore::EventTarget *)((char *)v11 - 56), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechRecognition_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition((WebCore *)((char *)v5 - 56), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechRecognition_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechRecognition::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechRecognition::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 784), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechRecognition::~SpeechRecognition((WebCore::EventTarget *)((char *)v11 - 56), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechRecognition_onstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1960), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition((WebCore *)((char *)v5 - 56), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechRecognition_onstart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechRecognition::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechRecognition::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1960), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechRecognition::~SpeechRecognition((WebCore::EventTarget *)((char *)v11 - 56), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechRecognition_onend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 736), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition((WebCore *)((char *)v5 - 56), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechRecognition_onend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechRecognition::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechRecognition::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 736), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechRecognition::~SpeechRecognition((WebCore::EventTarget *)((char *)v11 - 56), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSSpeechRecognitionOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSSpeechRecognitionOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::SpeechRecognition *v4;
  int v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::SpeechRecognition *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (WebCore::SpeechRecognition *)(v3 - 56);
  v5 = *(_DWORD *)(v3 - 8);
  *(_DWORD *)(v3 - 8) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(WebCore::SpeechRecognition **)(v10 + 16 * v16);
      if (v17 != v4)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(WebCore::SpeechRecognition **)(v10 + 16 * v16);
          ++v18;
          if (v17 == v4)
            goto LABEL_12;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_12:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            v29 = v3;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v3 = v29;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 8) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (v5)
  {
    *(_DWORD *)(v3 - 8) = v5;
  }
  else
  {
    WebCore::SpeechRecognition::~SpeechRecognition(v4, a2);
    bmalloc::api::isoDeallocate(v7, v8);
  }
}

unint64_t WebCore::createWrapper<WebCore::SpeechRecognition,WebCore::SpeechRecognition>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  WTF *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *Allocator;
  uint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  WTF *v56;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSSpeechRecognition::s_info
        + ~((_QWORD)&WebCore::JSSpeechRecognition::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognition::s_info
                                                                    + ~((_QWORD)&WebCore::JSSpeechRecognition::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSSpeechRecognition::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSSpeechRecognition::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSSpeechRecognitionPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSSpeechRecognitionPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSSpeechRecognition::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSSpeechRecognition::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 1632);
  if (v25)
    goto LABEL_31;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  v54 = *(_QWORD *)(v28 + 1632);
  if (!v54)
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v56, "IsoSpace T");
    v55 = 0;
    MEMORY[0x19AEA3204](v29, &v56, v22 + 192, v22 + 1872, 32, 8, &v55);
    v31 = (uint64_t)v55;
    v55 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v56;
    v56 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v54 = v29;
    v33 = *(_QWORD *)(v28 + 1632);
    *(_QWORD *)(v28 + 1632) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v34 == *(_DWORD *)(v26 + 2840))
    {
      v35 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 2832, v34 + 1, (unint64_t)&v54);
      v34 = *(unsigned int *)(v26 + 2844);
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = *v35;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = v29;
    }
    *(_DWORD *)(v26 + 2844) = v34 + 1;
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v24 + 1632);
  *(_QWORD *)(v24 + 1632) = v25;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v26);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_31:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_32:
    v25[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v53 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v53);
    v25[5] = SlowCase + (int)v53;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v41 = *a2;
  *a2 = 0;
  v42 = (char *)v41 + 56;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v42;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v43 = *((_QWORD *)a1 + 415);
  if ((byte_1EE3369F0 & 1) == 0)
  {
    qword_1EE3369E8 = (uint64_t)&off_1E3307CC0;
    byte_1EE3369F0 = 1;
  }
  if (v5)
    v44 = (uint64_t *)((char *)v5 + 64);
  else
    v44 = 0;
  if (!*(_DWORD *)(v43 + 48))
  {
    if ((SlowCase & 8) != 0)
      v45 = (SlowCase - 112) | 1;
    else
      v45 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v45 & 1) != 0)
      v46 = v45 + 47;
    else
      v46 = *(_QWORD *)v45 + 32;
    Allocator = *(_QWORD **)(v46 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v46 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3369E8;
    Allocator[2] = v43;
    v48 = *v44;
    *v44 = (uint64_t)Allocator;
    if (!v48)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v48 + 8) = 3;
    return SlowCase;
  }
  v56 = v5;
  if ((SlowCase & 8) != 0)
    v50 = (SlowCase - 112) | 1;
  else
    v50 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v50 & 1) != 0)
    v51 = v50 + 47;
  else
    v51 = *(_QWORD *)v50 + 32;
  v52 = *(_QWORD **)(v51 + 16);
  if (!v52)
    v52 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v51 + 16) = *v52;
  *v52 = SlowCase;
  v52[1] = &qword_1EE3369E8;
  v52[2] = v43;
  v55 = v52;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v43 + 32), (uint64_t *)&v56, (uint64_t *)&v55);
  v48 = (uint64_t)v55;
  if (v55)
    goto LABEL_58;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::SpeechRecognition>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  uint64_t result;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::SpeechRecognition *v18;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v10 = *(_QWORD *)(v3 + 32);
    if (!v10)
      goto LABEL_5;
    v11 = *(_DWORD *)(v10 - 8);
    v12 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(_QWORD *)(v10 + 16 * v15);
    if (v16 != a3)
    {
      v17 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v17) & v11;
        v16 = *(_QWORD *)(v10 + 16 * v15);
        ++v17;
        if (v16 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(_QWORD *)(v10 + 16 * v15 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 64);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 48);
  v18 = (WebCore::SpeechRecognition *)a3;
  if (*(void (***)(WebCore::SpeechRecognition *__hidden))a3 == off_1E33665E8)
  {
    v5 = WebCore::createWrapper<WebCore::SpeechRecognition,WebCore::SpeechRecognition>(a2, &v18, (WebCore::JSDOMGlobalObject *)a3);
    if (v18)
    {
      if (*((_DWORD *)v18 + 12) == 1)
      {
        WebCore::SpeechRecognition::~SpeechRecognition(v18, v6);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      else
      {
        --*((_DWORD *)v18 + 12);
      }
    }
    return v5;
  }
  result = 781;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionAlternative::destroy(uint64_t this, JSC::JSCell *a2)
{
  bmalloc::api *v2;
  WTF::StringImpl *v3;

  v2 = *(bmalloc::api **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      return bmalloc::api::isoDeallocate(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSSpeechRecognitionAlternative::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionAlternativePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSpeechRecognitionAlternativePrototype::create(WebCore::JSSpeechRecognitionAlternativePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSpeechRecognitionAlternative::s_info, &WebCore::JSSpeechRecognitionAlternativePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechRecognitionAlternative>,(WebCore::DOMConstructorID)202>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1616);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechRecognitionAlternative>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSpeechRecognitionAlternative::s_info
         + ~((_QWORD)&WebCore::JSSpeechRecognitionAlternative::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionAlternative::s_info
                                                                                + ~((_QWORD)&WebCore::JSSpeechRecognitionAlternative::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSpeechRecognitionAlternative::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSpeechRecognitionAlternative::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSpeechRecognitionAlternativePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSpeechRecognitionAlternativePrototype::create((WebCore::JSSpeechRecognitionAlternativePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSpeechRecognitionAlternative::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSpeechRecognitionAlternative::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1616) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSpeechRecognitionAlternativeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSpeechRecognitionAlternativePrototype::s_info != (char **)(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechRecognitionAlternative>,(WebCore::DOMConstructorID)202>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSpeechRecognitionAlternative_transcript(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsSpeechRecognitionAlternative_confidence(uint64_t a1, uint64_t a2)
{
  double v2;
  float v3;
  double v4;
  uint64_t v5;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 16);
  v3 = v2;
  v4 = v3;
  if (COERCE__INT64(fabs(v3)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v5 = (int)v3, (double)(int)v5 == v4)
    && ((*(_QWORD *)&v2 & 0x8000000000000000) == 0 || (_DWORD)v5))
  {
    return v5 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

uint64_t WebCore::JSSpeechRecognitionAlternativeOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSSpeechRecognitionAlternativeOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  bmalloc::api *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  bmalloc::api *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v24;

  v3 = *(bmalloc::api **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(bmalloc::api **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(bmalloc::api **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, a2);
      else
        *(_DWORD *)v24 -= 2;
    }
    bmalloc::api::isoDeallocate(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::SpeechRecognitionAlternative>(uint64_t a1, WTF *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a2;
  v14 = *(_QWORD *)(a1 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSSpeechRecognitionAlternative::s_info
         + ~((_QWORD)&WebCore::JSSpeechRecognitionAlternative::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionAlternative::s_info
                                                                                + ~((_QWORD)&WebCore::JSSpeechRecognitionAlternative::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSSpeechRecognitionAlternative::s_info)
    {
LABEL_14:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_16;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSSpeechRecognitionAlternative::s_info)
          goto LABEL_14;
      }
    }
  }
  v23 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSSpeechRecognitionAlternativePrototype::createStructure(v23, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSSpeechRecognitionAlternativePrototype::create((WebCore::JSSpeechRecognitionAlternativePrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSSpeechRecognitionAlternative::createStructure(v23, a1, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)a1, v28, (uint64_t)&WebCore::JSSpeechRecognitionAlternative::s_info);
LABEL_16:
  v29 = *(_QWORD *)(a1 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 1640);
  if (v32)
    goto LABEL_36;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_21:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 1640))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 1640);
    *(_QWORD *)(v35 + 1640) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 1640);
  *(_QWORD *)(v31 + 1640) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_36:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336A00 & 1) == 0)
  {
    qword_1EE3369F8 = (uint64_t)&off_1E3307CF0;
    byte_1EE336A00 = 1;
  }
  v53 = a2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3369F8;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSSpeechRecognitionErrorEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  JSC::JSCell *v6;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  JSC::VM *v11;
  double v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  _BOOL4 v17;
  JSC::VM *v18;
  double v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  _BOOL4 v23;
  JSC::VM *v24;
  double v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  JSCell *v29;
  uint64_t v30;
  JSC::VM *v31;
  uint64_t v32;
  const char *v33;
  int v34;
  unint64_t v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  char **v41;
  int v42;
  uint16x8_t v43;
  char v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WebCore::JSDOMGlobalObject *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  JSC::VM *v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char **v67;
  int v68;
  unint64_t v69;
  WebCore::JSEvent *v70;
  JSC::JSCell *v71;
  unint64_t v72;
  JSC::Structure *v73;
  JSC::JSCell *v74;
  uint64_t v75;
  JSC::JSCell *v76;
  JSC::JSGlobalObject *v77;
  JSC::JSObject *v78;
  JSC::JSGlobalObject *v79;
  JSC::VM *v80;
  JSC::JSObject *v81;
  JSC::Structure *v82;
  JSC::VM *FunctionRealm;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char **v90;
  int v91;
  JSC::JSCell *v92;
  unint64_t Structure;
  JSC::Structure *v94;
  JSC::JSCell *v95;
  uint64_t v96;
  unint64_t SubclassStructure;
  JSC::Structure *v98;
  JSValue v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint16x8_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  uint16x8_t v107;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v109;
  BOOL v110;
  int v111;
  uint64_t v112;
  int *v113;
  int v114;
  BOOL v115;
  int v116;
  uint64_t v117;
  int *v118;
  int v119;
  BOOL v120;
  int v121;
  uint64_t v122;
  int *v123;
  int v124;
  uint16x8_t v126;
  uint16x8_t v127;
  uint16x8_t v128;
  uint16x8_t v129;
  uint16x8_t v130;
  char v131;
  _BOOL4 v132;
  JSC::VM *v133;
  WTF::StringImpl *v134[2];
  int v135;
  WTF::StringImpl *v136;
  int v137;
  JSC::VM *v138[2];
  JSC::Structure *v139;

  v133 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v100.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v133, a1, v100);
  }
  v4 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v136);
  v5 = v137;
  if (v137)
  {
    v29 = 0;
    goto LABEL_188;
  }
  v6 = *(JSC::JSCell **)(a2 + 56);
  v138[0] = *((JSC::VM **)a1 + 7);
  if (((unint64_t)v6 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_44:
    WebCore::throwRequiredMemberTypeError((int)a1, (int)v138, "error", 6, "SpeechRecognitionErrorEventInit", 32, "SpeechRecognitionErrorCode", 27);
LABEL_45:
    v29 = 0;
    v30 = 1;
    v135 = 1;
    goto LABEL_187;
  }
  if (((unint64_t)v6 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v6)) == 0)
  {
LABEL_97:
    JSC::throwTypeError();
    goto LABEL_45;
  }
  v8 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(v8, a1, (unint64_t)v134[0]);
  if (v134[0])
  {
    if (*(_DWORD *)v134[0] == 2)
      WTF::StringImpl::destroy(v134[0], v9);
    else
      *(_DWORD *)v134[0] -= 2;
  }
  if (*((_DWORD *)v138[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v138[0]) & 1) != 0)
    goto LABEL_45;
  if (v10 != 10)
  {
    v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v10 >= 0xFFFE000000000000)
      goto LABEL_250;
    *(_QWORD *)&v12 = v10 - 0x2000000000000;
    if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v13 = v12 > 0.0 || v12 < 0.0;
      goto LABEL_16;
    }
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      v13 = v10 == 7;
      goto LABEL_16;
    }
    v111 = *(unsigned __int8 *)(v10 + 5);
    if (v111 == 3)
    {
      v114 = *(_DWORD *)(v10 + 8);
    }
    else
    {
      if (v111 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xA) & 1) != 0)
        {
          v110 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_280;
        }
        v13 = 1;
        goto LABEL_16;
      }
      v112 = *(_QWORD *)(v10 + 8);
      if ((v112 & 1) != 0)
        v113 = (int *)(v10 + 16);
      else
        v113 = (int *)(v112 + 4);
      v114 = *v113;
    }
    v110 = v114 == 0;
    goto LABEL_280;
  }
  v132 = 0;
  while (1)
  {
    WTF::AtomStringImpl::addLiteral();
    v14 = v134[0];
    v16 = JSC::JSObject::get(v8, a1, (unint64_t)v134[0]);
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v15);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (*((_DWORD *)v138[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v138[0]) & 1) != 0)
      goto LABEL_45;
    if (v16 == 10)
    {
      v17 = 0;
      goto LABEL_28;
    }
    v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v16 >= 0xFFFE000000000000)
    {
      v115 = (_DWORD)v16 == 0;
      goto LABEL_287;
    }
    *(_QWORD *)&v19 = v16 - 0x2000000000000;
    if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v16 & 0xFFFE000000000002) != 0)
      {
        v17 = v16 == 7;
        goto LABEL_27;
      }
      v116 = *(unsigned __int8 *)(v16 + 5);
      if (v116 == 3)
      {
        v119 = *(_DWORD *)(v16 + 8);
      }
      else
      {
        if (v116 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_291:
            v17 = 1;
            goto LABEL_27;
          }
          v115 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_287;
        }
        v117 = *(_QWORD *)(v16 + 8);
        if ((v117 & 1) != 0)
          v118 = (int *)(v16 + 16);
        else
          v118 = (int *)(v117 + 4);
        v119 = *v118;
      }
      v115 = v119 == 0;
LABEL_287:
      v17 = !v115;
      goto LABEL_27;
    }
    if (v19 > 0.0)
      goto LABEL_291;
    v17 = v19 < 0.0;
LABEL_27:
    if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
      goto LABEL_45;
LABEL_28:
    WTF::AtomStringImpl::addLiteral();
    v20 = v134[0];
    v22 = JSC::JSObject::get(v8, a1, (unint64_t)v134[0]);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (*((_DWORD *)v138[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v138[0]) & 1) != 0)
      goto LABEL_45;
    if (v22 == 10)
    {
      v23 = 0;
      goto LABEL_39;
    }
    v24 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v22 >= 0xFFFE000000000000)
    {
      v120 = (_DWORD)v22 == 0;
      goto LABEL_294;
    }
    *(_QWORD *)&v25 = v22 - 0x2000000000000;
    if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v22 & 0xFFFE000000000002) != 0)
      {
        v23 = v22 == 7;
        goto LABEL_38;
      }
      v121 = *(unsigned __int8 *)(v22 + 5);
      if (v121 == 3)
      {
        v124 = *(_DWORD *)(v22 + 8);
      }
      else
      {
        if (v121 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_298:
            v23 = 1;
            goto LABEL_38;
          }
          v120 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_294;
        }
        v122 = *(_QWORD *)(v22 + 8);
        if ((v122 & 1) != 0)
          v123 = (int *)(v22 + 16);
        else
          v123 = (int *)(v122 + 4);
        v124 = *v123;
      }
      v120 = v124 == 0;
LABEL_294:
      v23 = !v120;
      goto LABEL_38;
    }
    if (v25 > 0.0)
      goto LABEL_298;
    v23 = v25 < 0.0;
LABEL_38:
    if (*((_DWORD *)v24 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) != 0)
      goto LABEL_45;
LABEL_39:
    WTF::AtomStringImpl::addLiteral();
    v26 = v134[0];
    v28 = JSC::JSObject::get(v8, a1, (unint64_t)v134[0]);
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v27);
      else
        *(_DWORD *)v26 -= 2;
    }
    if (*((_DWORD *)v138[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v138[0]) & 1) != 0)
      goto LABEL_45;
    if (v28 == 10)
      goto LABEL_44;
    v31 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v138[1] = v31;
    v134[0] = (WTF::StringImpl *)v28;
    if ((v28 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v28 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v134, a1);
      v32 = (uint64_t)v139;
      if (!v139)
        goto LABEL_93;
LABEL_52:
      v33 = *(const char **)(v32 + 8);
      v34 = *(_DWORD *)(v32 + 4);
      v35 = ((unint64_t)*(unsigned int *)(v32 + 16) >> 2) & 1;
      v36 = v34 != 7;
      if (v33 != "aborted" && v34 == 7)
      {
        if ((_DWORD)v35)
        {
          if (*v33 != 97 || *(_DWORD *)(v33 + 1) != 1953656674 || *(_DWORD *)(v33 + 3) != 1684370546)
            goto LABEL_58;
        }
        else
        {
          if (*(_WORD *)v33 != 97)
          {
LABEL_58:
            v36 = 0;
            v37 = 0;
            v38 = 1;
            v39 = 7;
LABEL_59:
            v40 = v35 << 32;
            if (v33 == "network" || v36)
            {
              if (v33 == "network" && v34 == 7)
                goto LABEL_89;
            }
            else
            {
              if (!v39)
                goto LABEL_89;
              if ((_DWORD)v35)
              {
                if (*v33 != 110 || *(_DWORD *)(v33 + 1) != 1870099557 || *(_DWORD *)(v33 + 3) != 1802661751)
                  goto LABEL_66;
LABEL_89:
                v41 = &off_1E33043F0;
                goto LABEL_127;
              }
              if (*(_WORD *)v33 != 110)
              {
                v40 = 0;
                goto LABEL_66;
              }
              v40 = 0;
              if (*(_QWORD *)(v33 + 2) == 0x6F007700740065 && *(_QWORD *)(v33 + 6) == 0x6B0072006F0077)
                goto LABEL_89;
            }
LABEL_66:
            if (v33 == "no-speech" || v39 != 9)
            {
              if (v33 == "no-speech" && v39 == 9)
                goto LABEL_72;
            }
            else
            {
              if (v40)
              {
                if (*v33 == 110 && *(_DWORD *)(v33 + 1) == 1886596463 && *(_DWORD *)(v33 + 5) == 1751344485)
                {
LABEL_72:
                  v41 = &off_1E3304408;
LABEL_127:
                  v131 = *((_BYTE *)v41 + 16);
                  v42 = 1;
                  goto LABEL_128;
                }
              }
              else
              {
                if (*(_WORD *)v33 == 110)
                {
                  v43 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 2), (int16x8_t)xmmword_1968C0FD0);
                  v43.i16[0] = vminvq_u16(v43);
                  if (v43.i32[0])
                    goto LABEL_72;
                }
                v40 = 0;
              }
              v39 = 9;
            }
            v44 = v33 == "not-allowed" || v38;
            if ((v44 & 1) != 0)
            {
              if (v33 != "not-allowed")
                v37 = 0;
              if (v37)
                goto LABEL_119;
            }
            else
            {
              if (!v39)
              {
LABEL_119:
                v41 = &off_1E3304420;
                goto LABEL_127;
              }
              if (v40)
              {
                if (*v33 == 110
                  && *(_QWORD *)(v33 + 1) == 0x776F6C6C612D746FLL
                  && *(_QWORD *)(v33 + 3) == 0x6465776F6C6C612DLL)
                {
                  goto LABEL_119;
                }
                v40 = 1;
              }
              else
              {
                if (*(_WORD *)v33 == 110)
                {
                  v101 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 2), (int16x8_t)xmmword_1968C02D0);
                  v101.i16[0] = vminvq_u16(v101);
                  if (v101.i32[0])
                  {
                    v102 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 6), (int16x8_t)xmmword_1968C02E0);
                    v102.i16[0] = vminvq_u16(v102);
                    if (v102.i32[0])
                      goto LABEL_119;
                  }
                }
                v40 = 0;
              }
            }
            if (v33 == "service-not-allowed" || v39 != 19)
            {
              if (v39 == 19 && v33 == "service-not-allowed")
                goto LABEL_126;
            }
            else if (v40)
            {
              if (*v33 == 115
                && vminvq_u8((uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v33 + 3), (int8x16_t)xmmword_1968C0FF0), vceqq_s8(*(int8x16_t *)(v33 + 1), (int8x16_t)xmmword_1968C0FE0))))
              {
LABEL_126:
                v41 = &off_1E3304438;
                goto LABEL_127;
              }
            }
            else if (*(_WORD *)v33 == 115)
            {
              v105 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 2), (int16x8_t)xmmword_1968C1000);
              v105.i16[0] = vminvq_u16(v105);
              if (v105.i32[0])
              {
                v106 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 6), (int16x8_t)xmmword_1968C1010);
                v106.i16[0] = vminvq_u16(v106);
                if (v106.i32[0])
                {
                  v107 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 22), (int16x8_t)xmmword_1968C02E0);
                  v107.i16[0] = vminvq_u16(v107);
                  if (v107.i32[0])
                    goto LABEL_126;
                }
              }
            }
            v131 = 0;
            v42 = 0;
LABEL_128:
            v139 = 0;
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v32, v27);
            else
              *(_DWORD *)v32 -= 2;
            goto LABEL_130;
          }
          v36 = 0;
          v38 = 1;
          v39 = 7;
          if (*(_QWORD *)(v33 + 2) != 0x740072006F0062)
          {
            v37 = 0;
            goto LABEL_59;
          }
          v37 = 0;
          if (*(_QWORD *)(v33 + 6) != 0x64006500740072)
            goto LABEL_59;
        }
LABEL_75:
        v41 = &WebCore::parseEnumerationFromString<WebCore::SpeechRecognitionErrorType>(WTF::String const&)::mappings;
        goto LABEL_127;
      }
      if (v33 == "aborted" && v34 == 7)
        goto LABEL_75;
      if (v33 != "audio-capture" && v34 == 13)
      {
        if ((_DWORD)v35)
        {
          if (*v33 == 97
            && *(_QWORD *)(v33 + 1) == 0x7061632D6F696475
            && *(_QWORD *)(v33 + 5) == 0x657275747061632DLL)
          {
LABEL_86:
            v41 = &off_1E33043A8;
            goto LABEL_127;
          }
        }
        else if (*(_WORD *)v33 == 97)
        {
          v103 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 2), (int16x8_t)xmmword_1968C0F50);
          v103.i16[0] = vminvq_u16(v103);
          v37 = v103.i8[0];
          if (v103.i32[0])
          {
            v104 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 10), (int16x8_t)xmmword_1968C0550);
            v104.i16[0] = vminvq_u16(v104);
            v37 = v104.i8[0];
            if (v104.i32[0])
              goto LABEL_86;
          }
LABEL_211:
          v38 = 1;
          v39 = 13;
          goto LABEL_59;
        }
        v37 = 0;
        goto LABEL_211;
      }
      if (v33 == "audio-capture" && v34 == 13)
        goto LABEL_86;
      v37 = v34 == 11;
      v38 = v34 != 11;
      if (v33 != "bad-grammar" && v34 == 11)
      {
        if ((_DWORD)v35)
        {
          if (*v33 == 98
            && *(_QWORD *)(v33 + 1) == 0x6D6D6172672D6461
            && *(_QWORD *)(v33 + 3) == 0x72616D6D6172672DLL)
          {
LABEL_310:
            v41 = &off_1E33043C0;
            goto LABEL_127;
          }
        }
        else if (*(_WORD *)v33 == 98)
        {
          v126 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 2), (int16x8_t)xmmword_1968C0F60);
          v126.i16[0] = vminvq_u16(v126);
          v38 = v126.i8[0];
          if (v126.i32[0])
          {
            v127 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 6), (int16x8_t)xmmword_1968C0F70);
            v127.i16[0] = vminvq_u16(v127);
            v38 = v127.i8[0];
            if (v127.i32[0])
              goto LABEL_310;
          }
LABEL_325:
          v39 = 11;
          goto LABEL_59;
        }
        v38 = 0;
        goto LABEL_325;
      }
      if (v33 == "bad-grammar" && v34 == 11)
        goto LABEL_310;
      if (v33 == "language-not-supported" || v34 != 22)
      {
        if (v33 != "language-not-supported")
        {
          v39 = *(_DWORD *)(v32 + 4);
          goto LABEL_59;
        }
        v39 = *(_DWORD *)(v32 + 4);
        if (v34 != 22)
          goto LABEL_59;
LABEL_341:
        v41 = &off_1E33043D8;
        goto LABEL_127;
      }
      if ((_DWORD)v35)
      {
        if (*v33 != 108)
          goto LABEL_343;
        v128 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v33 + 6), (int8x16_t)xmmword_1968C0F90), vceqq_s8(*(int8x16_t *)(v33 + 1), (int8x16_t)xmmword_1968C0F80));
        v128.i8[0] = vminvq_u8((uint8x16_t)v128);
      }
      else
      {
        if (*(_WORD *)v33 != 108)
          goto LABEL_343;
        v129 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 2), (int16x8_t)xmmword_1968C0FA0);
        v129.i16[0] = vminvq_u16(v129);
        if (!v129.i32[0])
          goto LABEL_343;
        v130 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 12), (int16x8_t)xmmword_1968C0FB0);
        v130.i16[0] = vminvq_u16(v130);
        if (!v130.i32[0])
          goto LABEL_343;
        v128 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 28), (int16x8_t)xmmword_1968C0FC0);
        v128.i16[0] = vminvq_u16(v128);
      }
      if (v128.i32[0])
        goto LABEL_341;
LABEL_343:
      v39 = 22;
      goto LABEL_59;
    }
    v32 = *(_QWORD *)(v28 + 8);
    if ((v32 & 1) == 0)
    {
      if (!v32)
        goto LABEL_51;
LABEL_50:
      *(_DWORD *)v32 += 2;
      goto LABEL_51;
    }
    v32 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v28, a1);
    if (v32)
      goto LABEL_50;
LABEL_51:
    v139 = (JSC::Structure *)v32;
    if (v32)
      goto LABEL_52;
LABEL_93:
    v131 = 0;
    v42 = 0;
LABEL_130:
    if (*((_DWORD *)v31 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v31) & 1) != 0)
      goto LABEL_45;
    if (!v42)
      goto LABEL_97;
    WTF::AtomStringImpl::addLiteral();
    v10 = (unint64_t)v134[0];
    v46 = JSC::JSObject::get(v8, a1, (unint64_t)v134[0]);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v10, v45);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (*((_DWORD *)v138[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v138[0]) & 1) != 0)
      goto LABEL_45;
    if (v46 == 10)
    {
      v47 = v17;
      v48 = v4;
      v8 = (JSC::Structure *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v8 += 2;
      goto LABEL_147;
    }
    v134[0] = (WTF::StringImpl *)v46;
    v10 = *((_QWORD *)a1 + 7);
    if ((v46 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v46 + 5) == 2)
    {
      v49 = *(_QWORD *)(v46 + 8);
      if ((v49 & 1) != 0)
      {
        v49 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v46, a1);
        if (!v49)
          goto LABEL_144;
      }
      else if (!v49)
      {
LABEL_144:
        v139 = (JSC::Structure *)v49;
        goto LABEL_145;
      }
      *(_DWORD *)v49 += 2;
      goto LABEL_144;
    }
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v134, a1);
LABEL_145:
    v47 = v17;
    if (!*(_DWORD *)(v10 + 80))
    {
      v48 = v4;
      v8 = v139;
      goto LABEL_147;
    }
    v48 = v4;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10);
    v8 = v139;
    if (hasExceptionsAfterHandlingTraps)
      break;
LABEL_147:
    v4 = v132;
    LOBYTE(v134[0]) = v132;
    BYTE1(v134[0]) = v47;
    BYTE2(v134[0]) = v23;
    BYTE3(v134[0]) = v131;
    v135 = 0;
    if (!v137)
    {
      v50 = v47;
      v51 = v136;
      v136 = 0;
      v134[1] = 0;
      v52 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v52);
      *(_QWORD *)(v52 + 8) = 0;
      if (v50)
        v56 = 4;
      else
        v56 = 0;
      if (v23)
        v57 = 8;
      else
        v57 = 0;
      if (v132)
        v58 = 2916354;
      else
        v58 = 2916352;
      v59 = v58 | v56 | v57 | (v51 != 0) | *(_DWORD *)(v52 + 20) & 0xFFC00000;
      *(_DWORD *)(v52 + 16) = 1;
      *(_DWORD *)(v52 + 20) = v59;
      if (v51)
      {
        *(_DWORD *)v51 += 2;
        v59 = *(_DWORD *)(v52 + 20);
      }
      *(_QWORD *)(v52 + 24) = v51;
      *(_QWORD *)(v52 + 32) = 0;
      *(_QWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = v55;
      *(_QWORD *)(v52 + 64) = 0;
      *(_DWORD *)(v52 + 20) = v59 | 0x4000;
      *(_QWORD *)v52 = off_1E3366A90;
      *(_BYTE *)(v52 + 72) = v131;
      *(_QWORD *)(v52 + 80) = v8;
      v139 = (JSC::Structure *)v52;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
        {
          WTF::StringImpl::destroy(v51, v53);
          if (*(void (***)(WebCore::SpeechRecognitionErrorEvent *__hidden))v52 != off_1E3366A90)
          {
            __break(0xC471u);
            JUMPOUT(0x194F948B0);
          }
        }
        else
        {
          *(_DWORD *)v51 -= 2;
        }
      }
      v60 = *(JSC::VM **)(v48 + 40);
      v61 = *((_QWORD *)v60 + 412);
      if (v61)
      {
        v62 = *(_DWORD *)(v61 - 8);
        v63 = ((unint64_t)&WebCore::JSSpeechRecognitionErrorEvent::s_info
             + ~((_QWORD)&WebCore::JSSpeechRecognitionErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionErrorEvent::s_info
                                                                                   + ~((_QWORD)&WebCore::JSSpeechRecognitionErrorEvent::s_info << 32)) >> 22);
        v64 = 9 * ((v63 + ~(v63 << 13)) ^ ((v63 + ~(v63 << 13)) >> 8));
        v65 = (v64 ^ (v64 >> 15)) + ~((v64 ^ (v64 >> 15)) << 27);
        v66 = v62 & ((v65 >> 31) ^ v65);
        v67 = *(char ***)(v61 + 16 * v66);
        if (v67 == &WebCore::JSSpeechRecognitionErrorEvent::s_info)
        {
LABEL_167:
          v69 = *(_QWORD *)(v61 + 16 * v66 + 8);
          if (v69)
          {
LABEL_169:
            v29 = (JSCell *)WebCore::JSSpeechRecognitionErrorEvent::create(v69, v60, (uint64_t *)&v139);
            WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v60 + 415), v52, (uint64_t)v29);
            v76 = *(JSC::JSCell **)(a2 + 40);
            if (((unint64_t)v76 & 0xFFFE000000000002) != 0
              || (v77 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v76)) == 0
              || (v79 = v77, v77 == *(JSC::JSGlobalObject **)(a2 + 24))
              || (v80 = (JSC::VM *)*((_QWORD *)a1 + 7),
                  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v77, v78),
                  *((_DWORD *)v80 + 20))
              && (JSC::VM::hasExceptionsAfterHandlingTraps(v80) & 1) != 0)
            {
LABEL_182:
              if (*((_DWORD *)v133 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v133) & 1) != 0)
                v29 = 0;
              v98 = v139;
              v139 = 0;
              if (v98)
              {
                if (*((_DWORD *)v98 + 4) == 1)
                  (*(void (**)(JSC::Structure *))(*(_QWORD *)v98 + 8))(v98);
                else
                  --*((_DWORD *)v98 + 4);
              }
              v30 = 0;
              goto LABEL_187;
            }
            v84 = *((_QWORD *)FunctionRealm + 412);
            if (v84)
            {
              v85 = *(_DWORD *)(v84 - 8);
              v86 = ((unint64_t)&WebCore::JSSpeechRecognitionErrorEvent::s_info
                   + ~((_QWORD)&WebCore::JSSpeechRecognitionErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionErrorEvent::s_info
                                                                                         + ~((_QWORD)&WebCore::JSSpeechRecognitionErrorEvent::s_info << 32)) >> 22);
              v87 = 9 * ((v86 + ~(v86 << 13)) ^ ((v86 + ~(v86 << 13)) >> 8));
              v88 = (v87 ^ (v87 >> 15)) + ~((v87 ^ (v87 >> 15)) << 27);
              v89 = v85 & ((v88 >> 31) ^ v88);
              v90 = *(char ***)(v84 + 16 * v89);
              if (v90 == &WebCore::JSSpeechRecognitionErrorEvent::s_info)
              {
LABEL_178:
                v81 = *(JSC::JSObject **)(v84 + 16 * v89 + 8);
                if (v81)
                {
LABEL_180:
                  SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v79, v81, v82);
                  if (!*((_DWORD *)v80 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v80) & 1) == 0)
                    JSC::JSObject::setStructure(v29, v80, SubclassStructure);
                  goto LABEL_182;
                }
              }
              else
              {
                v91 = 1;
                while (v90)
                {
                  v89 = ((_DWORD)v89 + v91) & v85;
                  v90 = *(char ***)(v84 + 16 * v89);
                  ++v91;
                  if (v90 == &WebCore::JSSpeechRecognitionErrorEvent::s_info)
                    goto LABEL_178;
                }
              }
            }
            v92 = (JSC::JSCell *)WebCore::JSEvent::prototype(v80, FunctionRealm, v81);
            Structure = WebCore::JSSpeechRecognitionErrorEventPrototype::createStructure((uint64_t *)v80, (uint64_t)FunctionRealm, v92);
            *(_DWORD *)(Structure + 16) |= 0x80000u;
            v95 = (JSC::JSCell *)WebCore::JSSpeechRecognitionErrorEventPrototype::create(v80, FunctionRealm, Structure, v94);
            v96 = WebCore::JSSpeechRecognitionErrorEvent::createStructure((uint64_t *)v80, (uint64_t)FunctionRealm, v95);
            v81 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v96, (uint64_t)&WebCore::JSSpeechRecognitionErrorEvent::s_info);
            goto LABEL_180;
          }
        }
        else
        {
          v68 = 1;
          while (v67)
          {
            v66 = ((_DWORD)v66 + v68) & v62;
            v67 = *(char ***)(v61 + 16 * v66);
            ++v68;
            if (v67 == &WebCore::JSSpeechRecognitionErrorEvent::s_info)
              goto LABEL_167;
          }
        }
      }
      v70 = (WebCore::JSEvent *)*((_QWORD *)v60 + 7);
      v71 = (JSC::JSCell *)WebCore::JSEvent::prototype(v70, *(JSC::VM **)(v48 + 40), v54);
      v72 = WebCore::JSSpeechRecognitionErrorEventPrototype::createStructure((uint64_t *)v70, (uint64_t)v60, v71);
      *(_DWORD *)(v72 + 16) |= 0x80000u;
      v74 = (JSC::JSCell *)WebCore::JSSpeechRecognitionErrorEventPrototype::create(v70, v60, v72, v73);
      v75 = WebCore::JSSpeechRecognitionErrorEvent::createStructure((uint64_t *)v70, (uint64_t)v60, v74);
      v69 = WebCore::cacheDOMStructure((JSCell *)v60, v75, (uint64_t)&WebCore::JSSpeechRecognitionErrorEvent::s_info);
      goto LABEL_169;
    }
    v11 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_250:
    v110 = (_DWORD)v10 == 0;
LABEL_280:
    v13 = !v110;
LABEL_16:
    v132 = v13;
    if (*((_DWORD *)v11 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v11) & 1) != 0)
      goto LABEL_45;
  }
  v139 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v109);
    else
      *(_DWORD *)v8 -= 2;
  }
  v29 = 0;
  v30 = 1;
  v135 = 1;
LABEL_187:
  ((void (*)(JSC::Structure **, WTF::StringImpl **))off_1E330AAD8[v30])(&v139, v134);
  v5 = v137;
LABEL_188:
  if (v5 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E330AAE8[v5])(v134, &v136);
  return v29;
}

uint64_t WebCore::JSSpeechRecognitionErrorEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionErrorEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSpeechRecognitionErrorEventPrototype::create(WebCore::JSSpeechRecognitionErrorEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSpeechRecognitionErrorEvent::s_info, &WebCore::JSSpeechRecognitionErrorEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSpeechRecognitionErrorEvent>,(WebCore::DOMConstructorID)203>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1624);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSSpeechRecognitionErrorEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSpeechRecognitionErrorEvent::s_info
         + ~((_QWORD)&WebCore::JSSpeechRecognitionErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionErrorEvent::s_info
                                                                               + ~((_QWORD)&WebCore::JSSpeechRecognitionErrorEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSpeechRecognitionErrorEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSpeechRecognitionErrorEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSpeechRecognitionErrorEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSpeechRecognitionErrorEventPrototype::create((WebCore::JSSpeechRecognitionErrorEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSpeechRecognitionErrorEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSpeechRecognitionErrorEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1624) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSpeechRecognitionErrorEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSpeechRecognitionErrorEventPrototype::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSpeechRecognitionErrorEvent>,(WebCore::DOMConstructorID)203>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSpeechRecognitionErrorEvent_error(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 72);
  if ((byte_1EE336951 & 1) == 0)
  {
    dword_1ECE7A160 += 2;
    qword_1EE336BB8 = (uint64_t)&dword_1ECE7A160;
    dword_1ECE7A180 += 2;
    qword_1EE336BC0 = (uint64_t)&dword_1ECE7A180;
    dword_1ECE7A1A0 += 2;
    qword_1EE336BC8 = (uint64_t)&dword_1ECE7A1A0;
    dword_1ECE7A1C0 += 2;
    qword_1EE336BD0 = (uint64_t)&dword_1ECE7A1C0;
    dword_1ECE7A1E0 += 2;
    qword_1EE336BD8 = (uint64_t)&dword_1ECE7A1E0;
    dword_1ECE7A200 += 2;
    qword_1EE336BE0 = (uint64_t)&dword_1ECE7A200;
    dword_1ECE7A220 += 2;
    qword_1EE336BE8 = (uint64_t)&dword_1ECE7A220;
    dword_1ECE7A240 += 2;
    qword_1EE336BF0 = (uint64_t)&dword_1ECE7A240;
    byte_1EE336951 = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_774[8 * v4 + 624];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsSpeechRecognitionErrorEvent_message(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSSpeechRecognitionErrorEvent::subspaceForImpl(WebCore::JSSpeechRecognitionErrorEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1648);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1648))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1648);
    *(_QWORD *)(v8 + 1648) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1648);
  *(_QWORD *)(v3 + 1648) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSSpeechRecognitionEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  int v6;
  JSC::JSCell *v7;
  unint64_t v8;
  uint64_t Object;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  JSC::VM *v13;
  double v14;
  _BOOL4 v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  JSC::VM *v18;
  double v19;
  _BOOL4 v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  JSC::VM *v23;
  double v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSCell *v29;
  uint64_t v30;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WebCore::JSDOMGlobalObject *v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  JSC::VM *v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char **v52;
  int v53;
  unint64_t v54;
  WebCore::JSEvent *v55;
  JSC::JSCell *v56;
  unint64_t Structure;
  JSC::Structure *v58;
  JSC::JSCell *v59;
  uint64_t v60;
  JSC::JSCell *v61;
  JSC::JSGlobalObject *v62;
  JSC::JSObject *v63;
  JSC::JSGlobalObject *v64;
  JSC::VM *v65;
  WebCore::JSDOMGlobalObject *v66;
  JSC::Structure *v67;
  JSC::VM *FunctionRealm;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char **v75;
  int v76;
  JSC::JSCell *v77;
  unint64_t v78;
  JSC::Structure *v79;
  JSC::JSCell *v80;
  uint64_t v81;
  unint64_t SubclassStructure;
  JSC::VM *v83;
  JSValue v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  int *v88;
  int v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  int *v93;
  int v94;
  BOOL v95;
  int v96;
  uint64_t v97;
  int *v98;
  int v99;
  uint64_t v100;
  JSC::VM *v101;
  _BOOL4 v102;
  _BOOL4 v103;
  WTF::StringImpl *v104[3];
  int v105;
  WTF::StringImpl *v106;
  int v107;
  uint64_t v108;
  JSC::VM *v109;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v84.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v84);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v106);
  v6 = v107;
  if (!v107)
  {
    v7 = *(JSC::JSCell **)(a2 + 56);
    v109 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_52:
      WebCore::throwRequiredMemberTypeError((int)a1, (int)&v109, "results", 8, "SpeechRecognitionEventInit", 27, "SpeechRecognitionResultList", 28);
      goto LABEL_53;
    }
    v8 = 0xFFFE000000000002;
    if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v7)) == 0)
    {
LABEL_67:
      JSC::throwTypeError();
      goto LABEL_53;
    }
    v10 = Object;
    WTF::AtomStringImpl::addLiteral();
    v12 = JSC::JSObject::get((JSC::Structure *)v10, a1, (unint64_t)v104[0]);
    if (v104[0])
    {
      if (*(_DWORD *)v104[0] == 2)
        WTF::StringImpl::destroy(v104[0], v11);
      else
        *(_DWORD *)v104[0] -= 2;
    }
    if (*((_DWORD *)v109 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v109) & 1) != 0)
    {
LABEL_53:
      v29 = 0;
      v30 = 1;
      v105 = 1;
LABEL_54:
      ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E330AB70[v30])(&v109, v104);
      v6 = v107;
      goto LABEL_55;
    }
    if (v12 != 10)
    {
      v13 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v12 >= 0xFFFE000000000000)
        goto LABEL_143;
      *(_QWORD *)&v14 = v12 - 0x2000000000000;
      if (v12 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v15 = v14 > 0.0 || v14 < 0.0;
        goto LABEL_16;
      }
      if ((v12 & 0xFFFE000000000002) != 0)
      {
        v15 = v12 == 7;
        goto LABEL_16;
      }
      v86 = *(unsigned __int8 *)(v12 + 5);
      if (v86 == 3)
      {
        v89 = *(_DWORD *)(v12 + 8);
      }
      else
      {
        if (v86 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v85 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_187;
          }
          v15 = 1;
          goto LABEL_16;
        }
        v87 = *(_QWORD *)(v12 + 8);
        if ((v87 & 1) != 0)
          v88 = (int *)(v12 + 16);
        else
          v88 = (int *)(v87 + 4);
        v89 = *v88;
      }
      v85 = v89 == 0;
      goto LABEL_187;
    }
    v103 = 0;
    while (1)
    {
      WTF::AtomStringImpl::addLiteral();
      v17 = JSC::JSObject::get((JSC::Structure *)v10, a1, (unint64_t)v104[0]);
      if (v104[0])
      {
        if (*(_DWORD *)v104[0] == 2)
          WTF::StringImpl::destroy(v104[0], v16);
        else
          *(_DWORD *)v104[0] -= 2;
      }
      if (*((_DWORD *)v109 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v109) & 1) != 0)
        goto LABEL_53;
      if (v17 == 10)
      {
        v102 = 0;
        goto LABEL_28;
      }
      v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v17 >= 0xFFFE000000000000)
        break;
      *(_QWORD *)&v19 = v17 - 0x2000000000000;
      if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v17 & v8) != 0)
        {
          v20 = v17 == 7;
          goto LABEL_27;
        }
        v91 = *(unsigned __int8 *)(v17 + 5);
        if (v91 == 3)
        {
          v94 = *(_DWORD *)(v17 + 8);
          goto LABEL_176;
        }
        if (v91 == 2)
        {
          v92 = *(_QWORD *)(v17 + 8);
          if ((v92 & 1) != 0)
            v93 = (int *)(v17 + 16);
          else
            v93 = (int *)(v92 + 4);
          v94 = *v93;
LABEL_176:
          v90 = v94 == 0;
        }
        else
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_178:
            v20 = 1;
            goto LABEL_27;
          }
          v90 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        }
LABEL_191:
        v20 = !v90;
        goto LABEL_27;
      }
      if (v19 > 0.0)
        goto LABEL_178;
      v20 = v19 < 0.0;
LABEL_27:
      v102 = v20;
      if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
        goto LABEL_53;
LABEL_28:
      WTF::AtomStringImpl::addLiteral();
      v22 = JSC::JSObject::get((JSC::Structure *)v10, a1, (unint64_t)v104[0]);
      if (v104[0])
      {
        if (*(_DWORD *)v104[0] == 2)
          WTF::StringImpl::destroy(v104[0], v21);
        else
          *(_DWORD *)v104[0] -= 2;
      }
      if (*((_DWORD *)v109 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v109) & 1) != 0)
        goto LABEL_53;
      if (v22 == 10)
      {
        v8 = 0;
        goto LABEL_39;
      }
      v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v22 >= 0xFFFE000000000000)
      {
        v95 = (_DWORD)v22 == 0;
        goto LABEL_181;
      }
      *(_QWORD *)&v24 = v22 - 0x2000000000000;
      if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v22 & v8) != 0)
        {
          v8 = v22 == 7;
          goto LABEL_38;
        }
        v96 = *(unsigned __int8 *)(v22 + 5);
        if (v96 == 3)
        {
          v99 = *(_DWORD *)(v22 + 8);
        }
        else
        {
          if (v96 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_185:
              v8 = 1;
              goto LABEL_38;
            }
            v95 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_181;
          }
          v97 = *(_QWORD *)(v22 + 8);
          if ((v97 & 1) != 0)
            v98 = (int *)(v22 + 16);
          else
            v98 = (int *)(v97 + 4);
          v99 = *v98;
        }
        v95 = v99 == 0;
LABEL_181:
        v8 = !v95;
        goto LABEL_38;
      }
      if (v24 > 0.0)
        goto LABEL_185;
      v8 = v24 < 0.0;
LABEL_38:
      if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
        goto LABEL_53;
LABEL_39:
      WTF::AtomStringImpl::addLiteral();
      v26 = JSC::JSObject::get((JSC::Structure *)v10, a1, (unint64_t)v104[0]);
      if (v104[0])
      {
        if (*(_DWORD *)v104[0] == 2)
          WTF::StringImpl::destroy(v104[0], v25);
        else
          *(_DWORD *)v104[0] -= 2;
      }
      if (*((_DWORD *)v109 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v109) & 1) != 0)
        goto LABEL_53;
      if (v26 == 10)
      {
        v27 = 0;
        v108 = 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v26, &v108);
        if (HIDWORD(v108))
          goto LABEL_53;
        v27 = (WTF::StringImpl *)v108;
      }
      WTF::AtomStringImpl::addLiteral();
      LODWORD(v12) = v104[0];
      v10 = JSC::JSObject::get((JSC::Structure *)v10, a1, (unint64_t)v104[0]);
      if (v104[0])
      {
        if (*(_DWORD *)v104[0] == 2)
          WTF::StringImpl::destroy(v104[0], v28);
        else
          *(_DWORD *)v104[0] -= 2;
      }
      if (*((_DWORD *)v109 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v109) & 1) != 0)
        goto LABEL_53;
      if (v10 == 10)
        goto LABEL_52;
      v100 = v5;
      v101 = v3;
      v104[0] = *((WTF::StringImpl **)a1 + 7);
      if ((v10 & 0xFFFE000000000002) != 0)
        goto LABEL_67;
      v32 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
      v33 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v32)
      {
        v34 = 16 * v32;
        if ((char **)v34 != &WebCore::JSSpeechRecognitionResultList::s_info)
        {
          do
          {
            v34 = *(_QWORD *)(v34 + 16);
            v33 = v34 != 0;
          }
          while ((char **)v34 != &WebCore::JSSpeechRecognitionResultList::s_info && v34 != 0);
        }
      }
      if (!v33)
        goto LABEL_67;
      v3 = *(JSC::VM **)(v10 + 24);
      if (!v3)
        goto LABEL_67;
      ++*(_DWORD *)v3;
      v5 = v103;
      LOBYTE(v104[0]) = v103;
      BYTE1(v104[0]) = v102;
      BYTE2(v104[0]) = v8;
      v104[1] = v27;
      v105 = 0;
      if (!v107)
      {
        v36 = v106;
        v106 = 0;
        v104[2] = 0;
        v37 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v37);
        *(_QWORD *)(v37 + 8) = 0;
        if (v102)
          v41 = 4;
        else
          v41 = 0;
        if ((_DWORD)v8)
          v42 = 8;
        else
          v42 = 0;
        if (v103)
          v43 = 2949122;
        else
          v43 = 2949120;
        v44 = v43 | v41 | v42 | (v36 != 0) | *(_DWORD *)(v37 + 20) & 0xFFC00000;
        *(_DWORD *)(v37 + 16) = 1;
        *(_DWORD *)(v37 + 20) = v44;
        if (v36)
        {
          *(_DWORD *)v36 += 2;
          v44 = *(_DWORD *)(v37 + 20);
        }
        *(_QWORD *)(v37 + 24) = v36;
        *(_QWORD *)(v37 + 32) = 0;
        *(_QWORD *)(v37 + 40) = 0;
        *(_QWORD *)(v37 + 48) = 0;
        *(_QWORD *)(v37 + 56) = v40;
        *(_DWORD *)(v37 + 20) = v44 | 0x4000;
        *(_QWORD *)v37 = off_1E3366B58;
        *(_QWORD *)(v37 + 64) = 0;
        *(_QWORD *)(v37 + 72) = v27;
        *(_QWORD *)(v37 + 80) = v3;
        v109 = (JSC::VM *)v37;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::destroy(v36, v38);
            if (*(void (***)(WebCore::SpeechRecognitionEvent *__hidden))v37 != off_1E3366B58)
            {
              __break(0xC471u);
              JUMPOUT(0x194F9638CLL);
            }
          }
          else
          {
            *(_DWORD *)v36 -= 2;
          }
        }
        v45 = *(JSC::VM **)(v100 + 40);
        v46 = *((_QWORD *)v45 + 412);
        if (!v46)
          goto LABEL_90;
        v47 = *(_DWORD *)(v46 - 8);
        v48 = ((unint64_t)&WebCore::JSSpeechRecognitionEvent::s_info
             + ~((_QWORD)&WebCore::JSSpeechRecognitionEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionEvent::s_info
                                                                              + ~((_QWORD)&WebCore::JSSpeechRecognitionEvent::s_info << 32)) >> 22);
        v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
        v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
        v51 = v47 & ((v50 >> 31) ^ v50);
        v52 = *(char ***)(v46 + 16 * v51);
        if (v52 == &WebCore::JSSpeechRecognitionEvent::s_info)
        {
LABEL_89:
          v54 = *(_QWORD *)(v46 + 16 * v51 + 8);
          if (!v54)
            goto LABEL_90;
        }
        else
        {
          v53 = 1;
          while (v52)
          {
            v51 = ((_DWORD)v51 + v53) & v47;
            v52 = *(char ***)(v46 + 16 * v51);
            ++v53;
            if (v52 == &WebCore::JSSpeechRecognitionEvent::s_info)
              goto LABEL_89;
          }
LABEL_90:
          v55 = (WebCore::JSEvent *)*((_QWORD *)v45 + 7);
          v56 = (JSC::JSCell *)WebCore::JSEvent::prototype(v55, *(JSC::VM **)(v100 + 40), v39);
          Structure = WebCore::JSSpeechRecognitionEventPrototype::createStructure((uint64_t *)v55, (uint64_t)v45, v56);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v59 = (JSC::JSCell *)WebCore::JSSpeechRecognitionEventPrototype::create(v55, v45, Structure, v58);
          v60 = WebCore::JSSpeechRecognitionEvent::createStructure((uint64_t *)v55, (uint64_t)v45, v59);
          v54 = WebCore::cacheDOMStructure((JSCell *)v45, v60, (uint64_t)&WebCore::JSSpeechRecognitionEvent::s_info);
        }
        v29 = (JSCell *)WebCore::JSSpeechRecognitionEvent::create(v54, v45, (uint64_t *)&v109);
        WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v45 + 415), v37, (uint64_t)v29);
        v61 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v61 & 0xFFFE000000000002) != 0
          || (v62 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v61)) == 0
          || (v64 = v62, v62 == *(JSC::JSGlobalObject **)(a2 + 24))
          || (v65 = (JSC::VM *)*((_QWORD *)a1 + 7),
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v62, v63),
              *((_DWORD *)v65 + 20))
          && (JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) != 0)
        {
LABEL_104:
          if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
            v29 = 0;
          v83 = v109;
          v109 = 0;
          if (v83)
          {
            if (*((_DWORD *)v83 + 4) == 1)
              (*(void (**)(JSC::VM *))(*(_QWORD *)v83 + 8))(v83);
            else
              --*((_DWORD *)v83 + 4);
          }
          v30 = 0;
          goto LABEL_54;
        }
        v69 = *((_QWORD *)FunctionRealm + 412);
        if (v69)
        {
          v70 = *(_DWORD *)(v69 - 8);
          v71 = ((unint64_t)&WebCore::JSSpeechRecognitionEvent::s_info
               + ~((_QWORD)&WebCore::JSSpeechRecognitionEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionEvent::s_info
                                                                                + ~((_QWORD)&WebCore::JSSpeechRecognitionEvent::s_info << 32)) >> 22);
          v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
          v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
          v74 = v70 & ((v73 >> 31) ^ v73);
          v75 = *(char ***)(v69 + 16 * v74);
          if (v75 != &WebCore::JSSpeechRecognitionEvent::s_info)
          {
            v76 = 1;
            while (v75)
            {
              v74 = ((_DWORD)v74 + v76) & v70;
              v75 = *(char ***)(v69 + 16 * v74);
              ++v76;
              if (v75 == &WebCore::JSSpeechRecognitionEvent::s_info)
                goto LABEL_100;
            }
            goto LABEL_101;
          }
LABEL_100:
          v66 = *(WebCore::JSDOMGlobalObject **)(v69 + 16 * v74 + 8);
          if (!v66)
            goto LABEL_101;
        }
        else
        {
LABEL_101:
          v77 = (JSC::JSCell *)WebCore::JSEvent::prototype(v65, FunctionRealm, v66);
          v78 = WebCore::JSSpeechRecognitionEventPrototype::createStructure((uint64_t *)v65, (uint64_t)FunctionRealm, v77);
          *(_DWORD *)(v78 + 16) |= 0x80000u;
          v80 = (JSC::JSCell *)WebCore::JSSpeechRecognitionEventPrototype::create(v65, FunctionRealm, v78, v79);
          v81 = WebCore::JSSpeechRecognitionEvent::createStructure((uint64_t *)v65, (uint64_t)FunctionRealm, v80);
          v66 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v81, (uint64_t)&WebCore::JSSpeechRecognitionEvent::s_info);
        }
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v64, v66, v67);
        if (!*((_DWORD *)v65 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) == 0)
          JSC::JSObject::setStructure(v29, v65, SubclassStructure);
        goto LABEL_104;
      }
      v13 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_143:
      v85 = (_DWORD)v12 == 0;
LABEL_187:
      v15 = !v85;
LABEL_16:
      v103 = v15;
      if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
        goto LABEL_53;
    }
    v90 = (_DWORD)v17 == 0;
    goto LABEL_191;
  }
  v29 = 0;
LABEL_55:
  if (v6 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E330AAE8[v6])(v104, &v106);
  return v29;
}

uint64_t WebCore::JSSpeechRecognitionEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSpeechRecognitionEventPrototype::create(WebCore::JSSpeechRecognitionEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSpeechRecognitionEvent::s_info, &WebCore::JSSpeechRecognitionEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSpeechRecognitionEvent>,(WebCore::DOMConstructorID)204>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1632);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSSpeechRecognitionEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSpeechRecognitionEvent::s_info
         + ~((_QWORD)&WebCore::JSSpeechRecognitionEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionEvent::s_info
                                                                          + ~((_QWORD)&WebCore::JSSpeechRecognitionEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSpeechRecognitionEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSpeechRecognitionEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSpeechRecognitionEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSpeechRecognitionEventPrototype::create((WebCore::JSSpeechRecognitionEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSpeechRecognitionEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSpeechRecognitionEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1632) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSpeechRecognitionEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSpeechRecognitionEventPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSpeechRecognitionEvent>,(WebCore::DOMConstructorID)204>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSpeechRecognitionEvent_resultIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72) | 0xFFFE000000000000;
}

uint64_t WebCore::jsSpeechRecognitionEvent_results(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v2 = *(WTF **)(*(_QWORD *)(a2 + 24) + 80);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)v2 + ~((_QWORD)v2 << 32)) ^ (((unint64_t)v2 + ~((_QWORD)v2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == v2)
    {
LABEL_7:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == v2)
          goto LABEL_7;
      }
    }
  }
  ++*(_DWORD *)v2;
  v14 = *(_QWORD *)(v3 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSSpeechRecognitionResultList::s_info
         + ~((_QWORD)&WebCore::JSSpeechRecognitionResultList::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionResultList::s_info
                                                                               + ~((_QWORD)&WebCore::JSSpeechRecognitionResultList::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSSpeechRecognitionResultList::s_info)
    {
LABEL_15:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_17;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSSpeechRecognitionResultList::s_info)
          goto LABEL_15;
      }
    }
  }
  v23 = *(uint64_t **)(v3 + 56);
  Structure = WebCore::JSSpeechRecognitionResultListPrototype::createStructure(v23, v3, *(JSC::JSCell **)(v3 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSSpeechRecognitionResultListPrototype::create((WebCore::JSSpeechRecognitionResultListPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSSpeechRecognitionResultList::createStructure(v23, v3, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)v3, v28, (uint64_t)&WebCore::JSSpeechRecognitionResultList::s_info);
LABEL_17:
  v29 = *(_QWORD *)(v3 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 1672);
  if (v32)
    goto LABEL_38;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_23:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 1672))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 1672);
    *(_QWORD *)(v35 + 1672) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 1672);
  *(_QWORD *)(v31 + 1672) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_37;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_37:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_38:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_40;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_40:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = v2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(v3 + 3320);
  if ((byte_1EE336A20 & 1) == 0)
  {
    qword_1EE336A18 = (uint64_t)&off_1E3307D50;
    byte_1EE336A20 = 1;
  }
  v53 = v2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336A18;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSSpeechRecognitionEvent::subspaceForImpl(WebCore::JSSpeechRecognitionEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1656);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1656))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1656);
    *(_QWORD *)(v8 + 1656) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1656);
  *(_QWORD *)(v3 + 1656) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSpeechRecognitionResult::destroy(WebCore::JSSpeechRecognitionResult *this, JSC::JSCell *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return WTF::RefCounted<WebCore::SpeechRecognitionResult>::deref(result, a2);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionResult::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::VM *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int OwnProperty;
  int v34;
  int v35;
  char hasExceptionsAfterHandlingTraps;
  _BYTE v37[16];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (v15)
  {
    v16 = v15;
    if (!*(_BYTE *)(v15 + 274))
    {
      v17 = *(_BYTE **)(v15 + 496);
      if (!v17)
        v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
      if (*(_QWORD *)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 680);
          if (*(_BYTE *)(v19 + 243))
          {
            if (!*(_BYTE *)(v19 + 242))
              goto LABEL_23;
          }
          else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
          {
            goto LABEL_23;
          }
          if (v17[65])
            return JSC::JSObject::put();
        }
      }
    }
  }
LABEL_23:
  if (!a3)
    return JSC::JSObject::put();
  v20 = *(_DWORD *)(a3 + 16);
  if ((v20 & 0x20) != 0)
    return JSC::JSObject::put();
  v21 = *(JSC::VM **)(a2 + 56);
  v22 = *(_BYTE **)(a3 + 8);
  v23 = *(unsigned int *)(a3 + 4);
  if ((v20 & 4) != 0)
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *v22 - 48;
    if (v24 > 9 || v23 >= 2 && *v22 == 48)
      return JSC::JSObject::put();
    v30 = v23 - 1;
    v31 = v22 + 1;
    while (v30)
    {
      if (v24 <= 0x19999999)
      {
        v32 = *v31 - 48;
        if (v32 <= 9)
        {
          v29 = __CFADD__(v32, 10 * v24);
          v24 = v32 + 10 * v24;
          --v30;
          ++v31;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  else
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *(unsigned __int16 *)v22 - 48;
    if (v24 > 9 || v23 >= 2 && *(_WORD *)v22 == 48)
      return JSC::JSObject::put();
    v26 = (unsigned __int16 *)(v22 + 2);
    v27 = v23 - 1;
    while (v27)
    {
      if (v24 <= 0x19999999)
      {
        v28 = *v26 - 48;
        if (v28 <= 9)
        {
          v29 = __CFADD__(v28, 10 * v24);
          v24 = v28 + 10 * v24;
          ++v26;
          --v27;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  if (v24 == -1)
    return JSC::JSObject::put();
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 14;
  v38 = 0xFFFFFFFF00000000;
  v40 = 0;
  v41 = 0;
  v39 = v8;
  v42 = 0x20000;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  OwnProperty = WebCore::JSSpeechRecognitionResult::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v37);
  if (*((_DWORD *)v21 + 20)
    && (v35 = OwnProperty,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21),
        OwnProperty = v35,
        (hasExceptionsAfterHandlingTraps & 1) != 0)
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v21 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v45)
  {
    v34 = *(_DWORD *)(v44 + 4);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x194F977F0);
    }
    *(_DWORD *)(v44 + 4) = v34 - 1;
  }
  return result;
}

uint64_t WebCore::JSSpeechRecognitionResult::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSSpeechRecognitionResult::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (!*(_BYTE *)(v15 + 242))
              goto LABEL_22;
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) == 0)
          {
            goto LABEL_22;
          }
          if (v13[65])
            return JSC::JSObject::deleteProperty();
        }
      }
    }
  }
LABEL_22:
  if (!a3)
    return JSC::JSObject::deleteProperty();
  v16 = *(_DWORD *)(a3 + 16);
  if ((v16 & 0x20) != 0)
    return JSC::JSObject::deleteProperty();
  v17 = *(_WORD **)(a3 + 8);
  v18 = *(unsigned int *)(a3 + 4);
  if ((v16 & 4) == 0)
  {
    if ((_DWORD)v18 && (v19 = (unsigned __int16)*v17 - 48, v19 <= 9) && (v18 < 2 || *v17 != 48))
    {
      v25 = v17 + 1;
      v26 = v18 - 1;
      while (v26)
      {
        if (v19 <= 0x19999999)
        {
          v27 = *v25 - 48;
          if (v27 <= 9)
          {
            v28 = __CFADD__(v27, 10 * v19);
            v19 = v27 + 10 * v19;
            ++v25;
            --v26;
            if (!v28)
              continue;
          }
        }
        goto LABEL_29;
      }
      v7 = v19 == -1;
      v22 = v19 & 0xFFFFFF00;
      v21 = v19;
      v20 = 0x100000000;
      if (v7)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
      }
    }
    else
    {
LABEL_29:
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
    v23 = v22 | v21;
    if ((v20 & 0x100000000) != 0)
      return *(_DWORD *)(v9 + 20) <= v23;
    return JSC::JSObject::deleteProperty();
  }
  if (!(_DWORD)v18)
  {
    v30 = 0;
    goto LABEL_47;
  }
  v29 = *(unsigned __int8 *)v17 - 48;
  if (v29 > 9 || v18 >= 2 && *(_BYTE *)v17 == 48)
  {
LABEL_46:
    v30 = 0;
    LODWORD(v18) = 0;
LABEL_47:
    v31 = 0;
    goto LABEL_48;
  }
  v32 = v18 - 1;
  v33 = (unsigned __int8 *)v17 + 1;
  while (v32)
  {
    if (v29 > 0x19999999)
      goto LABEL_46;
    v34 = *v33 - 48;
    if (v34 > 9)
      goto LABEL_46;
    v30 = 0;
    LODWORD(v18) = 0;
    v31 = 0;
    v28 = __CFADD__(v34, 10 * v29);
    v29 = v34 + 10 * v29;
    --v32;
    ++v33;
    if (v28)
      goto LABEL_48;
  }
  if (v29 == -1)
    v30 = 0;
  else
    v30 = v29 & 0xFFFFFF00;
  if (v29 == -1)
    LODWORD(v18) = 0;
  else
    LODWORD(v18) = v29;
  if (v29 == -1)
    v31 = 0;
  else
    v31 = 0x100000000;
LABEL_48:
  v23 = v18 | v30;
  if ((v31 & 0x100000000) != 0)
    return *(_DWORD *)(v9 + 20) <= v23;
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSSpeechRecognitionResult::deletePropertyByIndex(WebCore::JSSpeechRecognitionResult *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 20) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 20) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 20) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 20) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 20) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 20) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 20) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSSpeechRecognitionResult::getOwnPropertySlotByIndex(WebCore::JSSpeechRecognitionResult *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  uint64_t v7;
  WTF *v8;
  JSC::VM *v9;
  unint64_t v10;
  uint64_t result;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v7 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v7 + 20) <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = *(WTF **)(*(_QWORD *)(v7 + 8) + 8 * a3);
  if (!v8)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v10 = WebCore::wrap<WebCore::SpeechRecognitionAlternative>(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v8);
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v10;
  *(_DWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSSpeechRecognitionResult::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 20);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSSpeechRecognitionResult::defineOwnProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;

  if (!a3)
    return JSC::JSObject::defineOwnProperty();
  v5 = *(_DWORD *)(a3 + 16);
  if ((v5 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty();
  v6 = *(_BYTE **)(a3 + 8);
  v7 = *(unsigned int *)(a3 + 4);
  if ((v5 & 4) != 0)
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *v6 - 48;
    if (v8 > 9 || v7 >= 2 && *v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v14 = v7 - 1;
    v15 = v6 + 1;
    while (v14)
    {
      if (v8 <= 0x19999999)
      {
        v16 = *v15 - 48;
        if (v16 <= 9)
        {
          v13 = __CFADD__(v16, 10 * v8);
          v8 = v16 + 10 * v8;
          --v14;
          ++v15;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  else
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *(unsigned __int16 *)v6 - 48;
    if (v8 > 9 || v7 >= 2 && *(_WORD *)v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v10 = (unsigned __int16 *)(v6 + 2);
    v11 = v7 - 1;
    while (v11)
    {
      if (v8 <= 0x19999999)
      {
        v12 = *v10 - 48;
        if (v12 <= 9)
        {
          v13 = __CFADD__(v12, 10 * v8);
          v8 = v12 + 10 * v8;
          ++v10;
          --v11;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  if (v8 == -1)
    return JSC::JSObject::defineOwnProperty();
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSSpeechRecognitionResult::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionResultPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSpeechRecognitionResultPrototype::create(WebCore::JSSpeechRecognitionResultPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  JSC::Structure *v20;
  int v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  JSC::Structure **v30;
  int *v31;
  int v32;
  int v33;
  JSC::Structure *v34;
  int v35;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v23 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v23);
    *((_QWORD *)this + 4865) = SlowCase + (int)v23;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSSpeechRecognitionResult::s_info, &WebCore::JSSpeechRecognitionResultPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2712);
  v10 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) + 672);
  v11 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), this)) != 0&& (v26 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v26), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v24 = *(_QWORD *)(v10 + 8) - 8;
      v25 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v24 = v10 + 16;
      v25 = v13 << 32;
    }
    v14 = *(_QWORD *)(v24 + (v25 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v26 = 0;
  v27 = SlowCase;
  v28 = 0x1000000FFFFFFFFLL;
  v29 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v9, v14, 4, (uint64_t)&v26);
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v15);
  else
    *(_DWORD *)v11 -= 2;
  v16 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = JSC::JSString::create((uint64_t)this, &v26);
  v19 = v26;
  v26 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v35 = *(_DWORD *)SlowCase;
  v34 = v20;
  v21 = JSC::Structure::outOfLineCapacity(v20);
  v32 = 0;
  v33 = v21;
  v26 = (WTF::StringImpl *)&v33;
  v27 = SlowCase;
  v28 = (uint64_t)this;
  v29 = &v35;
  v30 = &v34;
  v31 = &v32;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v20, this, v16, 6, (uint64_t)&v26);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v32, v18);
  *((_DWORD *)v20 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechRecognitionResult>,(WebCore::DOMConstructorID)205>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1640);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechRecognitionResult>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSpeechRecognitionResult::s_info
         + ~((_QWORD)&WebCore::JSSpeechRecognitionResult::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionResult::s_info
                                                                           + ~((_QWORD)&WebCore::JSSpeechRecognitionResult::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSpeechRecognitionResult::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSpeechRecognitionResult::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSpeechRecognitionResultPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSpeechRecognitionResultPrototype::create((WebCore::JSSpeechRecognitionResultPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSpeechRecognitionResult::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSpeechRecognitionResult::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1640) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

uint64_t WebCore::JSSpeechRecognitionResult::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v8;
  _WORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  unint64_t v17;
  uint64_t result;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unint64_t v54;

  v6 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v8 = *(_DWORD *)(a3 + 16);
  if ((v8 & 0x20) != 0)
    goto LABEL_35;
  v9 = *(_WORD **)(a3 + 8);
  v10 = *(unsigned int *)(a3 + 4);
  if ((v8 & 4) == 0)
  {
    if ((_DWORD)v10 && (v11 = (unsigned __int16)*v9 - 48, v11 <= 9))
    {
      if (v10 < 2 || *v9 != 48)
      {
        v19 = v9 + 1;
        v20 = v10 - 1;
        while (v20)
        {
          if (v11 <= 0x19999999)
          {
            v21 = *v19 - 48;
            if (v21 <= 9)
            {
              v22 = __CFADD__(v21, 10 * v11);
              v11 = v21 + 10 * v11;
              ++v19;
              --v20;
              if (!v22)
                continue;
            }
          }
          goto LABEL_6;
        }
        v23 = v11 == -1;
        v13 = v11 & 0xFFFFFF00;
        v12 = 0x100000000;
        if (v11 == -1)
        {
          v12 = 0;
          LOBYTE(v11) = 0;
        }
        if (v23)
          v13 = 0;
LABEL_8:
        v11 = v11;
        if ((v12 & 0x100000000) == 0)
          goto LABEL_35;
        goto LABEL_9;
      }
      v12 = 0;
    }
    else
    {
LABEL_6:
      v12 = 0;
      LOBYTE(v11) = 0;
    }
    v13 = 0;
    goto LABEL_8;
  }
  if (!(_DWORD)v10)
  {
    v11 = 0;
    goto LABEL_33;
  }
  v24 = *(unsigned __int8 *)v9 - 48;
  if (v24 > 9 || v10 >= 2 && *(_BYTE *)v9 == 48)
  {
LABEL_32:
    v11 = 0;
    LOBYTE(v10) = 0;
LABEL_33:
    v25 = 0;
    goto LABEL_34;
  }
  v48 = v10 - 1;
  v49 = (unsigned __int8 *)v9 + 1;
  while (v48)
  {
    if (v24 > 0x19999999)
      goto LABEL_32;
    v50 = *v49 - 48;
    if (v50 > 9)
      goto LABEL_32;
    v11 = 0;
    LOBYTE(v10) = 0;
    v25 = 0;
    v22 = __CFADD__(v50, 10 * v24);
    v24 = v50 + 10 * v24;
    --v48;
    ++v49;
    if (v22)
      goto LABEL_34;
  }
  if (v24 == -1)
    v11 = 0;
  else
    v11 = v24 & 0xFFFFFF00;
  if (v24 == -1)
    LOBYTE(v10) = 0;
  else
    LOBYTE(v10) = v24;
  if (v24 == -1)
    v25 = 0;
  else
    v25 = 0x100000000;
LABEL_34:
  v13 = v10;
  if ((v25 & 0x100000000) == 0)
    goto LABEL_35;
LABEL_9:
  v14 = v13 | v11;
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v15 + 20) > v14)
  {
    v16 = *(WTF **)(*(_QWORD *)(v15 + 8) + 8 * v14);
    if (v16)
    {
      v17 = WebCore::wrap<WebCore::SpeechRecognitionAlternative>(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v16);
      if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
      {
        *(_QWORD *)a4 = v17;
        *(_DWORD *)(a4 + 16) = 2;
        *(_QWORD *)(a4 + 32) = a1;
        result = 1;
        *(_BYTE *)(a4 + 49) = 1;
        return result;
      }
      return 0;
    }
  }
LABEL_35:
  if (!(a3 >> 4)
    || (v26 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v26 + 0x20)) != 0)
    || (v27 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v6)) == 0
    || (v54 = a3, v28 = JSC::PropertyTable::get(v27, (uint64_t *)&v54), (_DWORD)v28 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v29 = *(_DWORD *)(a3 + 16);
    if ((v29 & 0x20) == 0)
    {
      v30 = *(_BYTE **)(a3 + 8);
      v31 = *(unsigned int *)(a3 + 4);
      if ((v29 & 4) != 0)
      {
        if (!(_DWORD)v31 || (v46 = *v30 - 48, v46 > 9) || v31 >= 2 && *v30 == 48)
        {
LABEL_81:
          v47 = 0;
        }
        else
        {
          v51 = v31 - 1;
          v52 = v30 + 1;
          while (v51)
          {
            if (v46 > 0x19999999)
              goto LABEL_81;
            v53 = *v52 - 48;
            if (v53 > 9)
              goto LABEL_81;
            v47 = 0;
            v22 = __CFADD__(v53, 10 * v46);
            v46 = v53 + 10 * v46;
            --v51;
            ++v52;
            if (v22)
              goto LABEL_82;
          }
          v47 = 0x100000000;
          if (v46 == -1)
            v47 = 0;
        }
LABEL_82:
        if ((v47 & 0x100000000) == 0)
          return 0;
      }
      else
      {
        if ((_DWORD)v31
          && (v32 = *(unsigned __int16 *)v30 - 48, v32 <= 9)
          && (v31 < 2 || *(_WORD *)v30 != 48))
        {
          v38 = (unsigned __int16 *)(v30 + 2);
          v39 = v31 - 1;
          while (v39)
          {
            if (v32 <= 0x19999999)
            {
              v40 = *v38 - 48;
              if (v40 <= 9)
              {
                v22 = __CFADD__(v40, 10 * v32);
                v32 = v40 + 10 * v32;
                ++v38;
                --v39;
                if (!v22)
                  continue;
              }
            }
            goto LABEL_46;
          }
          v23 = v32 == -1;
          v33 = 0x100000000;
          if (v23)
            v33 = 0;
        }
        else
        {
LABEL_46:
          v33 = 0;
        }
        if ((v33 & 0x100000000) == 0)
          return 0;
      }
      return JSC::JSObject::getOwnPropertySlotByIndex();
    }
    return 0;
  }
  if ((int)v28 > 63)
  {
    v34 = *(_QWORD *)(a1 + 8) - 8;
    v35 = 0x3F00000000 - (v28 << 32);
  }
  else
  {
    v34 = a1 + 16;
    v35 = v28 << 32;
  }
  v36 = *(_QWORD *)(v34 + (v35 >> 29));
  if ((v36 & 0xFFFE000000000002) != 0)
  {
LABEL_55:
    *(_QWORD *)a4 = v36;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v28);
    *(_DWORD *)(a4 + 20) = v28;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v37 = *(unsigned __int8 *)(v36 + 5);
  if (v37 != 6)
  {
    if (v37 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot();
      return 1;
    }
    goto LABEL_55;
  }
  v41 = *(_DWORD *)(v26 + 16) & 3;
  v43 = *(_QWORD *)(v36 + 8);
  v42 = *(_QWORD *)(v36 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C))
  {
    v45 = *(_QWORD *)(v36 + 24);
    v44 = *(_QWORD *)(v36 + 32);
    *(_QWORD *)a4 = v43;
    *(_QWORD *)(a4 + 8) = v42;
    *(_DWORD *)(a4 + 16) = HIDWORD(v28);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v41 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v45;
    *(_QWORD *)(a4 + 80) = v44;
  }
  else
  {
    *(_QWORD *)a4 = v43;
    *(_QWORD *)(a4 + 8) = v42;
    *(_DWORD *)(a4 + 16) = HIDWORD(v28);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v41 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

unint64_t WebCore::jsSpeechRecognitionResultConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSpeechRecognitionResultPrototype::s_info != (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechRecognitionResult>,(WebCore::DOMConstructorID)205>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSpeechRecognitionResult_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsSpeechRecognitionResult_isFinal(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 24))
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSSpeechRecognitionResultOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

uint64_t WebCore::JSSpeechRecognitionResultOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  return WTF::RefCounted<WebCore::SpeechRecognitionResult>::deref(v3, a2);
}

unint64_t WebCore::toJS(uint64_t a1, WTF *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a2;
  v14 = *(_QWORD *)(a1 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSSpeechRecognitionResult::s_info
         + ~((_QWORD)&WebCore::JSSpeechRecognitionResult::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionResult::s_info
                                                                           + ~((_QWORD)&WebCore::JSSpeechRecognitionResult::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSSpeechRecognitionResult::s_info)
    {
LABEL_14:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_16;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSSpeechRecognitionResult::s_info)
          goto LABEL_14;
      }
    }
  }
  v23 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSSpeechRecognitionResultPrototype::createStructure(v23, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSSpeechRecognitionResultPrototype::create((WebCore::JSSpeechRecognitionResultPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSSpeechRecognitionResult::createStructure(v23, a1, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)a1, v28, (uint64_t)&WebCore::JSSpeechRecognitionResult::s_info);
LABEL_16:
  v29 = *(_QWORD *)(a1 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 1664);
  if (v32)
    goto LABEL_36;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_21:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 1664))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 1664);
    *(_QWORD *)(v35 + 1664) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 1664);
  *(_QWORD *)(v31 + 1664) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_36:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336A10 & 1) == 0)
  {
    qword_1EE336A08 = (uint64_t)&off_1E3307D20;
    byte_1EE336A10 = 1;
  }
  v53 = a2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336A08;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF *v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(WTF **)(v2 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
      if (v10)
      {
        if ((*(_BYTE *)(v10 + 8) & 3) == 0)
        {
          v11 = *(_QWORD *)v10;
          if (*(_QWORD *)v10)
            return v11;
        }
      }
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(WTF **)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a2;
  v15 = a2;
  v11 = WebCore::createWrapper<WebCore::Touch,WebCore::Touch>(a1, &v15);
  v13 = v15;
  v15 = 0;
  if (v13)
    WTF::RefCounted<WebCore::Touch>::deref(v13, v12);
  return v11;
}

uint64_t WebCore::JSSpeechRecognitionResultList::destroy(uint64_t this, JSC::JSCell *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v2 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *(unsigned int *)(v2 + 20);
      if ((_DWORD)v3)
      {
        v4 = *(uint64_t **)(v2 + 8);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          *v4 = 0;
          if (v6)
            WTF::RefCounted<WebCore::SpeechRecognitionResult>::deref(v6, a2);
          ++v4;
          v5 -= 8;
        }
        while (v5);
      }
      v7 = *(WTF **)(v2 + 8);
      if (v7)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v7, a2);
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSSpeechRecognitionResultList::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::VM *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int OwnProperty;
  int v34;
  int v35;
  char hasExceptionsAfterHandlingTraps;
  _BYTE v37[16];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (v15)
  {
    v16 = v15;
    if (!*(_BYTE *)(v15 + 274))
    {
      v17 = *(_BYTE **)(v15 + 496);
      if (!v17)
        v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
      if (*(_QWORD *)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 680);
          if (*(_BYTE *)(v19 + 243))
          {
            if (!*(_BYTE *)(v19 + 242))
              goto LABEL_23;
          }
          else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
          {
            goto LABEL_23;
          }
          if (v17[65])
            return JSC::JSObject::put();
        }
      }
    }
  }
LABEL_23:
  if (!a3)
    return JSC::JSObject::put();
  v20 = *(_DWORD *)(a3 + 16);
  if ((v20 & 0x20) != 0)
    return JSC::JSObject::put();
  v21 = *(JSC::VM **)(a2 + 56);
  v22 = *(_BYTE **)(a3 + 8);
  v23 = *(unsigned int *)(a3 + 4);
  if ((v20 & 4) != 0)
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *v22 - 48;
    if (v24 > 9 || v23 >= 2 && *v22 == 48)
      return JSC::JSObject::put();
    v30 = v23 - 1;
    v31 = v22 + 1;
    while (v30)
    {
      if (v24 <= 0x19999999)
      {
        v32 = *v31 - 48;
        if (v32 <= 9)
        {
          v29 = __CFADD__(v32, 10 * v24);
          v24 = v32 + 10 * v24;
          --v30;
          ++v31;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  else
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *(unsigned __int16 *)v22 - 48;
    if (v24 > 9 || v23 >= 2 && *(_WORD *)v22 == 48)
      return JSC::JSObject::put();
    v26 = (unsigned __int16 *)(v22 + 2);
    v27 = v23 - 1;
    while (v27)
    {
      if (v24 <= 0x19999999)
      {
        v28 = *v26 - 48;
        if (v28 <= 9)
        {
          v29 = __CFADD__(v28, 10 * v24);
          v24 = v28 + 10 * v24;
          ++v26;
          --v27;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  if (v24 == -1)
    return JSC::JSObject::put();
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 14;
  v38 = 0xFFFFFFFF00000000;
  v40 = 0;
  v41 = 0;
  v39 = v8;
  v42 = 0x20000;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  OwnProperty = WebCore::JSSpeechRecognitionResultList::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v37);
  if (*((_DWORD *)v21 + 20)
    && (v35 = OwnProperty,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21),
        OwnProperty = v35,
        (hasExceptionsAfterHandlingTraps & 1) != 0)
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v21 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v45)
  {
    v34 = *(_DWORD *)(v44 + 4);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x194F99AD8);
    }
    *(_DWORD *)(v44 + 4) = v34 - 1;
  }
  return result;
}

uint64_t WebCore::JSSpeechRecognitionResultList::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSSpeechRecognitionResultList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (!*(_BYTE *)(v15 + 242))
              goto LABEL_22;
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) == 0)
          {
            goto LABEL_22;
          }
          if (v13[65])
            return JSC::JSObject::deleteProperty();
        }
      }
    }
  }
LABEL_22:
  if (!a3)
    return JSC::JSObject::deleteProperty();
  v16 = *(_DWORD *)(a3 + 16);
  if ((v16 & 0x20) != 0)
    return JSC::JSObject::deleteProperty();
  v17 = *(_WORD **)(a3 + 8);
  v18 = *(unsigned int *)(a3 + 4);
  if ((v16 & 4) == 0)
  {
    if ((_DWORD)v18 && (v19 = (unsigned __int16)*v17 - 48, v19 <= 9) && (v18 < 2 || *v17 != 48))
    {
      v25 = v17 + 1;
      v26 = v18 - 1;
      while (v26)
      {
        if (v19 <= 0x19999999)
        {
          v27 = *v25 - 48;
          if (v27 <= 9)
          {
            v28 = __CFADD__(v27, 10 * v19);
            v19 = v27 + 10 * v19;
            ++v25;
            --v26;
            if (!v28)
              continue;
          }
        }
        goto LABEL_29;
      }
      v7 = v19 == -1;
      v22 = v19 & 0xFFFFFF00;
      v21 = v19;
      v20 = 0x100000000;
      if (v7)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
      }
    }
    else
    {
LABEL_29:
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
    v23 = v22 | v21;
    if ((v20 & 0x100000000) != 0)
      return *(_DWORD *)(v9 + 20) <= v23;
    return JSC::JSObject::deleteProperty();
  }
  if (!(_DWORD)v18)
  {
    v30 = 0;
    goto LABEL_47;
  }
  v29 = *(unsigned __int8 *)v17 - 48;
  if (v29 > 9 || v18 >= 2 && *(_BYTE *)v17 == 48)
  {
LABEL_46:
    v30 = 0;
    LODWORD(v18) = 0;
LABEL_47:
    v31 = 0;
    goto LABEL_48;
  }
  v32 = v18 - 1;
  v33 = (unsigned __int8 *)v17 + 1;
  while (v32)
  {
    if (v29 > 0x19999999)
      goto LABEL_46;
    v34 = *v33 - 48;
    if (v34 > 9)
      goto LABEL_46;
    v30 = 0;
    LODWORD(v18) = 0;
    v31 = 0;
    v28 = __CFADD__(v34, 10 * v29);
    v29 = v34 + 10 * v29;
    --v32;
    ++v33;
    if (v28)
      goto LABEL_48;
  }
  if (v29 == -1)
    v30 = 0;
  else
    v30 = v29 & 0xFFFFFF00;
  if (v29 == -1)
    LODWORD(v18) = 0;
  else
    LODWORD(v18) = v29;
  if (v29 == -1)
    v31 = 0;
  else
    v31 = 0x100000000;
LABEL_48:
  v23 = v18 | v30;
  if ((v31 & 0x100000000) != 0)
    return *(_DWORD *)(v9 + 20) <= v23;
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSSpeechRecognitionResultList::deletePropertyByIndex(WebCore::JSSpeechRecognitionResultList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 20) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 20) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 20) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 20) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 20) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 20) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 20) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSSpeechRecognitionResultList::getOwnPropertySlotByIndex(WebCore::JSSpeechRecognitionResultList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  uint64_t v7;
  WTF *v8;
  JSC::VM *v9;
  unint64_t v10;
  uint64_t result;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v7 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v7 + 20) <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = *(WTF **)(*(_QWORD *)(v7 + 8) + 8 * a3);
  if (!v8)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v10 = WebCore::toJS(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v8);
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v10;
  *(_DWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSSpeechRecognitionResultList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 20);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSSpeechRecognitionResultList::defineOwnProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;

  if (!a3)
    return JSC::JSObject::defineOwnProperty();
  v5 = *(_DWORD *)(a3 + 16);
  if ((v5 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty();
  v6 = *(_BYTE **)(a3 + 8);
  v7 = *(unsigned int *)(a3 + 4);
  if ((v5 & 4) != 0)
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *v6 - 48;
    if (v8 > 9 || v7 >= 2 && *v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v14 = v7 - 1;
    v15 = v6 + 1;
    while (v14)
    {
      if (v8 <= 0x19999999)
      {
        v16 = *v15 - 48;
        if (v16 <= 9)
        {
          v13 = __CFADD__(v16, 10 * v8);
          v8 = v16 + 10 * v8;
          --v14;
          ++v15;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  else
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *(unsigned __int16 *)v6 - 48;
    if (v8 > 9 || v7 >= 2 && *(_WORD *)v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v10 = (unsigned __int16 *)(v6 + 2);
    v11 = v7 - 1;
    while (v11)
    {
      if (v8 <= 0x19999999)
      {
        v12 = *v10 - 48;
        if (v12 <= 9)
        {
          v13 = __CFADD__(v12, 10 * v8);
          v8 = v12 + 10 * v8;
          ++v10;
          --v11;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  if (v8 == -1)
    return JSC::JSObject::defineOwnProperty();
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSSpeechRecognitionResultList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionResultListPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSpeechRecognitionResultListPrototype::create(WebCore::JSSpeechRecognitionResultListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  JSC::Structure *v20;
  int v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  JSC::Structure **v30;
  int *v31;
  int v32;
  int v33;
  JSC::Structure *v34;
  int v35;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v23 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v23);
    *((_QWORD *)this + 4865) = SlowCase + (int)v23;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSpeechRecognitionResultList::s_info, &WebCore::JSSpeechRecognitionResultListPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2712);
  v10 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) + 672);
  v11 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), this)) != 0&& (v26 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v26), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v24 = *(_QWORD *)(v10 + 8) - 8;
      v25 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v24 = v10 + 16;
      v25 = v13 << 32;
    }
    v14 = *(_QWORD *)(v24 + (v25 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v26 = 0;
  v27 = SlowCase;
  v28 = 0x1000000FFFFFFFFLL;
  v29 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v9, v14, 4, (uint64_t)&v26);
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v15);
  else
    *(_DWORD *)v11 -= 2;
  v16 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = JSC::JSString::create((uint64_t)this, &v26);
  v19 = v26;
  v26 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v35 = *(_DWORD *)SlowCase;
  v34 = v20;
  v21 = JSC::Structure::outOfLineCapacity(v20);
  v32 = 0;
  v33 = v21;
  v26 = (WTF::StringImpl *)&v33;
  v27 = SlowCase;
  v28 = (uint64_t)this;
  v29 = &v35;
  v30 = &v34;
  v31 = &v32;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v20, this, v16, 6, (uint64_t)&v26);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v32, v18);
  *((_DWORD *)v20 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechRecognitionResultList>,(WebCore::DOMConstructorID)206>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1648);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechRecognitionResultList>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSpeechRecognitionResultList::s_info
         + ~((_QWORD)&WebCore::JSSpeechRecognitionResultList::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionResultList::s_info
                                                                               + ~((_QWORD)&WebCore::JSSpeechRecognitionResultList::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSpeechRecognitionResultList::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSpeechRecognitionResultList::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSpeechRecognitionResultListPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSpeechRecognitionResultListPrototype::create((WebCore::JSSpeechRecognitionResultListPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSpeechRecognitionResultList::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSpeechRecognitionResultList::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1648) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

uint64_t WebCore::JSSpeechRecognitionResultList::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v8;
  _WORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  unint64_t v17;
  uint64_t result;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unint64_t v54;

  v6 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v8 = *(_DWORD *)(a3 + 16);
  if ((v8 & 0x20) != 0)
    goto LABEL_35;
  v9 = *(_WORD **)(a3 + 8);
  v10 = *(unsigned int *)(a3 + 4);
  if ((v8 & 4) == 0)
  {
    if ((_DWORD)v10 && (v11 = (unsigned __int16)*v9 - 48, v11 <= 9))
    {
      if (v10 < 2 || *v9 != 48)
      {
        v19 = v9 + 1;
        v20 = v10 - 1;
        while (v20)
        {
          if (v11 <= 0x19999999)
          {
            v21 = *v19 - 48;
            if (v21 <= 9)
            {
              v22 = __CFADD__(v21, 10 * v11);
              v11 = v21 + 10 * v11;
              ++v19;
              --v20;
              if (!v22)
                continue;
            }
          }
          goto LABEL_6;
        }
        v23 = v11 == -1;
        v13 = v11 & 0xFFFFFF00;
        v12 = 0x100000000;
        if (v11 == -1)
        {
          v12 = 0;
          LOBYTE(v11) = 0;
        }
        if (v23)
          v13 = 0;
LABEL_8:
        v11 = v11;
        if ((v12 & 0x100000000) == 0)
          goto LABEL_35;
        goto LABEL_9;
      }
      v12 = 0;
    }
    else
    {
LABEL_6:
      v12 = 0;
      LOBYTE(v11) = 0;
    }
    v13 = 0;
    goto LABEL_8;
  }
  if (!(_DWORD)v10)
  {
    v11 = 0;
    goto LABEL_33;
  }
  v24 = *(unsigned __int8 *)v9 - 48;
  if (v24 > 9 || v10 >= 2 && *(_BYTE *)v9 == 48)
  {
LABEL_32:
    v11 = 0;
    LOBYTE(v10) = 0;
LABEL_33:
    v25 = 0;
    goto LABEL_34;
  }
  v48 = v10 - 1;
  v49 = (unsigned __int8 *)v9 + 1;
  while (v48)
  {
    if (v24 > 0x19999999)
      goto LABEL_32;
    v50 = *v49 - 48;
    if (v50 > 9)
      goto LABEL_32;
    v11 = 0;
    LOBYTE(v10) = 0;
    v25 = 0;
    v22 = __CFADD__(v50, 10 * v24);
    v24 = v50 + 10 * v24;
    --v48;
    ++v49;
    if (v22)
      goto LABEL_34;
  }
  if (v24 == -1)
    v11 = 0;
  else
    v11 = v24 & 0xFFFFFF00;
  if (v24 == -1)
    LOBYTE(v10) = 0;
  else
    LOBYTE(v10) = v24;
  if (v24 == -1)
    v25 = 0;
  else
    v25 = 0x100000000;
LABEL_34:
  v13 = v10;
  if ((v25 & 0x100000000) == 0)
    goto LABEL_35;
LABEL_9:
  v14 = v13 | v11;
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v15 + 20) > v14)
  {
    v16 = *(WTF **)(*(_QWORD *)(v15 + 8) + 8 * v14);
    if (v16)
    {
      v17 = WebCore::toJS(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v16);
      if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
      {
        *(_QWORD *)a4 = v17;
        *(_DWORD *)(a4 + 16) = 2;
        *(_QWORD *)(a4 + 32) = a1;
        result = 1;
        *(_BYTE *)(a4 + 49) = 1;
        return result;
      }
      return 0;
    }
  }
LABEL_35:
  if (!(a3 >> 4)
    || (v26 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v26 + 0x20)) != 0)
    || (v27 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v6)) == 0
    || (v54 = a3, v28 = JSC::PropertyTable::get(v27, (uint64_t *)&v54), (_DWORD)v28 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v29 = *(_DWORD *)(a3 + 16);
    if ((v29 & 0x20) == 0)
    {
      v30 = *(_BYTE **)(a3 + 8);
      v31 = *(unsigned int *)(a3 + 4);
      if ((v29 & 4) != 0)
      {
        if (!(_DWORD)v31 || (v46 = *v30 - 48, v46 > 9) || v31 >= 2 && *v30 == 48)
        {
LABEL_81:
          v47 = 0;
        }
        else
        {
          v51 = v31 - 1;
          v52 = v30 + 1;
          while (v51)
          {
            if (v46 > 0x19999999)
              goto LABEL_81;
            v53 = *v52 - 48;
            if (v53 > 9)
              goto LABEL_81;
            v47 = 0;
            v22 = __CFADD__(v53, 10 * v46);
            v46 = v53 + 10 * v46;
            --v51;
            ++v52;
            if (v22)
              goto LABEL_82;
          }
          v47 = 0x100000000;
          if (v46 == -1)
            v47 = 0;
        }
LABEL_82:
        if ((v47 & 0x100000000) == 0)
          return 0;
      }
      else
      {
        if ((_DWORD)v31
          && (v32 = *(unsigned __int16 *)v30 - 48, v32 <= 9)
          && (v31 < 2 || *(_WORD *)v30 != 48))
        {
          v38 = (unsigned __int16 *)(v30 + 2);
          v39 = v31 - 1;
          while (v39)
          {
            if (v32 <= 0x19999999)
            {
              v40 = *v38 - 48;
              if (v40 <= 9)
              {
                v22 = __CFADD__(v40, 10 * v32);
                v32 = v40 + 10 * v32;
                ++v38;
                --v39;
                if (!v22)
                  continue;
              }
            }
            goto LABEL_46;
          }
          v23 = v32 == -1;
          v33 = 0x100000000;
          if (v23)
            v33 = 0;
        }
        else
        {
LABEL_46:
          v33 = 0;
        }
        if ((v33 & 0x100000000) == 0)
          return 0;
      }
      return JSC::JSObject::getOwnPropertySlotByIndex();
    }
    return 0;
  }
  if ((int)v28 > 63)
  {
    v34 = *(_QWORD *)(a1 + 8) - 8;
    v35 = 0x3F00000000 - (v28 << 32);
  }
  else
  {
    v34 = a1 + 16;
    v35 = v28 << 32;
  }
  v36 = *(_QWORD *)(v34 + (v35 >> 29));
  if ((v36 & 0xFFFE000000000002) != 0)
  {
LABEL_55:
    *(_QWORD *)a4 = v36;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v28);
    *(_DWORD *)(a4 + 20) = v28;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v37 = *(unsigned __int8 *)(v36 + 5);
  if (v37 != 6)
  {
    if (v37 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot();
      return 1;
    }
    goto LABEL_55;
  }
  v41 = *(_DWORD *)(v26 + 16) & 3;
  v43 = *(_QWORD *)(v36 + 8);
  v42 = *(_QWORD *)(v36 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C))
  {
    v45 = *(_QWORD *)(v36 + 24);
    v44 = *(_QWORD *)(v36 + 32);
    *(_QWORD *)a4 = v43;
    *(_QWORD *)(a4 + 8) = v42;
    *(_DWORD *)(a4 + 16) = HIDWORD(v28);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v41 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v45;
    *(_QWORD *)(a4 + 80) = v44;
  }
  else
  {
    *(_QWORD *)a4 = v43;
    *(_QWORD *)(a4 + 8) = v42;
    *(_DWORD *)(a4 + 16) = HIDWORD(v28);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v41 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

unint64_t WebCore::jsSpeechRecognitionResultListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSpeechRecognitionResultListPrototype::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechRecognitionResultList>,(WebCore::DOMConstructorID)206>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSpeechRecognitionResultList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSSpeechRecognitionResultListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSSpeechRecognitionResultListOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = *(unsigned int *)(v3 + 20);
    if ((_DWORD)v24)
    {
      v25 = *(uint64_t **)(v3 + 8);
      v26 = 8 * v24;
      do
      {
        v27 = *v25;
        *v25 = 0;
        if (v27)
          WTF::RefCounted<WebCore::SpeechRecognitionResult>::deref(v27, a2);
        ++v25;
        v26 -= 8;
      }
      while (v26);
    }
    v28 = *(WTF **)(v3 + 8);
    if (v28)
    {
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      WTF::fastFree(v28, a2);
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::JSSpeechSynthesis::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 56);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSpeechSynthesisPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSpeechSynthesisPrototype::create(WebCore::JSSpeechSynthesisPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(this, (uint64_t)&WebCore::JSSpeechSynthesis::s_info, (uint64_t)&WebCore::JSSpeechSynthesisPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechSynthesis>,(WebCore::DOMConstructorID)207>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1656);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechSynthesis>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSpeechSynthesis::s_info + ~((_QWORD)&WebCore::JSSpeechSynthesis::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesis::s_info + ~((_QWORD)&WebCore::JSSpeechSynthesis::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSpeechSynthesis::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSpeechSynthesis::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSpeechSynthesisPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSpeechSynthesisPrototype::create((WebCore::JSSpeechSynthesisPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSpeechSynthesis::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSpeechSynthesis::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1656) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSpeechSynthesisConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSpeechSynthesisPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechSynthesis>,(WebCore::DOMConstructorID)207>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSpeechSynthesis_pending(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(_QWORD *)(v2 + 72);
  if (v3 > v4)
    v4 += *(unsigned int *)(v2 + 88);
  if (v4 - v3 <= 1)
    return 6;
  else
    return 7;
}

uint64_t WebCore::jsSpeechSynthesis_speaking(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)(a2 + 24) + 56))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsSpeechSynthesis_paused(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 96))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsSpeechSynthesis_onvoiceschanged(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 8);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 2256), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 8) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 7) + 64))((uint64_t)v5 - 56);
  else
    --*((_DWORD *)v5 - 8);
  return v9;
}

BOOL WebCore::setJSSpeechSynthesis_onvoiceschanged(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechSynthesis::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechSynthesis::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 8);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 2256), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 8) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 7) + 64))((uint64_t)v11 - 56);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 8);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSSpeechSynthesisOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 16);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 8)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 24) + 64))(v5 - 24), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSSpeechSynthesisOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = v3 - 56;
  v5 = *(_DWORD *)(v3 - 32);
  *(_DWORD *)(v3 - 32) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v8 + 16 * v14);
      if (v15 != result)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v8 + 16 * v14);
          ++v16;
          if (v15 == result)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_12:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
          {
            v27 = v3;
            v28 = v3 - 56;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
            v3 = v27;
            result = v28;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 32) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (!v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  *(_DWORD *)(v3 - 32) = v5;
  return result;
}

unint64_t WebCore::wrap<WebCore::SpeechSynthesis>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 64);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::SpeechSynthesis *__hidden, PlatformSpeechSynthesisUtterance *))a3 != off_1E3366D48)
  {
    __break(0xC471u);
    JUMPOUT(0x194F9C858);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSSpeechSynthesis::s_info + ~((_QWORD)&WebCore::JSSpeechSynthesis::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesis::s_info + ~((_QWORD)&WebCore::JSSpeechSynthesis::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSSpeechSynthesis::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSSpeechSynthesis::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSSpeechSynthesisPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSSpeechSynthesisPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSSpeechSynthesis::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSSpeechSynthesis::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1680);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 1680);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 1680);
    *(_QWORD *)(v30 + 1680) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 1680);
  *(_QWORD *)(v26 + 1680) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3 + 56;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE336A30 & 1) == 0)
  {
    qword_1EE336A28 = (uint64_t)&off_1E3307D80;
    byte_1EE336A30 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336A28;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE336A28;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSSpeechSynthesisEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::SpeechSynthesisUtterance *v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  JSC::VM *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  int v28;
  unint64_t v29;
  WebCore::JSEvent *v30;
  JSC::JSCell *v31;
  unint64_t v32;
  JSC::Structure *v33;
  JSC::JSCell *v34;
  uint64_t v35;
  JSCell *v36;
  JSC::JSCell *v37;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v39;
  JSC::JSGlobalObject *v40;
  JSC::VM *v41;
  JSC::JSObject *v42;
  JSC::Structure *v43;
  JSC::VM *FunctionRealm;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char **v51;
  int v52;
  JSC::JSCell *v53;
  unint64_t Structure;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t SubclassStructure;
  _DWORD *v59;
  bmalloc::api *v61;
  void *v62;
  JSValue v63;
  WebCore::JSSpeechSynthesisEvent *v64;
  JSC::VM *v65;
  WebCore::JSDOMGlobalObject *v66;
  uint64_t v67;
  _DWORD *v68;
  char v69[8];
  WebCore::SpeechSynthesisUtterance *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  int v77;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v63.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v63);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v76);
  v6 = v77;
  if (v77)
  {
    v36 = 0;
LABEL_47:
    if (v6 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E330AAE8[v6])(v69, &v76);
    return v36;
  }
  WebCore::convertDictionary<WebCore::SpeechSynthesisEventInit>(*(JSC::JSCell **)(a2 + 56), (JSC::VM **)a1, (uint64_t)v69);
  v7 = v75;
  if (v75)
  {
    v36 = 0;
LABEL_44:
    if (v7 != -1)
      ((void (*)(_DWORD **, char *))off_1E330AEA0[v7])(&v68, v69);
    v6 = v77;
    goto LABEL_47;
  }
  v67 = v5;
  if (!v77)
  {
    v8 = v76;
    v76 = 0;
    v10 = v70;
    v9 = v71;
    v11 = v72;
    v12 = v73;
    v13 = v74;
    v70 = 0;
    v74 = 0;
    v14 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v14);
    *(_QWORD *)(v14 + 8) = 0;
    v18 = *(_DWORD *)(v14 + 20) & 0xFFC00000 | (v8 != 0) | 0xE0200;
    *(_DWORD *)(v14 + 16) = 1;
    *(_DWORD *)(v14 + 20) = v18;
    if (v8)
      *(_DWORD *)v8 += 2;
    *(_QWORD *)(v14 + 24) = v8;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 56) = v17;
    *(_QWORD *)(v14 + 64) = 0;
    *(_QWORD *)v14 = off_1E3367008;
    if (v10)
      ++*((_DWORD *)v10 + 8);
    *(_QWORD *)(v14 + 72) = v10;
    *(_QWORD *)(v14 + 80) = v9;
    *(_QWORD *)(v14 + 88) = v11;
    *(_DWORD *)(v14 + 96) = v12;
    if (v13)
    {
      v19 = *(_DWORD *)v13;
      *(_DWORD *)v13 += 2;
      *(_QWORD *)(v14 + 104) = v13;
      v68 = (_DWORD *)v14;
      if (v19)
        *(_DWORD *)v13 = v19;
      else
        WTF::StringImpl::destroy(v13, v15);
    }
    else
    {
      *(_QWORD *)(v14 + 104) = 0;
      v68 = (_DWORD *)v14;
    }
    if (v10)
    {
      if (*((_DWORD *)v10 + 8) == 1)
      {
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v10, v15);
        bmalloc::api::isoDeallocate(v61, v62);
        if (!v8)
          goto LABEL_18;
        goto LABEL_16;
      }
      --*((_DWORD *)v10 + 8);
    }
    if (!v8)
      goto LABEL_18;
LABEL_16:
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v15);
    else
      *(_DWORD *)v8 -= 2;
LABEL_18:
    if (*(void (***)(WebCore::SpeechSynthesisEvent *__hidden))v14 != off_1E3367008)
    {
      __break(0xC471u);
      JUMPOUT(0x194F9CE28);
    }
    v20 = *(JSC::VM **)(v67 + 40);
    v21 = *((_QWORD *)v20 + 412);
    if (v21)
    {
      v22 = *(_DWORD *)(v21 - 8);
      v23 = ((unint64_t)&WebCore::JSSpeechSynthesisEvent::s_info
           + ~((_QWORD)&WebCore::JSSpeechSynthesisEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesisEvent::s_info
                                                                          + ~((_QWORD)&WebCore::JSSpeechSynthesisEvent::s_info << 32)) >> 22);
      v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
      v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
      v26 = v22 & ((v25 >> 31) ^ v25);
      v27 = *(char ***)(v21 + 16 * v26);
      if (v27 == &WebCore::JSSpeechSynthesisEvent::s_info)
      {
LABEL_24:
        v29 = *(_QWORD *)(v21 + 16 * v26 + 8);
        if (v29)
        {
LABEL_26:
          v36 = (JSCell *)WebCore::JSSpeechSynthesisEvent::create(v29, v20, (uint64_t *)&v68);
          WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v20 + 415), v14, (uint64_t)v36);
          v37 = *(JSC::JSCell **)(a2 + 40);
          if (((unint64_t)v37 & 0xFFFE000000000002) != 0
            || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v37)) == 0
            || (v40 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
            || (v41 = (JSC::VM *)*((_QWORD *)a1 + 7),
                FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v39),
                *((_DWORD *)v41 + 20))
            && (JSC::VM::hasExceptionsAfterHandlingTraps(v41) & 1) != 0)
          {
LABEL_39:
            if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
              v36 = 0;
            v59 = v68;
            v68 = 0;
            if (v59)
            {
              if (v59[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 8))(v59);
              else
                --v59[4];
            }
            v7 = v75;
            goto LABEL_44;
          }
          v45 = *((_QWORD *)FunctionRealm + 412);
          if (v45)
          {
            v46 = *(_DWORD *)(v45 - 8);
            v47 = ((unint64_t)&WebCore::JSSpeechSynthesisEvent::s_info
                 + ~((_QWORD)&WebCore::JSSpeechSynthesisEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesisEvent::s_info
                                                                                + ~((_QWORD)&WebCore::JSSpeechSynthesisEvent::s_info << 32)) >> 22);
            v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
            v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
            v50 = v46 & ((v49 >> 31) ^ v49);
            v51 = *(char ***)(v45 + 16 * v50);
            if (v51 == &WebCore::JSSpeechSynthesisEvent::s_info)
            {
LABEL_35:
              v42 = *(JSC::JSObject **)(v45 + 16 * v50 + 8);
              if (v42)
              {
LABEL_37:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v40, v42, v43);
                if (!*((_DWORD *)v41 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v41) & 1) == 0)
                  JSC::JSObject::setStructure(v36, v41, SubclassStructure);
                goto LABEL_39;
              }
            }
            else
            {
              v52 = 1;
              while (v51)
              {
                v50 = ((_DWORD)v50 + v52) & v46;
                v51 = *(char ***)(v45 + 16 * v50);
                ++v52;
                if (v51 == &WebCore::JSSpeechSynthesisEvent::s_info)
                  goto LABEL_35;
              }
            }
          }
          v53 = (JSC::JSCell *)WebCore::JSEvent::prototype(v41, FunctionRealm, v42);
          Structure = WebCore::JSSpeechSynthesisEventPrototype::createStructure((uint64_t *)v41, (uint64_t)FunctionRealm, v53);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v56 = (JSC::JSCell *)WebCore::JSSpeechSynthesisEventPrototype::create(v41, FunctionRealm, Structure, v55);
          v57 = WebCore::JSSpeechSynthesisEvent::createStructure((uint64_t *)v41, (uint64_t)FunctionRealm, v56);
          v42 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSSpeechSynthesisEvent::s_info);
          goto LABEL_37;
        }
      }
      else
      {
        v28 = 1;
        while (v27)
        {
          v26 = ((_DWORD)v26 + v28) & v22;
          v27 = *(char ***)(v21 + 16 * v26);
          ++v28;
          if (v27 == &WebCore::JSSpeechSynthesisEvent::s_info)
            goto LABEL_24;
        }
      }
    }
    v30 = (WebCore::JSEvent *)*((_QWORD *)v20 + 7);
    v31 = (JSC::JSCell *)WebCore::JSEvent::prototype(v30, *(JSC::VM **)(v67 + 40), v16);
    v32 = WebCore::JSSpeechSynthesisEventPrototype::createStructure((uint64_t *)v30, (uint64_t)v20, v31);
    *(_DWORD *)(v32 + 16) |= 0x80000u;
    v34 = (JSC::JSCell *)WebCore::JSSpeechSynthesisEventPrototype::create(v30, v20, v32, v33);
    v35 = WebCore::JSSpeechSynthesisEvent::createStructure((uint64_t *)v30, (uint64_t)v20, v34);
    v29 = WebCore::cacheDOMStructure((JSCell *)v20, v35, (uint64_t)&WebCore::JSSpeechSynthesisEvent::s_info);
    goto LABEL_26;
  }
  v64 = (WebCore::JSSpeechSynthesisEvent *)std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSSpeechSynthesisEvent::prototype(v64, v65, v66);
}

uint64_t WebCore::JSSpeechSynthesisEvent::prototype(WebCore::JSSpeechSynthesisEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSpeechSynthesisEvent::s_info
      + ~((_QWORD)&WebCore::JSSpeechSynthesisEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesisEvent::s_info
                                                                     + ~((_QWORD)&WebCore::JSSpeechSynthesisEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSpeechSynthesisEvent::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSpeechSynthesisEvent::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSEvent::prototype(this, a2, a3);
    Structure = WebCore::JSSpeechSynthesisEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSSpeechSynthesisEventPrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSSpeechSynthesisEvent::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSSpeechSynthesisEvent::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSSpeechSynthesisEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSpeechSynthesisEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSpeechSynthesisEventPrototype::create(WebCore::JSSpeechSynthesisEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSSpeechSynthesisEvent::s_info, &WebCore::JSSpeechSynthesisEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSpeechSynthesisEvent>,(WebCore::DOMConstructorID)209>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1672);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructor<WebCore::JSSpeechSynthesisEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSSpeechSynthesisEvent::prototype((WebCore::JSSpeechSynthesisEvent *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1672) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSpeechSynthesisEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSpeechSynthesisEventPrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSpeechSynthesisEvent>,(WebCore::DOMConstructorID)209>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSpeechSynthesisEvent_utterance(int a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (v2)
    return WebCore::wrap<WebCore::SpeechSynthesisUtterance>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

unint64_t WebCore::jsSpeechSynthesisEvent_charIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80) | 0xFFFE000000000000;
}

unint64_t WebCore::jsSpeechSynthesisEvent_charLength(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88) | 0xFFFE000000000000;
}

unint64_t WebCore::jsSpeechSynthesisEvent_elapsedTime(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 96);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

uint64_t WebCore::jsSpeechSynthesisEvent_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSSpeechSynthesisEvent::subspaceForImpl(WebCore::JSSpeechSynthesisEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1696);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1696))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1696);
    *(_QWORD *)(v8 + 1696) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1696);
  *(_QWORD *)(v3 + 1696) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSSpeechSynthesisUtterance>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  const WTF::String *v7;
  WebCore::SpeechSynthesisUtterance *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  JSC::VM *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebCore::JSDOMGlobalObject *v14;
  void *v15;
  JSCell *v16;
  JSC::JSCell *v17;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v19;
  JSC::JSGlobalObject *v20;
  JSC::VM *v21;
  WebCore::JSDOMGlobalObject *v22;
  JSC::Structure *v23;
  JSC::VM *FunctionRealm;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  int v32;
  JSC::JSCell *v33;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v35;
  JSC::Structure *v36;
  JSC::JSCell *v37;
  uint64_t v38;
  unint64_t SubclassStructure;
  uint64_t v40;
  bmalloc::api *v42;
  void *v43;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v45;
  uint64_t v46;
  int v47;
  JSC::VM *v48;
  WTF::StringImpl *v49;
  WebCore::SpeechSynthesisUtterance *v50;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v48 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v48, (uint64_t)"SpeechSynthesisUtterance", 25);
  v8 = (WebCore::SpeechSynthesisUtterance *)v6;
  if (*(_DWORD *)(a2 + 32) == 1 || (v9 = *(_QWORD *)(a2 + 48), v9 == 10))
  {
    v10 = 0;
    v47 = 0;
    goto LABEL_14;
  }
  v50 = *(WebCore::SpeechSynthesisUtterance **)(a2 + 48);
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v9 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v50, a1);
    goto LABEL_11;
  }
  v12 = *(WTF::StringImpl **)(v9 + 8);
  if ((v12 & 1) != 0)
  {
    v12 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v9, a1);
    if (!v12)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (v12)
LABEL_9:
    *(_DWORD *)v12 += 2;
LABEL_10:
  v49 = v12;
LABEL_11:
  if (*((_DWORD *)v11 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
    v10 = v49;
    if (hasExceptionsAfterHandlingTraps)
    {
      v47 = 1;
      v49 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v45);
        else
          *(_DWORD *)v10 -= 2;
      }
      v16 = 0;
      v40 = 1;
      goto LABEL_36;
    }
  }
  else
  {
    v10 = v49;
  }
  v47 = 0;
LABEL_14:
  v46 = 0;
  v49 = v10;
  WebCore::SpeechSynthesisUtterance::create(v8, &v49, v7, (uint64_t *)&v50);
  v49 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v13);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))v50 != &off_1E33670D0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F9DD94);
  }
  v16 = (JSCell *)WebCore::createWrapper<WebCore::SpeechSynthesisUtterance,WebCore::SpeechSynthesisUtterance>(*(JSC::VM **)(v5 + 40), (JSC::VM *)&v50, v14);
  v17 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v17 & 0xFFFE000000000002) != 0)
    goto LABEL_31;
  Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v17);
  if (!Object)
    goto LABEL_31;
  v20 = Object;
  if (Object == *(JSC::JSGlobalObject **)(a2 + 24))
    goto LABEL_31;
  v21 = (JSC::VM *)*((_QWORD *)a1 + 7);
  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v19);
  if (*((_DWORD *)v21 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
      goto LABEL_31;
  }
  v25 = *((_QWORD *)FunctionRealm + 412);
  if (!v25)
    goto LABEL_28;
  v26 = *(_DWORD *)(v25 - 8);
  v27 = ((unint64_t)&WebCore::JSSpeechSynthesisUtterance::s_info
       + ~((_QWORD)&WebCore::JSSpeechSynthesisUtterance::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesisUtterance::s_info
                                                                          + ~((_QWORD)&WebCore::JSSpeechSynthesisUtterance::s_info << 32)) >> 22);
  v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
  v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
  v30 = v26 & ((v29 >> 31) ^ v29);
  v31 = *(char ***)(v25 + 16 * v30);
  if (v31 != &WebCore::JSSpeechSynthesisUtterance::s_info)
  {
    v32 = 1;
    while (v31)
    {
      v30 = ((_DWORD)v30 + v32) & v26;
      v31 = *(char ***)(v25 + 16 * v30);
      ++v32;
      if (v31 == &WebCore::JSSpeechSynthesisUtterance::s_info)
        goto LABEL_27;
    }
    goto LABEL_28;
  }
LABEL_27:
  v22 = *(WebCore::JSDOMGlobalObject **)(v25 + 16 * v30 + 8);
  if (!v22)
  {
LABEL_28:
    v33 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v21, FunctionRealm, v22);
    Structure = WebCore::JSSpeechSynthesisUtterancePrototype::createStructure((uint64_t *)v21, (uint64_t)FunctionRealm, v33);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v37 = (JSC::JSCell *)WebCore::JSSpeechSynthesisUtterancePrototype::create(v21, Structure, v35, v36);
    v38 = WebCore::JSSpeechSynthesisUtterance::createStructure((uint64_t *)v21, (uint64_t)FunctionRealm, v37);
    v22 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v38, (uint64_t)&WebCore::JSSpeechSynthesisUtterance::s_info);
  }
  SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v20, v22, v23);
  if (!*((_DWORD *)v21 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) == 0)
    JSC::JSObject::setStructure(v16, v21, SubclassStructure);
LABEL_31:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v16 = 0;
  if (v50)
  {
    if (*((_DWORD *)v50 + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v50, v15);
      bmalloc::api::isoDeallocate(v42, v43);
    }
    else
    {
      --*((_DWORD *)v50 + 8);
    }
  }
  v40 = 0;
LABEL_36:
  ((void (*)(WebCore::SpeechSynthesisUtterance **, uint64_t *))off_1E33088B8[v40])(&v50, &v46);
  return v16;
}

uint64_t WebCore::JSSpeechSynthesisUtterance::prototype(WebCore::JSSpeechSynthesisUtterance *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSpeechSynthesisUtterance::s_info
      + ~((_QWORD)&WebCore::JSSpeechSynthesisUtterance::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesisUtterance::s_info
                                                                         + ~((_QWORD)&WebCore::JSSpeechSynthesisUtterance::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSpeechSynthesisUtterance::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSpeechSynthesisUtterance::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSSpeechSynthesisUtterancePrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSSpeechSynthesisUtterancePrototype::create(this, Structure, v16, v17);
    v19 = WebCore::JSSpeechSynthesisUtterance::createStructure((uint64_t *)this, (uint64_t)a2, v18);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v19, (uint64_t)&WebCore::JSSpeechSynthesisUtterance::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSSpeechSynthesisUtterance::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 40);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSpeechSynthesisUtterance::JSSpeechSynthesisUtterance(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 40;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 40;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

uint64_t WebCore::JSSpeechSynthesisUtterance::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 - 8);
  *a2 = v2 - 40;
  return this;
}

unint64_t WebCore::JSSpeechSynthesisUtterance::createPrototype(WebCore::JSSpeechSynthesisUtterance *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  Structure = WebCore::JSSpeechSynthesisUtterancePrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSSpeechSynthesisUtterancePrototype::create(this, Structure, v7, v8);
}

uint64_t WebCore::JSSpeechSynthesisUtterancePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSpeechSynthesisUtterancePrototype::create(WebCore::JSSpeechSynthesisUtterancePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<14u>(this, (uint64_t)&WebCore::JSSpeechSynthesisUtterance::s_info, (uint64_t)&WebCore::JSSpeechSynthesisUtterancePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSpeechSynthesisUtterance>,(WebCore::DOMConstructorID)210>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1680);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructor<WebCore::JSSpeechSynthesisUtterance>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSSpeechSynthesisUtterance::prototype((WebCore::JSSpeechSynthesisUtterance *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1680) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSpeechSynthesisUtteranceConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSpeechSynthesisUtterancePrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSpeechSynthesisUtterance>,(WebCore::DOMConstructorID)210>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSpeechSynthesisUtterance_text(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 24) + 16);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

BOOL WebCore::setJSSpeechSynthesisUtterance_text(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSpeechSynthesisUtterance::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSpeechSynthesisUtterance::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v21 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(this + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v20 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v20;
    if (hasExceptionsAfterHandlingTraps)
    {
      v19 = 1;
      v20 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v15 = 0;
      v14 = 1;
      goto LABEL_29;
    }
  }
  else
  {
    v11 = v20;
  }
  v19 = 0;
  v18 = 0;
  v12 = *(_QWORD *)(v9 + 24);
  if (v11)
    *(_DWORD *)v11 += 2;
  v13 = *(WTF::StringImpl **)(v12 + 16);
  *(_QWORD *)(v12 + 16) = v11;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
      if (!v11)
        goto LABEL_36;
      goto LABEL_26;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (!v11)
  {
LABEL_36:
    v14 = 0;
    goto LABEL_28;
  }
LABEL_26:
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    goto LABEL_36;
  }
  v14 = 0;
  *(_DWORD *)v11 -= 2;
LABEL_28:
  v15 = 1;
LABEL_29:
  ((void (*)(unint64_t *, uint64_t *))off_1E33088B8[v14])(&v21, &v18);
  return v15;
}

uint64_t WebCore::jsSpeechSynthesisUtterance_lang(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 24) + 24);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

BOOL WebCore::setJSSpeechSynthesisUtterance_lang(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSpeechSynthesisUtterance::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSpeechSynthesisUtterance::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v21 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(this + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v20 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v20;
    if (hasExceptionsAfterHandlingTraps)
    {
      v19 = 1;
      v20 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v15 = 0;
      v14 = 1;
      goto LABEL_29;
    }
  }
  else
  {
    v11 = v20;
  }
  v19 = 0;
  v18 = 0;
  v12 = *(_QWORD *)(v9 + 24);
  if (v11)
    *(_DWORD *)v11 += 2;
  v13 = *(WTF::StringImpl **)(v12 + 24);
  *(_QWORD *)(v12 + 24) = v11;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
      if (!v11)
        goto LABEL_36;
      goto LABEL_26;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (!v11)
  {
LABEL_36:
    v14 = 0;
    goto LABEL_28;
  }
LABEL_26:
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    goto LABEL_36;
  }
  v14 = 0;
  *(_DWORD *)v11 -= 2;
LABEL_28:
  v15 = 1;
LABEL_29:
  ((void (*)(unint64_t *, uint64_t *))off_1E33088B8[v14])(&v21, &v18);
  return v15;
}

unint64_t WebCore::jsSpeechSynthesisUtterance_voice(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  v3 = *(WTF **)(*(_QWORD *)(a2 + 24) + 32);
  if (v3)
    return WebCore::wrap<WebCore::SpeechSynthesisVoice>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v3);
  else
    return 2;
}

uint64_t WebCore::setJSSpeechSynthesisUtterance_voice(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  WTF::StringImpl **v19;
  uint64_t v20;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSSpeechSynthesisUtterance::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSSpeechSynthesisUtterance::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v8 = *(_QWORD *)(a2 + 24);
    v20 = *(_QWORD *)(a1 + 56);
    if ((a3 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v9 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
    v10 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
    v11 = (char **)(16 * v9);
    if ((_DWORD)v9)
      v12 = v11 == &WebCore::JSSpeechSynthesisVoice::s_info;
    else
      v12 = 1;
    if (!v12)
    {
      do
      {
        v11 = (char **)v11[2];
        v10 = v11 != 0;
      }
      while (v11 != &WebCore::JSSpeechSynthesisVoice::s_info && v11 != 0);
    }
    if (!v10 || (v15 = *(_QWORD *)(a3 + 24)) == 0)
    {
LABEL_24:
      WebCore::throwAttributeTypeError(a1, (int)&v20, "SpeechSynthesisUtterance", 25, "voice", 6, "SpeechSynthesisVoice", 21);
      return 0;
    }
    ++*(_DWORD *)(v15 + 8);
    v16 = *(_DWORD **)(v8 + 32);
    *(_QWORD *)(v8 + 32) = v15;
    if (v16)
    {
      if (v16[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      else
        --v16[2];
    }
    v17 = *(_QWORD *)(v8 + 24);
    v18 = *(_DWORD **)(v15 + 16);
    if (v18)
      ++*v18;
    v19 = *(WTF::StringImpl ***)(v17 + 32);
    *(_QWORD *)(v17 + 32) = v18;
    if (v19)
      WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v19, (WTF::StringImpl *)a2);
  }
  return 1;
}

unint64_t WebCore::jsSpeechSynthesisUtterance_volume(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 24) + 40);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSpeechSynthesisUtterance_volume(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  float v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSpeechSynthesisUtterance::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSpeechSynthesisUtterance::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  v13 = fminf(v12, 1.0);
  if (v13 < 0.0)
    v13 = 0.0;
  *(float *)(*(_QWORD *)(v10 + 24) + 40) = v13;
  return 1;
}

unint64_t WebCore::jsSpeechSynthesisUtterance_rate(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 24) + 44);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSpeechSynthesisUtterance_rate(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  float v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSpeechSynthesisUtterance::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSpeechSynthesisUtterance::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  v13 = fminf(v12, 10.0);
  if (v13 < 0.1)
    v13 = 0.1;
  *(float *)(*(_QWORD *)(v10 + 24) + 44) = v13;
  return 1;
}

unint64_t WebCore::jsSpeechSynthesisUtterance_pitch(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 24) + 48);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSpeechSynthesisUtterance_pitch(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  float v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSpeechSynthesisUtterance::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSpeechSynthesisUtterance::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  v13 = fminf(v12, 2.0);
  if (v13 < 0.0)
    v13 = 0.0;
  *(float *)(*(_QWORD *)(v10 + 24) + 48) = v13;
  return 1;
}

uint64_t WebCore::jsSpeechSynthesisUtterance_onstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1960), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore *)((char *)v5 - 40), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechSynthesisUtterance_onstart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechSynthesisUtterance::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechSynthesisUtterance::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1960), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::EventTarget *)((char *)v11 - 40), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechSynthesisUtterance_onend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 736), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore *)((char *)v5 - 40), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechSynthesisUtterance_onend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechSynthesisUtterance::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechSynthesisUtterance::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 736), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::EventTarget *)((char *)v11 - 40), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechSynthesisUtterance_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore *)((char *)v5 - 40), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechSynthesisUtterance_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechSynthesisUtterance::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechSynthesisUtterance::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 784), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::EventTarget *)((char *)v11 - 40), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechSynthesisUtterance_onpause(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1424), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore *)((char *)v5 - 40), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechSynthesisUtterance_onpause(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechSynthesisUtterance::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechSynthesisUtterance::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1424), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::EventTarget *)((char *)v11 - 40), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechSynthesisUtterance_onresume(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1720), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore *)((char *)v5 - 40), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechSynthesisUtterance_onresume(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechSynthesisUtterance::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechSynthesisUtterance::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1720), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::EventTarget *)((char *)v11 - 40), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechSynthesisUtterance_onmark(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1176), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore *)((char *)v5 - 40), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechSynthesisUtterance_onmark(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechSynthesisUtterance::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechSynthesisUtterance::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1176), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::EventTarget *)((char *)v11 - 40), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsSpeechSynthesisUtterance_onboundary(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 312), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore *)((char *)v5 - 40), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSSpeechSynthesisUtterance_onboundary(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSpeechSynthesisUtterance::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSpeechSynthesisUtterance::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 312), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::EventTarget *)((char *)v11 - 40), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSSpeechSynthesisUtterance::subspaceForImpl(WebCore::JSSpeechSynthesisUtterance *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1704);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1704);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1704);
    *(_QWORD *)(v8 + 1704) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1704);
  *(_QWORD *)(v3 + 1704) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSpeechSynthesisUtteranceOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 32);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 24)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 40) + 64))(v5 - 40), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSSpeechSynthesisUtteranceOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::SpeechSynthesisUtterance *v4;
  int v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::SpeechSynthesisUtterance *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (WebCore::SpeechSynthesisUtterance *)(v3 - 40);
  v5 = *(_DWORD *)(v3 - 8);
  *(_DWORD *)(v3 - 8) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(WebCore::SpeechSynthesisUtterance **)(v10 + 16 * v16);
      if (v17 != v4)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(WebCore::SpeechSynthesisUtterance **)(v10 + 16 * v16);
          ++v18;
          if (v17 == v4)
            goto LABEL_12;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_12:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            v29 = v3;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v3 = v29;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 8) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (v5)
  {
    *(_DWORD *)(v3 - 8) = v5;
  }
  else
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v4, a2);
    bmalloc::api::isoDeallocate(v7, v8);
  }
}

unint64_t WebCore::createWrapper<WebCore::SpeechSynthesisUtterance,WebCore::SpeechSynthesisUtterance>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  WebCore::JSSpeechSynthesisUtterance *v22;
  _QWORD *v23;
  unint64_t SlowCase;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *Allocator;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSSpeechSynthesisUtterance::s_info
        + ~((_QWORD)&WebCore::JSSpeechSynthesisUtterance::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesisUtterance::s_info
                                                                           + ~((_QWORD)&WebCore::JSSpeechSynthesisUtterance::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSSpeechSynthesisUtterance::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSSpeechSynthesisUtterance::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSSpeechSynthesisUtterancePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSSpeechSynthesisUtterancePrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSSpeechSynthesisUtterance::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSSpeechSynthesisUtterance::s_info);
LABEL_8:
  v22 = (WebCore::JSSpeechSynthesisUtterance *)*((_QWORD *)a1 + 7);
  v23 = (_QWORD *)WebCore::JSSpeechSynthesisUtterance::subspaceForImpl(v22, a2);
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_9:
    v23[3] = SlowCase + 32;
    goto LABEL_10;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v37 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v37);
    v23[5] = SlowCase + (int)v37;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  v25 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v26 = v25 + 40;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v26;
  if (*((_BYTE *)v22 + 755))
    __dmb(0xAu);
  v27 = *((_QWORD *)a1 + 415);
  if ((byte_1EE336A40 & 1) == 0)
  {
    qword_1EE336A38 = (uint64_t)&off_1E3307DB0;
    byte_1EE336A40 = 1;
  }
  if (v5)
    v28 = (uint64_t *)(v5 + 48);
  else
    v28 = 0;
  if (!*(_DWORD *)(v27 + 48))
  {
    if ((SlowCase & 8) != 0)
      v29 = (SlowCase - 112) | 1;
    else
      v29 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v29 & 1) != 0)
      v30 = v29 + 47;
    else
      v30 = *(_QWORD *)v29 + 32;
    Allocator = *(_QWORD **)(v30 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v30 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336A38;
    Allocator[2] = v27;
    v32 = *v28;
    *v28 = (uint64_t)Allocator;
    if (!v32)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v32 + 8) = 3;
    return SlowCase;
  }
  v39 = v5;
  if ((SlowCase & 8) != 0)
    v34 = (SlowCase - 112) | 1;
  else
    v34 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v34 & 1) != 0)
    v35 = v34 + 47;
  else
    v35 = *(_QWORD *)v34 + 32;
  v36 = *(_QWORD **)(v35 + 16);
  if (!v36)
    v36 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v35 + 16) = *v36;
  *v36 = SlowCase;
  v36[1] = &qword_1EE336A38;
  v36[2] = v27;
  v38 = v36;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v27 + 32), &v39, (uint64_t *)&v38);
  v32 = (uint64_t)v38;
  if (v38)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::SpeechSynthesisUtterance>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t result;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::SpeechSynthesisUtterance *v18;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v10 = *(_QWORD *)(v3 + 32);
    if (!v10)
      goto LABEL_5;
    v11 = *(_DWORD *)(v10 - 8);
    v12 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(_QWORD *)(v10 + 16 * v15);
    if (v16 != a3)
    {
      v17 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v17) & v11;
        v16 = *(_QWORD *)(v10 + 16 * v15);
        ++v17;
        if (v16 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(_QWORD *)(v10 + 16 * v15 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 48);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 32);
  v18 = (WebCore::SpeechSynthesisUtterance *)a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 == &off_1E33670D0)
  {
    v5 = WebCore::createWrapper<WebCore::SpeechSynthesisUtterance,WebCore::SpeechSynthesisUtterance>(a2, (JSC::VM *)&v18, (WebCore::JSDOMGlobalObject *)a3);
    if (v18)
    {
      if (*((_DWORD *)v18 + 8) == 1)
      {
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v18, v6);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      else
      {
        --*((_DWORD *)v18 + 8);
      }
    }
    return v5;
  }
  result = 684;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSpeechSynthesisUtterance::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSSpeechSynthesisUtterance::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSSpeechSynthesisUtterance::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24) - 40;
  else
    return 0;
}

_DWORD *WebCore::JSSpeechSynthesisVoice::destroy(WebCore::JSSpeechSynthesisVoice *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSpeechSynthesisVoice::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSpeechSynthesisVoicePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSpeechSynthesisVoicePrototype::create(WebCore::JSSpeechSynthesisVoicePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSSpeechSynthesisVoice::s_info, &WebCore::JSSpeechSynthesisVoicePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechSynthesisVoice>,(WebCore::DOMConstructorID)211>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1688);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechSynthesisVoice>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSpeechSynthesisVoice::s_info
         + ~((_QWORD)&WebCore::JSSpeechSynthesisVoice::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesisVoice::s_info
                                                                        + ~((_QWORD)&WebCore::JSSpeechSynthesisVoice::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSpeechSynthesisVoice::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSpeechSynthesisVoice::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSpeechSynthesisVoicePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSpeechSynthesisVoicePrototype::create((WebCore::JSSpeechSynthesisVoicePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSpeechSynthesisVoice::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSpeechSynthesisVoice::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1688) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSpeechSynthesisVoiceConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSpeechSynthesisVoicePrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSpeechSynthesisVoice>,(WebCore::DOMConstructorID)211>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSpeechSynthesisVoice_voiceURI(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 8);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsSpeechSynthesisVoice_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 16);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsSpeechSynthesisVoice_lang(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 24);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsSpeechSynthesisVoice_localService(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 32))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsSpeechSynthesisVoice_default(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 33))
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSSpeechSynthesisVoiceOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSpeechSynthesisVoiceOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SpeechSynthesisVoice>(uint64_t a1, WTF *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a2 + 2);
  if (*(void (***)(WebCore::SpeechSynthesisVoice *__hidden))a2 != off_1E33671C0)
  {
    __break(0xC471u);
    JUMPOUT(0x194FA1C00);
  }
  v14 = *(_QWORD *)(a1 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSSpeechSynthesisVoice::s_info
         + ~((_QWORD)&WebCore::JSSpeechSynthesisVoice::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesisVoice::s_info
                                                                        + ~((_QWORD)&WebCore::JSSpeechSynthesisVoice::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSSpeechSynthesisVoice::s_info)
    {
LABEL_15:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_17;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSSpeechSynthesisVoice::s_info)
          goto LABEL_15;
      }
    }
  }
  v23 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSSpeechSynthesisVoicePrototype::createStructure(v23, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSSpeechSynthesisVoicePrototype::create((WebCore::JSSpeechSynthesisVoicePrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSSpeechSynthesisVoice::createStructure(v23, a1, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)a1, v28, (uint64_t)&WebCore::JSSpeechSynthesisVoice::s_info);
LABEL_17:
  v29 = *(_QWORD *)(a1 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 1712);
  if (v32)
    goto LABEL_37;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_22:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 1712))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 1712);
    *(_QWORD *)(v35 + 1712) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 1712);
  *(_QWORD *)(v31 + 1712) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_37:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336A50 & 1) == 0)
  {
    qword_1EE336A48 = (uint64_t)&off_1E3307DE0;
    byte_1EE336A50 = 1;
  }
  v53 = a2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336A48;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSStaticRange::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 11);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::StaticRange::visitNodesConcurrently(*(_QWORD *)(a1 + 24), a2);
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSStaticRange::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  return WebCore::StaticRange::visitNodesConcurrently(*(_QWORD *)(a1 + 24), a2);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSStaticRange>::construct(JSC::VM **a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  JSC::JSCell *v6;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  JSCell *v24;
  int v25;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  WebCore::Node *v30;
  void *v31;
  WebCore::Node *v32;
  JSC::VM *v33;
  uint64_t v34;
  JSC::VM *v35;
  JSC::VM *v36;
  JSC::JSCell *v37;
  JSC::JSGlobalObject *v38;
  JSC::JSObject *v39;
  JSC::JSGlobalObject *v40;
  JSC::VM *v41;
  JSC::Structure *v42;
  uint64_t FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSObject *v52;
  uint64_t v53;
  unint64_t Structure;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t SubclassStructure;
  JSValue v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  JSValue v62;
  WebCore::JSStaticRange *v63;
  JSC::VM *v64;
  WebCore::JSDOMGlobalObject *v65;
  int v66;
  JSC::VM *v67;
  WTF::StringImpl *v68;
  WebCore::Node *v69;
  int v70;
  int v71[2];
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74;
  int v75;
  WebCore::Node *v76;
  int v77;
  int v78;
  _DWORD v79[2];

  v3 = a1[7];
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v59.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, (JSC::JSGlobalObject *)a1, v59);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(JSC::JSCell **)(a2 + 48);
  v67 = a1[7];
  if (((unint64_t)v6 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_10:
    WebCore::throwRequiredMemberTypeError((int)a1, (int)&v67, "endContainer", 13, "StaticRangeInit", 16, "Node", 5);
LABEL_11:
    v78 = 1;
LABEL_35:
    v24 = 0;
    v25 = 1;
LABEL_36:
    ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E330B2D0[v25])(&v67, &v74);
    return v24;
  }
  if (((unint64_t)v6 & 0xFFFE000000000002) != 0)
    goto LABEL_87;
  Object = JSC::JSCell::getObject(v6);
  if (!Object)
    goto LABEL_87;
  v8 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(v8, (JSC::JSGlobalObject *)a1, (unint64_t)v74);
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v9);
    else
      *(_DWORD *)v74 -= 2;
  }
  if (*((_DWORD *)v67 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v67))
    goto LABEL_11;
  if (v10 == 10)
    goto LABEL_10;
  v74 = a1[7];
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) < 0xF0u || (v11 = *(_QWORD *)(v10 + 24)) == 0)
  {
LABEL_87:
    JSC::throwTypeError();
    goto LABEL_11;
  }
  *(_DWORD *)(v11 + 24) += 2;
  WTF::AtomStringImpl::addLiteral();
  v13 = JSC::JSObject::get(v8, (JSC::JSGlobalObject *)a1, (unint64_t)v74);
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v12);
    else
      *(_DWORD *)v74 -= 2;
  }
  if (*((_DWORD *)v67 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v67))
    goto LABEL_29;
  if (v13 == 10)
  {
    v14 = "endOffset";
    v15 = "unsigned long";
    v16 = (int)a1;
    v17 = 10;
    v18 = 14;
LABEL_28:
    WebCore::throwRequiredMemberTypeError(v16, (int)&v67, v14, v17, "StaticRangeInit", 16, v15, v18);
LABEL_29:
    v23 = 0;
    goto LABEL_30;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)a1, v13, v71);
  if (v71[1])
    goto LABEL_29;
  v66 = v71[0];
  WTF::AtomStringImpl::addLiteral();
  v20 = v74;
  v22 = JSC::JSObject::get(v8, (JSC::JSGlobalObject *)a1, (unint64_t)v74);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v21);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*((_DWORD *)v67 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v67) & 1) != 0)
    goto LABEL_29;
  if (v22 == 10)
  {
    v14 = "startContainer";
    v15 = "Node";
    v16 = (int)a1;
    v17 = 15;
    v18 = 5;
    goto LABEL_28;
  }
  v74 = a1[7];
  if ((v22 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v22 + 5) < 0xF0u || (v23 = *(_QWORD *)(v22 + 24)) == 0)
  {
    JSC::throwTypeError();
    goto LABEL_29;
  }
  *(_DWORD *)(v23 + 24) += 2;
  WTF::AtomStringImpl::addLiteral();
  v27 = v74;
  v29 = JSC::JSObject::get(v8, (JSC::JSGlobalObject *)a1, (unint64_t)v74);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v28);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (!*((_DWORD *)v67 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v67) & 1) == 0)
  {
    if (v29 == 10)
    {
      WebCore::throwRequiredMemberTypeError((int)a1, (int)&v67, "startOffset", 12, "StaticRangeInit", 16, "unsigned long", 14);
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)a1, v29, v79);
      if (!v79[1])
      {
        v74 = (WTF::StringImpl *)v23;
        v75 = v79[0];
        v76 = (WebCore::Node *)v11;
        v77 = v66;
        v78 = 0;
        goto LABEL_56;
      }
    }
  }
LABEL_30:
  v78 = 1;
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v19);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (!v23)
    goto LABEL_35;
  if (*(_DWORD *)(v23 + 24) != 2)
  {
    *(_DWORD *)(v23 + 24) -= 2;
    goto LABEL_35;
  }
  if ((*(_WORD *)(v23 + 30) & 0x400) != 0)
    goto LABEL_35;
  WebCore::Node::removedLastRef((WebCore::Node *)v23, v19);
  v25 = v78;
  if (v78)
  {
    v24 = 0;
    if (v78 == -1)
      return v24;
    goto LABEL_36;
  }
LABEL_56:
  v67 = v74;
  LODWORD(v68) = v75;
  v30 = v76;
  v74 = 0;
  v76 = 0;
  v69 = v30;
  v70 = v77;
  WebCore::StaticRange::create((uint64_t)&v67, (uint64_t)v71);
  v32 = v69;
  v69 = 0;
  if (v32)
  {
    if (*((_DWORD *)v32 + 6) == 2)
    {
      if ((*((_WORD *)v32 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v32, v31);
    }
    else
    {
      *((_DWORD *)v32 + 6) -= 2;
    }
  }
  v33 = v67;
  v67 = 0;
  if (v33)
  {
    if (*((_DWORD *)v33 + 6) == 2)
    {
      if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v33, v31);
    }
    else
    {
      *((_DWORD *)v33 + 6) -= 2;
    }
  }
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    goto LABEL_117;
  if (!v73)
  {
    v34 = *(_QWORD *)(v5 + 40);
    v35 = *(JSC::VM **)v71;
    *(_QWORD *)v71 = 0;
    v67 = v35;
    if (*(void (***)(WebCore::StaticRange *__hidden))v35 != off_1E33A7EF0)
    {
      __break(0xC471u);
      JUMPOUT(0x194FA2484);
    }
    v24 = (JSCell *)WebCore::createWrapper<WebCore::StaticRange,WebCore::StaticRange>(v34, (uint64_t *)&v67);
    v36 = v67;
    v67 = 0;
    if (v36)
    {
      if (*((_DWORD *)v36 + 2) == 1)
        (*(void (**)(JSC::VM *))(*(_QWORD *)v36 + 8))(v36);
      else
        --*((_DWORD *)v36 + 2);
    }
    goto LABEL_68;
  }
  if (v73 == 1)
  {
    v60 = (WTF::StringImpl *)LOBYTE(v71[0]);
    LOBYTE(v67) = v71[0];
    v61 = v72;
    v72 = 0;
    v68 = v61;
    if (!*((_QWORD *)v3 + 2))
    {
      v62.super.isa = (Class)WebCore::createDOMException((JSC *)a1, (JSC::JSGlobalObject *)LOBYTE(v71[0]), (JSC::JSGlobalObject *)&v68);
      JSC::VM::throwException(v3, (JSC::JSGlobalObject *)a1, v62);
      v61 = v68;
    }
    v68 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v60);
      else
        *(_DWORD *)v61 -= 2;
    }
    v24 = 0;
LABEL_68:
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
      goto LABEL_117;
    v37 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v37 & 0xFFFE000000000002) != 0
      || (v38 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v37)) == 0
      || (v40 = v38, v38 == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v41 = a1[7], FunctionRealm = JSC::getFunctionRealm((JSC *)a1, v38, v39), *((_DWORD *)v41 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v41) & 1) != 0)
    {
LABEL_82:
      if (!*((_DWORD *)v3 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) == 0)
      {
LABEL_83:
        if (v73 != -1)
          ((void (*)(JSC::VM **, int *))off_1E330B2C0[v73])(&v67, v71);
        v25 = 0;
        goto LABEL_36;
      }
LABEL_117:
      v24 = 0;
      goto LABEL_83;
    }
    v44 = *(_QWORD *)(FunctionRealm + 3296);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 - 8);
      v46 = ((unint64_t)&WebCore::JSStaticRange::s_info + ~((_QWORD)&WebCore::JSStaticRange::s_info << 32)) ^ (((unint64_t)&WebCore::JSStaticRange::s_info + ~((_QWORD)&WebCore::JSStaticRange::s_info << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = v45 & ((v48 >> 31) ^ v48);
      v50 = *(char ***)(v44 + 16 * v49);
      if (v50 == &WebCore::JSStaticRange::s_info)
      {
LABEL_78:
        v52 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
        if (v52)
        {
LABEL_80:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)a1, v40, v52, v42);
          if (!*((_DWORD *)v41 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v41) & 1) == 0)
            JSC::JSObject::setStructure(v24, v41, SubclassStructure);
          goto LABEL_82;
        }
      }
      else
      {
        v51 = 1;
        while (v50)
        {
          v49 = ((_DWORD)v49 + v51) & v45;
          v50 = *(char ***)(v44 + 16 * v49);
          ++v51;
          if (v50 == &WebCore::JSStaticRange::s_info)
            goto LABEL_78;
        }
      }
    }
    v53 = WebCore::getDOMStructure<WebCore::JSAbstractRange>(v41, (JSC::JSCell **)FunctionRealm);
    Structure = WebCore::JSStaticRangePrototype::createStructure((uint64_t *)v41, FunctionRealm, *(JSC::JSCell **)(v53 + 48));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v56 = (JSC::JSCell *)WebCore::JSStaticRangePrototype::create(v41, (JSC::VM *)FunctionRealm, Structure, v55);
    v57 = WebCore::JSStaticRange::createStructure((uint64_t *)v41, FunctionRealm, v56);
    v52 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSStaticRange::s_info);
    goto LABEL_80;
  }
  v63 = (WebCore::JSStaticRange *)std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSStaticRange::prototype(v63, v64, v65);
}

uint64_t WebCore::JSStaticRange::prototype(WebCore::JSStaticRange *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSStaticRange::s_info + ~((_QWORD)&WebCore::JSStaticRange::s_info << 32)) ^ (((unint64_t)&WebCore::JSStaticRange::s_info + ~((_QWORD)&WebCore::JSStaticRange::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSStaticRange::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSStaticRange::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = WebCore::getDOMStructure<WebCore::JSAbstractRange>(this, (JSC::JSCell **)a2);
    Structure = WebCore::JSStaticRangePrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v14 + 48));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSStaticRangePrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSStaticRange::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSStaticRange::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSStaticRange::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAbstractRange::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAbstractRange::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAbstractRange::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSStaticRange::visitChildren(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::StaticRange::visitNodesConcurrently(*(_QWORD *)(a1 + 24), a2);
}

uint64_t WebCore::JSStaticRange::visitChildren(WebCore::JSStaticRange *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::StaticRange::visitNodesConcurrently(*((_QWORD *)this + 3), a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSStaticRange::JSStaticRange(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

uint64_t WebCore::JSStaticRange::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return this;
}

unint64_t WebCore::JSStaticRange::createPrototype(WebCore::JSStaticRange *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = WebCore::getDOMStructure<WebCore::JSAbstractRange>(this, a2);
  Structure = WebCore::JSStaticRangePrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v5 + 48));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSStaticRangePrototype::create(this, (JSC::VM *)a2, Structure, v7);
}

uint64_t WebCore::JSStaticRangePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSStaticRangePrototype::create(WebCore::JSStaticRangePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSStaticRange::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSStaticRangePrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSStaticRange>,(WebCore::DOMConstructorID)480>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3840);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbstractRange>,(WebCore::DOMConstructorID)413>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructor<WebCore::JSStaticRange>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSStaticRange::prototype((WebCore::JSStaticRange *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3840) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsStaticRangeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSStaticRangePrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSStaticRange>,(WebCore::DOMConstructorID)480>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSStaticRange::subspaceForImpl(WebCore::JSStaticRange *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3920);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 3920);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 3920);
    *(_QWORD *)(v8 + 3920) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 3920);
  *(_QWORD *)(v3 + 3920) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::StaticRange,WebCore::StaticRange>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSAbstractRange *v14;
  uint64_t v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *Allocator;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSStaticRange::s_info + ~((_QWORD)&WebCore::JSStaticRange::s_info << 32)) ^ (((unint64_t)&WebCore::JSStaticRange::s_info + ~((_QWORD)&WebCore::JSStaticRange::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSStaticRange::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSStaticRange::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(WebCore::JSAbstractRange **)(a1 + 56);
  v15 = WebCore::getDOMStructure<WebCore::JSAbstractRange>(v14, (JSC::JSCell **)a1);
  Structure = WebCore::JSStaticRangePrototype::createStructure((uint64_t *)v14, a1, *(JSC::JSCell **)(v15 + 48));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSStaticRangePrototype::create(v14, (JSC::VM *)a1, Structure, v17);
  v19 = WebCore::JSStaticRange::createStructure((uint64_t *)v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSStaticRange::s_info);
LABEL_8:
  v20 = WebCore::JSStaticRange::create(v13, (JSC::VM *)a1, a2);
  v21 = v20;
  v22 = *(_QWORD *)(a1 + 3320);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AbstractRange *)::owner = (uint64_t)&unk_1E3225520;
  }
  v23 = (uint64_t *)(v22 + 32);
  v30 = v4;
  if (v20)
  {
    v26 = v22;
    if ((v20 & 8) != 0)
      v27 = (v20 - 112) | 1;
    else
      v27 = v20 & 0xFFFFFFFFFFFFC000;
    if ((v27 & 1) != 0)
      v28 = v27 + 47;
    else
      v28 = *(_QWORD *)v27 + 32;
    Allocator = *(_QWORD **)(v28 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v28 + 16) = *Allocator;
    *Allocator = v21;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AbstractRange *)::owner;
    Allocator[2] = v26;
  }
  else
  {
    Allocator = 0;
  }
  v29 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v23, &v30, (uint64_t *)&v29);
  if (v29)
    v29[1] = 3;
  return v21;
}

uint64_t WebCore::wrap<WebCore::StaticRange>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t result;
  _DWORD *v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  v15 = (_DWORD *)a3;
  if (*(void (***)(WebCore::StaticRange *__hidden))a3 == off_1E33A7EF0)
  {
    v12 = WebCore::createWrapper<WebCore::StaticRange,WebCore::StaticRange>(a2, (uint64_t *)&v15);
    v13 = v15;
    v15 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    return v12;
  }
  result = 322;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSStaticRange::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSStaticRange::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSStaticRange::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSStereoPannerNode>::construct(JSC *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char **v18;
  BOOL v19;
  JSCell *v21;
  uint64_t v22;
  JSC::JSCell *v23;
  int v24;
  uint64_t Object;
  JSC::Structure *v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  float v35;
  WebCore::BaseAudioContext *v36;
  WTF::StringImpl *v37;
  WebCore::StereoPannerNode *v38;
  WebCore::StereoPannerNode *v39;
  WTF::StringImpl *v40;
  WebCore::JSDOMGlobalObject *v41;
  int v42;
  unsigned __int8 v43;
  JSC::VM *v44;
  WebCore::AudioNode *v45;
  WebCore::AudioNode *v46;
  JSC::JSCell *v47;
  JSC::JSGlobalObject *v48;
  JSC::JSObject *v49;
  JSC::JSGlobalObject *v50;
  JSC::VM *v51;
  WebCore::JSDOMGlobalObject *v52;
  JSC::Structure *v53;
  JSC::VM *FunctionRealm;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char **v61;
  int v62;
  JSC::JSCell *v63;
  unint64_t Structure;
  JSC::Structure *v65;
  JSC::JSCell *v66;
  uint64_t v67;
  unint64_t SubclassStructure;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  WebCore::AudioNode *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  WebCore::AudioNode *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WebCore::AudioNode *v80;
  JSC::VM *v81;
  double v82;
  JSValue v83;
  JSValue v84;
  char hasExceptionsAfterHandlingTraps;
  JSC::VM *v86;
  double v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  WebCore::AudioNode *v95;
  WTF::StringImpl *v96;
  int v97;
  char v98;
  __int16 v99;
  char v100;
  float v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  int v104;
  __int16 v105;
  char v106;
  __int16 v107;
  char v108;
  __int16 v109;
  char v110;
  JSC::VM *v111;
  WTF::StringImpl *v112;
  unsigned __int8 v113;

  v10 = *((_QWORD *)this + 7);
  v11 = *(int *)(a2 + 32);
  if ((_DWORD)v11 == 1)
  {
    v83.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException((JSC::VM *)v10, this, v83);
  }
  v13 = *(_QWORD *)(a2 + 24);
  v14 = 2;
  v15 = *(_QWORD *)(a2 + 48);
  v95 = (WebCore::AudioNode *)*((_QWORD *)this + 7);
  if ((v15 & 0xFFFE000000000002) != 0)
    goto LABEL_13;
  v16 = *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C);
  v17 = *(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) != 0;
  v18 = (char **)(16 * v16);
  if ((_DWORD)v16)
    v19 = v18 == &WebCore::JSBaseAudioContext::s_info;
  else
    v19 = 1;
  if (!v19)
  {
    do
    {
      v18 = (char **)v18[2];
      v17 = v18 != 0;
    }
    while (v18 != &WebCore::JSBaseAudioContext::s_info && v18 != 0);
  }
  if (!v17)
  {
LABEL_13:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v95, 0, "context", 8, "StereoPannerNode", 17, a8, 0, 0, "BaseAudioContext", 17);
    return 0;
  }
  v22 = *(_QWORD *)(v15 + 24);
  v94 = v13;
  if ((unint64_t)(v11 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v24 = 10;
    goto LABEL_25;
  }
  v23 = *(JSC::JSCell **)(a2 + 56);
  v102 = v10;
  v24 = v23 & 0xFFFFFFF7;
  if (((unint64_t)v23 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_25:
    LOBYTE(v30) = 0;
    v31 = 0;
    LOBYTE(v32) = 0;
    v33 = 0;
    v29 = 0;
    v34 = 0;
    v35 = 0.0;
    goto LABEL_26;
  }
  v93 = v22;
  if (((unint64_t)v23 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v23)) == 0)
  {
    JSC::throwTypeError();
    return 0;
  }
  v26 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v28 = JSC::JSObject::get(v26, this, (unint64_t)v95);
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
      WTF::StringImpl::destroy(v95, v27);
    else
      *(_DWORD *)v95 -= 2;
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 0;
  if (v28 == 10)
  {
    v92 = 0;
    v29 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v28, &v95);
    if (HIDWORD(v95))
      return 0;
    v29 = v95;
    v89 = v95 >> 8;
    v92 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v70 = v95;
  v72 = JSC::JSObject::get(v26, this, (unint64_t)v95);
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v71);
    else
      *(_DWORD *)v70 -= 2;
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 0;
  if (v72 == 10)
  {
    v91 = 0;
    LOBYTE(v32) = 0;
  }
  else
  {
    v95 = (WebCore::AudioNode *)*((_QWORD *)this + 7);
    v73 = v95;
    v32 = WebCore::parseEnumeration<WebCore::ChannelCountMode>(this, v72);
    if (*((_DWORD *)v73 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v73) & 1) != 0)
      return 0;
    if ((v32 & 0xFF00000000) == 0)
      goto LABEL_117;
    v90 = v32 >> 8;
    v91 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v74 = v95;
  v76 = JSC::JSObject::get(v26, this, (unint64_t)v95);
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v75);
    else
      *(_DWORD *)v74 -= 2;
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 0;
  if (v76 == 10)
  {
    v31 = 0;
    LOBYTE(v30) = 0;
    goto LABEL_73;
  }
  v95 = (WebCore::AudioNode *)*((_QWORD *)this + 7);
  v77 = v95;
  v30 = WebCore::parseEnumeration<WebCore::ChannelInterpretation>(this, v76);
  if (*((_DWORD *)v77 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v77) & 1) != 0)
    return 0;
  if ((v30 & 0xFF00000000) == 0)
  {
LABEL_117:
    JSC::throwTypeError();
    return 0;
  }
  v88 = v30 >> 8;
  v31 = 1;
LABEL_73:
  WTF::AtomStringImpl::addLiteral();
  v78 = v95;
  v80 = (WebCore::AudioNode *)JSC::JSObject::get(v26, this, (unint64_t)v95);
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v79);
    else
      *(_DWORD *)v78 -= 2;
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 0;
  v35 = 0.0;
  if (v80 == (WebCore::AudioNode *)10)
  {
    v22 = v93;
    v33 = v91;
    v34 = v92;
    v24 = v89;
    v14 = v90;
    v8 = v88;
  }
  else
  {
    v95 = v80;
    v81 = (JSC::VM *)*((_QWORD *)this + 7);
    v111 = v81;
    if ((unint64_t)v80 >= 0xFFFE000000000000)
    {
      v82 = (double)(int)v80;
    }
    else if ((unint64_t)v80 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v86 = v81;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v95, this);
      v81 = v86;
    }
    else
    {
      *(_QWORD *)&v82 = (char *)v80 - 0x2000000000000;
    }
    if (*((_DWORD *)v81 + 20))
    {
      v87 = v82;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v81);
      v82 = v87;
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
        return 0;
    }
    if ((*(_QWORD *)&v82 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (v22 = v93, v33 = v91, v34 = v92, v14 = v90, v8 = v88, v82 < -3.40282347e38)
      || v82 > 3.40282347e38)
    {
      JSC::throwTypeError();
      return 0;
    }
    v35 = v82;
    v24 = v89;
  }
LABEL_26:
  v36 = (WebCore::BaseAudioContext *)(v22 - 32);
  *(_WORD *)((char *)&v95 + 5) = v109;
  HIBYTE(v95) = v110;
  v37 = (WTF::StringImpl *)(v32 | (v14 << 8));
  *(_WORD *)((char *)&v96 + 5) = v107;
  HIBYTE(v96) = v108;
  v99 = v105;
  v100 = v106;
  LODWORD(v95) = v29 | (v24 << 8);
  BYTE4(v95) = v34;
  LODWORD(v96) = (_DWORD)v37;
  BYTE4(v96) = v33;
  v97 = v30 | (v8 << 8);
  v98 = v31;
  v101 = v35;
  v38 = (WebCore::StereoPannerNode *)bmalloc::api::isoAllocate();
  v39 = WebCore::StereoPannerNode::StereoPannerNode(v38, v36, v101);
  v102 = 0x100000002;
  LODWORD(v103) = 0;
  WebCore::AudioNode::handleAudioNodeOptions((uint64_t)v39, (unsigned int *)&v95, (unsigned int *)&v102, (uint64_t)&v111);
  v42 = v113;
  if (v113)
  {
    v43 = v111;
    v37 = v112;
    LOBYTE(v102) = (_BYTE)v111;
    v103 = v112;
    v104 = 1;
    if (v38)
      WebCore::AudioNode::deref(v38);
  }
  else
  {
    v102 = (uint64_t)v38;
    v104 = 0;
    v43 = v38;
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
  {
    v21 = 0;
    goto LABEL_50;
  }
  if (v42)
  {
    LOBYTE(v95) = v43;
    v103 = 0;
    v96 = v37;
    if (!*(_QWORD *)(v10 + 16))
    {
      v84.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v43, (JSC::JSGlobalObject *)&v96);
      JSC::VM::throwException((JSC::VM *)v10, this, v84);
      v37 = v96;
    }
    v96 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v40);
      else
        *(_DWORD *)v37 -= 2;
    }
    v21 = 0;
  }
  else
  {
    v44 = *(JSC::VM **)(v94 + 40);
    v45 = (WebCore::AudioNode *)v102;
    v102 = 0;
    v95 = v45;
    if (*(uint64_t (***)(WebCore::AudioNode *__hidden))v45 != off_1E336BBC0)
    {
      __break(0xC471u);
      JUMPOUT(0x194FA3D00);
    }
    v21 = (JSCell *)WebCore::createWrapper<WebCore::StereoPannerNode,WebCore::StereoPannerNode>(v44, (uint64_t *)&v95, v41);
    v46 = v95;
    v95 = 0;
    if (v46)
      WebCore::AudioNode::deref(v46);
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    goto LABEL_106;
  v47 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v47 & 0xFFFE000000000002) != 0)
    goto LABEL_49;
  v48 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v47);
  if (!v48)
    goto LABEL_49;
  v50 = v48;
  if (v48 == *(JSC::JSGlobalObject **)(a2 + 24))
    goto LABEL_49;
  v51 = (JSC::VM *)*((_QWORD *)this + 7);
  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, v48, v49);
  if (*((_DWORD *)v51 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v51) & 1) != 0)
      goto LABEL_49;
  }
  v55 = *((_QWORD *)FunctionRealm + 412);
  if (!v55)
    goto LABEL_46;
  v56 = *(_DWORD *)(v55 - 8);
  v57 = ((unint64_t)&WebCore::JSStereoPannerNode::s_info + ~((_QWORD)&WebCore::JSStereoPannerNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSStereoPannerNode::s_info + ~((_QWORD)&WebCore::JSStereoPannerNode::s_info << 32)) >> 22);
  v58 = 9 * ((v57 + ~(v57 << 13)) ^ ((v57 + ~(v57 << 13)) >> 8));
  v59 = (v58 ^ (v58 >> 15)) + ~((v58 ^ (v58 >> 15)) << 27);
  v60 = v56 & ((v59 >> 31) ^ v59);
  v61 = *(char ***)(v55 + 16 * v60);
  if (v61 != &WebCore::JSStereoPannerNode::s_info)
  {
    v62 = 1;
    while (v61)
    {
      v60 = ((_DWORD)v60 + v62) & v56;
      v61 = *(char ***)(v55 + 16 * v60);
      ++v62;
      if (v61 == &WebCore::JSStereoPannerNode::s_info)
        goto LABEL_45;
    }
    goto LABEL_46;
  }
LABEL_45:
  v52 = *(WebCore::JSDOMGlobalObject **)(v55 + 16 * v60 + 8);
  if (!v52)
  {
LABEL_46:
    v63 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v51, FunctionRealm, v52);
    Structure = WebCore::JSStereoPannerNodePrototype::createStructure((uint64_t *)v51, (uint64_t)FunctionRealm, v63);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v66 = (JSC::JSCell *)WebCore::JSStereoPannerNodePrototype::create(v51, FunctionRealm, Structure, v65);
    v67 = WebCore::JSStereoPannerNode::createStructure((uint64_t *)v51, (uint64_t)FunctionRealm, v66);
    v52 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v67, (uint64_t)&WebCore::JSStereoPannerNode::s_info);
  }
  SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v50, v52, v53);
  if (!*((_DWORD *)v51 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v51) & 1) == 0)
    JSC::JSObject::setStructure(v21, v51, SubclassStructure);
LABEL_49:
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
LABEL_106:
    v21 = 0;
LABEL_50:
  if (v104 != -1)
    ((void (*)(WebCore::AudioNode **, uint64_t *))off_1E330B308[v104])(&v95, &v102);
  return v21;
}

uint64_t WebCore::JSStereoPannerNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSStereoPannerNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSStereoPannerNodePrototype::create(WebCore::JSStereoPannerNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSStereoPannerNode::s_info, (uint64_t)&WebCore::JSStereoPannerNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSStereoPannerNode>,(WebCore::DOMConstructorID)265>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2120);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSStereoPannerNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSStereoPannerNode::s_info + ~((_QWORD)&WebCore::JSStereoPannerNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSStereoPannerNode::s_info + ~((_QWORD)&WebCore::JSStereoPannerNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSStereoPannerNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSStereoPannerNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSStereoPannerNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSStereoPannerNodePrototype::create((WebCore::JSStereoPannerNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSStereoPannerNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSStereoPannerNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2120) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsStereoPannerNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSStereoPannerNodePrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSStereoPannerNode>,(WebCore::DOMConstructorID)265>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsStereoPannerNode_pan(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 152));
}

uint64_t WebCore::JSStereoPannerNode::subspaceForImpl(WebCore::JSStereoPannerNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2144);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 2144);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 2144);
    *(_QWORD *)(v8 + 2144) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 2144);
  *(_QWORD *)(v3 + 2144) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::StereoPannerNode,WebCore::StereoPannerNode>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSAudioNode *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSStereoPannerNode::s_info + ~((_QWORD)&WebCore::JSStereoPannerNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSStereoPannerNode::s_info + ~((_QWORD)&WebCore::JSStereoPannerNode::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSStereoPannerNode::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSStereoPannerNode::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSAudioNode *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v15, a1, a3);
    Structure = WebCore::JSStereoPannerNodePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSStereoPannerNodePrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSStereoPannerNode::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSStereoPannerNode::s_info);
  }
  v21 = WebCore::JSStereoPannerNode::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AnalyserNode,WebCore::JSAnalyserNode>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::wrap<WebCore::StereoPannerNode>(int a1, JSC::VM *a2, WebCore::AudioNode *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::JSDOMGlobalObject *v8;
  WebCore::AudioNode *v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  int v18;
  WebCore::AudioNode *v19;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v11 = *(_QWORD *)(v5 + 32);
    if (!v11)
      goto LABEL_5;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
    if (v17 != this)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
        ++v18;
        if (v17 == this)
          goto LABEL_14;
      }
      goto LABEL_5;
    }
LABEL_14:
    v6 = *(_QWORD *)(v11 + 16 * v16 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  WebCore::AudioNode::ref(this);
  v19 = this;
  if (*(uint64_t (***)(WebCore::AudioNode *__hidden))this == off_1E336BBC0)
  {
    v7 = WebCore::createWrapper<WebCore::StereoPannerNode,WebCore::StereoPannerNode>(a2, (uint64_t *)&v19, v8);
    v9 = v19;
    v19 = 0;
    if (v9)
      WebCore::AudioNode::deref(v9);
    return v7;
  }
  result = 252;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSStorage::put(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  JSC::JSGlobalObject *v7;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  JSC::VM *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  JSC::VM *v31;
  char v32;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned __int16 *v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t result;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  JSC::VM *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  int v74;
  int OwnProperty;
  int v76;
  JSValue v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  int v80;
  int v81;
  _BYTE *v82;
  uint64_t v83;
  unsigned int v84;
  unsigned __int16 *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  JSC::VM *v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  JSC::VM *v94;
  char OwnStaticPropertySlot;
  JSC::VM *v96;
  int v97;
  int v98;
  int v99;
  JSC::VM *v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  unsigned __int8 *v105;
  int v106;
  int v107;
  const WTF::StringImpl *v108;
  const unsigned __int8 *v109;
  char v110;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  uint64_t v121;
  unsigned int v122;
  unsigned __int8 *v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unint64_t v143;
  unint64_t v144;
  JSC::VM *v145;
  JSC::VM *v146;
  JSC::VM *v147;
  JSC::VM *v148;
  JSC::VM *v149;
  JSC::VM *v150;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  char v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  unsigned __int8 v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169[5];
  int v170;
  char v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;

  v5 = a4;
  v7 = a2;
  v176 = *MEMORY[0x1E0C80C00];
  v9 = *(WTF::StringImpl **)(a5 + 8);
  if (v9 != (WTF::StringImpl *)a1)
    return JSC::JSObject::put();
  v10 = *((_QWORD *)a2 + 7);
  if (a3 && (*(_BYTE *)(a3 + 16) & 0x20) != 0)
    goto LABEL_122;
  v156 = 0xFFFFFFFF00000000;
  v158 = 0;
  v159 = 0;
  v157 = (uint64_t)v9;
  v160 = 196608;
  v161 = 0;
  v164 = 0;
  v165 = 0;
  v162 = v10;
  ++*(_DWORD *)(v10 + 4);
  v163 = 1;
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
  if (!v11)
    v11 = *(_QWORD *)(a1 + 16);
  if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) < 0x17u)
    goto LABEL_70;
  v12 = (_BYTE *)(v11 + 6);
  v13 = (JSC::VM *)(a3 >> 4);
  if ((*(_BYTE *)(v11 + 6) & 8) != 0)
  {
    v29 = v11;
LABEL_152:
    v5 = a4;
    if (!a3)
      goto LABEL_172;
    v81 = *(_DWORD *)(a3 + 16);
    if ((v81 & 0x20) != 0)
      goto LABEL_172;
    v82 = *(_BYTE **)(a3 + 8);
    v83 = *(unsigned int *)(a3 + 4);
    if ((v81 & 4) != 0)
    {
      if (!(_DWORD)v83)
        goto LABEL_172;
      v84 = *v82 - 48;
      if (v84 > 9 || v83 >= 2 && *v82 == 48)
        goto LABEL_172;
      v120 = v82 + 1;
      v121 = v83 - 1;
      v5 = a4;
      while (v121)
      {
        if (v84 <= 0x19999999)
        {
          v122 = *v120 - 48;
          if (v122 <= 9)
          {
            v47 = __CFADD__(v122, 10 * v84);
            v84 = v122 + 10 * v84;
            ++v120;
            --v121;
            if (!v47)
              continue;
          }
        }
        goto LABEL_172;
      }
      v5 = a4;
      if (v84 == -1)
        goto LABEL_172;
    }
    else
    {
      if (!(_DWORD)v83)
        goto LABEL_172;
      v84 = *(unsigned __int16 *)v82 - 48;
      if (v84 > 9 || v83 >= 2 && *(_WORD *)v82 == 48)
        goto LABEL_172;
      v85 = (unsigned __int16 *)(v82 + 2);
      v86 = v83 - 1;
      while (v86)
      {
        if (v84 <= 0x19999999)
        {
          v87 = *v85 - 48;
          if (v87 <= 9)
          {
            v47 = __CFADD__(v87, 10 * v84);
            v84 = v87 + 10 * v84;
            ++v85;
            --v86;
            if (!v47)
              continue;
          }
        }
        goto LABEL_172;
      }
      if (v84 == -1)
      {
LABEL_172:
        v148 = (JSC::VM *)*((_QWORD *)v7 + 7);
        while (1)
        {
          v88 = 16 * (*(_DWORD *)v29 & 0xFFFFFFFE);
          if ((*(_BYTE *)(v29 + 6) & 8) != 0)
            break;
          if ((_DWORD)v13)
          {
            if ((v13 & ~*(_DWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x20)) == 0)
            {
              v89 = v13;
              v90 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE)), v148);
              v13 = v89;
              if (v90)
              {
                v168 = (WTF::StringImpl *)a3;
                v91 = JSC::PropertyTable::get(v90, (uint64_t *)&v168);
                v13 = v89;
                if ((_DWORD)v91 != -1)
                {
                  if ((int)v91 > 63)
                  {
                    v112 = *(_QWORD *)(v29 + 8) - 8;
                    v113 = 0x3F00000000 - (v91 << 32);
                  }
                  else
                  {
                    v112 = v29 + 16;
                    v113 = v91 << 32;
                  }
                  v114 = *(_QWORD *)(v112 + (v113 >> 29));
                  if ((v114 & 0xFFFE000000000002) != 0)
                  {
LABEL_240:
                    v154 = v114;
                    v158 = v29;
                    v156 = __PAIR64__(v91, HIDWORD(v91));
                    v46 = 1;
                    LOWORD(v160) = 257;
                  }
                  else
                  {
                    v115 = *(unsigned __int8 *)(v114 + 5);
                    if (v115 != 6)
                    {
                      if (v115 != 5)
                        goto LABEL_240;
                      JSC::JSObject::fillGetterPropertySlot();
LABEL_248:
                      v46 = 1;
LABEL_169:
                      v5 = a4;
                      goto LABEL_71;
                    }
                    v116 = *(_DWORD *)(v88 + 16) & 3;
                    v117 = *(_QWORD *)(v114 + 16);
                    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v114 & 0xFFFFFFFE) + 0x4C))
                    {
                      v119 = *(_QWORD *)(v114 + 24);
                      v118 = *(_QWORD *)(v114 + 32);
                      v154 = *(_QWORD *)(v114 + 8);
                      v155 = v117;
                      LODWORD(v156) = HIDWORD(v91);
                      v158 = v29;
                      BYTE1(v160) = 3;
                      v46 = 1;
                      if (v116 != 2)
                        LOBYTE(v160) = 1;
                      HIBYTE(v160) = 1;
                      v164 = v119;
                      v165 = v118;
                    }
                    else
                    {
                      v154 = *(_QWORD *)(v114 + 8);
                      v155 = v117;
                      LODWORD(v156) = HIDWORD(v91);
                      v158 = v29;
                      v46 = 1;
                      BYTE1(v160) = 3;
                      if (v116 != 2)
                        LOBYTE(v160) = 1;
                    }
                  }
LABEL_68:
                  v5 = a4;
                  goto LABEL_71;
                }
              }
            }
          }
          if ((*(_BYTE *)(v29 + 6) & 0x20) != 0)
          {
            v94 = v13;
            OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot();
            v13 = v94;
            if ((OwnStaticPropertySlot & 1) != 0)
              goto LABEL_83;
          }
LABEL_179:
          if ((*(_WORD *)(v88 + 12) & 0x800) != 0)
          {
            v92 = *(_DWORD *)v29;
            if (BYTE2(v160) != 3)
            {
              v100 = v13;
              v101 = 16 * (v92 & 0xFFFFFFFE);
              if ((*(_WORD *)(v101 + 12) & 0x800) != 0)
              {
                v93 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v101 + 76)
                                                                                + 0xB0))(v29, v7);
              }
              else
              {
                v93 = *(_QWORD *)(v101 + 48);
                if (!v93)
                  v93 = *(_QWORD *)(v29 + 16);
              }
              if (*((_DWORD *)v148 + 20))
              {
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v148);
                v5 = a4;
                v13 = v100;
                if ((hasExceptionsAfterHandlingTraps & 1) != 0)
                  goto LABEL_70;
              }
              else
              {
                v5 = a4;
                v13 = v100;
              }
              goto LABEL_183;
            }
          }
          else
          {
            v92 = *(_DWORD *)v29;
          }
          v93 = *(_QWORD *)(16 * (v92 & 0xFFFFFFFE) + 0x30);
          if (!v93)
            v93 = *(_QWORD *)(v29 + 16);
LABEL_183:
          if ((v93 & 0xFFFE000000000002) != 0)
            goto LABEL_70;
          v46 = 0;
          v29 = v93;
          if (*(unsigned __int8 *)(v93 + 5) <= 0x16u)
            goto LABEL_71;
        }
        v96 = v13;
        v97 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C) + 0x68))(v29, v7, a3, &v154);
        v98 = v97;
        if (*((_DWORD *)v148 + 20))
        {
          v102 = JSC::VM::hasExceptionsAfterHandlingTraps(v148);
          if (((v102 | v98) & 1) != 0)
            goto LABEL_345;
        }
        else if ((v97 & 1) != 0)
        {
          goto LABEL_248;
        }
        if (BYTE2(v160) == 3)
        {
          if (v161)
            goto LABEL_253;
          v99 = *(unsigned __int8 *)(v29 + 5);
          if (v99 == 61)
          {
LABEL_194:
            v5 = a4;
            v13 = v96;
            goto LABEL_179;
          }
        }
        else
        {
          v99 = *(unsigned __int8 *)(v29 + 5);
          if (v99 == 61)
          {
            v5 = a4;
            v13 = v96;
            if (BYTE2(v160) == 1)
              goto LABEL_70;
            goto LABEL_179;
          }
        }
        if (!a3)
          goto LABEL_194;
        if ((v99 - 50) < 0xFFFFFFF5)
          goto LABEL_194;
        v103 = *(_DWORD *)(a3 + 16);
        if ((v103 & 0x20) != 0)
          goto LABEL_194;
        v104 = *(unsigned int *)(a3 + 4);
        if (!(_DWORD)v104)
          goto LABEL_194;
        v105 = *(unsigned __int8 **)(a3 + 8);
        if ((v103 & 4) != 0)
        {
          v106 = *v105;
          if ((_DWORD)v104 == 1)
          {
LABEL_215:
            v5 = a4;
            v13 = v96;
            if ((v106 - 48) < 0xA)
              goto LABEL_70;
            goto LABEL_179;
          }
          if (v106 == 45)
          {
            v107 = v105[1];
LABEL_219:
            if ((v107 - 48) >= 0xA)
            {
              if ((_DWORD)v104 != 9 || v107 != 73)
                goto LABEL_194;
            }
            else if ((_DWORD)v104 == 2)
            {
              goto LABEL_253;
            }
LABEL_230:
            v144 = v144 & 0xFFFFFF0000000000 | v104 | ((unint64_t)((v103 >> 2) & 1) << 32);
            JSC::jsToNumber();
            v108 = (const WTF::StringImpl *)WTF::numberToString();
            v110 = WTF::equal((WTF *)a3, v108, v109);
            v5 = a4;
            v13 = v96;
            if ((v110 & 1) != 0)
              goto LABEL_70;
            goto LABEL_179;
          }
        }
        else
        {
          v106 = *(unsigned __int16 *)v105;
          if ((_DWORD)v104 == 1)
            goto LABEL_215;
          if (v106 == 45)
          {
            v107 = *((unsigned __int16 *)v105 + 1);
            goto LABEL_219;
          }
        }
        if ((v106 - 48) >= 0xA && ((_DWORD)v104 != 8 || v106 != 73) && ((_DWORD)v104 != 3 || v106 != 78))
          goto LABEL_194;
        goto LABEL_230;
      }
    }
    v146 = (JSC::VM *)*((_QWORD *)v7 + 7);
    v150 = (JSC::VM *)v84;
    while (1)
    {
      v135 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
      v136 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, JSC::VM *, uint64_t *))(16
                                                                                             * *(unsigned int *)(v135 + 0x4C)
                                                                                             + 0x70))(v11, v7, v150, &v154);
      v137 = v136;
      if (*((_DWORD *)v146 + 20))
      {
        v102 = JSC::VM::hasExceptionsAfterHandlingTraps(v146);
        if (((v102 | v137) & 1) != 0)
          goto LABEL_345;
      }
      else if ((v136 & 1) != 0)
      {
        goto LABEL_248;
      }
      v138 = BYTE2(v160);
      if (BYTE2(v160) == 3)
      {
        if (v161)
          goto LABEL_253;
        v139 = *(unsigned __int8 *)(v11 + 5);
        if (v139 == 61)
        {
LABEL_328:
          v141 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
          if (!v141)
            v141 = *(_QWORD *)(v11 + 16);
          goto LABEL_330;
        }
      }
      else
      {
        v139 = *(unsigned __int8 *)(v11 + 5);
        if (v139 == 61)
        {
          if (BYTE2(v160) == 1)
            goto LABEL_253;
          goto LABEL_326;
        }
      }
      if ((v139 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v11 + 40) & 7u) > 2)
        {
          LOBYTE(v168) = 0;
          LOBYTE(v169[0]) = 0;
          v143 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, (WTF *)&v168);
          if ((_BYTE)a2)
            v140 = v143;
          else
            v140 = 0;
        }
        else
        {
          v140 = *(_QWORD *)(v11 + 24);
        }
        if (v140 <= (unint64_t)v150)
          goto LABEL_253;
        v138 = BYTE2(v160);
      }
LABEL_326:
      if ((*(_WORD *)(v135 + 12) & 0x800) == 0 || v138 == 3)
        goto LABEL_328;
      if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v141 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0xB0))(v11, v7);
      }
      else
      {
        v141 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
        if (!v141)
          v141 = *(_QWORD *)(v11 + 16);
      }
      if (*((_DWORD *)v146 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v146) & 1) != 0)
        goto LABEL_253;
LABEL_330:
      if ((v141 & 0xFFFE000000000002) != 0)
        goto LABEL_253;
      v46 = 0;
      v142 = *(unsigned __int8 *)(v141 + 5);
      v11 = v141;
      v5 = a4;
      if (v142 <= 0x16)
        goto LABEL_71;
    }
  }
  v14 = v11;
  while (1)
  {
    v15 = *(_DWORD *)v14 & 0xFFFFFFFE;
    v16 = 16 * v15;
    if (!(_DWORD)v13 || (v13 & ~*(_DWORD *)(16 * v15 + 0x20)) != 0)
      goto LABEL_23;
    v17 = *(_QWORD *)(16 * v15 + 0x58);
    if (!v17)
    {
      v28 = *(_QWORD *)(16 * v15 + 0x40);
      if (!v28 || *(_BYTE *)(v28 + 5) != 1 && *(_DWORD *)(v28 + 80) < 2u)
        goto LABEL_23;
      v147 = v13;
      v17 = JSC::Structure::materializePropertyTable((JSC::Structure *)v16, (JSC::VM *)v10);
      v13 = v147;
      if (!v17)
        goto LABEL_23;
    }
    if (!*(_DWORD *)(v17 + 24))
      goto LABEL_23;
    v18 = *(_QWORD *)(v17 + 16);
    v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
    v20 = *(unsigned int *)(v17 + 8);
    v21 = *(_DWORD *)(a3 + 16);
    if ((v18 & 1) == 0)
      break;
    if ((v21 & 0x20) != 0)
      v21 = *(_DWORD *)(a3 + 32);
    v22 = *(_DWORD *)(v17 + 12);
    v23 = (v21 >> 8) & *(_QWORD *)&v22;
    v24 = *(unsigned __int8 *)(v19 + v23);
    if (*(_BYTE *)(v19 + v23))
    {
      v25 = v19 + v20;
      v26 = 1;
      while (1)
      {
        v27 = *(_QWORD *)(v25 + 8 * (v24 - 1));
        if (a3 == (v27 & 0xFFFFFFFFFFFFLL))
          break;
        v23 = ((_DWORD)v23 + v26) & v22;
        v24 = *(unsigned __int8 *)(v19 + v23);
        ++v26;
        if (!*(_BYTE *)(v19 + v23))
          goto LABEL_23;
      }
      v30 = (v27 >> 16) & 0xFF00000000 | HIBYTE(v27);
      goto LABEL_31;
    }
LABEL_23:
    if ((*v12 & 0x20) != 0)
    {
      v31 = v13;
      v32 = JSC::JSObject::getOwnStaticPropertySlot();
      v13 = v31;
      if ((v32 & 1) != 0)
      {
        v46 = 1;
        goto LABEL_68;
      }
    }
    v29 = *(_QWORD *)(v16 + 48);
    if (!v29)
      v29 = *(_QWORD *)(v14 + 16);
    if ((v29 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v29 + 5) < 0x17u)
    {
      if (!a3)
      {
        v46 = 0;
        goto LABEL_68;
      }
      v39 = *(_DWORD *)(a3 + 16);
      v5 = a4;
      if ((v39 & 0x20) != 0)
        goto LABEL_70;
      v40 = *(_BYTE **)(a3 + 8);
      v41 = *(unsigned int *)(a3 + 4);
      if ((v39 & 4) != 0)
      {
        if (!(_DWORD)v41 || (v42 = *v40 - 48, v42 > 9) || v41 >= 2 && *v40 == 48)
        {
LABEL_253:
          v46 = 0;
          goto LABEL_169;
        }
        v123 = v40 + 1;
        v124 = v41 - 1;
        v5 = a4;
        while (v124)
        {
          if (v42 > 0x19999999)
            goto LABEL_253;
          v125 = *v123 - 48;
          if (v125 > 9)
            goto LABEL_253;
          v46 = 0;
          v47 = __CFADD__(v125, 10 * v42);
          v42 = v125 + 10 * v42;
          ++v123;
          --v124;
          if (v47)
            goto LABEL_71;
        }
        v5 = a4;
        if (v42 == -1)
        {
LABEL_70:
          v46 = 0;
          goto LABEL_71;
        }
      }
      else
      {
        if (!(_DWORD)v41)
          goto LABEL_70;
        v42 = *(unsigned __int16 *)v40 - 48;
        if (v42 > 9 || v41 >= 2 && *(_WORD *)v40 == 48)
          goto LABEL_70;
        v43 = (unsigned __int16 *)(v40 + 2);
        v44 = v41 - 1;
        while (v44)
        {
          if (v42 > 0x19999999)
            goto LABEL_70;
          v45 = *v43 - 48;
          if (v45 > 9)
            goto LABEL_70;
          v46 = 0;
          v47 = __CFADD__(v45, 10 * v42);
          v42 = v45 + 10 * v42;
          ++v43;
          --v44;
          if (v47)
            goto LABEL_71;
        }
        if (v42 == -1)
          goto LABEL_70;
      }
      v145 = (JSC::VM *)*((_QWORD *)v7 + 7);
      v149 = (JSC::VM *)v42;
      while (2)
      {
        v126 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
        v127 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, JSC::VM *, uint64_t *))(16
                                                                                               * *(unsigned int *)(v126 + 0x4C)
                                                                                               + 0x70))(v11, v7, v149, &v154);
        v128 = v127;
        if (*((_DWORD *)v145 + 20))
        {
          v102 = JSC::VM::hasExceptionsAfterHandlingTraps(v145);
          if (((v102 | v128) & 1) != 0)
          {
LABEL_345:
            v46 = v102 ^ 1;
            goto LABEL_169;
          }
        }
        else if ((v127 & 1) != 0)
        {
          goto LABEL_248;
        }
        v129 = BYTE2(v160);
        if (BYTE2(v160) == 3)
        {
          if (v161)
            goto LABEL_253;
          v130 = *(unsigned __int8 *)(v11 + 5);
          if (v130 == 61)
          {
LABEL_293:
            v132 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
            if (!v132)
              v132 = *(_QWORD *)(v11 + 16);
            goto LABEL_295;
          }
LABEL_286:
          if ((v130 - 39) <= 0xA)
          {
            if ((*(_BYTE *)(v11 + 40) & 7u) > 2)
            {
              LOBYTE(v168) = 0;
              LOBYTE(v169[0]) = 0;
              v134 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, (WTF *)&v168);
              if ((_BYTE)a2)
                v131 = v134;
              else
                v131 = 0;
            }
            else
            {
              v131 = *(_QWORD *)(v11 + 24);
            }
            if (v131 <= (unint64_t)v149)
              goto LABEL_253;
            v129 = BYTE2(v160);
          }
        }
        else
        {
          v130 = *(unsigned __int8 *)(v11 + 5);
          if (v130 != 61)
            goto LABEL_286;
          if (BYTE2(v160) == 1)
            goto LABEL_253;
        }
        if ((*(_WORD *)(v126 + 12) & 0x800) == 0 || v129 == 3)
          goto LABEL_293;
        if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v132 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0xB0))(v11, v7);
        }
        else
        {
          v132 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
          if (!v132)
            v132 = *(_QWORD *)(v11 + 16);
        }
        if (*((_DWORD *)v145 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v145) & 1) != 0)
          goto LABEL_253;
LABEL_295:
        if ((v132 & 0xFFFE000000000002) != 0)
          goto LABEL_253;
        v46 = 0;
        v133 = *(unsigned __int8 *)(v132 + 5);
        v11 = v132;
        v5 = a4;
        if (v133 <= 0x16)
          goto LABEL_71;
        continue;
      }
    }
    v12 = (_BYTE *)(v29 + 6);
    v14 = v29;
    if ((*(_BYTE *)(v29 + 6) & 8) != 0)
      goto LABEL_152;
  }
  if ((v21 & 0x20) != 0)
    v21 = *(_DWORD *)(a3 + 32);
  v33 = *(_DWORD *)(v17 + 12);
  v34 = v33 & (v21 >> 8);
  v35 = *(_DWORD *)(v19 + 4 * v34);
  if (!v35)
    goto LABEL_23;
  v36 = v19 + 4 * v20;
  v37 = 1;
  while (1)
  {
    v38 = (v35 - 1);
    if (*(_QWORD *)(v36 + 16 * v38) == a3)
      break;
    v34 = (v34 + v37) & v33;
    v35 = *(_DWORD *)(v19 + 4 * v34);
    ++v37;
    if (!v35)
      goto LABEL_23;
  }
  v30 = *(unsigned int *)(v36 + 16 * v38 + 8) | ((unint64_t)*(unsigned __int8 *)(v36 + 16 * v38 + 12) << 32);
LABEL_31:
  if ((_DWORD)v30 == -1)
    goto LABEL_23;
  if ((int)v30 > 63)
  {
    v48 = *(_QWORD *)(v14 + 8) - 8;
    v49 = 0x3F00000000 - (v30 << 32);
  }
  else
  {
    v48 = v14 + 16;
    v49 = v30 << 32;
  }
  v5 = a4;
  v50 = *(_QWORD *)(v48 + (v49 >> 29));
  if ((v50 & 0xFFFE000000000002) != 0)
    goto LABEL_66;
  v51 = *(unsigned __int8 *)(v50 + 5);
  if (v51 != 6)
  {
    if (v51 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot();
LABEL_83:
      v46 = 1;
      goto LABEL_71;
    }
LABEL_66:
    v154 = v50;
    v158 = v14;
    v156 = __PAIR64__(v30, HIDWORD(v30));
    v46 = 1;
    LOWORD(v160) = 257;
    goto LABEL_71;
  }
  v55 = *(_DWORD *)(v16 + 16) & 3;
  v56 = *(_QWORD *)(v50 + 16);
  if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C))
  {
    v154 = *(_QWORD *)(v50 + 8);
    v155 = v56;
    LODWORD(v156) = HIDWORD(v30);
    v158 = v14;
    v46 = 1;
    BYTE1(v160) = 3;
    if (v55 != 2)
      LOBYTE(v160) = 1;
    goto LABEL_169;
  }
  v58 = *(_QWORD *)(v50 + 24);
  v57 = *(_QWORD *)(v50 + 32);
  v154 = *(_QWORD *)(v50 + 8);
  v155 = v56;
  LODWORD(v156) = HIDWORD(v30);
  v158 = v14;
  BYTE1(v160) = 3;
  v46 = 1;
  if (v55 != 2)
    LOBYTE(v160) = 1;
  HIBYTE(v160) = 1;
  v164 = v58;
  v165 = v57;
LABEL_71:
  if (v163)
  {
    v52 = *(_DWORD *)(v162 + 4);
    if (!v52)
    {
      __break(0xC471u);
      JUMPOUT(0x194FA5374);
    }
    *(_DWORD *)(v162 + 4) = v52 - 1;
    v162 = 0;
    v163 = 0;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v59 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10);
    if (((v46 | v59) & 1) == 0)
      goto LABEL_87;
    v60 = v59;
    result = 0;
    v54 = v60 ^ 1;
    goto LABEL_118;
  }
  if ((v46 & 1) != 0)
  {
    result = 0;
    v54 = 1;
    goto LABEL_118;
  }
LABEL_87:
  v168 = (WTF::StringImpl *)v5;
  v61 = (JSC::VM *)*((_QWORD *)v7 + 7);
  if ((v5 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v5 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v168, v7);
  }
  else
  {
    v62 = *(WTF::StringImpl **)(v5 + 8);
    if ((v62 & 1) != 0)
    {
      v62 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v5, v7);
      if (v62)
LABEL_91:
        *(_DWORD *)v62 += 2;
    }
    else if (v62)
    {
      goto LABEL_91;
    }
    v166 = v62;
  }
  if (!*((_DWORD *)v61 + 20))
  {
    v63 = v166;
    goto LABEL_95;
  }
  v80 = JSC::VM::hasExceptionsAfterHandlingTraps(v61);
  v63 = v166;
  if (!v80)
  {
LABEL_95:
    v153 = 0;
    v64 = *(_QWORD *)(a1 + 24);
    if (a3)
      *(_DWORD *)a3 += 2;
    v168 = (WTF::StringImpl *)a3;
    v152 = 0;
    v166 = v63;
    v65 = *(_QWORD *)(v64 + 16);
    if (!v65)
      goto LABEL_108;
    v66 = *(_QWORD *)(v65 + 8);
    if (!v66)
      goto LABEL_108;
    v67 = *(_QWORD *)(v66 + 72);
    if (!v67)
      goto LABEL_108;
    v68 = *(_QWORD *)(v67 + 8);
    if (!v68)
      goto LABEL_108;
    if (*(_BYTE *)(v68 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x194FA5474);
    }
    v69 = *(_QWORD *)(v68 + 240);
    if (v69 && (a2 = *(JSC::JSGlobalObject **)(v69 + 8)) != 0)
    {
      v167 = 0;
      (*(void (**)(_QWORD, JSC::JSGlobalObject *, WTF::StringImpl **, WTF::StringImpl **, unsigned __int8 *))(**(_QWORD **)(v64 + 24) + 40))(*(_QWORD *)(v64 + 24), a2, &v168, &v166, &v167);
      v70 = v167;
      if (v167)
        v71 = 18;
      else
        v71 = 0;
      v63 = v166;
    }
    else
    {
LABEL_108:
      v71 = 12;
      v70 = 1;
    }
    v166 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, a2);
      else
        *(_DWORD *)v63 -= 2;
    }
    v72 = v168;
    v168 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
      {
        WTF::StringImpl::destroy(v72, a2);
        if (!v70)
          goto LABEL_116;
        goto LABEL_134;
      }
      *(_DWORD *)v72 -= 2;
    }
    if (!v70)
    {
LABEL_116:
      v73 = 0;
      goto LABEL_117;
    }
LABEL_134:
    LOBYTE(v168) = v71;
    v169[0] = 0;
    if (!*(_QWORD *)(v10 + 16))
    {
      v77.super.isa = (Class)WebCore::createDOMException(v7, (JSC::JSGlobalObject *)v71, (JSC::JSGlobalObject *)v169);
      JSC::VM::throwException((JSC::VM *)v10, v7, v77);
      v79 = v169[0];
      v169[0] = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
          WTF::StringImpl::destroy(v79, v78);
        else
          *(_DWORD *)v79 -= 2;
      }
    }
    goto LABEL_116;
  }
  v153 = 1;
  v166 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, a2);
    else
      *(_DWORD *)v63 -= 2;
  }
  v73 = 1;
LABEL_117:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E33088B8[v73])(&v168, &v152);
  v54 = 0;
  result = 1;
LABEL_118:
  if (v163)
  {
    v74 = *(_DWORD *)(v162 + 4);
    if (!v74)
    {
      __break(0xC471u);
      JUMPOUT(0x194FA5394);
    }
    *(_DWORD *)(v162 + 4) = v74 - 1;
  }
  if (v54)
  {
LABEL_122:
    v154 = 0;
    v155 = 0;
    v156 = 0;
    v157 = 14;
    v169[1] = (WTF::StringImpl *)0xFFFFFFFF00000000;
    v169[3] = 0;
    v169[4] = 0;
    v169[2] = v9;
    v170 = 0x20000;
    v171 = 0;
    LOBYTE(v172) = 0;
    v173 = 0;
    v174 = 0;
    v175 = 0;
    OwnProperty = WebCore::JSStorage::legacyPlatformObjectGetOwnProperty(a1, (uint64_t)v7, a3, (uint64_t)&v168, 1);
    if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0
      || OwnProperty
      && (JSC::PropertyDescriptor::setPropertySlot(), *(_DWORD *)(v10 + 80))
      && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    {
      result = 0;
    }
    else
    {
      result = JSC::ordinarySetWithOwnDescriptor();
    }
    if (v173)
    {
      v76 = *(_DWORD *)(v172 + 4);
      if (!v76)
      {
        __break(0xC471u);
        JUMPOUT(0x194FA5340);
      }
      *(_DWORD *)(v172 + 4) = v76 - 1;
    }
  }
  return result;
}

uint64_t WebCore::JSStorage::putByIndex(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4)
{
  JSC::JSGlobalObject *v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE *v11;
  unint64_t v12;
  JSC::VM *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  JSC::VM *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  int v49;
  WTF::StringImpl *v50;
  JSValue v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned __int16 *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unsigned int v69;
  JSC::VM *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  JSC::JSGlobalObject *v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int hasExceptionsAfterHandlingTraps;
  unsigned int v83;
  uint64_t v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  const WTF::StringImpl *v88;
  const unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  JSC::VM *v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unsigned int v109;
  unint64_t v110;
  JSC::VM *v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  JSC::JSGlobalObject *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  unsigned __int8 v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140[17];

  v5 = a2;
  v140[15] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)a2 + 7);
  JSC::Identifier::from();
  v126 = 0xFFFFFFFF00000000;
  v128 = 0;
  v129 = 0;
  v127 = a1;
  v130 = 196608;
  v131 = 0;
  v134 = 0;
  v135 = 0;
  v132 = v7;
  ++*(_DWORD *)(v7 + 4);
  v133 = 1;
  v9 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
  if (!v9)
    v9 = *(_QWORD *)(a1 + 16);
  if ((v9 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v9 + 5) < 0x17u)
    goto LABEL_43;
  v10 = v136;
  v11 = (_BYTE *)(v9 + 6);
  v12 = (unint64_t)v136 >> 4;
  v121 = v5;
  if ((*(_BYTE *)(v9 + 6) & 8) == 0)
  {
    v13 = (JSC::VM *)*((_QWORD *)v5 + 7);
    v14 = v9;
    while (1)
    {
      v15 = *(_DWORD *)v14 & 0xFFFFFFFE;
      v16 = 16 * v15;
      if ((_DWORD)v12)
      {
        if ((v12 & ~*(_DWORD *)(16 * v15 + 0x20)) == 0)
        {
          v17 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v16, v13);
          if (v17)
          {
            v139 = v136;
            v18 = JSC::PropertyTable::get(v17, (uint64_t *)&v139);
            if ((_DWORD)v18 != -1)
              break;
          }
        }
      }
      if ((*v11 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_103;
      v19 = *(_QWORD *)(v16 + 48);
      if (!v19)
        v19 = *(_QWORD *)(v14 + 16);
      if ((v19 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v19 + 5) < 0x17u)
      {
        if (v136)
        {
          v20 = *((_DWORD *)v136 + 4);
          v5 = v121;
          if ((v20 & 0x20) != 0)
            goto LABEL_43;
          v21 = (_BYTE *)*((_QWORD *)v136 + 1);
          v22 = *((unsigned int *)v136 + 1);
          if ((v20 & 4) != 0)
          {
            if (!(_DWORD)v22 || (v23 = *v21 - 48, v23 > 9) || v22 >= 2 && *v21 == 48)
            {
LABEL_135:
              v27 = 0;
LABEL_307:
              v5 = v121;
              goto LABEL_44;
            }
            v107 = v21 + 1;
            v108 = v22 - 1;
            v5 = v121;
            while (v108)
            {
              if (v23 > 0x19999999)
                goto LABEL_135;
              v109 = *v107 - 48;
              if (v109 > 9)
                goto LABEL_135;
              v27 = 0;
              v28 = __CFADD__(v109, 10 * v23);
              v23 = v109 + 10 * v23;
              ++v107;
              --v108;
              if (v28)
                goto LABEL_44;
            }
            v5 = v121;
            if (v23 == -1)
            {
LABEL_43:
              v27 = 0;
              goto LABEL_44;
            }
          }
          else
          {
            if (!(_DWORD)v22)
              goto LABEL_43;
            v23 = *(unsigned __int16 *)v21 - 48;
            if (v23 > 9 || v22 >= 2 && *(_WORD *)v21 == 48)
              goto LABEL_43;
            v24 = (unsigned __int16 *)(v21 + 2);
            v25 = v22 - 1;
            while (v25)
            {
              if (v23 > 0x19999999)
                goto LABEL_43;
              v26 = *v24 - 48;
              if (v26 > 9)
                goto LABEL_43;
              v27 = 0;
              v28 = __CFADD__(v26, 10 * v23);
              v23 = v26 + 10 * v23;
              ++v24;
              --v25;
              if (v28)
                goto LABEL_44;
            }
            if (v23 == -1)
              goto LABEL_43;
          }
          v110 = v23;
          v111 = (JSC::VM *)*((_QWORD *)v5 + 7);
          while (2)
          {
            v112 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
            v113 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v112 + 0x4C) + 0x70))(v9, v5, v110, &v124);
            v114 = v113;
            if (*((_DWORD *)v111 + 20))
            {
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v111);
              if (((hasExceptionsAfterHandlingTraps | v114) & 1) != 0)
              {
LABEL_308:
                v27 = hasExceptionsAfterHandlingTraps ^ 1;
                goto LABEL_307;
              }
            }
            else if ((v113 & 1) != 0)
            {
LABEL_306:
              v27 = 1;
              goto LABEL_307;
            }
            v115 = BYTE2(v130);
            if (BYTE2(v130) == 3)
            {
              if (v131)
                goto LABEL_135;
              v116 = *(unsigned __int8 *)(v9 + 5);
              if (v116 == 61)
              {
LABEL_289:
                v118 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
                if (!v118)
                  v118 = *(_QWORD *)(v9 + 16);
                goto LABEL_291;
              }
LABEL_282:
              if ((v116 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
                {
                  LOBYTE(v139) = 0;
                  LOBYTE(v140[0]) = 0;
                  v119 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (WTF *)&v139);
                  if ((_BYTE)v8)
                    v117 = v119;
                  else
                    v117 = 0;
                }
                else
                {
                  v117 = *(_QWORD *)(v9 + 24);
                }
                if (v117 <= v110)
                  goto LABEL_135;
                v115 = BYTE2(v130);
              }
            }
            else
            {
              v116 = *(unsigned __int8 *)(v9 + 5);
              if (v116 != 61)
                goto LABEL_282;
              if (BYTE2(v130) == 1)
                goto LABEL_135;
            }
            if ((*(_WORD *)(v112 + 12) & 0x800) == 0 || v115 == 3)
              goto LABEL_289;
            if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v118 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v9 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v9, v121);
            }
            else
            {
              v118 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
              if (!v118)
                v118 = *(_QWORD *)(v9 + 16);
            }
            if (*((_DWORD *)v111 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v111) & 1) != 0)
              goto LABEL_135;
LABEL_291:
            if ((v118 & 0xFFFE000000000002) != 0)
              goto LABEL_135;
            v27 = 0;
            v9 = v118;
            v5 = v121;
            if (*(unsigned __int8 *)(v118 + 5) <= 0x16u)
              goto LABEL_44;
            continue;
          }
        }
        v27 = 0;
LABEL_40:
        v5 = v121;
        goto LABEL_44;
      }
      v11 = (_BYTE *)(v19 + 6);
      v14 = v19;
      if ((*(_BYTE *)(v19 + 6) & 8) != 0)
        goto LABEL_114;
    }
    if ((int)v18 > 63)
    {
      v29 = *(_QWORD *)(v14 + 8) - 8;
      v30 = 0x3F00000000 - (v18 << 32);
    }
    else
    {
      v29 = v14 + 16;
      v30 = v18 << 32;
    }
    v31 = *(_QWORD *)(v29 + (v30 >> 29));
    if ((v31 & 0xFFFE000000000002) != 0)
      goto LABEL_39;
    v32 = *(unsigned __int8 *)(v31 + 5);
    if (v32 != 6)
    {
      if (v32 == 5)
      {
        JSC::JSObject::fillGetterPropertySlot();
LABEL_103:
        v27 = 1;
        goto LABEL_40;
      }
LABEL_39:
      v124 = v31;
      v128 = v14;
      v126 = __PAIR64__(v18, HIDWORD(v18));
      v27 = 1;
      LOWORD(v130) = 257;
      goto LABEL_40;
    }
    v55 = *(_DWORD *)(v16 + 16) & 3;
    v56 = *(_QWORD *)(v31 + 16);
    if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x4C))
    {
      v124 = *(_QWORD *)(v31 + 8);
      v125 = v56;
      LODWORD(v126) = HIDWORD(v18);
      v128 = v14;
      v27 = 1;
      BYTE1(v130) = 3;
      if (v55 != 2)
        LOBYTE(v130) = 1;
      goto LABEL_40;
    }
    v58 = *(_QWORD *)(v31 + 24);
    v57 = *(_QWORD *)(v31 + 32);
    v124 = *(_QWORD *)(v31 + 8);
    v125 = v56;
    LODWORD(v126) = HIDWORD(v18);
    v128 = v14;
    BYTE1(v130) = 3;
    v5 = v121;
    if (v55 != 2)
      goto LABEL_100;
    goto LABEL_221;
  }
  v19 = v9;
LABEL_114:
  v5 = v121;
  if (!v136)
    goto LABEL_149;
  v60 = *((_DWORD *)v136 + 4);
  if ((v60 & 0x20) != 0)
    goto LABEL_149;
  v61 = (_BYTE *)*((_QWORD *)v136 + 1);
  v62 = *((unsigned int *)v136 + 1);
  if ((v60 & 4) != 0)
  {
    if (!(_DWORD)v62)
      goto LABEL_149;
    v63 = *v61 - 48;
    if (v63 > 9 || v62 >= 2 && *v61 == 48)
      goto LABEL_149;
    v67 = v61 + 1;
    v68 = v62 - 1;
    while (v68)
    {
      if (v63 <= 0x19999999)
      {
        v69 = *v67 - 48;
        if (v69 <= 9)
        {
          v28 = __CFADD__(v69, 10 * v63);
          v63 = v69 + 10 * v63;
          ++v67;
          --v68;
          if (!v28)
            continue;
        }
      }
      goto LABEL_149;
    }
  }
  else
  {
    if (!(_DWORD)v62)
      goto LABEL_149;
    v63 = *(unsigned __int16 *)v61 - 48;
    if (v63 > 9 || v62 >= 2 && *(_WORD *)v61 == 48)
      goto LABEL_149;
    v64 = (unsigned __int16 *)(v61 + 2);
    v65 = v62 - 1;
    while (v65)
    {
      if (v63 <= 0x19999999)
      {
        v66 = *v64 - 48;
        if (v66 <= 9)
        {
          v28 = __CFADD__(v66, 10 * v63);
          v63 = v66 + 10 * v63;
          ++v64;
          --v65;
          if (!v28)
            continue;
        }
      }
      goto LABEL_149;
    }
  }
  if (v63 != -1)
  {
    v96 = v63;
    v97 = (JSC::VM *)*((_QWORD *)v121 + 7);
    while (1)
    {
      v98 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
      v99 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v98 + 0x4C) + 0x70))(v9, v121, v96, &v124);
      v100 = v99;
      if (*((_DWORD *)v97 + 20))
      {
        v105 = JSC::VM::hasExceptionsAfterHandlingTraps(v97);
        if (((v105 | v100) & 1) != 0)
        {
          v27 = v105 ^ 1;
          goto LABEL_44;
        }
      }
      else if ((v99 & 1) != 0)
      {
        v27 = 1;
        goto LABEL_44;
      }
      v101 = BYTE2(v130);
      if (BYTE2(v130) == 3)
      {
        if (v131)
          goto LABEL_260;
        v102 = *(unsigned __int8 *)(v9 + 5);
        if (v102 == 61)
        {
LABEL_243:
          v104 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
          if (!v104)
            v104 = *(_QWORD *)(v9 + 16);
          goto LABEL_245;
        }
      }
      else
      {
        v102 = *(unsigned __int8 *)(v9 + 5);
        if (v102 == 61)
        {
          if (BYTE2(v130) == 1)
            goto LABEL_260;
          goto LABEL_241;
        }
      }
      if ((v102 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          LOBYTE(v139) = 0;
          LOBYTE(v140[0]) = 0;
          v106 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (WTF *)&v139);
          if ((_BYTE)v8)
            v103 = v106;
          else
            v103 = 0;
        }
        else
        {
          v103 = *(_QWORD *)(v9 + 24);
        }
        if (v103 <= v96)
          goto LABEL_260;
        v101 = BYTE2(v130);
      }
LABEL_241:
      if ((*(_WORD *)(v98 + 12) & 0x800) == 0 || v101 == 3)
        goto LABEL_243;
      if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v104 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v9 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0xB0))(v9, v121);
      }
      else
      {
        v104 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
        if (!v104)
          v104 = *(_QWORD *)(v9 + 16);
      }
      if (*((_DWORD *)v97 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v97) & 1) != 0)
      {
LABEL_260:
        v27 = 0;
        goto LABEL_44;
      }
LABEL_245:
      if ((v104 & 0xFFFE000000000002) != 0)
        goto LABEL_260;
      v27 = 0;
      v9 = v104;
      if (*(unsigned __int8 *)(v104 + 5) <= 0x16u)
        goto LABEL_44;
    }
  }
LABEL_149:
  v70 = (JSC::VM *)*((_QWORD *)v121 + 7);
  while (1)
  {
    v71 = 16 * (*(_DWORD *)v19 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v19 + 6) & 8) != 0)
    {
      v78 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, WTF::StringImpl *, uint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) + 0x68))(v19, v5, v10, &v124);
      v79 = v78;
      if (*((_DWORD *)v70 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v70);
        if (((hasExceptionsAfterHandlingTraps | v79) & 1) != 0)
          goto LABEL_308;
      }
      else if ((v78 & 1) != 0)
      {
        goto LABEL_306;
      }
      if (BYTE2(v130) == 3)
      {
        if (v131)
          goto LABEL_135;
        v80 = *(unsigned __int8 *)(v19 + 5);
        if (v80 == 61)
        {
LABEL_171:
          v5 = v121;
          goto LABEL_156;
        }
      }
      else
      {
        v80 = *(unsigned __int8 *)(v19 + 5);
        if (v80 == 61)
        {
          v5 = v121;
          if (BYTE2(v130) == 1)
            goto LABEL_43;
          goto LABEL_156;
        }
      }
      if (!v10)
        goto LABEL_171;
      if ((v80 - 50) < 0xFFFFFFF5)
        goto LABEL_171;
      v83 = *((_DWORD *)v10 + 4);
      if ((v83 & 0x20) != 0)
        goto LABEL_171;
      v84 = *((unsigned int *)v10 + 1);
      if (!(_DWORD)v84)
        goto LABEL_171;
      v85 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
      if ((v83 & 4) != 0)
      {
        v86 = *v85;
        if ((_DWORD)v84 == 1)
        {
LABEL_192:
          v5 = v121;
          if ((v86 - 48) < 0xA)
            goto LABEL_43;
          goto LABEL_156;
        }
        if (v86 == 45)
        {
          v87 = v85[1];
LABEL_196:
          if ((v87 - 48) >= 0xA)
          {
            if ((_DWORD)v84 != 9 || v87 != 73)
              goto LABEL_171;
          }
          else if ((_DWORD)v84 == 2)
          {
            goto LABEL_135;
          }
LABEL_207:
          v120 = v120 & 0xFFFFFF0000000000 | v84 | ((unint64_t)((v83 >> 2) & 1) << 32);
          JSC::jsToNumber();
          v88 = (const WTF::StringImpl *)WTF::numberToString();
          v5 = v121;
          if ((WTF::equal(v10, v88, v89) & 1) != 0)
            goto LABEL_43;
          goto LABEL_156;
        }
      }
      else
      {
        v86 = *(unsigned __int16 *)v85;
        if ((_DWORD)v84 == 1)
          goto LABEL_192;
        if (v86 == 45)
        {
          v87 = *((unsigned __int16 *)v85 + 1);
          goto LABEL_196;
        }
      }
      if ((v86 - 48) >= 0xA && ((_DWORD)v84 != 8 || v86 != 73) && ((_DWORD)v84 != 3 || v86 != 78))
        goto LABEL_171;
      goto LABEL_207;
    }
    if ((_DWORD)v12)
    {
      if ((v12 & ~*(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v72 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE)), v70);
        if (v72)
        {
          v139 = v10;
          v73 = JSC::PropertyTable::get(v72, (uint64_t *)&v139);
          if ((_DWORD)v73 != -1)
            break;
        }
      }
    }
    if ((*(_BYTE *)(v19 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      goto LABEL_223;
LABEL_156:
    if ((*(_WORD *)(v71 + 12) & 0x800) == 0)
    {
      v74 = v5;
      v75 = *(_DWORD *)v19;
LABEL_158:
      v76 = *(_QWORD *)(16 * (v75 & 0xFFFFFFFE) + 0x30);
      if (!v76)
        v76 = *(_QWORD *)(v19 + 16);
      goto LABEL_160;
    }
    v74 = v5;
    v75 = *(_DWORD *)v19;
    if (BYTE2(v130) == 3)
      goto LABEL_158;
    v81 = 16 * (v75 & 0xFFFFFFFE);
    if ((*(_WORD *)(v81 + 12) & 0x800) != 0)
    {
      v76 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v81 + 76) + 0xB0))(v19, v5);
    }
    else
    {
      v76 = *(_QWORD *)(v81 + 48);
      if (!v76)
        v76 = *(_QWORD *)(v19 + 16);
    }
    if (*((_DWORD *)v70 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v70) & 1) != 0)
    {
LABEL_211:
      v27 = 0;
      v5 = v74;
      goto LABEL_44;
    }
LABEL_160:
    if ((v76 & 0xFFFE000000000002) != 0)
      goto LABEL_211;
    v27 = 0;
    v77 = *(unsigned __int8 *)(v76 + 5);
    v19 = v76;
    v5 = v74;
    if (v77 <= 0x16)
      goto LABEL_44;
  }
  if ((int)v73 > 63)
  {
    v90 = *(_QWORD *)(v19 + 8) - 8;
    v91 = 0x3F00000000 - (v73 << 32);
  }
  else
  {
    v90 = v19 + 16;
    v91 = v73 << 32;
  }
  v92 = *(_QWORD *)(v90 + (v91 >> 29));
  if ((v92 & 0xFFFE000000000002) != 0)
    goto LABEL_217;
  v93 = *(unsigned __int8 *)(v92 + 5);
  if (v93 == 6)
  {
    v94 = *(_DWORD *)(v71 + 16) & 3;
    v95 = *(_QWORD *)(v92 + 16);
    if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0x4C))
    {
      v124 = *(_QWORD *)(v92 + 8);
      v125 = v95;
      LODWORD(v126) = HIDWORD(v73);
      v128 = v19;
      v27 = 1;
      BYTE1(v130) = 3;
      if (v94 != 2)
        LOBYTE(v130) = 1;
      goto LABEL_44;
    }
    v58 = *(_QWORD *)(v92 + 24);
    v57 = *(_QWORD *)(v92 + 32);
    v124 = *(_QWORD *)(v92 + 8);
    v125 = v95;
    LODWORD(v126) = HIDWORD(v73);
    v128 = v19;
    BYTE1(v130) = 3;
    if (v94 != 2)
    {
LABEL_100:
      v27 = 1;
      LOBYTE(v130) = 1;
LABEL_101:
      HIBYTE(v130) = 1;
      v134 = v58;
      v135 = v57;
      goto LABEL_44;
    }
LABEL_221:
    v27 = 1;
    goto LABEL_101;
  }
  if (v93 != 5)
  {
LABEL_217:
    v124 = v92;
    v128 = v19;
    v126 = __PAIR64__(v73, HIDWORD(v73));
    v27 = 1;
    LOWORD(v130) = 257;
    goto LABEL_44;
  }
  JSC::JSObject::fillGetterPropertySlot();
LABEL_223:
  v27 = 1;
LABEL_44:
  if (v133)
  {
    v33 = *(_DWORD *)(v132 + 4);
    if (!v33)
    {
      __break(0xC471u);
      JUMPOUT(0x194FA6390);
    }
    *(_DWORD *)(v132 + 4) = v33 - 1;
    v132 = 0;
    v133 = 0;
  }
  if (!*(_DWORD *)(v7 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) == 0)
  {
    if ((v27 & 1) != 0)
    {
      v34 = JSC::ordinarySetSlow();
      goto LABEL_81;
    }
    v139 = (WTF::StringImpl *)a4;
    v35 = (JSC::VM *)*((_QWORD *)v5 + 7);
    if ((a4 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a4 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v139, v5);
LABEL_56:
      if (*((_DWORD *)v35 + 20))
      {
        v59 = JSC::VM::hasExceptionsAfterHandlingTraps(v35);
        v37 = v137;
        if (v59)
        {
          v123 = 1;
          v137 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v8);
            else
              *(_DWORD *)v37 -= 2;
          }
          v48 = 1;
          goto LABEL_80;
        }
      }
      else
      {
        v37 = v137;
      }
      v123 = 0;
      v38 = *(_QWORD *)(a1 + 24);
      v39 = v136;
      if (v136)
        *(_DWORD *)v136 += 2;
      v139 = v39;
      v122 = 0;
      v137 = v37;
      v40 = *(_QWORD *)(v38 + 16);
      if (!v40)
        goto LABEL_71;
      v41 = *(_QWORD *)(v40 + 8);
      if (!v41)
        goto LABEL_71;
      v42 = *(_QWORD *)(v41 + 72);
      if (!v42)
        goto LABEL_71;
      v43 = *(_QWORD *)(v42 + 8);
      if (!v43)
        goto LABEL_71;
      if (*(_BYTE *)(v43 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x194FA6490);
      }
      v44 = *(_QWORD *)(v43 + 240);
      if (v44 && (v8 = *(WTF::StringImpl **)(v44 + 8)) != 0)
      {
        v138 = 0;
        (*(void (**)(_QWORD, WTF::StringImpl *, WTF::StringImpl **, WTF::StringImpl **, unsigned __int8 *))(**(_QWORD **)(v38 + 24) + 40))(*(_QWORD *)(v38 + 24), v8, &v139, &v137, &v138);
        v45 = v138;
        if (v138)
          v46 = 18;
        else
          v46 = 0;
        v37 = v137;
      }
      else
      {
LABEL_71:
        v46 = 12;
        v45 = 1;
      }
      v137 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v8);
        else
          *(_DWORD *)v37 -= 2;
      }
      v47 = v139;
      v139 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::destroy(v47, v8);
          if (!v45)
            goto LABEL_79;
          goto LABEL_93;
        }
        *(_DWORD *)v47 -= 2;
      }
      if (!v45)
      {
LABEL_79:
        v48 = 0;
LABEL_80:
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1E33088B8[v48])(&v139, &v122);
        v34 = 1;
        goto LABEL_81;
      }
LABEL_93:
      LOBYTE(v139) = v46;
      v140[0] = 0;
      if (!*(_QWORD *)(v7 + 16))
      {
        v52.super.isa = (Class)WebCore::createDOMException(v5, (JSC::JSGlobalObject *)v46, (JSC::JSGlobalObject *)v140);
        JSC::VM::throwException((JSC::VM *)v7, v5, v52);
        v54 = v140[0];
        v140[0] = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v53);
          else
            *(_DWORD *)v54 -= 2;
        }
      }
      goto LABEL_79;
    }
    v36 = *(WTF::StringImpl **)(a4 + 8);
    if ((v36 & 1) != 0)
    {
      v36 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a4, v5);
      if (!v36)
        goto LABEL_55;
    }
    else if (!v36)
    {
LABEL_55:
      v137 = v36;
      goto LABEL_56;
    }
    *(_DWORD *)v36 += 2;
    goto LABEL_55;
  }
  v34 = 0;
LABEL_81:
  if (v133)
  {
    v49 = *(_DWORD *)(v132 + 4);
    if (!v49)
    {
      __break(0xC471u);
      JUMPOUT(0x194FA63B0);
    }
    *(_DWORD *)(v132 + 4) = v49 - 1;
  }
  v50 = v136;
  v136 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v8);
    else
      *(_DWORD *)v50 -= 2;
  }
  return v34;
}

uint64_t WebCore::JSStorage::deleteProperty(uint64_t a1, JSC *a2, WTF::StringImpl *a3)
{
  WTF::StringImpl *v3;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  JSC::VM *v19;
  JSValue v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 24);
  if (a3)
  {
    if ((*((_BYTE *)a3 + 16) & 0x20) != 0)
      return JSC::JSObject::deleteProperty();
    *(_DWORD *)a3 += 2;
    v7 = a3;
  }
  else
  {
    v7 = 0;
  }
  v24 = v7;
  v9 = (*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v6 + 24) + 64))(*(_QWORD *)(v6 + 24), &v24);
  v10 = v24;
  v24 = 0;
  if (!v10)
    goto LABEL_7;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
LABEL_7:
    if (!v9)
      return JSC::JSObject::deleteProperty();
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v10, v8);
  if (!v9)
    return JSC::JSObject::deleteProperty();
LABEL_8:
  if (WebCore::isVisibleNamedProperty<(WebCore::LegacyOverrideBuiltIns)0,WebCore::JSStorage>((uint64_t)a2, a1, (unint64_t)v3))
  {
    if (v3)
      *(_DWORD *)v3 += 2;
    v24 = v3;
    v12 = *(_QWORD *)(v6 + 16);
    if (!v12)
      goto LABEL_19;
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      goto LABEL_19;
    v14 = *(_QWORD *)(v13 + 72);
    if (!v14)
      goto LABEL_19;
    v15 = *(_QWORD *)(v14 + 8);
    if (!v15)
      goto LABEL_19;
    if (*(_BYTE *)(v15 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x194FA6F50);
    }
    v16 = *(_QWORD *)(v15 + 240);
    if (v16 && (v11 = *(WTF::StringImpl **)(v16 + 8)) != 0)
    {
      (*(void (**)(_QWORD, WTF::StringImpl *, WTF::StringImpl **))(**(_QWORD **)(v6 + 24) + 48))(*(_QWORD *)(v6 + 24), v11, &v24);
      v17 = 0;
      v18 = 1;
      v3 = v24;
    }
    else
    {
LABEL_19:
      v18 = 0;
      v17 = 12;
    }
    v24 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
      {
        WTF::StringImpl::destroy(v3, v11);
        if ((v18 & 1) == 0)
          goto LABEL_24;
        return 1;
      }
      *(_DWORD *)v3 -= 2;
    }
    if ((v18 & 1) == 0)
    {
LABEL_24:
      v19 = (JSC::VM *)*((_QWORD *)a2 + 7);
      LOBYTE(v24) = v17;
      v25 = 0;
      if (!*((_QWORD *)v19 + 2))
      {
        v20.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v25);
        JSC::VM::throwException(v19, a2, v20);
        v22 = v25;
        v25 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v21);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
    }
    return 1;
  }
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSStorage::deletePropertyByIndex(WebCore::JSStorage *this, JSC::VM **a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  JSC::VM *v19;
  JSValue v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t result;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v6 = *((_QWORD *)this + 3);
  JSC::Identifier::from();
  if (v24)
    *(_DWORD *)v24 += 2;
  v25 = v24;
  v8 = (*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v6 + 24) + 64))(*(_QWORD *)(v6 + 24), &v25);
  v9 = v25;
  v25 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v7);
      if (!v8)
        goto LABEL_29;
      goto LABEL_7;
    }
    *(_DWORD *)v9 -= 2;
  }
  if (!v8)
  {
LABEL_29:
    v22 = JSC::JSObject::deletePropertyByIndex(this, (JSC::JSCell *)a2, a3);
    goto LABEL_30;
  }
LABEL_7:
  if (!WebCore::isVisibleNamedProperty<(WebCore::LegacyOverrideBuiltIns)0,WebCore::JSStorage>((uint64_t)a2, (uint64_t)this, (unint64_t)v24))goto LABEL_29;
  v11 = v24;
  if (v24)
    *(_DWORD *)v24 += 2;
  v25 = v24;
  v12 = *(_QWORD *)(v6 + 16);
  if (!v12)
    goto LABEL_18;
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    goto LABEL_18;
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
    goto LABEL_18;
  v15 = *(_QWORD *)(v14 + 8);
  if (!v15)
    goto LABEL_18;
  if (*(_BYTE *)(v15 + 178))
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  v16 = *(_QWORD *)(v15 + 240);
  if (v16 && (v10 = *(WTF::StringImpl **)(v16 + 8)) != 0)
  {
    (*(void (**)(_QWORD, WTF::StringImpl *, WTF::StringImpl **))(**(_QWORD **)(v6 + 24) + 48))(*(_QWORD *)(v6 + 24), v10, &v25);
    v17 = 0;
    v18 = 1;
    v11 = v25;
  }
  else
  {
LABEL_18:
    v18 = 0;
    v17 = 12;
  }
  v25 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v10);
      if ((v18 & 1) == 0)
        goto LABEL_23;
      goto LABEL_27;
    }
    *(_DWORD *)v11 -= 2;
  }
  if ((v18 & 1) == 0)
  {
LABEL_23:
    v19 = a2[7];
    LOBYTE(v25) = v17;
    v26 = 0;
    if (!*((_QWORD *)v19 + 2))
    {
      v20.super.isa = (Class)WebCore::createDOMException((JSC *)a2, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v26);
      JSC::VM::throwException(v19, (JSC::JSGlobalObject *)a2, v20);
      v21 = v26;
      v26 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v10);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
  }
LABEL_27:
  v22 = 1;
LABEL_30:
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v10);
    else
      *(_DWORD *)v24 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSStorage::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return WebCore::JSStorage::legacyPlatformObjectGetOwnProperty(a1, a2, a3, a4, 0);
}

uint64_t WebCore::JSStorage::getOwnPropertySlotByIndex(WebCore::JSStorage *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  JSC::VM *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  JSC::VM *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _BYTE *v40;
  WebCore::JSStorage *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  _WORD *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t OwnPropertySlotByIndex;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unsigned __int16 *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned __int8 *v68;
  unsigned int v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  _BYTE *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned __int16 *v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  JSC::VM *v86;
  uint64_t v87;
  char v88;
  int v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  unsigned int v96;
  JSC::VM *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  char v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned __int8 *v108;
  int v109;
  int v110;
  BOOL v111;
  const WTF::StringImpl *v112;
  const unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  JSC::VM *v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  int hasExceptionsAfterHandlingTraps;
  unint64_t v129;
  uint64_t v130;
  unsigned __int8 *v131;
  unsigned int v132;
  unint64_t v133;
  JSC::VM *v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  unint64_t v139;
  WebCore::JSStorage *v140;
  WebCore::JSStorage *v141;
  uint64_t v142;
  int v143;
  char v144;
  JSC::VM *v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  char v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  JSC::Identifier::from();
  if (v136)
  {
    if ((*((_BYTE *)v136 + 16) & 0x20) != 0)
      goto LABEL_98;
    v9 = *((_QWORD *)this + 3);
    *(_DWORD *)v136 += 2;
  }
  else
  {
    v9 = *((_QWORD *)this + 3);
  }
  v149 = v136;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(v9 + 24) + 32))(&v137, *(_QWORD *)(v9 + 24), &v149);
  v11 = v149;
  v149 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v137;
  if (!v137)
    goto LABEL_98;
  v13 = *(_DWORD *)v137;
  *(_DWORD *)v137 += 2;
  v137 = 0;
  if (v13)
    *(_DWORD *)v12 = v13;
  else
    WTF::StringImpl::destroy(v12, v10);
  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v139 = 0xFFFFFFFF00000000;
  v141 = 0;
  v142 = 0;
  v140 = this;
  v143 = 196608;
  v144 = 0;
  v147 = 0;
  v148 = 0;
  v145 = v14;
  ++*((_DWORD *)v14 + 1);
  v146 = 1;
  v15 = (unint64_t)v136 >> 4;
  if (((unint64_t)v136 >> 4))
  {
    v16 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    if ((v15 & ~*(_DWORD *)(v16 + 0x20)) == 0)
    {
      v17 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), v14);
      if (v17)
      {
        v149 = v136;
        v18 = JSC::PropertyTable::get(v17, (uint64_t *)&v149);
        if ((_DWORD)v18 != -1)
        {
          v27 = (uint64_t *)((char *)this + 8 * (int)v18 + 16);
          if ((int)v18 >= 64)
            v27 = (uint64_t *)(*((_QWORD *)this + 1) + ((uint64_t)(0x3F00000000 - (v18 << 32)) >> 29) - 8);
          v28 = *v27;
          if ((*v27 & 0xFFFE000000000002) != 0)
            goto LABEL_34;
          v29 = *(unsigned __int8 *)(v28 + 5);
          if (v29 == 6)
          {
            v32 = *(_DWORD *)(v16 + 16) & 3;
            v33 = *(_QWORD *)(v28 + 16);
            if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C))
            {
              v35 = *(_QWORD *)(v28 + 24);
              v34 = *(_QWORD *)(v28 + 32);
              v137 = *(WTF::StringImpl **)(v28 + 8);
              v138 = v33;
              LODWORD(v139) = HIDWORD(v18);
              v141 = this;
              BYTE1(v143) = 3;
              v30 = 0;
              v31 = 1;
              if (v32 != 2)
                LOBYTE(v143) = 1;
              HIBYTE(v143) = 1;
              v147 = v35;
              v148 = v34;
            }
            else
            {
              v137 = *(WTF::StringImpl **)(v28 + 8);
              v138 = v33;
              LODWORD(v139) = HIDWORD(v18);
              v141 = this;
              v31 = 1;
              BYTE1(v143) = 3;
              v30 = 0;
              if (v32 != 2)
                LOBYTE(v143) = 1;
            }
            goto LABEL_91;
          }
          if (v29 != 5)
          {
LABEL_34:
            v30 = 0;
            v137 = (WTF::StringImpl *)v28;
            v141 = this;
            v139 = __PAIR64__(v18, HIDWORD(v18));
            v31 = 1;
            LOWORD(v143) = 257;
            goto LABEL_91;
          }
          JSC::JSObject::fillGetterPropertySlot();
          goto LABEL_44;
        }
      }
    }
  }
  if ((*((_BYTE *)this + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    goto LABEL_44;
  if (v136)
  {
    v19 = *((_DWORD *)v136 + 4);
    if ((v19 & 0x20) == 0)
    {
      v20 = (_BYTE *)*((_QWORD *)v136 + 1);
      v21 = *((unsigned int *)v136 + 1);
      if ((v19 & 4) != 0)
      {
        if ((_DWORD)v21)
        {
          v22 = *v20 - 48;
          if (v22 <= 9 && (v21 < 2 || *v20 != 48))
          {
            v36 = v20 + 1;
            v37 = v21 - 1;
            while (v37)
            {
              if (v22 <= 0x19999999)
              {
                v38 = *v36 - 48;
                if (v38 <= 9)
                {
                  v26 = __CFADD__(v38, 10 * v22);
                  v22 = v38 + 10 * v22;
                  ++v36;
                  --v37;
                  if (!v26)
                    continue;
                }
              }
              goto LABEL_62;
            }
LABEL_61:
            if (v22 == -1 || (JSC::JSObject::getOwnPropertySlotByIndex() & 1) == 0)
              goto LABEL_62;
LABEL_44:
            v30 = 0;
            v31 = 1;
            goto LABEL_91;
          }
        }
      }
      else if ((_DWORD)v21)
      {
        v22 = *(unsigned __int16 *)v20 - 48;
        if (v22 <= 9 && (v21 < 2 || *(_WORD *)v20 != 48))
        {
          v23 = (unsigned __int16 *)(v20 + 2);
          v24 = v21 - 1;
          while (v24)
          {
            if (v22 <= 0x19999999)
            {
              v25 = *v23 - 48;
              if (v25 <= 9)
              {
                v26 = __CFADD__(v25, 10 * v22);
                v22 = v25 + 10 * v22;
                ++v23;
                --v24;
                if (!v26)
                  continue;
              }
            }
            goto LABEL_62;
          }
          goto LABEL_61;
        }
      }
    }
  }
LABEL_62:
  v134 = v8;
  v135 = a4;
  v39 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
  if (!v39)
    v39 = *((_QWORD *)this + 2);
  if ((v39 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v39 + 5) < 0x17u)
    goto LABEL_89;
  v40 = (_BYTE *)(v39 + 6);
  if ((*(_BYTE *)(v39 + 6) & 8) == 0)
  {
    v133 = *((_QWORD *)a2 + 7);
    v41 = (WebCore::JSStorage *)v39;
    while (1)
    {
      v42 = *(_DWORD *)v41 & 0xFFFFFFFE;
      v43 = 16 * v42;
      if ((_DWORD)v15)
      {
        if ((v15 & ~*(_DWORD *)(16 * v42 + 0x20)) == 0)
        {
          v44 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v43, (JSC::VM *)v133);
          if (v44)
          {
            v149 = v136;
            v45 = JSC::PropertyTable::get(v44, (uint64_t *)&v149);
            v46 = v45;
            if ((_DWORD)v45 != -1)
              break;
          }
        }
      }
      if ((*v40 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_152;
      v47 = *(_QWORD *)(v43 + 48);
      if (!v47)
        v47 = *((_QWORD *)v41 + 2);
      if ((v47 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v47 + 5) < 0x17u)
      {
        if (!v136)
          goto LABEL_89;
        v48 = *((_DWORD *)v136 + 4);
        if ((v48 & 0x20) != 0)
          goto LABEL_89;
        v49 = (_WORD *)*((_QWORD *)v136 + 1);
        v50 = *((unsigned int *)v136 + 1);
        if ((v48 & 4) == 0)
        {
          if (!(_DWORD)v50 || (v51 = (unsigned __int16)*v49 - 48, v51 > 9))
          {
LABEL_86:
            v52 = 0;
            LOBYTE(v51) = 0;
            goto LABEL_87;
          }
          if (v50 >= 2 && *v49 == 48)
          {
            v52 = 0;
LABEL_87:
            v53 = 0;
          }
          else
          {
            v65 = v49 + 1;
            v66 = v50 - 1;
            while (v66)
            {
              if (v51 <= 0x19999999)
              {
                v67 = *v65 - 48;
                if (v67 <= 9)
                {
                  v26 = __CFADD__(v67, 10 * v51);
                  v51 = v67 + 10 * v51;
                  ++v65;
                  --v66;
                  if (!v26)
                    continue;
                }
              }
              goto LABEL_86;
            }
            v70 = v51 == -1;
            v53 = v51 & 0xFFFFFF00;
            v52 = 0x100000000;
            if (v51 == -1)
            {
              v52 = 0;
              LOBYTE(v51) = 0;
            }
            if (v70)
              v53 = 0;
          }
          v51 = v51;
          if ((v52 & 0x100000000) == 0)
          {
LABEL_89:
            v31 = 0;
            v30 = v12;
            v12 = 0;
            goto LABEL_90;
          }
LABEL_184:
          v85 = v53 | v51;
          v86 = (JSC::VM *)*((_QWORD *)a2 + 7);
          while (2)
          {
            v87 = 16 * (*(_DWORD *)v39 & 0xFFFFFFFE);
            v88 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v87 + 0x4C) + 0x70))(v39, a2, v85, &v137);
            if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
              goto LABEL_89;
            if ((v88 & 1) != 0)
              goto LABEL_152;
            v89 = BYTE2(v143);
            if (BYTE2(v143) == 3)
            {
              if (v144)
                goto LABEL_89;
              v90 = *(unsigned __int8 *)(v39 + 5);
              if (v90 != 61)
                goto LABEL_194;
              goto LABEL_201;
            }
            v90 = *(unsigned __int8 *)(v39 + 5);
            if (v90 == 61)
            {
              if (BYTE2(v143) == 1)
                goto LABEL_89;
            }
            else
            {
LABEL_194:
              if ((v90 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v39 + 40) & 7u) > 2)
                {
                  LOBYTE(v149) = 0;
                  v150 = 0;
                  v93 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v39, (WTF *)&v149);
                  if ((_BYTE)v10)
                    v91 = v93;
                  else
                    v91 = 0;
                }
                else
                {
                  v91 = *(_QWORD *)(v39 + 24);
                }
                if (v91 <= v85)
                  goto LABEL_89;
                v89 = BYTE2(v143);
              }
            }
            if ((*(_WORD *)(v87 + 12) & 0x800) != 0 && v89 != 3)
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v92 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v39 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v39, a2);
              }
              else
              {
                v92 = *(_QWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x30);
                if (!v92)
                  v92 = *(_QWORD *)(v39 + 16);
              }
              if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
                goto LABEL_89;
            }
            else
            {
LABEL_201:
              v92 = *(_QWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x30);
              if (!v92)
                v92 = *(_QWORD *)(v39 + 16);
            }
            if ((v92 & 0xFFFE000000000002) != 0)
              goto LABEL_89;
            v39 = v92;
            if (*(unsigned __int8 *)(v92 + 5) <= 0x16u)
              goto LABEL_89;
            continue;
          }
        }
        if ((_DWORD)v50)
        {
          v83 = *(unsigned __int8 *)v49 - 48;
          if (v83 <= 9 && (v50 < 2 || *(_BYTE *)v49 != 48))
          {
            v130 = v50 - 1;
            v131 = (unsigned __int8 *)v49 + 1;
            while (v130)
            {
              if (v83 > 0x19999999)
                goto LABEL_181;
              v132 = *v131 - 48;
              if (v132 > 9)
                goto LABEL_181;
              v51 = 0;
              LOBYTE(v50) = 0;
              v84 = 0;
              v26 = __CFADD__(v132, 10 * v83);
              v83 = v132 + 10 * v83;
              --v130;
              ++v131;
              if (v26)
                goto LABEL_183;
            }
            if (v83 == -1)
              v51 = 0;
            else
              v51 = v83 & 0xFFFFFF00;
            if (v83 == -1)
              LOBYTE(v50) = 0;
            else
              LOBYTE(v50) = v83;
            if (v83 == -1)
              v84 = 0;
            else
              v84 = 0x100000000;
LABEL_183:
            v53 = v50;
            if ((v84 & 0x100000000) == 0)
              goto LABEL_89;
            goto LABEL_184;
          }
LABEL_181:
          v51 = 0;
          LOBYTE(v50) = 0;
        }
        else
        {
          v51 = 0;
        }
        v84 = 0;
        goto LABEL_183;
      }
      v40 = (_BYTE *)(v47 + 6);
      v41 = (WebCore::JSStorage *)v47;
      if ((*(_BYTE *)(v47 + 6) & 8) != 0)
        goto LABEL_158;
    }
    v57 = HIDWORD(v45);
    if ((int)v45 > 63)
    {
      v58 = *((_QWORD *)v41 + 1) - 8;
      v59 = 0x3F00000000 - (v45 << 32);
    }
    else
    {
      v58 = (uint64_t)v41 + 16;
      v59 = v45 << 32;
    }
    v60 = *(_QWORD *)(v58 + (v59 >> 29));
    if ((v60 & 0xFFFE000000000002) != 0)
      goto LABEL_109;
    v61 = *(unsigned __int8 *)(v60 + 5);
    if (v61 != 6)
    {
      if (v61 == 5)
        goto LABEL_151;
LABEL_109:
      v30 = 0;
      v137 = (WTF::StringImpl *)v60;
      v141 = v41;
LABEL_110:
      v139 = __PAIR64__(v46, v57);
      v31 = 1;
      LOWORD(v143) = 257;
      goto LABEL_90;
    }
    v71 = *(_DWORD *)(v43 + 16) & 3;
    v72 = *(_QWORD *)(v60 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v60 & 0xFFFFFFFE) + 0x4C))
    {
      v74 = *(_QWORD *)(v60 + 24);
      v73 = *(_QWORD *)(v60 + 32);
      v137 = *(WTF::StringImpl **)(v60 + 8);
      v138 = v72;
      LODWORD(v139) = HIDWORD(v45);
      v141 = v41;
LABEL_146:
      BYTE1(v143) = 3;
      v30 = 0;
      v31 = 1;
      if (v71 != 2)
        LOBYTE(v143) = 1;
      HIBYTE(v143) = 1;
      v147 = v74;
      v148 = v73;
      goto LABEL_90;
    }
    v137 = *(WTF::StringImpl **)(v60 + 8);
    v138 = v72;
    LODWORD(v139) = HIDWORD(v45);
    v141 = v41;
    goto LABEL_173;
  }
  v47 = v39;
LABEL_158:
  if (!v136)
    goto LABEL_231;
  v76 = *((_DWORD *)v136 + 4);
  if ((v76 & 0x20) != 0)
    goto LABEL_231;
  v77 = (_BYTE *)*((_QWORD *)v136 + 1);
  v78 = *((unsigned int *)v136 + 1);
  if ((v76 & 4) != 0)
  {
    if (!(_DWORD)v78)
      goto LABEL_231;
    v79 = *v77 - 48;
    if (v79 > 9 || v78 >= 2 && *v77 == 48)
      goto LABEL_231;
    v94 = v77 + 1;
    v95 = v78 - 1;
    while (v95)
    {
      if (v79 <= 0x19999999)
      {
        v96 = *v94 - 48;
        if (v96 <= 9)
        {
          v26 = __CFADD__(v96, 10 * v79);
          v79 = v96 + 10 * v79;
          ++v94;
          --v95;
          if (!v26)
            continue;
        }
      }
      goto LABEL_231;
    }
  }
  else
  {
    if (!(_DWORD)v78)
      goto LABEL_231;
    v79 = *(unsigned __int16 *)v77 - 48;
    if (v79 > 9 || v78 >= 2 && *(_WORD *)v77 == 48)
      goto LABEL_231;
    v80 = (unsigned __int16 *)(v77 + 2);
    v81 = v78 - 1;
    while (v81)
    {
      if (v79 <= 0x19999999)
      {
        v82 = *v80 - 48;
        if (v82 <= 9)
        {
          v26 = __CFADD__(v82, 10 * v79);
          v79 = v82 + 10 * v79;
          ++v80;
          --v81;
          if (!v26)
            continue;
        }
      }
      goto LABEL_231;
    }
  }
  if (v79 != -1)
  {
    v119 = v79;
    v120 = (JSC::VM *)*((_QWORD *)a2 + 7);
    while (1)
    {
      v121 = 16 * (*(_DWORD *)v39 & 0xFFFFFFFE);
      v122 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v121 + 0x4C) + 0x70))(v39, a2, v119, &v137);
      v123 = v122;
      if (*((_DWORD *)v120 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v120);
        if (((hasExceptionsAfterHandlingTraps | v123) & 1) != 0)
        {
          if (!hasExceptionsAfterHandlingTraps)
            goto LABEL_152;
          goto LABEL_89;
        }
      }
      else if ((v122 & 1) != 0)
      {
        goto LABEL_152;
      }
      v124 = BYTE2(v143);
      if (BYTE2(v143) == 3)
      {
        if (v144)
          goto LABEL_89;
        v125 = *(unsigned __int8 *)(v39 + 5);
        if (v125 == 61)
        {
LABEL_323:
          v127 = *(_QWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x30);
          if (!v127)
            v127 = *(_QWORD *)(v39 + 16);
          goto LABEL_325;
        }
      }
      else
      {
        v125 = *(unsigned __int8 *)(v39 + 5);
        if (v125 == 61)
        {
          if (BYTE2(v143) == 1)
            goto LABEL_89;
          goto LABEL_321;
        }
      }
      if ((v125 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v39 + 40) & 7u) > 2)
        {
          LOBYTE(v149) = 0;
          v150 = 0;
          v129 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v39, (WTF *)&v149);
          if ((_BYTE)v10)
            v126 = v129;
          else
            v126 = 0;
        }
        else
        {
          v126 = *(_QWORD *)(v39 + 24);
        }
        if (v126 <= v119)
          goto LABEL_89;
        v124 = BYTE2(v143);
      }
LABEL_321:
      if ((*(_WORD *)(v121 + 12) & 0x800) == 0 || v124 == 3)
        goto LABEL_323;
      if ((*(_WORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v127 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v39 & 0xFFFFFFFE)
                                                                                     + 0x4C)
                                                                   + 0xB0))(v39, a2);
      }
      else
      {
        v127 = *(_QWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x30);
        if (!v127)
          v127 = *(_QWORD *)(v39 + 16);
      }
      if (*((_DWORD *)v120 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v120) & 1) != 0)
        goto LABEL_89;
LABEL_325:
      if ((v127 & 0xFFFE000000000002) == 0)
      {
        v39 = v127;
        if (*(unsigned __int8 *)(v127 + 5) > 0x16u)
          continue;
      }
      goto LABEL_89;
    }
  }
LABEL_231:
  v97 = (JSC::VM *)*((_QWORD *)a2 + 7);
  while (1)
  {
    v98 = 16 * (*(_DWORD *)v47 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v47 + 6) & 8) != 0)
    {
      v103 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, WTF::StringImpl *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x4C) + 0x68))(v47, a2, v136, &v137);
      if (*((_DWORD *)v97 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v97) & 1) != 0)
        goto LABEL_89;
      if ((v103 & 1) != 0)
        goto LABEL_152;
      if (BYTE2(v143) == 3)
      {
        if (v144)
          goto LABEL_89;
        v104 = *(unsigned __int8 *)(v47 + 5);
        if (v104 == 61)
          goto LABEL_238;
      }
      else
      {
        v104 = *(unsigned __int8 *)(v47 + 5);
        if (v104 == 61)
        {
          if (BYTE2(v143) == 1)
            goto LABEL_89;
          goto LABEL_238;
        }
      }
      if (!v136)
        goto LABEL_238;
      if ((v104 - 50) < 0xFFFFFFF5)
        goto LABEL_238;
      v106 = *((_DWORD *)v136 + 4);
      if ((v106 & 0x20) != 0)
        goto LABEL_238;
      v107 = *((unsigned int *)v136 + 1);
      if (!(_DWORD)v107)
        goto LABEL_238;
      v108 = (unsigned __int8 *)*((_QWORD *)v136 + 1);
      if ((v106 & 4) != 0)
      {
        v109 = *v108;
        if ((_DWORD)v107 == 1)
        {
LABEL_274:
          if ((v109 - 48) < 0xA)
            goto LABEL_89;
          goto LABEL_238;
        }
        if (v109 == 45)
        {
          v110 = v108[1];
          goto LABEL_278;
        }
      }
      else
      {
        v109 = *(unsigned __int16 *)v108;
        if ((_DWORD)v107 == 1)
          goto LABEL_274;
        if (v109 == 45)
        {
          v110 = *((unsigned __int16 *)v108 + 1);
LABEL_278:
          if ((v110 - 48) < 0xA)
          {
            if ((_DWORD)v107 == 2)
              goto LABEL_89;
LABEL_290:
            v133 = v133 & 0xFFFFFF0000000000 | v107 | ((unint64_t)((v106 >> 2) & 1) << 32);
            JSC::jsToNumber();
            v112 = (const WTF::StringImpl *)WTF::numberToString();
            if ((WTF::equal(v136, v112, v113) & 1) != 0)
              goto LABEL_89;
            goto LABEL_238;
          }
          if ((_DWORD)v107 != 9)
            goto LABEL_238;
          v111 = v110 == 73;
LABEL_288:
          if (!v111)
            goto LABEL_238;
          goto LABEL_290;
        }
      }
      if ((v109 - 48) < 0xA || (_DWORD)v107 == 8 && v109 == 73)
        goto LABEL_290;
      if ((_DWORD)v107 != 3)
        goto LABEL_238;
      v111 = v109 == 78;
      goto LABEL_288;
    }
    if ((_DWORD)v15)
    {
      if ((v15 & ~*(_DWORD *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v99 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE)), v97);
        if (v99)
        {
          v149 = v136;
          v100 = JSC::PropertyTable::get(v99, (uint64_t *)&v149);
          v46 = v100;
          if ((_DWORD)v100 != -1)
            break;
        }
      }
    }
    if ((*(_BYTE *)(v47 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      goto LABEL_152;
LABEL_238:
    if ((*(_WORD *)(v98 + 12) & 0x800) == 0)
    {
      v101 = *(_DWORD *)v47;
LABEL_240:
      v102 = *(_QWORD *)(16 * (v101 & 0xFFFFFFFE) + 0x30);
      if (!v102)
        v102 = *(_QWORD *)(v47 + 16);
      goto LABEL_242;
    }
    v101 = *(_DWORD *)v47;
    if (BYTE2(v143) == 3)
      goto LABEL_240;
    v105 = 16 * (v101 & 0xFFFFFFFE);
    if ((*(_WORD *)(v105 + 12) & 0x800) != 0)
    {
      v102 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16 * *(unsigned int *)(v105 + 76) + 0xB0))(v47, a2);
    }
    else
    {
      v102 = *(_QWORD *)(v105 + 48);
      if (!v102)
        v102 = *(_QWORD *)(v47 + 16);
    }
    if (*((_DWORD *)v97 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v97) & 1) != 0)
      goto LABEL_89;
LABEL_242:
    if ((v102 & 0xFFFE000000000002) == 0)
    {
      v47 = v102;
      if (*(unsigned __int8 *)(v102 + 5) > 0x16u)
        continue;
    }
    goto LABEL_89;
  }
  v57 = HIDWORD(v100);
  if ((int)v100 > 63)
  {
    v114 = *(_QWORD *)(v47 + 8) - 8;
    v115 = 0x3F00000000 - (v100 << 32);
  }
  else
  {
    v114 = v47 + 16;
    v115 = v100 << 32;
  }
  v116 = *(_QWORD *)(v114 + (v115 >> 29));
  if ((v116 & 0xFFFE000000000002) != 0)
  {
LABEL_300:
    v30 = 0;
    v137 = (WTF::StringImpl *)v116;
    v141 = (WebCore::JSStorage *)v47;
    goto LABEL_110;
  }
  v117 = *(unsigned __int8 *)(v116 + 5);
  if (v117 == 6)
  {
    v71 = *(_DWORD *)(v98 + 16) & 3;
    v118 = *(_QWORD *)(v116 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v116 & 0xFFFFFFFE) + 0x4C))
    {
      v74 = *(_QWORD *)(v116 + 24);
      v73 = *(_QWORD *)(v116 + 32);
      v137 = *(WTF::StringImpl **)(v116 + 8);
      v138 = v118;
      LODWORD(v139) = HIDWORD(v100);
      v141 = (WebCore::JSStorage *)v47;
      goto LABEL_146;
    }
    v137 = *(WTF::StringImpl **)(v116 + 8);
    v138 = v118;
    LODWORD(v139) = HIDWORD(v100);
    v141 = (WebCore::JSStorage *)v47;
LABEL_173:
    v31 = 1;
    BYTE1(v143) = 3;
    v30 = 0;
    if (v71 != 2)
      LOBYTE(v143) = 1;
    goto LABEL_90;
  }
  if (v117 != 5)
    goto LABEL_300;
LABEL_151:
  JSC::JSObject::fillGetterPropertySlot();
LABEL_152:
  v30 = 0;
  v31 = 1;
LABEL_90:
  v8 = v134;
  a4 = v135;
LABEL_91:
  if (v146)
  {
    v54 = *((_DWORD *)v145 + 1);
    if (!v54)
    {
      __break(0xC471u);
      JUMPOUT(0x194FA797CLL);
    }
    *((_DWORD *)v145 + 1) = v54 - 1;
  }
  if (!v12)
  {
LABEL_97:
    if ((v31 & 1) == 0)
      goto LABEL_112;
    goto LABEL_98;
  }
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_97;
  }
  WTF::StringImpl::destroy(v12, v10);
  if ((v31 & 1) != 0)
  {
LABEL_98:
    OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex();
    goto LABEL_99;
  }
LABEL_112:
  if (v30)
  {
    v62 = *((_QWORD *)a2 + 7);
    v63 = *((_DWORD *)v30 + 1);
    if (v63)
    {
      if (v63 != 1)
        goto LABEL_115;
      v68 = (unsigned __int8 *)*((_QWORD *)v30 + 1);
      if ((*((_BYTE *)v30 + 16) & 4) != 0)
      {
        v69 = *v68;
        goto LABEL_138;
      }
      v75 = *(unsigned __int16 *)v68;
      if (v75 > 0xFF)
      {
LABEL_115:
        v64 = *(_QWORD *)(v62 + 64760);
        if (!v64 || v30 != *(WTF::StringImpl **)(v64 + 8))
          v64 = JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v69 = v75;
LABEL_138:
        v64 = *(_QWORD *)(v62 + 8 * v69 + 42216);
      }
    }
    else
    {
      v64 = *(_QWORD *)(v62 + 41968);
    }
  }
  else
  {
    v64 = 2;
  }
  if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
  {
    OwnPropertySlotByIndex = 0;
    if (!v30)
      goto LABEL_99;
  }
  else
  {
    *(_QWORD *)a4 = v64;
    *(_DWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 32) = this;
    OwnPropertySlotByIndex = 1;
    *(_BYTE *)(a4 + 49) = 1;
    if (!v30)
      goto LABEL_99;
  }
  if (*(_DWORD *)v30 == 2)
    WTF::StringImpl::destroy(v30, v10);
  else
    *(_DWORD *)v30 -= 2;
LABEL_99:
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
      WTF::StringImpl::destroy(v136, v10);
    else
      *(_DWORD *)v136 -= 2;
  }
  return OwnPropertySlotByIndex;
}

uint64_t WebCore::JSStorage::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::StringImpl *v4;
  WTF *v5;
  uint64_t *v6;
  WTF *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF *v46;
  unsigned int v47;
  WTF::StringImpl *v48[2];
  char v49;
  WTF::StringImpl *v50;

  WebCore::Storage::supportedPropertyNames(*(WebCore::Storage **)(a1 + 24), (uint64_t)&v46);
  v5 = v46;
  if (!v47)
    goto LABEL_72;
  v6 = a3 + 1;
  v7 = (WTF *)((char *)v46 + 8 * v47);
  do
  {
    v8 = *(_QWORD *)v5;
    if (*(_QWORD *)v5)
      *(_DWORD *)v8 += 2;
    v50 = (WTF::StringImpl *)v8;
    v9 = *(_DWORD *)(v8 + 16);
    if ((v9 & 0x20) != 0)
    {
      if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*(_BYTE *)(v8 + 36) & 4) != 0)
        goto LABEL_63;
LABEL_11:
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(_QWORD **)(v10 + 8);
          while (*v12 != v8)
          {
            ++v12;
            if (!--v11)
              goto LABEL_16;
          }
LABEL_62:
          if (!v8)
            goto LABEL_65;
          goto LABEL_63;
        }
LABEL_16:
        v13 = (WTF::StringImpl *)v8;
        if ((v9 & 0x20) == 0)
        {
LABEL_17:
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v13 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v13 = v48[0];
          }
          v14 = *(_DWORD *)v13;
          *(_DWORD *)v13 += 2;
          if (!v14)
          {
            WTF::StringImpl::destroy(v13, v4);
LABEL_56:
            v35 = (uint64_t *)(v10 + 8);
            v48[0] = v13;
            v36 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v36 == *(_DWORD *)(v10 + 16))
            {
              v37 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)v48);
              v36 = *(unsigned int *)(v10 + 20);
              v38 = *(_QWORD *)(v10 + 8);
              v39 = *v37;
              *v37 = 0;
              *(_QWORD *)(v38 + 8 * v36) = v39;
            }
            else
            {
              v40 = *v35;
              v48[0] = 0;
              *(_QWORD *)(v40 + 8 * v36) = v13;
            }
            *(_DWORD *)(v10 + 20) = v36 + 1;
            v41 = v48[0];
            v48[0] = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
              {
                WTF::StringImpl::destroy(v41, v4);
                if (!v8)
                  goto LABEL_65;
                goto LABEL_63;
              }
              *(_DWORD *)v41 -= 2;
            }
            goto LABEL_62;
          }
LABEL_55:
          *(_DWORD *)v13 = v14;
          goto LABEL_56;
        }
LABEL_23:
        v14 = *(_DWORD *)v13 + 2;
        goto LABEL_55;
      }
      if (*v6 && *(_DWORD *)(*v6 - 12))
      {
LABEL_21:
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v50, (uint64_t)v48);
        if (!v49)
          goto LABEL_62;
        v13 = v50;
        v10 = *a3;
        v9 = *((_DWORD *)v50 + 4);
        if ((v9 & 0x20) == 0)
          goto LABEL_17;
        goto LABEL_23;
      }
      v15 = *(uint64_t **)(v10 + 8);
      v16 = &v15[v11];
      while (1)
      {
        v17 = *v15;
        v18 = *v6;
        if (*v6
          || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v18 = *v6) != 0))
        {
          v19 = *(_DWORD *)(v18 - 8);
        }
        else
        {
          v19 = 0;
        }
        v20 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
        v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
        v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
        v23 = v19 & ((v22 >> 31) ^ v22);
        v24 = (uint64_t *)(v18 + 8 * v23);
        v25 = *v24;
        if (*v24)
        {
          v26 = 0;
          v27 = 1;
          while (v25 != v17)
          {
            if (v25 == -1)
              v26 = v24;
            v23 = (v23 + v27) & v19;
            v24 = (uint64_t *)(v18 + 8 * v23);
            v25 = *v24;
            ++v27;
            if (!*v24)
            {
              if (v26)
              {
                *v26 = 0;
                --*(_DWORD *)(*v6 - 16);
                v24 = v26;
              }
              goto LABEL_36;
            }
          }
          goto LABEL_49;
        }
LABEL_36:
        *v24 = v17;
        v28 = *v6;
        v29 = *v6 ? *(_DWORD *)(v28 - 12) + 1 : 1;
        *(_DWORD *)(v28 - 12) = v29;
        v30 = *v6;
        v31 = *v6 ? *(_DWORD *)(v30 - 12) : 0;
        v32 = (*(_DWORD *)(v30 - 16) + v31);
        v33 = *(unsigned int *)(v30 - 4);
        if (v33 > 0x400)
          break;
        if (3 * v33 <= 4 * v32)
        {
          if ((_DWORD)v33)
            goto LABEL_45;
          v34 = 8;
          goto LABEL_48;
        }
LABEL_49:
        if (++v15 == v16)
          goto LABEL_21;
      }
      if (v33 > 2 * v32)
        goto LABEL_49;
LABEL_45:
      v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
LABEL_48:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v34, v24);
      goto LABEL_49;
    }
    if ((a3[3] & 2) != 0)
      goto LABEL_11;
LABEL_63:
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v8, v4);
    else
      *(_DWORD *)v8 -= 2;
LABEL_65:
    v5 = (WTF *)((char *)v5 + 8);
  }
  while (v5 != v7);
  v5 = v46;
  if (v47)
  {
    v43 = 0;
    v44 = 8 * v47;
    do
    {
      v45 = *(WTF::StringImpl **)((char *)v5 + v43);
      *(_QWORD *)((char *)v5 + v43) = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v4);
        else
          *(_DWORD *)v45 -= 2;
      }
      v43 += 8;
    }
    while (v44 != v43);
  }
LABEL_72:
  if (v5)
    WTF::fastFree(v5, v4);
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSStorage::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, JSC::PropertyDescriptor *a4, int a5)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int OwnPropertySlotByIndex;
  int OwnStaticPropertySlot;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t result;
  int v37;
  int hasExceptionsAfterHandlingTraps;
  int v39;
  WTF::StringImpl *v40;
  JSC::VM *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  JSValue v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  JSC::VM *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  JSC::VM *v72;
  unint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unsigned __int8 v76;

  v10 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v72 = v10;
  if (a3 && (*(_BYTE *)(a3 + 16) & 0x20) != 0)
  {
LABEL_97:
    v55 = *((_OWORD *)a4 + 1);
    v62 = *(_OWORD *)a4;
    v63 = v55;
    return JSC::JSObject::defineOwnProperty();
  }
  *(_QWORD *)&v63 = 0xFFFFFFFF00000000;
  v64 = 0;
  v65 = 0;
  *((_QWORD *)&v63 + 1) = a1;
  v66 = 196608;
  v67 = 0;
  v70 = 0;
  v71 = 0;
  v68 = v10;
  ++*((_DWORD *)v10 + 1);
  v69 = 1;
  if ((a3 >> 4))
  {
    v11 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if (((a3 >> 4) & ~*(_DWORD *)(v11 + 0x20)) == 0)
    {
      v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v10);
      if (v12)
      {
        v73 = a3;
        v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v73);
        if ((_DWORD)v13 != -1)
        {
          if ((int)v13 > 63)
          {
            v22 = *(_QWORD *)(a1 + 8) - 8;
            v23 = 0x3F00000000 - (v13 << 32);
          }
          else
          {
            v22 = a1 + 16;
            v23 = v13 << 32;
          }
          v24 = *(_QWORD *)(v22 + (v23 >> 29));
          if ((v24 & 0xFFFE000000000002) == 0)
          {
            v25 = *(unsigned __int8 *)(v24 + 5);
            if (v25 == 6)
            {
              v28 = *(_DWORD *)(v11 + 16) & 3;
              v29 = *(_QWORD *)(v24 + 16);
              if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C))
              {
                v31 = *(_QWORD *)(v24 + 24);
                v30 = *(_QWORD *)(v24 + 32);
                *(_QWORD *)&v62 = *(_QWORD *)(v24 + 8);
                *((_QWORD *)&v62 + 1) = v29;
                LODWORD(v63) = HIDWORD(v13);
                v64 = a1;
                BYTE1(v66) = 3;
                OwnPropertySlotByIndex = 1;
                if (v28 != 2)
                  LOBYTE(v66) = 1;
                HIBYTE(v66) = 1;
                v70 = v31;
                v71 = v30;
              }
              else
              {
                *(_QWORD *)&v62 = *(_QWORD *)(v24 + 8);
                *((_QWORD *)&v62 + 1) = v29;
                LODWORD(v63) = HIDWORD(v13);
                v64 = a1;
                OwnPropertySlotByIndex = 1;
                BYTE1(v66) = 3;
                if (v28 != 2)
                  LOBYTE(v66) = 1;
              }
              goto LABEL_52;
            }
            if (v25 == 5)
            {
              JSC::JSObject::fillGetterPropertySlot();
              OwnPropertySlotByIndex = 1;
              goto LABEL_52;
            }
          }
          *(_QWORD *)&v62 = v24;
          v64 = a1;
          *(_QWORD *)&v63 = __PAIR64__(v13, HIDWORD(v13));
          OwnPropertySlotByIndex = 1;
          LOWORD(v66) = 257;
          goto LABEL_52;
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
  {
    OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot();
    OwnPropertySlotByIndex = OwnStaticPropertySlot;
    if (!a3 || (OwnStaticPropertySlot & 1) != 0)
      goto LABEL_52;
  }
  else if (!a3)
  {
    goto LABEL_51;
  }
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    goto LABEL_51;
  v15 = *(_BYTE **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if (!(_DWORD)v16)
      goto LABEL_51;
    v17 = *v15 - 48;
    if (v17 > 9 || v16 >= 2 && *v15 == 48)
      goto LABEL_51;
    v32 = v15 + 1;
    v33 = v16 - 1;
    while (v33)
    {
      if (v17 > 0x19999999)
        goto LABEL_51;
      v34 = *v32 - 48;
      if (v34 > 9)
        goto LABEL_51;
      OwnPropertySlotByIndex = 0;
      v21 = __CFADD__(v34, 10 * v17);
      v17 = v34 + 10 * v17;
      ++v32;
      --v33;
      if (v21)
        goto LABEL_52;
    }
  }
  else
  {
    if (!(_DWORD)v16)
      goto LABEL_51;
    v17 = *(unsigned __int16 *)v15 - 48;
    if (v17 > 9 || v16 >= 2 && *(_WORD *)v15 == 48)
      goto LABEL_51;
    v18 = (unsigned __int16 *)(v15 + 2);
    v19 = v16 - 1;
    while (v19)
    {
      if (v17 <= 0x19999999)
      {
        v20 = *v18 - 48;
        if (v20 <= 9)
        {
          v21 = __CFADD__(v20, 10 * v17);
          v17 = v20 + 10 * v17;
          ++v18;
          --v19;
          if (!v21)
            continue;
        }
      }
      goto LABEL_51;
    }
  }
  if (v17 == -1)
  {
LABEL_51:
    OwnPropertySlotByIndex = 0;
    goto LABEL_52;
  }
  OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex();
LABEL_52:
  v35 = *((_DWORD *)v68 + 1);
  if (!v35)
  {
    __break(0xC471u);
    JUMPOUT(0x194FA8C5CLL);
  }
  *((_DWORD *)v68 + 1) = v35 - 1;
  v68 = 0;
  v69 = 0;
  if (*((_DWORD *)v10 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
    if (((hasExceptionsAfterHandlingTraps | OwnPropertySlotByIndex) & 1) != 0)
    {
      v39 = hasExceptionsAfterHandlingTraps;
      result = 0;
      v37 = v39 ^ 1;
      goto LABEL_93;
    }
  }
  else if ((OwnPropertySlotByIndex & 1) != 0)
  {
    result = 0;
    v37 = 1;
    goto LABEL_93;
  }
  if ((JSC::PropertyDescriptor::isDataDescriptor(a4) & 1) != 0)
  {
    v73 = *(_QWORD *)a4;
    v41 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v73 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v73 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v73, a2);
LABEL_65:
      if (*((_DWORD *)v41 + 20))
      {
        v59 = JSC::VM::hasExceptionsAfterHandlingTraps(v41);
        v43 = v75;
        if (v59)
        {
          v61 = 1;
          v75 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v40);
            else
              *(_DWORD *)v43 -= 2;
          }
          v53 = 1;
          goto LABEL_92;
        }
      }
      else
      {
        v43 = v75;
      }
      v61 = 0;
      v44 = *(_QWORD *)(a1 + 24);
      if (a3)
        *(_DWORD *)a3 += 2;
      v73 = a3;
      v60 = 0;
      v75 = v43;
      v45 = *(_QWORD *)(v44 + 16);
      if (!v45)
        goto LABEL_83;
      v46 = *(_QWORD *)(v45 + 8);
      if (!v46)
        goto LABEL_83;
      v47 = *(_QWORD *)(v46 + 72);
      if (!v47)
        goto LABEL_83;
      v48 = *(_QWORD *)(v47 + 8);
      if (!v48)
        goto LABEL_83;
      if (*(_BYTE *)(v48 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x194FA8CD8);
      }
      v49 = *(_QWORD *)(v48 + 240);
      if (v49 && (v40 = *(WTF::StringImpl **)(v49 + 8)) != 0)
      {
        v76 = 0;
        (*(void (**)(_QWORD, WTF::StringImpl *, unint64_t *, WTF::StringImpl **, unsigned __int8 *))(**(_QWORD **)(v44 + 24) + 40))(*(_QWORD *)(v44 + 24), v40, &v73, &v75, &v76);
        v50 = v76;
        if (v76)
          v51 = 18;
        else
          v51 = 0;
        v43 = v75;
      }
      else
      {
LABEL_83:
        v50 = 1;
        v51 = 12;
      }
      v75 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v40);
        else
          *(_DWORD *)v43 -= 2;
      }
      v52 = (WTF::StringImpl *)v73;
      v73 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::destroy(v52, v40);
          if (!v50)
            goto LABEL_91;
          goto LABEL_103;
        }
        *(_DWORD *)v52 -= 2;
      }
      if (!v50)
      {
LABEL_91:
        v53 = 0;
LABEL_92:
        ((void (*)(unint64_t *, uint64_t *))off_1E33088B8[v53])(&v73, &v60);
        v37 = 0;
        result = 1;
        goto LABEL_93;
      }
LABEL_103:
      LOBYTE(v73) = v51;
      v74 = 0;
      if (!*((_QWORD *)v72 + 2))
      {
        v56.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)v51, (JSC::JSGlobalObject *)&v74);
        JSC::VM::throwException(v72, a2, v56);
        v58 = v74;
        v74 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, v57);
          else
            *(_DWORD *)v58 -= 2;
        }
      }
      goto LABEL_91;
    }
    v42 = *(WTF::StringImpl **)(v73 + 8);
    if ((v42 & 1) != 0)
    {
      v42 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v73, a2);
      if (!v42)
        goto LABEL_64;
    }
    else if (!v42)
    {
LABEL_64:
      v75 = v42;
      goto LABEL_65;
    }
    *(_DWORD *)v42 += 2;
    goto LABEL_64;
  }
  if (a5)
    JSC::throwTypeError();
  v37 = 0;
  result = 0;
LABEL_93:
  if (v69)
  {
    v54 = *((_DWORD *)v68 + 1);
    if (!v54)
    {
      __break(0xC471u);
      JUMPOUT(0x194FA8C7CLL);
    }
    *((_DWORD *)v68 + 1) = v54 - 1;
  }
  if (v37)
    goto LABEL_97;
  return result;
}

uint64_t WebCore::JSStorage::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSStorage>,(WebCore::DOMConstructorID)758>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6064);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v20) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v18);
    v5[2] = SlowCase + (int)v18;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v20, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSStorage>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v19 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v19);
    v9[2848] = v2 + (int)v19;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v20 = 0;
  v21 = v2;
  v22 = -1;
  v23 = 0x1000000;
  v24 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v20);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v20);
  v13 = v20;
  v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v20 = 0;
  v21 = v2;
  v22 = -1;
  v23 = 0x1000000;
  v24 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v20);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSStorage>((WebCore::JSStorage *)a1, (JSC::JSCell **)a2) + 48);
  v20 = 0;
  v21 = v2;
  v22 = -1;
  v23 = 0x1000000;
  v24 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v16, 14, (uint64_t)&v20);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6064) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

void WebCore::JSStorage::~JSStorage(WebCore::JSStorage *this)
{
  WebCore::Storage *v2;
  bmalloc::api *v3;
  void *v4;

  v2 = (WebCore::Storage *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 2) == 1)
    {
      WebCore::Storage::~Storage(v2);
      bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)v2 + 2);
    }
  }
}

unint64_t _ZN7WebCoreL26accessVisibleNamedPropertyILNS_22LegacyOverrideBuiltInsE0ENS_9JSStorageERZNS_L39visibleNamedPropertyItemAccessorFunctorINS_12IDLDOMStringES2_ZNS2_34legacyPlatformObjectGetOwnPropertyEPN3JSC8JSObjectEPNS5_14JSGlobalObjectENS5_12PropertyNameERNS5_12PropertySlotEbE3__0EEDcOT1_EUlRS2_SA_E_EEDTclfp2_fp0_fp1_EERS8_RT0_SA_SG_(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  _BYTE *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  JSC::VM *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _WORD *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int16 *v54;
  uint64_t v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  int v59;
  _BYTE *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned __int16 *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  JSC::VM *v69;
  uint64_t v70;
  char v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned int v78;
  JSC::VM *v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  char v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  int v89;
  BOOL v90;
  const WTF::StringImpl *v91;
  const unsigned __int8 *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  JSC::VM *v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char v116;
  JSC::VM *v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  char v122;
  uint64_t v123;

  v8 = (_BYTE *)result;
  v123 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    if ((*(_BYTE *)(a4 + 16) & 0x20) != 0)
    {
LABEL_29:
      *v8 = 0;
      v8[8] = 0;
      return result;
    }
    v9 = *(_QWORD *)(a3 + 24);
    *(_DWORD *)a4 += 2;
    v10 = (WTF::StringImpl *)a4;
  }
  else
  {
    v10 = 0;
    v9 = *(_QWORD *)(a3 + 24);
  }
  v121 = v10;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(v9 + 24) + 32))(&v109, *(_QWORD *)(v9 + 24), &v121);
  result = (unint64_t)v121;
  v121 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  v12 = v109;
  if (!v109)
    goto LABEL_29;
  v13 = *(_DWORD *)v109;
  *(_DWORD *)v109 += 2;
  v109 = 0;
  if (v13)
    *(_DWORD *)v12 = v13;
  else
    result = WTF::StringImpl::destroy(v12, v11);
  v14 = *(JSC::VM **)(a2 + 56);
  v111 = 0xFFFFFFFF00000000;
  v113 = 0;
  v114 = 0;
  v112 = a3;
  v115 = 196608;
  v116 = 0;
  v119 = 0;
  v120 = 0;
  v117 = v14;
  ++*((_DWORD *)v14 + 1);
  v118 = 1;
  v15 = a4 >> 4;
  if ((a4 >> 4))
  {
    v16 = 16 * (*(_DWORD *)a3 & 0xFFFFFFFE);
    if ((v15 & ~*(_DWORD *)(v16 + 0x20)) == 0)
    {
      result = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE)), v14);
      if (result)
      {
        v121 = (WTF::StringImpl *)a4;
        result = JSC::PropertyTable::get(result, (uint64_t *)&v121);
        v17 = result;
        if ((_DWORD)result != -1)
        {
          v26 = HIDWORD(result);
          v27 = (uint64_t *)(a3 + 8 * (int)result + 16);
          if ((int)result >= 64)
            v27 = (uint64_t *)(*(_QWORD *)(a3 + 8) + ((uint64_t)(0x3F00000000 - (result << 32)) >> 29) - 8);
          v28 = *v27;
          if ((*v27 & 0xFFFE000000000002) == 0)
          {
            v29 = *(unsigned __int8 *)(v28 + 5);
            if (v29 == 6)
            {
              v30 = *(_DWORD *)(v16 + 16) & 3;
              v31 = *(_QWORD *)(v28 + 16);
              if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C))
              {
                v33 = *(_QWORD *)(v28 + 24);
                v32 = *(_QWORD *)(v28 + 32);
                v109 = *(WTF::StringImpl **)(v28 + 8);
                v110 = v31;
                LODWORD(v111) = HIDWORD(result);
                v113 = a3;
LABEL_119:
                BYTE1(v115) = 3;
                if (v30 != 2)
                  LOBYTE(v115) = 1;
                HIBYTE(v115) = 1;
                v119 = v33;
                v120 = v32;
                goto LABEL_92;
              }
              v109 = *(WTF::StringImpl **)(v28 + 8);
              v110 = v31;
              LODWORD(v111) = HIDWORD(result);
              v113 = a3;
LABEL_140:
              BYTE1(v115) = 3;
              if (v30 != 2)
                LOBYTE(v115) = 1;
              goto LABEL_92;
            }
            if (v29 == 5)
              goto LABEL_122;
          }
          v109 = (WTF::StringImpl *)v28;
          v113 = a3;
LABEL_91:
          v111 = __PAIR64__(v17, v26);
          LOWORD(v115) = 257;
          goto LABEL_92;
        }
      }
    }
  }
  if ((*(_BYTE *)(a3 + 6) & 0x20) != 0)
  {
    result = JSC::JSObject::getOwnStaticPropertySlot();
    if ((result & 1) != 0)
      goto LABEL_92;
  }
  if (a4)
  {
    v18 = *(_DWORD *)(a4 + 16);
    if ((v18 & 0x20) == 0)
    {
      v19 = *(_BYTE **)(a4 + 8);
      v20 = *(unsigned int *)(a4 + 4);
      if ((v18 & 4) != 0)
      {
        if (!(_DWORD)v20)
          goto LABEL_57;
        v21 = *v19 - 48;
        if (v21 > 9 || v20 >= 2 && *v19 == 48)
          goto LABEL_57;
        v34 = v19 + 1;
        v35 = v20 - 1;
        while (v35)
        {
          if (v21 <= 0x19999999)
          {
            v36 = *v34 - 48;
            if (v36 <= 9)
            {
              v25 = __CFADD__(v36, 10 * v21);
              v21 = v36 + 10 * v21;
              ++v34;
              --v35;
              if (!v25)
                continue;
            }
          }
          goto LABEL_57;
        }
      }
      else
      {
        if (!(_DWORD)v20)
          goto LABEL_57;
        v21 = *(unsigned __int16 *)v19 - 48;
        if (v21 > 9 || v20 >= 2 && *(_WORD *)v19 == 48)
          goto LABEL_57;
        v22 = (unsigned __int16 *)(v19 + 2);
        v23 = v20 - 1;
        while (v23)
        {
          if (v21 <= 0x19999999)
          {
            v24 = *v22 - 48;
            if (v24 <= 9)
            {
              v25 = __CFADD__(v24, 10 * v21);
              v21 = v24 + 10 * v21;
              ++v22;
              --v23;
              if (!v25)
                continue;
            }
          }
          goto LABEL_57;
        }
      }
      if (v21 != -1)
      {
        result = JSC::JSObject::getOwnPropertySlotByIndex();
        if ((_DWORD)result)
          goto LABEL_92;
      }
    }
  }
LABEL_57:
  v37 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x30);
  if (!v37)
    v37 = *(_QWORD *)(a3 + 16);
  if ((v37 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v37 + 5) < 0x17u)
    goto LABEL_84;
  v38 = (_BYTE *)(v37 + 6);
  if ((*(_BYTE *)(v37 + 6) & 8) == 0)
  {
    v4 = *(_QWORD *)(a2 + 56);
    v39 = v37;
    while (1)
    {
      v40 = *(_DWORD *)v39 & 0xFFFFFFFE;
      v41 = 16 * v40;
      if ((_DWORD)v15)
      {
        if ((v15 & ~*(_DWORD *)(16 * v40 + 0x20)) == 0)
        {
          result = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v41, (JSC::VM *)v4);
          if (result)
          {
            v121 = (WTF::StringImpl *)a4;
            result = JSC::PropertyTable::get(result, (uint64_t *)&v121);
            v17 = result;
            if ((_DWORD)result != -1)
              break;
          }
        }
      }
      if ((*v38 & 0x20) != 0)
      {
        result = JSC::JSObject::getOwnStaticPropertySlot();
        if ((result & 1) != 0)
          goto LABEL_92;
      }
      v42 = *(_QWORD *)(v41 + 48);
      if (!v42)
        v42 = *(_QWORD *)(v39 + 16);
      if ((v42 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v42 + 5) < 0x17u)
      {
        if (!a4)
          goto LABEL_84;
        v43 = *(_DWORD *)(a4 + 16);
        if ((v43 & 0x20) != 0)
          goto LABEL_84;
        v44 = *(_WORD **)(a4 + 8);
        v45 = *(unsigned int *)(a4 + 4);
        if ((v43 & 4) == 0)
        {
          if (!(_DWORD)v45 || (v46 = (unsigned __int16)*v44 - 48, v46 > 9))
          {
LABEL_81:
            v47 = 0;
            LOBYTE(v46) = 0;
            goto LABEL_82;
          }
          if (v45 >= 2 && *v44 == 48)
          {
            v47 = 0;
LABEL_82:
            v48 = 0;
          }
          else
          {
            v54 = v44 + 1;
            v55 = v45 - 1;
            while (v55)
            {
              if (v46 <= 0x19999999)
              {
                v56 = *v54 - 48;
                if (v56 <= 9)
                {
                  v25 = __CFADD__(v56, 10 * v46);
                  v46 = v56 + 10 * v46;
                  ++v54;
                  --v55;
                  if (!v25)
                    continue;
                }
              }
              goto LABEL_81;
            }
            v57 = v46 == -1;
            v48 = v46 & 0xFFFFFF00;
            v47 = 0x100000000;
            if (v46 == -1)
            {
              v47 = 0;
              LOBYTE(v46) = 0;
            }
            if (v57)
              v48 = 0;
          }
          v46 = v46;
          if ((v47 & 0x100000000) == 0)
          {
LABEL_84:
            *(_QWORD *)v8 = v12;
            v8[8] = 1;
            v12 = 0;
            goto LABEL_93;
          }
LABEL_150:
          v68 = v48 | v46;
          v69 = *(JSC::VM **)(a2 + 56);
          while (2)
          {
            v70 = 16 * (*(_DWORD *)v37 & 0xFFFFFFFE);
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v70 + 0x4C) + 0x70))(v37, a2, v68, &v109);
            v71 = result;
            if (*((_DWORD *)v69 + 20))
            {
              result = JSC::VM::hasExceptionsAfterHandlingTraps(v69);
              if ((result & 1) != 0)
                goto LABEL_84;
            }
            if ((v71 & 1) != 0)
              goto LABEL_92;
            v72 = BYTE2(v115);
            if (BYTE2(v115) == 3)
            {
              if (v116)
                goto LABEL_84;
              v73 = *(unsigned __int8 *)(v37 + 5);
              if (v73 != 61)
                goto LABEL_160;
              goto LABEL_167;
            }
            v73 = *(unsigned __int8 *)(v37 + 5);
            if (v73 == 61)
            {
              if (BYTE2(v115) == 1)
                goto LABEL_84;
            }
            else
            {
LABEL_160:
              if ((v73 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v37 + 40) & 7u) > 2)
                {
                  LOBYTE(v121) = 0;
                  v122 = 0;
                  result = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v37, (WTF *)&v121);
                  if ((_BYTE)v11)
                    v74 = result;
                  else
                    v74 = 0;
                }
                else
                {
                  v74 = *(_QWORD *)(v37 + 24);
                }
                if (v74 <= v68)
                  goto LABEL_84;
                v72 = BYTE2(v115);
              }
            }
            if ((*(_WORD *)(v70 + 12) & 0x800) != 0 && v72 != 3)
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                result = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v37 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xB0))(v37, a2);
                v75 = result;
              }
              else
              {
                v75 = *(_QWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x30);
                if (!v75)
                  v75 = *(_QWORD *)(v37 + 16);
              }
              if (*((_DWORD *)v69 + 20))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v69);
                if ((result & 1) != 0)
                  goto LABEL_84;
              }
            }
            else
            {
LABEL_167:
              v75 = *(_QWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x30);
              if (!v75)
                v75 = *(_QWORD *)(v37 + 16);
            }
            if ((v75 & 0xFFFE000000000002) != 0)
              goto LABEL_84;
            v37 = v75;
            if (*(unsigned __int8 *)(v75 + 5) <= 0x16u)
              goto LABEL_84;
            continue;
          }
        }
        if ((_DWORD)v45)
        {
          v66 = *(unsigned __int8 *)v44 - 48;
          if (v66 <= 9 && (v45 < 2 || *(_BYTE *)v44 != 48))
          {
            v106 = v45 - 1;
            v107 = (unsigned __int8 *)v44 + 1;
            while (v106)
            {
              if (v66 > 0x19999999)
                goto LABEL_147;
              v108 = *v107 - 48;
              if (v108 > 9)
                goto LABEL_147;
              v46 = 0;
              LOBYTE(v45) = 0;
              v67 = 0;
              v25 = __CFADD__(v108, 10 * v66);
              v66 = v108 + 10 * v66;
              --v106;
              ++v107;
              if (v25)
                goto LABEL_149;
            }
            if (v66 == -1)
              v46 = 0;
            else
              v46 = v66 & 0xFFFFFF00;
            if (v66 == -1)
              LOBYTE(v45) = 0;
            else
              LOBYTE(v45) = v66;
            if (v66 == -1)
              v67 = 0;
            else
              v67 = 0x100000000;
LABEL_149:
            v48 = v45;
            if ((v67 & 0x100000000) == 0)
              goto LABEL_84;
            goto LABEL_150;
          }
LABEL_147:
          v46 = 0;
          LOBYTE(v45) = 0;
        }
        else
        {
          v46 = 0;
        }
        v67 = 0;
        goto LABEL_149;
      }
      v38 = (_BYTE *)(v42 + 6);
      v39 = v42;
      if ((*(_BYTE *)(v42 + 6) & 8) != 0)
        goto LABEL_125;
    }
    v26 = HIDWORD(result);
    if ((int)result > 63)
    {
      v49 = *(_QWORD *)(v39 + 8) - 8;
      v50 = 0x3F00000000 - (result << 32);
    }
    else
    {
      v49 = v39 + 16;
      v50 = result << 32;
    }
    v51 = *(_QWORD *)(v49 + (v50 >> 29));
    if ((v51 & 0xFFFE000000000002) != 0)
      goto LABEL_90;
    v52 = *(unsigned __int8 *)(v51 + 5);
    if (v52 != 6)
    {
      if (v52 == 5)
        goto LABEL_122;
LABEL_90:
      v109 = (WTF::StringImpl *)v51;
      v113 = v39;
      goto LABEL_91;
    }
    v30 = *(_DWORD *)(v41 + 16) & 3;
    v58 = *(_QWORD *)(v51 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x4C))
    {
      v33 = *(_QWORD *)(v51 + 24);
      v32 = *(_QWORD *)(v51 + 32);
      v109 = *(WTF::StringImpl **)(v51 + 8);
      v110 = v58;
      LODWORD(v111) = HIDWORD(result);
      v113 = v39;
      goto LABEL_119;
    }
    v109 = *(WTF::StringImpl **)(v51 + 8);
    v110 = v58;
    LODWORD(v111) = HIDWORD(result);
    v113 = v39;
    goto LABEL_140;
  }
  v42 = v37;
LABEL_125:
  if (!a4)
    goto LABEL_197;
  v59 = *(_DWORD *)(a4 + 16);
  if ((v59 & 0x20) != 0)
    goto LABEL_197;
  v60 = *(_BYTE **)(a4 + 8);
  v61 = *(unsigned int *)(a4 + 4);
  if ((v59 & 4) != 0)
  {
    if (!(_DWORD)v61)
      goto LABEL_197;
    v62 = *v60 - 48;
    if (v62 > 9 || v61 >= 2 && *v60 == 48)
      goto LABEL_197;
    v76 = v60 + 1;
    v77 = v61 - 1;
    while (v77)
    {
      if (v62 <= 0x19999999)
      {
        v78 = *v76 - 48;
        if (v78 <= 9)
        {
          v25 = __CFADD__(v78, 10 * v62);
          v62 = v78 + 10 * v62;
          ++v76;
          --v77;
          if (!v25)
            continue;
        }
      }
      goto LABEL_197;
    }
  }
  else
  {
    if (!(_DWORD)v61)
      goto LABEL_197;
    v62 = *(unsigned __int16 *)v60 - 48;
    if (v62 > 9 || v61 >= 2 && *(_WORD *)v60 == 48)
      goto LABEL_197;
    v63 = (unsigned __int16 *)(v60 + 2);
    v64 = v61 - 1;
    while (v64)
    {
      if (v62 <= 0x19999999)
      {
        v65 = *v63 - 48;
        if (v65 <= 9)
        {
          v25 = __CFADD__(v65, 10 * v62);
          v62 = v65 + 10 * v62;
          ++v63;
          --v64;
          if (!v25)
            continue;
        }
      }
      goto LABEL_197;
    }
  }
  if (v62 != -1)
  {
    v98 = v62;
    v99 = *(JSC::VM **)(a2 + 56);
    while (1)
    {
      v100 = 16 * (*(_DWORD *)v37 & 0xFFFFFFFE);
      result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, WTF::StringImpl **))(16
                                                                                                 * *(unsigned int *)(v100 + 0x4C)
                                                                                                 + 0x70))(v37, a2, v98, &v109);
      v101 = result;
      if (*((_DWORD *)v99 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v99);
        if (((result | v101) & 1) != 0)
        {
          if ((result & 1) == 0)
            goto LABEL_92;
          goto LABEL_84;
        }
      }
      else if ((result & 1) != 0)
      {
        goto LABEL_92;
      }
      v102 = BYTE2(v115);
      if (BYTE2(v115) == 3)
      {
        if (v116)
          goto LABEL_84;
        v103 = *(unsigned __int8 *)(v37 + 5);
        if (v103 == 61)
        {
LABEL_289:
          v105 = *(_QWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x30);
          if (!v105)
            v105 = *(_QWORD *)(v37 + 16);
          goto LABEL_291;
        }
      }
      else
      {
        v103 = *(unsigned __int8 *)(v37 + 5);
        if (v103 == 61)
        {
          if (BYTE2(v115) == 1)
            goto LABEL_84;
          goto LABEL_287;
        }
      }
      if ((v103 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v37 + 40) & 7u) > 2)
        {
          LOBYTE(v121) = 0;
          v122 = 0;
          result = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v37, (WTF *)&v121);
          if ((_BYTE)v11)
            v104 = result;
          else
            v104 = 0;
        }
        else
        {
          v104 = *(_QWORD *)(v37 + 24);
        }
        if (v104 <= v98)
          goto LABEL_84;
        v102 = BYTE2(v115);
      }
LABEL_287:
      if ((*(_WORD *)(v100 + 12) & 0x800) == 0 || v102 == 3)
        goto LABEL_289;
      if ((*(_WORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE)
                                                                               + 0x4C)
                                                             + 0xB0))(v37, a2);
        v105 = result;
      }
      else
      {
        v105 = *(_QWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x30);
        if (!v105)
          v105 = *(_QWORD *)(v37 + 16);
      }
      if (*((_DWORD *)v99 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v99);
        if ((result & 1) != 0)
          goto LABEL_84;
      }
LABEL_291:
      if ((v105 & 0xFFFE000000000002) == 0)
      {
        v37 = v105;
        if (*(unsigned __int8 *)(v105 + 5) > 0x16u)
          continue;
      }
      goto LABEL_84;
    }
  }
LABEL_197:
  v79 = *(JSC::VM **)(a2 + 56);
  while (1)
  {
    v80 = 16 * (*(_DWORD *)v42 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v42 + 6) & 8) != 0)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, WTF::StringImpl **))(16
                                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x4C)
                                                                                                 + 0x68))(v42, a2, a4, &v109);
      v83 = result;
      if (*((_DWORD *)v79 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v79);
        if ((result & 1) != 0)
          goto LABEL_84;
      }
      if ((v83 & 1) != 0)
        goto LABEL_92;
      if (BYTE2(v115) == 3)
      {
        if (v116)
          goto LABEL_84;
        v84 = *(unsigned __int8 *)(v42 + 5);
        if (v84 == 61)
          goto LABEL_204;
      }
      else
      {
        v84 = *(unsigned __int8 *)(v42 + 5);
        if (v84 == 61)
        {
          if (BYTE2(v115) == 1)
            goto LABEL_84;
          goto LABEL_204;
        }
      }
      if (!a4)
        goto LABEL_204;
      if ((v84 - 50) < 0xFFFFFFF5)
        goto LABEL_204;
      v86 = *(_DWORD *)(a4 + 16);
      if ((v86 & 0x20) != 0)
        goto LABEL_204;
      v87 = *(unsigned int *)(a4 + 4);
      if (!(_DWORD)v87)
        goto LABEL_204;
      result = *(_QWORD *)(a4 + 8);
      if ((v86 & 4) != 0)
      {
        v88 = *(unsigned __int8 *)result;
        if ((_DWORD)v87 == 1)
        {
LABEL_240:
          if ((v88 - 48) < 0xA)
            goto LABEL_84;
          goto LABEL_204;
        }
        if (v88 == 45)
        {
          v89 = *(unsigned __int8 *)(result + 1);
          goto LABEL_244;
        }
      }
      else
      {
        v88 = *(unsigned __int16 *)result;
        if ((_DWORD)v87 == 1)
          goto LABEL_240;
        if (v88 == 45)
        {
          v89 = *(unsigned __int16 *)(result + 2);
LABEL_244:
          if ((v89 - 48) < 0xA)
          {
            if ((_DWORD)v87 == 2)
              goto LABEL_84;
LABEL_256:
            v4 = v4 & 0xFFFFFF0000000000 | v87 | ((unint64_t)((v86 >> 2) & 1) << 32);
            JSC::jsToNumber();
            v91 = (const WTF::StringImpl *)WTF::numberToString();
            result = WTF::equal((WTF *)a4, v91, v92);
            if ((result & 1) != 0)
              goto LABEL_84;
            goto LABEL_204;
          }
          if ((_DWORD)v87 != 9)
            goto LABEL_204;
          v90 = v89 == 73;
LABEL_254:
          if (!v90)
            goto LABEL_204;
          goto LABEL_256;
        }
      }
      if ((v88 - 48) < 0xA || (_DWORD)v87 == 8 && v88 == 73)
        goto LABEL_256;
      if ((_DWORD)v87 != 3)
        goto LABEL_204;
      v90 = v88 == 78;
      goto LABEL_254;
    }
    if ((_DWORD)v15)
    {
      if ((v15 & ~*(_DWORD *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        result = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE)), v79);
        if (result)
        {
          v121 = (WTF::StringImpl *)a4;
          result = JSC::PropertyTable::get(result, (uint64_t *)&v121);
          v17 = result;
          if ((_DWORD)result != -1)
            break;
        }
      }
    }
    if ((*(_BYTE *)(v42 + 6) & 0x20) != 0)
    {
      result = JSC::JSObject::getOwnStaticPropertySlot();
      if ((result & 1) != 0)
        goto LABEL_92;
    }
LABEL_204:
    if ((*(_WORD *)(v80 + 12) & 0x800) == 0)
    {
      v81 = *(_DWORD *)v42;
LABEL_206:
      v82 = *(_QWORD *)(16 * (v81 & 0xFFFFFFFE) + 0x30);
      if (!v82)
        v82 = *(_QWORD *)(v42 + 16);
      goto LABEL_208;
    }
    v81 = *(_DWORD *)v42;
    if (BYTE2(v115) == 3)
      goto LABEL_206;
    v85 = 16 * (v81 & 0xFFFFFFFE);
    if ((*(_WORD *)(v85 + 12) & 0x800) != 0)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(16 * *(unsigned int *)(v85 + 76) + 0xB0))(v42, a2);
      v82 = result;
    }
    else
    {
      v82 = *(_QWORD *)(v85 + 48);
      if (!v82)
        v82 = *(_QWORD *)(v42 + 16);
    }
    if (*((_DWORD *)v79 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v79);
      if ((result & 1) != 0)
        goto LABEL_84;
    }
LABEL_208:
    if ((v82 & 0xFFFE000000000002) == 0)
    {
      v42 = v82;
      if (*(unsigned __int8 *)(v82 + 5) > 0x16u)
        continue;
    }
    goto LABEL_84;
  }
  v26 = HIDWORD(result);
  if ((int)result > 63)
  {
    v93 = *(_QWORD *)(v42 + 8) - 8;
    v94 = 0x3F00000000 - (result << 32);
  }
  else
  {
    v93 = v42 + 16;
    v94 = result << 32;
  }
  v95 = *(_QWORD *)(v93 + (v94 >> 29));
  if ((v95 & 0xFFFE000000000002) != 0)
  {
LABEL_266:
    v109 = (WTF::StringImpl *)v95;
    v113 = v42;
    goto LABEL_91;
  }
  v96 = *(unsigned __int8 *)(v95 + 5);
  if (v96 == 6)
  {
    v30 = *(_DWORD *)(v80 + 16) & 3;
    v97 = *(_QWORD *)(v95 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v95 & 0xFFFFFFFE) + 0x4C))
    {
      v33 = *(_QWORD *)(v95 + 24);
      v32 = *(_QWORD *)(v95 + 32);
      v109 = *(WTF::StringImpl **)(v95 + 8);
      v110 = v97;
      LODWORD(v111) = HIDWORD(result);
      v113 = v42;
      goto LABEL_119;
    }
    v109 = *(WTF::StringImpl **)(v95 + 8);
    v110 = v97;
    LODWORD(v111) = HIDWORD(result);
    v113 = v42;
    goto LABEL_140;
  }
  if (v96 != 5)
    goto LABEL_266;
LABEL_122:
  result = JSC::JSObject::fillGetterPropertySlot();
LABEL_92:
  *v8 = 0;
  v8[8] = 0;
LABEL_93:
  if (v118)
  {
    v53 = *((_DWORD *)v117 + 1);
    if (!v53)
    {
      __break(0xC471u);
      JUMPOUT(0x194FA9834);
    }
    *((_DWORD *)v117 + 1) = v53 - 1;
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

uint64_t WebCore::isVisibleNamedProperty<(WebCore::LegacyOverrideBuiltIns)0,WebCore::JSStorage>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  JSC::VM *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t result;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  JSC::VM *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  _WORD *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unsigned __int16 *v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  int v64;
  _BYTE *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned __int16 *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  JSC::VM *v74;
  uint64_t v75;
  char v76;
  int v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned int v85;
  JSC::VM *v86;
  uint64_t v87;
  JSC::Structure *v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  char OwnStaticPropertySlot;
  uint64_t v95;
  char v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unsigned __int8 *v101;
  int v102;
  int v103;
  unsigned int v104;
  const WTF::StringImpl *v105;
  const unsigned __int8 *v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  JSC::VM *v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char v131;
  JSC::VM *v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  char v137;
  uint64_t v138;

  v4 = a2;
  v138 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if ((*(_BYTE *)(a3 + 16) & 0x20) != 0)
      return 0;
    v6 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)a3 += 2;
    v7 = (WTF::StringImpl *)a3;
  }
  else
  {
    v7 = 0;
    v6 = *(_QWORD *)(a2 + 24);
  }
  v136 = v7;
  v9 = (*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v6 + 24) + 64))(*(_QWORD *)(v6 + 24), &v136);
  v10 = v136;
  v136 = 0;
  if (!v10)
    goto LABEL_7;
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, v8);
    if (v9)
      goto LABEL_8;
    return 0;
  }
  *(_DWORD *)v10 -= 2;
LABEL_7:
  if (!v9)
    return 0;
LABEL_8:
  v11 = *(JSC::VM **)(a1 + 56);
  v126 = 0xFFFFFFFF00000000;
  v128 = 0;
  v129 = 0;
  v127 = v4;
  v130 = 196608;
  v131 = 0;
  v134 = 0;
  v135 = 0;
  v132 = v11;
  ++*((_DWORD *)v11 + 1);
  v133 = 1;
  v12 = a3 >> 4;
  if ((a3 >> 4))
  {
    v13 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
    if ((v12 & ~*(_DWORD *)(v13 + 0x20)) == 0)
    {
      v14 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE)), v11);
      if (v14)
      {
        v136 = (WTF::StringImpl *)a3;
        v15 = JSC::PropertyTable::get(v14, (uint64_t *)&v136);
        v16 = v15;
        if ((_DWORD)v15 != -1)
        {
          v26 = HIDWORD(v15);
          v27 = (uint64_t *)(v4 + 8 * (int)v15 + 16);
          if ((int)v15 >= 64)
            v27 = (uint64_t *)(*(_QWORD *)(v4 + 8) + ((uint64_t)(0x3F00000000 - (v15 << 32)) >> 29) - 8);
          v28 = *v27;
          if ((*v27 & 0xFFFE000000000002) != 0)
            goto LABEL_35;
          v29 = *(unsigned __int8 *)(v28 + 5);
          if (v29 == 6)
          {
            v30 = MEMORY[0x1E0CBE830];
            v31 = *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C);
            v32 = *(_DWORD *)(v13 + 16);
            goto LABEL_39;
          }
          goto LABEL_34;
        }
      }
    }
  }
  if ((*(_BYTE *)(v4 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    goto LABEL_116;
  if (a3)
  {
    v17 = *(_DWORD *)(a3 + 16);
    if ((v17 & 0x20) == 0)
    {
      v18 = *(_BYTE **)(a3 + 8);
      v19 = *(unsigned int *)(a3 + 4);
      if ((v17 & 4) != 0)
      {
        if (!(_DWORD)v19)
          goto LABEL_56;
        v20 = *v18 - 48;
        if (v20 > 9 || v19 >= 2 && *v18 == 48)
          goto LABEL_56;
        v37 = v18 + 1;
        v38 = v19 - 1;
        while (v38)
        {
          if (v20 <= 0x19999999)
          {
            v39 = *v37 - 48;
            if (v39 <= 9)
            {
              v24 = __CFADD__(v39, 10 * v20);
              v20 = v39 + 10 * v20;
              ++v37;
              --v38;
              if (!v24)
                continue;
            }
          }
          goto LABEL_56;
        }
      }
      else
      {
        if (!(_DWORD)v19)
          goto LABEL_56;
        v20 = *(unsigned __int16 *)v18 - 48;
        if (v20 > 9 || v19 >= 2 && *(_WORD *)v18 == 48)
          goto LABEL_56;
        v21 = (unsigned __int16 *)(v18 + 2);
        v22 = v19 - 1;
        while (v22)
        {
          if (v20 <= 0x19999999)
          {
            v23 = *v21 - 48;
            if (v23 <= 9)
            {
              v24 = __CFADD__(v23, 10 * v20);
              v20 = v23 + 10 * v20;
              ++v21;
              --v22;
              if (!v24)
                continue;
            }
          }
          goto LABEL_56;
        }
      }
      if (v20 != -1 && (JSC::JSObject::getOwnPropertySlotByIndex() & 1) != 0)
        goto LABEL_116;
    }
  }
LABEL_56:
  v40 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x30);
  if (!v40)
    v40 = *(_QWORD *)(v4 + 16);
  if ((v40 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v40 + 5) < 0x17u)
    goto LABEL_83;
  v41 = v40 + 6;
  if ((*(_BYTE *)(v40 + 6) & 8) == 0)
  {
    v42 = *(JSC::VM **)(a1 + 56);
    v43 = v40;
    while (1)
    {
      v44 = *(_DWORD *)v43 & 0xFFFFFFFE;
      v45 = 16 * v44;
      if ((_DWORD)v12)
      {
        if ((v12 & ~*(_DWORD *)(16 * v44 + 0x20)) == 0)
        {
          v46 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v45, v42);
          if (v46)
          {
            v136 = (WTF::StringImpl *)a3;
            v47 = JSC::PropertyTable::get(v46, (uint64_t *)&v136);
            v16 = v47;
            if ((_DWORD)v47 != -1)
              break;
          }
        }
      }
      if ((*(_BYTE *)v41 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_116;
      v4 = *(_QWORD *)(v45 + 48);
      if (!v4)
        v4 = *(_QWORD *)(v43 + 16);
      if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) < 0x17u)
      {
        if (!a3)
          goto LABEL_83;
        v48 = *(_DWORD *)(a3 + 16);
        if ((v48 & 0x20) != 0)
          goto LABEL_83;
        v49 = *(_WORD **)(a3 + 8);
        v50 = *(unsigned int *)(a3 + 4);
        if ((v48 & 4) == 0)
        {
          if (!(_DWORD)v50 || (v51 = (unsigned __int16)*v49 - 48, v51 > 9))
          {
LABEL_80:
            v52 = 0;
            LOBYTE(v51) = 0;
            goto LABEL_81;
          }
          if (v50 >= 2 && *v49 == 48)
          {
            v52 = 0;
LABEL_81:
            v53 = 0;
          }
          else
          {
            v59 = v49 + 1;
            v60 = v50 - 1;
            while (v60)
            {
              if (v51 <= 0x19999999)
              {
                v61 = *v59 - 48;
                if (v61 <= 9)
                {
                  v24 = __CFADD__(v61, 10 * v51);
                  v51 = v61 + 10 * v51;
                  ++v59;
                  --v60;
                  if (!v24)
                    continue;
                }
              }
              goto LABEL_80;
            }
            v62 = v51 == -1;
            v53 = v51 & 0xFFFFFF00;
            v52 = 0x100000000;
            if (v51 == -1)
            {
              v52 = 0;
              LOBYTE(v51) = 0;
            }
            if (v62)
              v53 = 0;
          }
          v51 = v51;
          if ((v52 & 0x100000000) == 0)
          {
LABEL_83:
            result = 1;
            goto LABEL_91;
          }
LABEL_144:
          v73 = v53 | v51;
          v74 = *(JSC::VM **)(a1 + 56);
          while (2)
          {
            v75 = 16 * (*(_DWORD *)v40 & 0xFFFFFFFE);
            v76 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *))(16
                                                                                           * *(unsigned int *)(v75 + 0x4C)
                                                                                           + 0x70))(v40, a1, v73, &v124);
            if (*((_DWORD *)v74 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v74) & 1) != 0)
              goto LABEL_83;
            if ((v76 & 1) != 0)
              goto LABEL_116;
            v77 = BYTE2(v130);
            if (BYTE2(v130) == 3)
            {
              if (v131)
                goto LABEL_83;
              v78 = *(unsigned __int8 *)(v40 + 5);
              if (v78 != 61)
                goto LABEL_154;
              goto LABEL_161;
            }
            v78 = *(unsigned __int8 *)(v40 + 5);
            if (v78 == 61)
            {
              if (BYTE2(v130) == 1)
                goto LABEL_83;
            }
            else
            {
LABEL_154:
              if ((v78 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v40 + 40) & 7u) > 2)
                {
                  LOBYTE(v136) = 0;
                  v137 = 0;
                  v81 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v40, (WTF *)&v136);
                  if (v82)
                    v79 = v81;
                  else
                    v79 = 0;
                }
                else
                {
                  v79 = *(_QWORD *)(v40 + 24);
                }
                if (v79 <= v73)
                  goto LABEL_83;
                v77 = BYTE2(v130);
              }
            }
            if ((*(_WORD *)(v75 + 12) & 0x800) != 0 && v77 != 3)
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v80 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v40 & 0xFFFFFFFE)
                                                                                    + 0x4C)
                                                                  + 0xB0))(v40, a1);
              }
              else
              {
                v80 = *(_QWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x30);
                if (!v80)
                  v80 = *(_QWORD *)(v40 + 16);
              }
              if (*((_DWORD *)v74 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v74) & 1) != 0)
                goto LABEL_83;
            }
            else
            {
LABEL_161:
              v80 = *(_QWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x30);
              if (!v80)
                v80 = *(_QWORD *)(v40 + 16);
            }
            if ((v80 & 0xFFFE000000000002) != 0)
              goto LABEL_83;
            v40 = v80;
            if (*(unsigned __int8 *)(v80 + 5) <= 0x16u)
              goto LABEL_83;
            continue;
          }
        }
        if ((_DWORD)v50)
        {
          v71 = *(unsigned __int8 *)v49 - 48;
          if (v71 <= 9 && (v50 < 2 || *(_BYTE *)v49 != 48))
          {
            v121 = v50 - 1;
            v122 = (unsigned __int8 *)v49 + 1;
            while (v121)
            {
              if (v71 > 0x19999999)
                goto LABEL_141;
              v123 = *v122 - 48;
              if (v123 > 9)
                goto LABEL_141;
              v51 = 0;
              LOBYTE(v50) = 0;
              v72 = 0;
              v24 = __CFADD__(v123, 10 * v71);
              v71 = v123 + 10 * v71;
              --v121;
              ++v122;
              if (v24)
                goto LABEL_143;
            }
            if (v71 == -1)
              v51 = 0;
            else
              v51 = v71 & 0xFFFFFF00;
            if (v71 == -1)
              LOBYTE(v50) = 0;
            else
              LOBYTE(v50) = v71;
            if (v71 == -1)
              v72 = 0;
            else
              v72 = 0x100000000;
LABEL_143:
            v53 = v50;
            if ((v72 & 0x100000000) == 0)
              goto LABEL_83;
            goto LABEL_144;
          }
LABEL_141:
          v51 = 0;
          LOBYTE(v50) = 0;
        }
        else
        {
          v51 = 0;
        }
        v72 = 0;
        goto LABEL_143;
      }
      v41 = v4 + 6;
      v43 = v4;
      if ((*(_BYTE *)(v4 + 6) & 8) != 0)
        goto LABEL_119;
    }
    v26 = HIDWORD(v47);
    if ((int)v47 > 63)
    {
      v54 = *(_QWORD *)(v43 + 8) - 8;
      v55 = 0x3F00000000 - (v47 << 32);
    }
    else
    {
      v54 = v43 + 16;
      v55 = v47 << 32;
    }
    v56 = *(_QWORD *)(v54 + (v55 >> 29));
    if ((v56 & 0xFFFE000000000002) != 0)
      goto LABEL_89;
    v57 = *(unsigned __int8 *)(v56 + 5);
    if (v57 == 6)
    {
      v33 = *(_DWORD *)(v45 + 16) & 3;
      v63 = *(_QWORD *)(v56 + 16);
      if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0x4C))
      {
        v124 = *(_QWORD *)(v56 + 8);
        v125 = v63;
        LODWORD(v126) = HIDWORD(v47);
        v128 = v43;
        goto LABEL_134;
      }
      v36 = *(_QWORD *)(v56 + 24);
      v35 = *(_QWORD *)(v56 + 32);
      v124 = *(_QWORD *)(v56 + 8);
      v125 = v63;
      LODWORD(v126) = HIDWORD(v47);
      v128 = v43;
LABEL_112:
      BYTE1(v130) = 3;
      result = 0;
      if (v33 != 2)
        LOBYTE(v130) = 1;
      HIBYTE(v130) = 1;
      v134 = v36;
      v135 = v35;
      goto LABEL_91;
    }
    if (v57 != 5)
    {
LABEL_89:
      result = 0;
      v124 = v56;
      v128 = v43;
      goto LABEL_90;
    }
LABEL_115:
    JSC::JSObject::fillGetterPropertySlot();
    goto LABEL_116;
  }
  v4 = v40;
LABEL_119:
  if (!a3)
    goto LABEL_190;
  v64 = *(_DWORD *)(a3 + 16);
  if ((v64 & 0x20) != 0)
    goto LABEL_190;
  v65 = *(_BYTE **)(a3 + 8);
  v66 = *(unsigned int *)(a3 + 4);
  if ((v64 & 4) != 0)
  {
    if (!(_DWORD)v66)
      goto LABEL_190;
    v67 = *v65 - 48;
    if (v67 > 9 || v66 >= 2 && *v65 == 48)
      goto LABEL_190;
    v83 = v66 - 1;
    v84 = v65 + 1;
    while (v83)
    {
      if (v67 <= 0x19999999)
      {
        v85 = *v84 - 48;
        if (v85 <= 9)
        {
          v24 = __CFADD__(v85, 10 * v67);
          v67 = v85 + 10 * v67;
          --v83;
          ++v84;
          if (!v24)
            continue;
        }
      }
      goto LABEL_190;
    }
  }
  else
  {
    if (!(_DWORD)v66)
      goto LABEL_190;
    v67 = *(unsigned __int16 *)v65 - 48;
    if (v67 > 9 || v66 >= 2 && *(_WORD *)v65 == 48)
      goto LABEL_190;
    v68 = (unsigned __int16 *)(v65 + 2);
    v69 = v66 - 1;
    while (v69)
    {
      if (v67 <= 0x19999999)
      {
        v70 = *v68 - 48;
        if (v70 <= 9)
        {
          v24 = __CFADD__(v70, 10 * v67);
          v67 = v70 + 10 * v67;
          ++v68;
          --v69;
          if (!v24)
            continue;
        }
      }
      goto LABEL_190;
    }
  }
  if (v67 != -1)
  {
    v110 = v67;
    v111 = *(JSC::VM **)(a1 + 56);
    while (1)
    {
      v112 = 16 * (*(_DWORD *)v40 & 0xFFFFFFFE);
      v113 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *))(16
                                                                                      * *(unsigned int *)(v112 + 0x4C)
                                                                                      + 0x70))(v40, a1, v110, &v124);
      v114 = v113;
      if (*((_DWORD *)v111 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v111);
        if (((result | v114) & 1) != 0)
        {
          if (!(_DWORD)result)
            goto LABEL_91;
          goto LABEL_83;
        }
      }
      else if ((v113 & 1) != 0)
      {
        goto LABEL_116;
      }
      v115 = BYTE2(v130);
      if (BYTE2(v130) == 3)
      {
        if (v131)
          goto LABEL_83;
        v116 = *(unsigned __int8 *)(v40 + 5);
        if (v116 == 61)
        {
LABEL_275:
          v118 = *(_QWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x30);
          if (!v118)
            v118 = *(_QWORD *)(v40 + 16);
          goto LABEL_277;
        }
      }
      else
      {
        v116 = *(unsigned __int8 *)(v40 + 5);
        if (v116 == 61)
        {
          if (BYTE2(v130) == 1)
            goto LABEL_83;
          goto LABEL_273;
        }
      }
      if ((v116 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v40 + 40) & 7u) > 2)
        {
          LOBYTE(v136) = 0;
          v137 = 0;
          v119 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v40, (WTF *)&v136);
          if (v120)
            v117 = v119;
          else
            v117 = 0;
        }
        else
        {
          v117 = *(_QWORD *)(v40 + 24);
        }
        if (v117 <= v110)
          goto LABEL_83;
        v115 = BYTE2(v130);
      }
LABEL_273:
      if ((*(_WORD *)(v112 + 12) & 0x800) == 0 || v115 == 3)
        goto LABEL_275;
      if ((*(_WORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v118 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0xB0))(v40, a1);
      }
      else
      {
        v118 = *(_QWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x30);
        if (!v118)
          v118 = *(_QWORD *)(v40 + 16);
      }
      if (*((_DWORD *)v111 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v111) & 1) != 0)
        goto LABEL_83;
LABEL_277:
      if ((v118 & 0xFFFE000000000002) == 0)
      {
        v40 = v118;
        if (*(unsigned __int8 *)(v118 + 5) > 0x16u)
          continue;
      }
      goto LABEL_83;
    }
  }
LABEL_190:
  v86 = *(JSC::VM **)(a1 + 56);
  while (1)
  {
    v87 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v4 + 6) & 8) != 0)
    {
      v95 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
      v96 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *))(16
                                                                                     * *(unsigned int *)(v95 + 0x4C)
                                                                                     + 0x68))(v4, a1, a3, &v124);
      if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
        goto LABEL_83;
      if ((v96 & 1) != 0)
        goto LABEL_116;
      if (BYTE2(v130) == 3)
      {
        if (v131)
          goto LABEL_83;
        v97 = *(unsigned __int8 *)(v4 + 5);
        if (v97 == 61)
        {
LABEL_212:
          v87 = v95;
          goto LABEL_197;
        }
      }
      else
      {
        v97 = *(unsigned __int8 *)(v4 + 5);
        if (v97 == 61)
        {
          v87 = v95;
          if (BYTE2(v130) == 1)
            goto LABEL_83;
          goto LABEL_197;
        }
      }
      if (!a3)
        goto LABEL_212;
      if ((v97 - 50) < 0xFFFFFFF5)
        goto LABEL_212;
      v99 = *(_DWORD *)(a3 + 16);
      if ((v99 & 0x20) != 0)
        goto LABEL_212;
      v100 = *(unsigned int *)(a3 + 4);
      if (!(_DWORD)v100)
        goto LABEL_212;
      v101 = *(unsigned __int8 **)(a3 + 8);
      if ((v99 & 4) != 0)
      {
        v102 = *v101;
        if ((_DWORD)v100 == 1)
        {
LABEL_234:
          v104 = v102 - 48;
          v87 = v95;
          if (v104 < 0xA)
            goto LABEL_83;
          goto LABEL_197;
        }
        if (v102 == 45)
        {
          v103 = v101[1];
LABEL_238:
          if ((v103 - 48) >= 0xA)
          {
            if ((_DWORD)v100 != 9 || v103 != 73)
              goto LABEL_212;
          }
          else if ((_DWORD)v100 == 2)
          {
            goto LABEL_83;
          }
LABEL_249:
          v41 = v41 & 0xFFFFFF0000000000 | v100 | ((unint64_t)((v99 >> 2) & 1) << 32);
          JSC::jsToNumber();
          v105 = (const WTF::StringImpl *)WTF::numberToString();
          v107 = WTF::equal((WTF *)a3, v105, v106);
          v87 = v95;
          if ((v107 & 1) != 0)
            goto LABEL_83;
          goto LABEL_197;
        }
      }
      else
      {
        v102 = *(unsigned __int16 *)v101;
        if ((_DWORD)v100 == 1)
          goto LABEL_234;
        if (v102 == 45)
        {
          v103 = *((unsigned __int16 *)v101 + 1);
          goto LABEL_238;
        }
      }
      if ((v102 - 48) >= 0xA && ((_DWORD)v100 != 8 || v102 != 73) && ((_DWORD)v100 != 3 || v102 != 78))
        goto LABEL_212;
      goto LABEL_249;
    }
    if ((_DWORD)v12)
    {
      if ((v12 & ~*(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v88 = (JSC::Structure *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE));
        v89 = JSC::Structure::ensurePropertyTableIfNotEmpty(v88, v86);
        v87 = (uint64_t)v88;
        if (v89)
        {
          v136 = (WTF::StringImpl *)a3;
          v90 = JSC::PropertyTable::get(v89, (uint64_t *)&v136);
          v16 = v90;
          v87 = (uint64_t)v88;
          if ((_DWORD)v90 != -1)
            break;
        }
      }
    }
    if ((*(_BYTE *)(v4 + 6) & 0x20) != 0)
    {
      v93 = v87;
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot();
      v87 = v93;
      if ((OwnStaticPropertySlot & 1) != 0)
        goto LABEL_116;
    }
LABEL_197:
    if ((*(_WORD *)(v87 + 12) & 0x800) == 0)
    {
      v91 = *(_DWORD *)v4;
LABEL_199:
      v92 = *(_QWORD *)(16 * (v91 & 0xFFFFFFFE) + 0x30);
      if (!v92)
        v92 = *(_QWORD *)(v4 + 16);
      goto LABEL_201;
    }
    v91 = *(_DWORD *)v4;
    if (BYTE2(v130) == 3)
      goto LABEL_199;
    v98 = 16 * (v91 & 0xFFFFFFFE);
    if ((*(_WORD *)(v98 + 12) & 0x800) != 0)
    {
      v92 = (*(uint64_t (**)(uint64_t, uint64_t))(16 * *(unsigned int *)(v98 + 76) + 0xB0))(v4, a1);
    }
    else
    {
      v92 = *(_QWORD *)(v98 + 48);
      if (!v92)
        v92 = *(_QWORD *)(v4 + 16);
    }
    if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
      goto LABEL_83;
LABEL_201:
    if ((v92 & 0xFFFE000000000002) == 0)
    {
      v4 = v92;
      if (*(unsigned __int8 *)(v92 + 5) > 0x16u)
        continue;
    }
    goto LABEL_83;
  }
  v26 = HIDWORD(v90);
  if ((int)v90 > 63)
  {
    v108 = *(_QWORD *)(v4 + 8) - 8;
    v109 = 0x3F00000000 - (v90 << 32);
  }
  else
  {
    v108 = v4 + 16;
    v109 = v90 << 32;
  }
  v28 = *(_QWORD *)(v108 + (v109 >> 29));
  if ((v28 & 0xFFFE000000000002) != 0)
    goto LABEL_35;
  v29 = *(unsigned __int8 *)(v28 + 5);
  if (v29 != 6)
  {
LABEL_34:
    if (v29 == 5)
      goto LABEL_115;
LABEL_35:
    result = 0;
    v124 = v28;
    v128 = v4;
LABEL_90:
    v126 = __PAIR64__(v16, v26);
    LOWORD(v130) = 257;
    goto LABEL_91;
  }
  v30 = MEMORY[0x1E0CBE830];
  v31 = *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C);
  v32 = *((_DWORD *)v88 + 4);
LABEL_39:
  v33 = v32 & 3;
  v34 = *(_QWORD *)(v28 + 16);
  if (v30 == 16 * v31)
  {
    v36 = *(_QWORD *)(v28 + 24);
    v35 = *(_QWORD *)(v28 + 32);
    v124 = *(_QWORD *)(v28 + 8);
    v125 = v34;
    LODWORD(v126) = v26;
    v128 = v4;
    goto LABEL_112;
  }
  v124 = *(_QWORD *)(v28 + 8);
  v125 = v34;
  LODWORD(v126) = v26;
  v128 = v4;
LABEL_134:
  BYTE1(v130) = 3;
  if (v33 != 2)
  {
    result = 0;
    LOBYTE(v130) = 1;
    goto LABEL_91;
  }
LABEL_116:
  result = 0;
LABEL_91:
  if (v133)
  {
    v58 = *((_DWORD *)v132 + 1);
    if (!v58)
    {
      __break(0xC471u);
      JUMPOUT(0x194FAA6F8);
    }
    *((_DWORD *)v132 + 1) = v58 - 1;
  }
  return result;
}

unint64_t WebCore::jsStorageConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSStoragePrototype::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSStorage>,(WebCore::DOMConstructorID)758>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsStorage_length(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 24) + 16))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 24));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSStorage::subspaceForImpl(WebCore::JSStorage *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6144);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v7, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 6144))
  {
    v12 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v12, JSC::JSCell::numberOfLowerTierCells, &v13);
    v11 = *(_QWORD *)(v9 + 6144);
    *(_QWORD *)(v9 + 6144) = v13;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v13 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSStorage::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v13);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v13);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSStorageOwner::isReachableFromOpaqueRoots(int a1, uint64_t a2, int a3, JSC::AbstractSlotVisitor *this, _QWORD *a5)
{
  uint64_t v5;
  void *v6;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 16);
  if (!v5)
    return 0;
  v6 = *(void **)(v5 + 8);
  if (!v6)
    return 0;
  if (a5)
  {
    *a5 = "Reachable from Window";
    a5[1] = 22;
  }
  return JSC::AbstractSlotVisitor::containsOpaqueRoot(this, v6);
}

WebCore::Storage **WebCore::JSStorageOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::Storage *v3;
  WebCore::Storage *v5;

  v3 = *(WebCore::Storage **)(*(_QWORD *)a2 + 24);
  ++*((_DWORD *)v3 + 2);
  v5 = v3;
  if (*(_DWORD *)(a3 + 48))
  {
    JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSBlob *>((uint64_t *)(a3 + 32), (uint64_t)v3);
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  return WTF::Ref<WebCore::Storage,WTF::RawPtrTraits<WebCore::Storage>,WTF::DefaultRefDerefTraits<WebCore::Storage>>::~Ref(&v5);
}

WebCore::Storage **WTF::Ref<WebCore::Storage,WTF::RawPtrTraits<WebCore::Storage>,WTF::DefaultRefDerefTraits<WebCore::Storage>>::~Ref(WebCore::Storage **a1)
{
  WebCore::Storage *v2;
  bmalloc::api *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 2) == 1)
    {
      WebCore::Storage::~Storage(v2);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)v2 + 2);
    }
  }
  return a1;
}

uint64_t WebCore::createWrapper<WebCore::Storage,WebCore::Storage>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)*a2;
  v5 = WebCore::getDOMStructure<WebCore::JSStorage>(*(WebCore::JSStorage **)(a1 + 56), (JSC::JSCell **)a1);
  v6 = WebCore::JSStorage::create(v5, (JSC::VM *)a1, a2);
  WebCore::cacheWrapper<WebCore::Storage,WebCore::JSStorage>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

uint64_t WebCore::toJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::Storage *a4)
{
  return WebCore::wrap<WebCore::Storage>((uint64_t)a2, (uint64_t)a3);
}

unint64_t JSC::jsDynamicCast<WebCore::JSStorage *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSStorage::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSStorage::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSStorageEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  unint64_t v2;
  JSC::VM *v4;
  unint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  JSC::JSCell *v9;
  uint64_t Object;
  JSC::Structure *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  BOOL v14;
  int v15;
  void (***v16)(WebCore::StorageEvent *__hidden);
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WebCore::Storage *v25;
  _DWORD *v26;
  int v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  __int128 v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WebCore::JSDOMGlobalObject *v37;
  WTF::StringImpl *v38;
  void (***v39)(WebCore::StorageEvent *__hidden);
  JSC::VM *v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char **v47;
  int v48;
  unint64_t v49;
  WebCore::JSEvent *v50;
  JSC::JSCell *v51;
  unint64_t Structure;
  JSC::Structure *v53;
  JSC::JSCell *v54;
  uint64_t v55;
  JSCell *v56;
  JSC::JSCell *v57;
  JSC::JSGlobalObject *v58;
  JSC::JSObject *v59;
  JSC::JSGlobalObject *v60;
  JSC::VM *v61;
  WebCore::JSDOMGlobalObject *v62;
  JSC::Structure *v63;
  JSC::VM *FunctionRealm;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char **v71;
  int v72;
  JSC::JSCell *v73;
  unint64_t v74;
  JSC::Structure *v75;
  JSC::JSCell *v76;
  uint64_t v77;
  unint64_t SubclassStructure;
  void (***v79)(WebCore::StorageEvent *__hidden);
  unint64_t v81;
  JSC::VM *v82;
  double v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  BOOL v87;
  JSC::VM *v88;
  double v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  unint64_t v92;
  BOOL v93;
  JSC::VM *v94;
  double v95;
  WTF::StringImpl *v96;
  bmalloc::api *v97;
  void *v98;
  JSValue v99;
  BOOL v100;
  int v101;
  uint64_t v102;
  int *v103;
  int v104;
  BOOL v105;
  int v106;
  uint64_t v107;
  int *v108;
  int v109;
  BOOL v110;
  int v111;
  uint64_t v112;
  int *v113;
  int v114;
  unint64_t v115;
  JSC::VM *v116;
  __int16 v117;
  BOOL v118;
  _OWORD v119[2];
  uint64_t v120;
  int v121;
  WTF::StringImpl *v122;
  int v123;
  _DWORD *v124;
  int v125;
  unint64_t v126;
  int v127;
  WTF::StringImpl *v128;
  int v129;
  void (***v130)(WebCore::StorageEvent *__hidden);
  int v131;
  __int16 v132;
  BOOL v133;
  _BYTE v134[40];
  JSC::VM *v135;
  char v136[9];

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v99.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, a1, v99);
  }
  v6 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v122);
  v8 = v123;
  if (!v123)
  {
    v115 = v6;
    v116 = v4;
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v135 = (JSC::VM *)*((_QWORD *)a1 + 7);
    }
    else
    {
      v9 = *(JSC::JSCell **)(a2 + 56);
      v2 = *((_QWORD *)a1 + 7);
      v135 = (JSC::VM *)v2;
      if (((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7) != 2)
      {
        if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v9)) == 0)
        {
          JSC::throwTypeError();
          v56 = 0;
          v29 = 1;
          v121 = 1;
LABEL_109:
          (*(&off_1E330B480 + v29))((int)&v132, (WebCore::StorageEvent::Init *)&v117);
          v8 = v123;
          goto LABEL_110;
        }
        v11 = (JSC::Structure *)Object;
        v132 = 0;
        v133 = 0;
        memset(v134, 0, sizeof(v134));
        WTF::AtomStringImpl::addLiteral();
        v12 = (WTF::StringImpl *)v130;
        v6 = JSC::JSObject::get(v11, a1, (unint64_t)v130);
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v13);
          else
            *(_DWORD *)v12 -= 2;
        }
        if (*(_DWORD *)(v2 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2) & 1) != 0)
        {
LABEL_208:
          v29 = 1;
          v121 = 1;
          WebCore::StorageEvent::Init::~Init((WebCore::StorageEvent::Init *)&v132, v7);
          v56 = 0;
          goto LABEL_109;
        }
        if (v6 == 10)
        {
          v14 = 0;
          while (1)
          {
            LOBYTE(v132) = v14;
            WTF::AtomStringImpl::addLiteral();
            v84 = (WTF::StringImpl *)v130;
            v86 = JSC::JSObject::get(v11, a1, (unint64_t)v130);
            if (v84)
            {
              if (*(_DWORD *)v84 == 2)
                WTF::StringImpl::destroy(v84, v85);
              else
                *(_DWORD *)v84 -= 2;
            }
            if (*(_DWORD *)(v2 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2) & 1) != 0)
              goto LABEL_208;
            if (v86 == 10)
            {
              v87 = 0;
              goto LABEL_132;
            }
            v88 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v86 >= 0xFFFE000000000000)
              break;
            *(_QWORD *)&v89 = v86 - 0x2000000000000;
            if (v86 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v86 & 0xFFFE000000000002) != 0)
              {
                v87 = v86 == 7;
                goto LABEL_131;
              }
              v106 = *(unsigned __int8 *)(v86 + 5);
              if (v106 == 3)
              {
                v109 = *(_DWORD *)(v86 + 8);
                goto LABEL_245;
              }
              if (v106 == 2)
              {
                v107 = *(_QWORD *)(v86 + 8);
                if ((v107 & 1) != 0)
                  v108 = (int *)(v86 + 16);
                else
                  v108 = (int *)(v107 + 4);
                v109 = *v108;
LABEL_245:
                v105 = v109 == 0;
              }
              else
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v86 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_250:
                  v87 = 1;
                  goto LABEL_131;
                }
                v105 = *(_QWORD *)(16 * (*(_DWORD *)v86 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              }
LABEL_246:
              v87 = !v105;
              goto LABEL_131;
            }
            if (v89 > 0.0)
              goto LABEL_250;
            v87 = v89 < 0.0;
LABEL_131:
            if (*((_DWORD *)v88 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v88) & 1) != 0)
              goto LABEL_208;
LABEL_132:
            HIBYTE(v132) = v87;
            WTF::AtomStringImpl::addLiteral();
            v90 = (WTF::StringImpl *)v130;
            v92 = JSC::JSObject::get(v11, a1, (unint64_t)v130);
            if (v90)
            {
              if (*(_DWORD *)v90 == 2)
                WTF::StringImpl::destroy(v90, v91);
              else
                *(_DWORD *)v90 -= 2;
            }
            if (*(_DWORD *)(v2 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2) & 1) != 0)
              goto LABEL_208;
            if (v92 == 10)
            {
              v93 = 0;
              goto LABEL_143;
            }
            v94 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v92 >= 0xFFFE000000000000)
            {
              v110 = (_DWORD)v92 == 0;
              goto LABEL_253;
            }
            *(_QWORD *)&v95 = v92 - 0x2000000000000;
            if (v92 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v92 & 0xFFFE000000000002) != 0)
              {
                v93 = v92 == 7;
                goto LABEL_142;
              }
              v111 = *(unsigned __int8 *)(v92 + 5);
              if (v111 == 3)
              {
                v114 = *(_DWORD *)(v92 + 8);
              }
              else
              {
                if (v111 != 2)
                {
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                  {
LABEL_257:
                    v93 = 1;
                    goto LABEL_142;
                  }
                  v110 = *(_QWORD *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                  goto LABEL_253;
                }
                v112 = *(_QWORD *)(v92 + 8);
                if ((v112 & 1) != 0)
                  v113 = (int *)(v92 + 16);
                else
                  v113 = (int *)(v112 + 4);
                v114 = *v113;
              }
              v110 = v114 == 0;
LABEL_253:
              v93 = !v110;
              goto LABEL_142;
            }
            if (v95 > 0.0)
              goto LABEL_257;
            v93 = v95 < 0.0;
LABEL_142:
            if (*((_DWORD *)v94 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v94) & 1) != 0)
              goto LABEL_208;
LABEL_143:
            v133 = v93;
            WTF::AtomStringImpl::addLiteral();
            v96 = (WTF::StringImpl *)v130;
            v6 = JSC::JSObject::get(v11, a1, (unint64_t)v130);
            if (v96)
            {
              if (*(_DWORD *)v96 == 2)
                WTF::StringImpl::destroy(v96, v7);
              else
                *(_DWORD *)v96 -= 2;
            }
            if (*(_DWORD *)(v2 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2) & 1) != 0)
              goto LABEL_208;
            if (v6 == 10)
            {
              v15 = 0;
LABEL_15:
              v16 = 0;
              v131 = 0;
LABEL_16:
              v130 = 0;
              v17 = *(WTF::StringImpl **)v134;
              *(_QWORD *)v134 = v16;
              if (v17)
              {
                if (*(_DWORD *)v17 != 2)
                {
                  *(_DWORD *)v17 -= 2;
                  goto LABEL_19;
                }
                WTF::StringImpl::destroy(v17, v7);
                if (v15)
                {
LABEL_25:
                  v18 = 0;
                  v129 = 0;
                  goto LABEL_28;
                }
              }
              else
              {
LABEL_19:
                if (v15)
                  goto LABEL_25;
              }
              WTF::AtomStringImpl::addLiteral();
              v6 = (unint64_t)v128;
              v2 = JSC::JSObject::get(v11, a1, (unint64_t)v128);
              if (v6)
              {
                if (*(_DWORD *)v6 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v6, v7);
                else
                  *(_DWORD *)v6 -= 2;
              }
              if (*((_DWORD *)v135 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v135))
              {
                v29 = 1;
                v121 = 1;
LABEL_76:
                v31 = v131;
                goto LABEL_77;
              }
              if (v2 == 10)
                goto LABEL_25;
              WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(a1, v2, (uint64_t)&v128);
              v19 = v129;
              if (v129)
              {
                v29 = 1;
                v121 = 1;
              }
              else
              {
                v18 = v128;
LABEL_28:
                v128 = 0;
                v20 = *(WTF::StringImpl **)&v134[16];
                *(_QWORD *)&v134[16] = v18;
                if (v20)
                {
                  if (*(_DWORD *)v20 != 2)
                  {
                    *(_DWORD *)v20 -= 2;
                    goto LABEL_31;
                  }
                  WTF::StringImpl::destroy(v20, v7);
                  if (v15)
                  {
LABEL_37:
                    v21 = 0;
                    v127 = 0;
                    goto LABEL_40;
                  }
                }
                else
                {
LABEL_31:
                  if (v15)
                    goto LABEL_37;
                }
                WTF::AtomStringImpl::addLiteral();
                v6 = v126;
                v2 = JSC::JSObject::get(v11, a1, v126);
                if (v6)
                {
                  if (*(_DWORD *)v6 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v6, v7);
                  else
                    *(_DWORD *)v6 -= 2;
                }
                if (*((_DWORD *)v135 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v135))
                {
                  v29 = 1;
                  v121 = 1;
                  goto LABEL_73;
                }
                if (v2 == 10)
                  goto LABEL_37;
                WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(a1, v2, (uint64_t)&v126);
                v22 = v127;
                if (v127)
                {
                  v29 = 1;
                  v121 = 1;
                }
                else
                {
                  v21 = v126;
LABEL_40:
                  v126 = 0;
                  v23 = *(WTF::StringImpl **)&v134[8];
                  *(_QWORD *)&v134[8] = v21;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 != 2)
                    {
                      *(_DWORD *)v23 -= 2;
                      goto LABEL_43;
                    }
                    WTF::StringImpl::destroy(v23, v7);
                    if ((v15 & 1) != 0)
                    {
LABEL_49:
                      v24 = 0;
                      goto LABEL_50;
                    }
                  }
                  else
                  {
LABEL_43:
                    if ((v15 & 1) != 0)
                      goto LABEL_49;
                  }
                  WTF::AtomStringImpl::addLiteral();
                  v6 = (unint64_t)v124;
                  v2 = JSC::JSObject::get(v11, a1, (unint64_t)v124);
                  if (v6)
                  {
                    if (*(_DWORD *)v6 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v6, v7);
                    else
                      *(_DWORD *)v6 -= 2;
                  }
                  if (*((_DWORD *)v135 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v135))
                  {
LABEL_162:
                    v29 = 1;
                    v121 = 1;
                    goto LABEL_70;
                  }
                  if ((v2 | 8) == 0xA)
                    goto LABEL_49;
                  v124 = (_DWORD *)*((_QWORD *)a1 + 7);
                  v81 = JSC::jsDynamicCast<WebCore::JSStorage *>(v2);
                  if (!v81 || (v24 = *(_QWORD *)(v81 + 24)) == 0)
                  {
                    JSC::throwTypeError();
                    goto LABEL_162;
                  }
                  ++*(_DWORD *)(v24 + 8);
LABEL_50:
                  v25 = *(WebCore::Storage **)&v134[32];
                  *(_QWORD *)&v134[32] = v24;
                  if (v25)
                  {
                    if (*((_DWORD *)v25 + 2) != 1)
                    {
                      --*((_DWORD *)v25 + 2);
                      goto LABEL_53;
                    }
                    WebCore::Storage::~Storage(v25);
                    bmalloc::api::isoDeallocate(v97, v98);
                    if (v15)
                    {
LABEL_59:
                      v26 = (_DWORD *)*MEMORY[0x1E0CBF738];
                      if (*MEMORY[0x1E0CBF738])
                        *v26 += 2;
                      v125 = 0;
LABEL_64:
                      v124 = 0;
                      v28 = *(WTF::StringImpl **)&v134[24];
                      *(_QWORD *)&v134[24] = v26;
                      if (v28)
                      {
                        if (*(_DWORD *)v28 == 2)
                        {
                          WTF::StringImpl::destroy(v28, v7);
                          v27 = v125;
                        }
                        else
                        {
                          v27 = 0;
                          *(_DWORD *)v28 -= 2;
                        }
                      }
                      else
                      {
                        v27 = 0;
                      }
                      v29 = 0;
                      v117 = v132;
                      v118 = v133;
                      v30 = *(_QWORD *)v134;
                      memset(v134, 0, sizeof(v134));
                      *(_QWORD *)&v119[0] = v30;
                      *(_OWORD *)((char *)v119 + 8) = *(_OWORD *)&v134[8];
                      *((_QWORD *)&v119[1] + 1) = *(_QWORD *)&v134[24];
                      v120 = *(_QWORD *)&v134[32];
                      goto LABEL_68;
                    }
                  }
                  else
                  {
LABEL_53:
                    if (v15)
                      goto LABEL_59;
                  }
                  WTF::AtomStringImpl::addLiteral();
                  v2 = (unint64_t)v124;
                  v11 = (JSC::Structure *)JSC::JSObject::get(v11, a1, (unint64_t)v124);
                  if (v2)
                  {
                    if (*(_DWORD *)v2 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v2, v7);
                    else
                      *(_DWORD *)v2 -= 2;
                  }
                  if (*((_DWORD *)v135 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v135))
                    goto LABEL_162;
                  if (v11 == (JSC::Structure *)10)
                    goto LABEL_59;
                  WebCore::valueToUSVString(a1, (uint64_t)v11, (uint64_t)&v124);
                  v27 = v125;
                  if (!v125)
                  {
                    v26 = v124;
                    goto LABEL_64;
                  }
                  v29 = 1;
LABEL_68:
                  v121 = v29;
                  if (v27 != -1)
                    ((void (*)(char *, _DWORD **))off_1E33088B8[v27])(v136, &v124);
LABEL_70:
                  v22 = v127;
                }
                if (v22 != -1)
                  ((void (*)(_DWORD **, unint64_t *))off_1E33088B8[v22])(&v124, &v126);
LABEL_73:
                v19 = v129;
              }
              if (v19 != -1)
                ((void (*)(unint64_t *, WTF::StringImpl **))off_1E33088B8[v19])(&v126, &v128);
              goto LABEL_76;
            }
            WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(a1, v6, (uint64_t)&v130);
            v31 = v131;
            if (!v131)
            {
              v15 = 0;
              v16 = v130;
              goto LABEL_16;
            }
            v29 = 1;
            v121 = 1;
LABEL_77:
            if (v31 != -1)
              ((void (*)(WTF::StringImpl **, void (****)(WebCore::StorageEvent *__hidden)))off_1E33088B8[v31])(&v128, &v130);
            WebCore::StorageEvent::Init::~Init((WebCore::StorageEvent::Init *)&v132, v7);
            if (v29)
            {
              v56 = 0;
              v29 = 1;
              goto LABEL_109;
            }
            if (!v123)
            {
              v32 = v122;
              v122 = 0;
              v128 = v32;
              v132 = v117;
              v133 = v118;
              v33 = v119[0];
              memset(v119, 0, sizeof(v119));
              *(_OWORD *)v134 = v33;
              *(_OWORD *)&v134[16] = v119[1];
              v34 = v120;
              v120 = 0;
              *(_QWORD *)&v134[32] = v34;
              WebCore::StorageEvent::create(&v128, (unsigned __int8 *)&v132, 0, (uint64_t *)&v130);
              WebCore::StorageEvent::Init::~Init((WebCore::StorageEvent::Init *)&v132, v35);
              v38 = v128;
              v128 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, v36);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = v130;
              if (*v130 != off_1E344FA20)
              {
                __break(0xC471u);
                JUMPOUT(0x194FABE38);
              }
              v40 = *(JSC::VM **)(v115 + 40);
              v41 = *((_QWORD *)v40 + 412);
              if (!v41)
                goto LABEL_91;
              v42 = *(_DWORD *)(v41 - 8);
              v43 = ((unint64_t)&WebCore::JSStorageEvent::s_info
                   + ~((_QWORD)&WebCore::JSStorageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSStorageEvent::s_info
                                                                          + ~((_QWORD)&WebCore::JSStorageEvent::s_info << 32)) >> 22);
              v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
              v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
              v46 = v42 & ((v45 >> 31) ^ v45);
              v47 = *(char ***)(v41 + 16 * v46);
              if (v47 == &WebCore::JSStorageEvent::s_info)
              {
LABEL_90:
                v49 = *(_QWORD *)(v41 + 16 * v46 + 8);
                if (!v49)
                  goto LABEL_91;
              }
              else
              {
                v48 = 1;
                while (v47)
                {
                  v46 = ((_DWORD)v46 + v48) & v42;
                  v47 = *(char ***)(v41 + 16 * v46);
                  ++v48;
                  if (v47 == &WebCore::JSStorageEvent::s_info)
                    goto LABEL_90;
                }
LABEL_91:
                v50 = (WebCore::JSEvent *)*((_QWORD *)v40 + 7);
                v51 = (JSC::JSCell *)WebCore::JSEvent::prototype(v50, *(JSC::VM **)(v115 + 40), v37);
                Structure = WebCore::JSStorageEventPrototype::createStructure((uint64_t *)v50, (uint64_t)v40, v51);
                *(_DWORD *)(Structure + 16) |= 0x80000u;
                v54 = (JSC::JSCell *)WebCore::JSStorageEventPrototype::create(v50, v40, Structure, v53);
                v55 = WebCore::JSStorageEvent::createStructure((uint64_t *)v50, (uint64_t)v40, v54);
                v49 = WebCore::cacheDOMStructure((JSCell *)v40, v55, (uint64_t)&WebCore::JSStorageEvent::s_info);
              }
              v56 = (JSCell *)WebCore::JSStorageEvent::create(v49, v40, (uint64_t *)&v130);
              WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v40 + 415), (uint64_t)v39, (uint64_t)v56);
              v57 = *(JSC::JSCell **)(a2 + 40);
              if (((unint64_t)v57 & 0xFFFE000000000002) != 0
                || (v58 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v57)) == 0
                || (v60 = v58, v58 == *(JSC::JSGlobalObject **)(a2 + 24))
                || (v61 = (JSC::VM *)*((_QWORD *)a1 + 7),
                    FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v58, v59),
                    *((_DWORD *)v61 + 20))
                && (JSC::VM::hasExceptionsAfterHandlingTraps(v61) & 1) != 0)
              {
LABEL_105:
                if (*((_DWORD *)v116 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v116) & 1) != 0)
                  v56 = 0;
                v79 = v130;
                v130 = 0;
                if (v79)
                {
                  if (*((_DWORD *)v79 + 4) == 1)
                    (*v79)[1]((WebCore::StorageEvent *)v79);
                  else
                    --*((_DWORD *)v79 + 4);
                }
                goto LABEL_109;
              }
              v65 = *((_QWORD *)FunctionRealm + 412);
              if (v65)
              {
                v66 = *(_DWORD *)(v65 - 8);
                v67 = ((unint64_t)&WebCore::JSStorageEvent::s_info
                     + ~((_QWORD)&WebCore::JSStorageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSStorageEvent::s_info
                                                                            + ~((_QWORD)&WebCore::JSStorageEvent::s_info << 32)) >> 22);
                v68 = 9 * ((v67 + ~(v67 << 13)) ^ ((v67 + ~(v67 << 13)) >> 8));
                v69 = (v68 ^ (v68 >> 15)) + ~((v68 ^ (v68 >> 15)) << 27);
                v70 = v66 & ((v69 >> 31) ^ v69);
                v71 = *(char ***)(v65 + 16 * v70);
                if (v71 != &WebCore::JSStorageEvent::s_info)
                {
                  v72 = 1;
                  while (v71)
                  {
                    v70 = ((_DWORD)v70 + v72) & v66;
                    v71 = *(char ***)(v65 + 16 * v70);
                    ++v72;
                    if (v71 == &WebCore::JSStorageEvent::s_info)
                      goto LABEL_101;
                  }
                  goto LABEL_102;
                }
LABEL_101:
                v62 = *(WebCore::JSDOMGlobalObject **)(v65 + 16 * v70 + 8);
                if (!v62)
                  goto LABEL_102;
              }
              else
              {
LABEL_102:
                v73 = (JSC::JSCell *)WebCore::JSEvent::prototype(v61, FunctionRealm, v62);
                v74 = WebCore::JSStorageEventPrototype::createStructure((uint64_t *)v61, (uint64_t)FunctionRealm, v73);
                *(_DWORD *)(v74 + 16) |= 0x80000u;
                v76 = (JSC::JSCell *)WebCore::JSStorageEventPrototype::create(v61, FunctionRealm, v74, v75);
                v77 = WebCore::JSStorageEvent::createStructure((uint64_t *)v61, (uint64_t)FunctionRealm, v76);
                v62 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v77, (uint64_t)&WebCore::JSStorageEvent::s_info);
              }
              SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v60, v62, v63);
              if (!*((_DWORD *)v61 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v61) & 1) == 0)
                JSC::JSObject::setStructure(v56, v61, SubclassStructure);
              goto LABEL_105;
            }
            v82 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_210:
            v100 = (_DWORD)v6 == 0;
LABEL_239:
            v14 = !v100;
LABEL_120:
            if (*((_DWORD *)v82 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v82) & 1) != 0)
              goto LABEL_208;
          }
          v105 = (_DWORD)v86 == 0;
          goto LABEL_246;
        }
        v82 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v6 >= 0xFFFE000000000000)
          goto LABEL_210;
        *(_QWORD *)&v83 = v6 - 0x2000000000000;
        if (v6 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v83 <= 0.0)
          {
            v14 = v83 < 0.0;
            goto LABEL_120;
          }
        }
        else
        {
          if ((v6 & 0xFFFE000000000002) != 0)
          {
            v14 = v6 == 7;
            goto LABEL_120;
          }
          v101 = *(unsigned __int8 *)(v6 + 5);
          if (v101 == 3)
          {
            v104 = *(_DWORD *)(v6 + 8);
LABEL_238:
            v100 = v104 == 0;
            goto LABEL_239;
          }
          if (v101 == 2)
          {
            v102 = *(_QWORD *)(v6 + 8);
            if ((v102 & 1) != 0)
              v103 = (int *)(v6 + 16);
            else
              v103 = (int *)(v102 + 4);
            v104 = *v103;
            goto LABEL_238;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v100 = *(_QWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_239;
          }
        }
        v14 = 1;
        goto LABEL_120;
      }
    }
    v11 = 0;
    memset(v134, 0, sizeof(v134));
    v132 = 0;
    v133 = 0;
    v15 = 1;
    goto LABEL_15;
  }
  v56 = 0;
LABEL_110:
  if (v8 != -1)
    ((void (*)(__int16 *, WTF::StringImpl **))off_1E330AAE8[v8])(&v117, &v122);
  return v56;
}

uint64_t WebCore::JSStorageEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSStorageEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSStorageEventPrototype::create(WebCore::JSStorageEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSStorageEvent::s_info, &WebCore::JSStorageEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSStorageEvent>,(WebCore::DOMConstructorID)759>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6072);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSStorageEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSStorageEvent::s_info + ~((_QWORD)&WebCore::JSStorageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSStorageEvent::s_info + ~((_QWORD)&WebCore::JSStorageEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSStorageEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSStorageEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSStorageEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSStorageEventPrototype::create((WebCore::JSStorageEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSStorageEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSStorageEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6072) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsStorageEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSStorageEventPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSStorageEvent>,(WebCore::DOMConstructorID)759>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsStorageEvent_key(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 + 4);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v3 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v3 + 64760);
  if (!v5 || v2 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsStorageEvent_oldValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 + 4);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v3 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v3 + 64760);
  if (!v5 || v2 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsStorageEvent_newValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 + 4);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v3 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v3 + 64760);
  if (!v5 || v2 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsStorageEvent_url(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 96);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsStorageEvent_storageArea(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (v3)
    return WebCore::wrap<WebCore::Storage>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v3);
  else
    return 2;
}

uint64_t WebCore::JSStorageEvent::subspaceForImpl(WebCore::JSStorageEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6152);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6152))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6152);
    *(_QWORD *)(v8 + 6152) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6152);
  *(_QWORD *)(v3 + 6152) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

unint64_t WebCore::convertDictionaryToJS(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v6 = 8 * *(unsigned __int8 *)(v5 + 14);
  v7 = JSC::allocateCell<JSC::JSFinalObject>(v4, v6 + 16);
  v8 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)v7 = v5 >> 4;
  *(_DWORD *)(v7 + 4) = v8;
  *(_QWORD *)(v7 + 8) = 0;
  bzero((void *)(v7 + 16), v6);
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  v9 = a3[1];
  v10 = HIDWORD(v9);
  v11 = (double)v9;
  if ((v9 & 0x80000000) != 0)
    v12 = COERCE__INT64((double)v9) + 0x2000000000000;
  else
    v12 = v9 | 0xFFFE000000000000;
  if (v10)
    v13 = *(_QWORD *)&v11 + 0x2000000000000;
  else
    v13 = v12;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v14 = v21;
  v21 = 0;
  v22 = v7;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v14, v13, 0, (uint64_t)&v21);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  v16 = (*a3 & 0x80000000) != 0
      ? COERCE__INT64((double)*a3) + 0x2000000000000
      : *a3 | 0xFFFE000000000000;
  v17 = HIDWORD(*a3) ? COERCE__INT64((double)*a3) + 0x2000000000000 : v16;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v18 = v21;
  v21 = 0;
  v22 = v7;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v18, v17, 0, (uint64_t)&v21);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v7;
}

uint64_t WebCore::JSStorageManager::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSStorageManagerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSStorageManagerPrototype::create(WebCore::JSStorageManagerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  int *v9;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  JSC::Structure *v32;
  int v33;
  unint64_t v35;
  WTF::StringImpl *v36[6];
  int v37;
  int v38;
  JSC::Structure *v39;
  int v40;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v35);
    *((_QWORD *)this + 4865) = SlowCase + (int)v35;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v9 = (int *)((char *)this + 93124);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSStorageManager::s_info, &WebCore::JSStorageManagerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v10 = *(unsigned int *)(16 * (**(_DWORD **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (**(_DWORD **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMWindowBase::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMWindowBase::s_info && v12 != 0);
  }
  if (!v11)
  {
    WTF::AtomStringImpl::addLiteral();
    v15 = v36[0];
    v16 = *v9;
    *v9 = 1;
    LODWORD(v36[0]) = -1;
    WORD2(v36[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v16;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v17);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v18 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 136))(v18) + 464) & 0x200000000000) != 0)
  {
    v21 = !v11;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v19 = v36[0];
    v20 = *v9;
    v21 = 1;
    *v9 = 1;
    LODWORD(v36[0]) = -1;
    WORD2(v36[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v20;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v22);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  v23 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23)
    && (v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                                * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                                + 0x28)),
        (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 136))(v24) + 448) & 2) != 0))
  {
    if (!v21)
      goto LABEL_30;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v25 = v36[0];
    v26 = *v9;
    *v9 = 1;
    LODWORD(v36[0]) = -1;
    WORD2(v36[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v26;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v27);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_30:
  v28 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v30 = JSC::JSString::create((uint64_t)this, v36);
  v31 = v36[0];
  v36[0] = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v29);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v40 = *(_DWORD *)SlowCase;
  v39 = v32;
  v33 = JSC::Structure::outOfLineCapacity(v32);
  v37 = 0;
  v38 = v33;
  v36[0] = (WTF::StringImpl *)&v38;
  v36[1] = (WTF::StringImpl *)SlowCase;
  v36[2] = this;
  v36[3] = (WTF::StringImpl *)&v40;
  v36[4] = (WTF::StringImpl *)&v39;
  v36[5] = (WTF::StringImpl *)&v37;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v32, this, v28, 6, (uint64_t)v36);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v37, v30);
  *((_DWORD *)v32 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSStorageManager>,(WebCore::DOMConstructorID)212>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1696);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSStorageManager>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSStorageManager::s_info + ~((_QWORD)&WebCore::JSStorageManager::s_info << 32)) ^ (((unint64_t)&WebCore::JSStorageManager::s_info + ~((_QWORD)&WebCore::JSStorageManager::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSStorageManager::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSStorageManager::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSStorageManagerPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSStorageManagerPrototype::create((WebCore::JSStorageManagerPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSStorageManager::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSStorageManager::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1696) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsStorageManagerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSStorageManagerPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSStorageManager>,(WebCore::DOMConstructorID)212>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSStorageManagerOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

unint64_t WebCore::wrap<WebCore::StorageManager>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSStorageManager::s_info + ~((_QWORD)&WebCore::JSStorageManager::s_info << 32)) ^ (((unint64_t)&WebCore::JSStorageManager::s_info + ~((_QWORD)&WebCore::JSStorageManager::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSStorageManager::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSStorageManager::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSStorageManagerPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSStorageManagerPrototype::create((WebCore::JSStorageManagerPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSStorageManager::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSStorageManager::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 1720);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 1720))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 1720);
    *(_QWORD *)(v36 + 1720) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 1720);
  *(_QWORD *)(v32 + 1720) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336A70 & 1) == 0)
  {
    qword_1EE336A68 = (uint64_t)&off_1E3307E40;
    byte_1EE336A70 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336A68;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

WebCore::JSStringCallback *WebCore::JSStringCallback::JSStringCallback(WebCore::JSStringCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E3306560;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSStringCallback::~JSStringCallback(WebCore::JSStringCallback *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  v3 = *((_QWORD *)this + 1);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = v4 - 96, !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 88))(v4 - 96)))
  {
    v9 = *((_QWORD *)this + 3);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E3226900;
    v10[1] = v9;
    v12 = v10;
    v13 = 1;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 336))(v5, &v12);
    v11 = v12;
    v12 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  else
  {
    v6 = (WTF *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = *((_QWORD *)v6 + 2);
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 3;
        *((_QWORD *)v6 + 2) = 0;
      }
      JSC::WeakHandleOwner::~WeakHandleOwner((WTF *)((char *)v6 + 8));
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
        *(_QWORD *)v6 = 0;
      }
      WTF::fastFree(v6, v8);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::JSStringCallback::~JSStringCallback(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSStringCallback::handleEvent(uint64_t ***this, const WTF::String *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  objc_class **v7;
  uint64_t v8;
  int v9;
  objc_class *v10;
  unsigned int v11;
  WTF *v12;
  JSValue v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  JSC::Structure *v20;
  unsigned int v22;
  uint64_t *v23;
  _QWORD *v24;
  char v25[8];
  uint64_t v26;
  WTF *v27;
  _OWORD v28[4];
  uint64_t v29;
  _BYTE v30[8];
  uint64_t *v31;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a2))
    return 2;
  ++*((_DWORD *)this + 4);
  v4 = *this[3];
  if (!v4 || (v4[1] & 3) != 0)
    v5 = 0;
  else
    v5 = *v4;
  MEMORY[0x19AEA3294](v30, *(_QWORD *)(v5 + 56));
  v25[0] = 0;
  v26 = 0x800000000;
  v27 = (WTF *)((char *)v28 + 8);
  v29 = 0;
  memset(v28, 0, sizeof(v28));
  v6 = *(_QWORD *)(v5 + 56);
  v7 = (objc_class **)(v6 + 41968);
  v8 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_17;
  v9 = *(_DWORD *)(v8 + 4);
  if (!v9)
    goto LABEL_17;
  if (v9 == 1)
  {
    v15 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v16 = *v15;
    }
    else
    {
      v22 = *(unsigned __int16 *)v15;
      if (v22 > 0xFF)
        goto LABEL_8;
      v16 = v22;
    }
    v7 = (objc_class **)(v6 + 8 * v16 + 42216);
LABEL_17:
    v10 = *v7;
LABEL_18:
    v11 = 0;
    v12 = (WTF *)((char *)v28 + 8);
    goto LABEL_19;
  }
LABEL_8:
  v10 = *(objc_class **)(v6 + 64760);
  if (v10 && v8 == *((_QWORD *)v10 + 1))
    goto LABEL_18;
  v10 = (objc_class *)JSC::jsStringWithCacheSlowCase();
  v11 = v26;
  v12 = v27;
  if (v27 != (WTF *)((char *)v28 + 8))
  {
    v13.super.isa = v10;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v26, v13) == 1)
      v25[0] = 1;
    goto LABEL_20;
  }
LABEL_19:
  *((_QWORD *)v12 + v11) = v10;
  LODWORD(v26) = v11 + 1;
LABEL_20:
  v31 = 0;
  v17 = (uint64_t *)this[3];
  v18 = *v17;
  if (*v17
    && (*(_BYTE *)(v18 + 8) & 3) == 0
    && *(_QWORD *)v18
    && ((v19 = v17[2]) == 0 || (*(_BYTE *)(v19 + 8) & 3) != 0 ? (v20 = 0) : (v20 = *(JSC::Structure **)v19),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v18, v20, 10, (uint64_t)v25, 0, 0, (uint64_t *)&v31), (v8 = (uint64_t)v31) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (*(_DWORD *)*this[3][2] & 0xFFFFFFFE) + 0x28), (uint64_t)v31, 0, 0, 0);
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  if (*(_QWORD *)&v28[0])
  {
    v31 = &v26;
    v23 = *(uint64_t **)&v28[0];
    v24 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v28[0], (uint64_t *)&v31);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v23, v24);
  }
  if (v27 != (WTF *)((char *)v28 + 8) && v27)
    WTF::fastFree(v27, (void *)v8);
  MEMORY[0x19AEA32A0](v30);
  if (*((_DWORD *)this + 4) == 1)
    ((void (*)(uint64_t ***))(*this)[2])(this);
  else
    --*((_DWORD *)this + 4);
  return v14;
}

uint64_t WebCore::toJS(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return 2;
  v2 = *(_BYTE **)(v1 + 16);
  if (!v2 || (v2[8] & 3) != 0)
    return 0;
  else
    return *(_QWORD *)v2;
}

{
  uint64_t v1;
  _BYTE *v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return 2;
  v2 = *(_BYTE **)(v1 + 16);
  if (!v2 || (v2[8] & 3) != 0)
    return 0;
  else
    return *(_QWORD *)v2;
}

uint64_t WebCore::convertDictionary<WebCore::StructuredSerializeOptions>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t Object;
  JSC::Structure *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  JSC::JSGlobalObject *v15;
  uint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  JSC::VM *v22;
  uint64_t v23;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v22 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_2;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
LABEL_26:
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v11 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v12 = JSC::JSObject::get(v11, a2, (unint64_t)v19);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      v16 = v12;
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v12);
      v12 = v16;
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  if (*((_DWORD *)v4 + 20))
  {
    v17 = v4;
    v18 = v12;
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
    v12 = v18;
    if ((_DWORD)result)
      goto LABEL_26;
  }
  if (v12 == 10)
  {
LABEL_2:
    v5 = 0;
    v21 = 0;
    v6 = 0;
LABEL_3:
    v7 = 0;
    v19 = 0;
    v20 = 0;
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = v6;
    *(_DWORD *)(a3 + 16) = 0;
    return ((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E330B670[v7])(&v23, &v19);
  }
  v23 = *((_QWORD *)a2 + 7);
  if ((v12 & 0xFFFE000000000002) != 0 || (v13 = *(unsigned __int8 *)(v12 + 5), v13 <= 0x16))
  {
    result = WebCore::throwSequenceTypeError();
    v21 = 1;
    goto LABEL_18;
  }
  if (v13 != 36)
  {
    v15 = a2;
LABEL_22:
    result = WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLObject>>::convert(v15, v12, (uint64_t)&v19);
    goto LABEL_18;
  }
  v14 = v12;
  if ((JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)v12) & 1) == 0)
  {
    v15 = a2;
    v12 = v14;
    goto LABEL_22;
  }
  result = (uint64_t)WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLObject>>::convertArray((JSC::VM **)a2, v14, (uint64_t)&v19);
LABEL_18:
  v7 = v21;
  if (!v21)
  {
    v5 = v19;
    v6 = v20;
    goto LABEL_3;
  }
  *(_DWORD *)(a3 + 16) = 1;
  if (v7 != -1)
    return ((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E330B670[v7])(&v23, &v19);
  return result;
}

_QWORD *WebCore::JSStyleMedia::destroy(WebCore::JSStyleMedia *this, JSC::JSCell *a2)
{
  _QWORD *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  _QWORD *v9;
  WTF *v10;

  result = (_QWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      v4 = (unsigned int *)result[1];
      result[1] = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v9 = result;
          v10 = (WTF *)v4;
          atomic_store(1u, v4);
          v7 = v4[7];
          if ((_DWORD)v7)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v10 + 2), (WTF::StringImpl *)(*((_QWORD *)v10 + 2) + 32 * v7));
          v8 = (WTF *)*((_QWORD *)v10 + 2);
          if (v8)
          {
            *((_QWORD *)v10 + 2) = 0;
            *((_DWORD *)v10 + 6) = 0;
            WTF::fastFree(v8, a2);
          }
          WTF::fastFree(v10, a2);
          result = v9;
        }
      }
      return (_QWORD *)WTF::fastFree((WTF *)result, a2);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSStyleMedia::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::jsStyleMedia_type(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v10;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = *(_QWORD *)(a1 + 56);
  v3 = v10;
  if (!v10 || (v4 = *((_DWORD *)v10 + 1)) == 0)
  {
    v5 = *(_QWORD *)(v2 + 41968);
LABEL_7:
    if (!v3)
      return v5;
    goto LABEL_15;
  }
  if (v4 != 1)
    goto LABEL_4;
  v6 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
  if ((*((_BYTE *)v10 + 16) & 4) != 0)
  {
    v7 = *v6;
LABEL_14:
    v5 = *(_QWORD *)(v2 + 8 * v7 + 42216);
    goto LABEL_15;
  }
  v8 = *(unsigned __int16 *)v6;
  if (v8 <= 0xFF)
  {
    v7 = v8;
    goto LABEL_14;
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v10 != *(WTF::StringImpl **)(v5 + 8))
  {
    v5 = JSC::jsStringWithCacheSlowCase();
    v3 = v10;
    goto LABEL_7;
  }
LABEL_15:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v5;
}

uint64_t WebCore::JSStyleMediaOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  void *v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  void *v18;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8);
  if (!v5)
    return 0;
  v6 = *(void **)(v5 + 8);
  if (!v6)
    return 0;
  if (a5)
  {
    *a5 = "Reachable from Window";
    a5[1] = 22;
  }
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) != v8)
  {
    v9 = v8[1];
    v10 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(void **)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v6 == v15)
        goto LABEL_14;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194FAEA48);
      }
    }
  }
  v17 = a4;
  v18 = v6;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, v6);
  a4 = v17;
  v6 = v18;
  if ((_DWORD)result)
  {
LABEL_14:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v6);
    return 1;
  }
  return result;
}

void WebCore::JSStyleMediaOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        v29 = (WTF *)v24;
        v27 = v24[7];
        if ((_DWORD)v27)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v29 + 2), (WTF::StringImpl *)(*((_QWORD *)v29 + 2) + 32 * v27));
        v28 = (WTF *)*((_QWORD *)v29 + 2);
        if (v28)
        {
          *((_QWORD *)v29 + 2) = 0;
          *((_DWORD *)v29 + 6) = 0;
          WTF::fastFree(v28, a2);
        }
        WTF::fastFree(v29, a2);
      }
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::StyleMedia>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  JSC::Structure *v38;
  int v39;
  JSC::JSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  JSC::Structure *Allocator;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  WTF::StringImpl *v68[6];
  int v69;
  int v70;
  int v71;
  JSC::Structure *v72;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSStyleMedia::s_info + ~((_QWORD)&WebCore::JSStyleMedia::s_info << 32)) ^ (((unint64_t)&WebCore::JSStyleMedia::s_info + ~((_QWORD)&WebCore::JSStyleMedia::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSStyleMedia::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_42;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSStyleMedia::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v68[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_19;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v64 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v64;
LABEL_19:
    *v25 = SlowCase + 128;
    goto LABEL_20;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_20:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v68, &WebCore::JSStyleMediaPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_23;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v65 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v65);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v65;
LABEL_23:
    *v28 = v30 + 16;
    goto LABEL_24;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_24:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v67 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v30, (JSC::VM *)v24);
  WTF::AtomStringImpl::addLiteral();
  v32 = v68[0];
  JSC::reifyStaticProperty((JSC::VM *)v24, (uint64_t)&WebCore::JSStyleMedia::s_info, (unint64_t *)v68, (uint64_t)&WebCore::JSStyleMediaPrototypeTableValues, (unsigned __int8 *)v30);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = JSC::JSString::create(v24, v68);
  v37 = v68[0];
  v68[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v71 = *(_DWORD *)v30;
  v72 = v38;
  v39 = JSC::Structure::outOfLineCapacity(v38);
  v69 = 0;
  v70 = v39;
  v68[0] = (WTF::StringImpl *)&v70;
  v68[1] = (WTF::StringImpl *)v30;
  v68[2] = (WTF::StringImpl *)v24;
  v68[3] = (WTF::StringImpl *)&v71;
  v68[4] = (WTF::StringImpl *)&v72;
  v68[5] = (WTF::StringImpl *)&v69;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v38, (JSC::VM *)v24, v34, 6, (uint64_t)v68);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v69, v36);
  *((_DWORD *)v38 + 4) |= 0x10u;
  LODWORD(v68[0]) = 279;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v40 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v40)
      JSC::JSObject::didBecomePrototype(v40, (JSC::VM *)v24);
  }
  v41 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v41 = *(_QWORD *)(v24 + 40152);
    if ((v41 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v41 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v66 = *(_QWORD *)(v41 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v41 + HIDWORD(v66);
    *(_QWORD *)(v24 + 40152) = v41 + (int)v66;
  }
  *v25 = v41 + 128;
LABEL_39:
  *(_DWORD *)v41 = 0;
  MEMORY[0x19AEA4278](v41, v24, a2, v30, v68, &WebCore::JSStyleMedia::s_info, 0, 0, v67);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v41, (uint64_t)&WebCore::JSStyleMedia::s_info);
LABEL_42:
  v42 = *(_QWORD *)(a2 + 56);
  if (*(_BYTE *)(*(_QWORD *)(a2 + 2040) + 4) == 1)
    JSC::WatchpointSet::fireAllSlow();
  v43 = *(_QWORD *)(v42 + 41456);
  v44 = *(_QWORD *)(v43 + 23536);
  v45 = *(_QWORD **)(v44 + 3016);
  if (!v45)
  {
    v46 = *(_QWORD *)(v43 + 22648);
    if (__ldaxr((unsigned __int8 *)v46))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v46))
    {
      goto LABEL_49;
    }
    MEMORY[0x19AEA534C](v46);
LABEL_49:
    v48 = *(_QWORD *)(v46 + 2824);
    if (!*(_QWORD *)(v48 + 3016))
    {
      v49 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)v68, "IsoSpace T");
      v72 = 0;
      MEMORY[0x19AEA3204](v49, v68, v42 + 192, v42 + 1872, 32, 8, &v72);
      v51 = (uint64_t)v72;
      v72 = 0;
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      v52 = v68[0];
      v68[0] = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 1)
          WTF::fastFree(v52, v50);
        else
          --*(_DWORD *)v52;
      }
      v53 = *(_QWORD *)(v48 + 3016);
      *(_QWORD *)(v48 + 3016) = v49;
      if (v53)
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    }
    v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v54 = *(_QWORD *)(v44 + 3016);
    *(_QWORD *)(v44 + 3016) = v45;
    if (v54)
    {
      v55 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v55, v56);
    }
    v57 = __ldxr((unsigned __int8 *)v46);
    if (v57 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v46))
        goto LABEL_64;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v46);
  }
LABEL_64:
  v14 = v45[3];
  if (v14 >= v45[4])
  {
    v14 = v45[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_66;
    }
    v63 = *(_QWORD *)(v14 + 8) ^ v45[6];
    v45[4] = v14 + HIDWORD(v63);
    v45[5] = v14 + (int)v63;
  }
  v45[3] = v14 + 32;
LABEL_66:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v42 + 755))
    __dmb(0xAu);
  v58 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336A80 & 1) == 0)
  {
    qword_1EE336A78 = (uint64_t)&off_1E3307E70;
    byte_1EE336A80 = 1;
  }
  v68[0] = a3;
  if ((v14 & 8) != 0)
    v59 = (v14 - 112) | 1;
  else
    v59 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v59 & 1) != 0)
    v60 = v59 + 47;
  else
    v60 = *(_QWORD *)v59 + 32;
  Allocator = *(JSC::Structure **)(v60 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v60 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE336A78;
  *((_QWORD *)Allocator + 2) = v58;
  v72 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v58 + 32), (uint64_t *)v68, (uint64_t *)&v72);
  if (v72)
    *((_QWORD *)v72 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSStylePropertyMapReadOnly::destroy(WebCore::JSStylePropertyMapReadOnly *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSStylePropertyMap::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSStylePropertyMapReadOnly::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSStylePropertyMapReadOnly::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSStylePropertyMapReadOnly::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSStylePropertyMap::createPrototype(WebCore::JSStylePropertyMap *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  uint64_t v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  JSC::JSCell *v20;
  JSC::JSObject *Object;
  uint64_t *v22;
  unint64_t SlowCase;
  uint64_t v24;
  int v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  JSC::Structure *v30;
  int v31;
  unint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35[6];
  int v36;
  int v37;
  JSC::Structure *v38;
  int v39;

  v5 = (unint64_t *)((char *)this + 40136);
  v6 = *((_QWORD *)a2 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSStylePropertyMapReadOnly::s_info
      + ~((_QWORD)&WebCore::JSStylePropertyMapReadOnly::s_info << 32)) ^ (((unint64_t)&WebCore::JSStylePropertyMapReadOnly::s_info
                                                                         + ~((_QWORD)&WebCore::JSStylePropertyMapReadOnly::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSStylePropertyMapReadOnly::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSStylePropertyMapReadOnly::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    Structure = WebCore::JSStylePropertyMapReadOnlyPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSStylePropertyMapReadOnlyPrototype::create(this, Structure, v16, v17);
    v19 = WebCore::JSStylePropertyMapReadOnly::createStructure((uint64_t *)this, (uint64_t)a2, v18);
    v14 = WebCore::cacheDOMStructure((JSCell *)a2, v19, (uint64_t)&WebCore::JSStylePropertyMapReadOnly::s_info);
  }
  v20 = *(JSC::JSCell **)(v14 + 48);
  LODWORD(v35[0]) = 23;
  if (((unint64_t)v20 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v20);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  v22 = (uint64_t *)((char *)this + 38904);
  SlowCase = *v5;
  if (*v5 < v5[1])
    goto LABEL_12;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_12:
    *v5 = SlowCase + 128;
    goto LABEL_13;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_13:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v20, v35, &WebCore::JSStylePropertyMapPrototype::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v24 = *v22;
  if (*((_QWORD *)this + 4863) < *((_QWORD *)this + 4864))
    goto LABEL_16;
  v24 = *((_QWORD *)this + 4865);
  if ((v24 & 1) == 0)
  {
    v34 = *(_QWORD *)(v24 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v24 + HIDWORD(v34);
    *((_QWORD *)this + 4865) = v24 + (int)v34;
LABEL_16:
    *v22 = v24 + 16;
    goto LABEL_17;
  }
  JSC::sanitizeStackForVM();
  v24 = JSC::LocalAllocator::allocateSlowCase();
LABEL_17:
  *(_DWORD *)v24 = 0;
  v25 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v24 = SlowCase >> 4;
  *(_DWORD *)(v24 + 4) = v25;
  *(_QWORD *)(v24 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSStylePropertyMap::s_info, &WebCore::JSStylePropertyMapPrototypeTableValues, (JSC::JSObject *)v24);
  v26 = *(_QWORD *)(v5[227] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = JSC::JSString::create((uint64_t)this, v35);
  v29 = v35[0];
  v35[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v27);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = (JSC::Structure *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE));
  v39 = *(_DWORD *)v24;
  v38 = v30;
  v31 = JSC::Structure::outOfLineCapacity(v30);
  v36 = 0;
  v37 = v31;
  v35[0] = (WTF::StringImpl *)&v37;
  v35[1] = (WTF::StringImpl *)v24;
  v35[2] = this;
  v35[3] = (WTF::StringImpl *)&v39;
  v35[4] = (WTF::StringImpl *)&v38;
  v35[5] = (WTF::StringImpl *)&v36;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v30, this, v26, 6, (uint64_t)v35);
  if ((*(_BYTE *)((16 * *(unsigned int *)v24) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v24, (uint64_t)this, v36, v28);
  *((_DWORD *)v30 + 4) |= 0x10u;
  return v24;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSStylePropertyMap>,(WebCore::DOMConstructorID)381>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3048);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSStylePropertyMapReadOnly>,(WebCore::DOMConstructorID)382>(a1, a2);
  v7 = v6;
  LODWORD(v33) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSStylePropertyMap>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSStylePropertyMap::s_info + ~((_QWORD)&WebCore::JSStylePropertyMap::s_info << 32)) ^ (((unint64_t)&WebCore::JSStylePropertyMap::s_info + ~((_QWORD)&WebCore::JSStylePropertyMap::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSStylePropertyMap::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSStylePropertyMap::s_info)
          goto LABEL_20;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSStylePropertyMap::createPrototype((WebCore::JSStylePropertyMap *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSStylePropertyMap::createStructure((uint64_t *)a1, a2, Prototype);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSStylePropertyMap::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v26 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3048) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsStylePropertyMapConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSStylePropertyMapPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSStylePropertyMap>,(WebCore::DOMConstructorID)381>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSStylePropertyMapReadOnly::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::wrap<WebCore::StylePropertyMap>(int a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  WebCore::JSStylePropertyMap *v24;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  void *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *Allocator;
  unint64_t v49;
  _QWORD *v50;
  WTF *v51;

  v5 = *(_QWORD *)(*((_QWORD *)a2 + 415) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WebCore::JSDOMGlobalObject **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WebCore::JSDOMGlobalObject **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = *((_QWORD *)a2 + 412);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSStylePropertyMap::s_info + ~((_QWORD)&WebCore::JSStylePropertyMap::s_info << 32)) ^ (((unint64_t)&WebCore::JSStylePropertyMap::s_info + ~((_QWORD)&WebCore::JSStylePropertyMap::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSStylePropertyMap::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSStylePropertyMap::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = (WebCore::JSStylePropertyMap *)*((_QWORD *)a2 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSStylePropertyMap::createPrototype(v24, a2, a3);
  Structure = WebCore::JSStylePropertyMap::createStructure((uint64_t *)v24, (uint64_t)a2, Prototype);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSStylePropertyMap::s_info);
LABEL_16:
  v27 = *((_QWORD *)a2 + 7);
  v28 = *(_QWORD *)(v27 + 41456);
  v29 = *(_QWORD *)(v28 + 23536);
  v30 = *(_QWORD **)(v29 + 3104);
  if (v30)
    goto LABEL_36;
  v31 = *(_QWORD *)(v28 + 22648);
  if (__ldaxr((unsigned __int8 *)v31))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v31))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v31);
LABEL_21:
  v33 = *(_QWORD *)(v31 + 2824);
  if (!*(_QWORD *)(v33 + 3104))
  {
    v34 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v51, "IsoSpace T");
    v50 = 0;
    MEMORY[0x19AEA3204](v34, &v51, v27 + 192, v27 + 1872, 32, 8, &v50);
    v36 = (uint64_t)v50;
    v50 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = v51;
    v51 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 1)
        WTF::fastFree(v37, v35);
      else
        --*(_DWORD *)v37;
    }
    v38 = *(_QWORD *)(v33 + 3104);
    *(_QWORD *)(v33 + 3104) = v34;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v40 = *(_QWORD *)(v29 + 3104);
  *(_QWORD *)(v29 + 3104) = v30;
  if (v40)
  {
    v41 = (WTF *)MEMORY[0x19AEA3528](v40, v39);
    WTF::fastFree(v41, v42);
  }
  v43 = __ldxr((unsigned __int8 *)v31);
  if (v43 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v31))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v31);
LABEL_36:
  SlowCase = v30[3];
  if (SlowCase >= v30[4])
  {
    SlowCase = v30[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v49 = *(_QWORD *)(SlowCase + 8) ^ v30[6];
    v30[4] = SlowCase + HIDWORD(v49);
    v30[5] = SlowCase + (int)v49;
  }
  v30[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v27 + 755))
    __dmb(0xAu);
  v44 = *((_QWORD *)a2 + 415);
  if ((byte_1EE336A90 & 1) == 0)
  {
    qword_1EE336A88 = (uint64_t)&off_1E3307EA0;
    byte_1EE336A90 = 1;
  }
  v51 = a3;
  if ((SlowCase & 8) != 0)
    v45 = (SlowCase - 112) | 1;
  else
    v45 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v45 & 1) != 0)
    v46 = v45 + 47;
  else
    v46 = *(_QWORD *)v45 + 32;
  Allocator = *(_QWORD **)(v46 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v46 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336A88;
  Allocator[2] = v44;
  v50 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v44 + 32), (uint64_t *)&v51, (uint64_t *)&v50);
  if (v50)
    v50[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSStylePropertyMapReadOnlyPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSStylePropertyMapReadOnlyPrototype::create(WebCore::JSStylePropertyMapReadOnlyPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSC::Structure *v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  JSC::Structure **v29;
  int *v30;
  int v31;
  int v32;
  JSC::Structure *v33;
  int v34;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v22 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v22);
    *((_QWORD *)this + 4865) = SlowCase + (int)v22;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSStylePropertyMapReadOnly::s_info, (uint64_t)&WebCore::JSStylePropertyMapReadOnlyPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = v6[381];
  v10 = *(_QWORD *)(v9 + 2712);
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 48) + 3952);
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this)) != 0&& (v25 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v25), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v23 = *(_QWORD *)(SlowCase + 8) - 8;
      v24 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v23 = SlowCase + 16;
      v24 = v13 << 32;
    }
    v14 = *(_QWORD *)(v23 + (v24 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v25 = 0;
  v26 = SlowCase;
  v27 = 0x1000000FFFFFFFFLL;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v10, v14, 4, (uint64_t)&v25);
  v15 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = JSC::JSString::create((uint64_t)this, &v25);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v34 = *(_DWORD *)SlowCase;
  v33 = v19;
  v20 = JSC::Structure::outOfLineCapacity(v19);
  v31 = 0;
  v32 = v20;
  v25 = (WTF::StringImpl *)&v32;
  v26 = SlowCase;
  v27 = (uint64_t)this;
  v28 = &v34;
  v29 = &v33;
  v30 = &v31;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v19, this, v15, 6, (uint64_t)&v25);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v31, v17);
  *((_DWORD *)v19 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSStylePropertyMapReadOnly>,(WebCore::DOMConstructorID)382>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3056);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSStylePropertyMapReadOnly>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSStylePropertyMapReadOnly::s_info
         + ~((_QWORD)&WebCore::JSStylePropertyMapReadOnly::s_info << 32)) ^ (((unint64_t)&WebCore::JSStylePropertyMapReadOnly::s_info
                                                                            + ~((_QWORD)&WebCore::JSStylePropertyMapReadOnly::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSStylePropertyMapReadOnly::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSStylePropertyMapReadOnly::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSStylePropertyMapReadOnlyPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSStylePropertyMapReadOnlyPrototype::create((WebCore::JSStylePropertyMapReadOnlyPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSStylePropertyMapReadOnly::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSStylePropertyMapReadOnly::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3056) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsStylePropertyMapReadOnlyConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSStylePropertyMapReadOnlyPrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSStylePropertyMapReadOnly>,(WebCore::DOMConstructorID)382>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsStylePropertyMapReadOnly_size(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSDOMIteratorBase<WebCore::JSStylePropertyMapReadOnly,WebCore::StylePropertyMapReadOnlyIteratorTraits>::destroy(uint64_t result, void *a2)
{
  if (*(_BYTE *)(result + 48))
    return WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result + 24, a2);
  return result;
}

uint64_t WebCore::JSStylePropertyMapReadOnlyOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSStylePropertyMapReadOnlyOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::StylePropertyMapReadOnly>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSStylePropertyMapReadOnly::s_info
         + ~((_QWORD)&WebCore::JSStylePropertyMapReadOnly::s_info << 32)) ^ (((unint64_t)&WebCore::JSStylePropertyMapReadOnly::s_info
                                                                            + ~((_QWORD)&WebCore::JSStylePropertyMapReadOnly::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSStylePropertyMapReadOnly::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSStylePropertyMapReadOnly::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSStylePropertyMapReadOnlyPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSStylePropertyMapReadOnlyPrototype::create((WebCore::JSStylePropertyMapReadOnlyPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSStylePropertyMapReadOnly::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSStylePropertyMapReadOnly::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 3112);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 3112))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 3112);
    *(_QWORD *)(v36 + 3112) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 3112);
  *(_QWORD *)(v32 + 3112) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336A90 & 1) == 0)
  {
    qword_1EE336A88 = (uint64_t)&off_1E3307EA0;
    byte_1EE336A90 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336A88;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSStyleSheet::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::JSStyleSheet::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheet>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v12 = WebCore::JSStyleSheet::prototype((WebCore::JSStyleSheet *)a2, a3, v11);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, v12, 14);
}

uint64_t WebCore::JSStyleSheet::prototype(WebCore::JSStyleSheet *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSCell *Prototype;
  uint64_t v14;
  int v16;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSStyleSheet::s_info + ~((_QWORD)&WebCore::JSStyleSheet::s_info << 32)) ^ (((unint64_t)&WebCore::JSStyleSheet::s_info + ~((_QWORD)&WebCore::JSStyleSheet::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSStyleSheet::s_info)
  {
    v16 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v16) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v16;
      if (v11 == &WebCore::JSStyleSheet::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    Prototype = (JSC::JSCell *)WebCore::JSStyleSheet::createPrototype(this, (JSC::JSCell **)a2, a3);
    v14 = JSC::Structure::create((uint64_t *)this, (int)a2, Prototype);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v14, (uint64_t)&WebCore::JSStyleSheet::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

WTF::StringImpl *WebCore::JSStyleSheetPrototype::finishCreation(WebCore::JSStyleSheetPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(a2, (uint64_t)&WebCore::JSStyleSheet::s_info, (uint64_t)&WebCore::JSStyleSheetPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSStyleSheet::destroy(WebCore::JSStyleSheet *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSStyleSheet::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSStyleSheet::visitChildren(WebCore::JSStyleSheet *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::JSStyleSheet::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t WebCore::JSStyleSheet::createPrototype(WebCore::JSStyleSheet *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v5;
  JSC::Structure *v6;

  v5 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v5 + 16) |= 0x80000u;
  return WebCore::JSStyleSheetPrototype::create(this, (JSC::VM *)a2, v5, v6);
}

unint64_t WebCore::JSStyleSheetPrototype::create(WebCore::JSStyleSheetPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v6 = a3 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSStyleSheetPrototype::finishCreation((WebCore::JSStyleSheetPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheet>,(WebCore::DOMConstructorID)372>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2976);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheet>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheet>::create(a1, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2976) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsStyleSheetConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSStyleSheetPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheet>,(WebCore::DOMConstructorID)372>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsStyleSheet_type(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v12;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 24) + 72))(&v12);
  v3 = v12;
  if (!v12)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = (uint64_t *)(v4 + 41968);
  v6 = *((_DWORD *)v12 + 1);
  if (!v6)
    goto LABEL_14;
  if (v6 == 1)
  {
    v8 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
    if ((*((_BYTE *)v12 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v5 = (uint64_t *)(v4 + 8 * v9 + 42216);
LABEL_14:
    v7 = *v5;
    goto LABEL_15;
  }
LABEL_4:
  v7 = *(_QWORD *)(v4 + 64760);
  if (!v7 || v12 != *(WTF::StringImpl **)(v7 + 8))
  {
    v7 = JSC::jsStringWithCacheSlowCase();
    v3 = v12;
    v12 = 0;
    if (!v3)
      return v7;
    goto LABEL_16;
  }
LABEL_15:
  v12 = 0;
LABEL_16:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v7;
}

uint64_t WebCore::jsStyleSheet_href(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v12;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 24) + 48))(&v12);
  v3 = v12;
  if (!v12)
    return 2;
  v5 = *(_QWORD *)(a1 + 56);
  v6 = (uint64_t *)(v5 + 41968);
  v7 = *((_DWORD *)v12 + 1);
  if (!v7)
    goto LABEL_14;
  if (v7 == 1)
  {
    v8 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
    if ((*((_BYTE *)v12 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_5;
      v9 = v10;
    }
    v6 = (uint64_t *)(v5 + 8 * v9 + 42216);
LABEL_14:
    v4 = *v6;
    goto LABEL_15;
  }
LABEL_5:
  v4 = *(_QWORD *)(v5 + 64760);
  if (!v4 || v12 != *(WTF::StringImpl **)(v4 + 8))
  {
    v4 = JSC::jsStringWithCacheSlowCase();
    v3 = v12;
    v12 = 0;
    if (!v3)
      return v4;
    goto LABEL_16;
  }
LABEL_15:
  v12 = 0;
LABEL_16:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v4;
}

uint64_t WebCore::jsStyleSheet_ownerNode(WebCore::DOMWrapperWorld **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::Document *v5;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  unint64_t Wrapper;
  WebCore::Node *v18;
  WebCore::Node *v19;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 32))(*(_QWORD *)(a2 + 24));
  if (!v4)
    return 2;
  if (*(_BYTE *)(v3 + 3328))
  {
    v7 = *(_BYTE **)(v4 + 8);
    if (v7)
    {
LABEL_6:
      if ((v7[8] & 3) == 0 && *(_QWORD *)v7)
        return *(_QWORD *)v7;
    }
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v8 + 16 * v13);
      if (v14 == v4)
      {
LABEL_14:
        v7 = *(_BYTE **)(v8 + 16 * v13 + 8);
        if (v7)
          goto LABEL_6;
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v8 + 16 * v13);
          ++v15;
          if (v14 == v4)
            goto LABEL_14;
        }
      }
    }
  }
  *(_DWORD *)(v4 + 24) += 2;
  v19 = (WebCore::Node *)v4;
  Wrapper = WebCore::createWrapper(a1, (JSC::VM *)v3, (WebCore::JSDOMGlobalObject *)&v19, v5);
  v18 = v19;
  v19 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v16);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  return Wrapper;
}

unint64_t WebCore::jsStyleSheet_parentStyleSheet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24));
  if (v4)
    return WebCore::wrap<WebCore::StyleSheet>(a1, v3, v4);
  else
    return 2;
}

uint64_t WebCore::jsStyleSheet_title(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v12;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 24) + 56))(&v12);
  v3 = v12;
  if (!v12)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = (uint64_t *)(v4 + 41968);
  v6 = *((_DWORD *)v12 + 1);
  if (!v6)
    goto LABEL_14;
  if (v6 == 1)
  {
    v8 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
    if ((*((_BYTE *)v12 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v5 = (uint64_t *)(v4 + 8 * v9 + 42216);
LABEL_14:
    v7 = *v5;
    goto LABEL_15;
  }
LABEL_4:
  v7 = *(_QWORD *)(v4 + 64760);
  if (!v7 || v12 != *(WTF::StringImpl **)(v7 + 8))
  {
    v7 = JSC::jsStringWithCacheSlowCase();
    v3 = v12;
    v12 = 0;
    if (!v3)
      return v7;
    goto LABEL_16;
  }
LABEL_15:
  v12 = 0;
LABEL_16:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v7;
}

unint64_t WebCore::jsStyleSheet_media(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WTF *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 64))(*(_QWORD *)(a2 + 24));
  if (v4)
    return WebCore::wrap<WebCore::MediaList>(a1, v3, v4);
  else
    return 2;
}

BOOL WebCore::setJSStyleSheet_media(JSC::JSGlobalObject *a1, JSC::Structure *a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t v18[2];
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSStyleSheet::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSStyleSheet::s_info && v9 != 0);
  }
  if (!v8)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v22 = *((_QWORD *)a1 + 7);
  WTF::AtomStringImpl::addLiteral();
  v12 = (WTF::StringImpl *)v18[0];
  v13 = JSC::JSObject::get(a2, a1, v18[0]);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_20;
  if ((v13 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v13 + 5) <= 0x16u)
  {
    JSC::throwTypeError();
LABEL_20:
    v16 = 0;
    goto LABEL_21;
  }
  WTF::AtomStringImpl::addLiteral();
  v14 = (WTF::StringImpl *)v18[0];
  v18[0] = 0;
  v18[1] = v13;
  v19 = -1;
  v20 = 0x1000000;
  v21 = 0;
  (*(void (**)(uint64_t, JSC::JSGlobalObject *, WTF::StringImpl *, uint64_t, unint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) + 0x48))(v13, a1, v14, a3, v18);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
  {
    v16 = 0;
    if (!v14)
      goto LABEL_21;
  }
  else
  {
    v16 = 1;
    if (!v14)
      goto LABEL_21;
  }
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, v15);
  else
    *(_DWORD *)v14 -= 2;
LABEL_21:
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v15);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v16;
}

uint64_t WebCore::jsStyleSheet_disabled(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSStyleSheet_disabled(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  _BOOL8 v11;
  uint64_t v12;
  BOOL v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSStyleSheet::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSStyleSheet::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v14 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v15 = *(unsigned __int8 *)(a3 + 5);
    if (v15 == 3)
    {
      v18 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v15 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v14 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v16 = *(_QWORD *)(a3 + 8);
      if ((v16 & 1) != 0)
        v17 = (int *)(a3 + 16);
      else
        v17 = (int *)(v16 + 4);
      v18 = *v17;
    }
    v14 = v18 == 0;
LABEL_37:
    v11 = !v14;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v12 + 24))(v12, v11);
  return 1;
}

uint64_t WebCore::JSStyleSheet::subspaceForImpl(WebCore::JSStyleSheet *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3024);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 3024);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 3024);
    *(_QWORD *)(v8 + 3024) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 3024);
  *(_QWORD *)(v3 + 3024) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSStyleSheetOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::CSSRule *v8;
  uint64_t v9;
  WTF::ConcurrentPtrHashSet *v10;
  _DWORD *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t result;
  uint64_t *v20;
  uint64_t v21;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsStyleSheet";
    a5[1] = 28;
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
  if (v7)
  {
    v6 = WebCore::root(v7, v8);
  }
  else
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    if (v9)
    {
      if ((*(_BYTE *)(v9 + 22) & 8) == 0)
      {
        while (1)
        {
          v6 = v9;
          if ((*(_WORD *)(v9 + 28) & 0x80) != 0)
          {
            v21 = *(_QWORD *)(v9 + 200);
            if (!v21)
              goto LABEL_5;
            v20 = (uint64_t *)(v21 + 8);
          }
          else
          {
            v20 = (uint64_t *)(v9 + 32);
          }
          v9 = *v20;
          if (!*v20)
            goto LABEL_5;
        }
      }
      v6 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8);
    }
  }
LABEL_5:
  v10 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v11 = (_DWORD *)*((_QWORD *)v10 + 6);
  if ((_DWORD *)((char *)v10 + 56) == v11)
  {
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v10, (void *)v6);
    if ((_DWORD)result)
    {
LABEL_23:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v12 = v11[1];
    v13 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = v16;
    while (1)
    {
      v18 = *(_QWORD *)&v11[2 * v17 + 4];
      if (!v18)
        return 0;
      if (v6 == v18)
        goto LABEL_23;
      v17 = (v17 + 1) & v12;
      if (v17 == v16)
      {
        __break(0xC471u);
        JUMPOUT(0x194FB23D0);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSStyleSheetOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t WebCore::JSStyleSheet::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSStyleSheet::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSStyleSheet::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheetList>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSStyleSheetList>((WebCore::JSStyleSheetList *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSStyleSheetListPrototype::finishCreation(WebCore::JSStyleSheetListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(a2, (uint64_t)&WebCore::JSStyleSheetList::s_info, &WebCore::JSStyleSheetListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::StyleSheetList *WebCore::JSStyleSheetList::destroy(WebCore::JSStyleSheetList *this, JSC::JSCell *a2)
{
  WebCore::StyleSheetList *result;
  WTF *v4;
  void *v5;

  result = (WebCore::StyleSheetList *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::StyleSheetList::~StyleSheetList(result, a2);
      return (WebCore::StyleSheetList *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSStyleSheetList::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  JSC::VM *v20;
  int OwnProperty;
  uint64_t result;
  int v23;
  _BYTE v24[16];
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (!v15)
    goto LABEL_23;
  v16 = v15;
  if (*(_BYTE *)(v15 + 274))
    goto LABEL_23;
  v17 = *(_BYTE **)(v15 + 496);
  if (!v17)
    v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
  if (!*(_QWORD *)v17)
    goto LABEL_23;
  v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
  if (!v18)
    goto LABEL_23;
  v19 = *(_QWORD *)(v18 + 680);
  if (*(_BYTE *)(v19 + 243))
  {
    if (!*(_BYTE *)(v19 + 242))
      goto LABEL_23;
LABEL_22:
    if (!v17[65])
      goto LABEL_23;
    return JSC::JSObject::put();
  }
  if ((*(_QWORD *)(v19 + 688) & 0x80000) != 0)
    goto LABEL_22;
LABEL_23:
  v20 = *(JSC::VM **)(a2 + 56);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 14;
  v25 = 0xFFFFFFFF00000000;
  v27 = 0;
  v28 = 0;
  v26 = v8;
  v29 = 0x20000;
  v30 = 0;
  LOBYTE(v31) = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  OwnProperty = WebCore::JSStyleSheetList::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v24, 1);
  if (*((_DWORD *)v20 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v20 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v32)
  {
    v23 = *(_DWORD *)(v31 + 4);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x194FB2AF8);
    }
    *(_DWORD *)(v31 + 4) = v23 - 1;
  }
  return result;
}

uint64_t WebCore::JSStyleSheetList::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSStyleSheetList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, unint64_t a3)
{
  WebCore::StyleSheetList *v6;
  uint64_t v7;
  _BOOL4 v8;
  char **v9;
  BOOL v10;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _WORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t result;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  JSC::VM *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  _BYTE *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned __int16 *v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  JSC::VM *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;

  v6 = *(WebCore::StyleSheetList **)(a1 + 24);
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSDOMGlobalObject::s_info && v9 != 0);
  }
  if (v8)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (v13)
  {
    v16 = v13;
    if (!*(_BYTE *)(v13 + 274))
    {
      v17 = *(_BYTE **)(v13 + 496);
      if (!v17)
        v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
      if (*(_QWORD *)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 680);
          if (*(_BYTE *)(v19 + 243))
          {
            if (!*(_BYTE *)(v19 + 242))
              goto LABEL_22;
          }
          else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
          {
            goto LABEL_22;
          }
          if (v17[65])
            return JSC::JSObject::deleteProperty();
        }
      }
    }
  }
LABEL_22:
  if (a3)
  {
    v20 = *(_DWORD *)(a3 + 16);
    if ((v20 & 0x20) != 0)
      return JSC::JSObject::deleteProperty();
    v21 = *(_WORD **)(a3 + 8);
    v22 = *(unsigned int *)(a3 + 4);
    if ((v20 & 4) == 0)
    {
      if ((_DWORD)v22 && (v23 = (unsigned __int16)*v21 - 48, v23 <= 9))
      {
        if (v22 < 2 || *v21 != 48)
        {
          v27 = v21 + 1;
          v28 = v22 - 1;
          while (v28)
          {
            if (v23 <= 0x19999999)
            {
              v29 = *v27 - 48;
              if (v29 <= 9)
              {
                v30 = __CFADD__(v29, 10 * v23);
                v23 = v29 + 10 * v23;
                ++v27;
                --v28;
                if (!v30)
                  continue;
              }
            }
            goto LABEL_27;
          }
          v31 = v23 == -1;
          v25 = v23 & 0xFFFFFF00;
          v24 = 0x100000000;
          if (v23 == -1)
          {
            v24 = 0;
            LOBYTE(v23) = 0;
          }
          if (v31)
            v25 = 0;
LABEL_29:
          v23 = v23;
          if ((v24 & 0x100000000) != 0)
            return WebCore::StyleSheetList::length(v6, v14, v15) <= (v25 | v23);
          goto LABEL_54;
        }
        v24 = 0;
      }
      else
      {
LABEL_27:
        v24 = 0;
        LOBYTE(v23) = 0;
      }
      v25 = 0;
      goto LABEL_29;
    }
    if ((_DWORD)v22)
    {
      v32 = *(unsigned __int8 *)v21 - 48;
      if (v32 <= 9 && (v22 < 2 || *(_BYTE *)v21 != 48))
      {
        v61 = v22 - 1;
        v62 = (unsigned __int8 *)v21 + 1;
        while (v61)
        {
          if (v32 > 0x19999999)
            goto LABEL_51;
          v63 = *v62 - 48;
          if (v63 > 9)
            goto LABEL_51;
          v23 = 0;
          LOBYTE(v22) = 0;
          v33 = 0;
          v30 = __CFADD__(v63, 10 * v32);
          v32 = v63 + 10 * v32;
          --v61;
          ++v62;
          if (v30)
            goto LABEL_53;
        }
        if (v32 == -1)
          v23 = 0;
        else
          v23 = v32 & 0xFFFFFF00;
        if (v32 == -1)
          LOBYTE(v22) = 0;
        else
          LOBYTE(v22) = v32;
        if (v32 == -1)
          v33 = 0;
        else
          v33 = 0x100000000;
LABEL_53:
        v25 = v22;
        if ((v33 & 0x100000000) != 0)
          return WebCore::StyleSheetList::length(v6, v14, v15) <= (v25 | v23);
LABEL_54:
        *(_DWORD *)a3 += 2;
        v34 = (WTF::StringImpl *)a3;
        goto LABEL_55;
      }
LABEL_51:
      v23 = 0;
      LOBYTE(v22) = 0;
    }
    else
    {
      v23 = 0;
    }
    v33 = 0;
    goto LABEL_53;
  }
  v34 = 0;
LABEL_55:
  v67 = v34;
  v36 = WebCore::StyleSheetList::namedItem(v6, (const WTF::AtomString *)&v67);
  v37 = v67;
  v67 = 0;
  if (!v37)
    goto LABEL_58;
  if (*(_DWORD *)v37 == 2)
  {
    WTF::StringImpl::destroy(v37, v35);
    if (v36)
      goto LABEL_59;
    return JSC::JSObject::deleteProperty();
  }
  *(_DWORD *)v37 -= 2;
LABEL_58:
  if (!v36)
    return JSC::JSObject::deleteProperty();
LABEL_59:
  v38 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v69 = 0xFFFFFFFF00000000;
  v71 = 0;
  v72 = 0;
  v70 = a1;
  v73 = 196608;
  v74 = 0;
  v77 = 0;
  v78 = 0;
  v75 = v38;
  ++*((_DWORD *)v38 + 1);
  v76 = 1;
  if ((a3 >> 4))
  {
    v39 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if (((a3 >> 4) & ~*(_DWORD *)(v39 + 0x20)) == 0)
    {
      v40 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v38);
      if (v40)
      {
        v79 = a3;
        v41 = JSC::PropertyTable::get(v40, (uint64_t *)&v79);
        if ((_DWORD)v41 != -1)
        {
          if ((int)v41 > 63)
          {
            v48 = *(_QWORD *)(a1 + 8) - 8;
            v49 = 0x3F00000000 - (v41 << 32);
          }
          else
          {
            v48 = a1 + 16;
            v49 = v41 << 32;
          }
          v50 = *(_QWORD *)(v48 + (v49 >> 29));
          if ((v50 & 0xFFFE000000000002) == 0)
          {
            v51 = *(unsigned __int8 *)(v50 + 5);
            if (v51 == 6)
            {
              v55 = *(_DWORD *)(v39 + 16) & 3;
              v56 = *(_QWORD *)(v50 + 16);
              if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C))
              {
                v58 = *(_QWORD *)(v50 + 24);
                v57 = *(_QWORD *)(v50 + 32);
                v67 = *(WTF::StringImpl **)(v50 + 8);
                v68 = v56;
                LODWORD(v69) = HIDWORD(v41);
                v71 = a1;
                BYTE1(v73) = 3;
                result = 1;
                if (v55 != 2)
                  LOBYTE(v73) = 1;
                HIBYTE(v73) = 1;
                v77 = v58;
                v78 = v57;
              }
              else
              {
                v67 = *(WTF::StringImpl **)(v50 + 8);
                v68 = v56;
                LODWORD(v69) = HIDWORD(v41);
                v71 = a1;
                result = 1;
                BYTE1(v73) = 3;
                if (v55 != 2)
                  LOBYTE(v73) = 1;
              }
              goto LABEL_74;
            }
            if (v51 == 5)
            {
              JSC::JSObject::fillGetterPropertySlot();
              result = 1;
              goto LABEL_74;
            }
          }
          v67 = (WTF::StringImpl *)v50;
          v71 = a1;
          v69 = __PAIR64__(v41, HIDWORD(v41));
          result = 1;
          LOWORD(v73) = 257;
          goto LABEL_74;
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
  {
    result = JSC::JSObject::getOwnStaticPropertySlot();
    if (!a3 || (result & 1) != 0)
      goto LABEL_74;
  }
  else if (!a3)
  {
LABEL_73:
    result = 0;
    goto LABEL_74;
  }
  v42 = *(_DWORD *)(a3 + 16);
  if ((v42 & 0x20) != 0)
    goto LABEL_73;
  v43 = *(_BYTE **)(a3 + 8);
  v44 = *(unsigned int *)(a3 + 4);
  if ((v42 & 4) != 0)
  {
    if (!(_DWORD)v44 || (v59 = *v43 - 48, v59 > 9) || v44 >= 2 && *v43 == 48)
    {
LABEL_113:
      v60 = 0;
    }
    else
    {
      v64 = v44 - 1;
      v65 = v43 + 1;
      while (v64)
      {
        if (v59 > 0x19999999)
          goto LABEL_113;
        v66 = *v65 - 48;
        if (v66 > 9)
          goto LABEL_113;
        v60 = 0;
        v30 = __CFADD__(v66, 10 * v59);
        v59 = v66 + 10 * v59;
        --v64;
        ++v65;
        if (v30)
          goto LABEL_114;
      }
      v60 = 0x100000000;
      if (v59 == -1)
        v60 = 0;
    }
LABEL_114:
    if ((v60 & 0x100000000) == 0)
      goto LABEL_73;
  }
  else
  {
    if ((_DWORD)v44
      && (v45 = *(unsigned __int16 *)v43 - 48, v45 <= 9)
      && (v44 < 2 || *(_WORD *)v43 != 48))
    {
      v52 = (unsigned __int16 *)(v43 + 2);
      v53 = v44 - 1;
      while (v53)
      {
        if (v45 <= 0x19999999)
        {
          v54 = *v52 - 48;
          if (v54 <= 9)
          {
            v30 = __CFADD__(v54, 10 * v45);
            v45 = v54 + 10 * v45;
            ++v52;
            --v53;
            if (!v30)
              continue;
          }
        }
        goto LABEL_71;
      }
      v10 = v45 == -1;
      v46 = 0x100000000;
      if (v10)
        v46 = 0;
    }
    else
    {
LABEL_71:
      v46 = 0;
    }
    if ((v46 & 0x100000000) == 0)
      goto LABEL_73;
  }
  result = JSC::JSObject::getOwnPropertySlotByIndex();
LABEL_74:
  if (v76)
  {
    v47 = *((_DWORD *)v75 + 1);
    if (!v47)
    {
      __break(0xC471u);
      JUMPOUT(0x194FB3198);
    }
    *((_DWORD *)v75 + 1) = v47 - 1;
  }
  if ((_DWORD)result)
    return JSC::JSObject::deleteProperty();
  return result;
}

uint64_t WebCore::JSStyleSheetList::deletePropertyByIndex(WebCore::JSStyleSheetList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  WebCore::StyleSheetList *v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = (WebCore::StyleSheetList *)*((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return WebCore::StyleSheetList::length(v11, v14, v15) <= a3;
  v16 = v13;
  if (*(_BYTE *)(v13 + 274))
    return WebCore::StyleSheetList::length(v11, v14, v15) <= a3;
  v17 = *(_BYTE **)(v13 + 496);
  if (!v17)
    v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
  if (!*(_QWORD *)v17)
    return WebCore::StyleSheetList::length(v11, v14, v15) <= a3;
  v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
  if (!v18)
    return WebCore::StyleSheetList::length(v11, v14, v15) <= a3;
  v19 = *(_QWORD *)(v18 + 680);
  if (*(_BYTE *)(v19 + 243))
  {
    if (!*(_BYTE *)(v19 + 242))
      return WebCore::StyleSheetList::length(v11, v14, v15) <= a3;
  }
  else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
  {
    return WebCore::StyleSheetList::length(v11, v14, v15) <= a3;
  }
  if (!v17[65])
    return WebCore::StyleSheetList::length(v11, v14, v15) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSStyleSheetList::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return WebCore::JSStyleSheetList::legacyPlatformObjectGetOwnProperty(a1, a2, a3, a4, 0);
}

uint64_t WebCore::JSStyleSheetList::getOwnPropertySlotByIndex(WebCore::JSStyleSheetList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  JSC::VM *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t OwnPropertySlotByIndex;
  WebCore::StyleSheetList *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  _BYTE *v44;
  char v45;
  WebCore::JSStyleSheetList *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  _WORD *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unsigned __int16 *v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  uint64_t v70;
  int v71;
  _BYTE *v72;
  uint64_t v73;
  unsigned int v74;
  unsigned __int16 *v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  JSC::VM *v79;
  uint64_t v80;
  char v81;
  int v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unsigned int v87;
  unsigned __int8 *v88;
  uint64_t v89;
  unsigned int v90;
  JSC::VM *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  char v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  unsigned __int8 *v102;
  int v103;
  int v104;
  uint64_t v105;
  const WTF::StringImpl *v106;
  const unsigned __int8 *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  JSC::VM *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  int v121;
  unint64_t v122;
  int hasExceptionsAfterHandlingTraps;
  unint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  unsigned int v127;
  unint64_t v128;
  JSC::VM *v129;
  unint64_t v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  WebCore::JSStyleSheetList *v135;
  WebCore::JSStyleSheetList *v136;
  uint64_t v137;
  int v138;
  char v139;
  JSC::VM *v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  char v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((_DWORD)a3 == -1)
  {
    JSC::Identifier::from();
    if (v131)
    {
      if ((*((_BYTE *)v131 + 16) & 0x20) != 0)
        goto LABEL_105;
      v13 = (WebCore::StyleSheetList *)*((_QWORD *)this + 3);
      *(_DWORD *)v131 += 2;
    }
    else
    {
      v13 = (WebCore::StyleSheetList *)*((_QWORD *)this + 3);
    }
    v144 = v131;
    v15 = (_DWORD *)WebCore::StyleSheetList::namedItem(v13, (const WTF::AtomString *)&v144);
    v16 = v144;
    v144 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::destroy(v16, v14);
        if (!v15)
          goto LABEL_105;
        goto LABEL_13;
      }
      *(_DWORD *)v16 -= 2;
    }
    if (!v15)
      goto LABEL_105;
LABEL_13:
    ++v15[2];
    v17 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v134 = 0xFFFFFFFF00000000;
    v136 = 0;
    v137 = 0;
    v135 = this;
    v138 = 196608;
    v139 = 0;
    v142 = 0;
    v143 = 0;
    v140 = v17;
    ++*((_DWORD *)v17 + 1);
    v141 = 1;
    v18 = (unint64_t)v131 >> 4;
    if (((unint64_t)v131 >> 4))
    {
      v19 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
      if ((v18 & ~*(_DWORD *)(v19 + 0x20)) == 0)
      {
        v20 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), v17);
        if (v20)
        {
          v144 = v131;
          v21 = JSC::PropertyTable::get(v20, (uint64_t *)&v144);
          v22 = v21;
          if ((_DWORD)v21 != -1)
          {
            v31 = HIDWORD(v21);
            v32 = (uint64_t *)((char *)this + 8 * (int)v21 + 16);
            if ((int)v21 >= 64)
              v32 = (uint64_t *)(*((_QWORD *)this + 1) + ((uint64_t)(0x3F00000000 - (v21 << 32)) >> 29) - 8);
            v33 = *v32;
            if ((*v32 & 0xFFFE000000000002) == 0)
            {
              v34 = *(unsigned __int8 *)(v33 + 5);
              if (v34 == 6)
              {
                v36 = *(_DWORD *)(v19 + 16) & 3;
                v37 = *(_QWORD *)(v33 + 16);
                if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x4C))
                {
                  v132 = *(_QWORD *)(v33 + 8);
                  v133 = v37;
                  LODWORD(v134) = HIDWORD(v21);
                  v136 = this;
                  goto LABEL_162;
                }
                v39 = *(_QWORD *)(v33 + 24);
                v38 = *(_QWORD *)(v33 + 32);
                v132 = *(_QWORD *)(v33 + 8);
                v133 = v37;
                LODWORD(v134) = HIDWORD(v21);
                v136 = this;
                goto LABEL_137;
              }
              if (v34 == 5)
                goto LABEL_140;
            }
            v35 = 0;
            v132 = v33;
            v136 = this;
            goto LABEL_97;
          }
        }
      }
    }
    if ((*((_BYTE *)this + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      goto LABEL_141;
    if (!v131)
      goto LABEL_62;
    v23 = *((_DWORD *)v131 + 4);
    if ((v23 & 0x20) != 0)
      goto LABEL_62;
    v24 = (_BYTE *)*((_QWORD *)v131 + 1);
    v25 = *((unsigned int *)v131 + 1);
    if ((v23 & 4) != 0)
    {
      if ((_DWORD)v25)
      {
        v26 = *v24 - 48;
        if (v26 <= 9 && (v25 < 2 || *v24 != 48))
        {
          v40 = v24 + 1;
          v41 = v25 - 1;
          while (v41)
          {
            if (v26 <= 0x19999999)
            {
              v42 = *v40 - 48;
              if (v42 <= 9)
              {
                v30 = __CFADD__(v42, 10 * v26);
                v26 = v42 + 10 * v26;
                ++v40;
                --v41;
                if (!v30)
                  continue;
              }
            }
            goto LABEL_62;
          }
          goto LABEL_61;
        }
      }
    }
    else if ((_DWORD)v25)
    {
      v26 = *(unsigned __int16 *)v24 - 48;
      if (v26 <= 9 && (v25 < 2 || *(_WORD *)v24 != 48))
      {
        v27 = (unsigned __int16 *)(v24 + 2);
        v28 = v25 - 1;
        while (v28)
        {
          if (v26 <= 0x19999999)
          {
            v29 = *v27 - 48;
            if (v29 <= 9)
            {
              v30 = __CFADD__(v29, 10 * v26);
              v26 = v29 + 10 * v26;
              ++v27;
              --v28;
              if (!v30)
                continue;
            }
          }
          goto LABEL_62;
        }
LABEL_61:
        if (v26 != -1 && (JSC::JSObject::getOwnPropertySlotByIndex() & 1) != 0)
          goto LABEL_141;
      }
    }
LABEL_62:
    v43 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
    if (!v43)
      v43 = *((_QWORD *)this + 2);
    if ((v43 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v43 + 5) < 0x17u)
      goto LABEL_90;
    v130 = v43;
    v45 = *(_BYTE *)(v43 + 6);
    v44 = (_BYTE *)(v43 + 6);
    if ((v45 & 8) == 0)
    {
      v129 = (JSC::VM *)*((_QWORD *)a2 + 7);
      v46 = (WebCore::JSStyleSheetList *)v130;
      while (1)
      {
        v47 = *(_DWORD *)v46 & 0xFFFFFFFE;
        v48 = 16 * v47;
        if ((_DWORD)v18)
        {
          if ((v18 & ~*(_DWORD *)(16 * v47 + 0x20)) == 0)
          {
            v49 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v48, v129);
            if (v49)
            {
              v144 = v131;
              v50 = JSC::PropertyTable::get(v49, (uint64_t *)&v144);
              v22 = v50;
              if ((_DWORD)v50 != -1)
                break;
            }
          }
        }
        if ((*v44 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
          goto LABEL_141;
        v51 = *(_QWORD *)(v48 + 48);
        if (!v51)
          v51 = *((_QWORD *)v46 + 2);
        if ((v51 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v51 + 5) < 0x17u)
        {
          if (!v131)
            goto LABEL_90;
          v52 = *((_DWORD *)v131 + 4);
          if ((v52 & 0x20) != 0)
            goto LABEL_90;
          v53 = (_WORD *)*((_QWORD *)v131 + 1);
          v54 = *((unsigned int *)v131 + 1);
          if ((v52 & 4) == 0)
          {
            if (!(_DWORD)v54 || (v55 = (unsigned __int16)*v53 - 48, v55 > 9))
            {
LABEL_86:
              v56 = 0;
              LOBYTE(v55) = 0;
              goto LABEL_87;
            }
            if (v54 >= 2 && *v53 == 48)
            {
              v56 = 0;
LABEL_87:
              v57 = 0;
            }
            else
            {
              v66 = v53 + 1;
              v67 = v54 - 1;
              while (v67)
              {
                if (v55 <= 0x19999999)
                {
                  v68 = *v66 - 48;
                  if (v68 <= 9)
                  {
                    v30 = __CFADD__(v68, 10 * v55);
                    v55 = v68 + 10 * v55;
                    ++v66;
                    --v67;
                    if (!v30)
                      continue;
                  }
                }
                goto LABEL_86;
              }
              v69 = v55 == -1;
              v57 = v55 & 0xFFFFFF00;
              v56 = 0x100000000;
              if (v55 == -1)
              {
                v56 = 0;
                LOBYTE(v55) = 0;
              }
              if (v69)
                v57 = 0;
            }
            v55 = v55;
LABEL_89:
            v58 = v130;
            if ((v56 & 0x100000000) == 0)
            {
LABEL_90:
              v59 = 0;
              v35 = v15;
              v15 = 0;
              goto LABEL_98;
            }
            v78 = v57 | v55;
            v79 = (JSC::VM *)*((_QWORD *)a2 + 7);
            while (2)
            {
              v80 = 16 * (*(_DWORD *)v58 & 0xFFFFFFFE);
              v81 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v80 + 0x4C) + 0x70))(v58, a2, v78, &v132);
              if (*((_DWORD *)v79 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v79) & 1) != 0)
                goto LABEL_90;
              if ((v81 & 1) != 0)
                goto LABEL_141;
              v82 = BYTE2(v138);
              if (BYTE2(v138) == 3)
              {
                if (v139)
                  goto LABEL_90;
                v83 = *(unsigned __int8 *)(v58 + 5);
                if (v83 != 61)
                  goto LABEL_176;
                goto LABEL_183;
              }
              v83 = *(unsigned __int8 *)(v58 + 5);
              if (v83 == 61)
              {
                if (BYTE2(v138) == 1)
                  goto LABEL_90;
              }
              else
              {
LABEL_176:
                if ((v83 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v58 + 40) & 7u) > 2)
                  {
                    LOBYTE(v144) = 0;
                    v145 = 0;
                    v86 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v58, (WTF *)&v144);
                    if ((_BYTE)v14)
                      v84 = v86;
                    else
                      v84 = 0;
                  }
                  else
                  {
                    v84 = *(_QWORD *)(v58 + 24);
                  }
                  if (v84 <= v78)
                    goto LABEL_90;
                  v82 = BYTE2(v138);
                }
              }
              if ((*(_WORD *)(v80 + 12) & 0x800) != 0 && v82 != 3)
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v85 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v58 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v58, a2);
                }
                else
                {
                  v85 = *(_QWORD *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x30);
                  if (!v85)
                    v85 = *(_QWORD *)(v58 + 16);
                }
                if (*((_DWORD *)v79 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v79) & 1) != 0)
                  goto LABEL_90;
              }
              else
              {
LABEL_183:
                v85 = *(_QWORD *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x30);
                if (!v85)
                  v85 = *(_QWORD *)(v58 + 16);
              }
              if ((v85 & 0xFFFE000000000002) != 0)
                goto LABEL_90;
              v58 = v85;
              if (*(unsigned __int8 *)(v85 + 5) <= 0x16u)
                goto LABEL_90;
              continue;
            }
          }
          if ((_DWORD)v54)
          {
            v87 = *(unsigned __int8 *)v53 - 48;
            if (v87 <= 9 && (v54 < 2 || *(_BYTE *)v53 != 48))
            {
              v125 = v54 - 1;
              v126 = (unsigned __int8 *)v53 + 1;
              while (v125)
              {
                if (v87 > 0x19999999)
                  goto LABEL_204;
                v127 = *v126 - 48;
                if (v127 > 9)
                  goto LABEL_204;
                v55 = 0;
                LOBYTE(v54) = 0;
                v56 = 0;
                v30 = __CFADD__(v127, 10 * v87);
                v87 = v127 + 10 * v87;
                --v125;
                ++v126;
                if (v30)
                  goto LABEL_206;
              }
              if (v87 == -1)
                v55 = 0;
              else
                v55 = v87 & 0xFFFFFF00;
              if (v87 == -1)
                LOBYTE(v54) = 0;
              else
                LOBYTE(v54) = v87;
              if (v87 == -1)
                v56 = 0;
              else
                v56 = 0x100000000;
              goto LABEL_206;
            }
LABEL_204:
            v55 = 0;
            LOBYTE(v54) = 0;
          }
          else
          {
            v55 = 0;
          }
          v56 = 0;
LABEL_206:
          v57 = v54;
          goto LABEL_89;
        }
        v44 = (_BYTE *)(v51 + 6);
        v128 = v51;
        v46 = (WebCore::JSStyleSheetList *)v51;
        if ((*(_BYTE *)(v51 + 6) & 8) != 0)
          goto LABEL_147;
      }
      v31 = HIDWORD(v50);
      if ((int)v50 > 63)
      {
        v60 = *((_QWORD *)v46 + 1) - 8;
        v61 = 0x3F00000000 - (v50 << 32);
      }
      else
      {
        v60 = (uint64_t)v46 + 16;
        v61 = v50 << 32;
      }
      v62 = *(_QWORD *)(v60 + (v61 >> 29));
      if ((v62 & 0xFFFE000000000002) != 0)
      {
LABEL_96:
        v35 = 0;
        v132 = v62;
        v136 = v46;
        goto LABEL_97;
      }
      v63 = *(unsigned __int8 *)(v62 + 5);
      if (v63 != 6)
      {
        if (v63 == 5)
          goto LABEL_140;
        goto LABEL_96;
      }
      v36 = *(_DWORD *)(v48 + 16) & 3;
      v70 = *(_QWORD *)(v62 + 16);
      if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x4C))
      {
        v132 = *(_QWORD *)(v62 + 8);
        v133 = v70;
        LODWORD(v134) = HIDWORD(v50);
        v136 = v46;
        goto LABEL_162;
      }
      v39 = *(_QWORD *)(v62 + 24);
      v38 = *(_QWORD *)(v62 + 32);
      v132 = *(_QWORD *)(v62 + 8);
      v133 = v70;
      LODWORD(v134) = HIDWORD(v50);
      v136 = v46;
LABEL_137:
      BYTE1(v138) = 3;
      v35 = 0;
      v59 = 1;
      if (v36 != 2)
        LOBYTE(v138) = 1;
      HIBYTE(v138) = 1;
      v142 = v39;
      v143 = v38;
      goto LABEL_98;
    }
    v128 = v130;
LABEL_147:
    if (!v131)
      goto LABEL_219;
    v71 = *((_DWORD *)v131 + 4);
    if ((v71 & 0x20) != 0)
      goto LABEL_219;
    v72 = (_BYTE *)*((_QWORD *)v131 + 1);
    v73 = *((unsigned int *)v131 + 1);
    if ((v71 & 4) != 0)
    {
      if (!(_DWORD)v73)
        goto LABEL_219;
      v74 = *v72 - 48;
      if (v74 > 9 || v73 >= 2 && *v72 == 48)
        goto LABEL_219;
      v88 = v72 + 1;
      v89 = v73 - 1;
      while (v89)
      {
        if (v74 <= 0x19999999)
        {
          v90 = *v88 - 48;
          if (v90 <= 9)
          {
            v30 = __CFADD__(v90, 10 * v74);
            v74 = v90 + 10 * v74;
            ++v88;
            --v89;
            if (!v30)
              continue;
          }
        }
        goto LABEL_219;
      }
    }
    else
    {
      if (!(_DWORD)v73)
        goto LABEL_219;
      v74 = *(unsigned __int16 *)v72 - 48;
      if (v74 > 9 || v73 >= 2 && *(_WORD *)v72 == 48)
        goto LABEL_219;
      v75 = (unsigned __int16 *)(v72 + 2);
      v76 = v73 - 1;
      while (v76)
      {
        if (v74 <= 0x19999999)
        {
          v77 = *v75 - 48;
          if (v77 <= 9)
          {
            v30 = __CFADD__(v77, 10 * v74);
            v74 = v77 + 10 * v74;
            ++v75;
            --v76;
            if (!v30)
              continue;
          }
        }
        goto LABEL_219;
      }
    }
    if (v74 == -1)
    {
LABEL_219:
      v91 = (JSC::VM *)*((_QWORD *)a2 + 7);
      while (1)
      {
        v92 = *(_DWORD *)v128 & 0xFFFFFFFE;
        v93 = 16 * v92;
        if ((*(_BYTE *)(v128 + 6) & 8) != 0)
          break;
        if ((_DWORD)v18)
        {
          if ((v18 & ~*(_DWORD *)(16 * v92 + 0x20)) == 0)
          {
            v94 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * v92), v91);
            if (v94)
            {
              v144 = v131;
              v95 = JSC::PropertyTable::get(v94, (uint64_t *)&v144);
              v22 = v95;
              if ((_DWORD)v95 != -1)
              {
                v31 = HIDWORD(v95);
                if ((int)v95 > 63)
                {
                  v108 = *(_QWORD *)(v128 + 8) - 8;
                  v109 = 0x3F00000000 - (v95 << 32);
                }
                else
                {
                  v108 = v128 + 16;
                  v109 = v95 << 32;
                }
                v110 = *(_QWORD *)(v108 + (v109 >> 29));
                if ((v110 & 0xFFFE000000000002) == 0)
                {
                  v111 = *(unsigned __int8 *)(v110 + 5);
                  if (v111 != 6)
                  {
                    if (v111 != 5)
                      goto LABEL_285;
LABEL_140:
                    JSC::JSObject::fillGetterPropertySlot();
LABEL_141:
                    v35 = 0;
                    v59 = 1;
LABEL_98:
                    if (v141)
                    {
                      v64 = *((_DWORD *)v140 + 1);
                      if (!v64)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x194FB3BECLL);
                      }
                      *((_DWORD *)v140 + 1) = v64 - 1;
                    }
                    if (v15)
                    {
                      if (v15[2] != 1)
                      {
                        --v15[2];
                        goto LABEL_104;
                      }
                      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
                      if ((v59 & 1) == 0)
                      {
LABEL_111:
                        if (v35)
                          v65 = WebCore::wrap<WebCore::CSSStyleSheet>((int)a2, *(JSC::VM **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), (uint64_t)v35);
                        else
                          v65 = 2;
                        if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
                        {
                          OwnPropertySlotByIndex = 0;
                          if (!v35)
                            goto LABEL_106;
LABEL_116:
                          if (v35[2] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
                          else
                            --v35[2];
                          goto LABEL_106;
                        }
                        *(_QWORD *)a4 = v65;
                        *(_DWORD *)(a4 + 16) = 2;
                        *(_QWORD *)(a4 + 32) = this;
                        OwnPropertySlotByIndex = 1;
                        *(_BYTE *)(a4 + 49) = 1;
                        if (v35)
                          goto LABEL_116;
LABEL_106:
                        if (v131)
                        {
                          if (*(_DWORD *)v131 == 2)
                            WTF::StringImpl::destroy(v131, v14);
                          else
                            *(_DWORD *)v131 -= 2;
                        }
                        return OwnPropertySlotByIndex;
                      }
                    }
                    else
                    {
LABEL_104:
                      if ((v59 & 1) == 0)
                        goto LABEL_111;
                    }
LABEL_105:
                    OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex();
                    goto LABEL_106;
                  }
                  v36 = *(_DWORD *)(v93 + 16) & 3;
                  v112 = *(_QWORD *)(v110 + 16);
                  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v110 & 0xFFFFFFFE) + 0x4C))
                  {
                    v39 = *(_QWORD *)(v110 + 24);
                    v38 = *(_QWORD *)(v110 + 32);
                    v132 = *(_QWORD *)(v110 + 8);
                    v133 = v112;
                    LODWORD(v134) = HIDWORD(v95);
                    v136 = (WebCore::JSStyleSheetList *)v128;
                    goto LABEL_137;
                  }
                  v132 = *(_QWORD *)(v110 + 8);
                  v133 = v112;
                  LODWORD(v134) = HIDWORD(v95);
                  v136 = (WebCore::JSStyleSheetList *)v128;
LABEL_162:
                  v59 = 1;
                  BYTE1(v138) = 3;
                  v35 = 0;
                  if (v36 != 2)
                    LOBYTE(v138) = 1;
                  goto LABEL_98;
                }
LABEL_285:
                v35 = 0;
                v132 = v110;
                v136 = (WebCore::JSStyleSheetList *)v128;
LABEL_97:
                v134 = __PAIR64__(v22, v31);
                v59 = 1;
                LOWORD(v138) = 257;
                goto LABEL_98;
              }
            }
          }
        }
        if ((*(_BYTE *)(v128 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
          goto LABEL_141;
LABEL_226:
        if ((*(_WORD *)(v93 + 12) & 0x800) == 0)
        {
          v96 = *(_DWORD *)v128;
LABEL_228:
          v97 = *(_QWORD *)(16 * (v96 & 0xFFFFFFFE) + 0x30);
          if (!v97)
            v97 = *(_QWORD *)(v128 + 16);
          goto LABEL_230;
        }
        v96 = *(_DWORD *)v128;
        if (BYTE2(v138) == 3)
          goto LABEL_228;
        v105 = 16 * (v96 & 0xFFFFFFFE);
        if ((*(_WORD *)(v105 + 12) & 0x800) != 0)
        {
          v97 = (*(uint64_t (**)(unint64_t, JSC::JSObject *))(16 * *(unsigned int *)(v105 + 76) + 0xB0))(v128, a2);
        }
        else
        {
          v97 = *(_QWORD *)(v105 + 48);
          if (!v97)
            v97 = *(_QWORD *)(v128 + 16);
        }
        if (*((_DWORD *)v91 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v91) & 1) != 0)
          goto LABEL_90;
LABEL_230:
        if ((v97 & 0xFFFE000000000002) == 0)
        {
          v128 = v97;
          if (*(unsigned __int8 *)(v97 + 5) > 0x16u)
            continue;
        }
        goto LABEL_90;
      }
      v98 = (*(uint64_t (**)(unint64_t, JSC::JSObject *, WTF::StringImpl *, uint64_t *))(16 * *(unsigned int *)(16 * v92 + 0x4C) + 0x68))(v128, a2, v131, &v132);
      if (*((_DWORD *)v91 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v91) & 1) != 0)
        goto LABEL_90;
      if ((v98 & 1) != 0)
        goto LABEL_141;
      if (BYTE2(v138) == 3)
      {
        if (v139)
          goto LABEL_90;
        v99 = *(unsigned __int8 *)(v128 + 5);
        if (v99 == 61)
          goto LABEL_226;
      }
      else
      {
        v99 = *(unsigned __int8 *)(v128 + 5);
        if (v99 == 61)
        {
          if (BYTE2(v138) == 1)
            goto LABEL_90;
          goto LABEL_226;
        }
      }
      if (!v131)
        goto LABEL_226;
      if ((v99 - 50) < 0xFFFFFFF5)
        goto LABEL_226;
      v100 = *((_DWORD *)v131 + 4);
      if ((v100 & 0x20) != 0)
        goto LABEL_226;
      v101 = *((unsigned int *)v131 + 1);
      if (!(_DWORD)v101)
        goto LABEL_226;
      v102 = (unsigned __int8 *)*((_QWORD *)v131 + 1);
      if ((v100 & 4) != 0)
      {
        v103 = *v102;
        if ((_DWORD)v101 == 1)
        {
LABEL_262:
          if ((v103 - 48) < 0xA)
            goto LABEL_90;
          goto LABEL_226;
        }
        if (v103 == 45)
        {
          v104 = v102[1];
LABEL_266:
          if ((v104 - 48) >= 0xA)
          {
            if ((_DWORD)v101 != 9 || v104 != 73)
              goto LABEL_226;
          }
          else if ((_DWORD)v101 == 2)
          {
            goto LABEL_90;
          }
LABEL_277:
          v130 = v130 & 0xFFFFFF0000000000 | v101 | ((unint64_t)((v100 >> 2) & 1) << 32);
          JSC::jsToNumber();
          v106 = (const WTF::StringImpl *)WTF::numberToString();
          if ((WTF::equal(v131, v106, v107) & 1) != 0)
            goto LABEL_90;
          goto LABEL_226;
        }
      }
      else
      {
        v103 = *(unsigned __int16 *)v102;
        if ((_DWORD)v101 == 1)
          goto LABEL_262;
        if (v103 == 45)
        {
          v104 = *((unsigned __int16 *)v102 + 1);
          goto LABEL_266;
        }
      }
      if ((v103 - 48) >= 0xA && ((_DWORD)v101 != 8 || v103 != 73) && ((_DWORD)v101 != 3 || v103 != 78))
        goto LABEL_226;
      goto LABEL_277;
    }
    v113 = v74;
    v114 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v115 = v130;
    while (1)
    {
      v116 = 16 * (*(_DWORD *)v115 & 0xFFFFFFFE);
      v117 = v115;
      v118 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, unint64_t, uint64_t *))(16
                                                                                              * *(unsigned int *)(v116 + 0x4C)
                                                                                              + 0x70))(v115, a2, v113, &v132);
      v119 = v118;
      if (*((_DWORD *)v114 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v114);
        if (((hasExceptionsAfterHandlingTraps | v119) & 1) != 0)
        {
          if (!hasExceptionsAfterHandlingTraps)
            goto LABEL_141;
          goto LABEL_90;
        }
      }
      else if ((v118 & 1) != 0)
      {
        goto LABEL_141;
      }
      v120 = BYTE2(v138);
      if (BYTE2(v138) == 3)
      {
        if (v139)
          goto LABEL_90;
        v121 = *(unsigned __int8 *)(v117 + 5);
        if (v121 == 61)
        {
LABEL_308:
          v115 = *(_QWORD *)(16 * (*(_DWORD *)v117 & 0xFFFFFFFE) + 0x30);
          if (!v115)
            v115 = *(_QWORD *)(v117 + 16);
          goto LABEL_310;
        }
      }
      else
      {
        v121 = *(unsigned __int8 *)(v117 + 5);
        if (v121 == 61)
        {
          if (BYTE2(v138) == 1)
            goto LABEL_90;
          goto LABEL_306;
        }
      }
      if ((v121 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v117 + 40) & 7u) > 2)
        {
          LOBYTE(v144) = 0;
          v145 = 0;
          v124 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v117, (WTF *)&v144);
          if ((_BYTE)v14)
            v122 = v124;
          else
            v122 = 0;
        }
        else
        {
          v122 = *(_QWORD *)(v117 + 24);
        }
        if (v122 <= v113)
          goto LABEL_90;
        v120 = BYTE2(v138);
      }
LABEL_306:
      if ((*(_WORD *)(v116 + 12) & 0x800) == 0 || v120 == 3)
        goto LABEL_308;
      if ((*(_WORD *)(16 * (*(_DWORD *)v117 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v115 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v117 & 0xFFFFFFFE)
                                                                                     + 0x4C)
                                                                   + 0xB0))(v117, a2);
      }
      else
      {
        v115 = *(_QWORD *)(16 * (*(_DWORD *)v117 & 0xFFFFFFFE) + 0x30);
        if (!v115)
          v115 = *(_QWORD *)(v117 + 16);
      }
      if (*((_DWORD *)v114 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v114) & 1) != 0)
        goto LABEL_90;
LABEL_310:
      if ((v115 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v115 + 5) <= 0x16u)
        goto LABEL_90;
    }
  }
  v9 = WebCore::StyleSheetList::item(*((WebCore::StyleSheetList **)this + 3), (uint64_t)a3, a3);
  if (v9)
  {
    v10 = WebCore::wrap<WebCore::StyleSheet>((uint64_t)a2, *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v9);
    if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
      return 0;
    *(_QWORD *)a4 = v10;
    *(_DWORD *)(a4 + 16) = 2;
    *(_QWORD *)(a4 + 32) = this;
    OwnPropertySlotByIndex = 1;
    *(_BYTE *)(a4 + 49) = 1;
    return OwnPropertySlotByIndex;
  }
  return JSC::JSObject::getOwnPropertySlotByIndex();
}

uint64_t WebCore::JSStyleSheetList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  int v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45[2];
  char v46;
  WTF::StringImpl *v47;

  v4 = WebCore::StyleSheetList::length(*(WebCore::StyleSheetList **)(a1 + 24), a2, (const WTF::StringImpl *)a3);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v9 = v44;
      v47 = v44;
      v10 = *((_DWORD *)v44 + 4);
      if ((v10 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v44 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v11 = *a3;
      v12 = *(unsigned int *)(*a3 + 20);
      if (v12 <= 0x13)
      {
        if ((_DWORD)v12)
        {
          v13 = *(WTF::StringImpl ***)(v11 + 8);
          while (*v13 != v44)
          {
            ++v13;
            if (!--v12)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v10 & 0x20) != 0)
        {
          v34 = *(_DWORD *)v9 + 2;
        }
        else
        {
          if ((v10 & 0x10) != 0)
          {
            *(_DWORD *)v9 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v9 = v45[0];
          }
          v34 = *(_DWORD *)v9;
          *(_DWORD *)v9 += 2;
          if (!v34)
          {
            WTF::StringImpl::destroy(v9, v8);
LABEL_54:
            v35 = (uint64_t *)(v11 + 8);
            v45[0] = v9;
            v36 = *(unsigned int *)(v11 + 20);
            if ((_DWORD)v36 == *(_DWORD *)(v11 + 16))
            {
              v37 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)v45);
              v36 = *(unsigned int *)(v11 + 20);
              v38 = *(_QWORD *)(v11 + 8);
              v39 = *v37;
              *v37 = 0;
              *(_QWORD *)(v38 + 8 * v36) = v39;
            }
            else
            {
              v40 = *v35;
              v45[0] = 0;
              *(_QWORD *)(v40 + 8 * v36) = v9;
            }
            *(_DWORD *)(v11 + 20) = v36 + 1;
            v41 = v45[0];
            v45[0] = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
                WTF::StringImpl::destroy(v41, v8);
              else
                *(_DWORD *)v41 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v9 = v34;
        goto LABEL_54;
      }
      if (!*v7 || !*(_DWORD *)(*v7 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v47, (uint64_t)v45);
      if (v46)
      {
        v9 = v47;
        v11 = *a3;
        v10 = *((_DWORD *)v47 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v42 = v44;
      v44 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v8);
        else
          *(_DWORD *)v42 -= 2;
      }
      if (++v6 == v5)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v14 = *(uint64_t **)(v11 + 8);
    v15 = &v14[v12];
    while (1)
    {
      v16 = *v14;
      v17 = *v7;
      if (*v7
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v17 = *v7) != 0))
      {
        v18 = *(_DWORD *)(v17 - 8);
      }
      else
      {
        v18 = 0;
      }
      v19 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
      v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
      v22 = v18 & ((v21 >> 31) ^ v21);
      v23 = (uint64_t *)(v17 + 8 * v22);
      v24 = *v23;
      if (*v23)
      {
        v25 = 0;
        v26 = 1;
        while (v24 != v16)
        {
          if (v24 == -1)
            v25 = v23;
          v22 = (v22 + v26) & v18;
          v23 = (uint64_t *)(v17 + 8 * v22);
          v24 = *v23;
          ++v26;
          if (!*v23)
          {
            if (v25)
            {
              *v25 = 0;
              --*(_DWORD *)(*v7 - 16);
              v23 = v25;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v23 = v16;
      v27 = *v7;
      v28 = *v7 ? *(_DWORD *)(v27 - 12) + 1 : 1;
      *(_DWORD *)(v27 - 12) = v28;
      v29 = *v7;
      v30 = *v7 ? *(_DWORD *)(v29 - 12) : 0;
      v31 = (*(_DWORD *)(v29 - 16) + v30);
      v32 = *(unsigned int *)(v29 - 4);
      if (v32 > 0x400)
        break;
      if (3 * v32 <= 4 * v31)
      {
        if ((_DWORD)v32)
          goto LABEL_43;
        v33 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v14 == v15)
        goto LABEL_17;
    }
    if (v32 > 2 * v31)
      goto LABEL_47;
LABEL_43:
    v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v33, v23);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSStyleSheetList::defineOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  JSC::VM *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int OwnPropertySlotByIndex;
  int v21;
  int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned int v33;
  int OwnStaticPropertySlot;
  BOOL v35;
  int hasExceptionsAfterHandlingTraps;
  WebCore::StyleSheetList *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  JSC::VM *v52;
  WTF::StringImpl *v53;

  v8 = *(JSC::VM **)(a2 + 56);
  v52 = v8;
  if (a3)
  {
    v9 = *(_DWORD *)(a3 + 16);
    if ((v9 & 0x20) != 0)
      return JSC::JSObject::defineOwnProperty();
    v10 = *(_BYTE **)(a3 + 8);
    v11 = *(unsigned int *)(a3 + 4);
    if ((v9 & 4) != 0)
    {
      if (!(_DWORD)v11)
        goto LABEL_8;
      v12 = *v10 - 48;
      if (v12 > 9 || v11 >= 2 && *v10 == 48)
        goto LABEL_8;
      v43 = v11 - 1;
      v44 = v10 + 1;
      while (v43)
      {
        if (v12 <= 0x19999999)
        {
          v45 = *v44 - 48;
          if (v45 <= 9)
          {
            v26 = __CFADD__(v45, 10 * v12);
            v12 = v45 + 10 * v12;
            --v43;
            ++v44;
            if (!v26)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (!(_DWORD)v11)
        goto LABEL_8;
      v12 = *(unsigned __int16 *)v10 - 48;
      if (v12 > 9 || v11 >= 2 && *(_WORD *)v10 == 48)
        goto LABEL_8;
      v23 = (unsigned __int16 *)(v10 + 2);
      v24 = v11 - 1;
      while (v24)
      {
        if (v12 <= 0x19999999)
        {
          v25 = *v23 - 48;
          if (v25 <= 9)
          {
            v26 = __CFADD__(v25, 10 * v12);
            v12 = v25 + 10 * v12;
            ++v23;
            --v24;
            if (!v26)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    if (v12 != -1)
    {
      if (a5)
        JSC::throwTypeError();
      return 0;
    }
  }
LABEL_8:
  v51 = *(_QWORD *)(a2 + 56);
  ++*((_DWORD *)v8 + 1);
  if (!(a3 >> 4)
    || ((a3 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x20)) != 0
    || (v13 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v8)) == 0
    || (v53 = (WTF::StringImpl *)a3, v14 = JSC::PropertyTable::get(v13, (uint64_t *)&v53), (_DWORD)v14 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
    {
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot();
      OwnPropertySlotByIndex = OwnStaticPropertySlot;
      if (!a3 || (OwnStaticPropertySlot & 1) != 0)
        goto LABEL_23;
    }
    else if (!a3)
    {
      goto LABEL_22;
    }
    v15 = *(_DWORD *)(a3 + 16);
    if ((v15 & 0x20) == 0)
    {
      v16 = *(_BYTE **)(a3 + 8);
      v17 = *(unsigned int *)(a3 + 4);
      if ((v15 & 4) != 0)
      {
        if (!(_DWORD)v17 || (v46 = *v16 - 48, v46 > 9) || v17 >= 2 && *v16 == 48)
        {
LABEL_88:
          v47 = 0;
        }
        else
        {
          v48 = v17 - 1;
          v49 = v16 + 1;
          while (v48)
          {
            if (v46 > 0x19999999)
              goto LABEL_88;
            v50 = *v49 - 48;
            if (v50 > 9)
              goto LABEL_88;
            v47 = 0;
            v26 = __CFADD__(v50, 10 * v46);
            v46 = v50 + 10 * v46;
            --v48;
            ++v49;
            if (v26)
              goto LABEL_89;
          }
          v47 = 0x100000000;
          if (v46 == -1)
            v47 = 0;
        }
LABEL_89:
        if ((v47 & 0x100000000) == 0)
          goto LABEL_22;
      }
      else
      {
        if ((_DWORD)v17
          && (v18 = *(unsigned __int16 *)v16 - 48, v18 <= 9)
          && (v17 < 2 || *(_WORD *)v16 != 48))
        {
          v31 = (unsigned __int16 *)(v16 + 2);
          v32 = v17 - 1;
          while (v32)
          {
            if (v18 <= 0x19999999)
            {
              v33 = *v31 - 48;
              if (v33 <= 9)
              {
                v26 = __CFADD__(v33, 10 * v18);
                v18 = v33 + 10 * v18;
                ++v31;
                --v32;
                if (!v26)
                  continue;
              }
            }
            goto LABEL_20;
          }
          v35 = v18 == -1;
          v19 = 0x100000000;
          if (v35)
            v19 = 0;
        }
        else
        {
LABEL_20:
          v19 = 0;
        }
        if ((v19 & 0x100000000) == 0)
          goto LABEL_22;
      }
      OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex();
      goto LABEL_23;
    }
LABEL_22:
    OwnPropertySlotByIndex = 0;
    goto LABEL_23;
  }
  if ((int)v14 > 63)
  {
    v27 = *(_QWORD *)(a1 + 8) - 8;
    v28 = 0x3F00000000 - (v14 << 32);
  }
  else
  {
    v27 = a1 + 16;
    v28 = v14 << 32;
  }
  v29 = *(_QWORD *)(v27 + (v28 >> 29));
  if ((v29 & 0xFFFE000000000002) != 0)
    goto LABEL_39;
  v30 = *(unsigned __int8 *)(v29 + 5);
  if (v30 == 6)
  {
    OwnPropertySlotByIndex = 1;
    goto LABEL_23;
  }
  if (v30 != 5)
  {
LABEL_39:
    OwnPropertySlotByIndex = 1;
    goto LABEL_23;
  }
  JSC::JSObject::fillGetterPropertySlot();
  OwnPropertySlotByIndex = 1;
LABEL_23:
  v21 = *(_DWORD *)(v51 + 4);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x194FB4C7CLL);
  }
  *(_DWORD *)(v51 + 4) = v21 - 1;
  if (*((_DWORD *)v52 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v52);
    if (((hasExceptionsAfterHandlingTraps | OwnPropertySlotByIndex) & 1) != 0)
    {
      v22 = hasExceptionsAfterHandlingTraps ^ 1;
      goto LABEL_66;
    }
  }
  else if ((OwnPropertySlotByIndex & 1) != 0)
  {
    v22 = 1;
    goto LABEL_66;
  }
  v37 = *(WebCore::StyleSheetList **)(a1 + 24);
  if (a3)
  {
    *(_DWORD *)a3 += 2;
    v38 = a3;
  }
  else
  {
    v38 = 0;
  }
  v53 = (WTF::StringImpl *)v38;
  v40 = WebCore::StyleSheetList::namedItem(v37, (const WTF::AtomString *)&v53);
  v41 = v53;
  v53 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v39);
    else
      *(_DWORD *)v41 -= 2;
  }
  v22 = v40 == 0;
  if (v40)
  {
    if (a5)
    {
      JSC::throwTypeError();
      v22 = 0;
    }
  }
LABEL_66:
  if (v22)
    return JSC::JSObject::defineOwnProperty();
  return 0;
}

uint64_t WebCore::JSStyleSheetList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSStyleSheetList::createPrototype(WebCore::JSStyleSheetList *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSStyleSheetListPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSStyleSheetListPrototype::create(WebCore::JSStyleSheetListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSStyleSheetListPrototype::finishCreation((WebCore::JSStyleSheetListPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheetList>,(WebCore::DOMConstructorID)373>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2984);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheetList>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheetList>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2984) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSStyleSheetList::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  JSC::VM *v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned __int16 *v31;
  uint64_t i;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WebCore::StyleSheetList *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  JSC::VM *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned __int16 *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  _DWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  _WORD *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  _BYTE *v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned __int16 *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t OwnStaticPropertySlot;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int16 *v105;
  uint64_t v106;
  unsigned int v107;
  BOOL v108;
  uint64_t v109;
  int v110;
  _BYTE *v111;
  uint64_t v112;
  unsigned int v113;
  unsigned __int16 *v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char v123;
  int v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  unsigned __int8 *v131;
  unsigned int v132;
  unsigned __int8 *v133;
  uint64_t v134;
  unsigned int v135;
  JSC::VM *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  uint64_t v142;
  char v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  unsigned __int8 *v147;
  int v148;
  int v149;
  uint64_t v150;
  const WTF::StringImpl *v151;
  const unsigned __int8 *v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  int hasExceptionsAfterHandlingTraps;
  unint64_t v168;
  char v169;
  uint64_t v170;
  unsigned __int8 *v171;
  unsigned int v172;
  unsigned __int8 *v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  unsigned __int8 *v177;
  unsigned int v178;
  unint64_t v179;
  JSC::VM *v180;
  JSC::VM *v181;
  JSC::VM *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  char v190;
  JSC::VM *v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  WTF::StringImpl *v195;
  char v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  v9 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((a5 & 1) != 0)
    {
      if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
        return JSC::JSObject::getOwnStaticPropertySlot();
      return 0;
    }
    v37 = 0;
    v36 = *(WebCore::StyleSheetList **)(a1 + 24);
    goto LABEL_56;
  }
  v10 = *(_DWORD *)(a3 + 16);
  if ((v10 & 0x20) != 0)
    goto LABEL_151;
  v11 = *(_BYTE **)(a3 + 8);
  v12 = *(unsigned int *)(a3 + 4);
  if ((v10 & 4) != 0)
  {
    if ((_DWORD)v12)
    {
      v34 = *v11 - 48;
      if (v34 <= 9 && (v12 < 2 || *v11 != 48))
      {
        v170 = v12 - 1;
        v171 = v11 + 1;
        while (v170)
        {
          if (v34 > 0x19999999)
            goto LABEL_51;
          v172 = *v171 - 48;
          if (v172 > 9)
            goto LABEL_51;
          v13 = 0;
          LOBYTE(v12) = 0;
          v35 = 0;
          v22 = __CFADD__(v172, 10 * v34);
          v34 = v172 + 10 * v34;
          --v170;
          ++v171;
          if (v22)
            goto LABEL_53;
        }
        if (v34 == -1)
          v13 = 0;
        else
          v13 = v34 & 0xFFFFFF00;
        if (v34 == -1)
          LOBYTE(v12) = 0;
        else
          LOBYTE(v12) = v34;
        if (v34 == -1)
          v35 = 0;
        else
          v35 = 0x100000000;
LABEL_53:
        v15 = v12;
        if ((v35 & 0x100000000) != 0)
        {
LABEL_9:
          v16 = WebCore::StyleSheetList::item(*(WebCore::StyleSheetList **)(a1 + 24), v15 | v13, (const WTF::StringImpl *)a3);
          if (v16)
          {
            v17 = WebCore::wrap<WebCore::StyleSheet>(a2, *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v16);
            if (!*((_DWORD *)v9 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) == 0)
            {
              *(_QWORD *)a4 = v17;
              *(_DWORD *)(a4 + 16) = 2;
              *(_QWORD *)(a4 + 32) = a1;
              v18 = 1;
              *(_BYTE *)(a4 + 49) = 1;
              return v18;
            }
            return 0;
          }
          if (!(a3 >> 4)
            || (v24 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v24 + 0x20)) != 0)
            || (v25 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56))) == 0|| (v195 = (WTF::StringImpl *)a3, v26 = JSC::PropertyTable::get(v25, (uint64_t *)&v195), (_DWORD)v26 == -1))
          {
            if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
              return 1;
            v27 = *(_DWORD *)(a3 + 16);
            if ((v27 & 0x20) == 0)
            {
              v28 = *(_BYTE **)(a3 + 8);
              v29 = *(unsigned int *)(a3 + 4);
              if ((v27 & 4) != 0)
              {
                if (!(_DWORD)v29)
                  return 0;
                v30 = *v28 - 48;
                if (v30 > 9 || v29 >= 2 && *v28 == 48)
                  return 0;
                v130 = v29 - 1;
                v131 = v28 + 1;
                while (v130)
                {
                  if (v30 > 0x19999999)
                    return 0;
                  v132 = *v131 - 48;
                  if (v132 > 9)
                    return 0;
                  v18 = 0;
                  v22 = __CFADD__(v132, 10 * v30);
                  v30 = v132 + 10 * v30;
                  --v130;
                  ++v131;
                  if (v22)
                    return v18;
                }
              }
              else
              {
                if (!(_DWORD)v29)
                  return 0;
                v30 = *(unsigned __int16 *)v28 - 48;
                if (v30 > 9 || v29 >= 2 && *(_WORD *)v28 == 48)
                  return 0;
                v31 = (unsigned __int16 *)(v28 + 2);
                for (i = v29 - 1; i; --i)
                {
                  if (v30 > 0x19999999)
                    return 0;
                  v33 = *v31 - 48;
                  if (v33 > 9)
                    return 0;
                  v18 = 0;
                  v22 = __CFADD__(v33, 10 * v30);
                  v30 = v33 + 10 * v30;
                  ++v31;
                  if (v22)
                    return v18;
                }
              }
              if (v30 != -1)
                return JSC::JSObject::getOwnPropertySlotByIndex();
            }
            return 0;
          }
          goto LABEL_168;
        }
        goto LABEL_54;
      }
LABEL_51:
      v13 = 0;
      LOBYTE(v12) = 0;
    }
    else
    {
      v13 = 0;
    }
    v35 = 0;
    goto LABEL_53;
  }
  if (!(_DWORD)v12 || (v13 = *(unsigned __int16 *)v11 - 48, v13 > 9))
  {
LABEL_6:
    v14 = 0;
    LOBYTE(v13) = 0;
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  if (v12 >= 2 && *(_WORD *)v11 == 48)
  {
    v14 = 0;
    goto LABEL_7;
  }
  v19 = (unsigned __int16 *)(v11 + 2);
  v20 = v12 - 1;
  while (v20)
  {
    if (v13 <= 0x19999999)
    {
      v21 = *v19 - 48;
      if (v21 <= 9)
      {
        v22 = __CFADD__(v21, 10 * v13);
        v13 = v21 + 10 * v13;
        ++v19;
        --v20;
        if (!v22)
          continue;
      }
    }
    goto LABEL_6;
  }
  v23 = v13 == -1;
  v15 = v13 & 0xFFFFFF00;
  v14 = 0x100000000;
  if (v13 == -1)
  {
    v14 = 0;
    LOBYTE(v13) = 0;
  }
  if (v23)
    v15 = 0;
LABEL_8:
  v13 = v13;
  if ((v14 & 0x100000000) != 0)
    goto LABEL_9;
LABEL_54:
  if ((a5 & 1) != 0)
    goto LABEL_151;
  v36 = *(WebCore::StyleSheetList **)(a1 + 24);
  *(_DWORD *)a3 += 2;
  v37 = (WTF::StringImpl *)a3;
LABEL_56:
  v195 = v37;
  v39 = (_DWORD *)WebCore::StyleSheetList::namedItem(v36, (const WTF::AtomString *)&v195);
  v40 = v195;
  v195 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::destroy(v40, v38);
      if (!v39)
        goto LABEL_151;
      goto LABEL_60;
    }
    *(_DWORD *)v40 -= 2;
  }
  if (!v39)
    goto LABEL_151;
LABEL_60:
  ++v39[2];
  v41 = *(JSC::VM **)(a2 + 56);
  v185 = 0xFFFFFFFF00000000;
  v187 = 0;
  v188 = 0;
  v186 = a1;
  v189 = 196608;
  v190 = 0;
  v193 = 0;
  v194 = 0;
  v191 = v41;
  ++*((_DWORD *)v41 + 1);
  v192 = 1;
  if ((a3 >> 4))
  {
    v42 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if (((a3 >> 4) & ~*(_DWORD *)(v42 + 0x20)) == 0)
    {
      v43 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v41);
      if (v43)
      {
        v195 = (WTF::StringImpl *)a3;
        v44 = JSC::PropertyTable::get(v43, (uint64_t *)&v195);
        v45 = v44;
        if ((_DWORD)v44 != -1)
        {
          v53 = HIDWORD(v44);
          v54 = (uint64_t *)(a1 + 8 * (int)v44 + 16);
          if ((int)v44 >= 64)
            v54 = (uint64_t *)(*(_QWORD *)(a1 + 8) + ((uint64_t)(0x3F00000000 - (v44 << 32)) >> 29) - 8);
          v55 = *v54;
          if ((*v54 & 0xFFFE000000000002) == 0)
          {
            v56 = *(unsigned __int8 *)(v55 + 5);
            if (v56 == 6)
            {
              v58 = *(_DWORD *)(v42 + 16) & 3;
              v59 = *(_QWORD *)(v55 + 16);
              if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v55 & 0xFFFFFFFE) + 0x4C))
              {
                v61 = *(_QWORD *)(v55 + 24);
                v60 = *(_QWORD *)(v55 + 32);
                v183 = *(_QWORD *)(v55 + 8);
                v184 = v59;
                LODWORD(v185) = HIDWORD(v44);
                v187 = a1;
LABEL_221:
                BYTE1(v189) = 3;
                v57 = 0;
                v79 = 1;
                if (v58 != 2)
                  LOBYTE(v189) = 1;
                HIBYTE(v189) = 1;
                v193 = v61;
                v194 = v60;
                goto LABEL_144;
              }
              v183 = *(_QWORD *)(v55 + 8);
              v184 = v59;
              LODWORD(v185) = HIDWORD(v44);
              v187 = a1;
LABEL_248:
              v79 = 1;
              BYTE1(v189) = 3;
              v57 = 0;
              if (v58 != 2)
                LOBYTE(v189) = 1;
              goto LABEL_144;
            }
            if (v56 == 5)
              goto LABEL_224;
          }
          v57 = 0;
          v183 = v55;
          v187 = a1;
LABEL_143:
          v185 = __PAIR64__(v45, v53);
          v79 = 1;
          LOWORD(v189) = 257;
          goto LABEL_144;
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    goto LABEL_225;
  if (a3)
  {
    v46 = *(_DWORD *)(a3 + 16);
    if ((v46 & 0x20) == 0)
    {
      v47 = *(_BYTE **)(a3 + 8);
      v48 = *(unsigned int *)(a3 + 4);
      if ((v46 & 4) != 0)
      {
        if (!(_DWORD)v48)
          goto LABEL_109;
        v49 = *v47 - 48;
        if (v49 > 9 || v48 >= 2 && *v47 == 48)
          goto LABEL_109;
        v63 = v47 + 1;
        v64 = v48 - 1;
        while (v64)
        {
          if (v49 <= 0x19999999)
          {
            v65 = *v63 - 48;
            if (v65 <= 9)
            {
              v22 = __CFADD__(v65, 10 * v49);
              v49 = v65 + 10 * v49;
              ++v63;
              --v64;
              if (!v22)
                continue;
            }
          }
          goto LABEL_109;
        }
      }
      else
      {
        if (!(_DWORD)v48)
          goto LABEL_109;
        v49 = *(unsigned __int16 *)v47 - 48;
        if (v49 > 9 || v48 >= 2 && *(_WORD *)v47 == 48)
          goto LABEL_109;
        v50 = (unsigned __int16 *)(v47 + 2);
        v51 = v48 - 1;
        while (v51)
        {
          if (v49 <= 0x19999999)
          {
            v52 = *v50 - 48;
            if (v52 <= 9)
            {
              v22 = __CFADD__(v52, 10 * v49);
              v49 = v52 + 10 * v49;
              ++v50;
              --v51;
              if (!v22)
                continue;
            }
          }
          goto LABEL_109;
        }
      }
      if (v49 != -1 && (JSC::JSObject::getOwnPropertySlotByIndex() & 1) != 0)
        goto LABEL_225;
    }
  }
LABEL_109:
  v66 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
  if (!v66)
    v66 = *(_QWORD *)(a1 + 16);
  if ((v66 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v66 + 5) < 0x17u)
    goto LABEL_136;
  v180 = (JSC::VM *)(a3 >> 4);
  v67 = (_BYTE *)(v66 + 6);
  if ((*(_BYTE *)(v66 + 6) & 8) == 0)
  {
    v179 = *(_QWORD *)(a2 + 56);
    v68 = v66;
    while (1)
    {
      v69 = 16 * (*(_DWORD *)v68 & 0xFFFFFFFE);
      if ((_DWORD)v180)
      {
        if ((v180 & ~*(_DWORD *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x20)) == 0)
        {
          v70 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE)), (JSC::VM *)v179);
          if (v70)
          {
            v195 = (WTF::StringImpl *)a3;
            v71 = JSC::PropertyTable::get(v70, (uint64_t *)&v195);
            v45 = v71;
            if ((_DWORD)v71 != -1)
              break;
          }
        }
      }
      if ((*v67 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_225;
      v72 = *(_QWORD *)(v69 + 48);
      if (!v72)
        v72 = *(_QWORD *)(v68 + 16);
      if ((v72 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v72 + 5) < 0x17u)
      {
        if (!a3)
          goto LABEL_136;
        v73 = *(_DWORD *)(a3 + 16);
        if ((v73 & 0x20) != 0)
          goto LABEL_136;
        v74 = *(_WORD **)(a3 + 8);
        v75 = *(unsigned int *)(a3 + 4);
        if ((v73 & 4) == 0)
        {
          if (!(_DWORD)v75 || (v76 = (unsigned __int16)*v74 - 48, v76 > 9))
          {
LABEL_133:
            v77 = 0;
            LOBYTE(v76) = 0;
            goto LABEL_134;
          }
          if (v75 >= 2 && *v74 == 48)
          {
            v77 = 0;
LABEL_134:
            v78 = 0;
          }
          else
          {
            v105 = v74 + 1;
            v106 = v75 - 1;
            while (v106)
            {
              if (v76 <= 0x19999999)
              {
                v107 = *v105 - 48;
                if (v107 <= 9)
                {
                  v22 = __CFADD__(v107, 10 * v76);
                  v76 = v107 + 10 * v76;
                  ++v105;
                  --v106;
                  if (!v22)
                    continue;
                }
              }
              goto LABEL_133;
            }
            v108 = v76 == -1;
            v78 = v76 & 0xFFFFFF00;
            v77 = 0x100000000;
            if (v76 == -1)
            {
              v77 = 0;
              LOBYTE(v76) = 0;
            }
            if (v108)
              v78 = 0;
          }
          v76 = v76;
          if ((v77 & 0x100000000) == 0)
          {
LABEL_136:
            v79 = 0;
            v57 = v39;
            v39 = 0;
            goto LABEL_144;
          }
LABEL_264:
          v121 = v78 | v76;
          v181 = *(JSC::VM **)(a2 + 56);
          while (2)
          {
            v122 = 16 * (*(_DWORD *)v66 & 0xFFFFFFFE);
            v123 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *))(16
                                                                                            * *(unsigned int *)(v122 + 0x4C)
                                                                                            + 0x70))(v66, a2, v121, &v183);
            if (*((_DWORD *)v181 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v181) & 1) != 0)
              goto LABEL_136;
            if ((v123 & 1) != 0)
              goto LABEL_225;
            v124 = BYTE2(v189);
            if (BYTE2(v189) == 3)
            {
              if (v190)
                goto LABEL_136;
              v125 = *(unsigned __int8 *)(v66 + 5);
              if (v125 != 61)
                goto LABEL_274;
              goto LABEL_281;
            }
            v125 = *(unsigned __int8 *)(v66 + 5);
            if (v125 == 61)
            {
              if (BYTE2(v189) == 1)
                goto LABEL_136;
            }
            else
            {
LABEL_274:
              if ((v125 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v66 + 40) & 7u) > 2)
                {
                  LOBYTE(v195) = 0;
                  v196 = 0;
                  v128 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v66, (WTF *)&v195);
                  if (v129)
                    v126 = v128;
                  else
                    v126 = 0;
                }
                else
                {
                  v126 = *(_QWORD *)(v66 + 24);
                }
                if (v126 <= v121)
                  goto LABEL_136;
                v124 = BYTE2(v189);
              }
            }
            if ((*(_WORD *)(v122 + 12) & 0x800) != 0 && v124 != 3)
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v127 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v66 & 0xFFFFFFFE)
                                                                                     + 0x4C)
                                                                   + 0xB0))(v66, a2);
              }
              else
              {
                v127 = *(_QWORD *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE) + 0x30);
                if (!v127)
                  v127 = *(_QWORD *)(v66 + 16);
              }
              if (*((_DWORD *)v181 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v181) & 1) != 0)
                goto LABEL_136;
            }
            else
            {
LABEL_281:
              v127 = *(_QWORD *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE) + 0x30);
              if (!v127)
                v127 = *(_QWORD *)(v66 + 16);
            }
            if ((v127 & 0xFFFE000000000002) != 0)
              goto LABEL_136;
            v66 = v127;
            if (*(unsigned __int8 *)(v127 + 5) <= 0x16u)
              goto LABEL_136;
            continue;
          }
        }
        if ((_DWORD)v75)
        {
          v119 = *(unsigned __int8 *)v74 - 48;
          if (v119 <= 9 && (v75 < 2 || *(_BYTE *)v74 != 48))
          {
            v176 = v75 - 1;
            v177 = (unsigned __int8 *)v74 + 1;
            while (v176)
            {
              if (v119 > 0x19999999)
                goto LABEL_261;
              v178 = *v177 - 48;
              if (v178 > 9)
                goto LABEL_261;
              v76 = 0;
              LOBYTE(v75) = 0;
              v120 = 0;
              v22 = __CFADD__(v178, 10 * v119);
              v119 = v178 + 10 * v119;
              --v176;
              ++v177;
              if (v22)
                goto LABEL_263;
            }
            if (v119 == -1)
              v76 = 0;
            else
              v76 = v119 & 0xFFFFFF00;
            if (v119 == -1)
              LOBYTE(v75) = 0;
            else
              LOBYTE(v75) = v119;
            if (v119 == -1)
              v120 = 0;
            else
              v120 = 0x100000000;
LABEL_263:
            v78 = v75;
            if ((v120 & 0x100000000) == 0)
              goto LABEL_136;
            goto LABEL_264;
          }
LABEL_261:
          v76 = 0;
          LOBYTE(v75) = 0;
        }
        else
        {
          v76 = 0;
        }
        v120 = 0;
        goto LABEL_263;
      }
      v67 = (_BYTE *)(v72 + 6);
      v68 = v72;
      if ((*(_BYTE *)(v72 + 6) & 8) != 0)
        goto LABEL_233;
    }
    v53 = HIDWORD(v71);
    if ((int)v71 > 63)
    {
      v80 = *(_QWORD *)(v68 + 8) - 8;
      v81 = 0x3F00000000 - (v71 << 32);
    }
    else
    {
      v80 = v68 + 16;
      v81 = v71 << 32;
    }
    v82 = *(_QWORD *)(v80 + (v81 >> 29));
    if ((v82 & 0xFFFE000000000002) != 0)
      goto LABEL_142;
    v83 = *(unsigned __int8 *)(v82 + 5);
    if (v83 != 6)
    {
      if (v83 == 5)
        goto LABEL_224;
LABEL_142:
      v57 = 0;
      v183 = v82;
      v187 = v68;
      goto LABEL_143;
    }
    v58 = *(_DWORD *)(v69 + 16) & 3;
    v109 = *(_QWORD *)(v82 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v82 & 0xFFFFFFFE) + 0x4C))
    {
      v61 = *(_QWORD *)(v82 + 24);
      v60 = *(_QWORD *)(v82 + 32);
      v183 = *(_QWORD *)(v82 + 8);
      v184 = v109;
      LODWORD(v185) = HIDWORD(v71);
      v187 = v68;
      goto LABEL_221;
    }
    v183 = *(_QWORD *)(v82 + 8);
    v184 = v109;
    LODWORD(v185) = HIDWORD(v71);
    v187 = v68;
    goto LABEL_248;
  }
  v72 = v66;
LABEL_233:
  if (!a3)
    goto LABEL_324;
  v110 = *(_DWORD *)(a3 + 16);
  if ((v110 & 0x20) != 0)
    goto LABEL_324;
  v111 = *(_BYTE **)(a3 + 8);
  v112 = *(unsigned int *)(a3 + 4);
  if ((v110 & 4) != 0)
  {
    if (!(_DWORD)v112)
      goto LABEL_324;
    v113 = *v111 - 48;
    if (v113 > 9 || v112 >= 2 && *v111 == 48)
      goto LABEL_324;
    v133 = v111 + 1;
    v134 = v112 - 1;
    while (v134)
    {
      if (v113 <= 0x19999999)
      {
        v135 = *v133 - 48;
        if (v135 <= 9)
        {
          v22 = __CFADD__(v135, 10 * v113);
          v113 = v135 + 10 * v113;
          ++v133;
          --v134;
          if (!v22)
            continue;
        }
      }
      goto LABEL_324;
    }
  }
  else
  {
    if (!(_DWORD)v112)
      goto LABEL_324;
    v113 = *(unsigned __int16 *)v111 - 48;
    if (v113 > 9 || v112 >= 2 && *(_WORD *)v111 == 48)
      goto LABEL_324;
    v114 = (unsigned __int16 *)(v111 + 2);
    v115 = v112 - 1;
    while (v115)
    {
      if (v113 <= 0x19999999)
      {
        v116 = *v114 - 48;
        if (v116 <= 9)
        {
          v22 = __CFADD__(v116, 10 * v113);
          v113 = v116 + 10 * v113;
          ++v114;
          --v115;
          if (!v22)
            continue;
        }
      }
      goto LABEL_324;
    }
  }
  if (v113 != -1)
  {
    v159 = v113;
    v182 = *(JSC::VM **)(a2 + 56);
    while (1)
    {
      v160 = 16 * (*(_DWORD *)v66 & 0xFFFFFFFE);
      v161 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *))(16
                                                                                      * *(unsigned int *)(v160 + 0x4C)
                                                                                      + 0x70))(v66, a2, v159, &v183);
      v162 = v161;
      if (*((_DWORD *)v182 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v182);
        if (((hasExceptionsAfterHandlingTraps | v162) & 1) != 0)
        {
          if (!hasExceptionsAfterHandlingTraps)
            goto LABEL_225;
          goto LABEL_136;
        }
      }
      else if ((v161 & 1) != 0)
      {
        goto LABEL_225;
      }
      v163 = BYTE2(v189);
      if (BYTE2(v189) == 3)
      {
        if (v190)
          goto LABEL_136;
        v164 = *(unsigned __int8 *)(v66 + 5);
        if (v164 == 61)
        {
LABEL_414:
          v166 = *(_QWORD *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE) + 0x30);
          if (!v166)
            v166 = *(_QWORD *)(v66 + 16);
          goto LABEL_416;
        }
      }
      else
      {
        v164 = *(unsigned __int8 *)(v66 + 5);
        if (v164 == 61)
        {
          if (BYTE2(v189) == 1)
            goto LABEL_136;
          goto LABEL_412;
        }
      }
      if ((v164 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v66 + 40) & 7u) > 2)
        {
          LOBYTE(v195) = 0;
          v196 = 0;
          v168 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v66, (WTF *)&v195);
          if (v169)
            v165 = v168;
          else
            v165 = 0;
        }
        else
        {
          v165 = *(_QWORD *)(v66 + 24);
        }
        if (v165 <= v159)
          goto LABEL_136;
        v163 = BYTE2(v189);
      }
LABEL_412:
      if ((*(_WORD *)(v160 + 12) & 0x800) == 0 || v163 == 3)
        goto LABEL_414;
      if ((*(_WORD *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v166 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0xB0))(v66, a2);
      }
      else
      {
        v166 = *(_QWORD *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE) + 0x30);
        if (!v166)
          v166 = *(_QWORD *)(v66 + 16);
      }
      if (*((_DWORD *)v182 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v182) & 1) != 0)
        goto LABEL_136;
LABEL_416:
      if ((v166 & 0xFFFE000000000002) == 0)
      {
        v66 = v166;
        if (*(unsigned __int8 *)(v166 + 5) > 0x16u)
          continue;
      }
      goto LABEL_136;
    }
  }
LABEL_324:
  v136 = *(JSC::VM **)(a2 + 56);
  v137 = a3 >> 4;
  while (1)
  {
    v138 = 16 * (*(_DWORD *)v72 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v72 + 6) & 8) != 0)
    {
      v143 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0x68))(v72, a2, a3, &v183);
      if (*((_DWORD *)v136 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v136) & 1) != 0)
        goto LABEL_136;
      if ((v143 & 1) != 0)
        goto LABEL_225;
      if (BYTE2(v189) == 3)
      {
        if (v190)
          goto LABEL_136;
        v144 = *(unsigned __int8 *)(v72 + 5);
        if (v144 == 61)
          goto LABEL_331;
      }
      else
      {
        v144 = *(unsigned __int8 *)(v72 + 5);
        if (v144 == 61)
        {
          if (BYTE2(v189) == 1)
            goto LABEL_136;
          goto LABEL_331;
        }
      }
      if (!a3)
        goto LABEL_331;
      if ((v144 - 50) < 0xFFFFFFF5)
        goto LABEL_331;
      v145 = *(_DWORD *)(a3 + 16);
      if ((v145 & 0x20) != 0)
        goto LABEL_331;
      v146 = *(unsigned int *)(a3 + 4);
      if (!(_DWORD)v146)
        goto LABEL_331;
      v147 = *(unsigned __int8 **)(a3 + 8);
      if ((v145 & 4) != 0)
      {
        v148 = *v147;
        if ((_DWORD)v146 == 1)
        {
LABEL_366:
          if ((v148 - 48) < 0xA)
            goto LABEL_136;
          goto LABEL_331;
        }
        if (v148 == 45)
        {
          v149 = v147[1];
LABEL_370:
          if ((v149 - 48) >= 0xA)
          {
            if ((_DWORD)v146 != 9 || v149 != 73)
              goto LABEL_331;
          }
          else if ((_DWORD)v146 == 2)
          {
            goto LABEL_136;
          }
LABEL_381:
          v179 = v179 & 0xFFFFFF0000000000 | v146 | ((unint64_t)((v145 >> 2) & 1) << 32);
          JSC::jsToNumber();
          v151 = (const WTF::StringImpl *)WTF::numberToString();
          if ((WTF::equal((WTF *)a3, v151, v152) & 1) != 0)
            goto LABEL_136;
          goto LABEL_331;
        }
      }
      else
      {
        v148 = *(unsigned __int16 *)v147;
        if ((_DWORD)v146 == 1)
          goto LABEL_366;
        if (v148 == 45)
        {
          v149 = *((unsigned __int16 *)v147 + 1);
          goto LABEL_370;
        }
      }
      if ((v148 - 48) >= 0xA && ((_DWORD)v146 != 8 || v148 != 73) && ((_DWORD)v146 != 3 || v148 != 78))
        goto LABEL_331;
      goto LABEL_381;
    }
    if (v137)
    {
      if ((v137 & ~*(_DWORD *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v139 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE)), v136);
        if (v139)
        {
          v195 = (WTF::StringImpl *)a3;
          v140 = JSC::PropertyTable::get(v139, (uint64_t *)&v195);
          v45 = v140;
          if ((_DWORD)v140 != -1)
            break;
        }
      }
    }
    if ((*(_BYTE *)(v72 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      goto LABEL_225;
LABEL_331:
    if ((*(_WORD *)(v138 + 12) & 0x800) != 0)
    {
      v141 = *(_DWORD *)v72;
      if (BYTE2(v189) != 3)
      {
        v150 = 16 * (v141 & 0xFFFFFFFE);
        if ((*(_WORD *)(v150 + 12) & 0x800) != 0)
        {
          v142 = (*(uint64_t (**)(uint64_t, uint64_t))(16 * *(unsigned int *)(v150 + 76) + 0xB0))(v72, a2);
        }
        else
        {
          v142 = *(_QWORD *)(v150 + 48);
          if (!v142)
            v142 = *(_QWORD *)(v72 + 16);
        }
        if (*((_DWORD *)v136 + 20))
        {
          v153 = JSC::VM::hasExceptionsAfterHandlingTraps(v136);
          v137 = a3 >> 4;
          if ((v153 & 1) != 0)
            goto LABEL_136;
        }
        else
        {
          v137 = a3 >> 4;
        }
        goto LABEL_335;
      }
    }
    else
    {
      v141 = *(_DWORD *)v72;
    }
    v142 = *(_QWORD *)(16 * (v141 & 0xFFFFFFFE) + 0x30);
    v137 = a3 >> 4;
    if (!v142)
      v142 = *(_QWORD *)(v72 + 16);
LABEL_335:
    if ((v142 & 0xFFFE000000000002) == 0)
    {
      v72 = v142;
      if (*(unsigned __int8 *)(v142 + 5) > 0x16u)
        continue;
    }
    goto LABEL_136;
  }
  v53 = HIDWORD(v140);
  if ((int)v140 > 63)
  {
    v154 = *(_QWORD *)(v72 + 8) - 8;
    v155 = 0x3F00000000 - (v140 << 32);
  }
  else
  {
    v154 = v72 + 16;
    v155 = v140 << 32;
  }
  v156 = *(_QWORD *)(v154 + (v155 >> 29));
  if ((v156 & 0xFFFE000000000002) != 0)
  {
LABEL_391:
    v57 = 0;
    v183 = v156;
    v187 = v72;
    goto LABEL_143;
  }
  v157 = *(unsigned __int8 *)(v156 + 5);
  if (v157 == 6)
  {
    v58 = *(_DWORD *)(v138 + 16) & 3;
    v158 = *(_QWORD *)(v156 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v156 & 0xFFFFFFFE) + 0x4C))
    {
      v61 = *(_QWORD *)(v156 + 24);
      v60 = *(_QWORD *)(v156 + 32);
      v183 = *(_QWORD *)(v156 + 8);
      v184 = v158;
      LODWORD(v185) = HIDWORD(v140);
      v187 = v72;
      goto LABEL_221;
    }
    v183 = *(_QWORD *)(v156 + 8);
    v184 = v158;
    LODWORD(v185) = HIDWORD(v140);
    v187 = v72;
    goto LABEL_248;
  }
  if (v157 != 5)
    goto LABEL_391;
LABEL_224:
  JSC::JSObject::fillGetterPropertySlot();
LABEL_225:
  v57 = 0;
  v79 = 1;
LABEL_144:
  if (v192)
  {
    v84 = *((_DWORD *)v191 + 1);
    if (!v84)
    {
      __break(0xC471u);
      JUMPOUT(0x194FB5C70);
    }
    *((_DWORD *)v191 + 1) = v84 - 1;
  }
  if (!v39)
  {
LABEL_150:
    if ((v79 & 1) == 0)
      goto LABEL_188;
LABEL_151:
    if (!(a3 >> 4)
      || (v24 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v24 + 0x20)) != 0)
      || (v85 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56))) == 0|| (v195 = (WTF::StringImpl *)a3, v26 = JSC::PropertyTable::get(v85, (uint64_t *)&v195), (_DWORD)v26 == -1))
    {
      if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      {
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot();
        v18 = OwnStaticPropertySlot;
        if (!a3 || (OwnStaticPropertySlot & 1) != 0)
          return v18;
      }
      else if (!a3)
      {
        return 0;
      }
      v86 = *(_DWORD *)(a3 + 16);
      if ((v86 & 0x20) == 0)
      {
        v87 = *(_BYTE **)(a3 + 8);
        v88 = *(unsigned int *)(a3 + 4);
        if ((v86 & 4) != 0)
        {
          if ((_DWORD)v88)
          {
            v117 = *v87 - 48;
            if (v117 > 9 || v88 >= 2 && *v87 == 48)
            {
LABEL_254:
              v118 = 0;
            }
            else
            {
              v173 = v87 + 1;
              v174 = v88 - 1;
              while (v174)
              {
                if (v117 > 0x19999999)
                  goto LABEL_254;
                v175 = *v173 - 48;
                if (v175 > 9)
                  goto LABEL_254;
                v118 = 0;
                v22 = __CFADD__(v175, 10 * v117);
                v117 = v175 + 10 * v117;
                ++v173;
                --v174;
                if (v22)
                  goto LABEL_255;
              }
              v118 = 0x100000000;
              if (v117 == -1)
                v118 = 0;
            }
          }
          else
          {
            v118 = 0;
          }
LABEL_255:
          if ((v118 & 0x100000000) != 0)
            return JSC::JSObject::getOwnPropertySlotByIndex();
        }
        else
        {
          if ((_DWORD)v88)
          {
            v89 = *(unsigned __int16 *)v87 - 48;
            if (v89 > 9 || v88 >= 2 && *(_WORD *)v87 == 48)
            {
LABEL_163:
              v90 = 0;
            }
            else
            {
              v95 = (unsigned __int16 *)(v87 + 2);
              v96 = v88 - 1;
              while (v96)
              {
                if (v89 <= 0x19999999)
                {
                  v97 = *v95 - 48;
                  if (v97 <= 9)
                  {
                    v22 = __CFADD__(v97, 10 * v89);
                    v89 = v97 + 10 * v89;
                    ++v95;
                    --v96;
                    if (!v22)
                      continue;
                  }
                }
                goto LABEL_163;
              }
              v23 = v89 == -1;
              v90 = 0x100000000;
              if (v23)
                v90 = 0;
            }
          }
          else
          {
            v90 = 0;
          }
          if ((v90 & 0x100000000) != 0)
            return JSC::JSObject::getOwnPropertySlotByIndex();
        }
      }
      return 0;
    }
LABEL_168:
    if ((int)v26 > 63)
    {
      v91 = *(_QWORD *)(a1 + 8) - 8;
      v92 = 0x3F00000000 - (v26 << 32);
    }
    else
    {
      v91 = a1 + 16;
      v92 = v26 << 32;
    }
    v93 = *(_QWORD *)(v91 + (v92 >> 29));
    if ((v93 & 0xFFFE000000000002) != 0)
      goto LABEL_173;
    v94 = *(unsigned __int8 *)(v93 + 5);
    if (v94 == 6)
    {
      v100 = *(_DWORD *)(v24 + 16) & 3;
      v102 = *(_QWORD *)(v93 + 8);
      v101 = *(_QWORD *)(v93 + 16);
      if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0x4C))
      {
        v104 = *(_QWORD *)(v93 + 24);
        v103 = *(_QWORD *)(v93 + 32);
        *(_QWORD *)a4 = v102;
        *(_QWORD *)(a4 + 8) = v101;
        *(_DWORD *)(a4 + 16) = HIDWORD(v26);
        *(_QWORD *)(a4 + 32) = a1;
        *(_BYTE *)(a4 + 49) = 3;
        v18 = 1;
        if (v100 != 2)
          *(_BYTE *)(a4 + 48) = 1;
        *(_BYTE *)(a4 + 51) = 1;
        *(_QWORD *)(a4 + 72) = v104;
        *(_QWORD *)(a4 + 80) = v103;
      }
      else
      {
        *(_QWORD *)a4 = v102;
        *(_QWORD *)(a4 + 8) = v101;
        *(_DWORD *)(a4 + 16) = HIDWORD(v26);
        *(_QWORD *)(a4 + 32) = a1;
        v18 = 1;
        *(_BYTE *)(a4 + 49) = 3;
        if (v100 != 2)
          *(_BYTE *)(a4 + 48) = 1;
      }
      return v18;
    }
    if (v94 != 5)
    {
LABEL_173:
      *(_QWORD *)a4 = v93;
      *(_QWORD *)(a4 + 32) = a1;
      *(_DWORD *)(a4 + 16) = HIDWORD(v26);
      *(_DWORD *)(a4 + 20) = v26;
      v18 = 1;
      *(_WORD *)(a4 + 48) = 257;
      return v18;
    }
    JSC::JSObject::fillGetterPropertySlot();
    return 1;
  }
  if (v39[2] != 1)
  {
    --v39[2];
    goto LABEL_150;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
  if ((v79 & 1) != 0)
    goto LABEL_151;
LABEL_188:
  if (v57)
    v99 = WebCore::wrap<WebCore::CSSStyleSheet>(a2, *(JSC::VM **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), (uint64_t)v57);
  else
    v99 = 2;
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
  {
    v18 = 0;
    if (!v57)
      return v18;
  }
  else
  {
    *(_QWORD *)a4 = v99;
    *(_DWORD *)(a4 + 16) = 2;
    *(_QWORD *)(a4 + 32) = a1;
    v18 = 1;
    *(_BYTE *)(a4 + 49) = 1;
    if (!v57)
      return v18;
  }
  if (v57[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v57 + 8))(v57);
  else
    --v57[2];
  return v18;
}

unint64_t WebCore::jsStyleSheetListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSStyleSheetListPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheetList>,(WebCore::DOMConstructorID)373>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsStyleSheetList_length(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  unsigned int v3;

  v3 = WebCore::StyleSheetList::length(*(WebCore::StyleSheetList **)(a2 + 24), a2, a3);
  if ((v3 & 0x80000000) != 0)
    return COERCE__INT64((double)v3) + 0x2000000000000;
  else
    return v3 | 0xFFFE000000000000;
}

uint64_t WebCore::JSStyleSheetListOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF::ConcurrentPtrHashSet *v9;
  _DWORD *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if (!a5)
        goto LABEL_4;
LABEL_15:
      *a5 = "Reachable from StyleSheetList ownerNode";
      a5[1] = 40;
      if (!v7)
        goto LABEL_5;
      goto LABEL_16;
    }
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (a5)
    goto LABEL_15;
LABEL_4:
  if (!v7)
  {
LABEL_5:
    v8 = 0;
    goto LABEL_6;
  }
LABEL_16:
  if ((*(_BYTE *)(v7 + 22) & 8) == 0)
  {
    while (1)
    {
      v8 = (void *)v7;
      if ((*(_WORD *)(v7 + 28) & 0x80) != 0)
      {
        v20 = *(_QWORD *)(v7 + 200);
        if (!v20)
          goto LABEL_6;
        v19 = (uint64_t *)(v20 + 8);
      }
      else
      {
        v19 = (uint64_t *)(v7 + 32);
      }
      v7 = *v19;
      if (!v7)
        goto LABEL_6;
    }
  }
  v8 = *(void **)(*(_QWORD *)(v7 + 40) + 8);
LABEL_6:
  v9 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v10 = (_DWORD *)*((_QWORD *)v9 + 6);
  if ((_DWORD *)((char *)v9 + 56) == v10)
  {
    v21 = a4;
    v22 = v8;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v9, v8);
    a4 = v21;
    v8 = v22;
    if ((_DWORD)result)
    {
LABEL_24:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v8);
      return 1;
    }
  }
  else
  {
    v11 = v10[1];
    v12 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = v15;
    while (1)
    {
      v17 = *(void **)&v10[2 * v16 + 4];
      if (!v17)
        return 0;
      if (v17 == v8)
        goto LABEL_24;
      v16 = (v16 + 1) & v11;
      if (v16 == v15)
      {
        __break(0xC471u);
        JUMPOUT(0x194FB687CLL);
      }
    }
  }
  return result;
}

void WebCore::JSStyleSheetListOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::StyleSheetList *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::StyleSheetList *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::StyleSheetList **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::StyleSheetList **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::StyleSheetList **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::StyleSheetList::~StyleSheetList(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::StyleSheetList>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *Allocator;
  unint64_t v38;
  _QWORD *v39;
  WTF *v40;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = WebCore::getDOMStructure<WebCore::JSStyleSheetList>(*(WebCore::JSStyleSheetList **)(a2 + 56), (JSC::JSCell **)a2);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(v16 + 41456);
  v18 = *(_QWORD *)(v17 + 23536);
  v19 = *(_QWORD **)(v18 + 3032);
  if (!v19)
  {
    v20 = *(_QWORD *)(v17 + 22648);
    if (__ldaxr((unsigned __int8 *)v20))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v20))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v20);
LABEL_14:
    v22 = *(_QWORD *)(v20 + 2824);
    if (!*(_QWORD *)(v22 + 3032))
    {
      v23 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v40, "IsoSpace T");
      v39 = 0;
      MEMORY[0x19AEA3204](v23, &v40, v16 + 192, v16 + 1872, 32, 8, &v39);
      v25 = (uint64_t)v39;
      v39 = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      v26 = v40;
      v40 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, v24);
        else
          --*(_DWORD *)v26;
      }
      v27 = *(_QWORD *)(v22 + 3032);
      *(_QWORD *)(v22 + 3032) = v23;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v29 = *(_QWORD *)(v18 + 3032);
    *(_QWORD *)(v18 + 3032) = v19;
    if (v29)
    {
      v30 = (WTF *)MEMORY[0x19AEA3528](v29, v28);
      WTF::fastFree(v30, v31);
    }
    v32 = __ldxr((unsigned __int8 *)v20);
    if (v32 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
  }
LABEL_29:
  SlowCase = v19[3];
  if (SlowCase >= v19[4])
  {
    SlowCase = v19[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_31;
    }
    v38 = *(_QWORD *)(SlowCase + 8) ^ v19[6];
    v19[4] = SlowCase + HIDWORD(v38);
    v19[5] = SlowCase + (int)v38;
  }
  v19[3] = SlowCase + 32;
LABEL_31:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v33 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336AA0 & 1) == 0)
  {
    qword_1EE336A98 = (uint64_t)&off_1E3307ED0;
    byte_1EE336AA0 = 1;
  }
  v40 = a3;
  if ((SlowCase & 8) != 0)
    v34 = (SlowCase - 112) | 1;
  else
    v34 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v34 & 1) != 0)
    v35 = v34 + 47;
  else
    v35 = *(_QWORD *)v34 + 32;
  Allocator = *(_QWORD **)(v35 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v35 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336A98;
  Allocator[2] = v33;
  v39 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v33 + 32), (uint64_t *)&v40, (uint64_t *)&v39);
  if (v39)
    v39[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSStyleSheetList::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSStyleSheetList::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSStyleSheetList::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSSubmitEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v2;
  uint64_t v3;
  JSC::VM *v5;
  uint64_t v7;
  int v8;
  JSC::JSCell *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t Object;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  double v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  WebCore::JSDOMGlobalObject *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  JSC::VM *v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char **v47;
  int v48;
  unint64_t v49;
  WebCore::JSEvent *v50;
  JSC::JSCell *v51;
  unint64_t Structure;
  JSC::Structure *v53;
  JSC::JSCell *v54;
  uint64_t v55;
  JSCell *v56;
  JSC::JSCell *v57;
  JSC::JSGlobalObject *v58;
  JSC::JSObject *v59;
  JSC::JSGlobalObject *v60;
  JSC::VM *v61;
  JSC::JSObject *v62;
  JSC::Structure *v63;
  JSC::VM *FunctionRealm;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char **v71;
  int v72;
  JSC::JSCell *v73;
  unint64_t v74;
  JSC::Structure *v75;
  JSC::JSCell *v76;
  uint64_t v77;
  unint64_t SubclassStructure;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v82;
  _BOOL4 v83;
  uint64_t v84;
  JSValue v86;
  BOOL v87;
  int v88;
  uint64_t v89;
  int *v90;
  int v91;
  BOOL v92;
  int v93;
  uint64_t v94;
  int *v95;
  int v96;
  BOOL v97;
  int v98;
  uint64_t v99;
  int *v100;
  int v101;
  JSC::VM *v102;
  _BYTE v103[8];
  uint64_t v104;
  int v105;
  WTF::StringImpl *v106;
  int v107;
  JSC::VM *v108;
  unint64_t v109;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v86.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v5, a1, v86);
  }
  v7 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v106);
  v8 = v107;
  if (v107)
  {
    v56 = 0;
    goto LABEL_89;
  }
  v102 = v5;
  if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    goto LABEL_48;
  }
  v9 = *(JSC::JSCell **)(a2 + 56);
  v2 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v108 = v2;
  if (((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v9)) == 0)
    {
LABEL_110:
      JSC::throwTypeError();
LABEL_111:
      v56 = 0;
      v80 = 1;
      v105 = 1;
      goto LABEL_88;
    }
    v3 = Object;
    WTF::AtomStringImpl::addLiteral();
    v15 = (WTF::StringImpl *)v109;
    v13 = JSC::JSObject::get((JSC::Structure *)v3, a1, v109);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
      goto LABEL_111;
    if (v13 == 10)
    {
      v10 = 0;
      goto LABEL_20;
    }
    v17 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v13 >= 0xFFFE000000000000)
      goto LABEL_136;
    *(_QWORD *)&v18 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v18 <= 0.0)
      {
        v10 = v18 < 0.0;
        goto LABEL_19;
      }
    }
    else
    {
      if ((v13 & 0xFFFE000000000002) != 0)
      {
        v10 = v13 == 7;
        goto LABEL_19;
      }
      v88 = *(unsigned __int8 *)(v13 + 5);
      if (v88 == 3)
      {
        v91 = *(_DWORD *)(v13 + 8);
LABEL_164:
        v87 = v91 == 0;
        goto LABEL_176;
      }
      if (v88 == 2)
      {
        v89 = *(_QWORD *)(v13 + 8);
        if ((v89 & 1) != 0)
          v90 = (int *)(v13 + 16);
        else
          v90 = (int *)(v89 + 4);
        v91 = *v90;
        goto LABEL_164;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v87 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_176;
      }
    }
    v10 = 1;
    goto LABEL_19;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
LABEL_47:
  v13 = 0;
LABEL_48:
  while (1)
  {
    v103[0] = v10;
    v103[1] = v11;
    v103[2] = v12;
    v105 = 0;
    if (!v107)
      break;
    v17 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_136:
    v87 = (_DWORD)v13 == 0;
LABEL_176:
    v10 = !v87;
LABEL_19:
    if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
      goto LABEL_111;
LABEL_20:
    WTF::AtomStringImpl::addLiteral();
    v19 = (WTF::StringImpl *)v109;
    v21 = JSC::JSObject::get((JSC::Structure *)v3, a1, v109);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v20);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
      goto LABEL_111;
    if (v21 == 10)
    {
      v11 = 0;
      goto LABEL_31;
    }
    v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v21 >= 0xFFFE000000000000)
    {
      v92 = (_DWORD)v21 == 0;
      goto LABEL_180;
    }
    *(_QWORD *)&v23 = v21 - 0x2000000000000;
    if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v21 & 0xFFFE000000000002) != 0)
      {
        v11 = v21 == 7;
        goto LABEL_30;
      }
      v93 = *(unsigned __int8 *)(v21 + 5);
      if (v93 == 3)
      {
        v96 = *(_DWORD *)(v21 + 8);
      }
      else
      {
        if (v93 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_170:
            v11 = 1;
            goto LABEL_30;
          }
          v92 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_180;
        }
        v94 = *(_QWORD *)(v21 + 8);
        if ((v94 & 1) != 0)
          v95 = (int *)(v21 + 16);
        else
          v95 = (int *)(v94 + 4);
        v96 = *v95;
      }
      v92 = v96 == 0;
LABEL_180:
      v11 = !v92;
      goto LABEL_30;
    }
    if (v23 > 0.0)
      goto LABEL_170;
    v11 = v23 < 0.0;
LABEL_30:
    if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
      goto LABEL_111;
LABEL_31:
    WTF::AtomStringImpl::addLiteral();
    v24 = (WTF::StringImpl *)v109;
    v26 = JSC::JSObject::get((JSC::Structure *)v3, a1, v109);
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v25);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
      goto LABEL_111;
    if (v26 == 10)
    {
      v12 = 0;
      goto LABEL_42;
    }
    v27 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v26 >= 0xFFFE000000000000)
    {
      v97 = (_DWORD)v26 == 0;
      goto LABEL_184;
    }
    *(_QWORD *)&v28 = v26 - 0x2000000000000;
    if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v26 & 0xFFFE000000000002) != 0)
      {
        v12 = v26 == 7;
        goto LABEL_41;
      }
      v98 = *(unsigned __int8 *)(v26 + 5);
      if (v98 == 3)
      {
        v101 = *(_DWORD *)(v26 + 8);
      }
      else
      {
        if (v98 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_174:
            v12 = 1;
            goto LABEL_41;
          }
          v97 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_184;
        }
        v99 = *(_QWORD *)(v26 + 8);
        if ((v99 & 1) != 0)
          v100 = (int *)(v26 + 16);
        else
          v100 = (int *)(v99 + 4);
        v101 = *v100;
      }
      v97 = v101 == 0;
LABEL_184:
      v12 = !v97;
      goto LABEL_41;
    }
    if (v28 > 0.0)
      goto LABEL_174;
    v12 = v28 < 0.0;
LABEL_41:
    if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
      goto LABEL_111;
LABEL_42:
    WTF::AtomStringImpl::addLiteral();
    v29 = (WTF::StringImpl *)v109;
    v3 = JSC::JSObject::get((JSC::Structure *)v3, a1, v109);
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v30);
      else
        *(_DWORD *)v29 -= 2;
    }
    if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
      goto LABEL_111;
    if ((v3 | 8) == 0xA)
      goto LABEL_47;
    v109 = *((_QWORD *)a1 + 7);
    if ((v3 & 0xFFFE000000000002) != 0)
      goto LABEL_110;
    v82 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
    v83 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
    if ((_DWORD)v82)
    {
      v84 = 16 * v82;
      if ((char **)v84 != &WebCore::JSHTMLElement::s_info)
      {
        do
        {
          v84 = *(_QWORD *)(v84 + 16);
          v83 = v84 != 0;
        }
        while ((char **)v84 != &WebCore::JSHTMLElement::s_info && v84 != 0);
      }
    }
    if (!v83)
      goto LABEL_110;
    v13 = *(_QWORD *)(v3 + 24);
    if (!v13)
      goto LABEL_110;
    *(_DWORD *)(v13 + 24) += 2;
  }
  v31 = v106;
  v106 = 0;
  v104 = 0;
  v32 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v32);
  *(_QWORD *)(v32 + 8) = 0;
  if (v11)
    v36 = 4;
  else
    v36 = 0;
  if (v12)
    v37 = 8;
  else
    v37 = 0;
  if (v10)
    v38 = 3014658;
  else
    v38 = 3014656;
  v39 = v38 | v36 | v37 | (v31 != 0) | *(_DWORD *)(v32 + 20) & 0xFFC00000;
  *(_DWORD *)(v32 + 16) = 1;
  *(_DWORD *)(v32 + 20) = v39;
  if (v31)
  {
    *(_DWORD *)v31 += 2;
    v39 = *(_DWORD *)(v32 + 20);
  }
  *(_QWORD *)(v32 + 24) = v31;
  *(_QWORD *)(v32 + 32) = 0;
  *(_QWORD *)(v32 + 40) = 0;
  *(_QWORD *)(v32 + 48) = 0;
  *(_QWORD *)(v32 + 56) = v35;
  *(_DWORD *)(v32 + 20) = v39 | 0x4000;
  *(_QWORD *)v32 = off_1E33D9410;
  *(_QWORD *)(v32 + 64) = 0;
  *(_QWORD *)(v32 + 72) = v13;
  v109 = v32;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::destroy(v31, v33);
      if (*(void (***)(WebCore::SubmitEvent *__hidden))v32 != off_1E33D9410)
      {
        __break(0xC471u);
        JUMPOUT(0x194FB75E0);
      }
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v40 = *(JSC::VM **)(v7 + 40);
  v41 = *((_QWORD *)v40 + 412);
  if (!v41)
    goto LABEL_69;
  v42 = *(_DWORD *)(v41 - 8);
  v43 = ((unint64_t)&WebCore::JSSubmitEvent::s_info + ~((_QWORD)&WebCore::JSSubmitEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSubmitEvent::s_info + ~((_QWORD)&WebCore::JSSubmitEvent::s_info << 32)) >> 22);
  v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
  v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
  v46 = v42 & ((v45 >> 31) ^ v45);
  v47 = *(char ***)(v41 + 16 * v46);
  if (v47 == &WebCore::JSSubmitEvent::s_info)
  {
LABEL_68:
    v49 = *(_QWORD *)(v41 + 16 * v46 + 8);
    if (!v49)
      goto LABEL_69;
  }
  else
  {
    v48 = 1;
    while (v47)
    {
      v46 = ((_DWORD)v46 + v48) & v42;
      v47 = *(char ***)(v41 + 16 * v46);
      ++v48;
      if (v47 == &WebCore::JSSubmitEvent::s_info)
        goto LABEL_68;
    }
LABEL_69:
    v50 = (WebCore::JSEvent *)*((_QWORD *)v40 + 7);
    v51 = (JSC::JSCell *)WebCore::JSEvent::prototype(v50, *(JSC::VM **)(v7 + 40), v34);
    Structure = WebCore::JSSubmitEventPrototype::createStructure((uint64_t *)v50, (uint64_t)v40, v51);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v54 = (JSC::JSCell *)WebCore::JSSubmitEventPrototype::create(v50, v40, Structure, v53);
    v55 = WebCore::JSSubmitEvent::createStructure((uint64_t *)v50, (uint64_t)v40, v54);
    v49 = WebCore::cacheDOMStructure((JSCell *)v40, v55, (uint64_t)&WebCore::JSSubmitEvent::s_info);
  }
  v56 = (JSCell *)WebCore::JSSubmitEvent::create(v49, v40, (uint64_t *)&v109);
  WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v40 + 415), v32, (uint64_t)v56);
  v57 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v57 & 0xFFFE000000000002) == 0)
  {
    v58 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v57);
    if (v58)
    {
      v60 = v58;
      if (v58 != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v61 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v58, v59);
        if (!*((_DWORD *)v61 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v61) & 1) == 0)
        {
          v65 = *((_QWORD *)FunctionRealm + 412);
          if (v65)
          {
            v66 = *(_DWORD *)(v65 - 8);
            v67 = ((unint64_t)&WebCore::JSSubmitEvent::s_info + ~((_QWORD)&WebCore::JSSubmitEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSubmitEvent::s_info + ~((_QWORD)&WebCore::JSSubmitEvent::s_info << 32)) >> 22);
            v68 = 9 * ((v67 + ~(v67 << 13)) ^ ((v67 + ~(v67 << 13)) >> 8));
            v69 = (v68 ^ (v68 >> 15)) + ~((v68 ^ (v68 >> 15)) << 27);
            v70 = v66 & ((v69 >> 31) ^ v69);
            v71 = *(char ***)(v65 + 16 * v70);
            if (v71 == &WebCore::JSSubmitEvent::s_info)
            {
LABEL_79:
              v62 = *(JSC::JSObject **)(v65 + 16 * v70 + 8);
              if (v62)
              {
LABEL_81:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v60, v62, v63);
                if (!*((_DWORD *)v61 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v61) & 1) == 0)
                  JSC::JSObject::setStructure(v56, v61, SubclassStructure);
                goto LABEL_83;
              }
            }
            else
            {
              v72 = 1;
              while (v71)
              {
                v70 = ((_DWORD)v70 + v72) & v66;
                v71 = *(char ***)(v65 + 16 * v70);
                ++v72;
                if (v71 == &WebCore::JSSubmitEvent::s_info)
                  goto LABEL_79;
              }
            }
          }
          v73 = (JSC::JSCell *)WebCore::JSEvent::prototype(v61, FunctionRealm, v62);
          v74 = WebCore::JSSubmitEventPrototype::createStructure((uint64_t *)v61, (uint64_t)FunctionRealm, v73);
          *(_DWORD *)(v74 + 16) |= 0x80000u;
          v76 = (JSC::JSCell *)WebCore::JSSubmitEventPrototype::create(v61, FunctionRealm, v74, v75);
          v77 = WebCore::JSSubmitEvent::createStructure((uint64_t *)v61, (uint64_t)FunctionRealm, v76);
          v62 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v77, (uint64_t)&WebCore::JSSubmitEvent::s_info);
          goto LABEL_81;
        }
      }
    }
  }
LABEL_83:
  if (*((_DWORD *)v102 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v102) & 1) != 0)
    v56 = 0;
  v79 = (_DWORD *)v109;
  v109 = 0;
  if (v79)
  {
    if (v79[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v79 + 8))(v79);
    else
      --v79[4];
  }
  v80 = 0;
LABEL_88:
  ((void (*)(unint64_t *, _BYTE *))off_1E330BAF0[v80])(&v109, v103);
  v8 = v107;
LABEL_89:
  if (v8 != -1)
    ((void (*)(_BYTE *, WTF::StringImpl **))off_1E330AAE8[v8])(v103, &v106);
  return v56;
}

uint64_t WebCore::JSSubmitEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSubmitEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSubmitEventPrototype::create(WebCore::JSSubmitEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSSubmitEvent::s_info, (uint64_t)&WebCore::JSSubmitEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSubmitEvent>,(WebCore::DOMConstructorID)595>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4760);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSSubmitEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSubmitEvent::s_info + ~((_QWORD)&WebCore::JSSubmitEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSubmitEvent::s_info + ~((_QWORD)&WebCore::JSSubmitEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSubmitEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSubmitEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSubmitEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSubmitEventPrototype::create((WebCore::JSSubmitEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSubmitEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSubmitEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4760) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSubmitEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSubmitEventPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSubmitEvent>,(WebCore::DOMConstructorID)595>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSubmitEvent_submitter(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::HTMLElement *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 72);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::JSSubmitEvent::subspaceForImpl(WebCore::JSSubmitEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4832);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 4832))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 4832);
    *(_QWORD *)(v8 + 4832) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 4832);
  *(_QWORD *)(v3 + 4832) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::parseEnumeration<WebCore::CryptoKeyFormat>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  char **v13;
  int v16;
  int v17;
  uint64_t v21;
  unint64_t v22;

  v3 = a1;
  v22 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v22, a1);
    v4 = v21;
    if (v21)
      goto LABEL_7;
LABEL_54:
    v16 = 0;
    v17 = 0;
    return v16 | (v17 << 8);
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    goto LABEL_54;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  v8 = v6 != 3;
  if (v5 == "jwk" || v6 != 3)
  {
    if (v5 == "jwk" && v6 == 3)
      goto LABEL_42;
    if (v5 == "pkcs8" || v6 != 5)
    {
      if (v5 != "pkcs8")
      {
        v11 = *(_DWORD *)(v4 + 4);
        goto LABEL_14;
      }
      v11 = *(_DWORD *)(v4 + 4);
      if (v6 != 5)
        goto LABEL_14;
LABEL_41:
      v13 = &off_1E33077B8;
      goto LABEL_46;
    }
    if ((_DWORD)v7)
    {
      if (*v5 == 112 && *(_WORD *)(v5 + 1) == 25451 && *(_WORD *)(v5 + 3) == 14451)
        goto LABEL_41;
    }
    else if (*(_WORD *)v5 == 112 && *(_QWORD *)(v5 + 2) == 0x3800730063006BLL)
    {
      goto LABEL_41;
    }
    v11 = 5;
    goto LABEL_14;
  }
  if (!(_DWORD)v7)
  {
    if (*(_WORD *)v5 != 106)
      goto LABEL_13;
    v9 = *(_DWORD *)(v5 + 2);
    v10 = 7012471;
LABEL_12:
    if (v9 != v10)
      goto LABEL_13;
LABEL_42:
    v13 = &WebCore::parseEnumerationFromString<WebCore::CryptoKeyFormat>(WTF::String const&)::mappings;
    goto LABEL_46;
  }
  if (*v5 == 106)
  {
    v9 = *(unsigned __int16 *)(v5 + 1);
    v10 = 27511;
    goto LABEL_12;
  }
LABEL_13:
  v8 = 0;
  v11 = 3;
LABEL_14:
  if (v5 != "raw" && !v8)
  {
    if (v11)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 114 || *(_WORD *)(v5 + 1) != 30561)
        {
          v12 = 1;
          goto LABEL_21;
        }
      }
      else if (*(_WORD *)v5 != 114 || *(_DWORD *)(v5 + 2) != 7798881)
      {
        v12 = 0;
        goto LABEL_21;
      }
    }
LABEL_45:
    v13 = &off_1E33077D0;
    goto LABEL_46;
  }
  v12 = v7 << 32;
  if (v5 == "raw" && v6 == 3)
    goto LABEL_45;
LABEL_21:
  if (v5 == "spki" || v11 != 4)
  {
    if (v11 == 4 && v5 == "spki")
      goto LABEL_27;
  }
  else if (v12)
  {
    if (*v5 == 115 && *(_WORD *)(v5 + 1) == 27504 && *((_WORD *)v5 + 1) == 26987)
    {
LABEL_27:
      v13 = &off_1E33077E8;
LABEL_46:
      v16 = *((unsigned __int8 *)v13 + 16);
      v17 = 1;
      goto LABEL_47;
    }
  }
  else if (*(_WORD *)v5 == 115 && *((_DWORD *)v5 + 1) == 6881387 && *(_DWORD *)(v5 + 2) == 7012464)
  {
    goto LABEL_27;
  }
  v17 = 0;
  v16 = 0;
LABEL_47:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v16 | (v17 << 8);
}

_DWORD *WebCore::JSSubtleCrypto::destroy(WebCore::JSSubtleCrypto *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::JSSubtleCrypto::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSubtleCryptoPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSubtleCryptoPrototype::create(WebCore::JSSubtleCryptoPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<13u>(this, (uint64_t)&WebCore::JSSubtleCrypto::s_info, (uint64_t)&WebCore::JSSubtleCryptoPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSubtleCrypto>,(WebCore::DOMConstructorID)330>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2640);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSubtleCrypto>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSubtleCrypto::s_info + ~((_QWORD)&WebCore::JSSubtleCrypto::s_info << 32)) ^ (((unint64_t)&WebCore::JSSubtleCrypto::s_info + ~((_QWORD)&WebCore::JSSubtleCrypto::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSubtleCrypto::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSubtleCrypto::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSubtleCryptoPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSubtleCryptoPrototype::create((WebCore::JSSubtleCryptoPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSubtleCrypto::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSubtleCrypto::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2640) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSubtleCryptoConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSubtleCryptoPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSubtleCrypto>,(WebCore::DOMConstructorID)330>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSubtleCryptoOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF::ConcurrentPtrHashSet *v8;
  _DWORD *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  void *v19;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  v7 = (void *)(v6 - 96);
  if (a5)
  {
    *a5 = "Reachable from ScriptExecutionContext";
    a5[1] = 38;
  }
  v8 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v9 = (_DWORD *)*((_QWORD *)v8 + 6);
  if ((_DWORD *)((char *)v8 + 56) != v9)
  {
    v10 = v9[1];
    v11 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v14;
    while (1)
    {
      v16 = *(void **)&v9[2 * v15 + 4];
      if (!v16)
        return 0;
      if (v7 == v16)
        goto LABEL_14;
      v15 = (v15 + 1) & v10;
      if (v15 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x194FB8FC0);
      }
    }
  }
  v18 = a4;
  v19 = v7;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v8, v7);
  a4 = v18;
  v7 = v19;
  if ((_DWORD)result)
  {
LABEL_14:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v7);
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSSubtleCryptoOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[4];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[4] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[4];
  return result;
}

unint64_t WebCore::wrap<WebCore::SubtleCrypto>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 4);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E33956D0)
  {
    __break(0xC471u);
    JUMPOUT(0x194FB957CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSSubtleCrypto::s_info + ~((_QWORD)&WebCore::JSSubtleCrypto::s_info << 32)) ^ (((unint64_t)&WebCore::JSSubtleCrypto::s_info + ~((_QWORD)&WebCore::JSSubtleCrypto::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSSubtleCrypto::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSSubtleCrypto::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSSubtleCryptoPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSubtleCryptoPrototype::create((WebCore::JSSubtleCryptoPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSSubtleCrypto::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSubtleCrypto::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 2680);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 2680))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 2680);
    *(_QWORD *)(v36 + 2680) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 2680);
  *(_QWORD *)(v32 + 2680) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336AB0 & 1) == 0)
  {
    qword_1EE336AA8 = (uint64_t)&off_1E3307F00;
    byte_1EE336AB0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336AA8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

void WebCore::JSSVGViewSpecOwner::~JSSVGViewSpecOwner(WebCore::JSSVGViewSpecOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSScreenOwner::~JSScreenOwner(WebCore::JSScreenOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSScreenOrientationOwner::~JSScreenOrientationOwner(WebCore::JSScreenOrientationOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSScriptProcessorNodeOwner::~JSScriptProcessorNodeOwner(WebCore::JSScriptProcessorNodeOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSServiceWorkerOwner::~JSServiceWorkerOwner(WebCore::JSServiceWorkerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSServiceWorkerClientOwner::~JSServiceWorkerClientOwner(WebCore::JSServiceWorkerClientOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSServiceWorkerClientsOwner::~JSServiceWorkerClientsOwner(WebCore::JSServiceWorkerClientsOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSServiceWorkerContainerOwner::~JSServiceWorkerContainerOwner(WebCore::JSServiceWorkerContainerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSServiceWorkerRegistrationOwner::~JSServiceWorkerRegistrationOwner(WebCore::JSServiceWorkerRegistrationOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSharedWorkerOwner::~JSSharedWorkerOwner(WebCore::JSSharedWorkerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSourceBufferOwner::~JSSourceBufferOwner(WebCore::JSSourceBufferOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSourceBufferListOwner::~JSSourceBufferListOwner(WebCore::JSSourceBufferListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSpeechRecognitionOwner::~JSSpeechRecognitionOwner(WebCore::JSSpeechRecognitionOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSpeechRecognitionAlternativeOwner::~JSSpeechRecognitionAlternativeOwner(WebCore::JSSpeechRecognitionAlternativeOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSpeechRecognitionResultOwner::~JSSpeechRecognitionResultOwner(WebCore::JSSpeechRecognitionResultOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSpeechRecognitionResultListOwner::~JSSpeechRecognitionResultListOwner(WebCore::JSSpeechRecognitionResultListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSpeechSynthesisOwner::~JSSpeechSynthesisOwner(WebCore::JSSpeechSynthesisOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSpeechSynthesisUtteranceOwner::~JSSpeechSynthesisUtteranceOwner(WebCore::JSSpeechSynthesisUtteranceOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSpeechSynthesisVoiceOwner::~JSSpeechSynthesisVoiceOwner(WebCore::JSSpeechSynthesisVoiceOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSStorageOwner::~JSStorageOwner(WebCore::JSStorageOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSStorageManagerOwner::~JSStorageManagerOwner(WebCore::JSStorageManagerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSStringCallback::hasCallback(WebCore::JSStringCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSStyleMediaOwner::~JSStyleMediaOwner(WebCore::JSStyleMediaOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSStylePropertyMapReadOnlyOwner::~JSStylePropertyMapReadOnlyOwner(WebCore::JSStylePropertyMapReadOnlyOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSStyleSheetOwner::~JSStyleSheetOwner(WebCore::JSStyleSheetOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSStyleSheetListOwner::~JSStyleSheetListOwner(WebCore::JSStyleSheetListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSubtleCryptoOwner::~JSSubtleCryptoOwner(WebCore::JSSubtleCryptoOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

unint64_t WebCore::jsScreenOrientationPrototypeFunction_lock(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  JSC::VM *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const char *v30;
  int v31;
  uint64_t v33;
  int v34;
  char **v35;
  uint64_t v36;
  uint16x8_t v38;
  objc_class *v39;
  WebCore::DOMGuardedObject *v40;
  JSValue v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  WebCore::DOMGuardedObject *v53;
  uint64_t v54;
  uint64_t v55;
  WebCore::DOMGuardedObject *v56;

  v5 = *((_QWORD *)this + 7);
  v6 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x194FB9DECLL);
  }
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v53 = v15;
  v19 = *((_QWORD *)a2 + 5);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_75;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSScreenOrientation::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSScreenOrientation::s_info && v22 != 0);
  }
  if (!v21)
  {
LABEL_75:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"ScreenOrientation", "lock", v17);
LABEL_84:
    v53 = 0;
LABEL_51:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_53;
  }
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v41.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v25, this, v41);
    goto LABEL_84;
  }
  v26 = *(_QWORD *)(v19 + 24);
  v27 = *((_QWORD *)a2 + 6);
  v54 = *((_QWORD *)this + 7);
  v56 = (WebCore::DOMGuardedObject *)v27;
  if ((v27 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v27 + 5) == 2)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if ((v28 & 1) != 0)
    {
      v28 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v27, this);
      if (!v28)
      {
LABEL_31:
        v55 = v28;
        if (v28)
          goto LABEL_32;
LABEL_67:
        v33 = 0;
        v34 = 0;
        goto LABEL_47;
      }
    }
    else if (!v28)
    {
      goto LABEL_31;
    }
    *(_DWORD *)v28 += 2;
    goto LABEL_31;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v56, this);
  v28 = v55;
  if (!v55)
    goto LABEL_67;
LABEL_32:
  v29 = *(_DWORD *)(v28 + 16);
  v30 = *(const char **)(v28 + 8);
  v31 = *(_DWORD *)(v28 + 4);
  if (v30 != "any" && v31 == 3)
  {
    if ((v29 & 4) != 0)
    {
      if (*v30 == 97 && *(_WORD *)(v30 + 1) == 31086)
        goto LABEL_43;
    }
    else if (*(_WORD *)v30 == 97 && *(_DWORD *)(v30 + 2) == 7929966)
    {
      goto LABEL_43;
    }
    goto LABEL_40;
  }
  if (v30 != "any" || v31 != 3)
  {
    if (v30 == "landscape" || v31 != 9)
    {
      if (v30 == "landscape" && v31 == 9)
        goto LABEL_62;
      if (v30 == "landscape-primary" || v31 != 17)
      {
        if (v30 != "landscape-primary" || v31 != 17)
        {
          if (v30 == "landscape-secondary" || v31 != 19)
          {
            if (v30 != "landscape-secondary" || v31 != 19)
            {
              if (v30 == "natural" || v31 != 7)
              {
                if (v30 != "natural" || v31 != 7)
                {
                  if (v30 == "portrait" || v31 != 8)
                  {
                    if (v30 != "portrait" || v31 != 8)
                    {
                      if (v30 == "portrait-primary" || v31 != 16)
                      {
                        if (v30 != "portrait-primary" || v31 != 16)
                        {
                          if (v30 == "portrait-secondary" || v31 != 18)
                          {
                            if (v31 != 18 || v30 != "portrait-secondary")
                              goto LABEL_40;
                          }
                          else if ((v29 & 4) != 0)
                          {
                            if (*v30 != 112
                              || !vminvq_u8((uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v30 + 2), (int8x16_t)xmmword_1968C10A0), vceqq_s8(*(int8x16_t *)(v30 + 1), (int8x16_t)xmmword_1968C1090))))
                            {
                              goto LABEL_40;
                            }
                          }
                          else
                          {
                            if (*(_WORD *)v30 != 112)
                              goto LABEL_40;
                            v50 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v30 + 2), (int16x8_t)xmmword_1968C1080);
                            v50.i16[0] = vminvq_u16(v50);
                            if (!v50.i32[0])
                              goto LABEL_40;
                            v51 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v30 + 4), (int16x8_t)xmmword_1968C10B0);
                            v51.i16[0] = vminvq_u16(v51);
                            if (!v51.i32[0])
                              goto LABEL_40;
                            v52 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v30 + 20), (int16x8_t)xmmword_1968C1070);
                            v52.i16[0] = vminvq_u16(v52);
                            if (!v52.i32[0])
                              goto LABEL_40;
                          }
                          v35 = &off_1E3301508;
                          goto LABEL_44;
                        }
                      }
                      else if ((v29 & 4) != 0)
                      {
                        if (*v30 != 112
                          || *(_QWORD *)(v30 + 1) != 0x2D7469617274726FLL
                          || *((_QWORD *)v30 + 1) != 0x7972616D6972702DLL)
                        {
                          goto LABEL_40;
                        }
                      }
                      else
                      {
                        if (*(_WORD *)v30 != 112)
                          goto LABEL_40;
                        v48 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v30 + 2), (int16x8_t)xmmword_1968C1080);
                        v48.i16[0] = vminvq_u16(v48);
                        if (!v48.i32[0])
                          goto LABEL_40;
                        v49 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v30 + 1), (int16x8_t)xmmword_1968C1030);
                        v49.i16[0] = vminvq_u16(v49);
                        if (!v49.i32[0])
                          goto LABEL_40;
                      }
                      v35 = &off_1E33014F0;
                      goto LABEL_44;
                    }
                  }
                  else if ((v29 & 4) != 0)
                  {
                    if (*v30 != 112 || *(_DWORD *)(v30 + 1) != 1920234095 || *((_DWORD *)v30 + 1) != 1953063282)
                      goto LABEL_40;
                  }
                  else if (*(_WORD *)v30 != 112
                         || *(_QWORD *)(v30 + 2) != 0x7200740072006FLL
                         || *((_QWORD *)v30 + 1) != 0x74006900610072)
                  {
                    goto LABEL_40;
                  }
                  v35 = &off_1E33014D8;
                  goto LABEL_44;
                }
              }
              else if ((v29 & 4) != 0)
              {
                if (*v30 != 110 || *(_DWORD *)(v30 + 1) != 1920300129 || *(_DWORD *)(v30 + 3) != 1818325621)
                  goto LABEL_40;
              }
              else if (*(_WORD *)v30 != 110
                     || *(_QWORD *)(v30 + 2) != 0x72007500740061
                     || *(_QWORD *)(v30 + 6) != 0x6C006100720075)
              {
                goto LABEL_40;
              }
              v35 = &off_1E33014C0;
              goto LABEL_44;
            }
          }
          else
          {
            if ((v29 & 4) != 0)
            {
              if (*v30 != 108)
                goto LABEL_40;
              v44 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v30 + 3), (int8x16_t)xmmword_1968C1050), vceqq_s8(*(int8x16_t *)(v30 + 1), (int8x16_t)xmmword_1968C1040));
              v44.i8[0] = vminvq_u8((uint8x16_t)v44);
            }
            else
            {
              if (*(_WORD *)v30 != 108)
                goto LABEL_40;
              v46 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v30 + 2), (int16x8_t)xmmword_1968C1020);
              v46.i16[0] = vminvq_u16(v46);
              if (!v46.i32[0])
                goto LABEL_40;
              v47 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v30 + 6), (int16x8_t)xmmword_1968C1060);
              v47.i16[0] = vminvq_u16(v47);
              if (!v47.i32[0])
                goto LABEL_40;
              v44 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v30 + 22), (int16x8_t)xmmword_1968C1070);
              v44.i16[0] = vminvq_u16(v44);
            }
            if (!v44.i32[0])
              goto LABEL_40;
          }
          v35 = &off_1E33014A8;
          goto LABEL_44;
        }
      }
      else if ((v29 & 4) != 0)
      {
        if (*v30 != 108 || *(_QWORD *)(v30 + 1) != 0x6570616373646E61 || *(_QWORD *)(v30 + 9) != 0x7972616D6972702DLL)
          goto LABEL_40;
      }
      else
      {
        if (*(_WORD *)v30 != 108)
          goto LABEL_40;
        v42 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v30 + 2), (int16x8_t)xmmword_1968C1020);
        v42.i16[0] = vminvq_u16(v42);
        if (!v42.i32[0])
          goto LABEL_40;
        v43 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v30 + 18), (int16x8_t)xmmword_1968C1030);
        v43.i16[0] = vminvq_u16(v43);
        if (!v43.i32[0])
          goto LABEL_40;
      }
      v35 = &off_1E3301490;
      goto LABEL_44;
    }
    if ((v29 & 4) != 0)
    {
      if (*v30 == 108 && *(_DWORD *)(v30 + 1) == 1935961697 && *(_DWORD *)(v30 + 5) == 1701863779)
      {
LABEL_62:
        v35 = &off_1E3301478;
        goto LABEL_44;
      }
    }
    else if (*(_WORD *)v30 == 108)
    {
      v38 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v30 + 2), (int16x8_t)xmmword_1968C1020);
      v38.i16[0] = vminvq_u16(v38);
      if (v38.i32[0])
        goto LABEL_62;
    }
LABEL_40:
    v33 = 0;
    v34 = 0;
    v55 = 0;
    goto LABEL_45;
  }
LABEL_43:
  v35 = &WebCore::parseEnumerationFromString<WebCore::ScreenOrientationLockType>(WTF::String const&)::mappings;
LABEL_44:
  v33 = *((unsigned __int8 *)v35 + 16);
  v55 = 0;
  v34 = 1;
LABEL_45:
  if (*(_DWORD *)v28 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v28, v16);
  else
    *(_DWORD *)v28 -= 2;
LABEL_47:
  if (!*((_DWORD *)v25 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) == 0)
  {
    if (v34)
      WebCore::ScreenOrientation::lock(v26 - 24, v33, (uint64_t *)&v53);
    else
      WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)&v54, 0, "orientation", 12, "ScreenOrientation", 18, v18, "lock", 5, "\"any\", \"natural\", \"landscape\", \"portrait\", \"portrait-primary\", \"portrait-secondary\", \"landscape-primary\", \"landscape-secondary\"", 128);
  }
  v14 = v53;
  v53 = 0;
  if (v14)
    goto LABEL_51;
LABEL_53:
  v36 = *(_QWORD *)(v5 + 16);
  if (v36)
  {
    if (*(_QWORD *)(v5 + 24) != v36)
    {
      v39 = *(objc_class **)(v36 + 8);
      JSC::VM::clearException((JSC::VM *)v5);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v56);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v56, v39, 0);
      v40 = v56;
      v56 = 0;
      if (v40)
      {
        if (*((_DWORD *)v40 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v40 + 16))(v40);
        else
          --*((_DWORD *)v40 + 4);
      }
    }
  }
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsScreenOrientationPrototypeFunction_unlock(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  char v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "ScreenOrientation", "unlock");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSScreenOrientation::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSScreenOrientation::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "ScreenOrientation", "unlock");
  WebCore::ScreenOrientation::unlock((WebCore::ScreenOrientation *)(*(_QWORD *)(v4 + 24) - 24), (uint64_t)&v19);
  if (!v21)
    return 10;
  v12 = (WTF::StringImpl *)v19;
  v17 = v19;
  v13 = v20;
  v20 = 0;
  v18 = v13;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v18);
    JSC::VM::throwException(v5, this, v14);
    v13 = v18;
  }
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v21)
  {
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 != 2)
      {
        result = 0;
        *(_DWORD *)v15 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v15, v12);
    }
  }
  return 0;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21ScrollTimelineOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void WebCore::SecurityPolicyViolationEventInit::~SecurityPolicyViolationEventInit(WebCore::SecurityPolicyViolationEventInit *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

JSCell *WebCore::setSubclassStructureIfNeeded<WebCore::SecurityPolicyViolationEvent>(JSC *a1, uint64_t a2, JSCell *a3)
{
  JSCell *result;
  JSC::JSObject *v7;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t FunctionRealm;
  JSC::JSObject *v12;
  JSC::Structure *v13;
  JSC::VM *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  JSC::JSCell *v23;
  unint64_t Structure;
  JSC::Structure *v25;
  JSC::JSCell *v26;
  uint64_t v27;
  unint64_t SubclassStructure;

  result = *(JSCell **)(a2 + 40);
  if (((unint64_t)result & 0xFFFE000000000002) == 0)
  {
    result = (JSCell *)JSC::JSCell::getObject((JSC::JSCell *)result);
    if (result && result != *(JSCell **)(a2 + 24))
    {
      v9 = (JSC::JSGlobalObject *)result;
      v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
      FunctionRealm = JSC::getFunctionRealm(a1, (JSC::JSGlobalObject *)result, v7);
      v14 = (JSC::VM *)FunctionRealm;
      if (!*((_DWORD *)v10 + 20)
        || (result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10), (result & 1) == 0))
      {
        v15 = *((_QWORD *)v14 + 412);
        if (v15)
        {
          v16 = *(_DWORD *)(v15 - 8);
          v17 = ((unint64_t)&WebCore::JSSecurityPolicyViolationEvent::s_info
               + ~((_QWORD)&WebCore::JSSecurityPolicyViolationEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSecurityPolicyViolationEvent::s_info
                                                                                      + ~((_QWORD)&WebCore::JSSecurityPolicyViolationEvent::s_info << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = *(char ***)(v15 + 16 * v20);
          if (v21 == &WebCore::JSSecurityPolicyViolationEvent::s_info)
          {
LABEL_14:
            v12 = *(JSC::JSObject **)(v15 + 16 * v20 + 8);
            if (v12)
            {
LABEL_16:
              SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v9, v12, v13);
              if (!*((_DWORD *)v10 + 20))
                return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
              result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10);
              if ((result & 1) == 0)
                return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
              return result;
            }
          }
          else
          {
            v22 = 1;
            while (v21)
            {
              v20 = ((_DWORD)v20 + v22) & v16;
              v21 = *(char ***)(v15 + 16 * v20);
              ++v22;
              if (v21 == &WebCore::JSSecurityPolicyViolationEvent::s_info)
                goto LABEL_14;
            }
          }
        }
        v23 = (JSC::JSCell *)WebCore::JSEvent::prototype(v10, v14, v12);
        Structure = WebCore::JSSecurityPolicyViolationEventPrototype::createStructure((uint64_t *)v10, (uint64_t)v14, v23);
        *(_DWORD *)(Structure + 16) |= 0x80000u;
        v26 = (JSC::JSCell *)WebCore::JSSecurityPolicyViolationEventPrototype::create(v10, v14, Structure, v25);
        v27 = WebCore::JSSecurityPolicyViolationEvent::createStructure((uint64_t *)v10, (uint64_t)v14, v26);
        v12 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)v14, v27, (uint64_t)&WebCore::JSSecurityPolicyViolationEvent::s_info);
        goto LABEL_16;
      }
    }
  }
  return result;
}

uint64_t WebCore::SecurityPolicyViolationEvent::SecurityPolicyViolationEvent(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  *(_QWORD *)(a1 + 8) = 0;
  if (a4)
    v12 = 2884096;
  else
    v12 = 2883584;
  v13 = v12 | (2 * v9) | (4 * v10) | (8 * v11) | (*a2 != 0) | *(_DWORD *)(a1 + 20) & 0xFFC00000;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v13;
  v14 = (_DWORD *)*a2;
  if (*a2)
  {
    *v14 += 2;
    v13 = *(_DWORD *)(a1 + 20);
  }
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 20) = v13 | 0x4000;
  *(_QWORD *)a1 = off_1E330CCE0;
  v15 = (_DWORD *)*((_QWORD *)a3 + 1);
  if (v15)
    *v15 += 2;
  *(_QWORD *)(a1 + 72) = v15;
  v16 = (_DWORD *)*((_QWORD *)a3 + 2);
  if (v16)
    *v16 += 2;
  *(_QWORD *)(a1 + 80) = v16;
  v17 = (_DWORD *)*((_QWORD *)a3 + 3);
  if (v17)
    *v17 += 2;
  *(_QWORD *)(a1 + 88) = v17;
  v18 = (_DWORD *)*((_QWORD *)a3 + 4);
  if (v18)
    *v18 += 2;
  *(_QWORD *)(a1 + 96) = v18;
  v19 = (_DWORD *)*((_QWORD *)a3 + 5);
  if (v19)
    *v19 += 2;
  *(_QWORD *)(a1 + 104) = v19;
  v20 = (_DWORD *)*((_QWORD *)a3 + 6);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(a1 + 112) = v20;
  v21 = (_DWORD *)*((_QWORD *)a3 + 7);
  if (v21)
    *v21 += 2;
  *(_QWORD *)(a1 + 120) = v21;
  v22 = (_DWORD *)*((_QWORD *)a3 + 8);
  if (v22)
    *v22 += 2;
  *(_QWORD *)(a1 + 128) = v22;
  *(_BYTE *)(a1 + 136) = a3[72];
  *(_WORD *)(a1 + 138) = *((_WORD *)a3 + 37);
  *(_QWORD *)(a1 + 140) = *(_QWORD *)(a3 + 76);
  return a1;
}

void WebCore::SecurityPolicyViolationEvent::~SecurityPolicyViolationEvent(WebCore::SecurityPolicyViolationEvent *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SecurityPolicyViolationEvent::~SecurityPolicyViolationEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore32SecurityPolicyViolationEventInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::SecurityPolicyViolationEventInit *this)
{
  WebCore::SecurityPolicyViolationEventInit::~SecurityPolicyViolationEventInit(this, this);
}

_BYTE *WebCore::jsServiceWorkerPrototypeFunction_postMessage(WebCore *this, JSC::JSGlobalObject *a2, JSValue a3, WebCore::JSServiceWorker *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  unint64_t v13;
  JSValue v15;
  uint64_t v16;
  uint64_t v17;
  int hasIteratorMethod;
  int v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  void *v30;
  WTF *v31;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  JSValue v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD v43[2];
  WTF *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  char v49;
  WTF *v50;
  WTF::StringImpl *v51;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v43[0] = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v43, "ServiceWorker", "postMessage");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSServiceWorker::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSServiceWorker::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)v43, "ServiceWorker", "postMessage");
  v43[1] = v5;
  v13 = *((int *)a2 + 8) - 1;
  if (v13 >= 2)
    v13 = 2;
  if (!v13)
  {
    v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v15);
  }
  if (v13 != 2)
    return (_BYTE *)WebCore::jsServiceWorkerPrototypeFunction_postMessage2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  v16 = *((_QWORD *)a2 + 7);
  if (v16 == 10 || (v16 & 0xFFFFFFFFFFFFFFF7) == 2)
    return (_BYTE *)WebCore::jsServiceWorkerPrototypeFunction_postMessage2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  hasIteratorMethod = JSC::hasIteratorMethod(this, *((JSC::JSGlobalObject **)a2 + 7), a3);
  v20 = hasIteratorMethod;
  if (!*((_DWORD *)v5 + 20))
  {
    if (hasIteratorMethod)
      goto LABEL_26;
    goto LABEL_51;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
  if ((hasExceptionsAfterHandlingTraps & 1) != 0 || ((v20 ^ 1) & 1) != 0)
  {
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      return 0;
LABEL_51:
    if ((v16 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v16 + 5) >= 0x17u)
      return (_BYTE *)WebCore::jsServiceWorkerPrototypeFunction_postMessage2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    return (_BYTE *)JSC::throwTypeError();
  }
LABEL_26:
  v21 = *(WTF **)(v6 + 24);
  v22 = (WTF *)*((_QWORD *)this + 7);
  v23 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 7);
  v50 = v22;
  if ((v24 & 0xFFFE000000000002) != 0 || (v25 = *(unsigned __int8 *)(v24 + 5), v25 <= 0x16))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v27 = v47;
    v47 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    v46 = 1;
  }
  else if (v25 == 36 && (JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)v24) & 1) != 0)
  {
    WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLObject>>::convertArray((JSC::VM **)this, v24, (uint64_t)&v44);
  }
  else
  {
    WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLObject>>::convert(this, v24, (uint64_t)&v44);
  }
  v28 = v46;
  if (!v46)
  {
    v50 = v44;
    v29 = v45;
    v44 = 0;
    v45 = 0;
    v51 = v29;
    WebCore::ServiceWorker::postMessage(v21, this, v23, (uint64_t)&v50, (uint64_t)&v47);
    v31 = v50;
    if (HIDWORD(v51))
    {
      v37 = 8 * HIDWORD(v51);
      do
      {
        v38 = *(_QWORD *)v31;
        if (*(_QWORD *)v31)
        {
          v39 = (uint64_t *)(v38 - 16);
          v40 = *(_QWORD *)(((v38 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v41 = *(uint64_t **)(v38 - 8);
          if (v41)
          {
            v42 = *v39;
            *v41 = *v39;
            *(_QWORD *)(v42 + 8) = v41;
            *v39 = 0;
            v39[1] = 0;
          }
          *v39 = *(_QWORD *)(v40 + 40);
          *(_QWORD *)(v40 + 40) = v39;
          *(_QWORD *)v31 = 0;
        }
        v31 = (WTF *)((char *)v31 + 8);
        v37 -= 8;
      }
      while (v37);
      v31 = v50;
      if (!v50)
      {
LABEL_39:
        if (!v49)
        {
          v17 = 10;
LABEL_41:
          v28 = v46;
          goto LABEL_42;
        }
        v33 = (WTF::StringImpl *)v47;
        LOBYTE(v50) = (_BYTE)v47;
        v34 = v48;
        v48 = 0;
        v51 = v34;
        if (!*((_QWORD *)v22 + 2))
        {
          v35.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v47, (JSC::JSGlobalObject *)&v51);
          JSC::VM::throwException(v22, this, v35);
          v34 = v51;
        }
        v51 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
        if (v49)
        {
          v36 = v48;
          v48 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 != 2)
            {
              v17 = 0;
              *(_DWORD *)v36 -= 2;
              goto LABEL_41;
            }
            WTF::StringImpl::destroy(v36, v33);
          }
        }
        v17 = 0;
        goto LABEL_41;
      }
    }
    else if (!v50)
    {
      goto LABEL_39;
    }
    v50 = 0;
    LODWORD(v51) = 0;
    WTF::fastFree(v31, v30);
    goto LABEL_39;
  }
  v17 = 0;
LABEL_42:
  if (v28 != -1)
    ((void (*)(WTF::StringImpl **, WTF **))off_1E330B670[v28])(&v47, &v44);
  return (_BYTE *)v17;
}

uint64_t WebCore::jsServiceWorkerPrototypeFunction_postMessage2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSServiceWorker *a4)
{
  uint64_t v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  WTF *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  int v28;
  WTF::StringImpl *v29;
  char v30;
  WTF *v31;
  WTF::StringImpl *v32;

  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v6 = 10;
  else
    v6 = *((_QWORD *)a2 + 7);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  v8 = *((_QWORD *)a2 + 6);
  WebCore::convertDictionary<WebCore::StructuredSerializeOptions>((JSC::JSCell *)v6, this, (uint64_t)&v25);
  v9 = v27;
  if (v27)
    goto LABEL_31;
  v31 = v25;
  v10 = v26;
  v25 = 0;
  v26 = 0;
  v32 = v10;
  WebCore::ServiceWorker::postMessage(a3, this, v8, (uint64_t)&v31, (uint64_t)&v28);
  v12 = v31;
  if (!HIDWORD(v32))
  {
    if (!v31)
      goto LABEL_7;
    goto LABEL_28;
  }
  v19 = 8 * HIDWORD(v32);
  do
  {
    v20 = *(_QWORD *)v12;
    if (*(_QWORD *)v12)
    {
      v21 = (uint64_t *)(v20 - 16);
      v22 = *(_QWORD *)(((v20 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v23 = *(uint64_t **)(v20 - 8);
      if (v23)
      {
        v24 = *v21;
        *v23 = *v21;
        *(_QWORD *)(v24 + 8) = v23;
        *v21 = 0;
        v21[1] = 0;
      }
      *v21 = *(_QWORD *)(v22 + 40);
      *(_QWORD *)(v22 + 40) = v21;
      *(_QWORD *)v12 = 0;
    }
    v12 = (WTF *)((char *)v12 + 8);
    v19 -= 8;
  }
  while (v19);
  v12 = v31;
  if (v31)
  {
LABEL_28:
    v31 = 0;
    LODWORD(v32) = 0;
    WTF::fastFree(v12, v11);
  }
LABEL_7:
  if (!v30)
  {
    v13 = 10;
    goto LABEL_9;
  }
  v15 = (WTF::StringImpl *)v28;
  LOBYTE(v31) = v28;
  v16 = v29;
  v29 = 0;
  v32 = v16;
  if (!*((_QWORD *)v7 + 2))
  {
    v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v28, (JSC::JSGlobalObject *)&v32);
    JSC::VM::throwException(v7, this, v17);
    v16 = v32;
  }
  v32 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v30)
  {
    v18 = v29;
    v29 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 != 2)
      {
        v13 = 0;
        *(_DWORD *)v18 -= 2;
        goto LABEL_9;
      }
      WTF::StringImpl::destroy(v18, v15);
    }
  }
LABEL_31:
  v13 = 0;
LABEL_9:
  if ((_DWORD)v9 != -1)
    ((void (*)(int *, WTF **))off_1E3308C20[v9])(&v28, &v25);
  return v13;
}

_BYTE *WebCore::jsServiceWorkerClientPrototypeFunction_postMessage(WebCore *this, JSC::JSGlobalObject *a2, JSValue a3, WebCore::JSServiceWorkerClient *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  unint64_t v13;
  JSValue v15;
  uint64_t v16;
  uint64_t v17;
  int hasIteratorMethod;
  int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  void *v30;
  WTF *v31;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  JSValue v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD v43[2];
  WTF *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  char v49;
  WTF *v50;
  WTF::StringImpl *v51;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v43[0] = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v43, "Client", "postMessage");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSServiceWorkerClient::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSServiceWorkerClient::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)v43, "Client", "postMessage");
  v43[1] = v5;
  v13 = *((int *)a2 + 8) - 1;
  if (v13 >= 2)
    v13 = 2;
  if (!v13)
  {
    v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v15);
  }
  if (v13 != 2)
    return (_BYTE *)WebCore::jsServiceWorkerClientPrototypeFunction_postMessage2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  v16 = *((_QWORD *)a2 + 7);
  if (v16 == 10 || (v16 & 0xFFFFFFFFFFFFFFF7) == 2)
    return (_BYTE *)WebCore::jsServiceWorkerClientPrototypeFunction_postMessage2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  hasIteratorMethod = JSC::hasIteratorMethod(this, *((JSC::JSGlobalObject **)a2 + 7), a3);
  v20 = hasIteratorMethod;
  if (!*((_DWORD *)v5 + 20))
  {
    if (hasIteratorMethod)
      goto LABEL_26;
    goto LABEL_51;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
  if ((hasExceptionsAfterHandlingTraps & 1) != 0 || ((v20 ^ 1) & 1) != 0)
  {
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      return 0;
LABEL_51:
    if ((v16 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v16 + 5) >= 0x17u)
      return (_BYTE *)WebCore::jsServiceWorkerClientPrototypeFunction_postMessage2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    return (_BYTE *)JSC::throwTypeError();
  }
LABEL_26:
  v21 = *(_QWORD *)(v6 + 24);
  v22 = (WTF *)*((_QWORD *)this + 7);
  v23 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 7);
  v50 = v22;
  if ((v24 & 0xFFFE000000000002) != 0 || (v25 = *(unsigned __int8 *)(v24 + 5), v25 <= 0x16))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v27 = v47;
    v47 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    v46 = 1;
  }
  else if (v25 == 36 && (JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)v24) & 1) != 0)
  {
    WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLObject>>::convertArray((JSC::VM **)this, v24, (uint64_t)&v44);
  }
  else
  {
    WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLObject>>::convert(this, v24, (uint64_t)&v44);
  }
  v28 = v46;
  if (!v46)
  {
    v50 = v44;
    v29 = v45;
    v44 = 0;
    v45 = 0;
    v51 = v29;
    WebCore::ServiceWorkerClient::postMessage(v21, this, v23, (uint64_t)&v50, (uint64_t)&v47);
    v31 = v50;
    if (HIDWORD(v51))
    {
      v37 = 8 * HIDWORD(v51);
      do
      {
        v38 = *(_QWORD *)v31;
        if (*(_QWORD *)v31)
        {
          v39 = (uint64_t *)(v38 - 16);
          v40 = *(_QWORD *)(((v38 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v41 = *(uint64_t **)(v38 - 8);
          if (v41)
          {
            v42 = *v39;
            *v41 = *v39;
            *(_QWORD *)(v42 + 8) = v41;
            *v39 = 0;
            v39[1] = 0;
          }
          *v39 = *(_QWORD *)(v40 + 40);
          *(_QWORD *)(v40 + 40) = v39;
          *(_QWORD *)v31 = 0;
        }
        v31 = (WTF *)((char *)v31 + 8);
        v37 -= 8;
      }
      while (v37);
      v31 = v50;
      if (!v50)
      {
LABEL_39:
        if (!v49)
        {
          v17 = 10;
LABEL_41:
          v28 = v46;
          goto LABEL_42;
        }
        v33 = (WTF::StringImpl *)v47;
        LOBYTE(v50) = (_BYTE)v47;
        v34 = v48;
        v48 = 0;
        v51 = v34;
        if (!*((_QWORD *)v22 + 2))
        {
          v35.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v47, (JSC::JSGlobalObject *)&v51);
          JSC::VM::throwException(v22, this, v35);
          v34 = v51;
        }
        v51 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
        if (v49)
        {
          v36 = v48;
          v48 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 != 2)
            {
              v17 = 0;
              *(_DWORD *)v36 -= 2;
              goto LABEL_41;
            }
            WTF::StringImpl::destroy(v36, v33);
          }
        }
        v17 = 0;
        goto LABEL_41;
      }
    }
    else if (!v50)
    {
      goto LABEL_39;
    }
    v50 = 0;
    LODWORD(v51) = 0;
    WTF::fastFree(v31, v30);
    goto LABEL_39;
  }
  v17 = 0;
LABEL_42:
  if (v28 != -1)
    ((void (*)(WTF::StringImpl **, WTF **))off_1E330B670[v28])(&v47, &v44);
  return (_BYTE *)v17;
}

uint64_t WebCore::jsServiceWorkerClientPrototypeFunction_postMessage2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSServiceWorkerClient *a4)
{
  uint64_t v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  WTF *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  int v28;
  WTF::StringImpl *v29;
  char v30;
  WTF *v31;
  WTF::StringImpl *v32;

  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v6 = 10;
  else
    v6 = *((_QWORD *)a2 + 7);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  v8 = *((_QWORD *)a2 + 6);
  WebCore::convertDictionary<WebCore::StructuredSerializeOptions>((JSC::JSCell *)v6, this, (uint64_t)&v25);
  v9 = v27;
  if (v27)
    goto LABEL_31;
  v31 = v25;
  v10 = v26;
  v25 = 0;
  v26 = 0;
  v32 = v10;
  WebCore::ServiceWorkerClient::postMessage((uint64_t)a3, this, v8, (uint64_t)&v31, (uint64_t)&v28);
  v12 = v31;
  if (!HIDWORD(v32))
  {
    if (!v31)
      goto LABEL_7;
    goto LABEL_28;
  }
  v19 = 8 * HIDWORD(v32);
  do
  {
    v20 = *(_QWORD *)v12;
    if (*(_QWORD *)v12)
    {
      v21 = (uint64_t *)(v20 - 16);
      v22 = *(_QWORD *)(((v20 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v23 = *(uint64_t **)(v20 - 8);
      if (v23)
      {
        v24 = *v21;
        *v23 = *v21;
        *(_QWORD *)(v24 + 8) = v23;
        *v21 = 0;
        v21[1] = 0;
      }
      *v21 = *(_QWORD *)(v22 + 40);
      *(_QWORD *)(v22 + 40) = v21;
      *(_QWORD *)v12 = 0;
    }
    v12 = (WTF *)((char *)v12 + 8);
    v19 -= 8;
  }
  while (v19);
  v12 = v31;
  if (v31)
  {
LABEL_28:
    v31 = 0;
    LODWORD(v32) = 0;
    WTF::fastFree(v12, v11);
  }
LABEL_7:
  if (!v30)
  {
    v13 = 10;
    goto LABEL_9;
  }
  v15 = (WTF::StringImpl *)v28;
  LOBYTE(v31) = v28;
  v16 = v29;
  v29 = 0;
  v32 = v16;
  if (!*((_QWORD *)v7 + 2))
  {
    v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v28, (JSC::JSGlobalObject *)&v32);
    JSC::VM::throwException(v7, this, v17);
    v16 = v32;
  }
  v32 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v30)
  {
    v18 = v29;
    v29 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 != 2)
      {
        v13 = 0;
        *(_DWORD *)v18 -= 2;
        goto LABEL_9;
      }
      WTF::StringImpl::destroy(v18, v15);
    }
  }
LABEL_31:
  v13 = 0;
LABEL_9:
  if ((_DWORD)v9 != -1)
    ((void (*)(int *, WTF **))off_1E3308C20[v9])(&v28, &v25);
  return v13;
}

unint64_t WebCore::jsServiceWorkerClientsPrototypeFunction_get(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  JSC::VM *v36;
  JSValue v37;
  objc_class *v38;
  WebCore::DOMGuardedObject *v39;
  WTF::StringImpl *v40;
  int hasExceptionsAfterHandlingTraps;
  WebCore::DOMGuardedObject *v42;
  WebCore::DOMGuardedObject *v43;
  int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBB988);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v42 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_50;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSServiceWorkerClients::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSServiceWorkerClients::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_50:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Clients", "get", v17);
  }
  else if (*((_DWORD *)a2 + 8) == 1)
  {
    v36 = (JSC::VM *)*((_QWORD *)this + 7);
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v36, this, v37);
  }
  else
  {
    v24 = *(_QWORD *)(v18 + 24);
    v25 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
    if (v25)
    {
      v26 = (_QWORD *)v25;
      v27 = *((_QWORD *)a2 + 6);
      v46 = (WTF::StringImpl *)v27;
      v28 = (JSC::VM *)*((_QWORD *)this + 7);
      if ((v27 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v27 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v46, this);
LABEL_33:
        if (*((_DWORD *)v28 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
          v30 = v45;
          if (hasExceptionsAfterHandlingTraps)
          {
            v44 = 1;
            v45 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v40);
              else
                *(_DWORD *)v30 -= 2;
            }
            v33 = 1;
LABEL_39:
            ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))off_1E33088B8[v33])(&v46, &v43);
            v14 = v42;
            v42 = 0;
            if (!v14)
              goto LABEL_42;
            goto LABEL_40;
          }
        }
        else
        {
          v30 = v45;
        }
        v44 = 0;
        v43 = 0;
        v46 = v30;
        WebCore::ServiceWorkerClients::get(v24, v26, (uint64_t)&v46, (uint64_t *)&v42);
        v32 = v46;
        v46 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v31);
          else
            *(_DWORD *)v32 -= 2;
        }
        v33 = 0;
        goto LABEL_39;
      }
      v29 = *(WTF::StringImpl **)(v27 + 8);
      if ((v29 & 1) != 0)
      {
        v29 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v27, this);
        if (!v29)
          goto LABEL_32;
      }
      else if (!v29)
      {
LABEL_32:
        v45 = v29;
        goto LABEL_33;
      }
      *(_DWORD *)v29 += 2;
      goto LABEL_32;
    }
  }
  v42 = 0;
LABEL_40:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_42:
  v34 = *(_QWORD *)(v10 + 16);
  if (v34)
  {
    if (*(_QWORD *)(v10 + 24) != v34)
    {
      v38 = *(objc_class **)(v34 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v43);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v43, v38, 0);
      v39 = v43;
      v43 = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v39 + 16))(v39);
        else
          --*((_DWORD *)v39 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsServiceWorkerClientsPrototypeFunction_matchAll(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  JSC::JSCell *v26;
  JSC::VM *v27;
  __int16 v28;
  __int16 v29;
  uint64_t Object;
  JSC::Structure *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  JSC::VM *v34;
  double v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  JSC::VM *v38;
  uint64_t v39;
  const char *v40;
  int v41;
  unint64_t v42;
  int v43;
  char **v44;
  uint64_t v45;
  objc_class *v47;
  WebCore::DOMGuardedObject *v48;
  uint16x8_t v49;
  uint16x8_t v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  int *v54;
  int v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  uint64_t v61;
  uint64_t v62[3];
  uint64_t v63;
  WebCore::DOMGuardedObject *v64;

  v5 = *((_QWORD *)this + 7);
  v6 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBBF94);
  }
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v62[0] = (uint64_t)v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_92;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSServiceWorkerClients::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSServiceWorkerClients::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_92:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Clients", "matchAll", v16);
  }
  else
  {
    v23 = *(_QWORD *)(v17 + 24);
    v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
    if (v24)
    {
      v25 = (_QWORD *)v24;
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v28 = 0;
        v29 = 0;
        goto LABEL_69;
      }
      v26 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
      v27 = (JSC::VM *)*((_QWORD *)this + 7);
      v62[1] = (uint64_t)v27;
      if (((unint64_t)v26 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v28 = 0;
        v29 = 0;
LABEL_69:
        LOWORD(v64) = v29 | (v28 << 8);
        WebCore::ServiceWorkerClients::matchAll(v23, v25, (__int16 *)&v64, v62);
        goto LABEL_70;
      }
      if (((unint64_t)v26 & 0xFFFE000000000002) != 0)
        goto LABEL_91;
      Object = JSC::JSCell::getObject(v26);
      if (!Object)
        goto LABEL_91;
      v31 = (JSC::Structure *)Object;
      v61 = v23;
      WTF::AtomStringImpl::addLiteral();
      v33 = JSC::JSObject::get(v31, this, (unint64_t)v64);
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, v32);
        else
          *(_DWORD *)v64 -= 2;
      }
      if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
      {
LABEL_70:
        v14 = (WebCore::DOMGuardedObject *)v62[0];
        v62[0] = 0;
        if (!v14)
          goto LABEL_73;
        goto LABEL_71;
      }
      if (v33 == 10)
      {
        v29 = 0;
        goto LABEL_43;
      }
      v34 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v33 >= 0xFFFE000000000000)
      {
        v51 = (_DWORD)v33 == 0;
        goto LABEL_129;
      }
      *(_QWORD *)&v35 = v33 - 0x2000000000000;
      if (v33 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        if (v35 <= 0.0)
        {
          v29 = v35 < 0.0;
          goto LABEL_42;
        }
      }
      else
      {
        if ((v33 & 0xFFFE000000000002) != 0)
        {
          v29 = v33 == 7;
          goto LABEL_42;
        }
        v52 = *(unsigned __int8 *)(v33 + 5);
        if (v52 == 3)
        {
          v55 = *(_DWORD *)(v33 + 8);
LABEL_128:
          v51 = v55 == 0;
          goto LABEL_129;
        }
        if (v52 == 2)
        {
          v53 = *(_QWORD *)(v33 + 8);
          if ((v53 & 1) != 0)
            v54 = (int *)(v33 + 16);
          else
            v54 = (int *)(v53 + 4);
          v55 = *v54;
          goto LABEL_128;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0xA) & 1) != 0)
        {
          v51 = *(_QWORD *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_129:
          v29 = !v51;
LABEL_42:
          if (*((_DWORD *)v34 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v34) & 1) != 0)
            goto LABEL_70;
LABEL_43:
          WTF::AtomStringImpl::addLiteral();
          v37 = JSC::JSObject::get(v31, this, (unint64_t)v64);
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
              WTF::StringImpl::destroy(v64, v36);
            else
              *(_DWORD *)v64 -= 2;
          }
          if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
            goto LABEL_70;
          if (v37 == 10)
          {
            v28 = 0;
            v23 = v61;
            goto LABEL_69;
          }
          v38 = (JSC::VM *)*((_QWORD *)this + 7);
          v62[2] = (uint64_t)v38;
          v64 = (WebCore::DOMGuardedObject *)v37;
          v23 = v61;
          if ((v37 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v37 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v64, this);
            v39 = v63;
            if (v63)
              goto LABEL_55;
            goto LABEL_90;
          }
          v39 = *(_QWORD *)(v37 + 8);
          if ((v39 & 1) != 0)
          {
            v39 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v37, this);
            if (!v39)
            {
LABEL_54:
              v63 = v39;
              if (v39)
              {
LABEL_55:
                v40 = *(const char **)(v39 + 8);
                v41 = *(_DWORD *)(v39 + 4);
                v42 = ((unint64_t)*(unsigned int *)(v39 + 16) >> 2) & 1;
                if (v40 != "all" && v41 == 3)
                {
                  if ((_DWORD)v42)
                  {
                    if (*v40 != 97 || *(_WORD *)(v40 + 1) != 27756)
                    {
LABEL_60:
                      v43 = 0;
                      v28 = 0;
                      goto LABEL_65;
                    }
                  }
                  else if (*(_WORD *)v40 != 97 || *(_DWORD *)(v40 + 2) != 7077996)
                  {
                    goto LABEL_60;
                  }
                  goto LABEL_63;
                }
                if (v40 == "all" && v41 == 3)
                {
LABEL_63:
                  v44 = &WebCore::parseEnumerationFromString<WebCore::ServiceWorkerClientType>(WTF::String const&)::mappings;
LABEL_64:
                  v28 = *((unsigned __int8 *)v44 + 16);
                  v43 = 1;
                  goto LABEL_65;
                }
                if (v40 != "sharedworker" && v41 == 12)
                {
                  if ((_DWORD)v42)
                  {
                    if (*v40 != 115
                      || *(_QWORD *)(v40 + 1) != 0x726F776465726168
                      || *(_QWORD *)(v40 + 4) != 0x72656B726F776465)
                    {
                      goto LABEL_60;
                    }
                  }
                  else
                  {
                    if (*(_WORD *)v40 != 115)
                      goto LABEL_60;
                    v49 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 2), (int16x8_t)xmmword_1968C10C0);
                    v49.i16[0] = vminvq_u16(v49);
                    if (!v49.i32[0])
                      goto LABEL_60;
                    v50 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 8), (int16x8_t)xmmword_1968C10D0);
                    v50.i16[0] = vminvq_u16(v50);
                    if (!v50.i32[0])
                      goto LABEL_60;
                  }
                  v44 = &off_1E3302478;
                  goto LABEL_64;
                }
                if (v40 == "sharedworker" && v41 == 12)
                {
                  v44 = &off_1E3302478;
LABEL_154:
                  v23 = v61;
                  goto LABEL_64;
                }
                v56 = v42 << 32;
                v57 = v41 != 6;
                if (v40 == "window" || v41 != 6)
                {
                  v58 = *(_DWORD *)(v39 + 4);
                  if (v40 == "window" && v41 == 6)
                    goto LABEL_144;
                }
                else if ((_DWORD)v42)
                {
                  if (*v40 == 119 && *(_DWORD *)(v40 + 1) == 1868852841 && *(_DWORD *)(v40 + 2) == 2003788910)
                  {
LABEL_144:
                    v44 = &off_1E3302490;
                    goto LABEL_154;
                  }
                  v57 = 0;
                  v58 = 6;
                  v56 = 0x100000000;
                }
                else if (*(_WORD *)v40 == 119)
                {
                  v57 = 0;
                  v58 = 6;
                  if (*(_QWORD *)(v40 + 2) == 0x6F0064006E0069 && *(_QWORD *)(v40 + 4) == 0x77006F0064006ELL)
                    goto LABEL_144;
                }
                else
                {
                  v57 = 0;
                  v58 = 6;
                }
                if (v40 == "worker" || v57)
                {
                  if (v41 == 6 && v40 == "worker")
                    goto LABEL_153;
                }
                else
                {
                  if (!v58)
                  {
LABEL_153:
                    v44 = &off_1E33024A8;
                    goto LABEL_154;
                  }
                  if (v56)
                  {
                    if (*v40 == 119 && *(_DWORD *)(v40 + 1) == 1701540463 && *(_DWORD *)(v40 + 2) == 1919249266)
                      goto LABEL_153;
                  }
                  else if (*(_WORD *)v40 == 119
                         && *(_QWORD *)(v40 + 4) == 0x720065006B0072
                         && *(_QWORD *)(v40 + 2) == 0x65006B0072006FLL)
                  {
                    goto LABEL_153;
                  }
                }
                v43 = 0;
                v28 = 0;
                v23 = v61;
LABEL_65:
                v63 = 0;
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v39, v36);
                else
                  *(_DWORD *)v39 -= 2;
                goto LABEL_67;
              }
LABEL_90:
              v28 = 0;
              v43 = 0;
LABEL_67:
              if (*((_DWORD *)v38 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
                goto LABEL_70;
              if (v43)
                goto LABEL_69;
LABEL_91:
              JSC::throwTypeError();
              goto LABEL_70;
            }
          }
          else if (!v39)
          {
            goto LABEL_54;
          }
          *(_DWORD *)v39 += 2;
          goto LABEL_54;
        }
      }
      v29 = 1;
      goto LABEL_42;
    }
  }
  v62[0] = 0;
LABEL_71:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_73:
  v45 = *(_QWORD *)(v5 + 16);
  if (v45)
  {
    if (*(_QWORD *)(v5 + 24) != v45)
    {
      v47 = *(objc_class **)(v45 + 8);
      JSC::VM::clearException((JSC::VM *)v5);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v64);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v64, v47, 0);
      v48 = v64;
      v64 = 0;
      if (v48)
      {
        if (*((_DWORD *)v48 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v48 + 16))(v48);
        else
          --*((_DWORD *)v48 + 4);
      }
    }
  }
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsServiceWorkerClientsPrototypeFunction_openWindow(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  JSC::VM *v33;
  JSValue v34;
  objc_class *v35;
  WebCore::DOMGuardedObject *v36;
  WebCore::DOMGuardedObject *v37;
  WebCore::DOMGuardedObject *v38;
  int v39;
  WTF::StringImpl *v40;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBC550);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v37 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_42;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSServiceWorkerClients::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSServiceWorkerClients::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_42:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Clients", "openWindow", v17);
    goto LABEL_45;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v33 = (JSC::VM *)*((_QWORD *)this + 7);
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v33, this, v34);
    goto LABEL_45;
  }
  v24 = *(_QWORD *)(v18 + 24);
  v25 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v25)
  {
LABEL_45:
    v37 = 0;
LABEL_35:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_37;
  }
  v26 = v25;
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v38);
  v27 = v39;
  if (!v39)
  {
    v28 = v38;
    v38 = 0;
    v40 = v28;
    WebCore::ServiceWorkerClients::openWindow(v24, v26, &v40, (uint64_t *)&v37);
    v30 = v40;
    v40 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
    v27 = v39;
  }
  if (v27 != -1)
    ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))off_1E33088B8[v27])(&v40, &v38);
  v14 = v37;
  v37 = 0;
  if (v14)
    goto LABEL_35;
LABEL_37:
  v31 = *(_QWORD *)(v10 + 16);
  if (v31)
  {
    if (*(_QWORD *)(v10 + 24) != v31)
    {
      v35 = *(objc_class **)(v31 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v38);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v38, v35, 0);
      v36 = v38;
      v38 = 0;
      if (v36)
      {
        if (*((_DWORD *)v36 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v36 + 16))(v36);
        else
          --*((_DWORD *)v36 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsServiceWorkerClientsPrototypeFunction_claim(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  objc_class *v27;
  WebCore::DOMGuardedObject *v28;
  WebCore::DOMGuardedObject *v29;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBC7D0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v29 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSServiceWorkerClients::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSServiceWorkerClients::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Clients", "claim", v16);
  }
  else
  {
    v23 = *(_QWORD *)(v17 + 24);
    v24 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
    if (v24)
    {
      WebCore::ServiceWorkerClients::claim(v23, v24, (uint64_t *)&v29);
      v14 = v29;
      v29 = 0;
      if (!v14)
        goto LABEL_29;
      goto LABEL_27;
    }
  }
  v29 = 0;
LABEL_27:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_29:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v27 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v29);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v29, v27, 0);
      v28 = v29;
      v29 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v28 + 16))(v28);
        else
          --*((_DWORD *)v28 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsServiceWorkerContainerPrototypeFunction_register(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  int v12;
  JSC::VM *v13;
  unint64_t v14;
  WebCore::DOMGuardedObject *v15;
  WebCore::DOMGuardedObject *v16;
  JSC::JSGlobalObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  int v26;
  JSC::JSCell *v27;
  __int16 v28;
  __int16 v29;
  WTF::StringImpl *v30;
  uint64_t Object;
  JSC::Structure *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  unsigned __int16 v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  int v46;
  int v47;
  char **v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v56;
  objc_class *v57;
  WebCore::DOMGuardedObject *v58;
  JSC::VM *v59;
  JSValue v60;
  unint64_t v63;
  uint64_t v64;
  WebCore::DOMGuardedObject *v65;
  WTF::StringImpl *v66;
  __int16 v67;
  int v68;
  WTF::StringImpl *v69;
  __int16 v70;
  WTF::StringImpl *v71;
  int v72;
  JSC::VM *v73;
  JSC::VM *v74;
  WebCore::DOMGuardedObject *v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 7);
  v7 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSDOMGlobalObject::s_info && v9 != 0);
  }
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBCF30);
  }
  v12 = *((_DWORD *)this + 291);
  if (v12)
    v13 = (JSC::VM *)(16 * (v12 & 0xFFFFFFFE));
  else
    v13 = 0;
  v14 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v13, a3);
  v15 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v16 = WebCore::DOMGuardedObject::DOMGuardedObject(v15, (unint64_t)this, v14);
  *(_QWORD *)v16 = &off_1E3226868;
  *((_DWORD *)v16 + 10) = 0;
  *((_BYTE *)v16 + 44) = 0;
  v65 = v16;
  v19 = *((_QWORD *)a2 + 5);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_113;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSServiceWorkerContainer::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSServiceWorkerContainer::s_info && v22 != 0);
  }
  if (!v21)
  {
LABEL_113:
    WebCore::rejectPromiseWithThisTypeError(v15, (WebCore::DeferredPromise *)"ServiceWorkerContainer", "register", v18);
LABEL_125:
    v65 = 0;
    goto LABEL_90;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v59 = (JSC::VM *)*((_QWORD *)this + 7);
    v60.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v17);
    JSC::VM::throwException(v59, this, v60);
    goto LABEL_125;
  }
  v25 = *(_QWORD *)(v19 + 24);
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScriptURL>,WebCore::IDLUSVString>>::convert(this, *((_QWORD *)a2 + 6), (uint64_t)&v75);
  v26 = v78;
  if (v78)
    goto LABEL_87;
  if ((unint64_t)(*((int *)a2 + 8) - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    v27 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
    v3 = (JSC::VM *)*((_QWORD *)this + 7);
    v73 = v3;
    if (((unint64_t)v27 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      goto LABEL_77;
    }
    v64 = v25;
    if (((unint64_t)v27 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v27)) == 0)
    {
      JSC::throwTypeError();
      v68 = 1;
LABEL_148:
      v53 = 1;
      goto LABEL_86;
    }
    v32 = (JSC::Structure *)Object;
    v63 = v14;
    WTF::AtomStringImpl::addLiteral();
    v34 = JSC::JSObject::get(v32, this, (unint64_t)v71);
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v33);
      else
        *(_DWORD *)v71 -= 2;
    }
    if (*((_DWORD *)v3 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v3))
    {
      v68 = 1;
      goto LABEL_148;
    }
    if (v34 == 10)
    {
      v30 = 0;
    }
    else
    {
      WebCore::valueToUSVString(this, v34, (uint64_t)&v71);
      if (v72)
      {
        v68 = 1;
        if (v72 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33088B8[v72])(&v69, &v71);
        goto LABEL_148;
      }
      v30 = v71;
    }
    WTF::AtomStringImpl::addLiteral();
    v35 = v71;
    v37 = JSC::JSObject::get(v32, this, (unint64_t)v71);
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v36);
      else
        *(_DWORD *)v35 -= 2;
    }
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    {
LABEL_145:
      v68 = 1;
      v14 = v63;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v41);
        else
          *(_DWORD *)v30 -= 2;
      }
      goto LABEL_148;
    }
    if (v37 == 10)
    {
      v29 = 0;
    }
    else
    {
      v71 = (WTF::StringImpl *)*((_QWORD *)this + 7);
      v38 = v71;
      v39 = WebCore::parseEnumeration<WebCore::WorkerType>(this, v37);
      if (*((_DWORD *)v38 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
        goto LABEL_145;
      if (v39 <= 0xFFu)
      {
LABEL_144:
        JSC::throwTypeError();
        goto LABEL_145;
      }
      v29 = v39 != 0;
    }
    WTF::AtomStringImpl::addLiteral();
    v40 = v71;
    v42 = JSC::JSObject::get(v32, this, (unint64_t)v71);
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v41);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
      goto LABEL_145;
    if (v42 == 10)
    {
      v28 = 0;
      v14 = v63;
      goto LABEL_76;
    }
    v3 = (JSC::VM *)*((_QWORD *)this + 7);
    v74 = v3;
    v71 = (WTF::StringImpl *)v42;
    v14 = v63;
    if ((v42 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v42 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v71, this);
      v43 = (uint64_t)v69;
      if (v69)
        goto LABEL_62;
      goto LABEL_111;
    }
    v43 = *(_QWORD *)(v42 + 8);
    if ((v43 & 1) != 0)
    {
      v43 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v42, this);
      if (!v43)
      {
LABEL_61:
        v69 = (WTF::StringImpl *)v43;
        if (v43)
        {
LABEL_62:
          v44 = *(_DWORD *)(v43 + 16);
          v45 = *(const char **)(v43 + 8);
          v46 = *(_DWORD *)(v43 + 4);
          if (v45 == "all" || v46 != 3)
          {
            if (v45 != "all" || v46 != 3)
            {
              v56 = "imports";
              if (v45 == "imports" || v46 != 7)
                goto LABEL_153;
              if ((v44 & 4) != 0)
              {
                if (*v45 != 105 || *(_DWORD *)(v45 + 1) != 1919905901 || *(_DWORD *)(v45 + 3) != 1937011311)
                  goto LABEL_67;
              }
              else
              {
                if (*(_WORD *)v45 != 105)
                {
LABEL_67:
                  v47 = 0;
                  v28 = 0;
                  goto LABEL_72;
                }
                v47 = 0;
                if (*(_QWORD *)(v45 + 2) != 0x72006F0070006DLL)
                {
                  v28 = 0;
                  goto LABEL_72;
                }
                v28 = 0;
                if (*(_QWORD *)(v45 + 6) != 0x7300740072006FLL)
                  goto LABEL_72;
              }
              v48 = &off_1E3302F28;
              goto LABEL_71;
            }
          }
          else if ((v44 & 4) != 0)
          {
            if (*v45 != 97 || *(_WORD *)(v45 + 1) != 27756)
              goto LABEL_67;
          }
          else if (*(_WORD *)v45 != 97 || *(_DWORD *)(v45 + 2) != 7077996)
          {
            goto LABEL_67;
          }
          v48 = &WebCore::parseEnumerationFromString<WebCore::ServiceWorkerUpdateViaCache>(WTF::String const&)::mappings;
          goto LABEL_71;
        }
LABEL_111:
        v28 = 0;
        v47 = 0;
        goto LABEL_74;
      }
    }
    else if (!v43)
    {
      goto LABEL_61;
    }
    *(_DWORD *)v43 += 2;
    goto LABEL_61;
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
LABEL_77:
  while (1)
  {
    v66 = v30;
    v67 = v29 | (v28 << 8);
    v68 = 0;
    if (!v78)
      break;
    v43 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_153:
    if (v45 == v56 && v46 == 7)
    {
      v48 = &off_1E3302F28;
    }
    else
    {
      if (v45 == "none" || v46 != 4)
      {
        if (v46 != 4 || v45 != "none")
        {
LABEL_169:
          v47 = 0;
          v28 = 0;
          v14 = v63;
          goto LABEL_72;
        }
      }
      else if ((v44 & 4) != 0)
      {
        if (*v45 != 110 || *(_WORD *)(v45 + 1) != 28271 || *((_WORD *)v45 + 1) != 25966)
          goto LABEL_169;
      }
      else
      {
        if (*(_WORD *)v45 != 110)
          goto LABEL_169;
        if (*((_DWORD *)v45 + 1) != 6619246 || *(_DWORD *)(v45 + 2) != 7209071)
          goto LABEL_169;
      }
      v48 = &off_1E3302F40;
    }
    v14 = v63;
LABEL_71:
    v28 = *((unsigned __int8 *)v48 + 16);
    v47 = 1;
LABEL_72:
    v69 = 0;
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v43, v41);
    else
      *(_DWORD *)v43 -= 2;
LABEL_74:
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
      goto LABEL_145;
    if (!v47)
      goto LABEL_144;
LABEL_76:
    v25 = v64;
  }
  LOBYTE(v71) = 0;
  v72 = -1;
  v49 = v77;
  if (v77 != -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t *))off_1E3309D00[v77])(&v69, &v71, &v76);
    v72 = v49;
  }
  v50 = v66;
  v66 = 0;
  v69 = v50;
  v70 = v67;
  WebCore::ServiceWorkerContainer::addRegistration(v25, (uint64_t)&v71, &v69, (uint64_t *)&v65);
  v52 = v69;
  v69 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v51);
    else
      *(_DWORD *)v52 -= 2;
  }
  if (v72 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3309CF0[v72])(&v69, &v71);
  v53 = 0;
LABEL_86:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3308F78[v53])(&v71, &v66);
  v26 = v78;
LABEL_87:
  if (v26 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3309D50[v26])(&v66, &v76);
  v15 = v65;
  v65 = 0;
  if (v15)
  {
LABEL_90:
    if (*((_DWORD *)v15 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v15 + 16))(v15);
    else
      --*((_DWORD *)v15 + 4);
  }
  v54 = *(_QWORD *)(v6 + 16);
  if (v54)
  {
    if (*(_QWORD *)(v6 + 24) != v54)
    {
      v57 = *(objc_class **)(v54 + 8);
      JSC::VM::clearException((JSC::VM *)v6);
      WebCore::DeferredPromise::create((unint64_t)this, v14, 0, &v75);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v75, v57, 0);
      v58 = v75;
      v75 = 0;
      if (v58)
      {
        if (*((_DWORD *)v58 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v58 + 16))(v58);
        else
          --*((_DWORD *)v58 + 4);
      }
    }
  }
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 10;
  return v14;
}

unint64_t WebCore::jsServiceWorkerContainerPrototypeFunction_getRegistration(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  WebCore::DOMGuardedObject *v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  objc_class *v31;
  WebCore::DOMGuardedObject *v32;
  WebCore::DOMGuardedObject *v33;
  WebCore::DOMGuardedObject *v34;
  int v35;
  WTF::StringImpl *v36;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBD44CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v33 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_46;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSServiceWorkerContainer::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSServiceWorkerContainer::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_46:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"ServiceWorkerContainer", "getRegistration", v16);
    v33 = 0;
LABEL_39:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_41;
  }
  v23 = *(_QWORD *)(v17 + 24);
  if (*((_DWORD *)a2 + 8) == 1 || (v24 = *((_QWORD *)a2 + 6), v24 == 10))
  {
    v25 = (WebCore::DOMGuardedObject *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v25 += 2;
    v35 = 0;
  }
  else
  {
    WebCore::valueToUSVString(this, v24, (uint64_t)&v34);
    v26 = v35;
    if (v35)
      goto LABEL_36;
    v25 = v34;
  }
  v34 = 0;
  v36 = v25;
  WebCore::ServiceWorkerContainer::getRegistration(v23, (uint64_t)&v36, (uint64_t *)&v33);
  v28 = v36;
  v36 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  v26 = v35;
LABEL_36:
  if (v26 != -1)
    ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))off_1E33088B8[v26])(&v36, &v34);
  v14 = v33;
  v33 = 0;
  if (v14)
    goto LABEL_39;
LABEL_41:
  v29 = *(_QWORD *)(v10 + 16);
  if (v29)
  {
    if (*(_QWORD *)(v10 + 24) != v29)
    {
      v31 = *(objc_class **)(v29 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v34);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v34, v31, 0);
      v32 = v34;
      v34 = 0;
      if (v32)
      {
        if (*((_DWORD *)v32 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v32 + 16))(v32);
        else
          --*((_DWORD *)v32 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsServiceWorkerContainerPrototypeFunction_getRegistrations(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBD694);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSServiceWorkerContainer::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSServiceWorkerContainer::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"ServiceWorkerContainer", "getRegistrations", v16);
    v27 = 0;
  }
  else
  {
    WebCore::ServiceWorkerContainer::getRegistrations(*(WebCore::ServiceWorkerContainer **)(v17 + 24), (uint64_t *)&v27);
    v14 = v27;
    v27 = 0;
    if (!v14)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsServiceWorkerContainerPrototypeFunction_startMessages(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "ServiceWorkerContainer", "startMessages");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSServiceWorkerContainer::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSServiceWorkerContainer::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "ServiceWorkerContainer", "startMessages");
  WebCore::ServiceWorkerContainer::startMessages(*(WebCore::ServiceWorkerContainer **)(v3 + 24), a2);
  return 10;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore32ServiceWorkerRegistrationOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::jsServiceWorkerGlobalScopeInstanceFunction_skipWaiting(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Object;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  BOOL v26;
  char **v27;
  BOOL v28;
  uint64_t v30;
  objc_class *v32;
  WebCore::DOMGuardedObject *v33;
  WebCore::DOMGuardedObject *v34;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBDA38);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v34 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v17 + 5) - 51 < 6)
    v17 = 10;
  if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    v18 = (uint64_t)this;
  else
    v18 = v17;
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject((JSC::JSCell *)v18);
    if (Object)
    {
      if (*(_BYTE *)(Object + 5) == 32)
      {
        Object = *(_QWORD *)(Object + 16);
        v20 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v21 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v22 = (char **)(16 * v20);
        if ((_DWORD)v20)
          v23 = v22 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v23 = 1;
        if (!v23)
        {
          do
          {
            v22 = (char **)v22[2];
            v21 = v22 != 0;
          }
          while (v22 != &WebCore::JSServiceWorkerGlobalScope::s_info && v22 != 0);
        }
        if (v21)
          goto LABEL_33;
      }
      else
      {
        v25 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v26 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v27 = (char **)(16 * v25);
        if ((_DWORD)v25)
          v28 = v27 == &WebCore::JSServiceWorkerGlobalScope::s_info;
        else
          v28 = 1;
        if (!v28)
        {
          do
          {
            v27 = (char **)v27[2];
            v26 = v27 != 0;
          }
          while (v27 != &WebCore::JSServiceWorkerGlobalScope::s_info && v27 != 0);
        }
        if (v26)
        {
LABEL_33:
          WebCore::ServiceWorkerGlobalScope::skipWaiting(*(_QWORD **)(Object + 3400), (uint64_t *)&v34);
          v14 = v34;
          v34 = 0;
          if (!v14)
            goto LABEL_48;
          goto LABEL_46;
        }
      }
    }
  }
  WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"ServiceWorkerGlobalScope", "skipWaiting", v16);
  v34 = 0;
LABEL_46:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_48:
  v30 = *(_QWORD *)(v10 + 16);
  if (v30)
  {
    if (*(_QWORD *)(v10 + 24) != v30)
    {
      v32 = *(objc_class **)(v30 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v34);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v34, v32, 0);
      v33 = v34;
      v34 = 0;
      if (v33)
      {
        if (*((_DWORD *)v33 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v33 + 16))(v33);
        else
          --*((_DWORD *)v33 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsServiceWorkerRegistrationPrototypeFunction_update(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBDC80);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSServiceWorkerRegistration::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSServiceWorkerRegistration::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"ServiceWorkerRegistration", "update", v16);
    v27 = 0;
  }
  else
  {
    WebCore::ServiceWorkerRegistration::update(*(_QWORD **)(v17 + 24), (uint64_t *)&v27);
    v14 = v27;
    v27 = 0;
    if (!v14)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsServiceWorkerRegistrationPrototypeFunction_unregister(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBDEC0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSServiceWorkerRegistration::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSServiceWorkerRegistration::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"ServiceWorkerRegistration", "unregister", v16);
  }
  else
  {
    WebCore::ServiceWorkerRegistration::unregister(*(_QWORD **)(v17 + 24), (uint64_t *)&v27);
    v14 = v27;
    if (!v27)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsServiceWorkerRegistrationPrototypeFunction_showNotification(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  JSC::VM *v43;
  JSValue v44;
  objc_class *v45;
  WebCore::DOMGuardedObject *v46;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v48;
  WebCore::DOMGuardedObject *v49;
  WebCore::DOMGuardedObject *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int16 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unsigned int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int16 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  WTF::StringImpl *v71;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBE2E8);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v49 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_57;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSServiceWorkerRegistration::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSServiceWorkerRegistration::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_57:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"ServiceWorkerRegistration", "showNotification", v17);
  }
  else if (*((_DWORD *)a2 + 8) == 1)
  {
    v43 = (JSC::VM *)*((_QWORD *)this + 7);
    v44.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v43, this, v44);
  }
  else
  {
    v24 = *(_QWORD *)(v18 + 24);
    v25 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
    if (v25)
    {
      v26 = (uint64_t *)v25;
      v27 = *((_QWORD *)a2 + 6);
      v50 = (WebCore::DOMGuardedObject *)v27;
      v28 = (JSC::VM *)*((_QWORD *)this + 7);
      if ((v27 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v27 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v50, this);
LABEL_33:
        if (*((_DWORD *)v28 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
          v30 = v62;
          if (hasExceptionsAfterHandlingTraps)
          {
            v61 = 1;
            v62 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v48);
              else
                *(_DWORD *)v30 -= 2;
            }
            v40 = 1;
LABEL_46:
            ((void (*)(WebCore::DOMGuardedObject **, WTF::StringImpl **))off_1E33088B8[v40])(&v50, &v60);
            v14 = v49;
            v49 = 0;
            if (!v14)
              goto LABEL_49;
            goto LABEL_47;
          }
        }
        else
        {
          v30 = v62;
        }
        v60 = v30;
        v61 = 0;
        if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
          v31 = 10;
        else
          v31 = *((_QWORD *)a2 + 7);
        WebCore::convertDictionary<WebCore::Notification::Options>((JSC::JSCell *)v31, this, (uint64_t)&v50);
        v32 = v59;
        if (!v59)
        {
          v60 = 0;
          v71 = v30;
          LOBYTE(v62) = (_BYTE)v50;
          v33 = v51;
          v51 = 0u;
          v63 = v33;
          v34 = v52;
          v52 = 0u;
          v64 = v34;
          v65 = v53;
          v35 = v54;
          v54 = 0u;
          v66 = v35;
          v67 = v55;
          v36 = v56;
          v56 = 0u;
          v68 = v36;
          v69 = v57;
          v70 = v58;
          LODWORD(v57) = v57 & 0xFFFFFFFE;
          WebCore::ServiceWorkerRegistration::showNotification(v24, v26, (uint64_t)&v71, (uint64_t)&v62, (uint64_t *)&v49);
          WebCore::Notification::Options::~Options((WebCore::Notification::Options *)&v62, v37);
          v39 = v71;
          v71 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v38);
            else
              *(_DWORD *)v39 -= 2;
          }
          v32 = v59;
        }
        if (v32 != -1)
          (*(&off_1E3309848 + v32))((int)&v62, (WebCore::Notification::Options *)&v50);
        v40 = 0;
        goto LABEL_46;
      }
      v29 = *(WTF::StringImpl **)(v27 + 8);
      if ((v29 & 1) != 0)
      {
        v29 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v27, this);
        if (!v29)
          goto LABEL_32;
      }
      else if (!v29)
      {
LABEL_32:
        v62 = v29;
        goto LABEL_33;
      }
      *(_DWORD *)v29 += 2;
      goto LABEL_32;
    }
  }
  v49 = 0;
LABEL_47:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_49:
  v41 = *(_QWORD *)(v10 + 16);
  if (v41)
  {
    if (*(_QWORD *)(v10 + 24) != v41)
    {
      v45 = *(objc_class **)(v41 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v50);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v50, v45, 0);
      v46 = v50;
      v50 = 0;
      if (v46)
      {
        if (*((_DWORD *)v46 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v46 + 16))(v46);
        else
          --*((_DWORD *)v46 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsServiceWorkerRegistrationPrototypeFunction_getNotifications(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  JSC::JSCell *v24;
  JSC::VM *v25;
  uint64_t Object;
  JSC::Structure *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  JSC::VM *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WebCore::ServiceWorkerContainer *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  objc_class *v42;
  WebCore::DOMGuardedObject *v43;
  WTF::StringImpl *v44;
  int hasExceptionsAfterHandlingTraps;
  WebCore::DOMGuardedObject *v46;
  int v47;
  JSC::VM *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBE7A8);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) == 0)
  {
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSServiceWorkerRegistration::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSServiceWorkerRegistration::s_info && v20 != 0);
    }
    if (v19)
    {
      v23 = *(_QWORD *)(v17 + 24);
      if (*((_DWORD *)a2 + 8) == 1)
        goto LABEL_42;
      v24 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
      v25 = (JSC::VM *)*((_QWORD *)this + 7);
      v48 = v25;
      if (((unint64_t)v24 & 0xFFFFFFFFFFFFFFF7) == 2)
        goto LABEL_42;
      if (((unint64_t)v24 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v24)) == 0)
      {
        JSC::throwTypeError();
        goto LABEL_63;
      }
      v27 = (JSC::Structure *)Object;
      WTF::AtomStringImpl::addLiteral();
      v29 = JSC::JSObject::get(v27, this, (unint64_t)v50);
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v28);
        else
          *(_DWORD *)v50 -= 2;
      }
      if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
        goto LABEL_63;
      if (v29 == 10)
      {
LABEL_42:
        v32 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v32 += 2;
        goto LABEL_44;
      }
      v50 = (WTF::StringImpl *)v29;
      v30 = (JSC::VM *)*((_QWORD *)this + 7);
      if ((v29 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v29 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v50, this);
        goto LABEL_40;
      }
      v31 = *(WTF::StringImpl **)(v29 + 8);
      if ((v31 & 1) != 0)
      {
        v31 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v29, this);
        if (!v31)
          goto LABEL_39;
      }
      else if (!v31)
      {
LABEL_39:
        v49 = v31;
LABEL_40:
        if (!*((_DWORD *)v30 + 20))
        {
          v32 = v49;
LABEL_44:
          v47 = 0;
          v46 = 0;
          v49 = v32;
          v33 = *(WebCore::ServiceWorkerContainer **)(v23 + 424);
          v34 = WebCore::ServiceWorkerContainer::ensureSWClientConnection(v33);
          ++*(_DWORD *)(*((_QWORD *)v33 + 8) + 16);
          v35 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v35 = &off_1E347ED28;
          *((_QWORD *)v35 + 1) = v14;
          *((_QWORD *)v35 + 2) = v33;
          v50 = v35;
          (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v34 + 176))(v34, v23 + 152, &v49, &v50);
          v37 = v50;
          v50 = 0;
          if (v37)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v37 + 8))(v37);
          v38 = v49;
          v49 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v36);
            else
              *(_DWORD *)v38 -= 2;
          }
          v39 = 0;
          v14 = 0;
LABEL_50:
          ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))off_1E3309858[v39])(&v50, &v46);
          if (!v14)
            goto LABEL_53;
          goto LABEL_51;
        }
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v30);
        v32 = v49;
        if (!hasExceptionsAfterHandlingTraps)
          goto LABEL_44;
        v49 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v44);
          else
            *(_DWORD *)v32 -= 2;
        }
LABEL_63:
        v39 = 1;
        v47 = 1;
        goto LABEL_50;
      }
      *(_DWORD *)v31 += 2;
      goto LABEL_39;
    }
  }
  WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"ServiceWorkerRegistration", "getNotifications", v16);
LABEL_51:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_53:
  v40 = *(_QWORD *)(v10 + 16);
  if (v40)
  {
    if (*(_QWORD *)(v10 + 24) != v40)
    {
      v42 = *(objc_class **)(v40 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v46);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v46, v42, 0);
      v43 = v46;
      v46 = 0;
      if (v43)
      {
        if (*((_DWORD *)v43 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v43 + 16))(v43);
        else
          --*((_DWORD *)v43 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25ServiceWorkerRegistration22GetNotificationOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::jsServiceWorkerWindowClientPrototypeFunction_focus(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *v27;
  WebCore::DOMGuardedObject *v28;
  WebCore::DOMGuardedObject *v29;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBEA74);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v29 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSServiceWorkerWindowClient::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSServiceWorkerWindowClient::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"WindowClient", "focus", v16);
  }
  else
  {
    v23 = *(_QWORD *)(v17 + 24);
    v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
    if (v24)
    {
      WebCore::ServiceWorkerWindowClient::focus(v23, v24, (uint64_t *)&v29);
      v14 = v29;
      v29 = 0;
      if (!v14)
        goto LABEL_29;
      goto LABEL_27;
    }
  }
  v29 = 0;
LABEL_27:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_29:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v27 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v29);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v29, v27, 0);
      v28 = v29;
      v29 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v28 + 16))(v28);
        else
          --*((_DWORD *)v28 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsServiceWorkerWindowClientPrototypeFunction_navigate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  JSC::VM *v33;
  JSValue v34;
  objc_class *v35;
  WebCore::DOMGuardedObject *v36;
  WebCore::DOMGuardedObject *v37;
  WebCore::DOMGuardedObject *v38;
  int v39;
  WTF::StringImpl *v40;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FBED60);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v37 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_42;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSServiceWorkerWindowClient::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSServiceWorkerWindowClient::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_42:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"WindowClient", "navigate", v17);
    goto LABEL_45;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v33 = (JSC::VM *)*((_QWORD *)this + 7);
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v33, this, v34);
    goto LABEL_45;
  }
  v24 = *(_QWORD *)(v18 + 24);
  v25 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v25)
  {
LABEL_45:
    v37 = 0;
LABEL_35:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_37;
  }
  v26 = (_QWORD *)v25;
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v38);
  v27 = v39;
  if (!v39)
  {
    v28 = v38;
    v38 = 0;
    v40 = v28;
    WebCore::ServiceWorkerWindowClient::navigate(v24, v26, &v40, (uint64_t *)&v37);
    v30 = v40;
    v40 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
    v27 = v39;
  }
  if (v27 != -1)
    ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))off_1E33088B8[v27])(&v40, &v38);
  v14 = v37;
  v37 = 0;
  if (v14)
    goto LABEL_35;
LABEL_37:
  v31 = *(_QWORD *)(v10 + 16);
  if (v31)
  {
    if (*(_QWORD *)(v10 + 24) != v31)
    {
      v35 = *(objc_class **)(v31 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v38);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v38, v35, 0);
      v36 = v38;
      v38 = 0;
      if (v36)
      {
        if (*((_DWORD *)v36 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v36 + 16))(v36);
        else
          --*((_DWORD *)v36 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsShadowRootPrototypeFunction_elementFromPoint(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WebCore::Node *v13;
  double v14;
  WebCore::Node *v15;
  JSC::VM *v16;
  double v17;
  JSC::JSGlobalObject *v18;
  WebCore::Element *v19;
  void *v20;
  unint64_t v21;
  WebCore::Node *v22;
  JSValue v25;
  double v26;
  double v27;
  JSC::VM *v28;
  JSC::VM *v29;
  WebCore::Node *v30;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "ShadowRoot", "elementFromPoint");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSShadowRoot::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSShadowRoot::s_info && v9 != 0);
  }
  if (!v8)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "ShadowRoot", "elementFromPoint");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v25);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = (WebCore::Node *)*((_QWORD *)a2 + 6);
  v29 = v4;
  v30 = v13;
  if ((unint64_t)v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if ((unint64_t)v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, this);
    v14 = v26;
  }
  else
  {
    *(_QWORD *)&v14 = (char *)v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v15 = (WebCore::Node *)*((_QWORD *)a2 + 7);
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v16;
  v30 = v15;
  if ((unint64_t)v15 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v15;
  }
  else if ((unint64_t)v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, this);
    v17 = v27;
  }
  else
  {
    *(_QWORD *)&v17 = (char *)v15 - 0x2000000000000;
  }
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v18 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::TreeScope::elementFromPoint((WTF *)(v12 + 96), 0, &v30, v14, v17);
  if (!v30)
    return 2;
  v21 = WebCore::toJS(this, v18, v30, v19);
  v22 = v30;
  v30 = 0;
  if (v22)
  {
    if (*((_DWORD *)v22 + 6) == 2)
    {
      if ((*((_WORD *)v22 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v22, v20);
    }
    else
    {
      *((_DWORD *)v22 + 6) -= 2;
    }
  }
  return v21;
}

_BYTE *WebCore::jsShadowRootPrototypeFunction_elementsFromPoint(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF *v13;
  double v14;
  WTF *v15;
  JSC::VM *v16;
  double v17;
  JSC::VM **v18;
  WebCore::Element *v19;
  void *v20;
  uint64_t v21;
  WTF *v22;
  JSValue v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  JSC::VM *v31;
  WTF *v32;
  int v33;
  unsigned int v34;
  JSC::VM *v35;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v31 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "ShadowRoot", "elementsFromPoint");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSShadowRoot::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSShadowRoot::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "ShadowRoot", "elementsFromPoint");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v25);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = (WTF *)*((_QWORD *)a2 + 6);
  v32 = v13;
  v35 = v4;
  if ((unint64_t)v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if ((unint64_t)v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v32, this);
    v14 = v29;
  }
  else
  {
    *(_QWORD *)&v14 = (char *)v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v15 = (WTF *)*((_QWORD *)a2 + 7);
  v32 = v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v16;
  if ((unint64_t)v15 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v15;
  }
  else if ((unint64_t)v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v32, this);
    v17 = v30;
  }
  else
  {
    *(_QWORD *)&v17 = (char *)v15 - 0x2000000000000;
  }
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v18 = *(JSC::VM ***)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::TreeScope::elementsFromPoint((WTF *)(v12 + 96), 0, a3, (uint64_t)&v32, v14, v17);
  v21 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Element>>>::convert<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul>(this, v18, (uint64_t)&v32, v19);
  if (v34)
  {
    v26 = v32;
    v27 = 8 * v34;
    do
    {
      v28 = *(_QWORD *)v26;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        if (*(_DWORD *)(v28 + 24) == 2)
        {
          if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v28, v20);
        }
        else
        {
          *(_DWORD *)(v28 + 24) -= 2;
        }
      }
      v26 = (WTF *)((char *)v26 + 8);
      v27 -= 8;
    }
    while (v27);
  }
  v22 = v32;
  if (v32)
  {
    v32 = 0;
    v33 = 0;
    WTF::fastFree(v22, v20);
  }
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsShadowRootPrototypeFunction_getAnimations(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  JSC::VM *v11;
  WebCore::Document *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v22;
  WTF *v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;

  v4 = *((_QWORD *)a2 + 5);
  v22 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "ShadowRoot", "getAnimations");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRoot::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRoot::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "ShadowRoot", "getAnimations");
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(JSC::VM **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v12 = *(WebCore::Document **)(*(_QWORD *)(v10 + 40) + 8);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = off_1E33A7EC8;
  v13[1] = v10;
  v26 = v13;
  WebCore::Document::matchingAnimations(v12, &v26, (uint64_t)&v23);
  v14 = v26;
  v26 = 0;
  if (v14)
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  v16 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::WebAnimation>>>::convert<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul>((uint64_t)this, v11, (uint64_t)&v23);
  if (v25)
  {
    v17 = v23;
    v18 = 8 * v25;
    do
    {
      v19 = *(_DWORD **)v17;
      *(_QWORD *)v17 = 0;
      if (v19)
      {
        if (v19[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 72))(v19);
        else
          --v19[6];
      }
      v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  v20 = v23;
  if (v23)
  {
    v23 = 0;
    v24 = 0;
    WTF::fastFree(v20, v15);
  }
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsShadowRootPrototypeFunction_setHTMLUnsafe(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::ContainerNode *v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  uint64_t v15;
  WTF *v16;
  JSValue v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  JSValue v24;
  WTF::StringImpl *v25;
  JSC::VM *v26;
  WTF *v27;
  uint64_t v28;
  _BYTE v29[40];
  uint64_t v30;
  JSC::JSGlobalObject *v31;
  int v32;
  WTF::StringImpl *v33;
  char v34;
  _BYTE v35[8];
  WTF::StringImpl *v36;
  char v37;
  _BYTE v38[8];
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "ShadowRoot", "setHTMLUnsafe");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSShadowRoot::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSShadowRoot::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "ShadowRoot", "setHTMLUnsafe");
  v11 = *(WebCore::ContainerNode **)(v5 + 24);
  v27 = (WTF *)v29;
  v28 = 4;
  v29[32] = 0;
  v30 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v31 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v27;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedHTML>,WebCore::IDLDOMString>>::convert((JSC::VM **)this, *((_QWORD *)a2 + 6), (uint64_t)v38);
    v13 = v41;
    if (v41)
    {
      v15 = 0;
LABEL_21:
      if (v13 != -1)
        ((void (*)(int *, uint64_t *))off_1E3309CC0[v13])(&v32, &v39);
      goto LABEL_23;
    }
    v35[0] = 0;
    LODWORD(v36) = -1;
    v14 = v40;
    if (v40 != -1)
    {
      ((void (*)(int *, _BYTE *, uint64_t *))off_1E3309CB0[v40])(&v32, v35, &v39);
      LODWORD(v36) = v14;
    }
    WebCore::ShadowRoot::setHTMLUnsafe(v11, (uint64_t)v35, (uint64_t)&v32);
    if ((_DWORD)v36 != -1)
      ((void (*)(char *, _BYTE *))off_1E3309CA0[v36])(&v37, v35);
    if (!v34)
    {
      v15 = 10;
LABEL_20:
      v13 = v41;
      goto LABEL_21;
    }
    v12 = (WTF::StringImpl *)v32;
    v35[0] = v32;
    v23 = v33;
    v33 = 0;
    v36 = v23;
    if (!*((_QWORD *)v4 + 2))
    {
      v24.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v36);
      JSC::VM::throwException(v4, this, v24);
      v23 = v36;
    }
    v36 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v12);
      else
        *(_DWORD *)v23 -= 2;
    }
    if (v34)
    {
      v25 = v33;
      v33 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 != 2)
        {
          v15 = 0;
          *(_DWORD *)v25 -= 2;
          goto LABEL_20;
        }
        WTF::StringImpl::destroy(v25, v12);
      }
    }
    v15 = 0;
    goto LABEL_20;
  }
  v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  v15 = JSC::VM::throwException(v4, this, v19);
LABEL_23:
  if (HIDWORD(v28))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v27, v31);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v30;
    if (HIDWORD(v28))
    {
      v20 = v27;
      v21 = 8 * HIDWORD(v28);
      do
      {
        v22 = *(_QWORD *)v20;
        *(_QWORD *)v20 = 0;
        if (v22)
        {
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v22, v12);
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
        }
        v20 = (WTF *)((char *)v20 + 8);
        v21 -= 8;
      }
      while (v21);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v30;
  }
  v16 = v27;
  if (v29 != (_BYTE *)v27 && v27 != 0)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    WTF::fastFree(v16, v12);
  }
  return (_BYTE *)v15;
}

_BYTE *WebCore::jsShadowRootPrototypeFunction_getHTML(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF *v31;
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[2];
  int v35;
  char v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[40];

  v26 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "ShadowRoot", "getHTML");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSShadowRoot::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSShadowRoot::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "ShadowRoot", "getHTML");
  if (*((_DWORD *)a2 + 8) == 1)
    v10 = 10;
  else
    v10 = *((_QWORD *)a2 + 6);
  v11 = *(_QWORD *)(v4 + 24);
  WebCore::convertDictionary<WebCore::GetHTMLOptions>((JSC::JSCell *)v10, this, (uint64_t)v27);
  v12 = v30;
  if (!v30)
  {
    v31 = 0;
    v32 = 0;
    v33[0] = &off_1E33AD290;
    v33[1] = 0;
    v34[0] = 0;
    v34[1] = 0;
    v35 = 0;
    v36 = 1;
    v37 = 1;
    v39 = 0;
    v38 = 0;
    v40 = 0;
    v41 = v27[0];
    v42 = v28;
    v13 = v29;
    v28 = 0;
    v29 = 0;
    v43 = v13;
    WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v44, (uint64_t *)&v31);
    v44[16] = 0;
    v44[32] = 0;
    WebCore::MarkupAccumulator::serializeNodesWithNamespaces((WebCore::MarkupAccumulator *)v33, v11, 1, 0);
    v15 = v34[0];
    if (v34[0]
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v34),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)v34),
          (v15 = v34[0]) != 0))
    {
      *(_DWORD *)v15 += 2;
    }
    WebCore::MarkupAccumulator::~MarkupAccumulator((WebCore::MarkupAccumulator *)v33, v14);
    if (HIDWORD(v32))
      WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v31, (WTF *)((char *)v31 + 24 * HIDWORD(v32)));
    v17 = v31;
    if (v31)
    {
      v31 = 0;
      LODWORD(v32) = 0;
      WTF::fastFree(v17, v16);
    }
    v18 = *((_QWORD *)this + 7);
    v19 = (uint64_t *)(v18 + 41968);
    if (!v15)
    {
      v21 = *v19;
LABEL_31:
      v12 = v30;
      goto LABEL_32;
    }
    v20 = *(_DWORD *)(v15 + 4);
    if (v20)
    {
      if (v20 != 1)
      {
LABEL_26:
        v21 = *(_QWORD *)(v18 + 64760);
        if (!v21 || v15 != *(_QWORD *)(v21 + 8))
          v21 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_29;
      }
      v23 = *(unsigned __int8 **)(v15 + 8);
      if ((*(_BYTE *)(v15 + 16) & 4) != 0)
      {
        v24 = *v23;
      }
      else
      {
        v25 = *(unsigned __int16 *)v23;
        if (v25 > 0xFF)
          goto LABEL_26;
        v24 = v25;
      }
      v21 = *(_QWORD *)(v18 + 8 * v24 + 42216);
    }
    else
    {
      v21 = *v19;
    }
LABEL_29:
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v15, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v15 -= 2;
    goto LABEL_31;
  }
  v21 = 0;
LABEL_32:
  if (v12 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E3309CD0[v12])(v33, v27);
  return (_BYTE *)v21;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore4FileENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a2;
    v5 = 8 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[4];
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore13WorkerOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore13WorkerOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore13WorkerOptionsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore13WorkerOptionsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_WORD *)a2 = *(_WORD *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12SharedWorkerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 72))(result);
    else
      --result[6];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12SharedWorkerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6StringEN7WebCore13WorkerOptionsEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E3309D10[v3])(&v5, a2);
    *(_DWORD *)(a2 + 16) = -1;
  }
  return result;
}

uint64_t WebCore::jsSharedWorkerGlobalScopeInstanceFunction_close(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  unint64_t v4;
  uint64_t Object;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  WTF::StringImpl *v26;

  v3 = this;
  v4 = *((_QWORD *)a2 + 5);
  v23 = *(_QWORD *)(this + 56);
  if ((v4 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v4 + 5) - 51 < 6)
    v4 = 10;
  if ((v4 & 0xFFFFFFFFFFFFFFF7) != 2)
    this = v4;
  if ((this & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError(v3, (int)&v23, "SharedWorkerGlobalScope", "close");
  Object = JSC::JSCell::getObject((JSC::JSCell *)this);
  if (!Object)
    return (uint64_t)WebCore::throwThisTypeError(v3, (int)&v23, "SharedWorkerGlobalScope", "close");
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v18 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSSharedWorkerGlobalScope::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSSharedWorkerGlobalScope::s_info && v20 != 0);
    }
    if (v19)
      goto LABEL_19;
    return (uint64_t)WebCore::throwThisTypeError(v3, (int)&v23, "SharedWorkerGlobalScope", "close");
  }
  Object = *(_QWORD *)(Object + 16);
  v6 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSharedWorkerGlobalScope::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSharedWorkerGlobalScope::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError(v3, (int)&v23, "SharedWorkerGlobalScope", "close");
LABEL_19:
  v11 = *(_QWORD *)(Object + 3400);
  if (!*(_BYTE *)(v11 + 401))
  {
    *(_BYTE *)(v11 + 401) = 1;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E347D0E0;
    v24 = v12;
    v25 = 1;
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 360) + 48);
    v26 = 0;
    (*(void (**)(uint64_t, _QWORD **, WTF::StringImpl **))(*(_QWORD *)v13 + 32))(v13, &v24, &v26);
    v15 = v26;
    v26 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v24;
    v24 = 0;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  }
  return 10;
}

_BYTE *WebCore::jsSourceBufferPrototypeFunction_appendBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::JSArrayBufferView *v12;
  _DWORD *v13;
  int v14;
  uint64_t (*v15)();
  WTF *v16;
  WTF::String *v17;
  uint64_t v18;
  int v19;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSValue v25;
  JSC::VM *v26;
  int v27[2];
  WTF::StringImpl *v28;
  char v29;
  _BYTE v30[8];
  int v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  char v34;
  _DWORD *v35;
  int v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SourceBuffer", "appendBuffer");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSourceBuffer::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSourceBuffer::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SourceBuffer", "appendBuffer");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v22);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 6);
  v32 = v4;
  v13 = (_DWORD *)JSC::JSArrayBuffer::toWrapped((uint64_t)v4, (uint64_t)v12);
  if (v13)
  {
    *v13 += 2;
    v14 = 1;
    LODWORD(v28) = 1;
    *(_QWORD *)v27 = 0;
    v35 = v13;
    v36 = 1;
    v37 = 0;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)v30);
  }
  else
  {
    JSC::JSArrayBufferView::toWrapped(v12, (JSC::ArrayBufferView **)v27);
    if (!*(_QWORD *)v27)
    {
      JSC::throwTypeError();
      v18 = 0;
      v19 = 1;
      v37 = 1;
LABEL_24:
      ((void (*)(int *, _DWORD **))off_1E330A690[v19])(v27, &v35);
      return (_BYTE *)v18;
    }
    v14 = 0;
    v35 = *(_DWORD **)v27;
    v36 = 0;
    v37 = 0;
  }
  v30[0] = 0;
  v31 = -1;
  v15 = off_1E330A680[v14];
  ((void (*)(int *, _BYTE *, _DWORD **))v15)(v27, v30, &v35);
  v31 = v14;
  LOBYTE(v32) = 0;
  LODWORD(v33) = -1;
  ((void (*)(int *, JSC::VM **, _BYTE *))v15)(v27, &v32, v30);
  LODWORD(v33) = v14;
  *(_QWORD *)v27 = &v34;
  v16 = (WTF *)((uint64_t (*)(int *, JSC::VM **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_1[v14])(v27, &v32);
  WebCore::SourceBuffer::appendBufferInternal((WTF::NativePromiseBase *)(v11 - 40), v16, v17, (uint64_t)v27);
  if ((_DWORD)v33 != -1)
    ((void (*)(char *, JSC::VM **))off_1E330A670[v33])(&v34, &v32);
  LODWORD(v33) = -1;
  if (v31 != -1)
    ((void (*)(char *, _BYTE *))off_1E330A670[v31])(&v34, v30);
  if (v29)
  {
    v23 = (WTF::StringImpl *)LOBYTE(v27[0]);
    LOBYTE(v32) = v27[0];
    v24 = v28;
    v33 = v28;
    if (!*((_QWORD *)v4 + 2))
    {
      v25.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v27[0]), (JSC::JSGlobalObject *)&v33);
      JSC::VM::throwException(v4, this, v25);
      v24 = v33;
    }
    v33 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    v18 = 0;
  }
  else
  {
    v18 = 10;
  }
  v19 = v37;
  if (v37 != -1)
    goto LABEL_24;
  return (_BYTE *)v18;
}

uint64_t WebCore::jsSourceBufferPrototypeFunction_abort(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  JSC::VM *v15;
  char v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SourceBuffer", "abort");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSourceBuffer::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSourceBuffer::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SourceBuffer", "abort");
  WebCore::SourceBuffer::abort((_QWORD *)(*(_QWORD *)(v4 + 24) - 40), &v18);
  if (!v20)
    return 10;
  v12 = (WTF::StringImpl *)v18;
  v16 = v18;
  v13 = v19;
  v17 = v19;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v18, (JSC::JSGlobalObject *)&v17);
    JSC::VM::throwException(v5, this, v14);
    v13 = v17;
  }
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  return 0;
}

uint64_t WebCore::jsSourceBufferPrototypeFunction_remove(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  JSC::VM *v16;
  double v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  JSValue v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  JSValue v24;
  double v25;
  double v26;
  uint64_t v27;
  int v28[2];
  WTF::StringImpl *v29;
  char v30;
  _QWORD v31[2];
  uint64_t v32;
  WTF::StringImpl *v33;

  v4 = *((_QWORD *)this + 7);
  v27 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v27, "SourceBuffer", "remove");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSourceBuffer::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSourceBuffer::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v27, "SourceBuffer", "remove");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v21);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v28 = v13;
  v32 = v4;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v28, this);
    v14 = v25;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v15 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v28 = v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v15 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v15;
  }
  else if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v28, this);
    v17 = v26;
  }
  else
  {
    *(_QWORD *)&v17 = v15 - 0x2000000000000;
  }
  if (!*((_DWORD *)v16 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v16))
  {
    v32 = WTF::MediaTime::createWithDouble((WTF::MediaTime *)0x3B9ACA00, v14);
    v33 = v18;
    v31[0] = WTF::MediaTime::createWithDouble((WTF::MediaTime *)0x3B9ACA00, v17);
    v31[1] = v19;
    WebCore::SourceBuffer::remove((WTF::StringImpl *)(v12 - 40), (const WTF::MediaTime *)&v32, (const WTF::MediaTime *)v31, (uint64_t)v28);
    if (!v30)
      return 10;
    v22 = (WTF::StringImpl *)LOBYTE(v28[0]);
    LOBYTE(v32) = v28[0];
    v23 = v29;
    v33 = v29;
    if (!*(_QWORD *)(v4 + 16))
    {
      v24.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v28[0]), (JSC::JSGlobalObject *)&v33);
      JSC::VM::throwException((JSC::VM *)v4, this, v24);
      v23 = v33;
    }
    v33 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  return 0;
}

_BYTE *WebCore::jsSourceBufferPrototypeFunction_changeType(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, double a4, double a5, float a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char **v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  JSValue v24;
  WTF::StringImpl *v25;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSValue v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36[2];
  WTF::StringImpl *v37;
  char v38;

  v7 = *((_QWORD *)this + 7);
  v31 = v7;
  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "SourceBuffer", "changeType");
  v9 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSSourceBuffer::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSSourceBuffer::s_info && v11 != 0);
  }
  if (!v10)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "SourceBuffer", "changeType");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v7, this, v24);
  }
  v14 = *(_QWORD *)(v8 + 24);
  v15 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v36 = v15;
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
  {
    v16 = *(WTF::StringImpl **)(v15 + 8);
    if ((v16 & 1) != 0)
    {
      v16 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, this);
      if (!v16)
        goto LABEL_18;
    }
    else if (!v16)
    {
LABEL_18:
      v34 = v16;
      goto LABEL_19;
    }
    *(_DWORD *)v16 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v36, this);
LABEL_19:
  if (*(_DWORD *)(v7 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7);
    v17 = v34;
    if (hasExceptionsAfterHandlingTraps)
    {
      v33 = 1;
      v34 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v25);
        else
          *(_DWORD *)v17 -= 2;
      }
      v20 = 0;
      v21 = 1;
      goto LABEL_27;
    }
  }
  else
  {
    v17 = v34;
  }
  v33 = 0;
  v32 = 0;
  v34 = v17;
  WebCore::SourceBuffer::changeType((WTF::StringImpl *)(v14 - 40), &v34, (uint64_t)v36, a4, a5, a6);
  v19 = v34;
  v34 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (v38)
  {
    v27 = (WTF::StringImpl *)LOBYTE(v36[0]);
    LOBYTE(v34) = v36[0];
    v28 = v37;
    v37 = 0;
    v35 = v28;
    if (!*(_QWORD *)(v7 + 16))
    {
      v29.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v36[0]), (JSC::JSGlobalObject *)&v35);
      JSC::VM::throwException((JSC::VM *)v7, this, v29);
      v28 = v35;
    }
    v35 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (v38)
    {
      v30 = v37;
      v37 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 != 2)
        {
          v20 = 0;
          *(_DWORD *)v30 -= 2;
          goto LABEL_26;
        }
        WTF::StringImpl::destroy(v30, v27);
      }
    }
    v20 = 0;
    goto LABEL_26;
  }
  v20 = 10;
LABEL_26:
  v21 = 0;
LABEL_27:
  ((void (*)(int *, uint64_t *))off_1E33088B8[v21])(v36, &v32);
  return (_BYTE *)v20;
}

unint64_t WebCore::jsSourceBufferListPrototypeFunction_item(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  JSValue v14;
  JSC::VM *v15;
  _DWORD v16[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SourceBufferList", "item");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSourceBufferList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSourceBufferList::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SourceBufferList", "item");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v16);
    if (v16[1])
    {
      return 0;
    }
    else if (*(_DWORD *)(v11 + 68) > v16[0] && (v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v16[0])) != 0)
    {
      return WebCore::wrap<WebCore::SourceBuffer>((uint64_t)this, *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), v12);
    }
    else
    {
      return 2;
    }
  }
}

uint64_t WebCore::jsSpeechRecognitionPrototypeFunction_start(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  char v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "webkitSpeechRecognition", "start");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSpeechRecognition::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSpeechRecognition::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "webkitSpeechRecognition", "start");
  WebCore::SpeechRecognition::startRecognition((WebCore::SpeechRecognition *)(*(_QWORD *)(v4 + 24) - 56), (uint64_t)&v19);
  if (!v21)
    return 10;
  v12 = (WTF::StringImpl *)v19;
  v17 = v19;
  v13 = v20;
  v20 = 0;
  v18 = v13;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v18);
    JSC::VM::throwException(v5, this, v14);
    v13 = v18;
  }
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v21)
  {
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 != 2)
      {
        result = 0;
        *(_DWORD *)v15 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v15, v12);
    }
  }
  return 0;
}

uint64_t WebCore::jsSpeechRecognitionPrototypeFunction_stop(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v15;

  v3 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "webkitSpeechRecognition", "stop");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSpeechRecognition::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSpeechRecognition::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "webkitSpeechRecognition", "stop");
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_DWORD *)(v9 + 48);
  v11 = v10 > 4;
  v12 = (1 << v10) & 0x19;
  if (v11 || v12 == 0)
  {
    (*(void (**)(_QWORD, _QWORD, JSC::CallFrame *))(**(_QWORD **)(v9 + 72) + 40))(*(_QWORD *)(v9 + 72), *(_QWORD *)(v9 - 48), a3);
    *(_DWORD *)(v9 + 48) = 3;
  }
  return 10;
}

uint64_t WebCore::jsSpeechRecognitionPrototypeFunction_abort(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "webkitSpeechRecognition", "abort");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSpeechRecognition::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSpeechRecognition::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "webkitSpeechRecognition", "abort");
  v9 = *(_QWORD *)(v3 + 24);
  if ((*(_DWORD *)(v9 + 48) | 4) != 4)
  {
    (*(void (**)(_QWORD, _QWORD, JSC::CallFrame *))(**(_QWORD **)(v9 + 72) + 48))(*(_QWORD *)(v9 + 72), *(_QWORD *)(v9 - 48), a3);
    *(_DWORD *)(v9 + 48) = 4;
  }
  return 10;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27SpeechRecognitionErrorEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22SpeechRecognitionEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v2 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *(unsigned int *)(v2 + 20);
      if ((_DWORD)v3)
      {
        v4 = *(uint64_t **)(v2 + 8);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          *v4 = 0;
          if (v6)
            WTF::RefCounted<WebCore::SpeechRecognitionResult>::deref(v6, a2);
          ++v4;
          v5 -= 8;
        }
        while (v5);
      }
      v7 = *(WTF **)(v2 + 8);
      if (v7)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v7, a2);
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

unint64_t WebCore::jsSpeechRecognitionResultPrototypeFunction_item(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF *v12;
  JSValue v14;
  JSC::VM *v15;
  _DWORD v16[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SpeechRecognitionResult", "item");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSpeechRecognitionResult::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSpeechRecognitionResult::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SpeechRecognitionResult", "item");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v16);
    if (v16[1])
    {
      return 0;
    }
    else if (*(_DWORD *)(v11 + 20) > v16[0] && (v12 = *(WTF **)(*(_QWORD *)(v11 + 8) + 8 * v16[0])) != 0)
    {
      return WebCore::wrap<WebCore::SpeechRecognitionAlternative>(*(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), v12);
    }
    else
    {
      return 2;
    }
  }
}

unint64_t WebCore::jsSpeechRecognitionResultListPrototypeFunction_item(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF *v12;
  JSValue v14;
  JSC::VM *v15;
  _DWORD v16[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SpeechRecognitionResultList", "item");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSpeechRecognitionResultList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSpeechRecognitionResultList::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SpeechRecognitionResultList", "item");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v16);
    if (v16[1])
    {
      return 0;
    }
    else if (*(_DWORD *)(v11 + 20) > v16[0] && (v12 = *(WTF **)(*(_QWORD *)(v11 + 8) + 8 * v16[0])) != 0)
    {
      return WebCore::toJS(*(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), v12);
    }
    else
    {
      return 2;
    }
  }
}

uint64_t WebCore::jsSpeechSynthesisPrototypeFunction_speak(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  JSValue v24;
  JSC::VM *v25;
  JSC::VM *v26;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "SpeechSynthesis", "speak");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSSpeechSynthesis::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSSpeechSynthesis::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "SpeechSynthesis", "speak");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v24);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v26 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSSpeechSynthesisUtterance::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSSpeechSynthesisUtterance::s_info && v20 != 0);
    }
    if (v19)
    {
      WebCore::SpeechSynthesis::speak((WebCore::SpeechSynthesis *)(v16 - 56), (WebCore::SpeechSynthesisUtterance *)(*(_QWORD *)(v17 + 24) - 40));
      return 10;
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v26, 0, "utterance", 10, "SpeechSynthesis", 16, a8, "speak", 6, "SpeechSynthesisUtterance", 25);
      return 0;
    }
  }
}

uint64_t WebCore::jsSpeechSynthesisPrototypeFunction_cancel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "SpeechSynthesis", "cancel");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSpeechSynthesis::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSpeechSynthesis::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "SpeechSynthesis", "cancel");
  WebCore::SpeechSynthesis::cancel((WebCore::SpeechSynthesis *)(*(_QWORD *)(v3 + 24) - 56), a2);
  return 10;
}

uint64_t WebCore::jsSpeechSynthesisPrototypeFunction_pause(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *((_QWORD *)a2 + 5);
  v14 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "SpeechSynthesis", "pause");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSpeechSynthesis::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSpeechSynthesis::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "SpeechSynthesis", "pause");
  v9 = *(_QWORD *)(v3 + 24);
  if (!*(_BYTE *)(v9 + 96))
  {
    v10 = *(_QWORD *)(v9 + 104);
    if (v10)
    {
      v11 = *(_QWORD **)(v10 + 8);
      if (v11)
      {
        v12 = 7;
LABEL_18:
        (*(void (**)(void))(*v11 + 8 * v12))();
        return 10;
      }
    }
    v11 = *(_QWORD **)(v9 + 24);
    if (v11)
    {
      v12 = 3;
      goto LABEL_18;
    }
  }
  return 10;
}

uint64_t WebCore::jsSpeechSynthesisPrototypeFunction_resume(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *((_QWORD *)a2 + 5);
  v14 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "SpeechSynthesis", "resume");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSpeechSynthesis::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSpeechSynthesis::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "SpeechSynthesis", "resume");
  v9 = *(_QWORD **)(v3 + 24);
  if (v9[7])
  {
    v10 = v9[13];
    if (v10)
    {
      v11 = *(_QWORD **)(v10 + 8);
      if (v11)
      {
        v12 = 8;
LABEL_18:
        (*(void (**)(void))(*v11 + 8 * v12))();
        return 10;
      }
    }
    v11 = (_QWORD *)v9[3];
    if (v11)
    {
      v12 = 4;
      goto LABEL_18;
    }
  }
  return 10;
}

_BYTE *WebCore::jsSpeechSynthesisPrototypeFunction_getVoices(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF **Voices;
  JSC::VM *v12;
  unsigned int v13;
  WTF **v14;
  uint64_t v15;
  objc_class *v16;
  int v17;
  BOOL v18;
  JSValue v19;
  void *v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  WTF *v31;
  _OWORD v32[4];
  uint64_t v33;
  JSC::VM *v34;

  v4 = *((_QWORD *)a2 + 5);
  v26 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SpeechSynthesis", "getVoices");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSpeechSynthesis::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSpeechSynthesis::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SpeechSynthesis", "getVoices");
  v10 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  Voices = WebCore::SpeechSynthesis::getVoices((WTF **)(*(_QWORD *)(v4 + 24) - 56), a2);
  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v12;
  v29 = 0;
  v30 = 0x800000000;
  v31 = (WTF *)((char *)v32 + 8);
  memset(v32, 0, sizeof(v32));
  v33 = 0;
  v13 = *((_DWORD *)Voices + 3);
  if (v13 >= 9)
  {
    v29 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v30) == 1;
    v13 = *((_DWORD *)Voices + 3);
    if (v13)
    {
LABEL_14:
      v14 = (WTF **)*Voices;
      v15 = 8 * v13;
      do
      {
        v16 = (objc_class *)WebCore::wrap<WebCore::SpeechSynthesisVoice>(v10, *v14);
        if (*((_DWORD *)v12 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
            goto LABEL_42;
        }
        v17 = v30;
        if ((_DWORD)v30 != HIDWORD(v30) && (v31 != (WTF *)((char *)v32 + 8) ? (v18 = v31 == 0) : (v18 = 1), v18))
        {
          *((_QWORD *)v31 + v30) = v16;
          LODWORD(v30) = v17 + 1;
        }
        else
        {
          v19.super.isa = v16;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v30, v19) == 1)
            v29 = 1;
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  else if (v13)
  {
    goto LABEL_14;
  }
  if (v29)
  {
    JSC::throwOutOfMemoryError();
LABEL_42:
    v22 = 0;
    goto LABEL_33;
  }
  v27 = v31;
  v28 = v30;
  v21 = *(JSC::VM **)(v10 + 56);
  if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
    goto LABEL_42;
  v22 = JSC::constructArray();
LABEL_33:
  v23 = *(uint64_t **)&v32[0];
  if (*(_QWORD *)&v32[0])
  {
    v27 = (WTF *)&v30;
    v25 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v32[0], (uint64_t *)&v27);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v23, v25);
  }
  if (v31 != (WTF *)((char *)v32 + 8) && v31)
    WTF::fastFree(v31, v20);
  return (_BYTE *)v22;
}

WebCore::SpeechSynthesisUtterance *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24SpeechSynthesisEventInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::SpeechSynthesisUtterance *result;
  bmalloc::api *v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (WebCore::SpeechSynthesisUtterance *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(result, a2);
      return (WebCore::SpeechSynthesisUtterance *)bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)result + 8);
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11StaticRangeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11StaticRangeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11StaticRange4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *result;

  v3 = a2[2];
  a2[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  result = (unsigned int *)*a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::jsStoragePrototypeFunction_key(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v5;
  JSC::JSGlobalObject *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v16;
  JSC::VM *v18;
  JSValue v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _DWORD v22[2];

  v20 = *((_QWORD *)this + 7);
  v5 = JSC::jsDynamicCast<WebCore::JSStorage *>(*((_QWORD *)a2 + 5));
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "Storage", "key");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18 = (JSC::VM *)*((_QWORD *)this + 7);
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v6);
    return JSC::VM::throwException(v18, this, v19);
  }
  v7 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v22);
  if (v22[1])
    return 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 24))(&v21, *(_QWORD *)(v7 + 24), v22[0]);
  v8 = v21;
  if (!v21)
    return 2;
  v9 = *((_QWORD *)this + 7);
  v10 = (uint64_t *)(v9 + 41968);
  v11 = *((_DWORD *)v21 + 1);
  if (!v11)
    goto LABEL_15;
  if (v11 == 1)
  {
    v13 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
    if ((*((_BYTE *)v21 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v16 = *(unsigned __int16 *)v13;
      if (v16 > 0xFF)
        goto LABEL_7;
      v14 = v16;
    }
    v10 = (uint64_t *)(v9 + 8 * v14 + 42216);
LABEL_15:
    v12 = *v10;
    goto LABEL_16;
  }
LABEL_7:
  v12 = *(_QWORD *)(v9 + 64760);
  if (!v12 || v21 != *(WTF::StringImpl **)(v12 + 8))
  {
    v12 = JSC::jsStringWithCacheSlowCase();
    v8 = v21;
    v21 = 0;
    if (!v8)
      return v12;
    goto LABEL_17;
  }
LABEL_16:
  v21 = 0;
LABEL_17:
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v8);
  else
    *(_DWORD *)v8 -= 2;
  return v12;
}

_BYTE *WebCore::jsStoragePrototypeFunction_setItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v5;
  JSC::JSGlobalObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  JSC::VM *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSValue v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  JSValue v32;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unsigned __int8 v42;

  v34 = *((_QWORD *)this + 7);
  v5 = JSC::jsDynamicCast<WebCore::JSStorage *>(*((_QWORD *)a2 + 5));
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "Storage", "setItem");
  v7 = *((_QWORD *)this + 7);
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v6);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v7, this, v32);
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *((_QWORD *)a2 + 6);
  v39 = (WTF::StringImpl *)v9;
  if ((v9 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v9 + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(v9 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v9, this);
      if (!v10)
        goto LABEL_8;
    }
    else if (!v10)
    {
LABEL_8:
      v35 = v10;
      goto LABEL_9;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_8;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v39, this);
LABEL_9:
  if (*(_DWORD *)(v7 + 80))
  {
    v11 = v35;
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7))
    {
      v38 = 1;
      v35 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v6);
        else
          *(_DWORD *)v11 -= 2;
      }
      v25 = 0;
      v26 = 1;
      goto LABEL_40;
    }
  }
  else
  {
    v11 = v35;
  }
  v37 = v11;
  v38 = 0;
  v12 = *((_QWORD *)a2 + 7);
  v39 = (WTF::StringImpl *)v12;
  v13 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v14 = *(WTF::StringImpl **)(v12 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v14)
        goto LABEL_16;
    }
    else if (!v14)
    {
LABEL_16:
      v41 = v14;
      goto LABEL_17;
    }
    *(_DWORD *)v14 += 2;
    goto LABEL_16;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v39, this);
LABEL_17:
  if (*((_DWORD *)v13 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v13);
    v15 = v41;
    if (hasExceptionsAfterHandlingTraps)
    {
      v36 = 1;
      v41 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v6);
        else
          *(_DWORD *)v15 -= 2;
      }
      v25 = 0;
      v24 = 1;
      goto LABEL_39;
    }
  }
  else
  {
    v15 = v41;
  }
  v36 = 0;
  v37 = 0;
  v39 = v11;
  v35 = 0;
  v41 = v15;
  v16 = *(_QWORD *)(v8 + 16);
  if (!v16)
    goto LABEL_30;
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
    goto LABEL_30;
  v18 = *(_QWORD *)(v17 + 72);
  if (!v18)
    goto LABEL_30;
  v19 = *(_QWORD *)(v18 + 8);
  if (!v19)
    goto LABEL_30;
  if (*(_BYTE *)(v19 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x194FC1D10);
  }
  v20 = *(_QWORD *)(v19 + 240);
  if (v20 && (v6 = *(JSC::JSGlobalObject **)(v20 + 8)) != 0)
  {
    v42 = 0;
    (*(void (**)(_QWORD, JSC::JSGlobalObject *, WTF::StringImpl **, WTF::StringImpl **, unsigned __int8 *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v6, &v39, &v41, &v42);
    v21 = v42;
    if (v42)
      v22 = 18;
    else
      v22 = 0;
    v15 = v41;
  }
  else
  {
LABEL_30:
    v22 = 12;
    v21 = 1;
  }
  v41 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v6);
    else
      *(_DWORD *)v15 -= 2;
  }
  v23 = v39;
  v39 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::destroy(v23, v6);
      if (!v21)
        goto LABEL_38;
LABEL_48:
      LOBYTE(v39) = v22;
      v40 = 0;
      if (!*(_QWORD *)(v7 + 16))
      {
        v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v22, (JSC::JSGlobalObject *)&v40);
        JSC::VM::throwException((JSC::VM *)v7, this, v28);
        v30 = v40;
        v40 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v29);
          else
            *(_DWORD *)v30 -= 2;
        }
      }
      v24 = 0;
      v25 = 0;
      goto LABEL_39;
    }
    *(_DWORD *)v23 -= 2;
  }
  if (v21)
    goto LABEL_48;
LABEL_38:
  v24 = 0;
  v25 = 10;
LABEL_39:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33088B8[v24])(&v39, &v35);
  v26 = 0;
LABEL_40:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33088B8[v26])(&v39, &v37);
  return (_BYTE *)v25;
}

uint64_t WebCore::jsStoragePrototypeFunction_clear(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  JSValue v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  char v18;
  WTF::StringImpl *v19;

  v4 = *((_QWORD *)a2 + 5);
  v17 = *((_QWORD *)this + 7);
  v5 = JSC::jsDynamicCast<WebCore::JSStorage *>(v4);
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "Storage", "clear");
  v6 = *(_QWORD *)(v5 + 24);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 72);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          if (*(_BYTE *)(v11 + 178))
          {
            result = 105;
            __break(0xC471u);
            return result;
          }
          v12 = *(_QWORD *)(v11 + 240);
          if (v12 && *(_QWORD *)(v12 + 8))
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 24) + 56))(*(_QWORD *)(v6 + 24));
            return 10;
          }
        }
      }
    }
  }
  v18 = 12;
  v19 = 0;
  if (!*((_QWORD *)v7 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)0xC, (JSC::JSGlobalObject *)&v19);
    JSC::VM::throwException(v7, this, v14);
    v16 = v19;
    v19 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  return 0;
}

_BYTE *WebCore::IDLOperation<WebCore::JSStorage>::call<&WebCore::jsStoragePrototypeFunction_removeItemBody,(WebCore::CastedThisErrorBehavior)0>(WebCore *a1, unint64_t *a2)
{
  unint64_t v4;
  WebCore::JSStorage *v5;
  uint64_t v7;

  v7 = *((_QWORD *)a1 + 7);
  v4 = JSC::jsDynamicCast<WebCore::JSStorage *>(a2[5]);
  if (v4)
    return (_BYTE *)WebCore::jsStoragePrototypeFunction_removeItemBody(a1, (JSC::JSGlobalObject *)a2, *(JSC::CallFrame **)(v4 + 24), v5);
  else
    return WebCore::throwThisTypeError((int)a1, (int)&v7, "Storage", "removeItem");
}

uint64_t WebCore::jsStoragePrototypeFunction_removeItemBody(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSStorage *a4)
{
  JSC::VM *v5;
  int v7;
  uint64_t v8;
  JSValue v10;
  _BYTE v11[8];
  int v12;
  JSC::VM *v13;
  char v14;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v13 = v5;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v10.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v5, this, v10);
  }
  else
  {
    WebCore::Converter<WebCore::IDLDOMString>::convert(this, *((_QWORD *)a2 + 6), (uint64_t)v11);
    v7 = v12;
    if (v12)
    {
      v8 = 0;
    }
    else
    {
      v8 = WebCore::toJS<WebCore::IDLUndefined,WebCore::jsStoragePrototypeFunction_removeItemBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSStorage *)::{lambda(void)#1}>(this, &v13, a3, (uint64_t)v11);
      v7 = v12;
    }
    if (v7 != -1)
      ((void (*)(char *, _BYTE *))off_1E33088B8[v7])(&v14, v11);
  }
  return v8;
}

uint64_t WebCore::toJS<WebCore::IDLUndefined,WebCore::jsStoragePrototypeFunction_removeItemBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSStorage *)::{lambda(void)#1}>(JSC *a1, JSC::VM **a2, WebCore::Storage *this, uint64_t a4)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v9;
  unsigned __int8 v10[8];
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;

  WebCore::jsStoragePrototypeFunction_removeItemBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSStorage *)::{lambda(void)#1}::operator()(&v12, this, a4);
  if (v14)
  {
    v10[0] = v12;
    v9 = v13;
    v13 = 0;
    v11 = v9;
    if (!*((_QWORD *)*a2 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, a2, v10);
      v9 = v11;
    }
    v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    v7 = 0;
  }
  else
  {
    v7 = 10;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v12, v6);
  return v7;
}

void WebCore::jsStoragePrototypeFunction_removeItemBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSStorage *)::{lambda(void)#1}::operator()(_QWORD *a1, WebCore::Storage *this, uint64_t a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WebCore::StorageEvent::Init *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (*(_DWORD *)(a3 + 8))
  {
    v6 = (WebCore::StorageEvent::Init *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::StorageEvent::Init::~Init(v6, v7);
  }
  else
  {
    v3 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = 0;
    v8 = v3;
    WebCore::Storage::removeItem(this, (const WTF::String *)&v8, a1);
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
}

void WebCore::StorageEvent::Init::~Init(WebCore::StorageEvent::Init *this, WTF::StringImpl *a2)
{
  WebCore::Storage *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  bmalloc::api *v8;
  void *v9;

  v3 = (WebCore::Storage *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::Storage::~Storage(v3);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12StorageEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(int a1, WebCore::StorageEvent::Init *this)
{
  WebCore::StorageEvent::Init::~Init(this, this);
}

_BYTE *WebCore::jsStorageEventPrototypeFunction_initStorageEvent(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  JSC::VM *v19;
  double v20;
  int v21;
  uint64_t v22;
  int *v23;
  int v24;
  _BOOL4 v25;
  unint64_t v26;
  JSC::VM *v27;
  int v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  WTF::StringImpl *v36;
  int v37;
  WebCore::Storage *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  JSValue v55;
  BOOL i;
  BOOL v57;
  JSC::VM *v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65;
  int v66;
  uint64_t v67;
  int v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  _QWORD v73[2];

  v4 = 0xFFFE000000000002;
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v58 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v58, "StorageEvent", "initStorageEvent");
  v7 = (unint64_t)a2;
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSStorageEvent::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSStorageEvent::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)&v58, "StorageEvent", "initStorageEvent");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v55.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v55);
  }
  v13 = *(_QWORD *)(v6 + 24);
  v14 = *((_QWORD *)a2 + 6);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, v14, (uint64_t)&v67);
  v15 = v68;
  if (v68)
  {
    v52 = 0;
    goto LABEL_101;
  }
  v16 = *(_DWORD *)(v7 + 32);
  v17 = v16;
  if ((unint64_t)(v16 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v19 = (JSC::VM *)*((_QWORD *)this + 7);
    v18 = 10;
    goto LABEL_25;
  }
  v18 = *(_QWORD *)(v7 + 56);
  v19 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v18 >= 0xFFFE000000000000)
    goto LABEL_125;
  *(_QWORD *)&v20 = v18 - 0x2000000000000;
  if (v18 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v25 = v20 > 0.0 || v20 < 0.0;
    goto LABEL_26;
  }
  if ((v18 & 0xFFFE000000000002) != 0)
  {
LABEL_25:
    v25 = v18 == 7;
    goto LABEL_26;
  }
  v21 = *(unsigned __int8 *)(v18 + 5);
  if (v21 == 3)
  {
    v24 = *(_DWORD *)(v18 + 8);
  }
  else
  {
    if (v21 != 2)
    {
      v25 = (*(_BYTE *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28) != (_QWORD)this;
      goto LABEL_26;
    }
    v22 = *(_QWORD *)(v18 + 8);
    if ((v22 & 1) != 0)
      v23 = (int *)(v18 + 16);
    else
      v23 = (int *)(v22 + 4);
    v24 = *v23;
  }
  for (i = v24 == 0; ; i = (_DWORD)v18 == 0)
  {
    v25 = !i;
LABEL_26:
    if (*((_DWORD *)v19 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
      {
        v52 = 0;
        goto LABEL_100;
      }
      v16 = *(_DWORD *)(v7 + 32);
      v17 = v16;
    }
    if ((unint64_t)(v17 - 4) >= 0xFFFFFFFFFFFFFFFDLL)
    {
      v27 = (JSC::VM *)*((_QWORD *)this + 7);
      v26 = 10;
LABEL_38:
      v4 = v26 == 7;
      goto LABEL_39;
    }
    v26 = *(_QWORD *)(v7 + 64);
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v26 >= 0xFFFE000000000000)
    {
      v57 = (_DWORD)v26 == 0;
      goto LABEL_146;
    }
    if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v26 & v4) != 0)
        goto LABEL_38;
      v28 = *(unsigned __int8 *)(v26 + 5);
      if (v28 == 3)
      {
        v31 = *(_DWORD *)(v26 + 8);
      }
      else
      {
        if (v28 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v4 = 1;
            goto LABEL_39;
          }
          v57 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
          goto LABEL_146;
        }
        v29 = *(_QWORD *)(v26 + 8);
        if ((v29 & 1) != 0)
          v30 = (int *)(v26 + 16);
        else
          v30 = (int *)(v29 + 4);
        v31 = *v30;
      }
      v57 = v31 == 0;
LABEL_146:
      v4 = !v57;
      goto LABEL_39;
    }
    v4 = COERCE_DOUBLE(v26 - 0x2000000000000) > 0.0
      || (unint64_t)(COERCE_DOUBLE(v26 - 0x2000000000000) < 0.0);
LABEL_39:
    if (*((_DWORD *)v27 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
      {
        v52 = 0;
        goto LABEL_100;
      }
      v16 = *(_DWORD *)(v7 + 32);
      v17 = v16;
    }
    if ((unint64_t)(v17 - 5) >= 0xFFFFFFFFFFFFFFFCLL || *(_QWORD *)(v7 + 72) == 10)
    {
      v65 = 0;
      v66 = 0;
    }
    else
    {
      WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(this, *(_QWORD *)(v7 + 72), (uint64_t)&v65);
      v32 = v66;
      if (v66)
      {
        v52 = 0;
        goto LABEL_98;
      }
      v16 = *(_DWORD *)(v7 + 32);
    }
    v33 = v16;
    if ((unint64_t)(v16 - 6) >= 0xFFFFFFFFFFFFFFFBLL || *(_QWORD *)(v7 + 80) == 10)
    {
      v63 = 0;
      v64 = 0;
    }
    else
    {
      WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(this, *(_QWORD *)(v7 + 80), (uint64_t)&v63);
      v34 = v64;
      if (v64)
      {
        v52 = 0;
        goto LABEL_95;
      }
      v33 = *(int *)(v7 + 32);
    }
    if ((unint64_t)(v33 - 7) >= 0xFFFFFFFFFFFFFFFALL || *(_QWORD *)(v7 + 88) == 10)
    {
      v61 = 0;
      v62 = 0;
    }
    else
    {
      WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(this, *(_QWORD *)(v7 + 88), (uint64_t)&v61);
      v35 = v62;
      if (v62)
      {
        v52 = 0;
        goto LABEL_92;
      }
      v33 = *(int *)(v7 + 32);
    }
    LODWORD(v18) = v14;
    if ((unint64_t)(v33 - 8) < 0xFFFFFFFFFFFFFFF9)
    {
      v14 = *(_QWORD *)(v7 + 96);
      if (v14 != 10)
        break;
    }
    v36 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v36 += 2;
    v59 = v36;
    v60 = 0;
    LODWORD(v14) = 10;
LABEL_61:
    if ((unint64_t)(*(int *)(v7 + 32) - 9) > 0xFFFFFFFFFFFFFFF7)
    {
      v38 = 0;
      v7 = 10;
    }
    else
    {
      v7 = *(_QWORD *)(v7 + 104);
      if ((v7 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v38 = 0;
      }
      else
      {
        v73[0] = *((_QWORD *)this + 7);
        v39 = JSC::jsDynamicCast<WebCore::JSStorage *>(v7);
        if (!v39 || (v38 = *(WebCore::Storage **)(v39 + 24)) == 0)
        {
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v73, 7, "storageArea", 12, "StorageEvent", 13, v40, "initStorageEvent", 17, "Storage", 8);
          v52 = 0;
LABEL_88:
          v37 = v60;
          goto LABEL_89;
        }
      }
    }
    if (!v68)
    {
      v41 = v67;
      v67 = 0;
      v73[0] = v41;
      if (!v66)
      {
        v42 = v65;
        v65 = 0;
        v72 = v42;
        if (!v64)
        {
          v43 = v63;
          v63 = 0;
          v71 = v43;
          if (!v62)
          {
            v44 = v61;
            v61 = 0;
            v70 = v44;
            if (!v60)
            {
              v45 = v59;
              v59 = 0;
              v69 = v45;
              WebCore::StorageEvent::initStorageEvent(v13, (const WTF::AtomString *)v73, v25, v4, (const WTF::String *)&v72, (const WTF::String *)&v71, (const WTF::String *)&v70, (const WTF::String *)&v69, v38);
              v47 = v69;
              v69 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, v46);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v70;
              v70 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, v46);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v71;
              v71 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, v46);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v72;
              v72 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, v46);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = (WTF::StringImpl *)v73[0];
              v73[0] = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, v46);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = 10;
              goto LABEL_88;
            }
          }
        }
      }
    }
    v19 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_125:
    ;
  }
  WebCore::valueToUSVString(this, *(_QWORD *)(v7 + 96), (uint64_t)&v59);
  v37 = v60;
  if (!v60)
    goto LABEL_61;
  v52 = 0;
LABEL_89:
  if (v37 != -1)
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E33088B8[v37])(v73, &v59);
  v35 = v62;
LABEL_92:
  if (v35 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33088B8[v35])(&v59, &v61);
  v34 = v64;
LABEL_95:
  if (v34 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33088B8[v34])(&v61, &v63);
  v32 = v66;
LABEL_98:
  if (v32 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33088B8[v32])(&v63, &v65);
LABEL_100:
  v15 = v68;
LABEL_101:
  if (v15 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E330AAE8[v15])(&v65, &v67);
  return (_BYTE *)v52;
}

unint64_t WebCore::jsStorageManagerPrototypeFunction_persisted(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::DOMGuardedObject *v24;
  uint64_t v25;
  void (*v27)(void);
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC2AE4);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSStorageManager::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSStorageManager::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"StorageManager", "persisted", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v17 + 24);
  v30 = v14;
  WebCore::StorageManager::persisted(v23, (uint64_t *)&v30);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 4) != 1)
    {
      --*((_DWORD *)v24 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v24 + 16);
LABEL_32:
    v27();
  }
LABEL_28:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v28 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v30);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v30, v28, 0);
      v29 = v30;
      v30 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsStorageManagerPrototypeFunction_persist(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::DOMGuardedObject *v24;
  uint64_t v25;
  void (*v27)(void);
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC2D44);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSStorageManager::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSStorageManager::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"StorageManager", "persist", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v17 + 24);
  v30 = v14;
  WebCore::StorageManager::persist(v23, (uint64_t *)&v30);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 4) != 1)
    {
      --*((_DWORD *)v24 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v24 + 16);
LABEL_32:
    v27();
  }
LABEL_28:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v28 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v30);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v30, v28, 0);
      v29 = v30;
      v30 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsStorageManagerPrototypeFunction_estimate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::DOMGuardedObject *v24;
  uint64_t v25;
  void (*v27)(void);
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC2FA4);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSStorageManager::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSStorageManager::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"StorageManager", "estimate", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v17 + 24);
  v30 = v14;
  WebCore::StorageManager::estimate(v23, (uint64_t *)&v30);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 4) != 1)
    {
      --*((_DWORD *)v24 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v24 + 16);
LABEL_32:
    v27();
  }
LABEL_28:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v28 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v30);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v30, v28, 0);
      v29 = v30;
      v30 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsStorageManagerPrototypeFunction_getDirectory(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::DOMGuardedObject *v24;
  uint64_t v25;
  void (*v27)(void);
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC3204);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSStorageManager::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSStorageManager::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"StorageManager", "getDirectory", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v17 + 24);
  v30 = v14;
  WebCore::StorageManager::fileSystemAccessGetDirectory(v23, (uint64_t *)&v30);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 4) != 1)
    {
      --*((_DWORD *)v24 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v24 + 16);
LABEL_32:
    v27();
  }
LABEL_28:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v28 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v30);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v30, v28, 0);
      v29 = v30;
      v30 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsStylePropertyMapPrototypeFunction_set(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  JSValue v27;
  WTF::StringImpl *v28;
  JSValue v29;
  WTF::StringImpl *v30;
  WebCore *v31;
  JSC::JSGlobalObject *v32;
  JSC::CallFrame *v33;
  uint64_t v34;
  WTF *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  char v42;

  v4 = *((_QWORD *)this + 7);
  v34 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v34, "StylePropertyMap", "set");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSStylePropertyMap::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSStylePropertyMap::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v34, "StylePropertyMap", "set");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v27);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194FC34E8);
  }
  WebCore::valueToUSVAtomString(this, *((_QWORD *)a2 + 6), (uint64_t)&v36);
  v15 = v37;
  if (v37)
  {
    v19 = 0;
LABEL_31:
    if (v15 != -1)
      ((void (*)(int *, WTF::StringImpl **))off_1E330AAE8[v15])(&v40, &v36);
    return v19;
  }
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::CSSStyleValue>,WebCore::IDLUSVString>>((uint64_t)&v35, this, (uint64_t)a2);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_54;
  if (!v37)
  {
    v16 = v36;
    v36 = 0;
    v38 = v16;
    WebCore::StylePropertyMap::set((WebCore::Document *)(v14 - 192), v12, &v38, (unsigned int **)&v35, (uint64_t)&v40);
    v18 = v38;
    v38 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (!v42)
    {
      v19 = 10;
LABEL_23:
      v20 = v35;
      v35 = 0;
      if (v20)
      {
        v22 = (char *)v20 + 8;
        v21 = *(unsigned int *)v20;
        if ((_DWORD)v21)
        {
          v23 = 16 * v21;
          do
          {
            v24 = *((unsigned int *)v22 + 2);
            if ((_DWORD)v24 != -1)
              ((void (*)(int *, char *))off_1E330B770[v24])(&v40, v22);
            *((_DWORD *)v22 + 2) = -1;
            v22 += 16;
            v23 -= 16;
          }
          while (v23);
        }
        WTF::fastFree(v20, v17);
      }
      v15 = v37;
      goto LABEL_31;
    }
    v17 = (WTF::StringImpl *)v40;
    LOBYTE(v38) = v40;
    v28 = v41;
    v41 = 0;
    v39 = v28;
    if (!*(_QWORD *)(v4 + 16))
    {
      v29.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v40, (JSC::JSGlobalObject *)&v39);
      JSC::VM::throwException((JSC::VM *)v4, this, v29);
      v28 = v39;
    }
    v39 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v17);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (v42)
    {
      v30 = v41;
      v41 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 != 2)
        {
          v19 = 0;
          *(_DWORD *)v30 -= 2;
          goto LABEL_23;
        }
        WTF::StringImpl::destroy(v30, v17);
      }
    }
LABEL_54:
    v19 = 0;
    goto LABEL_23;
  }
  v31 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsStylePropertyMapPrototypeFunction_append(v31, v32, v33);
}

uint64_t WebCore::jsStylePropertyMapPrototypeFunction_append(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  JSValue v27;
  WTF::StringImpl *v28;
  JSValue v29;
  WTF::StringImpl *v30;
  WebCore *v31;
  JSC::JSGlobalObject *v32;
  JSC::CallFrame *v33;
  uint64_t v34;
  WTF *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  char v42;

  v4 = *((_QWORD *)this + 7);
  v34 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v34, "StylePropertyMap", "append");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSStylePropertyMap::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSStylePropertyMap::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v34, "StylePropertyMap", "append");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v27);
  }
  v12 = *(_DWORD **)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194FC37F0);
  }
  WebCore::valueToUSVAtomString(this, *((_QWORD *)a2 + 6), (uint64_t)&v36);
  v15 = v37;
  if (v37)
  {
    v19 = 0;
LABEL_31:
    if (v15 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E330AAE8[v15])(&v40, &v36);
    return v19;
  }
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::CSSStyleValue>,WebCore::IDLUSVString>>((uint64_t)&v35, this, (uint64_t)a2);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_54;
  if (!v37)
  {
    v16 = v36;
    v36 = 0;
    v38 = v16;
    WebCore::StylePropertyMap::append(v12, (const WebCore::Document *)(v14 - 192), &v38, (unsigned int **)&v35, &v40);
    v18 = v38;
    v38 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (!v42)
    {
      v19 = 10;
LABEL_23:
      v20 = v35;
      v35 = 0;
      if (v20)
      {
        v22 = (char *)v20 + 8;
        v21 = *(unsigned int *)v20;
        if ((_DWORD)v21)
        {
          v23 = 16 * v21;
          do
          {
            v24 = *((unsigned int *)v22 + 2);
            if ((_DWORD)v24 != -1)
              ((void (*)(uint64_t *, char *))off_1E330B770[v24])(&v40, v22);
            *((_DWORD *)v22 + 2) = -1;
            v22 += 16;
            v23 -= 16;
          }
          while (v23);
        }
        WTF::fastFree(v20, v17);
      }
      v15 = v37;
      goto LABEL_31;
    }
    v17 = (WTF::StringImpl *)v40;
    LOBYTE(v38) = v40;
    v28 = v41;
    v41 = 0;
    v39 = v28;
    if (!*(_QWORD *)(v4 + 16))
    {
      v29.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v40, (JSC::JSGlobalObject *)&v39);
      JSC::VM::throwException((JSC::VM *)v4, this, v29);
      v28 = v39;
    }
    v39 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v17);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (v42)
    {
      v30 = v41;
      v41 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 != 2)
        {
          v19 = 0;
          *(_DWORD *)v30 -= 2;
          goto LABEL_23;
        }
        WTF::StringImpl::destroy(v30, v17);
      }
    }
LABEL_54:
    v19 = 0;
    goto LABEL_23;
  }
  v31 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsStylePropertyMapPrototypeFunction_delete(v31, v32, v33);
}

uint64_t WebCore::jsStylePropertyMapPrototypeFunction_delete(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::StylePropertyMap *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSValue v25;
  WTF::StringImpl *v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v27, "StylePropertyMap", "delete");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSStylePropertyMap::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSStylePropertyMap::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v27, "StylePropertyMap", "delete");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v22);
  }
  v12 = *(WebCore::StylePropertyMap **)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194FC3A70);
  }
  WebCore::valueToUSVAtomString(this, *((_QWORD *)a2 + 6), (uint64_t)&v28);
  v15 = v29;
  if (!v29)
  {
    v16 = v28;
    v28 = 0;
    v30 = v16;
    WebCore::StylePropertyMap::remove(v12, (WebCore::Document *)(v14 - 192), (const WTF::AtomString *)&v30, &v32);
    v18 = v30;
    v30 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (!v34)
    {
      v19 = 10;
LABEL_21:
      v15 = v29;
      goto LABEL_22;
    }
    v23 = (WTF::StringImpl *)v32;
    LOBYTE(v30) = v32;
    v24 = v33;
    v33 = 0;
    v31 = v24;
    if (!*((_QWORD *)v4 + 2))
    {
      v25.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v31);
      JSC::VM::throwException(v4, this, v25);
      v24 = v31;
    }
    v31 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (v34)
    {
      v26 = v33;
      v33 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 != 2)
        {
          v19 = 0;
          *(_DWORD *)v26 -= 2;
          goto LABEL_21;
        }
        WTF::StringImpl::destroy(v26, v23);
      }
    }
    v19 = 0;
    goto LABEL_21;
  }
  v19 = 0;
LABEL_22:
  if (v15 != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E330AAE8[v15])(&v32, &v28);
  return v19;
}

uint64_t WebCore::jsStylePropertyMapPrototypeFunction_clear(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "StylePropertyMap", "clear");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSStylePropertyMap::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSStylePropertyMap::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "StylePropertyMap", "clear");
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 80))(*(_QWORD *)(v3 + 24));
  return 10;
}

uint64_t WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::CSSStyleValue>,WebCore::IDLUSVString>>(uint64_t result, JSC::JSGlobalObject *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  JSC::VM *v7;
  int v8;
  WTF *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  char **v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  void *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  JSC::VM *v38;
  char v39[8];
  int v40;
  unsigned __int8 v41;
  char v42[8];
  int v43;
  char v44;
  uint64_t v45;
  int v46;
  char v47;
  char v48[8];
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;

  v3 = (_QWORD *)result;
  v52 = *MEMORY[0x1E0C80C00];
  v4 = *(int *)(a3 + 32);
  if ((unint64_t)(v4 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    *(_QWORD *)result = 0;
    return result;
  }
  v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v8 = v4 - 2;
  result = WTF::fastMalloc((WTF *)((16 * (v4 - 2)) | 8));
  v9 = (WTF *)result;
  *(_DWORD *)result = v8;
  if (!v8)
    goto LABEL_53;
  v38 = v7;
  v36 = v8;
  v37 = v3;
  v10 = 0;
  v11 = result + 8;
  while (1)
  {
    v12 = v10 + 1;
    v13 = *(_QWORD *)(a3 + ((uint64_t)(((v10 + 1) << 32) + 0x600000000) >> 29));
    if ((v13 & 0xFFFE000000000002) != 0)
      goto LABEL_17;
    v14 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSCSSStyleValue::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSCSSStyleValue::s_info && v16 != 0);
    }
    if (v15 && (v19 = *(_QWORD *)(v13 + 24)) != 0)
    {
      v20 = 0;
      ++*(_DWORD *)(v19 + 8);
      v49 = v19;
      v50 = 0;
      v51 = 0;
    }
    else
    {
LABEL_17:
      WebCore::valueToUSVString(a2, v13, (uint64_t)&v45);
      if (v46)
      {
        v51 = 1;
        if (v46 != -1)
          ((void (*)(char *, uint64_t *))off_1E33088B8[v46])(&v47, &v45);
        v42[0] = 0;
        v44 = 0;
        v21 = 1;
LABEL_25:
        result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1E330B780[v21])(&v45, &v49);
        goto LABEL_26;
      }
      v49 = v45;
      v50 = 1;
      v51 = 0;
      v20 = 1;
    }
    LOBYTE(v45) = 0;
    v46 = -1;
    v22 = off_1E330B790[v20];
    ((void (*)(char *, uint64_t *, uint64_t *))v22)(&v47, &v45, &v49);
    v46 = v20;
    v42[0] = 0;
    v43 = -1;
    result = ((uint64_t (*)(char *, char *, uint64_t *))v22)(&v47, v42, &v45);
    v43 = v20;
    v44 = 1;
    if (v46 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))off_1E330B770[v46])(&v47, &v45);
    v21 = v51;
    v7 = v38;
    if (v51 != -1)
      goto LABEL_25;
LABEL_26:
    if (*((_DWORD *)v7 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v7), (_DWORD)result))
    {
      v25 = 0;
      v39[0] = 0;
    }
    else
    {
      v39[0] = 0;
      v41 = 0;
      if (!v44)
        break;
      v40 = -1;
      v24 = v43;
      if (v43 != -1)
      {
        result = ((uint64_t (*)(char *, char *, char *))off_1E330B790[v43])(v48, v39, v42);
        v40 = v24;
      }
      v25 = 1;
    }
    v41 = v25;
    if (v44 && v43 != -1)
    {
      result = ((uint64_t (*)(char *, char *))off_1E330B770[v43])(v48, v42);
      v25 = v41;
    }
    if (!v25)
      break;
    v26 = v11 + 16 * v10;
    *(_BYTE *)v26 = 0;
    *(_DWORD *)(v26 + 8) = -1;
    v27 = v40;
    if (v40 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, char *))off_1E330B790[v40])(v48, v26, v39);
      *(_DWORD *)(v26 + 8) = v27;
      if (v41)
      {
        if (v40 != -1)
          result = ((uint64_t (*)(char *, char *))off_1E330B770[v40])(v48, v39);
      }
    }
    v28 = *(unsigned int *)v9;
    v10 = v12;
    if (v12 >= v28)
      goto LABEL_45;
  }
  *(_DWORD *)v9 = v10;
  LODWORD(v28) = v10;
LABEL_45:
  if ((_DWORD)v28 != v36)
  {
    if ((_DWORD)v28)
    {
      v29 = 16 * v28;
      do
      {
        v30 = *(unsigned int *)(v11 + 8);
        if ((_DWORD)v30 != -1)
          ((void (*)(char *, uint64_t))off_1E330B770[v30])(v48, v11);
        *(_DWORD *)(v11 + 8) = -1;
        v11 += 16;
        v29 -= 16;
      }
      while (v29);
    }
    result = WTF::fastFree(v9, v23);
    v9 = 0;
  }
  v3 = v37;
LABEL_53:
  if (*((_DWORD *)v7 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v7), (result & 1) != 0))
  {
    *v3 = 0;
    if (v9)
    {
      v33 = (char *)v9 + 8;
      v32 = *(unsigned int *)v9;
      if ((_DWORD)v32)
      {
        v34 = 16 * v32;
        do
        {
          v35 = *((unsigned int *)v33 + 2);
          if ((_DWORD)v35 != -1)
            ((void (*)(char *, char *))off_1E330B770[v35])(v48, v33);
          *((_DWORD *)v33 + 2) = -1;
          v33 += 16;
          v34 -= 16;
        }
        while (v34);
      }
      return WTF::fastFree(v9, v31);
    }
  }
  else
  {
    *v3 = v9;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13CSSStyleValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13CSSStyleValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore13CSSStyleValueENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENS9_6StringEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E330B770[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13CSSStyleValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13CSSStyleValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

unint64_t WebCore::jsStylePropertyMapReadOnlyPrototypeFunction_get(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  JSValue v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WebCore *v27;
  JSC::JSGlobalObject *v28;
  JSC::CallFrame *v29;
  JSC::VM *v30;
  WTF::StringImpl *v31;
  int v32[2];
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  int v36;
  _BYTE v37[8];
  WTF::StringImpl *v38;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "StylePropertyMapReadOnly", "get");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSStylePropertyMapReadOnly::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSStylePropertyMapReadOnly::s_info && v9 != 0);
  }
  if (!v8)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "StylePropertyMapReadOnly", "get");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v24);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v14 = v13;
  WebCore::valueToUSVAtomString(this, *((_QWORD *)a2 + 6), (uint64_t)&v35);
  v15 = v36;
  if (v36)
  {
    v20 = 0;
LABEL_26:
    if (v15 != -1)
      ((void (*)(int *, WTF::StringImpl **))off_1E330AAE8[v15])(v32, &v35);
    return v20;
  }
  v16 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v17 = v35;
  v35 = 0;
  v31 = v17;
  (*(void (**)(int *__return_ptr, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v32, v12, v14, &v31);
  if (!v34)
  {
    v19 = *(_DWORD **)v32;
    *(_QWORD *)v32 = 0;
    if (v19)
    {
      v20 = WebCore::wrap<WebCore::CSSStyleValue>((uint64_t)this, v16, (uint64_t)v19);
      if (v19[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
      else
        --v19[2];
    }
    else
    {
      v20 = 2;
    }
LABEL_20:
    if (v34 != -1)
      ((void (*)(_BYTE *, int *))off_1E330B908[v34])(v37, v32);
    v34 = -1;
    v21 = v31;
    v31 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v18);
      else
        *(_DWORD *)v21 -= 2;
    }
    v15 = v36;
    goto LABEL_26;
  }
  if (v34 == 1)
  {
    v18 = (WTF::StringImpl *)LOBYTE(v32[0]);
    v37[0] = v32[0];
    v25 = v33;
    v33 = 0;
    v38 = v25;
    if (!*((_QWORD *)v4 + 2))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v32[0]), (JSC::JSGlobalObject *)&v38);
      JSC::VM::throwException(v4, this, v26);
      v25 = v38;
    }
    v38 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v18);
      else
        *(_DWORD *)v25 -= 2;
    }
    v20 = 0;
    goto LABEL_20;
  }
  v27 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsStylePropertyMapReadOnlyPrototypeFunction_getAll(v27, v28, v29);
}

uint64_t WebCore::jsStylePropertyMapReadOnlyPrototypeFunction_getAll(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF *v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  JSValue v29;
  WTF::StringImpl *v30;
  JSValue v31;
  WebCore *v32;
  JSC::JSGlobalObject *v33;
  JSC::CallFrame *v34;
  JSC::VM *v35;
  WTF::StringImpl *v36;
  int v37[2];
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  int v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v35, "StylePropertyMapReadOnly", "getAll");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSStylePropertyMapReadOnly::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSStylePropertyMapReadOnly::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v35, "StylePropertyMapReadOnly", "getAll");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v29);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v14 = v13;
  WebCore::valueToUSVAtomString(this, *((_QWORD *)a2 + 6), (uint64_t)&v40);
  v15 = v41;
  if (v41)
  {
    v22 = 0;
LABEL_32:
    if (v15 != -1)
      ((void (*)(int *, WTF::StringImpl **))off_1E330AAE8[v15])(v37, &v40);
    return v22;
  }
  v16 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v17 = v40;
  v40 = 0;
  v36 = v17;
  (*(void (**)(int *__return_ptr, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 24))(v37, v12, v14, &v36);
  if (!v39)
  {
    v18 = *(WTF **)v37;
    v42 = *(WTF **)v37;
    v19 = v38;
    v20 = HIDWORD(v38);
    *(_QWORD *)v37 = 0;
    v38 = 0;
    v43 = (WTF::StringImpl *)__PAIR64__(v20, v19);
    v22 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::CSSStyleValue>>>::convert<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul>((uint64_t)this, v16, (uint64_t)&v42);
    if ((_DWORD)v20)
    {
      v23 = 8 * v20;
      v24 = v18;
      do
      {
        v25 = *(_DWORD **)v24;
        *(_QWORD *)v24 = 0;
        if (v25)
        {
          if (v25[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
          else
            --v25[2];
        }
        v24 = (WTF *)((char *)v24 + 8);
        v23 -= 8;
      }
      while (v23);
    }
    if (v18)
      WTF::fastFree(v18, v21);
LABEL_26:
    if (v39 != -1)
      ((void (*)(WTF **, int *))off_1E330B918[v39])(&v42, v37);
    v39 = -1;
    v26 = v36;
    v36 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v26 -= 2;
    }
    v15 = v41;
    goto LABEL_32;
  }
  if (v39 == 1)
  {
    v21 = (void *)LOBYTE(v37[0]);
    LOBYTE(v42) = v37[0];
    v30 = v38;
    v38 = 0;
    v43 = v30;
    if (!*((_QWORD *)v4 + 2))
    {
      v31.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v37[0]), (JSC::JSGlobalObject *)&v43);
      JSC::VM::throwException(v4, this, v31);
      v30 = v43;
    }
    v43 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v30 -= 2;
    }
    v22 = 0;
    goto LABEL_26;
  }
  v32 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsStylePropertyMapReadOnlyPrototypeFunction_has(v32, v33, v34);
}

uint64_t WebCore::jsStylePropertyMapReadOnlyPrototypeFunction_has(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSValue v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WebCore *v27;
  JSC::JSGlobalObject *v28;
  JSC::CallFrame *v29;
  JSC::VM *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  int v36;
  _BYTE v37[8];
  WTF::StringImpl *v38;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "StylePropertyMapReadOnly", "has");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSStylePropertyMapReadOnly::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSStylePropertyMapReadOnly::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "StylePropertyMapReadOnly", "has");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v24);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v14 = v13;
  WebCore::valueToUSVAtomString(this, *((_QWORD *)a2 + 6), (uint64_t)&v35);
  v15 = v36;
  if (v36)
  {
    v20 = 0;
LABEL_24:
    if (v15 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E330AAE8[v15])(&v32, &v35);
    return v20;
  }
  v16 = v35;
  v35 = 0;
  v31 = v16;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 32))(&v32, v12, v14, &v31);
  v17 = v34;
  if (!v34)
  {
    if ((_BYTE)v32)
      v18 = 7;
    else
      v18 = 6;
LABEL_19:
    off_1E330B928[v17](v37, &v32);
    v20 = v18;
LABEL_20:
    v34 = -1;
    v21 = v31;
    v31 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    v15 = v36;
    goto LABEL_24;
  }
  if (v34 == 1)
  {
    v19 = (WTF::StringImpl *)v32;
    v37[0] = v32;
    v25 = v33;
    v33 = 0;
    v38 = v25;
    if (!*((_QWORD *)v4 + 2))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v38);
      JSC::VM::throwException(v4, this, v26);
      v25 = v38;
    }
    v38 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v19);
      else
        *(_DWORD *)v25 -= 2;
    }
    v18 = 0;
    v20 = 0;
    v17 = v34;
    if (v34 == -1)
      goto LABEL_20;
    goto LABEL_19;
  }
  v27 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsStylePropertyMapReadOnlyPrototypeFunction_entries(v27, v28, v29);
}

_BYTE *WebCore::jsStylePropertyMapReadOnlyPrototypeFunction_entries(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "StylePropertyMapReadOnly", "entries");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSStylePropertyMapReadOnly::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSStylePropertyMapReadOnly::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "StylePropertyMapReadOnly", "entries");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::StylePropertyMapReadOnlyIterator>(v3, 2);
}

_BYTE *WebCore::jsStylePropertyMapReadOnlyPrototypeFunction_keys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "StylePropertyMapReadOnly", "keys");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSStylePropertyMapReadOnly::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSStylePropertyMapReadOnly::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "StylePropertyMapReadOnly", "keys");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::StylePropertyMapReadOnlyIterator>(v3, 0);
}

_BYTE *WebCore::jsStylePropertyMapReadOnlyPrototypeFunction_values(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "StylePropertyMapReadOnly", "values");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSStylePropertyMapReadOnly::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSStylePropertyMapReadOnly::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "StylePropertyMapReadOnly", "values");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::StylePropertyMapReadOnlyIterator>(v3, 1);
}

_BYTE *WebCore::jsStylePropertyMapReadOnlyPrototypeFunction_forEach(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  JSC::JSFunction *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_class *v30;
  JSValue v31;
  int v32;
  uint64_t v33;
  int v34;
  JSValue v35;
  int v36;
  int v37;
  int v38;
  uint64_t *v39;
  WTF *v40;
  _DWORD *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  JSValue v45;
  _QWORD *v46;
  uint64_t v48;
  objc_class *v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  char v54;
  uint64_t v55;
  WTF *v56;
  uint64_t *v57[10];
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65[3];
  uint64_t v66;

  v4 = *((_QWORD *)this + 7);
  v51 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v51, "StylePropertyMapReadOnly", "forEach");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSStylePropertyMapReadOnly::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSStylePropertyMapReadOnly::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v51, "StylePropertyMapReadOnly", "forEach");
  v66 = v4;
  if (*((_DWORD *)a2 + 8) == 1
    || (v11 = (JSC::JSFunction *)*((_QWORD *)a2 + 6), ((unint64_t)v11 & 0xFFFE000000000002) != 0))
  {
    LOBYTE(v65[0]) = 0;
    return (_BYTE *)JSC::throwTypeError();
  }
  if (*((_BYTE *)v11 + 5) == 26)
    JSC::JSFunction::getCallData(v11, (JSCell *)a2);
  else
    (*(void (**)(uint64_t *__return_ptr, JSC::JSFunction *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x38))(v65, v11);
  if (!LOBYTE(v65[0]))
    return (_BYTE *)JSC::throwTypeError();
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(&v62, v12, v13);
  v64 = 0;
  v50 = (objc_class *)v5;
  do
  {
    while (1)
    {
      v15 = v64;
      if (v64 >= v63)
      {
        v48 = 10;
        goto LABEL_94;
      }
      ++v64;
      v16 = v62;
      v17 = *(_QWORD *)(v62 + 24 * v15);
      if (v17)
        *(_DWORD *)v17 += 2;
      v57[9] = (uint64_t *)v17;
      v18 = v16 + 24 * v15;
      v21 = *(_DWORD *)(v18 + 20);
      v19 = (unsigned int *)(v18 + 20);
      v20 = v21;
      v58 = 0;
      v59 = 0;
      v60 = v21;
      v22 = (WTF *)(8 * v21);
      if (v21)
      {
        if (v20 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x194FC5024);
        }
        v23 = WTF::fastMalloc(v22);
        v24 = (WTF *)v23;
        v59 = v20;
        v58 = v23;
        v25 = *v19;
        if ((_DWORD)v25)
        {
          v26 = 0;
          v27 = *(_QWORD *)(v19 - 3);
          v28 = 8 * v25;
          do
          {
            v29 = *(_QWORD *)(v27 + v26);
            if (v29)
              ++*(_DWORD *)(v29 + 8);
            *(_QWORD *)(v23 + v26) = v29;
            v26 += 8;
          }
          while (v28 != v26);
        }
      }
      else
      {
        v24 = 0;
      }
      v61 = 1;
      v54 = 0;
      v55 = 0x800000000;
      v56 = (WTF *)&v57[1];
      memset(v57, 0, 72);
      v30 = (objc_class *)WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::CSSStyleValue>>>::convert<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul>((uint64_t)this, *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), (uint64_t)&v58);
      v31.super.isa = v30;
      v32 = v55;
      if ((_DWORD)v55 == HIDWORD(v55) || v56 != (WTF *)&v57[1] && v56)
      {
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v55, v31) == 1)
          v54 = 1;
      }
      else
      {
        *((_QWORD *)v56 + v55) = v30;
        LODWORD(v55) = v32 + 1;
      }
      v33 = *((_QWORD *)this + 7);
      if (v17 && (v34 = *(_DWORD *)(v17 + 4)) != 0)
      {
        if (v34 == 1)
        {
          v42 = *(unsigned __int8 **)(v17 + 8);
          if ((*(_BYTE *)(v17 + 16) & 4) != 0)
          {
            v43 = *v42;
LABEL_72:
            v35.super.isa = *(Class *)(v33 + 8 * v43 + 42216);
            goto LABEL_39;
          }
          v44 = *(unsigned __int16 *)v42;
          if (v44 <= 0xFF)
          {
            v43 = v44;
            goto LABEL_72;
          }
        }
        v35.super.isa = *(Class *)(v33 + 64760);
        if (!v35.super.isa || v17 != *((_QWORD *)v35.super.isa + 1))
          v35.super.isa = (Class)JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v35.super.isa = *(Class *)(v33 + 41968);
      }
LABEL_39:
      v36 = v55;
      if ((_DWORD)v55 == HIDWORD(v55) || v56 != (WTF *)&v57[1] && v56)
      {
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v55, v35) == 1)
          v54 = 1;
      }
      else
      {
        *((JSValue *)v56 + v55) = v35;
        LODWORD(v55) = v36 + 1;
      }
      v37 = v55;
      if ((_DWORD)v55 == HIDWORD(v55) || v56 != (WTF *)&v57[1] && v56)
      {
        v45.super.isa = (Class)v5;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v55, v45) == 1)
        {
          v54 = 1;
LABEL_86:
          JSC::throwOutOfMemoryError();
          v38 = 1;
          goto LABEL_49;
        }
      }
      else
      {
        *((_QWORD *)v56 + v55) = v5;
        LODWORD(v55) = v37 + 1;
      }
      if (v54)
        goto LABEL_86;
      v52 = v56;
      v53 = v55;
      JSC::call();
      v38 = *(_QWORD *)(v66 + 16) ? 3 : 0;
LABEL_49:
      v39 = v57[0];
      if (v57[0])
      {
        v52 = (WTF *)&v55;
        v46 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v57[0], (uint64_t *)&v52);
        WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v39, v46);
      }
      if (v56 != (WTF *)&v57[1] && v56)
        WTF::fastFree(v56, v14);
      v5 = (unint64_t)v50;
      if (v20)
      {
        v40 = v24;
        do
        {
          v41 = *(_DWORD **)v40;
          *(_QWORD *)v40 = 0;
          if (v41)
          {
            if (v41[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 16))(v41);
            else
              --v41[2];
          }
          v40 = (WTF *)((char *)v40 + 8);
          v22 = (WTF *)((char *)v22 - 8);
        }
        while (v22);
      }
      if (v24)
        WTF::fastFree(v24, v14);
      if (!v17)
        goto LABEL_65;
      if (*(_DWORD *)v17 == 2)
        break;
      *(_DWORD *)v17 -= 2;
LABEL_65:
      if (v38)
        goto LABEL_90;
    }
    WTF::StringImpl::destroy((WTF::StringImpl *)v17, (WTF::StringImpl *)v14);
  }
  while (!v38);
LABEL_90:
  if (v38 == 3)
    v48 = 10;
  else
    v48 = 0;
LABEL_94:
  WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v14);
  return (_BYTE *)v48;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13CSSStyleValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13CSSStyleValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::CSSStyleValue>>>::convert<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  objc_class *v10;
  int v11;
  BOOL v12;
  JSValue v13;
  void *v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v19;
  WTF *v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  WTF *v24;
  _OWORD v25[4];
  uint64_t v26;
  JSC::VM *v27;

  v6 = *(JSC::VM **)(a1 + 56);
  v27 = v6;
  v22 = 0;
  v23 = 0x800000000;
  v24 = (WTF *)((char *)v25 + 8);
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  v7 = *(_DWORD *)(a3 + 12);
  if (v7 >= 9)
  {
    v22 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v23) == 1;
    v7 = *(_DWORD *)(a3 + 12);
    if (v7)
    {
LABEL_3:
      v8 = *(uint64_t **)a3;
      v9 = 8 * v7;
      do
      {
        v10 = (objc_class *)(*v8 ? WebCore::wrap<WebCore::CSSStyleValue>(a1, a2, *v8) : 2);
        if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
          goto LABEL_33;
        v11 = v23;
        if ((_DWORD)v23 != HIDWORD(v23) && (v24 != (WTF *)((char *)v25 + 8) ? (v12 = v24 == 0) : (v12 = 1), v12))
        {
          *((_QWORD *)v24 + v23) = v10;
          LODWORD(v23) = v11 + 1;
        }
        else
        {
          v13.super.isa = v10;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v23, v13) == 1)
            v22 = 1;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  else if (v7)
  {
    goto LABEL_3;
  }
  if (v22)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v20 = v24;
    v21 = v23;
    v15 = *(JSC::VM **)(a2 + 56);
    if (!*((_DWORD *)v15 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) == 0)
    {
      v16 = JSC::constructArray();
      goto LABEL_25;
    }
  }
LABEL_33:
  v16 = 0;
LABEL_25:
  v17 = *(uint64_t **)&v25[0];
  if (*(_QWORD *)&v25[0])
  {
    v20 = (WTF *)&v23;
    v19 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v25[0], (uint64_t *)&v20);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v17, v19);
  }
  if (v24 != (WTF *)((char *)v25 + 8) && v24)
    WTF::fastFree(v24, v14);
  return v16;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6RefPtrIN7WebCore13CSSStyleValueENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a2;
    v5 = 8 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[2];
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6RefPtrIN7WebCore13CSSStyleValueENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::iteratorCreate<WebCore::StylePropertyMapReadOnlyIterator>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  JSC::JSCell *v16;
  JSC::JSObject *Object;
  uint64_t *v18;
  unint64_t SlowCase;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  JSC::Structure *v28;
  int v29;
  JSC::JSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  JSC::Structure *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  void *v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  JSC::Structure **v62;
  int *v63;
  int v64;
  int v65;
  int v66;
  JSC::Structure *v67;

  v4 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
  v5 = *(_QWORD *)(v4 + 56);
  v6 = (unint64_t *)(v5 + 40136);
  v7 = *(_QWORD *)(v4 + 3296);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::StylePropertyMapReadOnlyIterator::s_info
        + ~((_QWORD)&WebCore::StylePropertyMapReadOnlyIterator::s_info << 32)) ^ (((unint64_t)&WebCore::StylePropertyMapReadOnlyIterator::s_info
                                                                                 + ~((_QWORD)&WebCore::StylePropertyMapReadOnlyIterator::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::StylePropertyMapReadOnlyIterator::s_info)
    {
LABEL_6:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_32;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::StylePropertyMapReadOnlyIterator::s_info)
          goto LABEL_6;
      }
    }
  }
  v16 = *(JSC::JSCell **)(v4 + 696);
  LODWORD(v58) = 23;
  if (((unint64_t)v16 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v16);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v5);
  }
  v18 = (uint64_t *)(v5 + 38904);
  SlowCase = *v6;
  if (*v6 < *(_QWORD *)(v5 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v5 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v55 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v5 + 40160);
    *(_QWORD *)(v5 + 40144) = SlowCase + HIDWORD(v55);
    *(_QWORD *)(v5 + 40152) = SlowCase + (int)v55;
LABEL_11:
    *v6 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v5, v4, v16, &v58, &WebCore::JSDOMIteratorPrototype<WebCore::JSStylePropertyMapReadOnly,WebCore::StylePropertyMapReadOnlyIteratorTraits>::s_info, 0, 0);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v20 = *v18;
  if (*(_QWORD *)(v5 + 38904) < *(_QWORD *)(v5 + 38912))
    goto LABEL_15;
  v20 = *(_QWORD *)(v5 + 38920);
  if ((v20 & 1) == 0)
  {
    v56 = *(_QWORD *)(v20 + 8) ^ *(_QWORD *)(v5 + 38928);
    *(_QWORD *)(v5 + 38912) = v20 + HIDWORD(v56);
    *(_QWORD *)(v5 + 38920) = v20 + (int)v56;
LABEL_15:
    *v18 = v20 + 16;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM();
  v20 = JSC::LocalAllocator::allocateSlowCase();
LABEL_16:
  *(_DWORD *)v20 = 0;
  v21 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v20 = SlowCase >> 4;
  *(_DWORD *)(v20 + 4) = v21;
  *(_QWORD *)(v20 + 8) = 0;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v22 = *(WTF::StringImpl **)(*(_QWORD *)(v5 + 41952) + 2000);
  if (v22)
  {
    *(_DWORD *)v22 += 2;
    v58 = v22;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition();
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  else
  {
    v58 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition();
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v5 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v26 = JSC::JSString::create(v5, &v58);
  v27 = v58;
  v58 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (JSC::Structure *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE));
  v66 = *(_DWORD *)v20;
  v67 = v28;
  v29 = JSC::Structure::outOfLineCapacity(v28);
  v64 = 0;
  v65 = v29;
  v58 = (WTF::StringImpl *)&v65;
  v59 = v20;
  v60 = v5;
  v61 = &v66;
  v62 = &v67;
  v63 = &v64;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v28, (JSC::VM *)v5, v24, 6, (uint64_t)&v58);
  if ((*(_BYTE *)((16 * *(unsigned int *)v20) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v20, v5, v64, v26);
  *((_DWORD *)v28 + 4) |= 0x10u;
  LODWORD(v58) = 23;
  if ((v20 & 0xFFFE000000000002) == 0)
  {
    v30 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v20);
    if (v30)
      JSC::JSObject::didBecomePrototype(v30, (JSC::VM *)v5);
  }
  v31 = *v6;
  if (*v6 >= *(_QWORD *)(v5 + 40144))
  {
    v31 = *(_QWORD *)(v5 + 40152);
    if ((v31 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v31 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_29;
    }
    v57 = *(_QWORD *)(v31 + 8) ^ *(_QWORD *)(v5 + 40160);
    *(_QWORD *)(v5 + 40144) = v31 + HIDWORD(v57);
    *(_QWORD *)(v5 + 40152) = v31 + (int)v57;
  }
  *v6 = v31 + 128;
LABEL_29:
  *(_DWORD *)v31 = 0;
  MEMORY[0x19AEA4278](v31, v5, v4, v20, &v58, &WebCore::StylePropertyMapReadOnlyIterator::s_info, 0, 0, 0);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v15 = WebCore::cacheDOMStructure((JSCell *)v4, v31, (uint64_t)&WebCore::StylePropertyMapReadOnlyIterator::s_info);
LABEL_32:
  v32 = *(_QWORD *)(v5 + 41456);
  v33 = *(_QWORD *)(v32 + 23536);
  v34 = *(_QWORD **)(v33 + 3120);
  if (v34)
    goto LABEL_52;
  v35 = *(_QWORD *)(v32 + 22648);
  if (__ldaxr((unsigned __int8 *)v35))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v35))
  {
    goto LABEL_37;
  }
  MEMORY[0x19AEA534C](v35);
LABEL_37:
  v37 = *(_QWORD *)(v35 + 2824);
  if (!*(_QWORD *)(v37 + 3120))
  {
    v38 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v58, "IsoSpace T");
    v67 = 0;
    MEMORY[0x19AEA3204](v38, &v58, v5 + 192, v5 + 1872, 64, 8, &v67);
    v40 = v67;
    v67 = 0;
    if (v40)
      (*(void (**)(JSC::Structure *))(*(_QWORD *)v40 + 8))(v40);
    v41 = v58;
    v58 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1)
        WTF::fastFree(v41, v39);
      else
        --*(_DWORD *)v41;
    }
    v42 = *(_QWORD *)(v37 + 3120);
    *(_QWORD *)(v37 + 3120) = v38;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v33 + 3120);
  *(_QWORD *)(v33 + 3120) = v34;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v35);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_51;
  }
  if (__stlxr(0, (unsigned __int8 *)v35))
LABEL_51:
    WTF::Lock::unlockSlow((WTF::Lock *)v35);
LABEL_52:
  v47 = v34[3];
  if (v47 < v34[4])
  {
LABEL_53:
    v34[3] = v47 + 64;
    goto LABEL_54;
  }
  v47 = v34[5];
  if ((v47 & 1) == 0)
  {
    v54 = *(_QWORD *)(v47 + 8) ^ v34[6];
    v34[4] = v47 + HIDWORD(v54);
    v34[5] = v47 + (int)v54;
    goto LABEL_53;
  }
  JSC::sanitizeStackForVM();
  v47 = JSC::LocalAllocator::allocateSlowCase();
LABEL_54:
  *(_DWORD *)v47 = 0;
  WebCore::JSDOMObject::JSDOMObject(v47, v15);
  v48 = *(_QWORD *)(a1 + 24);
  v49 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28));
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v48 + 48))(&v58, v48, v49);
  v50 = v58;
  v58 = 0;
  *(_QWORD *)(v47 + 24) = v50;
  v51 = v59;
  v59 = 0;
  v60 = 0;
  *(_QWORD *)(v47 + 32) = v51;
  *(_QWORD *)(v47 + 40) = 0;
  *(_BYTE *)(v47 + 48) = 1;
  WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v52);
  *(_DWORD *)(v47 + 56) = a2;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  return v47;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF *v12;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 24 * v3;
    do
    {
      v6 = *((unsigned int *)v4 + 5);
      if ((_DWORD)v6)
      {
        v7 = (_DWORD **)*((_QWORD *)v4 + 1);
        v8 = 8 * v6;
        do
        {
          v9 = *v7;
          *v7 = 0;
          if (v9)
          {
            if (v9[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
            else
              --v9[2];
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      v10 = (WTF *)*((_QWORD *)v4 + 1);
      if (v10)
      {
        *((_QWORD *)v4 + 1) = 0;
        *((_DWORD *)v4 + 4) = 0;
        WTF::fastFree(v10, a2);
      }
      v11 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v4 = (WTF *)((char *)v4 + 24);
    }
    while (v4 != (WTF *)v5);
  }
  v12 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  return a1;
}

JSC *WebCore::JSDOMIteratorPrototype<WebCore::JSStylePropertyMapReadOnly,WebCore::StylePropertyMapReadOnlyIteratorTraits>::next(JSC *this, _QWORD *a2)
{
  JSC *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSValue v25;
  uint64_t IteratorResultObject;
  int v27;
  uint64_t v28;
  int v29;
  JSC::JSGlobalObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  JSC::VM *v37;
  void *v38;
  uint64_t *v39;
  JSValue v40;
  void *v41;
  WTF *v42;
  _DWORD *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  char v55;
  uint64_t *v56;
  int v57;
  char v58;
  uint64_t v59;
  WTF *v60;
  uint64_t *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v2 = this;
  v3 = a2[5];
  if ((v3 & 0xFFFE000000000002) != 0)
    return (JSC *)JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMIteratorBase<WebCore::JSStylePropertyMapReadOnly,WebCore::StylePropertyMapReadOnlyIteratorTraits>::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMIteratorBase<WebCore::JSStylePropertyMapReadOnly,WebCore::StylePropertyMapReadOnlyIteratorTraits>::s_info
         && v6 != 0);
  }
  if (!v5)
    return (JSC *)JSC::throwTypeError();
  if (!*(_BYTE *)(v3 + 48))
  {
LABEL_26:
    v25.super.isa = (Class)1;
    return (JSC *)JSC::createIteratorResultObject(v2, (JSC::JSGlobalObject *)0xA, v25);
  }
  v10 = *(_QWORD *)(v3 + 40);
  if (v10 >= *(unsigned int *)(v3 + 36))
  {
    WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 24, a2);
    *(_BYTE *)(v3 + 48) = 0;
    goto LABEL_26;
  }
  *(_QWORD *)(v3 + 40) = v10 + 1;
  v11 = *(_QWORD *)(v3 + 24);
  v12 = *(_QWORD *)(v11 + 24 * v10);
  if (v12)
    *(_DWORD *)v12 += 2;
  v13 = v11 + 24 * v10;
  v16 = *(_DWORD *)(v13 + 20);
  v14 = (unsigned int *)(v13 + 20);
  v15 = v16;
  v52 = 0;
  v53 = 0;
  v51 = (WTF::StringImpl *)v12;
  v54 = v16;
  v17 = (WTF *)(8 * v16);
  if (!v16)
  {
    v19 = 0;
    goto LABEL_30;
  }
  if (!(v15 >> 29))
  {
    v18 = WTF::fastMalloc(v17);
    v19 = (WTF *)v18;
    v53 = v15;
    v52 = v18;
    v20 = *v14;
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = *(_QWORD *)(v14 - 3);
      v23 = 8 * v20;
      do
      {
        v24 = *(_QWORD *)(v22 + v21);
        if (v24)
          ++*(_DWORD *)(v24 + 8);
        *(_QWORD *)(v18 + v21) = v24;
        v21 += 8;
      }
      while (v23 != v21);
    }
LABEL_30:
    v55 = 1;
    v27 = *(_DWORD *)(v3 + 56);
    if (v27 != 2)
    {
      if (v27 == 1)
      {
        v31 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::CSSStyleValue>>>::convert<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul>((uint64_t)v2, *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28), (uint64_t)&v52);
LABEL_40:
        v30 = (JSC::JSGlobalObject *)v31;
LABEL_55:
        v40.super.isa = 0;
        IteratorResultObject = JSC::createIteratorResultObject(v2, v30, v40);
        if (v15)
        {
          v42 = v19;
          do
          {
            v43 = *(_DWORD **)v42;
            *(_QWORD *)v42 = 0;
            if (v43)
            {
              if (v43[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 16))(v43);
              else
                --v43[2];
            }
            v42 = (WTF *)((char *)v42 + 8);
            v17 = (WTF *)((char *)v17 - 8);
          }
          while (v17);
        }
        if (v19)
        {
          v52 = 0;
          v53 = 0;
          WTF::fastFree(v19, v41);
        }
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v41);
          else
            *(_DWORD *)v51 -= 2;
        }
        return (JSC *)IteratorResultObject;
      }
      if (v27)
      {
        v30 = 0;
        goto LABEL_55;
      }
      v28 = *((_QWORD *)v2 + 7);
      if (!v12 || (v29 = *(_DWORD *)(v12 + 4)) == 0)
      {
        v30 = *(JSC::JSGlobalObject **)(v28 + 41968);
        goto LABEL_55;
      }
      if (v29 != 1)
      {
LABEL_36:
        v30 = *(JSC::JSGlobalObject **)(v28 + 64760);
        if (v30 && v12 == *((_QWORD *)v30 + 1))
          goto LABEL_55;
        v31 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_40;
      }
      v44 = *(unsigned __int8 **)(v12 + 8);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
      {
        v45 = *v44;
      }
      else
      {
        v48 = *(unsigned __int16 *)v44;
        if (v48 > 0xFF)
          goto LABEL_36;
        v45 = v48;
      }
      v30 = *(JSC::JSGlobalObject **)(v28 + 8 * v45 + 42216);
      goto LABEL_55;
    }
    v32 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
    v33 = *((_QWORD *)v2 + 7);
    if (v12 && (v34 = *(_DWORD *)(v12 + 4)) != 0)
    {
      if (v34 != 1)
      {
LABEL_44:
        v35 = *(_QWORD *)(v33 + 64760);
        if (!v35 || v12 != *(_QWORD *)(v35 + 8))
          v35 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_47;
      }
      v46 = *(unsigned __int8 **)(v12 + 8);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
      {
        v47 = *v46;
      }
      else
      {
        v49 = *(unsigned __int16 *)v46;
        if (v49 > 0xFF)
          goto LABEL_44;
        v47 = v49;
      }
      v35 = *(_QWORD *)(v33 + 8 * v47 + 42216);
    }
    else
    {
      v35 = *(_QWORD *)(v33 + 41968);
    }
LABEL_47:
    v36 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::CSSStyleValue>>>::convert<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul>((uint64_t)v2, v32, (uint64_t)&v52);
    v58 = 0;
    v60 = (WTF *)&v62;
    v61 = 0;
    v64 = 0u;
    v65 = 0u;
    v66 = 0;
    v62 = v35;
    v63 = (unint64_t)v36;
    v59 = 0x800000002;
    v37 = *(JSC::VM **)(v32 + 56);
    v56 = &v62;
    v57 = 2;
    if (*((_DWORD *)v37 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v37) & 1) != 0)
      v30 = 0;
    else
      v30 = (JSC::JSGlobalObject *)JSC::constructArray();
    v39 = v61;
    if (v61)
    {
      v56 = &v59;
      v50 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v61, (uint64_t *)&v56);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v39, v50);
    }
    if (v60 != (WTF *)&v62 && v60)
      WTF::fastFree(v60, v38);
    goto LABEL_55;
  }
  __break(0xC471u);
  return this;
}

unint64_t WebCore::jsStyleSheetListPrototypeFunction_item(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::StyleSheetList *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  JSValue v16;
  JSC::VM *v17;
  unsigned int v18[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "StyleSheetList", "item");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSStyleSheetList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSStyleSheetList::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "StyleSheetList", "item");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v16);
  }
  else
  {
    v11 = *(WebCore::StyleSheetList **)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v18);
    if (v18[1])
    {
      return 0;
    }
    else
    {
      v13 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
      v14 = WebCore::StyleSheetList::item(v11, v18[0], v12);
      if (v14)
        return WebCore::wrap<WebCore::StyleSheet>((uint64_t)this, v13, v14);
      else
        return 2;
    }
  }
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11SubmitEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *result;

  result = (unsigned int *)a2[1];
  a2[1] = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unint64_t WebCore::jsSubtleCryptoPrototypeFunction_encrypt(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  char **v31;
  BOOL v32;
  uint64_t v34;
  unsigned __int8 *v36;
  JSC::JSArrayBufferView *v37;
  JSC::ArrayBufferView *v38;
  int v39;
  int v40;
  uint64_t (*v41)();
  int v42;
  objc_class *v43;
  WebCore::DOMGuardedObject *v44;
  JSC::VM *v45;
  JSValue v46;
  WebCore *v47;
  JSC::JSGlobalObject *v48;
  JSC::CallFrame *v49;
  WebCore::DOMGuardedObject *v50;
  char v51[8];
  int v52;
  uint64_t v53;
  int v54;
  JSC::ArrayBufferView *v55;
  int v56;
  char v57;
  uint64_t v58;
  JSC::ArrayBufferView *v59;
  int v60;
  int v61;
  WebCore::DOMGuardedObject *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC6634);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v50 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_52;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSubtleCrypto::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSubtleCrypto::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_52:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"SubtleCrypto", "encrypt", v17);
  }
  else
  {
    if ((unint64_t)(*((int *)a2 + 8) - 1) > 2)
    {
      v24 = *(_QWORD **)(v18 + 24);
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *((_QWORD *)a2 + 6), (uint64_t)&v62);
      v26 = v65;
      if (v65)
        goto LABEL_40;
      v27 = *((_QWORD *)a2 + 7);
      v28 = *((_QWORD *)this + 7);
      v58 = v28;
      if ((v27 & 0xFFFE000000000002) != 0)
        goto LABEL_38;
      v29 = *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C);
      v30 = *(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) != 0;
      v31 = (char **)(16 * v29);
      if ((_DWORD)v29)
        v32 = v31 == &WebCore::JSCryptoKey::s_info;
      else
        v32 = 1;
      if (!v32)
      {
        do
        {
          v31 = (char **)v31[2];
          v30 = v31 != 0;
        }
        while (v31 != &WebCore::JSCryptoKey::s_info && v31 != 0);
      }
      if (!v30 || (v36 = *(unsigned __int8 **)(v27 + 24)) == 0)
      {
LABEL_38:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v58, 1, "key", 4, "SubtleCrypto", 13, v25, "encrypt", 8, "CryptoKey", 10);
LABEL_39:
        v26 = v65;
LABEL_40:
        if (v26 != -1)
          ((void (*)(uint64_t *, uint64_t *))off_1E330BD78[v26])(&v58, &v63);
        v14 = v50;
        v50 = 0;
        if (!v14)
          goto LABEL_45;
        goto LABEL_43;
      }
      v37 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 8);
      v53 = v28;
      v38 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped(v28, (uint64_t)v37);
      if (v38)
      {
        *(_DWORD *)v38 += 2;
        v56 = 1;
        v55 = 0;
        v59 = v38;
        v60 = 1;
        v61 = 0;
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)v51);
      }
      else
      {
        JSC::JSArrayBufferView::toWrapped(v37, &v55);
        if (!v55)
        {
          JSC::throwTypeError();
          v42 = 1;
          v61 = 1;
LABEL_68:
          ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E330A690[v42])(&v55, &v59);
          goto LABEL_39;
        }
        v59 = v55;
        v60 = 0;
        v61 = 0;
      }
      if (v65
        || (LOBYTE(v55) = 0, v56 = -1, v39 = v64, v64 != -1)
        && (((void (*)(uint64_t *, JSC::ArrayBufferView **, uint64_t *))off_1E330BD68[v64])(&v53, &v55, &v63),
            v56 = v39,
            v61))
      {
        v47 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::jsSubtleCryptoPrototypeFunction_decrypt(v47, v48, v49);
      }
      v51[0] = 0;
      v52 = -1;
      v40 = v60;
      if (v60 == -1)
      {
        LOBYTE(v53) = 0;
        v54 = -1;
      }
      else
      {
        v41 = off_1E330A680[v60];
        ((void (*)(char *, char *, JSC::ArrayBufferView **))v41)(&v57, v51, &v59);
        v52 = v40;
        LOBYTE(v53) = 0;
        v54 = -1;
        ((void (*)(char *, uint64_t *, char *))v41)(&v57, &v53, v51);
        v54 = v40;
      }
      WebCore::SubtleCrypto::encrypt(v24, (uint64_t)this, (uint64_t)&v55, v36, (uint64_t)&v53, (uint64_t *)&v50);
      if (v54 != -1)
        ((void (*)(char *, uint64_t *))off_1E330A670[v54])(&v57, &v53);
      v54 = -1;
      if (v52 != -1)
        ((void (*)(char *, char *))off_1E330A670[v52])(&v57, v51);
      if (v56 != -1)
        ((void (*)(uint64_t *, JSC::ArrayBufferView **))off_1E330BD58[v56])(&v53, &v55);
      v42 = v61;
      if (v61 == -1)
        goto LABEL_39;
      goto LABEL_68;
    }
    v45 = (JSC::VM *)*((_QWORD *)this + 7);
    v46.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v45, this, v46);
  }
  v50 = 0;
LABEL_43:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_45:
  v34 = *(_QWORD *)(v10 + 16);
  if (v34)
  {
    if (*(_QWORD *)(v10 + 24) != v34)
    {
      v43 = *(objc_class **)(v34 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v62);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v62, v43, 0);
      v44 = v62;
      v62 = 0;
      if (v44)
      {
        if (*((_DWORD *)v44 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v44 + 16))(v44);
        else
          --*((_DWORD *)v44 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      return 10;
  }
  return v13;
}

unint64_t WebCore::jsSubtleCryptoPrototypeFunction_decrypt(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  char **v31;
  BOOL v32;
  uint64_t v34;
  unsigned __int8 *v36;
  JSC::JSArrayBufferView *v37;
  JSC::ArrayBufferView *v38;
  int v39;
  int v40;
  uint64_t (*v41)();
  int v42;
  objc_class *v43;
  WebCore::DOMGuardedObject *v44;
  JSC::VM *v45;
  JSValue v46;
  WebCore *v47;
  JSC::JSGlobalObject *v48;
  JSC::CallFrame *v49;
  WebCore::DOMGuardedObject *v50;
  char v51[8];
  int v52;
  uint64_t v53;
  int v54;
  JSC::ArrayBufferView *v55;
  int v56;
  char v57;
  uint64_t v58;
  JSC::ArrayBufferView *v59;
  int v60;
  int v61;
  WebCore::DOMGuardedObject *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC6BECLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v50 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_52;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSubtleCrypto::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSubtleCrypto::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_52:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"SubtleCrypto", "decrypt", v17);
  }
  else
  {
    if ((unint64_t)(*((int *)a2 + 8) - 1) > 2)
    {
      v24 = *(_QWORD **)(v18 + 24);
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *((_QWORD *)a2 + 6), (uint64_t)&v62);
      v26 = v65;
      if (v65)
        goto LABEL_40;
      v27 = *((_QWORD *)a2 + 7);
      v28 = *((_QWORD *)this + 7);
      v58 = v28;
      if ((v27 & 0xFFFE000000000002) != 0)
        goto LABEL_38;
      v29 = *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C);
      v30 = *(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) != 0;
      v31 = (char **)(16 * v29);
      if ((_DWORD)v29)
        v32 = v31 == &WebCore::JSCryptoKey::s_info;
      else
        v32 = 1;
      if (!v32)
      {
        do
        {
          v31 = (char **)v31[2];
          v30 = v31 != 0;
        }
        while (v31 != &WebCore::JSCryptoKey::s_info && v31 != 0);
      }
      if (!v30 || (v36 = *(unsigned __int8 **)(v27 + 24)) == 0)
      {
LABEL_38:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v58, 1, "key", 4, "SubtleCrypto", 13, v25, "decrypt", 8, "CryptoKey", 10);
LABEL_39:
        v26 = v65;
LABEL_40:
        if (v26 != -1)
          ((void (*)(uint64_t *, uint64_t *))off_1E330BD78[v26])(&v58, &v63);
        v14 = v50;
        v50 = 0;
        if (!v14)
          goto LABEL_45;
        goto LABEL_43;
      }
      v37 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 8);
      v53 = v28;
      v38 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped(v28, (uint64_t)v37);
      if (v38)
      {
        *(_DWORD *)v38 += 2;
        v56 = 1;
        v55 = 0;
        v59 = v38;
        v60 = 1;
        v61 = 0;
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)v51);
      }
      else
      {
        JSC::JSArrayBufferView::toWrapped(v37, &v55);
        if (!v55)
        {
          JSC::throwTypeError();
          v42 = 1;
          v61 = 1;
LABEL_68:
          ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E330A690[v42])(&v55, &v59);
          goto LABEL_39;
        }
        v59 = v55;
        v60 = 0;
        v61 = 0;
      }
      if (v65
        || (LOBYTE(v55) = 0, v56 = -1, v39 = v64, v64 != -1)
        && (((void (*)(uint64_t *, JSC::ArrayBufferView **, uint64_t *))off_1E330BD68[v64])(&v53, &v55, &v63),
            v56 = v39,
            v61))
      {
        v47 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::jsSubtleCryptoPrototypeFunction_sign(v47, v48, v49);
      }
      v51[0] = 0;
      v52 = -1;
      v40 = v60;
      if (v60 == -1)
      {
        LOBYTE(v53) = 0;
        v54 = -1;
      }
      else
      {
        v41 = off_1E330A680[v60];
        ((void (*)(char *, char *, JSC::ArrayBufferView **))v41)(&v57, v51, &v59);
        v52 = v40;
        LOBYTE(v53) = 0;
        v54 = -1;
        ((void (*)(char *, uint64_t *, char *))v41)(&v57, &v53, v51);
        v54 = v40;
      }
      WebCore::SubtleCrypto::decrypt(v24, (uint64_t)this, (uint64_t)&v55, v36, (uint64_t)&v53, (uint64_t *)&v50);
      if (v54 != -1)
        ((void (*)(char *, uint64_t *))off_1E330A670[v54])(&v57, &v53);
      v54 = -1;
      if (v52 != -1)
        ((void (*)(char *, char *))off_1E330A670[v52])(&v57, v51);
      if (v56 != -1)
        ((void (*)(uint64_t *, JSC::ArrayBufferView **))off_1E330BD58[v56])(&v53, &v55);
      v42 = v61;
      if (v61 == -1)
        goto LABEL_39;
      goto LABEL_68;
    }
    v45 = (JSC::VM *)*((_QWORD *)this + 7);
    v46.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v45, this, v46);
  }
  v50 = 0;
LABEL_43:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_45:
  v34 = *(_QWORD *)(v10 + 16);
  if (v34)
  {
    if (*(_QWORD *)(v10 + 24) != v34)
    {
      v43 = *(objc_class **)(v34 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v62);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v62, v43, 0);
      v44 = v62;
      v62 = 0;
      if (v44)
      {
        if (*((_DWORD *)v44 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v44 + 16))(v44);
        else
          --*((_DWORD *)v44 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      return 10;
  }
  return v13;
}

unint64_t WebCore::jsSubtleCryptoPrototypeFunction_sign(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  char **v31;
  BOOL v32;
  uint64_t v34;
  unsigned __int8 *v36;
  JSC::JSArrayBufferView *v37;
  JSC::ArrayBufferView *v38;
  int v39;
  int v40;
  uint64_t (*v41)();
  int v42;
  objc_class *v43;
  WebCore::DOMGuardedObject *v44;
  JSC::VM *v45;
  JSValue v46;
  WebCore *v47;
  JSC::JSGlobalObject *v48;
  JSC::CallFrame *v49;
  WebCore::DOMGuardedObject *v50;
  char v51[8];
  int v52;
  uint64_t v53;
  int v54;
  JSC::ArrayBufferView *v55;
  int v56;
  char v57;
  uint64_t v58;
  JSC::ArrayBufferView *v59;
  int v60;
  int v61;
  WebCore::DOMGuardedObject *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC71A4);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v50 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_52;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSubtleCrypto::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSubtleCrypto::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_52:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"SubtleCrypto", "sign", v17);
  }
  else
  {
    if ((unint64_t)(*((int *)a2 + 8) - 1) > 2)
    {
      v24 = *(_QWORD **)(v18 + 24);
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *((_QWORD *)a2 + 6), (uint64_t)&v62);
      v26 = v65;
      if (v65)
        goto LABEL_40;
      v27 = *((_QWORD *)a2 + 7);
      v28 = *((_QWORD *)this + 7);
      v58 = v28;
      if ((v27 & 0xFFFE000000000002) != 0)
        goto LABEL_38;
      v29 = *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C);
      v30 = *(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) != 0;
      v31 = (char **)(16 * v29);
      if ((_DWORD)v29)
        v32 = v31 == &WebCore::JSCryptoKey::s_info;
      else
        v32 = 1;
      if (!v32)
      {
        do
        {
          v31 = (char **)v31[2];
          v30 = v31 != 0;
        }
        while (v31 != &WebCore::JSCryptoKey::s_info && v31 != 0);
      }
      if (!v30 || (v36 = *(unsigned __int8 **)(v27 + 24)) == 0)
      {
LABEL_38:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v58, 1, "key", 4, "SubtleCrypto", 13, v25, "sign", 5, "CryptoKey", 10);
LABEL_39:
        v26 = v65;
LABEL_40:
        if (v26 != -1)
          ((void (*)(uint64_t *, uint64_t *))off_1E330BD78[v26])(&v58, &v63);
        v14 = v50;
        v50 = 0;
        if (!v14)
          goto LABEL_45;
        goto LABEL_43;
      }
      v37 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 8);
      v53 = v28;
      v38 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped(v28, (uint64_t)v37);
      if (v38)
      {
        *(_DWORD *)v38 += 2;
        v56 = 1;
        v55 = 0;
        v59 = v38;
        v60 = 1;
        v61 = 0;
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)v51);
      }
      else
      {
        JSC::JSArrayBufferView::toWrapped(v37, &v55);
        if (!v55)
        {
          JSC::throwTypeError();
          v42 = 1;
          v61 = 1;
LABEL_68:
          ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E330A690[v42])(&v55, &v59);
          goto LABEL_39;
        }
        v59 = v55;
        v60 = 0;
        v61 = 0;
      }
      if (v65
        || (LOBYTE(v55) = 0, v56 = -1, v39 = v64, v64 != -1)
        && (((void (*)(uint64_t *, JSC::ArrayBufferView **, uint64_t *))off_1E330BD68[v64])(&v53, &v55, &v63),
            v56 = v39,
            v61))
      {
        v47 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::jsSubtleCryptoPrototypeFunction_verify(v47, v48, v49);
      }
      v51[0] = 0;
      v52 = -1;
      v40 = v60;
      if (v60 == -1)
      {
        LOBYTE(v53) = 0;
        v54 = -1;
      }
      else
      {
        v41 = off_1E330A680[v60];
        ((void (*)(char *, char *, JSC::ArrayBufferView **))v41)(&v57, v51, &v59);
        v52 = v40;
        LOBYTE(v53) = 0;
        v54 = -1;
        ((void (*)(char *, uint64_t *, char *))v41)(&v57, &v53, v51);
        v54 = v40;
      }
      WebCore::SubtleCrypto::sign(v24, (uint64_t)this, (uint64_t)&v55, v36, (uint64_t)&v53, (uint64_t *)&v50);
      if (v54 != -1)
        ((void (*)(char *, uint64_t *))off_1E330A670[v54])(&v57, &v53);
      v54 = -1;
      if (v52 != -1)
        ((void (*)(char *, char *))off_1E330A670[v52])(&v57, v51);
      if (v56 != -1)
        ((void (*)(uint64_t *, JSC::ArrayBufferView **))off_1E330BD58[v56])(&v53, &v55);
      v42 = v61;
      if (v61 == -1)
        goto LABEL_39;
      goto LABEL_68;
    }
    v45 = (JSC::VM *)*((_QWORD *)this + 7);
    v46.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v45, this, v46);
  }
  v50 = 0;
LABEL_43:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_45:
  v34 = *(_QWORD *)(v10 + 16);
  if (v34)
  {
    if (*(_QWORD *)(v10 + 24) != v34)
    {
      v43 = *(objc_class **)(v34 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v62);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v62, v43, 0);
      v44 = v62;
      v62 = 0;
      if (v44)
      {
        if (*((_DWORD *)v44 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v44 + 16))(v44);
        else
          --*((_DWORD *)v44 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      return 10;
  }
  return v13;
}

unint64_t WebCore::jsSubtleCryptoPrototypeFunction_verify(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  JSC::ArrayBufferView *v28;
  uint64_t v29;
  _BOOL4 v30;
  char **v31;
  BOOL v32;
  uint64_t v34;
  JSC::JSArrayBufferView *v36;
  JSC::ArrayBufferView *v37;
  int v38;
  JSC::JSArrayBufferView *v39;
  JSC::ArrayBufferView *v40;
  int v41;
  objc_class *v42;
  WebCore::DOMGuardedObject *v43;
  JSC::VM *v44;
  JSValue v45;
  int v46;
  int v47;
  uint64_t (*v48)();
  int v49;
  uint64_t (*v50)();
  WebCore *v51;
  JSC::JSGlobalObject *v52;
  JSC::CallFrame *v53;
  unsigned __int8 *v54;
  WebCore::DOMGuardedObject *v55;
  char v56[8];
  int v57;
  char v58[8];
  int v59;
  char v60[8];
  int v61;
  uint64_t v62;
  int v63;
  JSC::ArrayBufferView *v64;
  int v65;
  char v66;
  JSC::ArrayBufferView *v67;
  JSC::ArrayBufferView *v68;
  int v69;
  int v70;
  JSC::ArrayBufferView *v71;
  JSC::ArrayBufferView *v72;
  int v73;
  int v74;
  WebCore::DOMGuardedObject *v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC764CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v55 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_53;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSubtleCrypto::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSubtleCrypto::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_53:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"SubtleCrypto", "verify", v17);
  }
  else
  {
    if ((unint64_t)(*((int *)a2 + 8) - 1) > 3)
    {
      v24 = *(_QWORD **)(v18 + 24);
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *((_QWORD *)a2 + 6), (uint64_t)&v75);
      v26 = v78;
      if (v78)
        goto LABEL_40;
      v27 = *((_QWORD *)a2 + 7);
      v28 = (JSC::ArrayBufferView *)*((_QWORD *)this + 7);
      v71 = v28;
      if ((v27 & 0xFFFE000000000002) != 0)
        goto LABEL_38;
      v29 = *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C);
      v30 = *(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) != 0;
      v31 = (char **)(16 * v29);
      if ((_DWORD)v29)
        v32 = v31 == &WebCore::JSCryptoKey::s_info;
      else
        v32 = 1;
      if (!v32)
      {
        do
        {
          v31 = (char **)v31[2];
          v30 = v31 != 0;
        }
        while (v31 != &WebCore::JSCryptoKey::s_info && v31 != 0);
      }
      if (!v30 || (v54 = *(unsigned __int8 **)(v27 + 24)) == 0)
      {
LABEL_38:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v71, 1, "key", 4, "SubtleCrypto", 13, v25, "verify", 7, "CryptoKey", 10);
        goto LABEL_39;
      }
      v36 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 8);
      v64 = v28;
      v37 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped((uint64_t)v28, (uint64_t)v36);
      if (v37)
      {
        *(_DWORD *)v37 += 2;
        LODWORD(v68) = 1;
        v67 = 0;
        v72 = v37;
        v73 = 1;
        v74 = 0;
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v62);
        v38 = v74;
        if (v74)
        {
LABEL_98:
          if (v38 != -1)
            goto LABEL_99;
LABEL_39:
          v26 = v78;
LABEL_40:
          if (v26 != -1)
            ((void (*)(JSC::ArrayBufferView **, uint64_t *))off_1E330BD78[v26])(&v71, &v76);
          v14 = v55;
          v55 = 0;
          if (!v14)
            goto LABEL_45;
          goto LABEL_43;
        }
      }
      else
      {
        JSC::JSArrayBufferView::toWrapped(v36, &v67);
        if (!v67)
        {
          JSC::throwTypeError();
          v38 = 1;
          v74 = 1;
LABEL_99:
          ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E330A690[v38])(&v67, &v72);
          goto LABEL_39;
        }
        v72 = v67;
        v73 = 0;
        v74 = 0;
      }
      v39 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 9);
      v62 = *((_QWORD *)this + 7);
      v40 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped(v62, (uint64_t)v39);
      if (v40)
      {
        *(_DWORD *)v40 += 2;
        v65 = 1;
        v64 = 0;
        v68 = v40;
        v69 = 1;
        v70 = 0;
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)v60);
        v41 = v70;
        if (v70)
          goto LABEL_92;
      }
      else
      {
        JSC::JSArrayBufferView::toWrapped(v39, &v64);
        if (!v64)
        {
          JSC::throwTypeError();
          v41 = 1;
          v70 = 1;
LABEL_96:
          ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E330A690[v41])(&v64, &v68);
LABEL_97:
          v38 = v74;
          goto LABEL_98;
        }
        v68 = v64;
        v69 = 0;
        v70 = 0;
      }
      if (v78)
        goto LABEL_102;
      LOBYTE(v64) = 0;
      v65 = -1;
      v46 = v77;
      if (v77 != -1)
      {
        ((void (*)(uint64_t *, JSC::ArrayBufferView **, uint64_t *))off_1E330BD68[v77])(&v62, &v64, &v76);
        v65 = v46;
      }
      if (v74)
        goto LABEL_102;
      v60[0] = 0;
      v61 = -1;
      v47 = v73;
      if (v73 == -1)
      {
        LOBYTE(v62) = 0;
        v63 = -1;
      }
      else
      {
        v48 = off_1E330A680[v73];
        ((void (*)(uint64_t *, char *, JSC::ArrayBufferView **))v48)(&v62, v60, &v72);
        v61 = v47;
        LOBYTE(v62) = 0;
        v63 = -1;
        ((void (*)(char *, uint64_t *, char *))v48)(v58, &v62, v60);
        v63 = v47;
      }
      if (v70)
      {
LABEL_102:
        v51 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::jsSubtleCryptoPrototypeFunction_digest(v51, v52, v53);
      }
      v56[0] = 0;
      v57 = -1;
      v49 = v69;
      if (v69 == -1)
      {
        v58[0] = 0;
        v59 = -1;
      }
      else
      {
        v50 = off_1E330A680[v69];
        ((void (*)(char *, char *, JSC::ArrayBufferView **))v50)(v58, v56, &v68);
        v57 = v49;
        v58[0] = 0;
        v59 = -1;
        ((void (*)(char *, char *, char *))v50)(&v66, v58, v56);
        v59 = v49;
      }
      WebCore::SubtleCrypto::verify(v24, (uint64_t)this, (uint64_t)&v64, v54, (uint64_t)&v62, (uint64_t)v58, (uint64_t *)&v55);
      if (v59 != -1)
        ((void (*)(char *, char *))off_1E330A670[v59])(&v66, v58);
      v59 = -1;
      if (v57 != -1)
        ((void (*)(char *, char *))off_1E330A670[v57])(&v66, v56);
      if (v63 != -1)
        ((void (*)(char *, uint64_t *))off_1E330A670[v63])(v58, &v62);
      v63 = -1;
      if (v61 != -1)
        ((void (*)(char *, char *))off_1E330A670[v61])(v58, v60);
      if (v65 != -1)
        ((void (*)(uint64_t *, JSC::ArrayBufferView **))off_1E330BD58[v65])(&v62, &v64);
      v41 = v70;
LABEL_92:
      if (v41 == -1)
        goto LABEL_97;
      goto LABEL_96;
    }
    v44 = (JSC::VM *)*((_QWORD *)this + 7);
    v45.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v44, this, v45);
  }
  v55 = 0;
LABEL_43:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_45:
  v34 = *(_QWORD *)(v10 + 16);
  if (v34)
  {
    if (*(_QWORD *)(v10 + 24) != v34)
    {
      v42 = *(objc_class **)(v34 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v75);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v75, v42, 0);
      v43 = v75;
      v75 = 0;
      if (v43)
      {
        if (*((_DWORD *)v43 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v43 + 16))(v43);
        else
          --*((_DWORD *)v43 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      return 10;
  }
  return v13;
}

unint64_t WebCore::jsSubtleCryptoPrototypeFunction_digest(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  _QWORD *v24;
  int v25;
  JSC::JSArrayBufferView *v26;
  JSC::ArrayBufferView *v27;
  int v28;
  int v29;
  uint64_t (*v30)();
  int v31;
  uint64_t v32;
  objc_class *v34;
  WebCore::DOMGuardedObject *v35;
  JSC::VM *v36;
  JSValue v37;
  WebCore::DOMGuardedObject *v38;
  char v39[8];
  int v40;
  uint64_t v41;
  int v42;
  JSC::ArrayBufferView *v43;
  int v44;
  char v45;
  char v46[8];
  JSC::ArrayBufferView *v47;
  int v48;
  int v49;
  WebCore::DOMGuardedObject *v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC7DC4);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v38 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_55;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSubtleCrypto::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSubtleCrypto::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_55:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"SubtleCrypto", "digest", v17);
LABEL_64:
    v38 = 0;
LABEL_49:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_51;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v36 = (JSC::VM *)*((_QWORD *)this + 7);
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v36, this, v37);
    goto LABEL_64;
  }
  v24 = *(_QWORD **)(v18 + 24);
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *((_QWORD *)a2 + 6), (uint64_t)&v50);
  v25 = v53;
  if (v53)
    goto LABEL_46;
  v26 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 7);
  v41 = *((_QWORD *)this + 7);
  v27 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped(v41, (uint64_t)v26);
  if (v27)
  {
    *(_DWORD *)v27 += 2;
    v44 = 1;
    v43 = 0;
    v47 = v27;
    v48 = 1;
    v49 = 0;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)v39);
LABEL_31:
    if (v53
      || (LOBYTE(v43) = 0, v44 = -1, v28 = v52, v52 != -1)
      && (((void (*)(uint64_t *, JSC::ArrayBufferView **, uint64_t *))off_1E330BD68[v52])(&v41, &v43, &v51),
          v44 = v28,
          v49))
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v39[0] = 0;
    v40 = -1;
    v29 = v48;
    if (v48 == -1)
    {
      LOBYTE(v41) = 0;
      v42 = -1;
    }
    else
    {
      v30 = off_1E330A680[v48];
      ((void (*)(char *, char *, JSC::ArrayBufferView **))v30)(&v45, v39, &v47);
      v40 = v29;
      LOBYTE(v41) = 0;
      v42 = -1;
      ((void (*)(char *, uint64_t *, char *))v30)(&v45, &v41, v39);
      v42 = v29;
    }
    WebCore::SubtleCrypto::digest(v24, (uint64_t)this, (uint64_t)&v43, (uint64_t)&v41, (uint64_t *)&v38);
    if (v42 != -1)
      ((void (*)(char *, uint64_t *))off_1E330A670[v42])(&v45, &v41);
    v42 = -1;
    if (v40 != -1)
      ((void (*)(char *, char *))off_1E330A670[v40])(&v45, v39);
    if (v44 != -1)
      ((void (*)(uint64_t *, JSC::ArrayBufferView **))off_1E330BD58[v44])(&v41, &v43);
    v31 = v49;
    if (v49 == -1)
      goto LABEL_45;
    goto LABEL_44;
  }
  JSC::JSArrayBufferView::toWrapped(v26, &v43);
  if (v43)
  {
    v47 = v43;
    v48 = 0;
    v49 = 0;
    goto LABEL_31;
  }
  JSC::throwTypeError();
  v31 = 1;
  v49 = 1;
LABEL_44:
  ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E330A690[v31])(&v43, &v47);
LABEL_45:
  v25 = v53;
LABEL_46:
  if (v25 != -1)
    ((void (*)(char *, uint64_t *))off_1E330BD78[v25])(v46, &v51);
  v14 = v38;
  v38 = 0;
  if (v14)
    goto LABEL_49;
LABEL_51:
  v32 = *(_QWORD *)(v10 + 16);
  if (v32)
  {
    if (*(_QWORD *)(v10 + 24) != v32)
    {
      v34 = *(objc_class **)(v32 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v50);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v50, v34, 0);
      v35 = v50;
      v50 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v35 + 16))(v35);
        else
          --*((_DWORD *)v35 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsSubtleCryptoPrototypeFunction_generateKey(WebCore *this, uint64_t a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  _QWORD *v24;
  int v25;
  unint64_t v26;
  WTF *v27;
  _BOOL8 i;
  uint64_t v29;
  int v30;
  void *v31;
  WTF *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  objc_class *v38;
  WebCore::DOMGuardedObject *v39;
  JSC::VM *v40;
  JSValue v41;
  void *v42;
  WTF *v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int *v47;
  int v48;
  WebCore::DOMGuardedObject *v49;
  WTF::StringImpl *v50[2];
  int v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  WebCore::DOMGuardedObject *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC828CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v49 = v15;
  v18 = *(_QWORD *)(a2 + 40);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_59;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSubtleCrypto::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSubtleCrypto::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_59:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"SubtleCrypto", "generateKey", v17);
LABEL_68:
    v49 = 0;
LABEL_52:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_54;
  }
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 2)
  {
    v40 = (JSC::VM *)*((_QWORD *)this + 7);
    v41.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v40, this, v41);
    goto LABEL_68;
  }
  v24 = *(_QWORD **)(v18 + 24);
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *(_QWORD *)(a2 + 48), (uint64_t)&v56);
  v25 = v59;
  if (!v59)
  {
    v26 = *(_QWORD *)(a2 + 56);
    v27 = (WTF *)*((_QWORD *)this + 7);
    if (v26 >= 0xFFFE000000000000)
      goto LABEL_77;
    if (v26 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      i = COERCE_DOUBLE(v26 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v26 - 0x2000000000000) < 0.0;
      goto LABEL_31;
    }
    if ((v26 & 0xFFFE000000000002) != 0)
    {
      i = v26 == 7;
      goto LABEL_31;
    }
    v45 = *(unsigned __int8 *)(v26 + 5);
    if (v45 == 3)
    {
      v48 = *(_DWORD *)(v26 + 8);
LABEL_88:
      v44 = v48 == 0;
      goto LABEL_92;
    }
    if (v45 == 2)
    {
      v46 = *(_QWORD *)(v26 + 8);
      if ((v46 & 1) != 0)
        v47 = (int *)(v26 + 16);
      else
        v47 = (int *)(v46 + 4);
      v48 = *v47;
      goto LABEL_88;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) != 0)
    {
      v44 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
      goto LABEL_92;
    }
    for (i = 1; ; i = !v44)
    {
LABEL_31:
      if (*((_DWORD *)v27 + 20))
      {
        if ((JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
          goto LABEL_48;
        v27 = (WTF *)*((_QWORD *)this + 7);
      }
      a2 = *(_QWORD *)(a2 + 64);
      v52 = v27;
      if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
        break;
      v54 = 0;
      v55 = 0;
      v50[0] = (WTF::StringImpl *)&v54;
      JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::CryptoKeyUsage>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, a2, (uint64_t *)v50);
      if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27))
      {
        v43 = v54;
        v51 = 1;
        if (v54)
        {
          v54 = 0;
          LODWORD(v55) = 0;
          WTF::fastFree(v43, v42);
        }
        v33 = 1;
        goto LABEL_47;
      }
      v27 = v54;
      v29 = v55;
      v51 = 0;
      if (!v59)
      {
        LOBYTE(v54) = 0;
        LODWORD(v55) = -1;
        v30 = v58;
        if (v58 != -1)
        {
          ((void (*)(WTF **, WTF **, uint64_t *))off_1E330BD68[v58])(&v52, &v54, &v57);
          LODWORD(v55) = v30;
        }
        v50[0] = 0;
        v50[1] = 0;
        v52 = v27;
        v53 = v29;
        WebCore::SubtleCrypto::generateKey(v24, (uint64_t)this, (uint64_t)&v54, i, (int **)&v52, (uint64_t *)&v49);
        v32 = v52;
        if (v52)
        {
          v52 = 0;
          LODWORD(v53) = 0;
          WTF::fastFree(v32, v31);
        }
        if ((_DWORD)v55 != -1)
          ((void (*)(WTF **, WTF **))off_1E330BD58[v55])(&v52, &v54);
        v33 = 0;
        goto LABEL_47;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_77:
      v44 = (_DWORD)v26 == 0;
LABEL_92:
      ;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v35 = v50[0];
    v50[0] = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v34);
      else
        *(_DWORD *)v35 -= 2;
    }
    v33 = 1;
    v51 = 1;
LABEL_47:
    ((void (*)(WTF **, WTF::StringImpl **))off_1E330BD88[v33])(&v54, v50);
LABEL_48:
    v25 = v59;
  }
  if (v25 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E330BD78[v25])(v50, &v57);
  v14 = v49;
  v49 = 0;
  if (v14)
    goto LABEL_52;
LABEL_54:
  v36 = *(_QWORD *)(v10 + 16);
  if (v36)
  {
    if (*(_QWORD *)(v10 + 24) != v36)
    {
      v38 = *(objc_class **)(v36 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v56);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v56, v38, 0);
      v39 = v56;
      v56 = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v39 + 16))(v39);
        else
          --*((_DWORD *)v39 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsSubtleCryptoPrototypeFunction_deriveKey(WebCore *this, uint64_t a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  unint64_t v11;
  int v12;
  JSC::VM *v13;
  unint64_t v14;
  WebCore::DOMGuardedObject *v15;
  WebCore::DOMGuardedObject *v16;
  JSC::JSGlobalObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  char **v31;
  BOOL v32;
  uint64_t v34;
  int v36;
  unint64_t v37;
  JSC::VM *v38;
  BOOL i;
  int v40;
  void *v41;
  WTF *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  objc_class *v46;
  WebCore::DOMGuardedObject *v47;
  JSC::VM *v48;
  JSValue v49;
  void *v50;
  WTF *v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  int *v55;
  int v56;
  int v57;
  int v58;
  char v59;
  BOOL v60;
  uint64_t v61;
  WebCore::DOMGuardedObject *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  int v65;
  WTF *v66;
  int v67;
  int v68;
  JSC::VM *v69;
  int v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  WebCore::DOMGuardedObject *v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC8980);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = 0xFFFE000000000002;
  v12 = *((_DWORD *)this + 291);
  if (v12)
    v13 = (JSC::VM *)(16 * (v12 & 0xFFFFFFFE));
  else
    v13 = 0;
  v14 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v13, a3);
  v15 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v16 = WebCore::DOMGuardedObject::DOMGuardedObject(v15, (unint64_t)this, v14);
  *(_QWORD *)v16 = &off_1E3226868;
  *((_DWORD *)v16 + 10) = 0;
  *((_BYTE *)v16 + 44) = 0;
  v62 = v16;
  v19 = *(_QWORD *)(a2 + 40);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_72;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSSubtleCrypto::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSSubtleCrypto::s_info && v22 != 0);
  }
  if (!v21)
  {
LABEL_72:
    WebCore::rejectPromiseWithThisTypeError(v15, (WebCore::DeferredPromise *)"SubtleCrypto", "deriveKey", v18);
LABEL_90:
    v62 = 0;
LABEL_43:
    if (*((_DWORD *)v15 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v15 + 16))(v15);
    else
      --*((_DWORD *)v15 + 4);
    goto LABEL_45;
  }
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 4)
  {
    v48 = (JSC::VM *)*((_QWORD *)this + 7);
    v49.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v17);
    JSC::VM::throwException(v48, this, v49);
    goto LABEL_90;
  }
  v25 = *(_QWORD **)(v19 + 24);
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *(_QWORD *)(a2 + 48), (uint64_t)&v77);
  v27 = v80;
  if (!v80)
  {
    v28 = *(_QWORD *)(a2 + 56);
    v73 = *((_QWORD *)this + 7);
    if ((v28 & 0xFFFE000000000002) != 0)
      goto LABEL_38;
    v29 = *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C);
    v30 = *(_DWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C) != 0;
    v31 = (char **)(16 * v29);
    if ((_DWORD)v29)
      v32 = v31 == &WebCore::JSCryptoKey::s_info;
    else
      v32 = 1;
    if (!v32)
    {
      do
      {
        v31 = (char **)v31[2];
        v30 = v31 != 0;
      }
      while (v31 != &WebCore::JSCryptoKey::s_info && v31 != 0);
    }
    if (v30 && (v61 = *(_QWORD *)(v28 + 24)) != 0)
    {
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *(_QWORD *)(a2 + 64), (uint64_t)&v73);
      v36 = v76;
      if (!v76)
      {
        v37 = *(_QWORD *)(a2 + 72);
        v38 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v37 >= 0xFFFE000000000000)
          goto LABEL_100;
        if (v37 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          i = COERCE_DOUBLE(v37 - 0x2000000000000) < 0.0;
          if (COERCE_DOUBLE(v37 - 0x2000000000000) > 0.0)
            i = 1;
          goto LABEL_55;
        }
        if ((v37 & 0xFFFE000000000002) != 0)
        {
          i = v37 == 7;
          goto LABEL_55;
        }
        v53 = *(unsigned __int8 *)(v37 + 5);
        if (v53 == 3)
        {
          v56 = *(_DWORD *)(v37 + 8);
LABEL_111:
          v52 = v56 == 0;
          goto LABEL_115;
        }
        if (v53 == 2)
        {
          v54 = *(_QWORD *)(v37 + 8);
          if ((v54 & 1) != 0)
            v55 = (int *)(v37 + 16);
          else
            v55 = (int *)(v54 + 4);
          v56 = *v55;
          goto LABEL_111;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0xA) & 1) != 0)
        {
          v52 = *(_QWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
          goto LABEL_115;
        }
        for (i = 1; ; i = !v52)
        {
LABEL_55:
          if (*((_DWORD *)v38 + 20))
          {
            v60 = i;
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
              goto LABEL_78;
            v38 = (JSC::VM *)*((_QWORD *)this + 7);
            i = v60;
          }
          a2 = *(_QWORD *)(a2 + 80);
          v69 = v38;
          if ((a2 & v11) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
            break;
          v59 = i;
          v71 = 0;
          v72 = 0;
          v63 = (WTF::StringImpl *)&v71;
          JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::CryptoKeyUsage>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, a2, (uint64_t *)&v63);
          if (*((_DWORD *)v38 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v38))
          {
            v51 = v71;
            v65 = 1;
            if (v71)
            {
              v71 = 0;
              LODWORD(v72) = 0;
              WTF::fastFree(v51, v50);
            }
            v43 = 1;
            goto LABEL_77;
          }
          v11 = (unint64_t)v71;
          v63 = v71;
          v57 = HIDWORD(v72);
          v58 = v72;
          v64 = v72;
          v65 = 0;
          if (!v80)
          {
            LOBYTE(v71) = 0;
            LODWORD(v72) = -1;
            v38 = (JSC::VM *)v79;
            if (v79 != -1)
            {
              ((void (*)(JSC::VM **, WTF **, uint64_t *))off_1E330BD68[v79])(&v69, &v71, &v78);
              LODWORD(v72) = (_DWORD)v38;
            }
            if (!v76)
            {
              LOBYTE(v69) = 0;
              v70 = -1;
              v40 = v75;
              if (v75 != -1)
              {
                ((void (*)(WTF **, JSC::VM **, uint64_t *))off_1E330BD68[v75])(&v66, &v69, &v74);
                v70 = v40;
              }
              v63 = 0;
              v64 = 0;
              v66 = (WTF *)v11;
              v67 = v58;
              v68 = v57;
              WebCore::SubtleCrypto::deriveKey(v25, (uint64_t)this, (uint64_t)&v71, v61, (uint64_t)&v69, v59, (int **)&v66, (uint64_t *)&v62);
              v42 = v66;
              if (v66)
              {
                v66 = 0;
                v67 = 0;
                WTF::fastFree(v42, v41);
              }
              if (v70 != -1)
                ((void (*)(WTF **, JSC::VM **))off_1E330BD58[v70])(&v66, &v69);
              if ((_DWORD)v72 != -1)
                ((void (*)(JSC::VM **, WTF **))off_1E330BD58[v72])(&v69, &v71);
              v43 = 0;
              goto LABEL_77;
            }
          }
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_100:
          v52 = (_DWORD)v37 == 0;
LABEL_115:
          ;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        JSC::throwTypeError();
        v45 = v63;
        v63 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v44);
          else
            *(_DWORD *)v45 -= 2;
        }
        v43 = 1;
        v65 = 1;
LABEL_77:
        ((void (*)(WTF **, WTF::StringImpl **))off_1E330BD88[v43])(&v71, &v63);
LABEL_78:
        v36 = v76;
      }
      if (v36 != -1)
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1E330BD78[v36])(&v63, &v74);
    }
    else
    {
LABEL_38:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v73, 1, "baseKey", 8, "SubtleCrypto", 13, v26, "deriveKey", 10, "CryptoKey", 10);
    }
    v27 = v80;
  }
  if (v27 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E330BD78[v27])(&v73, &v78);
  v15 = v62;
  v62 = 0;
  if (v15)
    goto LABEL_43;
LABEL_45:
  v34 = *(_QWORD *)(v10 + 16);
  if (v34)
  {
    if (*(_QWORD *)(v10 + 24) != v34)
    {
      v46 = *(objc_class **)(v34 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v14, 0, &v77);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v77, v46, 0);
      v47 = v77;
      v77 = 0;
      if (v47)
      {
        if (*((_DWORD *)v47 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v47 + 16))(v47);
        else
          --*((_DWORD *)v47 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v14;
}

unint64_t WebCore::jsSubtleCryptoPrototypeFunction_deriveBits(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  char **v30;
  BOOL v31;
  uint64_t v33;
  unsigned __int8 *v35;
  int v36;
  objc_class *v37;
  WebCore::DOMGuardedObject *v38;
  JSC::VM *v39;
  JSValue v40;
  WebCore *v41;
  JSC::JSGlobalObject *v42;
  JSC::CallFrame *v43;
  WebCore::DOMGuardedObject *v44;
  unsigned int v45[2];
  uint64_t v46;
  int v47;
  char v48;
  WebCore::DOMGuardedObject *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC8EBCLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v44 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_57;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSubtleCrypto::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSubtleCrypto::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_57:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"SubtleCrypto", "deriveBits", v17);
LABEL_66:
    v44 = 0;
LABEL_43:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_45;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v39 = (JSC::VM *)*((_QWORD *)this + 7);
    v40.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v39, this, v40);
    goto LABEL_66;
  }
  v24 = *(_QWORD **)(v18 + 24);
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *((_QWORD *)a2 + 6), (uint64_t)&v49);
  v26 = v52;
  if (!v52)
  {
    v27 = *((_QWORD *)a2 + 7);
    v46 = *((_QWORD *)this + 7);
    if ((v27 & 0xFFFE000000000002) != 0)
      goto LABEL_38;
    v28 = *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C);
    v29 = *(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) != 0;
    v30 = (char **)(16 * v28);
    if ((_DWORD)v28)
      v31 = v30 == &WebCore::JSCryptoKey::s_info;
    else
      v31 = 1;
    if (!v31)
    {
      do
      {
        v30 = (char **)v30[2];
        v29 = v30 != 0;
      }
      while (v30 != &WebCore::JSCryptoKey::s_info && v30 != 0);
    }
    if (v29 && (v35 = *(unsigned __int8 **)(v27 + 24)) != 0)
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v45);
      if (!v45[1])
      {
        if (v52)
        {
          v41 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
          return WebCore::jsSubtleCryptoPrototypeFunction_importKey(v41, v42, v43);
        }
        LOBYTE(v46) = 0;
        v47 = -1;
        v36 = v51;
        if (v51 != -1)
        {
          ((void (*)(char *, uint64_t *, uint64_t *))off_1E330BD68[v51])(&v48, &v46, &v50);
          v47 = v36;
        }
        WebCore::SubtleCrypto::deriveBits(v24, (uint64_t)this, (uint64_t)&v46, v35, v45[0], (uint64_t *)&v44);
        if (v47 != -1)
          ((void (*)(char *, uint64_t *))off_1E330BD58[v47])(&v48, &v46);
      }
    }
    else
    {
LABEL_38:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v46, 1, "baseKey", 8, "SubtleCrypto", 13, v25, "deriveBits", 11, "CryptoKey", 10);
    }
    v26 = v52;
  }
  if (v26 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E330BD78[v26])(&v46, &v50);
  v14 = v44;
  v44 = 0;
  if (v14)
    goto LABEL_43;
LABEL_45:
  v33 = *(_QWORD *)(v10 + 16);
  if (v33)
  {
    if (*(_QWORD *)(v10 + 24) != v33)
    {
      v37 = *(objc_class **)(v33 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v49);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v49, v37, 0);
      v38 = v49;
      v49 = 0;
      if (v38)
      {
        if (*((_DWORD *)v38 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v38 + 16))(v38);
        else
          --*((_DWORD *)v38 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      return 10;
  }
  return v13;
}

WTF *WebCore::jsSubtleCryptoPrototypeFunction_importKey(WebCore *this, uint64_t a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  unint64_t v11;
  int v12;
  JSC::VM *v13;
  WTF *v14;
  WebCore::DOMGuardedObject *v15;
  WebCore::DOMGuardedObject *v16;
  JSC::JSGlobalObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  JSC::VM *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  int v34;
  unint64_t v35;
  JSC::VM *v36;
  double v37;
  _BOOL8 i;
  int v39;
  void *v40;
  WTF *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  objc_class *v47;
  WebCore::DOMGuardedObject *v48;
  JSValue v49;
  void *v50;
  WTF::StringImpl *v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  int *v55;
  int v56;
  uint64_t v57;
  WTF *v58;
  _QWORD *v59;
  WebCore::DOMGuardedObject *v60;
  void *v61;
  uint64_t v62;
  int v63;
  WTF *v64;
  int v65;
  int v66;
  JSC::VM *v67;
  int v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  WebCore::DOMGuardedObject *v76;
  _QWORD v77[23];
  unsigned int v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC9554);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = 0xFFFE000000000002;
  v12 = *((_DWORD *)this + 291);
  if (v12)
    v13 = (JSC::VM *)(16 * (v12 & 0xFFFFFFFE));
  else
    v13 = 0;
  v14 = (WTF *)JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v13, a3);
  v15 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v16 = WebCore::DOMGuardedObject::DOMGuardedObject(v15, (unint64_t)this, (unint64_t)v14);
  *(_QWORD *)v16 = &off_1E3226868;
  *((_DWORD *)v16 + 10) = 0;
  *((_BYTE *)v16 + 44) = 0;
  v60 = v16;
  v19 = *(_QWORD *)(a2 + 40);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_80;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSSubtleCrypto::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSSubtleCrypto::s_info && v22 != 0);
  }
  if (!v21)
  {
LABEL_80:
    WebCore::rejectPromiseWithThisTypeError(v15, (WebCore::DeferredPromise *)"SubtleCrypto", "importKey", v18);
  }
  else
  {
    v25 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((unint64_t)(*(int *)(a2 + 32) - 1) > 4)
    {
      v26 = *(_QWORD **)(v19 + 24);
      v27 = *(_QWORD *)(a2 + 48);
      v76 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
      v29 = WebCore::parseEnumeration<WebCore::CryptoKeyFormat>(this, v27);
      if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
        goto LABEL_72;
      if (v29 <= 0xFFu)
      {
        WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)&v76, 0, "format", 7, "SubtleCrypto", 13, v28, "importKey", 10, "\"raw\", \"spki\", \"pkcs8\", \"jwk\"", 30);
        goto LABEL_72;
      }
      v30 = *(_QWORD *)(a2 + 56);
      v31 = *((_QWORD *)this + 7);
      v72 = v31;
      if ((v30 & 0xFFFFFFFFFFFFFFF7) == 2)
        goto LABEL_29;
      v32 = (_DWORD *)JSC::JSArrayBuffer::toWrapped(v31, v30);
      if (v32)
      {
        *v32 += 2;
        v71 = 1;
        v69 = 0;
        v77[0] = v32;
        v78 = 1;
        v79 = 0;
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEN7WebCore10JsonWebKeyEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSG_SK_SM_EEEEEEDcSQ_DpT0_((uint64_t)v32, (_QWORD **)&v69);
        goto LABEL_38;
      }
      JSC::JSArrayBufferView::toWrapped((JSC::JSArrayBufferView *)v30, &v69);
      if (v69)
      {
        v77[0] = v69;
        v78 = 0;
        v79 = 0;
        goto LABEL_38;
      }
      if ((v30 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v30 + 5) >= 0x17u)
      {
LABEL_29:
        WebCore::convertDictionary<WebCore::JsonWebKey>((JSC::JSCell *)v30, this, (uint64_t)&v69);
        WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey>>::ConversionResultStorage<WebCore::JsonWebKey>(WebCore::Detail::ConversionResultStorage<WebCore::JsonWebKey> &&)::{lambda(void)#1}::operator()((uint64_t)&v76, (uint64_t *)&v69);
        if (v71 != -1)
          (*(&off_1E330BDC8 + v71))((int)&v61, (WebCore::JsonWebKey *)&v69);
      }
      else
      {
        JSC::throwTypeError();
        v79 = 1;
      }
LABEL_38:
      v33 = v79;
      if (!v79)
      {
        WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *(_QWORD *)(a2 + 64), (uint64_t)&v72);
        v34 = v75;
        if (!v75)
        {
          v35 = *(_QWORD *)(a2 + 72);
          v36 = (JSC::VM *)*((_QWORD *)this + 7);
          v59 = v26;
          if (v35 >= 0xFFFE000000000000)
            goto LABEL_101;
          *(_QWORD *)&v37 = v35 - 0x2000000000000;
          if (v35 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            if (v37 <= 0.0)
            {
              i = v37 < 0.0;
              goto LABEL_44;
            }
          }
          else
          {
            if ((v35 & 0xFFFE000000000002) != 0)
            {
              i = v35 == 7;
              goto LABEL_44;
            }
            v53 = *(unsigned __int8 *)(v35 + 5);
            if (v53 == 3)
            {
              v56 = *(_DWORD *)(v35 + 8);
LABEL_111:
              v52 = v56 == 0;
              goto LABEL_112;
            }
            if (v53 == 2)
            {
              v54 = *(_QWORD *)(v35 + 8);
              if ((v54 & 1) != 0)
                v55 = (int *)(v35 + 16);
              else
                v55 = (int *)(v54 + 4);
              v56 = *v55;
              goto LABEL_111;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v52 = *(_QWORD *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
              goto LABEL_112;
            }
          }
          for (i = 1; ; i = !v52)
          {
LABEL_44:
            if (*((_DWORD *)v36 + 20))
            {
              if ((JSC::VM::hasExceptionsAfterHandlingTraps(v36) & 1) != 0)
                goto LABEL_66;
              v36 = (JSC::VM *)*((_QWORD *)this + 7);
            }
            a2 = *(_QWORD *)(a2 + 80);
            v67 = v36;
            if ((a2 & v11) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
              break;
            v69 = 0;
            v70 = 0;
            v61 = &v69;
            JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::CryptoKeyUsage>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, a2, (uint64_t *)&v61);
            if (*((_DWORD *)v36 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v36))
            {
              v51 = v69;
              v63 = 1;
              if (v69)
              {
                v69 = 0;
                LODWORD(v70) = 0;
                WTF::fastFree(v51, v50);
              }
              v42 = 1;
              goto LABEL_65;
            }
            v57 = v10;
            v58 = v14;
            v14 = v69;
            v61 = v69;
            v11 = v70;
            v36 = (JSC::VM *)HIDWORD(v70);
            v62 = v70;
            v63 = 0;
            if (!v79)
            {
              LOBYTE(v69) = 0;
              v71 = -1;
              v10 = v78;
              if (v78 != -1)
              {
                ((void (*)(JSC::VM **, WTF::StringImpl **, _QWORD *))off_1E330BDB0[v78])(&v67, &v69, v77);
                v71 = v10;
              }
              if (!v75)
              {
                LOBYTE(v67) = 0;
                v68 = -1;
                v39 = v74;
                if (v74 != -1)
                {
                  ((void (*)(WTF **, JSC::VM **, uint64_t *))off_1E330BD68[v74])(&v64, &v67, &v73);
                  v68 = v39;
                }
                v61 = 0;
                v62 = 0;
                v64 = v14;
                v65 = v11;
                v66 = (int)v36;
                WebCore::SubtleCrypto::importKey(v59, (uint64_t)this, v29, (uint64_t)&v69, (uint64_t)&v67, i, (int **)&v64, (uint64_t *)&v60);
                v41 = v64;
                if (v64)
                {
                  v64 = 0;
                  v65 = 0;
                  WTF::fastFree(v41, v40);
                }
                v10 = v57;
                v14 = v58;
                if (v68 != -1)
                  ((void (*)(WTF **, JSC::VM **))off_1E330BD58[v68])(&v64, &v67);
                if (v71 != -1)
                  ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E330BD98[v71])(&v67, &v69);
                v42 = 0;
                goto LABEL_65;
              }
            }
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_101:
            v52 = (_DWORD)v35 == 0;
LABEL_112:
            ;
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          JSC::throwTypeError();
          v44 = v69;
          v69 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v43);
            else
              *(_DWORD *)v44 -= 2;
          }
          v42 = 1;
          v63 = 1;
LABEL_65:
          ((void (*)(WTF::StringImpl **, void **))off_1E330BD88[v42])(&v69, &v61);
LABEL_66:
          v34 = v75;
        }
        if (v34 != -1)
          ((void (*)(WTF::StringImpl **, uint64_t *))off_1E330BD78[v34])(&v69, &v73);
        v33 = v79;
      }
      if (v33 != -1)
        ((void (*)(WTF::StringImpl **, _QWORD *))off_1E330BDD8[v33])(&v69, v77);
LABEL_72:
      v15 = v60;
      v60 = 0;
      if (!v15)
        goto LABEL_75;
      goto LABEL_73;
    }
    v49.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v17);
    JSC::VM::throwException(v25, this, v49);
  }
  v60 = 0;
LABEL_73:
  if (*((_DWORD *)v15 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v15 + 16))(v15);
  else
    --*((_DWORD *)v15 + 4);
LABEL_75:
  v45 = *(_QWORD *)(v10 + 16);
  if (v45)
  {
    if (*(_QWORD *)(v10 + 24) != v45)
    {
      v47 = *(objc_class **)(v45 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, (unint64_t)v14, 0, &v76);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v76, v47, 0);
      v48 = v76;
      v76 = 0;
      if (v48)
      {
        if (*((_DWORD *)v48 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v48 + 16))(v48);
        else
          --*((_DWORD *)v48 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return (WTF *)10;
  return v14;
}

unint64_t WebCore::jsSubtleCryptoPrototypeFunction_exportKey(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  JSC::VM *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  char **v32;
  BOOL v33;
  uint64_t v35;
  uint64_t v37;
  JSValue v38;
  objc_class *v39;
  WebCore::DOMGuardedObject *v40;
  WebCore::DOMGuardedObject *v41;
  WebCore::DOMGuardedObject *v42;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC99FCLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v41 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_49;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSubtleCrypto::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSubtleCrypto::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_49:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"SubtleCrypto", "exportKey", v17);
LABEL_52:
    v41 = 0;
LABEL_41:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_43;
  }
  v24 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v24, this, v38);
    goto LABEL_52;
  }
  v25 = *(_QWORD **)(v18 + 24);
  v26 = *((_QWORD *)a2 + 6);
  v42 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
  v28 = WebCore::parseEnumeration<WebCore::CryptoKeyFormat>(this, v26);
  if (!*((_DWORD *)v24 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) == 0)
  {
    if (v28 <= 0xFFu)
    {
      WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)&v42, 0, "format", 7, "SubtleCrypto", 13, v27, "exportKey", 10, "\"raw\", \"spki\", \"pkcs8\", \"jwk\"", 30);
    }
    else
    {
      v29 = *((_QWORD *)a2 + 7);
      v42 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
      if ((v29 & 0xFFFE000000000002) != 0)
        goto LABEL_39;
      v30 = *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C);
      v31 = *(_DWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C) != 0;
      v32 = (char **)(16 * v30);
      if ((_DWORD)v30)
        v33 = v32 == &WebCore::JSCryptoKey::s_info;
      else
        v33 = 1;
      if (!v33)
      {
        do
        {
          v32 = (char **)v32[2];
          v31 = v32 != 0;
        }
        while (v32 != &WebCore::JSCryptoKey::s_info && v32 != 0);
      }
      if (v31 && (v37 = *(_QWORD *)(v29 + 24)) != 0)
        WebCore::SubtleCrypto::exportKey(v25, v28, v37, (uint64_t *)&v41);
      else
LABEL_39:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v42, 1, "key", 4, "SubtleCrypto", 13, v27, "exportKey", 10, "CryptoKey", 10);
    }
  }
  v14 = v41;
  v41 = 0;
  if (v14)
    goto LABEL_41;
LABEL_43:
  v35 = *(_QWORD *)(v10 + 16);
  if (v35)
  {
    if (*(_QWORD *)(v10 + 24) != v35)
    {
      v39 = *(objc_class **)(v35 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v42);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v42, v39, 0);
      v40 = v42;
      v42 = 0;
      if (v40)
      {
        if (*((_DWORD *)v40 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v40 + 16))(v40);
        else
          --*((_DWORD *)v40 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsSubtleCryptoPrototypeFunction_wrapKey(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  JSC::VM *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  WebCore::DOMGuardedObject *v30;
  uint64_t v31;
  _BOOL4 v32;
  char **v33;
  BOOL v34;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  char **v42;
  BOOL v43;
  objc_class *v45;
  WebCore::DOMGuardedObject *v46;
  JSValue v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  WebCore::DOMGuardedObject *v52;
  char v53[8];
  int v54;
  char v55;
  WebCore::DOMGuardedObject *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FC9E94);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v52 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_60;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSubtleCrypto::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSubtleCrypto::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_60:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"SubtleCrypto", "wrapKey", v17);
LABEL_69:
    v52 = 0;
LABEL_41:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_43;
  }
  v24 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v47.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v24, this, v47);
    goto LABEL_69;
  }
  v25 = *(_QWORD **)(v18 + 24);
  v26 = *((_QWORD *)a2 + 6);
  v56 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
  v28 = WebCore::parseEnumeration<WebCore::CryptoKeyFormat>(this, v26);
  if (!*((_DWORD *)v24 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) == 0)
  {
    if (v28 <= 0xFFu)
    {
      WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)&v56, 0, "format", 7, "SubtleCrypto", 13, v27, "wrapKey", 8, "\"raw\", \"spki\", \"pkcs8\", \"jwk\"", 30);
    }
    else
    {
      v29 = *((_QWORD *)a2 + 7);
      v30 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
      v56 = v30;
      if ((v29 & 0xFFFE000000000002) != 0)
        goto LABEL_39;
      v31 = *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C);
      v32 = *(_DWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C) != 0;
      v33 = (char **)(16 * v31);
      if ((_DWORD)v31)
        v34 = v33 == &WebCore::JSCryptoKey::s_info;
      else
        v34 = 1;
      if (!v34)
      {
        do
        {
          v33 = (char **)v33[2];
          v32 = v33 != 0;
        }
        while (v33 != &WebCore::JSCryptoKey::s_info && v33 != 0);
      }
      if (v32 && (v38 = *(_QWORD *)(v29 + 24)) != 0)
      {
        v39 = *((_QWORD *)a2 + 8);
        v56 = v30;
        if ((v39 & 0xFFFE000000000002) != 0)
          goto LABEL_59;
        v40 = *(unsigned int *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x4C);
        v41 = *(_DWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x4C) != 0;
        v42 = (char **)(16 * v40);
        if ((_DWORD)v40)
          v43 = v42 == &WebCore::JSCryptoKey::s_info;
        else
          v43 = 1;
        if (!v43)
        {
          do
          {
            v42 = (char **)v42[2];
            v41 = v42 != 0;
          }
          while (v42 != &WebCore::JSCryptoKey::s_info && v42 != 0);
        }
        if (v41 && (v48 = *(_QWORD *)(v39 + 24)) != 0)
        {
          v51 = v38;
          WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *((_QWORD *)a2 + 9), (uint64_t)&v56);
          v49 = v59;
          if (!v59)
          {
            v53[0] = 0;
            v54 = -1;
            v50 = v58;
            if (v58 != -1)
            {
              ((void (*)(char *, char *, uint64_t *))off_1E330BD68[v58])(&v55, v53, &v57);
              v54 = v50;
            }
            WebCore::SubtleCrypto::wrapKey(v25, this, v28, v51, v48, (uint64_t)v53, (uint64_t *)&v52);
            if (v54 != -1)
              ((void (*)(char *, char *))off_1E330BD58[v54])(&v55, v53);
            v49 = v59;
          }
          if (v49 != -1)
            ((void (*)(char *, uint64_t *))off_1E330BD78[v49])(v53, &v57);
        }
        else
        {
LABEL_59:
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v56, 2, "wrappingKey", 12, "SubtleCrypto", 13, v27, "wrapKey", 8, "CryptoKey", 10);
        }
      }
      else
      {
LABEL_39:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v56, 1, "key", 4, "SubtleCrypto", 13, v27, "wrapKey", 8, "CryptoKey", 10);
      }
    }
  }
  v14 = v52;
  v52 = 0;
  if (v14)
    goto LABEL_41;
LABEL_43:
  v36 = *(_QWORD *)(v10 + 16);
  if (v36)
  {
    if (*(_QWORD *)(v10 + 24) != v36)
    {
      v45 = *(objc_class **)(v36 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v56);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v56, v45, 0);
      v46 = v56;
      v56 = 0;
      if (v46)
      {
        if (*((_DWORD *)v46 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v46 + 16))(v46);
        else
          --*((_DWORD *)v46 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsSubtleCryptoPrototypeFunction_unwrapKey(WebCore *this, uint64_t a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  unint64_t v11;
  int v12;
  JSC::VM *v13;
  unint64_t v14;
  WebCore::DOMGuardedObject *v15;
  WebCore::DOMGuardedObject *v16;
  JSC::JSGlobalObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  JSC::VM *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int16 v29;
  JSC::JSArrayBufferView *v30;
  JSC::ArrayBufferView *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  char **v37;
  BOOL v38;
  uint64_t v40;
  int v42;
  int v43;
  unint64_t v44;
  JSC::VM *v45;
  BOOL i;
  uint64_t (*v47)();
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  objc_class *v51;
  WebCore::DOMGuardedObject *v52;
  JSValue v53;
  int v54;
  void *v55;
  WTF *v56;
  void *v57;
  WTF *v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  int *v62;
  int v63;
  JSC::JSGlobalObject *v64;
  WTF *v65;
  int v66;
  int v67;
  char v68;
  BOOL v69;
  uint64_t v70;
  WebCore::DOMGuardedObject *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  int v74;
  WTF *v75;
  int v76;
  int v77;
  char v78[8];
  int v79;
  char v80[8];
  int v81;
  JSC::VM *v82;
  int v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  JSC::ArrayBufferView *v90;
  int v91;
  unsigned int v92;
  int v93;
  WebCore::DOMGuardedObject *v94;
  JSC::ArrayBufferView *v95;
  unsigned int v96;
  int v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194FCA5C0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = 0xFFFE000000000002;
  v12 = *((_DWORD *)this + 291);
  if (v12)
    v13 = (JSC::VM *)(16 * (v12 & 0xFFFFFFFE));
  else
    v13 = 0;
  v14 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v13, a3);
  v15 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v16 = WebCore::DOMGuardedObject::DOMGuardedObject(v15, (unint64_t)this, v14);
  *(_QWORD *)v16 = &off_1E3226868;
  *((_DWORD *)v16 + 10) = 0;
  *((_BYTE *)v16 + 44) = 0;
  v71 = v16;
  v19 = *(_QWORD *)(a2 + 40);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_71;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSSubtleCrypto::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSSubtleCrypto::s_info && v22 != 0);
  }
  if (!v21)
  {
LABEL_71:
    WebCore::rejectPromiseWithThisTypeError(v15, (WebCore::DeferredPromise *)"SubtleCrypto", "unwrapKey", v18);
  }
  else
  {
    v25 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((unint64_t)(*(int *)(a2 + 32) - 1) > 6)
    {
      v26 = *(_QWORD **)(v19 + 24);
      v27 = *(_QWORD *)(a2 + 48);
      v94 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
      v29 = WebCore::parseEnumeration<WebCore::CryptoKeyFormat>(this, v27);
      if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
      {
LABEL_50:
        v15 = v71;
        v71 = 0;
        if (!v15)
          goto LABEL_53;
        goto LABEL_51;
      }
      if (v29 <= 0xFFu)
      {
        WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)&v94, 0, "format", 7, "SubtleCrypto", 13, v28, "unwrapKey", 10, "\"raw\", \"spki\", \"pkcs8\", \"jwk\"", 30);
        goto LABEL_50;
      }
      v30 = *(JSC::JSArrayBufferView **)(a2 + 56);
      v86 = *((_QWORD *)this + 7);
      v31 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped(v86, (uint64_t)v30);
      if (v31)
      {
        *(_DWORD *)v31 += 2;
        v91 = 1;
        v90 = 0;
        v95 = v31;
        v96 = 1;
        v97 = 0;
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v72);
        v33 = v97;
        if (v97)
        {
LABEL_46:
          if (v33 == -1)
            goto LABEL_50;
LABEL_49:
          ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E330A690[v33])(&v90, &v95);
          goto LABEL_50;
        }
      }
      else
      {
        JSC::JSArrayBufferView::toWrapped(v30, &v90);
        if (!v90)
        {
          JSC::throwTypeError();
          v33 = 1;
          v97 = 1;
          goto LABEL_49;
        }
        v95 = v90;
        v96 = 0;
        v97 = 0;
      }
      v34 = *(_QWORD *)(a2 + 64);
      v90 = (JSC::ArrayBufferView *)*((_QWORD *)this + 7);
      if ((v34 & 0xFFFE000000000002) != 0)
        goto LABEL_44;
      v35 = *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C);
      v36 = *(_DWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C) != 0;
      v37 = (char **)(16 * v35);
      if ((_DWORD)v35)
        v38 = v37 == &WebCore::JSCryptoKey::s_info;
      else
        v38 = 1;
      if (!v38)
      {
        do
        {
          v37 = (char **)v37[2];
          v36 = v37 != 0;
        }
        while (v37 != &WebCore::JSCryptoKey::s_info && v37 != 0);
      }
      if (v36 && (v70 = *(_QWORD *)(v34 + 24)) != 0)
      {
        WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *(_QWORD *)(a2 + 72), (uint64_t)&v90);
        v42 = v93;
        if (!v93)
        {
          WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *(_QWORD *)(a2 + 80), (uint64_t)&v86);
          v43 = v89;
          if (!v89)
          {
            v44 = *(_QWORD *)(a2 + 88);
            v45 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v44 >= 0xFFFE000000000000)
              goto LABEL_124;
            if (v44 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              i = COERCE_DOUBLE(v44 - 0x2000000000000) < 0.0;
              if (COERCE_DOUBLE(v44 - 0x2000000000000) > 0.0)
                i = 1;
              goto LABEL_64;
            }
            if ((v44 & 0xFFFE000000000002) != 0)
            {
              i = v44 == 7;
              goto LABEL_64;
            }
            v60 = *(unsigned __int8 *)(v44 + 5);
            if (v60 == 3)
            {
              v63 = *(_DWORD *)(v44 + 8);
LABEL_135:
              v59 = v63 == 0;
              goto LABEL_139;
            }
            if (v60 == 2)
            {
              v61 = *(_QWORD *)(v44 + 8);
              if ((v61 & 1) != 0)
                v62 = (int *)(v44 + 16);
              else
                v62 = (int *)(v61 + 4);
              v63 = *v62;
              goto LABEL_135;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v59 = *(_QWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
              goto LABEL_139;
            }
            for (i = 1; ; i = !v59)
            {
LABEL_64:
              if (*((_DWORD *)v45 + 20))
              {
                v69 = i;
                if ((JSC::VM::hasExceptionsAfterHandlingTraps(v45) & 1) != 0)
                  goto LABEL_107;
                v45 = (JSC::VM *)*((_QWORD *)this + 7);
                i = v69;
              }
              a2 = *(_QWORD *)(a2 + 96);
              v82 = v45;
              if ((a2 & v11) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
                break;
              v68 = i;
              v84 = 0;
              v85 = 0;
              v72 = (WTF::StringImpl *)&v84;
              v11 = (unint64_t)v45;
              JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::CryptoKeyUsage>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, a2, (uint64_t *)&v72);
              if (*(_DWORD *)(v11 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11))
              {
                v58 = v84;
                v74 = 1;
                if (v84)
                {
                  v84 = 0;
                  LODWORD(v85) = 0;
                  WTF::fastFree(v58, v57);
                }
                v50 = 1;
                goto LABEL_106;
              }
              v65 = v84;
              v72 = v84;
              v66 = HIDWORD(v85);
              v67 = v85;
              v73 = v85;
              v74 = 0;
              if (!v97)
              {
                LOBYTE(v82) = 0;
                v83 = -1;
                v11 = v96;
                if (v96 == -1)
                {
                  LOBYTE(v84) = 0;
                  LODWORD(v85) = -1;
                }
                else
                {
                  v64 = (JSC::JSGlobalObject *)a2;
                  v47 = off_1E330A680[v96];
                  ((void (*)(WTF::StringImpl **, JSC::VM **, JSC::ArrayBufferView **))v47)(&v84, &v82, &v95);
                  v83 = v11;
                  LOBYTE(v84) = 0;
                  LODWORD(v85) = -1;
                  ((void (*)(char *, WTF::StringImpl **, JSC::VM **))v47)(v80, &v84, &v82);
                  a2 = (uint64_t)v64;
                  LODWORD(v85) = v11;
                }
                if (!v93)
                {
                  v80[0] = 0;
                  v81 = -1;
                  v11 = v92;
                  if (v92 != -1)
                  {
                    ((void (*)(char *, char *, int *))off_1E330BD68[v92])(v78, v80, &v91);
                    v81 = v11;
                  }
                  if (!v89)
                  {
                    v78[0] = 0;
                    v79 = -1;
                    v54 = v88;
                    if (v88 != -1)
                    {
                      ((void (*)(WTF **, char *, uint64_t *))off_1E330BD68[v88])(&v75, v78, &v87);
                      v79 = v54;
                    }
                    v72 = 0;
                    v73 = 0;
                    v75 = v65;
                    v76 = v67;
                    v77 = v66;
                    WebCore::SubtleCrypto::unwrapKey(v26, (unsigned __int8 *)this, v29, (uint64_t)&v84, v70, (uint64_t)v80, (uint64_t)v78, v68, (int **)&v75, (uint64_t *)&v71);
                    v56 = v75;
                    if (v75)
                    {
                      v75 = 0;
                      v76 = 0;
                      WTF::fastFree(v56, v55);
                    }
                    if (v79 != -1)
                      ((void (*)(WTF **, char *))off_1E330BD58[v79])(&v75, v78);
                    if (v81 != -1)
                      ((void (*)(char *, char *))off_1E330BD58[v81])(v78, v80);
                    if ((_DWORD)v85 != -1)
                      ((void (*)(char *, WTF::StringImpl **))off_1E330A670[v85])(v80, &v84);
                    LODWORD(v85) = -1;
                    if (v83 != -1)
                      ((void (*)(char *, JSC::VM **))off_1E330A670[v83])(v80, &v82);
                    v50 = 0;
                    goto LABEL_106;
                  }
                }
              }
              v45 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_124:
              v59 = (_DWORD)v44 == 0;
LABEL_139:
              ;
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            JSC::throwTypeError();
            v49 = v72;
            v72 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
                WTF::StringImpl::destroy(v49, v48);
              else
                *(_DWORD *)v49 -= 2;
            }
            v50 = 1;
            v74 = 1;
LABEL_106:
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E330BD88[v50])(&v84, &v72);
LABEL_107:
            v43 = v89;
          }
          if (v43 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t *))off_1E330BD78[v43])(&v72, &v87);
          v42 = v93;
        }
        if (v42 != -1)
          ((void (*)(uint64_t *, int *))off_1E330BD78[v42])(&v86, &v91);
      }
      else
      {
LABEL_44:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v90, 2, "unwrappingKey", 14, "SubtleCrypto", 13, v32, "unwrapKey", 10, "CryptoKey", 10);
      }
      v33 = v97;
      goto LABEL_46;
    }
    v53.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v17);
    JSC::VM::throwException(v25, this, v53);
  }
  v71 = 0;
LABEL_51:
  if (*((_DWORD *)v15 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v15 + 16))(v15);
  else
    --*((_DWORD *)v15 + 4);
LABEL_53:
  v40 = *(_QWORD *)(v10 + 16);
  if (v40)
  {
    if (*(_QWORD *)(v10 + 24) != v40)
    {
      v51 = *(objc_class **)(v40 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v14, 0, &v94);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v94, v51, 0);
      v52 = v94;
      v94 = 0;
      if (v52)
      {
        if (*((_DWORD *)v52 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v52 + 16))(v52);
        else
          --*((_DWORD *)v52 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v14;
}

void WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey>>::ConversionResultStorage<WebCore::JsonWebKey>(WebCore::Detail::ConversionResultStorage<WebCore::JsonWebKey> &&)::{lambda(void)#1}::operator()(uint64_t a1, uint64_t *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  int v53;
  uint64_t v54;
  __int16 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  int v66;

  if (*((_DWORD *)a2 + 46))
  {
    *(_DWORD *)(a1 + 200) = 1;
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v30 = v6;
    v31 = v7;
    LOBYTE(v32) = 0;
    v34 = 0;
    v8 = *((unsigned __int8 *)a2 + 32);
    if (*((_BYTE *)a2 + 32))
    {
      v32 = a2[2];
      v2 = *((_DWORD *)a2 + 6);
      v3 = *((_DWORD *)a2 + 7);
      a2[2] = 0;
      a2[3] = 0;
      v33 = __PAIR64__(v3, v2);
      v34 = 1;
    }
    v9 = *((_DWORD *)a2 + 10);
    v35 = v9;
    v10 = a2[6];
    a2[6] = 0;
    v36 = v10;
    v11 = *((_WORD *)a2 + 28);
    v37 = v11;
    v12 = a2[8];
    v13 = a2[9];
    *(_QWORD *)&v38 = v12;
    *((_QWORD *)&v38 + 1) = v13;
    v14 = a2[10];
    v15 = a2[11];
    *((_OWORD *)a2 + 4) = 0u;
    *((_OWORD *)a2 + 5) = 0u;
    *(_QWORD *)&v39 = v14;
    *((_QWORD *)&v39 + 1) = v15;
    v16 = a2[12];
    v17 = a2[13];
    *(_QWORD *)&v40 = v16;
    *((_QWORD *)&v40 + 1) = v17;
    v18 = a2[14];
    v19 = a2[15];
    *((_OWORD *)a2 + 6) = 0u;
    *((_OWORD *)a2 + 7) = 0u;
    *(_QWORD *)&v41 = v18;
    *((_QWORD *)&v41 + 1) = v19;
    v20 = a2[16];
    v21 = a2[17];
    *((_OWORD *)a2 + 8) = 0u;
    *(_QWORD *)&v42 = v20;
    *((_QWORD *)&v42 + 1) = v21;
    v22 = a2[18];
    a2[18] = 0;
    v43 = v22;
    LOBYTE(v44) = 0;
    v46 = 0;
    v23 = *((unsigned __int8 *)a2 + 168);
    if (*((_BYTE *)a2 + 168))
    {
      v44 = a2[19];
      v4 = *((_DWORD *)a2 + 40);
      v5 = *((_DWORD *)a2 + 41);
      a2[19] = 0;
      a2[20] = 0;
      v45 = __PAIR64__(v5, v4);
      v46 = 1;
    }
    v24 = a2[22];
    a2[22] = 0;
    v47 = v24;
    v30 = 0;
    v31 = 0;
    v48 = v6;
    v49 = v7;
    LOBYTE(v50) = 0;
    v52 = 0;
    if (v8)
    {
      v25 = v32;
      v32 = 0;
      v33 = 0;
      v50 = v25;
      v51 = __PAIR64__(v3, v2);
      v52 = 1;
    }
    v53 = v9;
    v36 = 0;
    v54 = v10;
    v55 = v11;
    *(_QWORD *)&v56 = v12;
    *((_QWORD *)&v56 + 1) = v13;
    v38 = 0uLL;
    v39 = 0uLL;
    *(_QWORD *)&v57 = v14;
    *((_QWORD *)&v57 + 1) = v15;
    *(_QWORD *)&v58 = v16;
    *((_QWORD *)&v58 + 1) = v17;
    v40 = 0uLL;
    v41 = 0uLL;
    *(_QWORD *)&v59 = v18;
    *((_QWORD *)&v59 + 1) = v19;
    v42 = 0uLL;
    *(_QWORD *)&v60 = v20;
    *((_QWORD *)&v60 + 1) = v21;
    v43 = 0;
    v61 = v22;
    LOBYTE(v62) = 0;
    v64 = 0;
    if (v23)
    {
      v26 = v44;
      v44 = 0;
      v45 = 0;
      v62 = v26;
      v63 = __PAIR64__(v5, v4);
      v64 = 1;
    }
    v47 = 0;
    v65 = v24;
    v66 = 2;
    *(_DWORD *)(a1 + 192) = -1;
    v48 = 0;
    v49 = 0;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    if (v8)
    {
      v27 = v50;
      v50 = 0;
      v51 = 0;
      *(_QWORD *)(a1 + 24) = v27;
      *(_DWORD *)(a1 + 32) = v2;
      *(_DWORD *)(a1 + 36) = v3;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_DWORD *)(a1 + 48) = v9;
    v54 = 0;
    *(_QWORD *)(a1 + 56) = v10;
    *(_WORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v12;
    *(_QWORD *)(a1 + 80) = v13;
    v56 = 0uLL;
    v57 = 0uLL;
    *(_QWORD *)(a1 + 88) = v14;
    *(_QWORD *)(a1 + 96) = v15;
    *(_QWORD *)(a1 + 104) = v16;
    *(_QWORD *)(a1 + 112) = v17;
    v58 = 0uLL;
    v59 = 0uLL;
    *(_QWORD *)(a1 + 120) = v18;
    *(_QWORD *)(a1 + 128) = v19;
    v60 = 0uLL;
    *(_QWORD *)(a1 + 136) = v20;
    *(_QWORD *)(a1 + 144) = v21;
    v61 = 0;
    *(_QWORD *)(a1 + 152) = v22;
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 176) = 0;
    if (v23)
    {
      v28 = v62;
      v62 = 0;
      v63 = 0;
      *(_QWORD *)(a1 + 160) = v28;
      *(_DWORD *)(a1 + 168) = v4;
      *(_DWORD *)(a1 + 172) = v5;
      *(_BYTE *)(a1 + 176) = 1;
    }
    v65 = 0;
    *(_QWORD *)(a1 + 184) = v24;
    *(_DWORD *)(a1 + 192) = 2;
    *(_DWORD *)(a1 + 200) = 0;
    WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)&v48, (WTF::StringImpl *)0xFFFFFFFFLL);
    v66 = -1;
    WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)&v30, v29);
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEN7WebCore10JsonWebKeyEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSG_SK_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEN7WebCore10JsonWebKeyEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSG_SK_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  WTF **v6;
  WTF *v7;
  WTF *v8;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *(_DWORD *)v2 == 2;
    *(_DWORD *)v2 -= 2;
    if (v3)
    {
      v4 = v2[10];
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 3;
        v2[10] = 0;
      }
      if ((v2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v2 + 2));
      v6 = (WTF **)v2[1];
      if ((v6 & 1) == 0 && v6)
      {
        v8 = (WTF *)v2[1];
        v7 = *v6;
        if (*v6)
        {
          *(_QWORD *)v8 = 0;
          *((_DWORD *)v8 + 2) = 0;
          WTF::fastFree(v7, v5);
        }
        WTF::fastFree(v8, v5);
      }
      WTF::fastFree((WTF *)v2, v5);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEN7WebCore10JsonWebKeyEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSG_SK_SM_EEEEEEDcSQ_DpT0_(int a1, WebCore::JsonWebKey *this)
{
  WebCore::JsonWebKey::~JsonWebKey(this, this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEN7WebCore10JsonWebKeyEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSG_SK_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEN7WebCore10JsonWebKeyEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSG_SK_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEN7WebCore10JsonWebKeyEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSG_SK_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 32) = 0;
  if (*((_BYTE *)a3 + 32))
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v5 = a3[2];
    a3[2] = 0;
    *(_QWORD *)(a2 + 16) = v5;
    LODWORD(v5) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = 0;
    *(_DWORD *)(a2 + 24) = v5;
    LODWORD(v5) = *((_DWORD *)a3 + 7);
    *((_DWORD *)a3 + 7) = 0;
    *(_DWORD *)(a2 + 28) = v5;
    *(_BYTE *)(a2 + 32) = 1;
  }
  *(_DWORD *)(a2 + 40) = *((_DWORD *)a3 + 10);
  v6 = a3[6];
  a3[6] = 0;
  *(_QWORD *)(a2 + 48) = v6;
  *(_WORD *)(a2 + 56) = *((_WORD *)a3 + 28);
  v7 = a3[8];
  a3[8] = 0;
  *(_QWORD *)(a2 + 64) = v7;
  v8 = a3[9];
  a3[9] = 0;
  *(_QWORD *)(a2 + 72) = v8;
  v9 = a3[10];
  a3[10] = 0;
  *(_QWORD *)(a2 + 80) = v9;
  v10 = a3[11];
  a3[11] = 0;
  *(_QWORD *)(a2 + 88) = v10;
  v11 = a3[12];
  a3[12] = 0;
  *(_QWORD *)(a2 + 96) = v11;
  v12 = a3[13];
  a3[13] = 0;
  *(_QWORD *)(a2 + 104) = v12;
  v13 = a3[14];
  a3[14] = 0;
  *(_QWORD *)(a2 + 112) = v13;
  v14 = a3[15];
  a3[15] = 0;
  *(_QWORD *)(a2 + 120) = v14;
  v15 = a3[16];
  a3[16] = 0;
  *(_QWORD *)(a2 + 128) = v15;
  v16 = a3[17];
  a3[17] = 0;
  *(_QWORD *)(a2 + 136) = v16;
  v17 = a3[18];
  a3[18] = 0;
  *(_BYTE *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 144) = v17;
  *(_BYTE *)(a2 + 168) = 0;
  if (*((_BYTE *)a3 + 168))
  {
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    v18 = a3[19];
    a3[19] = 0;
    *(_QWORD *)(a2 + 152) = v18;
    LODWORD(v18) = *((_DWORD *)a3 + 40);
    *((_DWORD *)a3 + 40) = 0;
    *(_DWORD *)(a2 + 160) = v18;
    LODWORD(v18) = *((_DWORD *)a3 + 41);
    *((_DWORD *)a3 + 41) = 0;
    *(_DWORD *)(a2 + 164) = v18;
    *(_BYTE *)(a2 + 168) = 1;
  }
  v19 = a3[22];
  a3[22] = 0;
  *(_QWORD *)(a2 + 176) = v19;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10JsonWebKeyENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::JsonWebKey *this)
{
  WebCore::JsonWebKey::~JsonWebKey(this, this);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_11ArrayBufferENSD_ISI_EENSF_ISI_EEEEN7WebCore10JsonWebKeyEEEENSM_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSO_SP_EEEEEEDcST_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 184);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E330BD98[v3])(&v5, a2);
  *(_DWORD *)(a2 + 184) = -1;
  return result;
}

uint64_t WebCore::JSSVGUseElement::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 7088);
  *(_QWORD *)(a1 + 7088) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

void WebCore::SVGViewSpec::~SVGViewSpec(WebCore::SVGViewSpec *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v10 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v10)
      {
        v13 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v10));
        v5 = v13;
      }
      v11 = *(WTF **)(v5 + 16);
      if (v11)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v12 = v5;
        WTF::fastFree(v11, a2);
        v5 = v12;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
}

uint64_t WebCore::JSSVGViewSpec::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSScreen::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSScreenOrientation::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSScriptProcessorNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSScriptProcessorNode::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSScriptProcessorNode *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSScriptProcessorNode *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSScriptProcessorNode::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::ScriptProcessorNode,WebCore::JSScriptProcessorNode>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::ScriptProcessorNode *)::owner = (uint64_t)&off_1E330C750;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::ScriptProcessorNode *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::ScriptProcessorNode *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::JSScrollTimeline::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSServiceWorker::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSServiceWorkerClient::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSServiceWorkerClients::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSServiceWorkerContainer::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore15DOMPromiseProxyINS2_12IDLInterfaceINS2_25ServiceWorkerRegistrationEEEE7promiseERN3JSC14JSGlobalObjectERNS2_17JSDOMGlobalObjectEEUlRT_E_vJRNS2_15DeferredPromiseEEE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 24))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_DWORD *)(v2 + 16))
  {
LABEL_6:
    a2 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ServiceWorkerRegistration>>(a2, v4);
  }
  v4 = *(_QWORD *)v2;
  return WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ServiceWorkerRegistration>>(a2, v4);
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ServiceWorkerRegistration>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::ServiceWorkerRegistration>((int)v6, **(JSC::VM ***)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WebCore::JSServiceWorkerRegistration::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSShadowRoot>(WebCore::JSDocumentFragment *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *v6;
  unint64_t Structure;
  JSC::Structure *v8;
  JSC::JSCell *v9;
  uint64_t v10;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSShadowRoot::s_info);
  if (!result)
  {
    v6 = (JSC::JSCell *)WebCore::JSDocumentFragment::prototype(a1, a2, v5);
    Structure = WebCore::JSShadowRootPrototype::createStructure((uint64_t *)a1, (uint64_t)a2, v6);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v9 = (JSC::JSCell *)WebCore::JSShadowRootPrototype::create(a1, a2, Structure, v8);
    v10 = WebCore::JSShadowRoot::createStructure((uint64_t *)a1, (uint64_t)a2, v9);
    return WebCore::cacheDOMStructure((JSCell *)a2, v10, (uint64_t)&WebCore::JSShadowRoot::s_info);
  }
  return result;
}

uint64_t WebCore::JSShadowRoot::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSShadowRoot>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSShadowRoot>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSShadowRoot>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSShadowRoot::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSShadowRoot *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSShadowRoot *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSShadowRoot::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 48;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = 0;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::File>>::convert(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *(_QWORD *)(result + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFile::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFile::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwTypeError();
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    return JSC::throwTypeError();
  ++*(_DWORD *)(v9 + 16);
  v15 = v9;
  v10 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
  {
    v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v10 + 1, (unint64_t)&v15);
    v12 = *(unsigned int *)(a3 + 12);
    v13 = *(char **)a3;
    v14 = *(_QWORD *)v11;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)&v13[8 * v12] = v14;
    result = v15;
    *(_DWORD *)(a3 + 12) = v12 + 1;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 16);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
    *(_DWORD *)(a3 + 12) = v10 + 1;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13WorkerOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6StringEN7WebCore13WorkerOptionsEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3309D10[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t WebCore::JSSharedWorker::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSourceBuffer::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore10TimeRangesENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *(WTF **)(v2 + 8);
      if (v3)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v3, a2);
      }
      WTF::fastFree((WTF *)v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore10TimeRangesENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSourceBufferList>(WebCore::JSSourceBufferList *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSSourceBufferList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSSourceBufferList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSSourceBufferList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSourceBufferList>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSSourceBufferList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSourceBufferList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSSpeechRecognition::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionAlternative::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WTF::RefCounted<WebCore::SpeechRecognitionResult>::deref(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  bmalloc::api **v4;
  uint64_t v5;
  bmalloc::api *v6;
  WTF::StringImpl *v7;
  WTF *v8;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(unsigned int *)(this + 20);
    if ((_DWORD)v3)
    {
      v4 = *(bmalloc::api ***)(this + 8);
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 1)
          {
            v7 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
            *((_QWORD *)v6 + 1) = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy(v7, a2);
              else
                *(_DWORD *)v7 -= 2;
            }
            bmalloc::api::isoDeallocate(v6, a2);
          }
          else
          {
            --*(_DWORD *)v6;
          }
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    v8 = *(WTF **)(v2 + 8);
    if (v8)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v8, a2);
    }
    return bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WebCore::JSSpeechRecognitionResult::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionResultList::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSpeechSynthesis::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSpeechSynthesisUtterance::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSpeechSynthesisVoice::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSStaticRange::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSStaticRange::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSStaticRange *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSStaticRange *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSStaticRange::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSStereoPannerNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSStereoPannerNode::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSStereoPannerNode *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSStereoPannerNode *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSStereoPannerNode::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSStorage>(WebCore::JSStorage *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSStorage::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSStorage::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSStorage::s_info);
  }
  return result;
}

uint64_t WebCore::JSStorage::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 6144);
  *(_QWORD *)(a1 + 6144) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSStorage::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSStorage *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = (WebCore::JSStorage *)*((_QWORD *)a2 + 7);
  v6 = JSC::allocateCell<WebCore::JSStorage>(v5, a2);
  result = WebCore::JSDOMObject::JSDOMObject(v6, a1);
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::Storage,WebCore::JSStorage>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t v7;
  _QWORD *v8;

  if ((byte_1EE336A60 & 1) == 0)
  {
    qword_1EE336A58 = (uint64_t)&off_1E3307E10;
    byte_1EE336A60 = 1;
  }
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, a2, a3, (uint64_t)&qword_1EE336A58);
  if ((result & 1) == 0)
  {
    v8 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v7, a3, (uint64_t)&qword_1EE336A58, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), (uint64_t *)&v8, &v7);
    if (v7)
      *(_QWORD *)(v7 + 8) = 3;
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSStorage>(WebCore::JSStorage *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSStorage::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::JSStorageManager::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSStylePropertyMap::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSStylePropertyMapReadOnly::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheet>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheet>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheet>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSStyleSheetList>(WebCore::JSStyleSheetList *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSStyleSheetList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSStyleSheetList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSStyleSheetList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheetList>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheetList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSStyleSheetList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSSubtleCrypto::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WebCore::WritingToolsController *WebCore::WritingToolsController::WritingToolsController(WebCore::WritingToolsController *this, WebCore::Page *a2)
{
  uint64_t v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
    goto LABEL_11;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v6 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  if (!v6)
    goto LABEL_11;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
  {
LABEL_11:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_194FCDD40(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int **v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*v2)
  {
    *((_QWORD *)*v2 + 1) = 0;
    v4 = *v2;
    *v2 = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *v2 = 0;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::WritingToolsController::willBeginWritingToolsSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v6;
  char *v7;
  void *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WebCore::Node *v11;
  uint64_t v12;
  WTF *v13;
  WebCore::Node *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WebCore::AttributedString *v28;
  uint64_t v29;
  WTF *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  char v33;
  WebCore::Node *v34;
  WTF::StringImpl *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  WebCore::Node *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WebCore::Node *v43;
  _DWORD *v44;
  uint64_t v45;
  WTF *v46;
  WebCore::Node *v47;
  WTF::StringImpl *v48;
  void *v49;
  _DWORD **v50;
  uint64_t v51;
  _DWORD *v52;
  NSObject *v53;
  char *v54;
  void *v55;
  WTF *v56;
  WTF::StringImpl *v57;
  WebCore::Node *v58;
  int v59;
  WTF *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  char *v67;
  void *v68;
  WTF *v69;
  WTF::StringImpl *v70;
  WTF *v71;
  _DWORD **v72;
  uint64_t v73;
  _DWORD *v74;
  WTF *v75;
  _DWORD *v76;
  void *v77;
  WebCore::Node *v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  _OWORD *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WebCore::AttributedString *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  WebCore::AttributedString *v90;
  uint64_t v91;
  WTF *v92;
  uint64_t *v93;
  WebCore::Document *v94;
  WebCore::Range *v95;
  WebCore *v96;
  const WebCore::SimpleRange *v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v117;
  _DWORD *v118;
  char *v119;
  int v120;
  char *v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  WebCore::AttributedString *v125;
  uint64_t v126;
  _DWORD *v127;
  uint64_t v128;
  WebCore::Node *v129;
  WebCore::Node *v130;
  WebCore::Node *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  _DWORD **v135;
  uint64_t v136;
  _DWORD *v137;
  WTF *v138;
  _DWORD **v139;
  uint64_t v140;
  _DWORD *v141;
  WTF *v142;
  _DWORD *v143;
  void *v144;
  WebCore::Node *v145;
  uint64_t v146;
  _DWORD *v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  unsigned int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  int v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  WebCore::AttributedString *v163;
  uint64_t v164;
  WTF *v165;
  WTF::StringImpl *v166;
  WebCore::Node *v167;
  WTF *v168;
  WebCore::Node *v169;
  WebCore::Node *v170;
  unsigned int *result;
  uint64_t v172;
  NSObject *v173;
  uint64_t v174;
  uint64_t v175;
  WebCore::AttributedString *v176;
  uint64_t v177;
  WTF *v178;
  WebCore::Editor *v179;
  void *v180;
  WebCore::Editor *v181;
  uint64_t v182;
  void *v183;
  char *v184;
  void *v185;
  WTF *v186;
  WTF::StringImpl *v187;
  WebCore::Node *v188;
  WebCore::Node *v189[2];
  WebCore::Node *v190;
  int v191;
  WebCore::Node *v192;
  int v193;
  char v194;
  WebCore::Node *v195;
  WTF::StringImpl *v196;
  uint64_t v197;
  WebCore::Node *v198;
  int v199;
  char v200;
  WTF::StringImpl *v201;
  uint64_t v202;
  CFTypeRef cf;
  uint64_t v204;
  WTF *v205;
  int v206;
  char v207;
  WebCore::Node *v208;
  int v209;
  char v210;
  uint64_t v211;
  int v212;
  char v213;
  uint64_t v214;
  int v215;
  char v216;
  uint64_t v217;
  int v218;
  char v219;
  uint64_t v220;
  int v221;
  char v222;
  __int16 v223;
  char v224;
  _BYTE buf[32];
  int v226;
  unsigned int v227;
  __int128 v228;
  uint64_t v229;
  int v230;
  uint64_t v231;

  v231 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE7CC48;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a2 + 32))
    {
      WTF::UUID::toString((WTF::UUID *)a2);
      WTF::String::utf8();
      if (v205)
        v7 = (char *)v205 + 16;
      else
        v7 = 0;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "WritingToolsController::willBeginWritingToolsSession (%s)", buf, 0xCu);
      v9 = v205;
      v205 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
          WTF::fastFree(v9, v8);
        else
          --*(_DWORD *)v9;
      }
      v10 = v196;
      v196 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "";
      _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "WritingToolsController::willBeginWritingToolsSession (%s)", buf, 0xCu);
    }
  }
  WebCore::WritingToolsController::document((uint64_t)&v195, *(_QWORD *)(a1 + 16));
  v11 = v195;
  if (v195)
  {
    v12 = *((_QWORD *)v195 + 383);
    v13 = *(WTF **)(v12 + 56);
    if (v13)
      *((_DWORD *)v13 + 6) += 2;
    v205 = v13;
    v206 = *(_DWORD *)(v12 + 64);
    v207 = *(_BYTE *)(v12 + 68);
    v14 = *(WebCore::Node **)(v12 + 72);
    if (v14)
      *((_DWORD *)v14 + 6) += 2;
    v208 = v14;
    v209 = *(_DWORD *)(v12 + 80);
    v210 = *(_BYTE *)(v12 + 84);
    v15 = *(_QWORD *)(v12 + 88);
    if (v15)
      *(_DWORD *)(v15 + 24) += 2;
    v211 = v15;
    v212 = *(_DWORD *)(v12 + 96);
    v213 = *(_BYTE *)(v12 + 100);
    v16 = *(_QWORD *)(v12 + 104);
    if (v16)
      *(_DWORD *)(v16 + 24) += 2;
    v214 = v16;
    v215 = *(_DWORD *)(v12 + 112);
    v216 = *(_BYTE *)(v12 + 116);
    v17 = *(_QWORD *)(v12 + 120);
    if (v17)
      *(_DWORD *)(v17 + 24) += 2;
    v217 = v17;
    v218 = *(_DWORD *)(v12 + 128);
    v219 = *(_BYTE *)(v12 + 132);
    v18 = *(_QWORD *)(v12 + 136);
    if (v18)
      *(_DWORD *)(v18 + 24) += 2;
    v220 = v18;
    v221 = *(_DWORD *)(v12 + 144);
    v222 = *(_BYTE *)(v12 + 148);
    v223 = *(_WORD *)(v12 + 152);
    v224 = *(_BYTE *)(v12 + 154);
    if (HIBYTE(v223) == 2)
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v217, (uint64_t)buf);
      buf[16] = 1;
      WebCore::startOfParagraph((uint64_t)buf, 1, &v196);
      v20 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v20)
      {
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v20, v19);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
      }
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v220, (uint64_t)buf);
      buf[16] = 1;
      WebCore::endOfParagraph((WebCore::Node *)buf, 1, &cf);
      v22 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v22)
      {
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22, v21);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
      }
      WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v196, (uint64_t)&cf, (uint64_t)&v190);
      if (v194)
      {
        WebCore::TextIterator::TextIterator((uint64_t)buf, &v190, 12288);
        while (v229)
        {
          if (v230)
          {
            WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)buf, v24);
            v33 = 0;
            goto LABEL_51;
          }
          WebCore::TextIterator::advance((WebCore::TextIterator *)buf, (WTF::StringImpl *)v24);
        }
        WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)buf, v24);
        if (v194)
        {
          v31 = v192;
          v192 = 0;
          if (v31)
          {
            if (*((_DWORD *)v31 + 6) == 2)
            {
              if ((*((_WORD *)v31 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v31, v23);
            }
            else
            {
              *((_DWORD *)v31 + 6) -= 2;
            }
          }
          v32 = v190;
          v190 = 0;
          if (v32)
          {
            if (*((_DWORD *)v32 + 6) == 2)
            {
              if ((*((_WORD *)v32 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v32, v23);
            }
            else
            {
              *((_DWORD *)v32 + 6) -= 2;
            }
          }
        }
      }
      v33 = 1;
LABEL_51:
      v34 = (WebCore::Node *)cf;
      cf = 0;
      if (v34)
      {
        if (*((_DWORD *)v34 + 6) == 2)
        {
          if ((*((_WORD *)v34 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v34, v23);
        }
        else
        {
          *((_DWORD *)v34 + 6) -= 2;
        }
      }
      v35 = v196;
      v196 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 2)
        {
          if ((*((_WORD *)v35 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v35, v23);
        }
        else
        {
          *((_DWORD *)v35 + 6) -= 2;
        }
      }
      if ((v33 & 1) == 0)
      {
LABEL_85:
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v205);
        if (!v194)
        {
          v53 = qword_1ECE7CC48;
          if (os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_DEFAULT))
          {
            if (*(_BYTE *)(a2 + 32))
            {
              WTF::UUID::toString((WTF::UUID *)a2);
              WTF::String::utf8();
              if (v205)
                v54 = (char *)v205 + 16;
              else
                v54 = 0;
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v54;
              _os_log_impl(&dword_1940B8000, v53, OS_LOG_TYPE_DEFAULT, "WritingToolsController::willBeginWritingToolsSession (%s) => no context range", buf, 0xCu);
              v56 = v205;
              v205 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 1)
                  WTF::fastFree(v56, v55);
                else
                  --*(_DWORD *)v56;
              }
              v57 = v196;
              v196 = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v55);
                else
                  *(_DWORD *)v57 -= 2;
              }
            }
            else
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = "";
              _os_log_impl(&dword_1940B8000, v53, OS_LOG_TYPE_DEFAULT, "WritingToolsController::willBeginWritingToolsSession (%s) => no context range", buf, 0xCu);
            }
          }
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v88 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v88 + 16))(v88, buf);
          (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
          if (*(_DWORD *)&buf[12])
          {
            v89 = 80 * *(unsigned int *)&buf[12];
            v90 = (WebCore::AttributedString *)(*(_QWORD *)buf + 16);
            do
            {
              WebCore::AttributedString::~AttributedString(v90, v26);
              v90 = (WebCore::AttributedString *)(v91 + 80);
              v89 -= 80;
            }
            while (v89);
          }
          v92 = *(WTF **)buf;
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)buf = 0;
            *(_DWORD *)&buf[8] = 0;
            WTF::fastFree(v92, v26);
          }
          goto LABEL_302;
        }
        WebCore::VisibleSelection::firstRange((WebCore::Node *)(*((_QWORD *)v11 + 383) + 56), &v205);
        if (*(_BYTE *)(a2 + 32) && *(_BYTE *)(a2 + 17) == 1)
        {
          cf = 0;
          v204 = 0;
          *((_DWORD *)v11 + 6) += 2;
          v189[0] = v11;
          if ((_BYTE)v211)
          {
            v44 = (_DWORD *)WTF::fastMalloc((WTF *)0x138);
            v45 = WebCore::EditCommand::EditCommand((uint64_t)v44, (uint64_t *)v189, 17);
            *(_OWORD *)(v45 + 248) = 0u;
            *(_OWORD *)(v45 + 264) = 0u;
            *(_QWORD *)v45 = off_1E33AE410;
            v46 = v205;
            *((_DWORD *)v205 + 6) += 2;
            *(_QWORD *)(v45 + 280) = v46;
            *(_DWORD *)(v45 + 288) = v206;
            v47 = v208;
            *((_DWORD *)v208 + 6) += 2;
            *(_QWORD *)(v45 + 296) = v47;
            *(_DWORD *)(v45 + 304) = v209;
            v48 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
            v201 = v48;
            ++v44[2];
            *(_QWORD *)v48 = v44;
            v202 = 0x100000001;
            WebCore::WritingToolsController::CompositionState::CompositionState((uint64_t)buf, (uint64_t)&cf, (uint64_t)&v201);
            WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::inlineSet<WTF::UUID const&,WebCore::WritingToolsController::CompositionState>((uint64_t)&v196, (uint64_t *)(a1 + 24), (_QWORD *)a2, (uint64_t)buf);
            if (v227)
            {
              v50 = *(_DWORD ***)&buf[24];
              v51 = 8 * v227;
              do
              {
                v52 = *v50;
                *v50 = 0;
                if (v52)
                {
                  if (v52[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
                  else
                    --v52[2];
                }
                ++v50;
                v51 -= 8;
              }
              while (v51);
            }
            v71 = *(WTF **)&buf[24];
            if (*(_QWORD *)&buf[24])
            {
              *(_QWORD *)&buf[24] = 0;
              v226 = 0;
              WTF::fastFree(v71, v49);
            }
            if (*(_DWORD *)&buf[20])
            {
              v72 = *(_DWORD ***)&buf[8];
              v73 = 8 * *(unsigned int *)&buf[20];
              do
              {
                v74 = *v72;
                *v72 = 0;
                if (v74)
                {
                  if (v74[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v74 + 8))(v74);
                  else
                    --v74[2];
                }
                ++v72;
                v73 -= 8;
              }
              while (v73);
            }
            v75 = *(WTF **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              *(_QWORD *)&buf[8] = 0;
              *(_DWORD *)&buf[16] = 0;
              WTF::fastFree(v75, v49);
            }
            v76 = *(_DWORD **)v48;
            *(_QWORD *)v48 = 0;
            if (v76)
            {
              if (v76[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v76 + 8))(v76);
              else
                --v76[2];
            }
            WTF::fastFree(v48, v49);
            if (v44[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
            else
              --v44[2];
            v78 = v189[0];
            v189[0] = 0;
            if (v78)
            {
              if (*((_DWORD *)v78 + 6) == 2)
              {
                if ((*((_WORD *)v78 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v78, v77);
              }
              else
              {
                *((_DWORD *)v78 + 6) -= 2;
              }
            }
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            cf = (CFTypeRef)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", &stru_1E3487BC0);
            WebCore::AttributedString::fromNSAttributedString((id *)&cf, (uint64_t)&buf[16]);
            v228 = 0uLL;
            v196 = 0;
            v197 = 0;
            v79 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x50);
            LODWORD(v197) = 1;
            v196 = v79;
            v80 = HIDWORD(v197);
            v81 = (_OWORD *)((char *)v79 + 80 * HIDWORD(v197));
            *v81 = *(_OWORD *)buf;
            WebCore::AttributedString::AttributedString((uint64_t)(v81 + 1), (const WebCore::AttributedString *)&buf[16]);
            *(_OWORD *)((char *)v79 + 80 * v80 + 56) = v228;
            ++HIDWORD(v197);
            v82 = *a3;
            *a3 = 0;
            (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v82 + 16))(v82, &v196);
            (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
            if (HIDWORD(v197))
            {
              v84 = 80 * HIDWORD(v197);
              v85 = (WTF::StringImpl *)((char *)v196 + 16);
              do
              {
                WebCore::AttributedString::~AttributedString(v85, v83);
                v85 = (WebCore::AttributedString *)(v86 + 80);
                v84 -= 80;
              }
              while (v84);
            }
            v87 = v196;
            if (v196)
            {
              v196 = 0;
              LODWORD(v197) = 0;
              WTF::fastFree(v87, v83);
            }
            WebCore::AttributedString::~AttributedString((WebCore::AttributedString *)&buf[16], v83);
            if (cf)
              CFRelease(cf);
            goto LABEL_295;
          }
LABEL_358:
          __break(1u);
        }
        if (!v194)
          goto LABEL_358;
        WebCore::editingAttributedString(&v190, 7, (uint64_t)&v196);
        if (!v194 || !(_BYTE)v211)
          goto LABEL_358;
        v58 = v190;
        v59 = v191;
        *((_DWORD *)v190 + 6) += 2;
        *(_QWORD *)buf = v58;
        *(_DWORD *)&buf[8] = v59;
        v60 = v205;
        *((_DWORD *)v205 + 6) += 2;
        *(_QWORD *)&buf[16] = v60;
        *(_DWORD *)&buf[24] = v206;
        v61 = WebCore::characterCount((int *)buf, 12288);
        v63 = WebCore::characterCount((int *)&v205, 12288);
        v64 = *(_QWORD *)&buf[16];
        *(_QWORD *)&buf[16] = 0;
        if (v64)
        {
          if (*(_DWORD *)(v64 + 24) == 2)
          {
            if ((*(_WORD *)(v64 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v64, v62);
          }
          else
          {
            *(_DWORD *)(v64 + 24) -= 2;
          }
        }
        v65 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v65)
        {
          if (*(_DWORD *)(v65 + 24) == 2)
          {
            if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v65, v62);
          }
          else
          {
            *(_DWORD *)(v65 + 24) -= 2;
          }
        }
        if (!v196 || !*((_DWORD *)v196 + 1))
        {
          v66 = qword_1ECE7CC48;
          if (os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_DEFAULT))
          {
            if (*(_BYTE *)(a2 + 32))
            {
              WTF::UUID::toString((WTF::UUID *)a2);
              WTF::String::utf8();
              if (cf)
                v67 = (char *)cf + 16;
              else
                v67 = 0;
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v67;
              _os_log_impl(&dword_1940B8000, v66, OS_LOG_TYPE_DEFAULT, "WritingToolsController::willBeginWritingToolsSession (%s) => attributed string is empty", buf, 0xCu);
              v69 = (WTF *)cf;
              cf = 0;
              if (v69)
              {
                if (*(_DWORD *)v69 == 1)
                  WTF::fastFree(v69, v68);
                else
                  --*(_DWORD *)v69;
              }
              v70 = v201;
              v201 = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2)
                  WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v68);
                else
                  *(_DWORD *)v70 -= 2;
              }
            }
            else
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = "";
              _os_log_impl(&dword_1940B8000, v66, OS_LOG_TYPE_DEFAULT, "WritingToolsController::willBeginWritingToolsSession (%s) => attributed string is empty", buf, 0xCu);
            }
          }
        }
        if (!*(_BYTE *)(a2 + 32))
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          WebCore::AttributedString::AttributedString((uint64_t)&buf[16], (const WebCore::AttributedString *)&v196);
          *(_QWORD *)&v228 = v61;
          *((_QWORD *)&v228 + 1) = v63;
          cf = 0;
          v204 = 0;
          v119 = (char *)WTF::fastMalloc((WTF *)0x50);
          LODWORD(v204) = 1;
          cf = v119;
          v120 = HIDWORD(v204);
          v121 = &v119[80 * HIDWORD(v204)];
          *(_OWORD *)v121 = *(_OWORD *)buf;
          WebCore::AttributedString::AttributedString((uint64_t)(v121 + 16), (const WebCore::AttributedString *)&buf[16]);
          *(_OWORD *)&v119[80 * v120 + 56] = v228;
          ++HIDWORD(v204);
          v122 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v122 + 16))(v122, &cf);
          (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
          if (HIDWORD(v204))
          {
            v124 = 80 * HIDWORD(v204);
            v125 = (WebCore::AttributedString *)((char *)cf + 16);
            do
            {
              WebCore::AttributedString::~AttributedString(v125, v123);
              v125 = (WebCore::AttributedString *)(v126 + 80);
              v124 -= 80;
            }
            while (v124);
          }
          goto LABEL_291;
        }
        if (*(_BYTE *)(a2 + 16) == 1)
        {
          v201 = 0;
          v202 = 0;
          *((_DWORD *)v11 + 6) += 2;
          v188 = v11;
          if (!v194)
            goto LABEL_358;
          v127 = (_DWORD *)WTF::fastMalloc((WTF *)0x138);
          v128 = WebCore::EditCommand::EditCommand((uint64_t)v127, (uint64_t *)&v188, 17);
          *(_OWORD *)(v128 + 248) = 0u;
          *(_OWORD *)(v128 + 264) = 0u;
          *(_QWORD *)v128 = off_1E33AE410;
          v129 = v190;
          *((_DWORD *)v190 + 6) += 2;
          *(_QWORD *)(v128 + 280) = v129;
          *(_DWORD *)(v128 + 288) = v191;
          v130 = v192;
          *((_DWORD *)v192 + 6) += 2;
          *(_QWORD *)(v128 + 296) = v130;
          *(_DWORD *)(v128 + 304) = v193;
          v131 = (WebCore::Node *)WTF::fastMalloc((WTF *)8);
          v132 = v63;
          v189[0] = v131;
          ++v127[2];
          *(_QWORD *)v131 = v127;
          v189[1] = (WebCore::Node *)0x100000001;
          WebCore::WritingToolsController::CompositionState::CompositionState((uint64_t)buf, (uint64_t)&v201, (uint64_t)v189);
          v133 = v61;
          WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::inlineSet<WTF::UUID const&,WebCore::WritingToolsController::CompositionState>((uint64_t)&cf, (uint64_t *)(a1 + 24), (_QWORD *)a2, (uint64_t)buf);
          if (v227)
          {
            v135 = *(_DWORD ***)&buf[24];
            v136 = 8 * v227;
            do
            {
              v137 = *v135;
              *v135 = 0;
              if (v137)
              {
                if (v137[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v137 + 8))(v137);
                else
                  --v137[2];
              }
              ++v135;
              v136 -= 8;
            }
            while (v136);
          }
          v138 = *(WTF **)&buf[24];
          if (*(_QWORD *)&buf[24])
          {
            *(_QWORD *)&buf[24] = 0;
            v226 = 0;
            WTF::fastFree(v138, v134);
          }
          if (*(_DWORD *)&buf[20])
          {
            v139 = *(_DWORD ***)&buf[8];
            v140 = 8 * *(unsigned int *)&buf[20];
            do
            {
              v141 = *v139;
              *v139 = 0;
              if (v141)
              {
                if (v141[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v141 + 8))(v141);
                else
                  --v141[2];
              }
              ++v139;
              v140 -= 8;
            }
            while (v140);
          }
          v142 = *(WTF **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            *(_QWORD *)&buf[8] = 0;
            *(_DWORD *)&buf[16] = 0;
            WTF::fastFree(v142, v134);
          }
          v143 = *(_DWORD **)v131;
          *(_QWORD *)v131 = 0;
          v61 = v133;
          v63 = v132;
          if (v143)
          {
            if (v143[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v143 + 8))(v143);
            else
              --v143[2];
          }
          WTF::fastFree(v131, v134);
          if (v127[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v127 + 8))(v127);
          else
            --v127[2];
          v145 = v188;
          v188 = 0;
          if (v145)
          {
            if (*((_DWORD *)v145 + 6) == 2)
            {
              if ((*((_WORD *)v145 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v145, v144);
            }
            else
            {
              *((_DWORD *)v145 + 6) -= 2;
            }
          }
          goto LABEL_283;
        }
        if (*(_BYTE *)(a2 + 16))
        {
LABEL_283:
          if (v196)
            v155 = *((_DWORD *)v196 + 1);
          else
            v155 = 0;
          if (!v194)
            goto LABEL_358;
          v156 = WebCore::characterCount((int *)&v190, 12288);
          if (v156 != v155)
          {
            v172 = v156;
            v173 = qword_1ECE7CC48;
            if (os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_ERROR))
            {
              if (!*(_BYTE *)(a2 + 32))
                goto LABEL_358;
              WTF::UUID::toString((WTF::UUID *)a2);
              WTF::String::utf8();
              if (cf)
                v184 = (char *)cf + 16;
              else
                v184 = 0;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v184;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v155;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v172;
              _os_log_error_impl(&dword_1940B8000, v173, OS_LOG_TYPE_ERROR, "WritingToolsController::willBeginWritingToolsSession (%s) => attributed string length (%u) != context range length (%llu)", buf, 0x1Cu);
              v186 = (WTF *)cf;
              cf = 0;
              if (v186)
              {
                if (*(_DWORD *)v186 == 1)
                  WTF::fastFree(v186, v185);
                else
                  --*(_DWORD *)v186;
              }
              v187 = v201;
              v201 = 0;
              if (v187)
              {
                if (*(_DWORD *)v187 == 2)
                  WTF::StringImpl::destroy(v187, (WTF::StringImpl *)v185);
                else
                  *(_DWORD *)v187 -= 2;
              }
            }
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            v174 = *a3;
            *a3 = 0;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v174 + 16))(v174, buf);
            (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
            if (*(_DWORD *)&buf[12])
            {
              v175 = 80 * *(unsigned int *)&buf[12];
              v176 = (WebCore::AttributedString *)(*(_QWORD *)buf + 16);
              do
              {
                WebCore::AttributedString::~AttributedString(v176, v166);
                v176 = (WebCore::AttributedString *)(v177 + 80);
                v175 -= 80;
              }
              while (v175);
            }
            v178 = *(WTF **)buf;
            if (*(_QWORD *)buf)
            {
              *(_QWORD *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              WTF::fastFree(v178, v166);
            }
LABEL_294:
            WebCore::AttributedString::~AttributedString((WebCore::AttributedString *)&v196, v166);
LABEL_295:
            if ((_BYTE)v211)
            {
              v167 = v208;
              v208 = 0;
              if (v167)
              {
                if (*((_DWORD *)v167 + 6) == 2)
                {
                  if ((*((_WORD *)v167 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v167, v26);
                }
                else
                {
                  *((_DWORD *)v167 + 6) -= 2;
                }
              }
              v168 = v205;
              v205 = 0;
              if (v168)
              {
                if (*((_DWORD *)v168 + 6) == 2)
                {
                  if ((*((_WORD *)v168 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v168, v26);
                }
                else
                {
                  *((_DWORD *)v168 + 6) -= 2;
                }
              }
            }
LABEL_302:
            if (v194)
            {
              v169 = v192;
              v192 = 0;
              if (v169)
              {
                if (*((_DWORD *)v169 + 6) == 2)
                {
                  if ((*((_WORD *)v169 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v169, v26);
                }
                else
                {
                  *((_DWORD *)v169 + 6) -= 2;
                }
              }
              v170 = v190;
              v190 = 0;
              if (v170)
              {
                if (*((_DWORD *)v170 + 6) == 2)
                {
                  if ((*((_WORD *)v170 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v170, v26);
                }
                else
                {
                  *((_DWORD *)v170 + 6) -= 2;
                }
              }
            }
            goto LABEL_309;
          }
          v157 = *((_QWORD *)v11 + 382);
          if (!v157)
          {
            v179 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            WebCore::Editor::Editor(v179, v11);
            v181 = (WebCore::Editor *)*((_QWORD *)v11 + 382);
            *((_QWORD *)v11 + 382) = v179;
            if (v181)
            {
              WebCore::Editor::~Editor(v181, v180);
              if (*(_DWORD *)v182)
              {
                *(_QWORD *)(v182 + 496) = 0;
                *(_OWORD *)(v182 + 464) = 0u;
                *(_OWORD *)(v182 + 480) = 0u;
                *(_OWORD *)(v182 + 432) = 0u;
                *(_OWORD *)(v182 + 448) = 0u;
                *(_OWORD *)(v182 + 400) = 0u;
                *(_OWORD *)(v182 + 416) = 0u;
                *(_OWORD *)(v182 + 368) = 0u;
                *(_OWORD *)(v182 + 384) = 0u;
                *(_OWORD *)(v182 + 336) = 0u;
                *(_OWORD *)(v182 + 352) = 0u;
                *(_OWORD *)(v182 + 304) = 0u;
                *(_OWORD *)(v182 + 320) = 0u;
                *(_OWORD *)(v182 + 272) = 0u;
                *(_OWORD *)(v182 + 288) = 0u;
                *(_OWORD *)(v182 + 240) = 0u;
                *(_OWORD *)(v182 + 256) = 0u;
                *(_OWORD *)(v182 + 208) = 0u;
                *(_OWORD *)(v182 + 224) = 0u;
                *(_OWORD *)(v182 + 176) = 0u;
                *(_OWORD *)(v182 + 192) = 0u;
                *(_OWORD *)(v182 + 144) = 0u;
                *(_OWORD *)(v182 + 160) = 0u;
                *(_OWORD *)(v182 + 112) = 0u;
                *(_OWORD *)(v182 + 128) = 0u;
                *(_OWORD *)(v182 + 80) = 0u;
                *(_OWORD *)(v182 + 96) = 0u;
                *(_OWORD *)(v182 + 48) = 0u;
                *(_OWORD *)(v182 + 64) = 0u;
                *(_OWORD *)(v182 + 16) = 0u;
                *(_OWORD *)(v182 + 32) = 0u;
                *(_OWORD *)v182 = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v182, v183);
              }
            }
            v157 = *((_QWORD *)v11 + 382);
          }
          *(_BYTE *)(v157 + 122) = 1;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          WebCore::AttributedString::AttributedString((uint64_t)&buf[16], (const WebCore::AttributedString *)&v196);
          *(_QWORD *)&v228 = v61;
          *((_QWORD *)&v228 + 1) = v63;
          cf = 0;
          v204 = 0;
          v158 = (char *)WTF::fastMalloc((WTF *)0x50);
          LODWORD(v204) = 1;
          cf = v158;
          v159 = HIDWORD(v204);
          v160 = &v158[80 * HIDWORD(v204)];
          *(_OWORD *)v160 = *(_OWORD *)buf;
          WebCore::AttributedString::AttributedString((uint64_t)(v160 + 16), (const WebCore::AttributedString *)&buf[16]);
          *(_OWORD *)&v158[80 * v159 + 56] = v228;
          ++HIDWORD(v204);
          v161 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v161 + 16))(v161, &cf);
          (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
          if (HIDWORD(v204))
          {
            v162 = 80 * HIDWORD(v204);
            v163 = (WebCore::AttributedString *)((char *)cf + 16);
            do
            {
              WebCore::AttributedString::~AttributedString(v163, v123);
              v163 = (WebCore::AttributedString *)(v164 + 80);
              v162 -= 80;
            }
            while (v162);
          }
LABEL_291:
          v165 = (WTF *)cf;
          if (cf)
          {
            cf = 0;
            LODWORD(v204) = 0;
            WTF::fastFree(v165, v123);
          }
          WebCore::AttributedString::~AttributedString((WebCore::AttributedString *)&buf[16], v123);
          goto LABEL_294;
        }
        if (!v194)
          goto LABEL_358;
        v93 = (uint64_t *)(a1 + 24);
        v94 = *(WebCore::Document **)(*((_QWORD *)v190 + 5) + 8);
        v95 = (WebCore::Range *)bmalloc::api::isoAllocate();
        v96 = WebCore::Range::Range(v95, v94);
        WebCore::setBothEndpoints(v96, (WebCore::Range *)&v190, v97);
        ++*((_DWORD *)v95 + 2);
        v98 = *v93;
        if (*v93
          || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(v93, 8u, 0), (v98 = *v93) != 0))
        {
          v99 = *(_DWORD *)(v98 - 8);
        }
        else
        {
          v99 = 0;
        }
        v100 = *(_QWORD *)(a2 + 8);
        v101 = (v100 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v100 - 1640531527) << 16) ^ ((unsigned __int16)v100 - 1640531527);
        v102 = (v100 >> 37) & 0x7FFF800 ^ ((v101 + WORD2(v100) + (v101 >> 11)) << 16) ^ (v101
                                                                                       + WORD2(v100)
                                                                                       + (v101 >> 11));
        v103 = v102 + (unsigned __int16)*(_QWORD *)a2 + (v102 >> 11);
        v104 = (*(_QWORD *)a2 >> 5) & 0x7FFF800 ^ (v103 << 16) ^ v103;
        v105 = v104 + (unsigned __int16)WORD2(*(_QWORD *)a2) + (v104 >> 11);
        v106 = (*(_QWORD *)a2 >> 37) & 0x7FFF800 ^ (v105 << 16) ^ v105;
        v107 = (v106 + (v106 >> 11)) ^ (8 * (v106 + (v106 >> 11)));
        v108 = (v107 + (v107 >> 5)) ^ (4 * (v107 + (v107 >> 5)));
        v109 = (v108 + (v108 >> 15)) ^ ((v108 + (v108 >> 15)) << 10);
        if (!v109)
          v109 = 0x800000;
        v110 = v109 & v99;
        v111 = v98 + (v110 << 6);
        v113 = *(_QWORD *)v111;
        v112 = *(_QWORD *)(v111 + 8);
        if (*(_OWORD *)v111 != 0)
        {
          v114 = 0;
          v115 = 1;
          while (v112 != v100 || v113 != *(_QWORD *)a2)
          {
            if (!(v113 ^ 1 | v112))
              v114 = v111;
            v110 = ((_DWORD)v110 + v115) & v99;
            v111 = v98 + (v110 << 6);
            v113 = *(_QWORD *)v111;
            v112 = *(_QWORD *)(v111 + 8);
            ++v115;
            if (*(_OWORD *)v111 == 0)
            {
              if (v114)
              {
                *(_QWORD *)v114 = 0;
                *(_QWORD *)(v114 + 8) = 0;
                *(_DWORD *)(v114 + 56) = 0;
                --*(_DWORD *)(*v93 - 16);
                v111 = v114;
              }
              goto LABEL_186;
            }
          }
          v146 = *(unsigned int *)(v111 + 56);
          if ((_DWORD)v146 != -1)
          {
            if ((_DWORD)v146 == 1)
            {
              v147 = *(_DWORD **)(v111 + 24);
              *(_QWORD *)(v111 + 24) = v95;
              if (v147)
              {
                if (v147[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v147 + 8))(v147);
                else
                  --v147[2];
              }
              *(_DWORD *)(v111 + 32) = 0;
              goto LABEL_281;
            }
            ((void (*)(_BYTE *, uint64_t))off_1E330D608[v146])(buf, v111 + 16);
          }
          *(_DWORD *)(v111 + 16) = 0;
          *(_QWORD *)(v111 + 24) = v95;
          *(_DWORD *)(v111 + 32) = 0;
          *(_DWORD *)(v111 + 56) = 1;
          goto LABEL_281;
        }
LABEL_186:
        *(_OWORD *)v111 = *(_OWORD *)a2;
        v117 = *(unsigned int *)(v111 + 56);
        if ((_DWORD)v117 != -1)
        {
          if ((_DWORD)v117 == 1)
          {
            v118 = *(_DWORD **)(v111 + 24);
            *(_QWORD *)(v111 + 24) = v95;
            if (v118)
            {
              if (v118[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v118 + 8))(v118);
              else
                --v118[2];
            }
            *(_DWORD *)(v111 + 32) = 0;
LABEL_255:
            v148 = *v93;
            if (*v93)
              v149 = *(_DWORD *)(v148 - 12) + 1;
            else
              v149 = 1;
            *(_DWORD *)(v148 - 12) = v149;
            v150 = *v93;
            if (*v93)
              v151 = *(_DWORD *)(v150 - 12);
            else
              v151 = 0;
            v152 = (*(_DWORD *)(v150 - 16) + v151);
            v153 = *(unsigned int *)(v150 - 4);
            if (v153 > 0x400)
            {
              if (v153 > 2 * v152)
              {
LABEL_281:
                if (*((_DWORD *)v95 + 2) == 1)
                  (*(void (**)(WebCore::Range *))(*(_QWORD *)v95 + 8))(v95);
                else
                  --*((_DWORD *)v95 + 2);
                goto LABEL_283;
              }
            }
            else
            {
              if (3 * v153 > 4 * v152)
                goto LABEL_281;
              if (!(_DWORD)v153)
              {
                v154 = 8;
                goto LABEL_277;
              }
            }
            v154 = (_DWORD)v153 << (6 * *(_DWORD *)(v150 - 12) >= (2 * v153));
LABEL_277:
            WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(v93, v154, (unint64_t *)v111);
            goto LABEL_281;
          }
          ((void (*)(_BYTE *, uint64_t))off_1E330D608[v117])(buf, v111 + 16);
        }
        *(_DWORD *)(v111 + 16) = 0;
        *(_QWORD *)(v111 + 24) = v95;
        *(_DWORD *)(v111 + 32) = 0;
        *(_DWORD *)(v111 + 56) = 1;
        goto LABEL_255;
      }
    }
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v217, (uint64_t)buf);
    buf[16] = 1;
    WebCore::startOfEditableContent((WebCore *)buf, (uint64_t)&cf);
    if (*(_QWORD *)buf)
    {
      if (*(_DWORD *)(*(_QWORD *)buf + 24) == 2)
      {
        if ((*(_WORD *)(*(_QWORD *)buf + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef(*(WebCore::Node **)buf, v36);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)buf + 24) -= 2;
      }
    }
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v220, (uint64_t)buf);
    buf[16] = 1;
    WebCore::endOfEditableContent((WebCore *)buf, (uint64_t)&v201);
    if (*(_QWORD *)buf)
    {
      if (*(_DWORD *)(*(_QWORD *)buf + 24) == 2)
      {
        if ((*(_WORD *)(*(_QWORD *)buf + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef(*(WebCore::Node **)buf, v37);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)buf + 24) -= 2;
      }
    }
    WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&cf, (uint64_t)&v201, (uint64_t)&v196);
    if (v200)
    {
      WebCore::TextIterator::TextIterator((uint64_t)buf, &v196, 12288);
      while (1)
      {
        if (!v229)
        {
          WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)buf, v38);
          goto LABEL_70;
        }
        if (v230)
          break;
        WebCore::TextIterator::advance((WebCore::TextIterator *)buf, (WTF::StringImpl *)v38);
      }
      WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)buf, v38);
      LOBYTE(v190) = 0;
      v194 = 0;
      if (!v200)
        goto LABEL_79;
      v190 = v196;
      v191 = v197;
      v192 = v198;
      v193 = v199;
      v194 = 1;
      v196 = 0;
      v198 = 0;
    }
    else
    {
LABEL_70:
      WebCore::VisibleSelection::firstRange((WebCore::Node *)&v205, &v190);
      if (!v200)
      {
LABEL_79:
        v42 = v201;
        v201 = 0;
        if (v42)
        {
          if (*((_DWORD *)v42 + 6) == 2)
          {
            if ((*((_WORD *)v42 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v42, v39);
          }
          else
          {
            *((_DWORD *)v42 + 6) -= 2;
          }
        }
        v43 = (WebCore::Node *)cf;
        cf = 0;
        if (v43)
        {
          if (*((_DWORD *)v43 + 6) == 2)
          {
            if ((*((_WORD *)v43 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v43, v39);
          }
          else
          {
            *((_DWORD *)v43 + 6) -= 2;
          }
        }
        goto LABEL_85;
      }
      v40 = v198;
      v198 = 0;
      if (v40)
      {
        if (*((_DWORD *)v40 + 6) == 2)
        {
          if ((*((_WORD *)v40 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v40, v39);
        }
        else
        {
          *((_DWORD *)v40 + 6) -= 2;
        }
      }
    }
    v41 = v196;
    v196 = 0;
    if (v41)
    {
      if (*((_DWORD *)v41 + 6) == 2)
      {
        if ((*((_WORD *)v41 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v41, v39);
      }
      else
      {
        *((_DWORD *)v41 + 6) -= 2;
      }
    }
    goto LABEL_79;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v25 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v25 + 16))(v25, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (*(_DWORD *)&buf[12])
  {
    v27 = 80 * *(unsigned int *)&buf[12];
    v28 = (WebCore::AttributedString *)(*(_QWORD *)buf + 16);
    do
    {
      WebCore::AttributedString::~AttributedString(v28, v26);
      v28 = (WebCore::AttributedString *)(v29 + 80);
      v27 -= 80;
    }
    while (v27);
  }
  v30 = *(WTF **)buf;
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)buf = 0;
    *(_DWORD *)&buf[8] = 0;
    WTF::fastFree(v30, v26);
  }
LABEL_309:
  result = (unsigned int *)v195;
  if (v195)
  {
    if (*((_DWORD *)v195 + 6) == 2)
    {
      if ((*((_WORD *)v195 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v195, v26);
    }
    else
    {
      *((_DWORD *)v195 + 6) -= 2;
    }
  }
  return result;
}

