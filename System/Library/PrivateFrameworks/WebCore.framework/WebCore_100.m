uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAElement,WebCore::SVGGraphicsElement,WebCore::SVGURIReference>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;

  if ((byte_1ECE84CC0 & 1) != 0)
  {
    v3 = _MergedGlobals_268;
    if (!_MergedGlobals_268)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = _MergedGlobals_268;
    if (v4)
      goto LABEL_7;
    if (_MergedGlobals_268)
      v4 = (WTF::StringImpl ***)(_MergedGlobals_268 + 16 * *(unsigned int *)(_MergedGlobals_268 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
  }
LABEL_7:
  if ((byte_1ECE84CC0 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_47;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_47:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_25:
      v10 = 0;
      goto LABEL_26;
    }
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!v10)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_25;
      v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_26:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != v10)
  {
    Accessor = v10[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_44;
    v12 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v12)
      goto LABEL_35;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v12 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_44:
      v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_35:
  {
    if (v11)
      v11 += 2 * *((unsigned int *)v11 - 1);
  }
  else
  {
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v11 != v12)
  {
    Accessor = v12[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAElement,WebCore::SVGGraphicsElement,WebCore::SVGURIReference>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE84CD0 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE84CC8 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CC8, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CC8, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CC8, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CC8, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CC8, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CC8, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CC8, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CC8, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CC8, v22, (uint64_t)v13);
    byte_1ECE84CD0 = 1;
  }
  if ((byte_1ECE84CC0 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
    goto LABEL_9;
  }
  v3 = _MergedGlobals_268;
  if (!_MergedGlobals_268)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = _MergedGlobals_268;
  if (!v4)
  {
    if (_MergedGlobals_268)
    {
      v4 = (WTF::StringImpl ***)(_MergedGlobals_268 + 16 * *(unsigned int *)(_MergedGlobals_268 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE84CC0 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE84CC8)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE84CC8 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE84CC8 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE84CC8 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAElement,WebCore::SVGGraphicsElement,WebCore::SVGURIReference>::createAnimator@<X0>(WebCore::QualifiedName::QualifiedNameImpl **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl **result;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl **v11;
  uint64_t v12;

  *a2 = 0;
  if ((byte_1ECE84CC0 & 1) != 0)
  {
    v4 = _MergedGlobals_268;
    if (!_MergedGlobals_268)
      goto LABEL_6;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
    v4 = _MergedGlobals_268;
    if (v5)
      goto LABEL_7;
    if (_MergedGlobals_268)
      v5 = (WTF::StringImpl ***)(_MergedGlobals_268 + 16 * *(unsigned int *)(_MergedGlobals_268 - 4));
    else
LABEL_6:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
  }
LABEL_7:
  if ((byte_1ECE84CC0 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
  }
  if ((WTF::StringImpl ***)v4 != v5)
  {
    result = v5[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a1);
  if (result)
    goto LABEL_13;
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_47;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_47:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    result = v8[1];
    if (result)
      goto LABEL_13;
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_26:
      v10 = 0;
      goto LABEL_27;
    }
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a1);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!v10)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_26;
      v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_27:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != v10)
  {
    result = v10[1];
    if (result)
      goto LABEL_13;
  }
  {
    v11 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_44;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v11 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_36;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_44:
      result = 0;
  }
  else
  {
    v11 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_36:
  {
    if (v11)
      v11 += 2 * *((unsigned int *)v11 - 1);
  }
  else
  {
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v11 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 9))(&v12);
      *a2 = v12;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAElement,WebCore::SVGGraphicsElement,WebCore::SVGURIReference>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  uint64_t v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl **v14;

  if ((byte_1ECE84CC0 & 1) != 0)
  {
    v6 = _MergedGlobals_268;
    if (!_MergedGlobals_268)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = _MergedGlobals_268;
    if (v7)
      goto LABEL_7;
    if (_MergedGlobals_268)
      v7 = (WTF::StringImpl ***)(_MergedGlobals_268 + 16 * *(unsigned int *)(_MergedGlobals_268 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
  }
LABEL_7:
  if ((byte_1ECE84CC0 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a2);
  if (result)
    goto LABEL_13;
  {
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_48;
    v11 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v11)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_48:
      v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != v11)
  {
    result = v11[1];
    if (result)
    {
LABEL_13:
      v9 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v9, a3);
    }
  }
  {
    v12 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_26:
      v13 = 0;
      goto LABEL_27;
    }
    v13 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
    v12 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!v13)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_26;
      v13 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_27:
  {
    if (v12)
      v12 += 2 * *((unsigned int *)v12 - 1);
  }
  else
  {
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v12 != v13)
  {
    result = v13[1];
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v9, a3);
    }
  }
  {
    v14 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_45;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v14 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_36;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_45:
      result = 0;
  }
  else
  {
    v14 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_36:
  {
    if (v14)
      v14 += 2 * *((unsigned int *)v14 - 1);
  }
  else
  {
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v14 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8) + 216;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v9, a3);
    }
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = _MergedGlobals_268;
  if (!_MergedGlobals_268)
    return 0;
  v3 = *(_DWORD *)(_MergedGlobals_268 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl *this)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  if (*((_QWORD *)this + 2))
  {
    v3 = *((_QWORD *)this + 3);
    v4 = *((_QWORD *)this + 4);
    v5 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v6 = v5 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v7 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v6 + (v5 >> 11)) << 16) ^ (v6 + (v5 >> 11));
    v8 = (v3 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v3 + (v7 >> 11)) << 16) ^ (v7
                                                                                                 + (unsigned __int16)v3
                                                                                                 + (v7 >> 11));
    v9 = (v3 >> 37) & 0x7FFF800 ^ ((v8 + WORD2(v3) + (v8 >> 11)) << 16) ^ (v8 + WORD2(v3) + (v8 >> 11));
    v10 = (v4 >> 5) & 0x7FFF800 ^ ((v9 + (unsigned __int16)v4 + (v9 >> 11)) << 16) ^ (v9
                                                                                                  + (unsigned __int16)v4
                                                                                                  + (v9 >> 11));
    v11 = (v4 >> 37) & 0x7FFF800 ^ ((v10 + WORD2(v4) + (v10 >> 11)) << 16) ^ (v10 + WORD2(v4) + (v10 >> 11));
    v12 = (v11 + (v11 >> 11)) ^ (8 * (v11 + (v11 >> 11)));
    v13 = (v12 + (v12 >> 5)) ^ (4 * (v12 + (v12 >> 5)));
    v14 = (v13 + (v13 >> 15)) ^ ((v13 + (v13 >> 15)) << 10);
    if (v14)
      return v14;
    else
      return 0x800000;
  }
  else
  {
    result = *((unsigned int *)this + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(this);
      *((_DWORD *)this + 1) = result;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor(WTF::StringImpl ***a1)
{
  _BYTE *v1;
  _QWORD *v2;
  char *v3;
  int v5;
  WTF::StringImpl **v6;
  int v7;
  WTF::StringImpl **v8;
  int v9;
  int v10;
  WTF::StringImpl ***v11;
  int v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  _BYTE *v17;
  WTF *v18;
  void *v19;
  unsigned int v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl ***v25;
  uint64_t v27;
  __int128 v28;

  v1 = &unk_1ECE7D000;
  v2 = &unk_1ECE7D000;
  {
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_25;
  }
  v3 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    goto LABEL_39;
  v5 = *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 2);
  v6 = *a1;
  if ((*a1)[2])
  {
    v27 = *MEMORY[0x1E0CBF2F8];
    v28 = *(_OWORD *)(v6 + 3);
    v7 = WTF::computeHash<WebCore::QualifiedNameComponents>(&v27);
    v1 = &unk_1ECE7D000;
  }
  else
  {
    v7 = *((_DWORD *)v6 + 1);
    if (!v7)
    {
      v7 = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)v6);
      v1 = &unk_1ECE7D000;
      *((_DWORD *)v6 + 1) = v7;
    }
  }
  v8 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v9 = 0;
    while (1)
    {
      v10 = v7 & v5;
      v11 = (WTF::StringImpl ***)&v3[16 * (v7 & v5)];
      if (v8)
      {
        v12 = (*(_DWORD *)v8)++;
        v13 = *v11;
        if (v12)
        {
          *(_DWORD *)v8 = v12;
          v14 = (uint64_t)v8;
        }
        else
        {
          v17 = v1;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v8);
          WTF::fastFree(v18, v19);
          v1 = v17;
          v2 = (_QWORD *)&unk_1ECE7D000;
          v14 = WebCore::nullName;
        }
      }
      else
      {
        v14 = 0;
        v13 = *v11;
      }
      if (v13 == v8)
        break;
      v15 = *v11;
      if (*v11 != (WTF::StringImpl **)-1)
      {
        v16 = *a1;
        if (v15 == *a1 || v15[3] == v16[3] && v15[4] == v16[4])
          goto LABEL_25;
      }
      v7 = ++v9 + v10;
      v8 = (WTF::StringImpl **)v14;
    }
LABEL_23:
    v24 = v2[114];
    if (v24)
    {
      v11 = (WTF::StringImpl ***)(v24 + 16 * *(unsigned int *)(v24 - 4));
      goto LABEL_25;
    }
LABEL_39:
    v11 = 0;
    goto LABEL_25;
  }
  v20 = v7 & v5;
  v11 = (WTF::StringImpl ***)&v3[16 * (v7 & v5)];
  v21 = *v11;
  if (!*v11)
    goto LABEL_23;
  v22 = *a1;
  v23 = 1;
  while (v21 == (WTF::StringImpl **)-1 || v21 != v22 && (v21[3] != v22[3] || v21[4] != v22[4]))
  {
    v20 = (v20 + v23) & v5;
    v11 = (WTF::StringImpl ***)&v3[16 * v20];
    v21 = *v11;
    ++v23;
    if (!*v11)
      goto LABEL_23;
  }
LABEL_25:
  if ((v1[920] & 1) != 0)
  {
    v25 = (WTF::StringImpl ***)v2[114];
    if (v25)
      v25 += 2 * *((unsigned int *)v25 - 1);
  }
  else
  {
    v25 = 0;
    v2[114] = 0;
    v1[920] = 1;
  }
  if (v25 == v11)
    return 0;
  else
    return v11[1];
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  WTF::StringImpl **v6;
  int v7;
  int v8;
  WTF::StringImpl ***v9;
  int v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  unsigned int v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  int v20;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(a2);
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v7 = 0;
    while (1)
    {
      v8 = v5 & v4;
      v9 = (WTF::StringImpl ***)(v2 + 16 * (v5 & v4));
      if (v6)
      {
        v10 = (*(_DWORD *)v6)++;
        v11 = *v9;
        if (v10)
        {
          *(_DWORD *)v6 = v10;
          v12 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          WTF::fastFree(v15, v16);
          v12 = WebCore::nullName;
        }
      }
      else
      {
        v12 = 0;
        v11 = *v9;
      }
      if (v11 == v6)
        break;
      v13 = *v9;
      if (*v9 != (WTF::StringImpl **)-1)
      {
        v14 = *a2;
        if (v13 == (WTF::StringImpl **)*a2
          || v13[3] == *(WTF::StringImpl **)(v14 + 24) && v13[4] == *(WTF::StringImpl **)(v14 + 32))
        {
          return v9;
        }
      }
      v5 = ++v7 + v8;
      v6 = (WTF::StringImpl **)v12;
    }
    return 0;
  }
  v17 = v5 & v4;
  v9 = (WTF::StringImpl ***)(v2 + 16 * (v5 & v4));
  v18 = *v9;
  if (!*v9)
    return 0;
  v19 = *a2;
  v20 = 1;
  while (v18 == (WTF::StringImpl **)-1
       || v18 != (WTF::StringImpl **)v19
       && (v18[3] != *(WTF::StringImpl **)(v19 + 24) || v18[4] != *(WTF::StringImpl **)(v19 + 32)))
  {
    v17 = (v17 + v20) & v4;
    v9 = (WTF::StringImpl ***)(v2 + 16 * v17);
    v18 = *v9;
    ++v20;
    if (!*v9)
      return 0;
  }
  return v9;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v1 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v3 = *(_QWORD *)(v1 + 24);
    v4 = *(_QWORD *)(v1 + 32);
    v5 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v6 = v5 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v7 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v6 + (v5 >> 11)) << 16) ^ (v6 + (v5 >> 11));
    v8 = (v3 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v3 + (v7 >> 11)) << 16) ^ (v7
                                                                                                 + (unsigned __int16)v3
                                                                                                 + (v7 >> 11));
    v9 = (v3 >> 37) & 0x7FFF800 ^ ((v8 + WORD2(v3) + (v8 >> 11)) << 16) ^ (v8 + WORD2(v3) + (v8 >> 11));
    v10 = (v4 >> 5) & 0x7FFF800 ^ ((v9 + (unsigned __int16)v4 + (v9 >> 11)) << 16) ^ (v9
                                                                                                  + (unsigned __int16)v4
                                                                                                  + (v9 >> 11));
    v11 = (v4 >> 37) & 0x7FFF800 ^ ((v10 + WORD2(v4) + (v10 >> 11)) << 16) ^ (v10 + WORD2(v4) + (v10 >> 11));
    v12 = (v11 + (v11 >> 11)) ^ (8 * (v11 + (v11 >> 11)));
    v13 = (v12 + (v12 >> 5)) ^ (4 * (v12 + (v12 >> 5)));
    v14 = (v13 + (v13 >> 15)) ^ ((v13 + (v13 >> 15)) << 10);
    if (v14)
      return v14;
    else
      return 0x800000;
  }
  else
  {
    result = *(unsigned int *)(v1 + 4);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)v1);
      *(_DWORD *)(v1 + 4) = result;
    }
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v2;
  unsigned int v4;
  WebCore::QualifiedName::QualifiedNameImpl *v5;
  int v6;
  WTF::StringImpl **v7;
  int v8;
  int v9;
  WTF::StringImpl ***v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WebCore::QualifiedName::QualifiedNameImpl *v15;
  unsigned int v16;
  WTF::StringImpl ***v17;
  WTF::StringImpl **v18;
  WebCore::QualifiedName::QualifiedNameImpl *v20;
  int i;
  WTF *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = *a2;
    if (*((_QWORD *)*a2 + 2))
    {
      v24 = *MEMORY[0x1E0CBF2F8];
      v25 = *(_OWORD *)((char *)v5 + 24);
      v6 = WTF::computeHash<WebCore::QualifiedNameComponents>(&v24);
    }
    else
    {
      v6 = *((_DWORD *)v5 + 1);
      if (!v6)
      {
        v6 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
        *((_DWORD *)v5 + 1) = v6;
      }
    }
    v7 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v8 = 0;
      while (1)
      {
        v9 = v6 & v4;
        v10 = (WTF::StringImpl ***)(v2 + 16 * (v6 & v4));
        if (v7)
        {
          v11 = (*(_DWORD *)v7)++;
          v12 = *v10;
          if (v11)
          {
            *(_DWORD *)v7 = v11;
            v13 = (uint64_t)v7;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
            WTF::fastFree(v22, v23);
            v13 = WebCore::nullName;
          }
        }
        else
        {
          v13 = 0;
          v12 = *v10;
        }
        if (v12 == v7)
          break;
        v14 = *v10;
        if (*v10 != (WTF::StringImpl **)-1)
        {
          v15 = *a2;
          if (v14 == (WTF::StringImpl **)*a2
            || v14[3] == *((WTF::StringImpl **)v15 + 3) && v14[4] == *((WTF::StringImpl **)v15 + 4))
          {
            return v10;
          }
        }
        v6 = ++v8 + v9;
        v7 = (WTF::StringImpl **)v13;
      }
    }
    else
    {
      v16 = v6 & v4;
      v17 = (WTF::StringImpl ***)(v2 + 16 * (v6 & v4));
      v18 = *v17;
      if (*v17)
      {
        v20 = *a2;
        for (i = 1; ; ++i)
        {
          if (v18 != (WTF::StringImpl **)-1)
          {
            if (v18 == (WTF::StringImpl **)v20)
              return v17;
            if (v18[3] == *((WTF::StringImpl **)v20 + 3))
            {
              v10 = v17;
              if (v18[4] == *((WTF::StringImpl **)v20 + 4))
                return v10;
            }
          }
          v10 = 0;
          v16 = (v16 + i) & v4;
          v17 = (WTF::StringImpl ***)(v2 + 16 * v16);
          v18 = *v17;
          if (!*v17)
            return v10;
        }
      }
    }
  }
  return 0;
}

_QWORD *WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::~SVGAnimatedPrimitiveProperty(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = &off_1E3452E28;
  v3 = (_DWORD *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *a1 = off_1E347BE40;
  v5 = a1[3];
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v13 = i;
              v14 = v5;
              v12 = v7;
              WTF::fastFree((WTF *)v9, a2);
              v7 = v12;
              i = v13;
              v5 = v14;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::baseValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::animValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
}

BOOL WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::isDirty(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 40) + 25) == 1;
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::setDirty(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 40) + 25) = 1;
  return result;
}

_BYTE *WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::synchronize@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *result;
  char v4;

  result = *(_BYTE **)(a1 + 40);
  v4 = result[25];
  if (v4)
  {
    result[25] = 0;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 32))(result);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[8] = v4;
  return result;
}

unsigned int *WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::startAnimation(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _BYTE v12[24];

  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    v6 = *(_DWORD **)(v5 + 32);
    if (v6)
      *v6 += 2;
    v7 = *(WTF::StringImpl **)(v4 + 32);
    *(_QWORD *)(v4 + 32) = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v8 + 8) = 1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_WORD *)(v8 + 24) = 0;
    *(_QWORD *)v8 = &off_1E3452EA8;
    v9 = *(_DWORD **)(v5 + 32);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(v8 + 32) = v9;
    v10 = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v8;
    if (v10)
    {
      if (v10[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      else
        --v10[2];
    }
  }
  return WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>(a1 + 24, a2, (uint64_t)v12);
}

WTF::StringImpl *WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::stopAnimation(_QWORD *a1, _QWORD *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;

  result = (WTF::StringImpl *)WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>((uint64_t)(a1 + 3), a2);
  v5 = a1[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v6 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = (uint64_t *)a1[3];
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
        goto LABEL_2;
    }
  }
  else
  {
    v8 = (uint64_t *)a1[3];
  }
  v9 = (uint64_t *)(v5 + 8 * v6);
  if (v8 == v9)
    goto LABEL_2;
  v10 = *v8;
LABEL_16:
  if (!*(_QWORD *)(v10 + 8))
  {
    while (++v8 != v9)
    {
      v10 = *v8;
      if ((unint64_t)(*v8 + 1) > 1)
      {
        if (v8 != v9)
          goto LABEL_16;
        break;
      }
    }
LABEL_2:
    result = (WTF::StringImpl *)a1[6];
    a1[6] = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
    return result;
  }
  v11 = a1[6];
  if (v11)
  {
    v12 = *(_DWORD **)(a1[5] + 32);
    if (v12)
      *v12 += 2;
    result = *(WTF::StringImpl **)(v11 + 32);
    *(_QWORD *)(v11 + 32) = v12;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::instanceStartAnimation(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v5 = a1[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v9 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = (uint64_t *)a1[3];
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_2;
    }
  }
  else
  {
    v11 = (uint64_t *)a1[3];
  }
  v12 = (uint64_t *)(v5 + 8 * v9);
  if (v11 == v12)
    goto LABEL_2;
  v13 = *v11;
LABEL_18:
  if (!*(_QWORD *)(v13 + 8))
  {
    while (++v11 != v12)
    {
      v13 = *v11;
      if ((unint64_t)(*v11 + 1) > 1)
      {
        if (v11 != v12)
          goto LABEL_18;
        break;
      }
    }
LABEL_2:
    v6 = *(_QWORD *)(a3 + 48);
    if (v6)
      ++*(_DWORD *)(v6 + 8);
    v7 = (_DWORD *)a1[6];
    a1[6] = v6;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, a2);
}

_DWORD *WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::instanceStopAnimation(_QWORD *a1)
{
  _DWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  result = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  v3 = a1[3];
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_2;
  v4 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = (uint64_t *)a1[3];
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_2;
    }
  }
  else
  {
    v6 = (uint64_t *)a1[3];
  }
  v7 = (uint64_t *)(v3 + 8 * v4);
  if (v6 == v7)
    goto LABEL_2;
  v8 = *v6;
LABEL_16:
  if (!*(_QWORD *)(v8 + 8))
  {
    while (++v6 != v7)
    {
      v8 = *v6;
      if ((unint64_t)(*v6 + 1) > 1)
      {
        if (v6 != v7)
          goto LABEL_16;
        break;
      }
    }
LABEL_2:
    result = (_DWORD *)a1[6];
    a1[6] = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

_QWORD *WebCore::SVGSharedPrimitiveProperty<WTF::String>::~SVGSharedPrimitiveProperty(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E3452EA8;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WebCore::SVGSharedPrimitiveProperty<WTF::String>::valueAsString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(result + 32);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGAElement::SVGAElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t result;
  WTF::StringImpl **v4;
  uint64_t *v5;
  int i;
  int v7;
  uint64_t *v8;
  int v9;
  WebCore::QualifiedName::QualifiedNameImpl *v10;
  uint64_t v11;
  WebCore::QualifiedName::QualifiedNameImpl *v12;
  WTF *v13;
  void *v14;
  unsigned int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  WTF *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;

  if ((byte_1ECE84CD8 & 1) == 0)
  {
    qword_1ECE84CF8 = (uint64_t)off_1E34515A0;
    unk_1ECE84D00 = 232;
    byte_1ECE84CD8 = 1;
  }
  if ((byte_1ECE84CC0 & 1) != 0)
  {
    v0 = _MergedGlobals_268;
    if (_MergedGlobals_268)
    {
LABEL_6:
      v1 = *(_DWORD *)(v0 - 8);
      goto LABEL_7;
    }
  }
  else
  {
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
  }
  WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0);
  v0 = _MergedGlobals_268;
  if (_MergedGlobals_268)
    goto LABEL_6;
  v1 = 0;
LABEL_7:
  v2 = WebCore::SVGNames::targetAttr;
  if (*(_QWORD *)(WebCore::SVGNames::targetAttr + 16))
  {
    v28 = *(_QWORD *)(WebCore::SVGNames::targetAttr + 24);
    v29 = *(_QWORD *)(WebCore::SVGNames::targetAttr + 32);
    v30 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v31 = v30 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v32 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v31 + (v30 >> 11)) << 16) ^ (v31 + (v30 >> 11));
    v33 = (v28 >> 5) & 0x7FFF800 ^ ((v32 + (unsigned __int16)v28 + (v32 >> 11)) << 16) ^ (v32 + (unsigned __int16)v28 + (v32 >> 11));
    v34 = (v28 >> 37) & 0x7FFF800 ^ ((v33 + WORD2(v28) + (v33 >> 11)) << 16) ^ (v33 + WORD2(v28) + (v33 >> 11));
    v35 = (v29 >> 5) & 0x7FFF800 ^ ((v34 + (unsigned __int16)v29 + (v34 >> 11)) << 16) ^ (v34 + (unsigned __int16)v29 + (v34 >> 11));
    v36 = (v29 >> 37) & 0x7FFF800 ^ ((v35 + WORD2(v29) + (v35 >> 11)) << 16) ^ (v35 + WORD2(v29) + (v35 >> 11));
    v37 = (v36 + (v36 >> 11)) ^ (8 * (v36 + (v36 >> 11)));
    v38 = (v37 + (v37 >> 5)) ^ (4 * (v37 + (v37 >> 5)));
    v39 = (v38 + (v38 >> 15)) ^ ((v38 + (v38 >> 15)) << 10);
    if (v39)
      result = v39;
    else
      result = 0x800000;
  }
  else
  {
    result = *(unsigned int *)(WebCore::SVGNames::targetAttr + 4);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::targetAttr);
      *(_DWORD *)(v2 + 4) = result;
    }
  }
  v4 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v5 = 0;
    for (i = 1; ; ++i)
    {
      v7 = result & v1;
      v8 = (uint64_t *)(v0 + 16 * (result & v1));
      if (v4)
      {
        v9 = (*(_DWORD *)v4)++;
        v10 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
        if (v9)
        {
          *(_DWORD *)v4 = v9;
          v11 = (uint64_t)v4;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v4);
          result = WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
      }
      if (v10 == (WebCore::QualifiedName::QualifiedNameImpl *)v4)
        break;
      v12 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
      if (*v8 != -1)
      {
        if (v12 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::targetAttr)
          return result;
        if (*((_QWORD *)v12 + 3) == *(_QWORD *)(WebCore::SVGNames::targetAttr + 24))
        {
          v8 = v5;
          if (*((_QWORD *)v12 + 4) == *(_QWORD *)(WebCore::SVGNames::targetAttr + 32))
            return result;
        }
        else
        {
          v8 = v5;
        }
      }
      result = (i + v7);
      v4 = (WTF::StringImpl **)v11;
      v5 = v8;
    }
LABEL_35:
    if (v5)
    {
      v18 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v5 = v18;
      v5[1] = 0;
      --*(_DWORD *)(_MergedGlobals_268 - 16);
      v8 = v5;
    }
  }
  else
  {
    v15 = result & v1;
    v8 = (uint64_t *)(v0 + 16 * (result & v1));
    v16 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
    if (*v8)
    {
      result = 0;
      v17 = 1;
      while (1)
      {
        v5 = v8;
        if (v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        {
          if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::targetAttr)
            return result;
          if (*((_QWORD *)v16 + 3) == *(_QWORD *)(WebCore::SVGNames::targetAttr + 24))
          {
            v5 = (uint64_t *)result;
            if (*((_QWORD *)v16 + 4) == *(_QWORD *)(WebCore::SVGNames::targetAttr + 32))
              return result;
          }
          else
          {
            v5 = (uint64_t *)result;
          }
        }
        v15 = (v15 + v17) & v1;
        v8 = (uint64_t *)(v0 + 16 * v15);
        v16 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
        ++v17;
        result = (uint64_t)v5;
        if (!*v8)
          goto LABEL_35;
      }
    }
  }
  v19 = WebCore::SVGNames::targetAttr;
  if (WebCore::SVGNames::targetAttr)
    ++*(_DWORD *)WebCore::SVGNames::targetAttr;
  result = *v8;
  *v8 = v19;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
      result = WTF::fastFree(v26, v27);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v20 = _MergedGlobals_268;
  v8[1] = (uint64_t)&qword_1ECE84CF8;
  if (v20)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  if (_MergedGlobals_268)
    v22 = *(_DWORD *)(_MergedGlobals_268 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(_MergedGlobals_268 - 16) + v22);
  v24 = *(unsigned int *)(_MergedGlobals_268 - 4);
  if (v24 <= 0x400)
  {
    if (3 * v24 > 4 * v23)
      return result;
    if (!(_DWORD)v24)
    {
      v25 = 8;
      return (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v25, (WebCore::QualifiedName::QualifiedNameImpl **)v8);
    }
LABEL_54:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(_MergedGlobals_268 - 12) >= (2 * v24));
    return (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v25, (WebCore::QualifiedName::QualifiedNameImpl **)v8);
  }
  if (v24 <= 2 * v23)
    goto LABEL_54;
  return result;
}

_DWORD *WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  char *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *result;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  WTF::StringImpl ***v50;

  v3 = &InitWebCoreThreadSystemInterface::didInit;
  v4 = _MergedGlobals_268;
  if (_MergedGlobals_268)
  {
    v5 = *(_DWORD *)(_MergedGlobals_268 - 4);
    v6 = *(_DWORD *)(_MergedGlobals_268 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = result + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  _MergedGlobals_268 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(_MergedGlobals_268 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v48 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        return (_DWORD *)WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = *((_QWORD *)v3 + 407);
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v50 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v50;
        v15 = v48;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &InitWebCoreThreadSystemInterface::didInit;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &InitWebCoreThreadSystemInterface::didInit;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v50;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v48;
    goto LABEL_40;
  }
  if (v4)
    return (_DWORD *)WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGAElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGAElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGAElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGAElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGAElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGAElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGAElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGAElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGAElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

void WebCore::SVGAnimatedStringAnimator::~SVGAnimatedStringAnimator(WebCore::SVGAnimatedStringAnimator *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedString,WebCore::SVGAnimationStringFunction>::~SVGAnimatedPropertyAnimator((uint64_t)this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedString,WebCore::SVGAnimationStringFunction>::isDiscrete()
{
  return 1;
}

WTF::StringImpl *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedString,WebCore::SVGAnimationStringFunction>::setFromAndToValues(uint64_t a1, WTF::StringImpl *a2, _DWORD **a3, _DWORD **a4)
{
  _DWORD *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *result;

  v6 = *a3;
  if (*a3)
    *v6 += 2;
  v7 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *a4;
  if (*a4)
    *v8 += 2;
  result = *(WTF::StringImpl **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v8;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedString,WebCore::SVGAnimationStringFunction>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

WTF::StringImpl *WebCore::SVGAnimatedStringAnimator::animate(WebCore::SVGAnimatedStringAnimator *this, WebCore::SVGElement *a2, float a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  _DWORD *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  v3 = (_QWORD *)*((_QWORD *)this + 4);
  v4 = v3[3];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v13 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = (uint64_t *)v3[3];
    while ((unint64_t)(*v15 + 1) <= 1)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
        goto LABEL_2;
    }
  }
  else
  {
    v15 = (uint64_t *)v3[3];
  }
  v16 = (uint64_t *)(v4 + 8 * v13);
  if (v15 == v16)
    goto LABEL_2;
  v17 = *v15;
LABEL_32:
  if (!*(_QWORD *)(v17 + 8))
  {
    while (++v15 != v16)
    {
      v17 = *v15;
      if ((unint64_t)(*v15 + 1) > 1)
      {
        if (v15 != v16)
          goto LABEL_32;
        break;
      }
    }
LABEL_2:
    v5 = v3 + 5;
    goto LABEL_3;
  }
  v5 = v3 + 6;
LABEL_3:
  v6 = *v5;
  v7 = *((unsigned __int8 *)this + 64);
  if (a3 > 0.5 && v7 == 1 || a3 == 1.0 || v7 == 3)
  {
    v11 = (_DWORD *)*((_QWORD *)this + 10);
    if (!v11)
      goto LABEL_16;
    goto LABEL_15;
  }
  v11 = (_DWORD *)*((_QWORD *)this + 9);
  if (v11)
LABEL_15:
    *v11 += 2;
LABEL_16:
  result = *(WTF::StringImpl **)(v6 + 32);
  *(_QWORD *)(v6 + 32) = v11;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAnimator::apply(WebCore::SVGAnimatedStringAnimator *this, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _QWORD *result;
  WebCore::SVGElement *v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  v4 = (_QWORD *)*((_QWORD *)this + 3);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(this);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD *)a2 + 20), v4))
      goto LABEL_11;
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 4) + 48))(&v18);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange((uint64_t)this, a2, (const WTF::String *)&v18);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
LABEL_11:
  result = (_QWORD *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)this, a2);
  v17 = **((_QWORD **)this + 3);
  if (v17 == WebCore::HTMLNames::classAttr
    || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
    && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
  {
    return WebCore::SVGAttributeAnimator::invalidateStyle(a2, v16);
  }
  return result;
}

WebCore::SVGElement *WebCore::SVGAnimatedStringAnimator::stop(WebCore::SVGElement *this, WebCore::SVGElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t *v6;
  uint64_t v7;
  WebCore::SVGElement *v8;
  WebCore::SVGElement *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 24);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = 8 * v3;
      for (i = *(uint64_t **)(*((_QWORD *)this + 4) + 24); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v4 -= 8;
        if (!v4)
          return this;
      }
    }
    else
    {
      i = *(uint64_t **)(*((_QWORD *)this + 4) + 24);
    }
    v6 = (uint64_t *)(v2 + 8 * v3);
    if (i != v6)
    {
      v7 = *i;
LABEL_12:
      if (*(_QWORD *)(v7 + 8))
      {
        v8 = this;
        this = WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedString,WebCore::SVGAnimationStringFunction>::stop((WebCore::SVGElement **)this, a2);
        v11 = **((_QWORD **)v8 + 3);
        if (v11 == WebCore::HTMLNames::classAttr
          || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
          && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
        {
          return (WebCore::SVGElement *)WebCore::SVGAttributeAnimator::invalidateStyle(a2, v10);
        }
      }
      else
      {
        while (++i != v6)
        {
          v7 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v6)
              goto LABEL_12;
            return this;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedString,WebCore::SVGAnimationStringFunction>::calculateDistance()
{
  return 0;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedString,WebCore::SVGAnimationStringFunction>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedString,WebCore::SVGAnimationStringFunction>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

void WebCore::SVGAnimationStringFunction::~SVGAnimationStringFunction(WebCore::SVGAnimationStringFunction *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E3452DD8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E3452DD8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationDiscreteFunction<WTF::String>::isDiscrete()
{
  return 1;
}

WTF::StringImpl *WebCore::SVGAnimationStringFunction::setFromAndToValues(WebCore::SVGAnimationStringFunction *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  _DWORD *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *result;

  v6 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v6 += 2;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v8 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v8;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGAnimationFunction::calculateDistance(WebCore::SVGAnimationFunction *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  return 0;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedString,WebCore::SVGAnimationStringFunction>::~SVGAnimatedPropertyAnimator(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  *(_QWORD *)a1 = off_1E3452D20;
  *(_QWORD *)(a1 + 56) = off_1E3452DD8;
  v3 = *(WTF::StringImpl **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v5)
  {
    v6 = *(_DWORD ***)(a1 + 40);
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v9 = *(WTF **)(a1 + 40);
  if (v9)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

BOOL WTF::Detail::CallableWrapper<WebCore::SVGAElement::relList(void)::$_0,BOOL,WebCore::Document &,WTF::StringView>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  if ((_DWORD)a4 == 2)
  {
    if ((a4 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a3 & 0xDF) != 0x41)
        return 0;
      v5 = *(unsigned __int8 *)(a3 + 1);
    }
    else
    {
      if ((*(_WORD *)a3 & 0xFFDF) != 0x41)
        return 0;
      v5 = *(unsigned __int16 *)(a3 + 2);
    }
    return (v5 & 0xFFFFFFDF) == 0x52;
  }
  if ((_DWORD)a4 == 10)
  {
    if ((a4 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a3 & 0xDF) != 0x4E
        || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x4F
        || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x52
        || (*(_BYTE *)(a3 + 3) & 0xDF) != 0x45
        || (*(_BYTE *)(a3 + 4) & 0xDF) != 0x46
        || (*(_BYTE *)(a3 + 5) & 0xDF) != 0x45
        || (*(_BYTE *)(a3 + 6) & 0xDF) != 0x52
        || (*(_BYTE *)(a3 + 7) & 0xDF) != 0x52
        || (*(_BYTE *)(a3 + 8) & 0xDF) != 0x45)
      {
        return 0;
      }
      v5 = *(unsigned __int8 *)(a3 + 9);
    }
    else
    {
      if ((*(_WORD *)a3 & 0xFFDF) != 0x4E
        || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x4F
        || (*(_WORD *)(a3 + 4) & 0xFFDF) != 0x52
        || (*(_WORD *)(a3 + 6) & 0xFFDF) != 0x45
        || (*(_WORD *)(a3 + 8) & 0xFFDF) != 0x46
        || (*(_WORD *)(a3 + 10) & 0xFFDF) != 0x45
        || (*(_WORD *)(a3 + 12) & 0xFFDF) != 0x52
        || (*(_WORD *)(a3 + 14) & 0xFFDF) != 0x52
        || (*(_WORD *)(a3 + 16) & 0xFFDF) != 0x45)
      {
        return 0;
      }
      v5 = *(unsigned __int16 *)(a3 + 18);
    }
    return (v5 & 0xFFFFFFDF) == 0x52;
  }
  if ((_DWORD)a4 != 8)
    return 0;
  if ((a4 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)a3 & 0xDF) != 0x4E
      || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x4F
      || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x4F
      || (*(_BYTE *)(a3 + 3) & 0xDF) != 0x50
      || (*(_BYTE *)(a3 + 4) & 0xDF) != 0x45
      || (*(_BYTE *)(a3 + 5) & 0xDF) != 0x4E
      || (*(_BYTE *)(a3 + 6) & 0xDF) != 0x45)
    {
      return 0;
    }
    v6 = *(unsigned __int8 *)(a3 + 7);
  }
  else
  {
    if ((*(_WORD *)a3 & 0xFFDF) != 0x4E
      || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x4F
      || (*(_WORD *)(a3 + 4) & 0xFFDF) != 0x4F
      || (*(_WORD *)(a3 + 6) & 0xFFDF) != 0x50
      || (*(_WORD *)(a3 + 8) & 0xFFDF) != 0x45
      || (*(_WORD *)(a3 + 10) & 0xFFDF) != 0x4E
      || (*(_WORD *)(a3 + 12) & 0xFFDF) != 0x45)
    {
      return 0;
    }
    v6 = *(unsigned __int16 *)(a3 + 14);
  }
  return (v6 & 0xFFFFFFDF) == 82;
}

void WebCore::SVGAltGlyphDefElement::~SVGAltGlyphDefElement(WebCore::SVGAltGlyphDefElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGElement::~SVGElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGAltGlyphDefElement::rendererIsNeeded(WebCore::SVGAltGlyphDefElement *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

void `non-virtual thunk to'WebCore::SVGAltGlyphDefElement::~SVGAltGlyphDefElement(WebCore::SVGAltGlyphDefElement *this, void *a2)
{
  WebCore::SVGElement::~SVGElement((WebCore::SVGAltGlyphDefElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGElement::~SVGElement((WebCore::SVGAltGlyphDefElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAltGlyphElement,WebCore::SVGTextPositioningElement,WebCore::SVGURIReference>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t v5;
  WTF::StringImpl ***v6;
  char *v7;
  WTF::StringImpl ***v8;
  uint64_t v9;
  WTF::StringImpl ***v10;
  uint64_t v11;
  WTF::StringImpl ***v12;
  char *v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WTF::StringImpl ***v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF *v23;
  void *v24;
  uint64_t v25;
  WTF::StringImpl ***v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  int v29;
  WTF::StringImpl **v30;
  WTF *v32;
  void *v33;
  WTF::StringImpl ***v34;
  uint64_t v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl **v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  WTF *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl ***v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  int v50;
  WTF::StringImpl **v51;
  WTF *v53;
  void *v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl ***v59;
  WTF::StringImpl **v60;
  int v61;
  WTF::StringImpl **v62;
  WTF *v64;
  void *v65;
  WTF::StringImpl ***v66;
  uint64_t v67;
  WTF::StringImpl ***v68;
  uint64_t v69;
  WTF::StringImpl ***v70;
  char *v71;
  WTF::StringImpl **v72;
  uint64_t v73;
  int v74;
  WTF::StringImpl **v75;
  uint64_t v76;
  WTF *v78;
  void *v79;
  uint64_t v80;

  v1 = result;
  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  {
    v2 = 0;
    v6 = 0;
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_186;
  }
  v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v6 = 0;
    v3 = 0;
LABEL_186:
    v4 = &v2[2 * v3];
    goto LABEL_13;
  }
  v3 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v3);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                             + 16 * v3);
    goto LABEL_186;
  }
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v2);
      if ((result & 1) == 0 && *v2 != (WTF::StringImpl **)-1)
        break;
      v2 += 2;
      v5 -= 16;
      if (!v5)
      {
        v2 = v4;
        break;
      }
    }
    v6 = v2;
    v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_13:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  while (v6 != v2)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v6[1] + 2))(v6[1], *(_QWORD *)(v1 + 8));
    v7 = (char *)(v6 + 2);
    v6 = v4;
    if (v7 != (char *)v4)
    {
      v6 = (WTF::StringImpl ***)v7;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v6);
        if ((result & 1) == 0 && *v6 != (WTF::StringImpl **)-1)
          break;
        v6 += 2;
        if (v6 == v4)
        {
          v6 = v4;
          break;
        }
      }
    }
  }
  {
    v8 = 0;
    v12 = 0;
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_184;
  }
  v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v12 = 0;
    v9 = 0;
LABEL_184:
    v10 = &v8[2 * v9];
    goto LABEL_33;
  }
  v9 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v9);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v12 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v9);
    goto LABEL_184;
  }
  if ((_DWORD)v9)
  {
    v11 = 16 * v9;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v8);
      if ((result & 1) == 0 && *v8 != (WTF::StringImpl **)-1)
        break;
      v8 += 2;
      v11 -= 16;
      if (!v11)
      {
        v8 = v10;
        break;
      }
    }
    v12 = v8;
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v12 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_33:
  if (v8)
    v8 += 2 * *((unsigned int *)v8 - 1);
  while (v12 != v8)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v12[1] + 2))(v12[1], *(_QWORD *)(v1 + 8));
    v13 = (char *)(v12 + 2);
    v12 = v10;
    if (v13 != (char *)v10)
    {
      v12 = (WTF::StringImpl ***)v13;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v12);
        if ((result & 1) == 0 && *v12 != (WTF::StringImpl **)-1)
          break;
        v12 += 2;
        if (v12 == v10)
        {
          v12 = v10;
          break;
        }
      }
    }
  }
  {
    v14 = 0;
    v26 = 0;
    v15 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_190;
  }
  v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v26 = 0;
    v15 = 0;
LABEL_190:
    v16 = &v14[2 * v15];
    goto LABEL_65;
  }
  v15 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v16 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v15);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v15);
    goto LABEL_190;
  }
  if ((_DWORD)v15)
  {
    v17 = (WTF::StringImpl **)WebCore::nullName;
    v18 = 16 * v15;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v17)
        {
          v19 = (*(_DWORD *)v17)++;
          v20 = *v14;
          if (v19)
          {
            *(_DWORD *)v17 = v19;
            v21 = (uint64_t)v17;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v17);
            result = WTF::fastFree(v23, v24);
            v21 = WebCore::nullName;
          }
        }
        else
        {
          v21 = 0;
          v20 = *v14;
        }
        if (v20 != v17 && (WTF::StringImpl **)((char *)*v14 + 1) != 0)
          break;
        v14 += 2;
        v17 = (WTF::StringImpl **)v21;
        v18 -= 16;
        if (!v18)
        {
          v14 = v16;
          break;
        }
      }
      v26 = v14;
      v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v25 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v25)
                               + 1) <= 1)
      {
        v25 += 16;
        if (v18 == v25)
        {
          v26 = v16;
          goto LABEL_65;
        }
      }
      v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v25);
    }
  }
  else
  {
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_65:
  if (v14)
    v14 += 2 * *((unsigned int *)v14 - 1);
  while (v26 != v14)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v26[1] + 2))(v26[1], *(_QWORD *)(v1 + 8));
    v27 = v26 + 2;
    v26 = v16;
    if (v27 != v16)
    {
      v28 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_70:
        v29 = (*(_DWORD *)v28)++;
        v30 = *v27;
        if (v29)
        {
          *(_DWORD *)v28 = v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = WTF::fastFree(v32, v33);
        }
        while (v30 == v28 || (WTF::StringImpl **)((char *)*v27 + 1) == 0)
        {
          v27 += 2;
          if (v27 == v16)
            goto LABEL_83;
          v28 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_70;
          v30 = *v27;
        }
      }
      else
      {
        while ((unint64_t)*v27 + 1 <= 1)
        {
          v27 += 2;
          if (v27 == v16)
          {
LABEL_83:
            v26 = v16;
            goto LABEL_85;
          }
        }
      }
      v26 = v27;
    }
LABEL_85:
    ;
  }
  {
    v34 = 0;
    v47 = 0;
    v35 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_192;
  }
  v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v47 = 0;
    v35 = 0;
LABEL_192:
    v36 = &v34[2 * v35];
    goto LABEL_109;
  }
  v35 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v35);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v47 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v35);
    goto LABEL_192;
  }
  if ((_DWORD)v35)
  {
    v37 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v38 = 16 * v35;
      while (1)
      {
        if (v37)
        {
          v39 = (*(_DWORD *)v37)++;
          v40 = *v34;
          if (v39)
          {
            *(_DWORD *)v37 = v39;
            v41 = (uint64_t)v37;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
            result = WTF::fastFree(v43, v44);
            v41 = WebCore::nullName;
          }
        }
        else
        {
          v41 = 0;
          v40 = *v34;
        }
        if (v40 != v37 && (WTF::StringImpl **)((char *)*v34 + 1) != 0)
          break;
        v34 += 2;
        v37 = (WTF::StringImpl **)v41;
        v38 -= 16;
        if (!v38)
        {
          v34 = v36;
          break;
        }
      }
      v47 = v34;
      v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v45 = 0;
      v46 = 16 * v35;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v45)
                               + 1) <= 1)
      {
        v45 += 16;
        if (v46 == v45)
        {
          v47 = v36;
          goto LABEL_109;
        }
      }
      v47 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v45);
    }
  }
  else
  {
    v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_109:
  if (v34)
    v34 += 2 * *((unsigned int *)v34 - 1);
  while (v47 != v34)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v47[1] + 2))(v47[1], *(_QWORD *)(v1 + 8));
    v48 = v47 + 2;
    v47 = v36;
    if (v48 != v36)
    {
      v49 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_114:
        v50 = (*(_DWORD *)v49)++;
        v51 = *v48;
        if (v50)
        {
          *(_DWORD *)v49 = v50;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
          result = WTF::fastFree(v53, v54);
        }
        while (v51 == v49 || (WTF::StringImpl **)((char *)*v48 + 1) == 0)
        {
          v48 += 2;
          if (v48 == v36)
            goto LABEL_127;
          v49 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_114;
          v51 = *v48;
        }
      }
      else
      {
        while ((unint64_t)*v48 + 1 <= 1)
        {
          v48 += 2;
          if (v48 == v36)
          {
LABEL_127:
            v47 = v36;
            goto LABEL_129;
          }
        }
      }
      v47 = v48;
    }
LABEL_129:
    ;
  }
  {
    v55 = 0;
    v56 = 0;
    v57 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_133;
  }
  v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v56 = 0;
    v57 = 0;
LABEL_133:
    v58 = &v55[2 * v57];
    goto LABEL_134;
  }
  v57 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v57);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v56 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v57);
    goto LABEL_133;
  }
  if ((_DWORD)v57)
  {
    v72 = (WTF::StringImpl **)WebCore::nullName;
    v73 = 16 * v57;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v72)
        {
          v74 = (*(_DWORD *)v72)++;
          v75 = *v55;
          if (v74)
          {
            *(_DWORD *)v72 = v74;
            v76 = (uint64_t)v72;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v72);
            result = WTF::fastFree(v78, v79);
            v76 = WebCore::nullName;
          }
        }
        else
        {
          v76 = 0;
          v75 = *v55;
        }
        if (v75 != v72 && (WTF::StringImpl **)((char *)*v55 + 1) != 0)
          break;
        v55 += 2;
        v72 = (WTF::StringImpl **)v76;
        v73 -= 16;
        if (!v73)
        {
          v55 = v58;
          break;
        }
      }
      v56 = v55;
      v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v80 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v80)
                               + 1) <= 1)
      {
        v80 += 16;
        if (v73 == v80)
        {
          v56 = v58;
          goto LABEL_134;
        }
      }
      v56 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v80);
    }
  }
  else
  {
    v56 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_134:
  if (v55)
    v55 += 2 * *((unsigned int *)v55 - 1);
  while (v56 != v55)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t))*v56[1] + 2))(v56[1], *(_QWORD *)(v1 + 8) + 184);
    v59 = v56 + 2;
    v56 = v58;
    if (v59 != v58)
    {
      v60 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_139:
        v61 = (*(_DWORD *)v60)++;
        v62 = *v59;
        if (v61)
        {
          *(_DWORD *)v60 = v61;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v60);
          result = WTF::fastFree(v64, v65);
        }
        while (v62 == v60 || (WTF::StringImpl **)((char *)*v59 + 1) == 0)
        {
          v59 += 2;
          if (v59 == v58)
            goto LABEL_152;
          v60 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_139;
          v62 = *v59;
        }
      }
      else
      {
        while ((unint64_t)*v59 + 1 <= 1)
        {
          v59 += 2;
          if (v59 == v58)
          {
LABEL_152:
            v56 = v58;
            goto LABEL_154;
          }
        }
      }
      v56 = v59;
    }
LABEL_154:
    ;
  }
  {
    v66 = 0;
    v70 = 0;
    v67 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_188;
  }
  v66 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v70 = 0;
    v67 = 0;
LABEL_188:
    v68 = &v66[2 * v67];
    goto LABEL_165;
  }
  v67 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v68 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v67);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v70 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v67);
    goto LABEL_188;
  }
  if ((_DWORD)v67)
  {
    v69 = 16 * v67;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v66);
      if ((result & 1) == 0 && *v66 != (WTF::StringImpl **)-1)
        break;
      v66 += 2;
      v69 -= 16;
      if (!v69)
      {
        v66 = v68;
        break;
      }
    }
    v70 = v66;
    v66 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v70 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_165:
  if (v66)
    v66 += 2 * *((unsigned int *)v66 - 1);
  while (v70 != v66)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t))*v70[1] + 2))(v70[1], *(_QWORD *)(v1 + 8) + 280);
    v71 = (char *)(v70 + 2);
    v70 = v68;
    if (v71 != (char *)v68)
    {
      v70 = (WTF::StringImpl ***)v71;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v70);
        if ((result & 1) == 0 && *v70 != (WTF::StringImpl **)-1)
          break;
        v70 += 2;
        if (v70 == v68)
        {
          v70 = v68;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAltGlyphElement,WebCore::SVGTextPositioningElement,WebCore::SVGURIReference>::propertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  WTF::StringImpl ***v9;
  uint64_t v10;
  WTF::StringImpl ***v11;
  char *v12;
  WTF::StringImpl ***v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  uint64_t v16;
  char *v17;
  WTF::StringImpl ***v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF *v27;
  void *v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl **v31;
  int v32;
  WTF::StringImpl **v33;
  WTF *v35;
  void *v36;
  WTF::StringImpl ***v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  WTF *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl ***v50;
  WTF::StringImpl **v51;
  int v52;
  WTF::StringImpl **v53;
  WTF *v55;
  void *v56;
  WTF::StringImpl ***v57;
  uint64_t v58;
  WTF::StringImpl ***v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  WTF::StringImpl ***v67;
  uint64_t v68;
  WTF::StringImpl ***v69;
  uint64_t v70;
  char *v71;
  WTF::StringImpl **v72;
  WTF *v73;
  void *v74;
  WTF::StringImpl **v75;
  uint64_t v76;
  int v77;
  WTF::StringImpl **v78;
  uint64_t v79;
  WTF *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;

  v4 = result;
  v6 = WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  {
    v7 = 0;
    v11 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_199;
  }
  v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v11 = 0;
    v8 = 0;
LABEL_199:
    v9 = &v7[2 * v8];
    goto LABEL_15;
  }
  v8 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v8);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v8);
    goto LABEL_199;
  }
  if ((_DWORD)v8)
  {
    v10 = 16 * v8;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v7);
      if ((result & 1) == 0 && *v7 != (WTF::StringImpl **)-1)
        break;
      v7 += 2;
      v10 -= 16;
      if (!v10)
      {
        v7 = v9;
        break;
      }
    }
    v11 = v7;
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_15:
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  while (v11 != v7)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v11[1] + 5))(v11[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_187;
    v12 = (char *)(v11 + 2);
    v11 = v9;
    if (v12 != (char *)v9)
    {
      v11 = (WTF::StringImpl ***)v12;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v11);
        if ((result & 1) == 0 && *v11 != (WTF::StringImpl **)-1)
          break;
        v11 += 2;
        if (v11 == v9)
        {
          v11 = v9;
          break;
        }
      }
    }
  }
  {
    v13 = 0;
    v11 = 0;
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_201;
  }
  v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v11 = 0;
    v14 = 0;
LABEL_201:
    v15 = &v13[2 * v14];
    goto LABEL_36;
  }
  v14 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v14);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v14);
    goto LABEL_201;
  }
  if ((_DWORD)v14)
  {
    v16 = 16 * v14;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v13);
      if ((result & 1) == 0 && *v13 != (WTF::StringImpl **)-1)
        break;
      v13 += 2;
      v16 -= 16;
      if (!v16)
      {
        v13 = v15;
        break;
      }
    }
    v11 = v13;
    v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_36:
  if (v13)
    v13 += 2 * *((unsigned int *)v13 - 1);
  while (v11 != v13)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v11[1] + 5))(v11[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_187;
    v17 = (char *)(v11 + 2);
    v11 = v15;
    if (v17 != (char *)v15)
    {
      v11 = (WTF::StringImpl ***)v17;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v11);
        if ((result & 1) == 0 && *v11 != (WTF::StringImpl **)-1)
          break;
        v11 += 2;
        if (v11 == v15)
        {
          v11 = v15;
          break;
        }
      }
    }
  }
  {
    v18 = 0;
    v11 = 0;
    v19 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_205;
  }
  v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v11 = 0;
    v19 = 0;
LABEL_205:
    v20 = &v18[2 * v19];
    goto LABEL_71;
  }
  v19 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v19);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v19);
    goto LABEL_205;
  }
  if ((_DWORD)v19)
  {
    v21 = (WTF::StringImpl **)WebCore::nullName;
    v22 = 16 * v19;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v21)
        {
          v23 = (*(_DWORD *)v21)++;
          v24 = *v18;
          if (v23)
          {
            *(_DWORD *)v21 = v23;
            v25 = (uint64_t)v21;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
            result = WTF::fastFree(v27, v28);
            v25 = WebCore::nullName;
          }
        }
        else
        {
          v25 = 0;
          v24 = *v18;
        }
        if (v24 != v21 && (WTF::StringImpl **)((char *)*v18 + 1) != 0)
          break;
        v18 += 2;
        v21 = (WTF::StringImpl **)v25;
        v22 -= 16;
        if (!v22)
        {
          v18 = v20;
          break;
        }
      }
      v11 = v18;
      v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v29 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v29)
                               + 1) <= 1)
      {
        v29 += 16;
        if (v22 == v29)
        {
          v11 = v20;
          goto LABEL_71;
        }
      }
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v29);
    }
  }
  else
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_71:
  if (v18)
    v18 += 2 * *((unsigned int *)v18 - 1);
  while (v11 != v18)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v11[1] + 5))(v11[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_187;
    v30 = v11 + 2;
    v11 = v20;
    if (v30 != v20)
    {
      v31 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_77:
        v32 = (*(_DWORD *)v31)++;
        v33 = *v30;
        if (v32)
        {
          *(_DWORD *)v31 = v32;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v31);
          result = WTF::fastFree(v35, v36);
        }
        while (v33 == v31 || (WTF::StringImpl **)((char *)*v30 + 1) == 0)
        {
          v30 += 2;
          if (v30 == v20)
            goto LABEL_90;
          v31 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_77;
          v33 = *v30;
        }
      }
      else
      {
        while ((unint64_t)*v30 + 1 <= 1)
        {
          v30 += 2;
          if (v30 == v20)
          {
LABEL_90:
            v11 = v20;
            goto LABEL_92;
          }
        }
      }
      v11 = v30;
    }
LABEL_92:
    ;
  }
  {
    v37 = 0;
    v11 = 0;
    v38 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_207;
  }
  v37 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v11 = 0;
    v38 = 0;
LABEL_207:
    v39 = &v37[2 * v38];
    goto LABEL_117;
  }
  v38 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v39 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v38);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v38);
    goto LABEL_207;
  }
  if ((_DWORD)v38)
  {
    v40 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v41 = 16 * v38;
      while (1)
      {
        if (v40)
        {
          v42 = (*(_DWORD *)v40)++;
          v43 = *v37;
          if (v42)
          {
            *(_DWORD *)v40 = v42;
            v44 = (uint64_t)v40;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
            result = WTF::fastFree(v46, v47);
            v44 = WebCore::nullName;
          }
        }
        else
        {
          v44 = 0;
          v43 = *v37;
        }
        if (v43 != v40 && (WTF::StringImpl **)((char *)*v37 + 1) != 0)
          break;
        v37 += 2;
        v40 = (WTF::StringImpl **)v44;
        v41 -= 16;
        if (!v41)
        {
          v37 = v39;
          break;
        }
      }
      v11 = v37;
      v37 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v48 = 0;
      v49 = 16 * v38;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v48)
                               + 1) <= 1)
      {
        v48 += 16;
        if (v49 == v48)
        {
          v11 = v39;
          goto LABEL_117;
        }
      }
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v48);
    }
  }
  else
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_117:
  if (v37)
    v37 += 2 * *((unsigned int *)v37 - 1);
  while (v11 != v37)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v11[1] + 5))(v11[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_187;
    v50 = v11 + 2;
    v11 = v39;
    if (v50 != v39)
    {
      v51 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_123:
        v52 = (*(_DWORD *)v51)++;
        v53 = *v50;
        if (v52)
        {
          *(_DWORD *)v51 = v52;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v51);
          result = WTF::fastFree(v55, v56);
        }
        while (v53 == v51 || (WTF::StringImpl **)((char *)*v50 + 1) == 0)
        {
          v50 += 2;
          if (v50 == v39)
            goto LABEL_136;
          v51 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_123;
          v53 = *v50;
        }
      }
      else
      {
        while ((unint64_t)*v50 + 1 <= 1)
        {
          v50 += 2;
          if (v50 == v39)
          {
LABEL_136:
            v11 = v39;
            goto LABEL_138;
          }
        }
      }
      v11 = v50;
    }
LABEL_138:
    ;
  }
  {
    v57 = 0;
    v11 = 0;
    v58 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_142;
  }
  v57 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v11 = 0;
    v58 = 0;
LABEL_142:
    v59 = &v57[2 * v58];
    goto LABEL_143;
  }
  v58 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v59 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v58);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v58);
    goto LABEL_142;
  }
  if ((_DWORD)v58)
  {
    v75 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v76 = 16 * v58;
      while (1)
      {
        if (v75)
        {
          v77 = (*(_DWORD *)v75)++;
          v78 = *v57;
          if (v77)
          {
            *(_DWORD *)v75 = v77;
            v79 = (uint64_t)v75;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v75);
            result = WTF::fastFree(v81, v82);
            v79 = WebCore::nullName;
          }
        }
        else
        {
          v79 = 0;
          v78 = *v57;
        }
        if (v78 != v75 && (WTF::StringImpl **)((char *)*v57 + 1) != 0)
          break;
        v57 += 2;
        v75 = (WTF::StringImpl **)v79;
        v76 -= 16;
        if (!v76)
        {
          v57 = v59;
          break;
        }
      }
      v11 = v57;
      v57 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v83 = 0;
      v84 = 16 * v58;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v83)
                               + 1) <= 1)
      {
        v83 += 16;
        if (v84 == v83)
        {
          v11 = v59;
          goto LABEL_143;
        }
      }
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v83);
    }
  }
  else
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_143:
  if (v57)
    v57 += 2 * *((unsigned int *)v57 - 1);
  while (v11 != v57)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v11[1] + 5))(v11[1], *(_QWORD *)(v4 + 8) + 184, a2);
    if ((_DWORD)result)
      goto LABEL_187;
    v60 = v11 + 2;
    v11 = v59;
    if (v60 != v59)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_149:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v59)
            goto LABEL_162;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_149;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v59)
          {
LABEL_162:
            v11 = v59;
            goto LABEL_164;
          }
        }
      }
      v11 = v60;
    }
LABEL_164:
    ;
  }
  {
    v67 = 0;
    v11 = 0;
    v68 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_203;
  }
  v67 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v11 = 0;
    v68 = 0;
LABEL_203:
    v69 = &v67[2 * v68];
    goto LABEL_175;
  }
  v68 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v69 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v68);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v68);
    goto LABEL_203;
  }
  if ((_DWORD)v68)
  {
    v70 = 16 * v68;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v67);
      if ((result & 1) == 0 && *v67 != (WTF::StringImpl **)-1)
        break;
      v67 += 2;
      v70 -= 16;
      if (!v70)
      {
        v67 = v69;
        break;
      }
    }
    v11 = v67;
    v67 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_175:
  if (v67)
    v67 += 2 * *((unsigned int *)v67 - 1);
  if (v67 != v11)
  {
    while (1)
    {
      result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v11[1] + 5))(v11[1], *(_QWORD *)(v4 + 8) + 280, a2);
      if ((_DWORD)result)
        break;
      v71 = (char *)(v11 + 2);
      v11 = v69;
      if (v71 != (char *)v69)
      {
        v11 = (WTF::StringImpl ***)v71;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v11);
          if ((result & 1) == 0 && *v11 != (WTF::StringImpl **)-1)
            break;
          v11 += 2;
          if (v11 == v69)
          {
            v11 = v69;
            break;
          }
        }
      }
      if (v11 == v67)
        return result;
    }
LABEL_187:
    v72 = *v11;
    if (*v11)
      ++*(_DWORD *)v72;
    result = *a3;
    *a3 = (uint64_t)v72;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        return WTF::fastFree(v73, v74);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAltGlyphElement,WebCore::SVGTextPositioningElement,WebCore::SVGURIReference>::animatedPropertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  WTF::StringImpl ***v9;
  uint64_t v10;
  WTF::StringImpl ***v11;
  char *v12;
  WTF::StringImpl ***v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  uint64_t v16;
  char *v17;
  WTF::StringImpl ***v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF *v27;
  void *v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl **v31;
  int v32;
  WTF::StringImpl **v33;
  WTF *v35;
  void *v36;
  WTF::StringImpl ***v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  WTF *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl ***v50;
  WTF::StringImpl **v51;
  int v52;
  WTF::StringImpl **v53;
  WTF *v55;
  void *v56;
  WTF::StringImpl ***v57;
  uint64_t v58;
  WTF::StringImpl ***v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  WTF::StringImpl ***v67;
  uint64_t v68;
  WTF::StringImpl ***v69;
  uint64_t v70;
  char *v71;
  WTF::StringImpl **v72;
  WTF *v73;
  void *v74;
  WTF::StringImpl **v75;
  uint64_t v76;
  int v77;
  WTF::StringImpl **v78;
  uint64_t v79;
  WTF *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;

  v4 = result;
  v6 = WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  {
    v7 = 0;
    v11 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_199;
  }
  v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v11 = 0;
    v8 = 0;
LABEL_199:
    v9 = &v7[2 * v8];
    goto LABEL_15;
  }
  v8 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v8);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v8);
    goto LABEL_199;
  }
  if ((_DWORD)v8)
  {
    v10 = 16 * v8;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v7);
      if ((result & 1) == 0 && *v7 != (WTF::StringImpl **)-1)
        break;
      v7 += 2;
      v10 -= 16;
      if (!v10)
      {
        v7 = v9;
        break;
      }
    }
    v11 = v7;
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_15:
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  while (v11 != v7)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v11[1] + 6))(v11[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_187;
    v12 = (char *)(v11 + 2);
    v11 = v9;
    if (v12 != (char *)v9)
    {
      v11 = (WTF::StringImpl ***)v12;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v11);
        if ((result & 1) == 0 && *v11 != (WTF::StringImpl **)-1)
          break;
        v11 += 2;
        if (v11 == v9)
        {
          v11 = v9;
          break;
        }
      }
    }
  }
  {
    v13 = 0;
    v11 = 0;
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_201;
  }
  v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v11 = 0;
    v14 = 0;
LABEL_201:
    v15 = &v13[2 * v14];
    goto LABEL_36;
  }
  v14 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v14);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v14);
    goto LABEL_201;
  }
  if ((_DWORD)v14)
  {
    v16 = 16 * v14;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v13);
      if ((result & 1) == 0 && *v13 != (WTF::StringImpl **)-1)
        break;
      v13 += 2;
      v16 -= 16;
      if (!v16)
      {
        v13 = v15;
        break;
      }
    }
    v11 = v13;
    v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_36:
  if (v13)
    v13 += 2 * *((unsigned int *)v13 - 1);
  while (v11 != v13)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v11[1] + 6))(v11[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_187;
    v17 = (char *)(v11 + 2);
    v11 = v15;
    if (v17 != (char *)v15)
    {
      v11 = (WTF::StringImpl ***)v17;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v11);
        if ((result & 1) == 0 && *v11 != (WTF::StringImpl **)-1)
          break;
        v11 += 2;
        if (v11 == v15)
        {
          v11 = v15;
          break;
        }
      }
    }
  }
  {
    v18 = 0;
    v11 = 0;
    v19 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_205;
  }
  v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v11 = 0;
    v19 = 0;
LABEL_205:
    v20 = &v18[2 * v19];
    goto LABEL_71;
  }
  v19 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v19);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v19);
    goto LABEL_205;
  }
  if ((_DWORD)v19)
  {
    v21 = (WTF::StringImpl **)WebCore::nullName;
    v22 = 16 * v19;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v21)
        {
          v23 = (*(_DWORD *)v21)++;
          v24 = *v18;
          if (v23)
          {
            *(_DWORD *)v21 = v23;
            v25 = (uint64_t)v21;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
            result = WTF::fastFree(v27, v28);
            v25 = WebCore::nullName;
          }
        }
        else
        {
          v25 = 0;
          v24 = *v18;
        }
        if (v24 != v21 && (WTF::StringImpl **)((char *)*v18 + 1) != 0)
          break;
        v18 += 2;
        v21 = (WTF::StringImpl **)v25;
        v22 -= 16;
        if (!v22)
        {
          v18 = v20;
          break;
        }
      }
      v11 = v18;
      v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v29 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v29)
                               + 1) <= 1)
      {
        v29 += 16;
        if (v22 == v29)
        {
          v11 = v20;
          goto LABEL_71;
        }
      }
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v29);
    }
  }
  else
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_71:
  if (v18)
    v18 += 2 * *((unsigned int *)v18 - 1);
  while (v11 != v18)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v11[1] + 6))(v11[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_187;
    v30 = v11 + 2;
    v11 = v20;
    if (v30 != v20)
    {
      v31 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_77:
        v32 = (*(_DWORD *)v31)++;
        v33 = *v30;
        if (v32)
        {
          *(_DWORD *)v31 = v32;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v31);
          result = WTF::fastFree(v35, v36);
        }
        while (v33 == v31 || (WTF::StringImpl **)((char *)*v30 + 1) == 0)
        {
          v30 += 2;
          if (v30 == v20)
            goto LABEL_90;
          v31 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_77;
          v33 = *v30;
        }
      }
      else
      {
        while ((unint64_t)*v30 + 1 <= 1)
        {
          v30 += 2;
          if (v30 == v20)
          {
LABEL_90:
            v11 = v20;
            goto LABEL_92;
          }
        }
      }
      v11 = v30;
    }
LABEL_92:
    ;
  }
  {
    v37 = 0;
    v11 = 0;
    v38 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_207;
  }
  v37 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v11 = 0;
    v38 = 0;
LABEL_207:
    v39 = &v37[2 * v38];
    goto LABEL_117;
  }
  v38 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v39 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v38);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v38);
    goto LABEL_207;
  }
  if ((_DWORD)v38)
  {
    v40 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v41 = 16 * v38;
      while (1)
      {
        if (v40)
        {
          v42 = (*(_DWORD *)v40)++;
          v43 = *v37;
          if (v42)
          {
            *(_DWORD *)v40 = v42;
            v44 = (uint64_t)v40;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
            result = WTF::fastFree(v46, v47);
            v44 = WebCore::nullName;
          }
        }
        else
        {
          v44 = 0;
          v43 = *v37;
        }
        if (v43 != v40 && (WTF::StringImpl **)((char *)*v37 + 1) != 0)
          break;
        v37 += 2;
        v40 = (WTF::StringImpl **)v44;
        v41 -= 16;
        if (!v41)
        {
          v37 = v39;
          break;
        }
      }
      v11 = v37;
      v37 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v48 = 0;
      v49 = 16 * v38;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v48)
                               + 1) <= 1)
      {
        v48 += 16;
        if (v49 == v48)
        {
          v11 = v39;
          goto LABEL_117;
        }
      }
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v48);
    }
  }
  else
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_117:
  if (v37)
    v37 += 2 * *((unsigned int *)v37 - 1);
  while (v11 != v37)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v11[1] + 6))(v11[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_187;
    v50 = v11 + 2;
    v11 = v39;
    if (v50 != v39)
    {
      v51 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_123:
        v52 = (*(_DWORD *)v51)++;
        v53 = *v50;
        if (v52)
        {
          *(_DWORD *)v51 = v52;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v51);
          result = WTF::fastFree(v55, v56);
        }
        while (v53 == v51 || (WTF::StringImpl **)((char *)*v50 + 1) == 0)
        {
          v50 += 2;
          if (v50 == v39)
            goto LABEL_136;
          v51 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_123;
          v53 = *v50;
        }
      }
      else
      {
        while ((unint64_t)*v50 + 1 <= 1)
        {
          v50 += 2;
          if (v50 == v39)
          {
LABEL_136:
            v11 = v39;
            goto LABEL_138;
          }
        }
      }
      v11 = v50;
    }
LABEL_138:
    ;
  }
  {
    v57 = 0;
    v11 = 0;
    v58 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_142;
  }
  v57 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v11 = 0;
    v58 = 0;
LABEL_142:
    v59 = &v57[2 * v58];
    goto LABEL_143;
  }
  v58 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v59 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v58);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v58);
    goto LABEL_142;
  }
  if ((_DWORD)v58)
  {
    v75 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v76 = 16 * v58;
      while (1)
      {
        if (v75)
        {
          v77 = (*(_DWORD *)v75)++;
          v78 = *v57;
          if (v77)
          {
            *(_DWORD *)v75 = v77;
            v79 = (uint64_t)v75;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v75);
            result = WTF::fastFree(v81, v82);
            v79 = WebCore::nullName;
          }
        }
        else
        {
          v79 = 0;
          v78 = *v57;
        }
        if (v78 != v75 && (WTF::StringImpl **)((char *)*v57 + 1) != 0)
          break;
        v57 += 2;
        v75 = (WTF::StringImpl **)v79;
        v76 -= 16;
        if (!v76)
        {
          v57 = v59;
          break;
        }
      }
      v11 = v57;
      v57 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v83 = 0;
      v84 = 16 * v58;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v83)
                               + 1) <= 1)
      {
        v83 += 16;
        if (v84 == v83)
        {
          v11 = v59;
          goto LABEL_143;
        }
      }
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v83);
    }
  }
  else
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_143:
  if (v57)
    v57 += 2 * *((unsigned int *)v57 - 1);
  while (v11 != v57)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v11[1] + 6))(v11[1], *(_QWORD *)(v4 + 8) + 184, a2);
    if ((_DWORD)result)
      goto LABEL_187;
    v60 = v11 + 2;
    v11 = v59;
    if (v60 != v59)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_149:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v59)
            goto LABEL_162;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_149;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v59)
          {
LABEL_162:
            v11 = v59;
            goto LABEL_164;
          }
        }
      }
      v11 = v60;
    }
LABEL_164:
    ;
  }
  {
    v67 = 0;
    v11 = 0;
    v68 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_203;
  }
  v67 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v11 = 0;
    v68 = 0;
LABEL_203:
    v69 = &v67[2 * v68];
    goto LABEL_175;
  }
  v68 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v69 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v68);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v68);
    goto LABEL_203;
  }
  if ((_DWORD)v68)
  {
    v70 = 16 * v68;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v67);
      if ((result & 1) == 0 && *v67 != (WTF::StringImpl **)-1)
        break;
      v67 += 2;
      v70 -= 16;
      if (!v70)
      {
        v67 = v69;
        break;
      }
    }
    v11 = v67;
    v67 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_175:
  if (v67)
    v67 += 2 * *((unsigned int *)v67 - 1);
  if (v67 != v11)
  {
    while (1)
    {
      result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v11[1] + 6))(v11[1], *(_QWORD *)(v4 + 8) + 280, a2);
      if ((_DWORD)result)
        break;
      v71 = (char *)(v11 + 2);
      v11 = v69;
      if (v71 != (char *)v69)
      {
        v11 = (WTF::StringImpl ***)v71;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v11);
          if ((result & 1) == 0 && *v11 != (WTF::StringImpl **)-1)
            break;
          v11 += 2;
          if (v11 == v69)
          {
            v11 = v69;
            break;
          }
        }
      }
      if (v11 == v67)
        return result;
    }
LABEL_187:
    v72 = *v11;
    if (*v11)
      ++*(_DWORD *)v72;
    result = *a3;
    *a3 = (uint64_t)v72;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        return WTF::fastFree(v73, v74);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAltGlyphElement,WebCore::SVGTextPositioningElement,WebCore::SVGURIReference>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  WTF::StringImpl ***v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  uint64_t v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl ***v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;

  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  {
    v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_58;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v7)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v7 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_58:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v6)
      v6 += 2 * *((unsigned int *)v6 - 1);
  }
  else
  {
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_25;
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_57;
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v10)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_57:
      v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != v10)
  {
    result = v10[1];
    if (result)
      goto LABEL_25;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a2);
  if (result)
    goto LABEL_25;
  {
    v12 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_62;
    v13 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v12 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v13)
      goto LABEL_32;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v13 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_62:
      v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_32:
  {
    if (v12)
      v12 += 2 * *((unsigned int *)v12 - 1);
  }
  else
  {
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v12 != v13)
  {
    result = v13[1];
    if (result)
    {
LABEL_25:
      v11 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v11, a3);
    }
  }
  {
    v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
      v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!v15)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    + 16
                                    * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      - 1));
        else
          v15 = 0;
      }
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v14)
      v14 += 2 * *((unsigned int *)v14 - 1);
  }
  else
  {
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v14 != v15)
  {
    result = v15[1];
    if (result)
    {
      v11 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v11, a3);
    }
  }
  {
    v16 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_61;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v16 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_48;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_61:
      result = 0;
  }
  else
  {
    v16 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_48:
  {
    if (v16)
      v16 += 2 * *((unsigned int *)v16 - 1);
  }
  else
  {
    v16 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v16 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v11 = *(_QWORD *)(a1 + 8) + 280;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v11, a3);
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAltGlyphElement,WebCore::SVGTextPositioningElement,WebCore::SVGURIReference>::synchronize@<X0>(WebCore::QualifiedName::QualifiedNameImpl **a1@<X1>, _BYTE *a2@<X8>)
{
  WTF::StringImpl ***v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl **result;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  char v15;

  *a2 = 0;
  a2[8] = 0;
  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  {
    v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_58;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v5)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v5 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_58:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v4)
      v4 += 2 * *((unsigned int *)v4 - 1);
  }
  else
  {
    v4 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v4 != v5)
  {
    result = v5[1];
    if (result)
      goto LABEL_25;
  }
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_57;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_57:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    result = v8[1];
    if (result)
      goto LABEL_25;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a1);
  if (result)
    goto LABEL_25;
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_62;
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v10)
      goto LABEL_32;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_62:
      v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_32:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != v10)
  {
    result = v10[1];
    if (result)
      goto LABEL_25;
  }
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      v12 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a1);
      v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!v12)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          v12 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    + 16
                                    * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      - 1));
        else
          v12 = 0;
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v11)
      v11 += 2 * *((unsigned int *)v11 - 1);
  }
  else
  {
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v11 != v12)
  {
    result = v12[1];
    if (result)
      goto LABEL_25;
  }
  {
    v13 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_61;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v13 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_48;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_61:
      result = 0;
  }
  else
  {
    v13 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_48:
  {
    if (v13)
      v13 += 2 * *((unsigned int *)v13 - 1);
  }
  else
  {
    v13 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v13 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_25:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 8))(&v14);
      if (v15)
      {
        *(_QWORD *)a2 = v14;
        a2[8] = 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAltGlyphElement,WebCore::SVGTextPositioningElement,WebCore::SVGURIReference>::synchronizeAllAttributes@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  WTF::StringImpl ***v6;
  uint64_t v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl *v9;
  char *v10;
  WTF::StringImpl ***v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl *v16;
  char *v17;
  WTF::StringImpl ***v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF *v27;
  void *v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl *v31;
  WTF::StringImpl ***v32;
  WTF::StringImpl **v33;
  int v34;
  WTF::StringImpl **v35;
  WTF *v37;
  void *v38;
  WTF::StringImpl ***v39;
  uint64_t v40;
  WTF::StringImpl ***v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  int v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  WTF *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl ***v52;
  WTF::StringImpl *v53;
  WTF::StringImpl ***v54;
  WTF::StringImpl **v55;
  int v56;
  WTF::StringImpl **v57;
  WTF *v59;
  void *v60;
  WTF::StringImpl ***v61;
  WTF::StringImpl ***v62;
  uint64_t v63;
  WTF::StringImpl ***v64;
  WTF::StringImpl *v65;
  WTF::StringImpl ***v66;
  WTF::StringImpl **v67;
  int v68;
  WTF::StringImpl **v69;
  WTF *v71;
  void *v72;
  WTF::StringImpl ***v73;
  uint64_t v74;
  WTF::StringImpl ***v75;
  uint64_t v76;
  WTF::StringImpl ***v77;
  WTF::StringImpl *v78;
  char *v79;
  WTF::StringImpl **v80;
  uint64_t v81;
  int v82;
  WTF::StringImpl **v83;
  uint64_t v84;
  WTF *v86;
  void *v87;
  uint64_t v88;
  _BYTE v89[24];
  WTF::StringImpl *v90;
  char v91;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  {
    v4 = 0;
    v8 = 0;
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_228;
  }
  v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v8 = 0;
    v5 = 0;
LABEL_228:
    v6 = &v4[2 * v5];
    goto LABEL_13;
  }
  v5 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v5);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                             + 16 * v5);
    goto LABEL_228;
  }
  if ((_DWORD)v5)
  {
    v7 = 16 * v5;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v4);
      if ((result & 1) == 0 && *v4 != (WTF::StringImpl **)-1)
        break;
      v4 += 2;
      v7 -= 16;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
    v8 = v4;
    v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_13:
  if (v4)
    v4 += 2 * *((unsigned int *)v4 - 1);
  while (v8 != v4)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v8[1] + 8))(&v90, v8[1], *(_QWORD *)(v2 + 8));
    if (v91)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v8, (WTF::StringImpl ***)&v90, (uint64_t)v89);
      if (v91)
      {
        result = (uint64_t)v90;
        v90 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v10 = (char *)(v8 + 2);
    v8 = v6;
    if (v10 != (char *)v6)
    {
      v8 = (WTF::StringImpl ***)v10;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v8);
        if ((result & 1) == 0 && *v8 != (WTF::StringImpl **)-1)
          break;
        v8 += 2;
        if (v8 == v6)
        {
          v8 = v6;
          break;
        }
      }
    }
  }
  {
    v11 = 0;
    v15 = 0;
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_226;
  }
  v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v15 = 0;
    v12 = 0;
LABEL_226:
    v13 = &v11[2 * v12];
    goto LABEL_40;
  }
  v12 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v13 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v12);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v12);
    goto LABEL_226;
  }
  if ((_DWORD)v12)
  {
    v14 = 16 * v12;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v11);
      if ((result & 1) == 0 && *v11 != (WTF::StringImpl **)-1)
        break;
      v11 += 2;
      v14 -= 16;
      if (!v14)
      {
        v11 = v13;
        break;
      }
    }
    v15 = v11;
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v15 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_40:
  if (v11)
    v11 += 2 * *((unsigned int *)v11 - 1);
  while (v15 != v11)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v15[1] + 8))(&v90, v15[1], *(_QWORD *)(v2 + 8));
    if (v91)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v90, (uint64_t)v89);
      if (v91)
      {
        result = (uint64_t)v90;
        v90 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v17 = (char *)(v15 + 2);
    v15 = v13;
    if (v17 != (char *)v13)
    {
      v15 = (WTF::StringImpl ***)v17;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v15);
        if ((result & 1) == 0 && *v15 != (WTF::StringImpl **)-1)
          break;
        v15 += 2;
        if (v15 == v13)
        {
          v15 = v13;
          break;
        }
      }
    }
  }
  {
    v18 = 0;
    v30 = 0;
    v19 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_232;
  }
  v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v30 = 0;
    v19 = 0;
LABEL_232:
    v20 = &v18[2 * v19];
    goto LABEL_79;
  }
  v19 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v19);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v30 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v19);
    goto LABEL_232;
  }
  if ((_DWORD)v19)
  {
    v21 = (WTF::StringImpl **)WebCore::nullName;
    v22 = 16 * v19;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v21)
        {
          v23 = (*(_DWORD *)v21)++;
          v24 = *v18;
          if (v23)
          {
            *(_DWORD *)v21 = v23;
            v25 = (uint64_t)v21;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
            result = WTF::fastFree(v27, v28);
            v25 = WebCore::nullName;
          }
        }
        else
        {
          v25 = 0;
          v24 = *v18;
        }
        if (v24 != v21 && (WTF::StringImpl **)((char *)*v18 + 1) != 0)
          break;
        v18 += 2;
        v21 = (WTF::StringImpl **)v25;
        v22 -= 16;
        if (!v22)
        {
          v18 = v20;
          break;
        }
      }
      v30 = v18;
      v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v29 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v29)
                               + 1) <= 1)
      {
        v29 += 16;
        if (v22 == v29)
        {
          v30 = v20;
          goto LABEL_79;
        }
      }
      v30 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v29);
    }
  }
  else
  {
    v30 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_79:
  if (v18)
    v18 += 2 * *((unsigned int *)v18 - 1);
  while (v30 != v18)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v30[1] + 8))(&v90, v30[1], *(_QWORD *)(v2 + 8));
    if (v91)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v30, (WTF::StringImpl ***)&v90, (uint64_t)v89);
      if (v91)
      {
        result = (uint64_t)v90;
        v90 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v31);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v32 = v30 + 2;
    v30 = v20;
    if (v32 != v20)
    {
      v33 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_89:
        v34 = (*(_DWORD *)v33)++;
        v35 = *v32;
        if (v34)
        {
          *(_DWORD *)v33 = v34;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v33);
          result = WTF::fastFree(v37, v38);
        }
        while (v35 == v33 || (WTF::StringImpl **)((char *)*v32 + 1) == 0)
        {
          v32 += 2;
          if (v32 == v20)
            goto LABEL_102;
          v33 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_89;
          v35 = *v32;
        }
      }
      else
      {
        while ((unint64_t)*v32 + 1 <= 1)
        {
          v32 += 2;
          if (v32 == v20)
          {
LABEL_102:
            v30 = v20;
            goto LABEL_104;
          }
        }
      }
      v30 = v32;
    }
LABEL_104:
    ;
  }
  {
    v39 = 0;
    v52 = 0;
    v40 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_234;
  }
  v39 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v52 = 0;
    v40 = 0;
LABEL_234:
    v41 = &v39[2 * v40];
    goto LABEL_130;
  }
  v40 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v41 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v40);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v52 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v40);
    goto LABEL_234;
  }
  if ((_DWORD)v40)
  {
    v42 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v43 = 16 * v40;
      while (1)
      {
        if (v42)
        {
          v44 = (*(_DWORD *)v42)++;
          v45 = *v39;
          if (v44)
          {
            *(_DWORD *)v42 = v44;
            v46 = (uint64_t)v42;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v42);
            result = WTF::fastFree(v48, v49);
            v46 = WebCore::nullName;
          }
        }
        else
        {
          v46 = 0;
          v45 = *v39;
        }
        if (v45 != v42 && (WTF::StringImpl **)((char *)*v39 + 1) != 0)
          break;
        v39 += 2;
        v42 = (WTF::StringImpl **)v46;
        v43 -= 16;
        if (!v43)
        {
          v39 = v41;
          break;
        }
      }
      v52 = v39;
      v39 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v50 = 0;
      v51 = 16 * v40;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v50)
                               + 1) <= 1)
      {
        v50 += 16;
        if (v51 == v50)
        {
          v52 = v41;
          goto LABEL_130;
        }
      }
      v52 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v50);
    }
  }
  else
  {
    v52 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_130:
  if (v39)
    v39 += 2 * *((unsigned int *)v39 - 1);
  while (v52 != v39)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v52[1] + 8))(&v90, v52[1], *(_QWORD *)(v2 + 8));
    if (v91)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v52, (WTF::StringImpl ***)&v90, (uint64_t)v89);
      if (v91)
      {
        result = (uint64_t)v90;
        v90 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v53);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v54 = v52 + 2;
    v52 = v41;
    if (v54 != v41)
    {
      v55 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_140:
        v56 = (*(_DWORD *)v55)++;
        v57 = *v54;
        if (v56)
        {
          *(_DWORD *)v55 = v56;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v55);
          result = WTF::fastFree(v59, v60);
        }
        while (v57 == v55 || (WTF::StringImpl **)((char *)*v54 + 1) == 0)
        {
          v54 += 2;
          if (v54 == v41)
            goto LABEL_153;
          v55 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_140;
          v57 = *v54;
        }
      }
      else
      {
        while ((unint64_t)*v54 + 1 <= 1)
        {
          v54 += 2;
          if (v54 == v41)
          {
LABEL_153:
            v52 = v41;
            goto LABEL_155;
          }
        }
      }
      v52 = v54;
    }
LABEL_155:
    ;
  }
  {
    v61 = 0;
    v62 = 0;
    v63 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_161;
  }
  v61 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v62 = 0;
    v63 = 0;
LABEL_161:
    v64 = &v61[2 * v63];
    goto LABEL_162;
  }
  v63 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v64 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v63);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v62 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v63);
    goto LABEL_161;
  }
  if ((_DWORD)v63)
  {
    v80 = (WTF::StringImpl **)WebCore::nullName;
    v81 = 16 * v63;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v80)
        {
          v82 = (*(_DWORD *)v80)++;
          v83 = *v61;
          if (v82)
          {
            *(_DWORD *)v80 = v82;
            v84 = (uint64_t)v80;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v80);
            result = WTF::fastFree(v86, v87);
            v84 = WebCore::nullName;
          }
        }
        else
        {
          v84 = 0;
          v83 = *v61;
        }
        if (v83 != v80 && (WTF::StringImpl **)((char *)*v61 + 1) != 0)
          break;
        v61 += 2;
        v80 = (WTF::StringImpl **)v84;
        v81 -= 16;
        if (!v81)
        {
          v61 = v64;
          break;
        }
      }
      v62 = v61;
      v61 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v88 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v88)
                               + 1) <= 1)
      {
        v88 += 16;
        if (v81 == v88)
        {
          v62 = v64;
          goto LABEL_162;
        }
      }
      v62 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v88);
    }
  }
  else
  {
    v62 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_162:
  if (v61)
    v61 += 2 * *((unsigned int *)v61 - 1);
  while (v62 != v61)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v62[1]
                       + 8))(&v90, v62[1], *(_QWORD *)(v2 + 8) + 184);
    if (v91)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v62, (WTF::StringImpl ***)&v90, (uint64_t)v89);
      if (v91)
      {
        result = (uint64_t)v90;
        v90 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v65);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v66 = v62 + 2;
    v62 = v64;
    if (v66 != v64)
    {
      v67 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_172:
        v68 = (*(_DWORD *)v67)++;
        v69 = *v66;
        if (v68)
        {
          *(_DWORD *)v67 = v68;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v67);
          result = WTF::fastFree(v71, v72);
        }
        while (v69 == v67 || (WTF::StringImpl **)((char *)*v66 + 1) == 0)
        {
          v66 += 2;
          if (v66 == v64)
            goto LABEL_185;
          v67 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_172;
          v69 = *v66;
        }
      }
      else
      {
        while ((unint64_t)*v66 + 1 <= 1)
        {
          v66 += 2;
          if (v66 == v64)
          {
LABEL_185:
            v62 = v64;
            goto LABEL_187;
          }
        }
      }
      v62 = v66;
    }
LABEL_187:
    ;
  }
  {
    v73 = 0;
    v77 = 0;
    v74 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_230;
  }
  v73 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v77 = 0;
    v74 = 0;
LABEL_230:
    v75 = &v73[2 * v74];
    goto LABEL_200;
  }
  v74 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v75 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v74);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v77 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v74);
    goto LABEL_230;
  }
  if ((_DWORD)v74)
  {
    v76 = 16 * v74;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v73);
      if ((result & 1) == 0 && *v73 != (WTF::StringImpl **)-1)
        break;
      v73 += 2;
      v76 -= 16;
      if (!v76)
      {
        v73 = v75;
        break;
      }
    }
    v77 = v73;
    v73 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v77 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_200:
  if (v73)
    v73 += 2 * *((unsigned int *)v73 - 1);
  while (v77 != v73)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v77[1]
                       + 8))(&v90, v77[1], *(_QWORD *)(v2 + 8) + 280);
    if (v91)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v77, (WTF::StringImpl ***)&v90, (uint64_t)v89);
      if (v91)
      {
        result = (uint64_t)v90;
        v90 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v78);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v79 = (char *)(v77 + 2);
    v77 = v75;
    if (v79 != (char *)v75)
    {
      v77 = (WTF::StringImpl ***)v79;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v77);
        if ((result & 1) == 0 && *v77 != (WTF::StringImpl **)-1)
          break;
        v77 += 2;
        if (v77 == v75)
        {
          v77 = v75;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAltGlyphElement,WebCore::SVGTextPositioningElement,WebCore::SVGURIReference>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  WTF::StringImpl ***v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl ***v14;

  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  {
    v3 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_57;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v3 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v4)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_57:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v3)
      v3 += 2 * *((unsigned int *)v3 - 1);
  }
  else
  {
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  {
    v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_56;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v7)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v7 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_56:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v6)
      v6 += 2 * *((unsigned int *)v6 - 1);
  }
  else
  {
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v6 != v7)
  {
    Accessor = v7[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_61;
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v10)
      goto LABEL_31;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_61:
      v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_31:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != v10)
  {
    Accessor = v10[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      v12 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
      v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!v12)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          v12 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    + 16
                                    * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      - 1));
        else
          v12 = 0;
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v11)
      v11 += 2 * *((unsigned int *)v11 - 1);
  }
  else
  {
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v11 != v12)
  {
    Accessor = v12[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  {
    v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_60;
    v14 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v14)
      goto LABEL_47;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v14 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_60:
      v14 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_47:
  {
    if (v13)
      v13 += 2 * *((unsigned int *)v13 - 1);
  }
  else
  {
    v13 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v13 != v14)
  {
    Accessor = v14[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAltGlyphElement,WebCore::SVGTextPositioningElement,WebCore::SVGURIReference>::isAnimatedStylePropertyAttribute()
{
  _BYTE v1[24];
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE84CF0 & 1) == 0)
  {
    v2 = WebCore::SVGNames::cxAttr;
    v3 = WebCore::SVGNames::cyAttr;
    v4 = WebCore::SVGNames::rAttr;
    v5 = WebCore::SVGNames::rxAttr;
    v6 = WebCore::SVGNames::ryAttr;
    v7 = WebCore::SVGNames::heightAttr;
    v8 = WebCore::SVGNames::widthAttr;
    v9 = WebCore::SVGNames::xAttr;
    v10[0] = WebCore::SVGNames::yAttr;
    qword_1ECE84CE8 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CE8, &v2, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CE8, &v3, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CE8, &v4, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CE8, &v5, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CE8, &v6, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CE8, &v7, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CE8, &v8, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CE8, &v9, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84CE8, v10, (uint64_t)v1);
    byte_1ECE84CF0 = 1;
  }
  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  return 0;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAltGlyphElement,WebCore::SVGTextPositioningElement,WebCore::SVGURIReference>::createAnimator@<X0>(WebCore::QualifiedName::QualifiedNameImpl **a1@<X1>, _QWORD *a2@<X8>)
{
  WTF::StringImpl ***v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl **result;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl **v13;
  uint64_t v14;

  *a2 = 0;
  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  {
    v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_57;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v5)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v5 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_57:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v4)
      v4 += 2 * *((unsigned int *)v4 - 1);
  }
  else
  {
    v4 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v4 != v5)
  {
    result = v5[1];
    if (result)
      goto LABEL_25;
  }
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_56;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_56:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    result = v8[1];
    if (result)
      goto LABEL_25;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a1);
  if (result)
    goto LABEL_25;
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_61;
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v10)
      goto LABEL_32;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_61:
      v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_32:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != v10)
  {
    result = v10[1];
    if (result)
      goto LABEL_25;
  }
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      v12 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a1);
      v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!v12)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          v12 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    + 16
                                    * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      - 1));
        else
          v12 = 0;
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v11)
      v11 += 2 * *((unsigned int *)v11 - 1);
  }
  else
  {
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v11 != v12)
  {
    result = v12[1];
    if (result)
      goto LABEL_25;
  }
  {
    v13 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_60;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v13 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_48;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_60:
      result = 0;
  }
  else
  {
    v13 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_48:
  {
    if (v13)
      v13 += 2 * *((unsigned int *)v13 - 1);
  }
  else
  {
    v13 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v13 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_25:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 9))(&v14);
      *a2 = v14;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAltGlyphElement,WebCore::SVGTextPositioningElement,WebCore::SVGURIReference>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  WTF::StringImpl ***v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  uint64_t v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl ***v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;

  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  if ((byte_1ECE84CE0 & 1) == 0)
    byte_1ECE84CE0 = 1;
  {
    v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_58;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v7)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v7 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_58:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v6)
      v6 += 2 * *((unsigned int *)v6 - 1);
  }
  else
  {
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextPositioningElement,WebCore::SVGTextContentElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_25;
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_57;
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v10)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_57:
      v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTextContentElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != v10)
  {
    result = v10[1];
    if (result)
      goto LABEL_25;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a2);
  if (result)
    goto LABEL_25;
  {
    v12 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_62;
    v13 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v12 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v13)
      goto LABEL_32;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v13 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_62:
      v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_32:
  {
    if (v12)
      v12 += 2 * *((unsigned int *)v12 - 1);
  }
  else
  {
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v12 != v13)
  {
    result = v13[1];
    if (result)
    {
LABEL_25:
      v11 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v11, a3);
    }
  }
  {
    v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
      v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!v15)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    + 16
                                    * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      - 1));
        else
          v15 = 0;
      }
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v14)
      v14 += 2 * *((unsigned int *)v14 - 1);
  }
  else
  {
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v14 != v15)
  {
    result = v15[1];
    if (result)
    {
      v11 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v11, a3);
    }
  }
  {
    v16 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_61;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v16 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_48;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_61:
      result = 0;
  }
  else
  {
    v16 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_48:
  {
    if (v16)
      v16 += 2 * *((unsigned int *)v16 - 1);
  }
  else
  {
    v16 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v16 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v11 = *(_QWORD *)(a1 + 8) + 280;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v11, a3);
    }
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextPositioningElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v2;
  unsigned int v4;
  WebCore::QualifiedName::QualifiedNameImpl *v5;
  int v6;
  WTF::StringImpl **v7;
  int v8;
  int v9;
  WTF::StringImpl ***v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WebCore::QualifiedName::QualifiedNameImpl *v15;
  WTF *v16;
  void *v17;
  unsigned int v18;
  WTF::StringImpl **v19;
  WebCore::QualifiedName::QualifiedNameImpl *v20;
  int v21;
  uint64_t v23;
  __int128 v24;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    v23 = *MEMORY[0x1E0CBF2F8];
    v24 = *(_OWORD *)((char *)v5 + 24);
    v6 = WTF::computeHash<WebCore::QualifiedNameComponents>(&v23);
  }
  else
  {
    v6 = *((_DWORD *)v5 + 1);
    if (!v6)
    {
      v6 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v5 + 1) = v6;
    }
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v8 = 0;
    while (1)
    {
      v9 = v6 & v4;
      v10 = (WTF::StringImpl ***)(v2 + 16 * (v6 & v4));
      if (v7)
      {
        v11 = (*(_DWORD *)v7)++;
        v12 = *v10;
        if (v11)
        {
          *(_DWORD *)v7 = v11;
          v13 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          WTF::fastFree(v16, v17);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v10;
      }
      if (v12 == v7)
        break;
      v14 = *v10;
      if (*v10 != (WTF::StringImpl **)-1)
      {
        v15 = *a2;
        if (v14 == (WTF::StringImpl **)*a2
          || v14[3] == *((WTF::StringImpl **)v15 + 3) && v14[4] == *((WTF::StringImpl **)v15 + 4))
        {
          return v10;
        }
      }
      v6 = ++v8 + v9;
      v7 = (WTF::StringImpl **)v13;
    }
    return 0;
  }
  v18 = v6 & v4;
  v10 = (WTF::StringImpl ***)(v2 + 16 * (v6 & v4));
  v19 = *v10;
  if (!*v10)
    return 0;
  v20 = *a2;
  v21 = 1;
  while (v19 == (WTF::StringImpl **)-1
       || v19 != (WTF::StringImpl **)v20
       && (v19[3] != *((WTF::StringImpl **)v20 + 3) || v19[4] != *((WTF::StringImpl **)v20 + 4)))
  {
    v18 = (v18 + v21) & v4;
    v10 = (WTF::StringImpl ***)(v2 + 16 * v18);
    v19 = *v10;
    ++v21;
    if (!*v10)
      return 0;
  }
  return v10;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTextContentElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v2;
  unsigned int v4;
  WebCore::QualifiedName::QualifiedNameImpl *v5;
  int v6;
  WTF::StringImpl **v7;
  int v8;
  int v9;
  WTF::StringImpl ***v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  unsigned int v15;
  WTF::StringImpl ***v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int i;
  WTF *v20;
  void *v21;
  WTF::StringImpl **v22;
  WebCore::QualifiedName::QualifiedNameImpl *v23;
  uint64_t v24;
  __int128 v25;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = *a2;
    if (*((_QWORD *)*a2 + 2))
    {
      v24 = *MEMORY[0x1E0CBF2F8];
      v25 = *(_OWORD *)((char *)v5 + 24);
      v6 = WTF::computeHash<WebCore::QualifiedNameComponents>(&v24);
    }
    else
    {
      v6 = *((_DWORD *)v5 + 1);
      if (!v6)
      {
        v6 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
        *((_DWORD *)v5 + 1) = v6;
      }
    }
    v7 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v8 = 0;
      while (1)
      {
        v9 = v6 & v4;
        v10 = (WTF::StringImpl ***)(v2 + 16 * (v6 & v4));
        if (v7)
        {
          v11 = (*(_DWORD *)v7)++;
          v12 = *v10;
          if (v11)
          {
            *(_DWORD *)v7 = v11;
            v13 = (uint64_t)v7;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
            WTF::fastFree(v20, v21);
            v13 = WebCore::nullName;
          }
        }
        else
        {
          v13 = 0;
          v12 = *v10;
        }
        if (v12 == v7)
          break;
        v22 = *v10;
        if (*v10 != (WTF::StringImpl **)-1)
        {
          v23 = *a2;
          if (v22 == (WTF::StringImpl **)*a2
            || v22[3] == *((WTF::StringImpl **)v23 + 3) && v22[4] == *((WTF::StringImpl **)v23 + 4))
          {
            return v10;
          }
        }
        v6 = ++v8 + v9;
        v7 = (WTF::StringImpl **)v13;
      }
    }
    else
    {
      v15 = v6 & v4;
      v16 = (WTF::StringImpl ***)(v2 + 16 * (v6 & v4));
      v17 = *v16;
      if (*v16)
      {
        v18 = *a2;
        for (i = 1; ; ++i)
        {
          if (v17 != (WTF::StringImpl **)-1)
          {
            if (v17 == (WTF::StringImpl **)v18)
              return v16;
            if (v17[3] == *((WTF::StringImpl **)v18 + 3))
            {
              v10 = v16;
              if (v17[4] == *((WTF::StringImpl **)v18 + 4))
                return v10;
            }
          }
          v10 = 0;
          v15 = (v15 + i) & v4;
          v16 = (WTF::StringImpl ***)(v2 + 16 * v15);
          v17 = *v16;
          if (!*v16)
            return v10;
        }
      }
    }
  }
  return 0;
}

void WebCore::SVGAltGlyphItemElement::~SVGAltGlyphItemElement(WebCore::SVGAltGlyphItemElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGElement::~SVGElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGAltGlyphItemElement::rendererIsNeeded(WebCore::SVGAltGlyphItemElement *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

void `non-virtual thunk to'WebCore::SVGAltGlyphItemElement::~SVGAltGlyphItemElement(WebCore::SVGAltGlyphItemElement *this, void *a2)
{
  WebCore::SVGElement::~SVGElement((WebCore::SVGAltGlyphItemElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGElement::~SVGElement((WebCore::SVGAltGlyphItemElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGURIReference::~SVGURIReference(WebCore::SVGURIReference *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3452C78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3452C78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  JUMPOUT(0x19AEA7644);
}

void WebCore::SVGTextPositioningElement::~SVGTextPositioningElement(WebCore::SVGTextPositioningElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;

  *(_QWORD *)this = off_1E34788A0;
  *((_QWORD *)this + 14) = &unk_1E3478E10;
  *((_QWORD *)this + 22) = &unk_1E3478E48;
  v3 = (_DWORD *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  *(_QWORD *)this = off_1E3478EA0;
  *((_QWORD *)this + 14) = &unk_1E3479410;
  *((_QWORD *)this + 22) = &unk_1E3479448;
  v8 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGTextPositioningElement::~SVGTextPositioningElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGAnimationElement::~SVGAnimationElement(WebCore::SVGAnimationElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)this = off_1E3455F60;
  *((_QWORD *)this + 14) = &unk_1E3456520;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF *)*((_QWORD *)this + 57);
  if (v5)
  {
    *((_QWORD *)this + 57) = 0;
    *((_DWORD *)this + 116) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 55);
  if (v6)
  {
    *((_QWORD *)this + 55) = 0;
    *((_DWORD *)this + 112) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF *)*((_QWORD *)this + 53);
  if (v7)
  {
    *((_QWORD *)this + 53) = 0;
    *((_DWORD *)this + 108) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 51);
  if (v8)
  {
    *((_QWORD *)this + 51) = 0;
    *((_DWORD *)this + 104) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 101);
  if ((_DWORD)v9)
  {
    v14 = (WTF::StringImpl **)*((_QWORD *)this + 49);
    v15 = 8 * v9;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  v10 = (WTF *)*((_QWORD *)this + 49);
  if (v10)
  {
    *((_QWORD *)this + 49) = 0;
    *((_DWORD *)this + 100) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v17 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v17)
      {
        v20 = v11;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v17));
        v11 = v20;
      }
      v18 = *(WTF **)(v11 + 16);
      if (v18)
      {
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        v19 = v11;
        WTF::fastFree(v18, a2);
        v11 = v19;
      }
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  WebCore::SVGSMILElement::~SVGSMILElement(this, a2);
}

void WebCore::RenderSVGTSpan::~RenderSVGTSpan(WebCore::RenderLayerModelObject *this, void *a2)
{
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

void WebCore::RenderSVGTSpan::~RenderSVGTSpan(WebCore::RenderSVGTSpan *this, void *a2)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

const char *WebCore::RenderSVGTSpan::renderName(WebCore::RenderSVGTSpan *this)
{
  return "RenderSVGTSpan";
}

double WebCore::SVGAnimateMotionElement::create@<D0>(WebCore::SVGAnimateMotionElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, WebCore::Document *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  double result;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v7 = bmalloc::api::isoAllocate();
  *(_QWORD *)v7 = off_1E3455F60;
  *(_QWORD *)(v7 + 112) = &unk_1E3456520;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E3455B60;
  v8[1] = v7;
  v28 = v8;
  WebCore::SVGElement::SVGElement(v7, (_DWORD **)this, (uint64_t)a2, (uint64_t *)&v28, 0);
  *(_QWORD *)v7 = off_1E347A958;
  *(_QWORD *)(v7 + 112) = &unk_1E347AEE0;
  v9 = WebCore::anyName;
  if (WebCore::anyName)
    ++*(_DWORD *)WebCore::anyName;
  *(_QWORD *)(v7 + 176) = v9;
  *(_QWORD *)(v7 + 184) = 0;
  *(_QWORD *)(v7 + 192) = 0;
  *(_QWORD *)(v7 + 200) = 0;
  *(_WORD *)(v7 + 208) = 0;
  *(_BYTE *)(v7 + 210) = 1;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_OWORD *)(v7 + 232) = 0u;
  *(_OWORD *)(v7 + 248) = 0u;
  *(_QWORD *)(v7 + 264) = 0x7FEFFFFFFFFFFFFFLL;
  *(int64x2_t *)(v7 + 272) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_QWORD *)(v7 + 288) = 0;
  *(_DWORD *)(v7 + 296) = 0;
  *(_QWORD *)(v7 + 304) = 0;
  *(_QWORD *)(v7 + 312) = 0;
  *(_DWORD *)(v7 + 320) = 0;
  *(_QWORD *)(v7 + 328) = 0xBFF0000000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v7 + 336) = _Q0;
  *(_OWORD *)(v7 + 352) = _Q0;
  WebCore::SVGSMILElement::resolveFirstInterval((WebCore::SVGSMILElement *)v7);
  if (v28)
    (*(void (**)(_QWORD *))(*v28 + 8))(v28);
  *(_QWORD *)v7 = off_1E3455F60;
  *(_QWORD *)(v7 + 112) = &unk_1E3456520;
  if ((*(_QWORD *)(v7 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v15 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 8) = v7;
    *(_BYTE *)(v15 + 32) = 0;
    v17 = *(_QWORD *)(v7 + 16);
    *(_QWORD *)(v7 + 16) = v17 & 0xFFFF000000000000 | v15;
    v18 = v17 & 0xFFFFFFFFFFFFLL;
    if ((v17 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v19 = __ldaxr((unsigned int *)v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unsigned int *)v18));
      if (!v20)
      {
        atomic_store(1u, (unsigned int *)v18);
        v24 = *(unsigned int *)(v18 + 28);
        if ((_DWORD)v24)
        {
          v27 = v18;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v24));
          v18 = v27;
        }
        v25 = *(WTF **)(v18 + 16);
        if (v25)
        {
          *(_QWORD *)(v18 + 16) = 0;
          *(_DWORD *)(v18 + 24) = 0;
          v26 = v18;
          WTF::fastFree(v25, v16);
          v18 = v26;
        }
        WTF::fastFree((WTF *)v18, v16);
      }
    }
  }
  v21 = (unsigned int *)(*(_QWORD *)(v7 + 16) & 0xFFFFFFFFFFFFLL);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  *(_QWORD *)(v7 + 368) = v21;
  *(_QWORD *)(v7 + 376) = 0;
  *(_WORD *)(v7 + 384) = 512;
  result = 0.0;
  *(_OWORD *)(v7 + 392) = 0u;
  *(_OWORD *)(v7 + 408) = 0u;
  *(_OWORD *)(v7 + 424) = 0u;
  *(_OWORD *)(v7 + 440) = 0u;
  *(_OWORD *)(v7 + 456) = 0u;
  *(_OWORD *)(v7 + 472) = 0u;
  *(_BYTE *)(v7 + 489) = 0;
  *(_QWORD *)v7 = off_1E3453450;
  *(_QWORD *)(v7 + 112) = &unk_1E3453A10;
  *(_BYTE *)(v7 + 516) = 0;
  *(_DWORD *)(v7 + 584) = 0;
  *(_DWORD *)(v7 + 656) = 0;
  *(_BYTE *)(v7 + 508) = 0;
  *(_QWORD *)(v7 + 500) = 0;
  *(_QWORD *)(v7 + 492) = 0;
  *(_BYTE *)(v7 + 488) = 2;
  *a4 = v7;
  return result;
}

BOOL WebCore::SVGAnimateMotionElement::hasValidAttributeType(WebCore::SVGAnimateMotionElement *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _BOOL8 v5;

  v1 = *((_QWORD *)this + 23);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  *(_DWORD *)(v2 + 24) += 2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 1184))(v2))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
    v5 = v4 == *(_QWORD *)(WebCore::SVGNames::gTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::defsTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::useTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::imageTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::switchTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::pathTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::rectTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::circleTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::ellipseTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::lineTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::polylineTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::polygonTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::textTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::maskTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::aTag + 24)
      || v4 == *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24);
  }
  else
  {
    v5 = 0;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v5;
}

uint64_t WebCore::SVGAnimateMotionElement::hasValidAttributeName(WebCore::SVGAnimateMotionElement *this)
{
  return 1;
}

const WTF::AtomString *WebCore::SVGAnimateMotionElement::attributeChanged(unsigned int *a1, _QWORD *a2, WTF::AtomString *a3, const WTF::AtomString *a4, int a5)
{
  uint64_t v10;
  WTF *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v15;
  _BYTE v16[8];
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*a2 == WebCore::SVGNames::pathAttr)
  {
    v10 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
    {
      v11 = *(WTF **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v11 = 0;
      v12 = 0x100000000;
    }
    WebCore::buildPathFromString(v11, v12, (uint64_t)v16);
    v13 = a1[146];
    if ((_DWORD)v13 == -1)
    {
      if (v18 == -1)
      {
LABEL_11:
        WebCore::SVGAnimateMotionElement::updateAnimationPath((WebCore::SVGAnimateMotionElement *)a1);
        return WebCore::SVGAnimationElement::attributeChanged((uint64_t)a1, a2, a3, a4, a5);
      }
    }
    else if (v18 == -1)
    {
      ((void (*)(unsigned int **, unsigned int *))off_1E34557F0[v13])(&v15, a1 + 132);
      a1[146] = -1;
      goto LABEL_9;
    }
    v15 = a1 + 132;
    ((void (*)(unsigned int **))off_1E3455808[v18])(&v15);
LABEL_9:
    if (v18 != -1)
      ((void (*)(unsigned int **, uint64_t *))off_1E34557F0[v18])(&v15, &v17);
    goto LABEL_11;
  }
  return WebCore::SVGAnimationElement::attributeChanged((uint64_t)a1, a2, a3, a4, a5);
}

uint64_t WebCore::SVGAnimateMotionElement::updateAnimationPath(WebCore::SVGAnimateMotionElement *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  const WebCore::SVGElement *v5;
  uint64_t v6;
  WTF::String *v7;
  __n128 v8;
  double v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WebCore::Node *v21;
  uint64_t *v22;
  _OWORD v23[4];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)((char *)this + 600);
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v3 = *((unsigned int *)this + 164);
  if ((_DWORD)v3)
  {
    if ((_DWORD)v3 == -1)
    {
      LODWORD(v3) = 0;
      *((_DWORD *)this + 164) = 0;
    }
    else
    {
      result = ((uint64_t (*)(uint64_t **, uint64_t *))off_1E34557F0[v3])(&v22, v2);
      LODWORD(v3) = v24;
      *((_DWORD *)this + 164) = 0;
      if ((_DWORD)v3 == -1)
        goto LABEL_6;
    }
  }
  result = ((uint64_t (*)(uint64_t **, char *))off_1E34557F0[v3])(&v22, (char *)v23 + 8);
LABEL_6:
  v11 = *((_QWORD *)this + 10);
  if (v11)
  {
    while ((*(_WORD *)(v11 + 28) & 0x20) == 0
         || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::mpathTag + 24))
    {
      v11 = *(_QWORD *)(v11 + 56);
      if (!v11)
        goto LABEL_10;
    }
    while (1)
    {
      WebCore::SVGMPathElement::pathElement((WebCore::SVGMPathElement *)v11, &v21, v8.n128_f64[0], v9, v10);
      result = (uint64_t)v21;
      if (v21)
        break;
      v11 = *(_QWORD *)(v11 + 56);
      if (!v11)
        goto LABEL_10;
      while ((*(_WORD *)(v11 + 28) & 0x20) == 0
           || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::mpathTag + 24))
      {
        v11 = *(_QWORD *)(v11 + 56);
        if (!v11)
          goto LABEL_10;
      }
    }
    WebCore::pathFromGraphicsElement(v21, v5, (uint64_t)v23);
    v16 = *((unsigned int *)this + 164);
    if ((_DWORD)v16 == -1)
    {
      if ((_DWORD)v24 == -1)
      {
LABEL_37:
        result = (uint64_t)v21;
        v21 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        goto LABEL_42;
      }
    }
    else if ((_DWORD)v24 == -1)
    {
      ((void (*)(uint64_t **, uint64_t *))off_1E34557F0[v16])(&v22, v2);
      *((_DWORD *)this + 164) = -1;
      goto LABEL_35;
    }
    v22 = v2;
    ((void (*)(uint64_t **, uint64_t *, char *))off_1E3455808[v24])(&v22, v2, (char *)v23 + 8);
LABEL_35:
    if ((_DWORD)v24 != -1)
      ((void (*)(uint64_t **, char *))off_1E34557F0[v24])(&v22, (char *)v23 + 8);
    goto LABEL_37;
  }
LABEL_10:
  v12 = *((_QWORD *)this + 13);
  if (!v12)
    goto LABEL_42;
  v13 = *(_DWORD *)(v12 + 4);
  if ((v13 & 1) != 0)
  {
    v14 = *(uint64_t **)(v12 + 40);
    LODWORD(v15) = *(_DWORD *)(v12 + 52);
    if (!(_DWORD)v15)
      goto LABEL_42;
  }
  else
  {
    v14 = (uint64_t *)(v12 + 32);
    LODWORD(v15) = v13 >> 5;
    if (!(_DWORD)v15)
      goto LABEL_42;
  }
  v15 = v15;
  while (1)
  {
    v17 = *v14;
    if (*v14 == WebCore::SVGNames::pathAttr
      || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::SVGNames::pathAttr + 24)
      && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::SVGNames::pathAttr + 32))
    {
      break;
    }
    v14 += 2;
    if (!--v15)
      goto LABEL_42;
  }
  v18 = *((unsigned int *)this + 164);
  v19 = *((unsigned int *)this + 146);
  if ((_DWORD)v18 == -1)
  {
    if ((_DWORD)v19 == -1)
      goto LABEL_42;
  }
  else if ((_DWORD)v19 == -1)
  {
    result = ((uint64_t (*)(_OWORD *, uint64_t *))off_1E34557F0[v18])(v23, v2);
    *((_DWORD *)this + 164) = -1;
    goto LABEL_48;
  }
  *(_QWORD *)&v23[0] = v2;
  result = ((uint64_t (*)(_OWORD *, uint64_t *, char *))off_1E3455820[v19])(v23, v2, (char *)this + 528);
LABEL_42:
  v20 = *((_DWORD *)this + 164);
  if (v20 == 2)
  {
    result = *v2;
    if (*v2)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
      if ((result & 1) != 0)
        return WebCore::SVGAnimationElement::updateAnimationMode(this, v8, (uint64_t)v5, v6, v7);
    }
  }
  else if (!v20)
  {
    return WebCore::SVGAnimationElement::updateAnimationMode(this, v8, (uint64_t)v5, v6, v7);
  }
LABEL_48:
  *((_BYTE *)this + 489) = 6;
  return result;
}

const WTF::AtomString *WebCore::SVGAnimationElement::attributeChanged(uint64_t a1, void *a2, WTF::AtomString *a3, const WTF::AtomString *a4, int a5)
{
  uint64_t v5;
  unsigned int v11;
  _QWORD *v12;
  float64_t v13;
  __n128 v14;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v23;
  unsigned int v24;
  int v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  WTF *v38;
  unsigned __int16 *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v44;
  float v45;
  BOOL v46;
  uint64_t v47;
  float v48;
  BOOL v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  unsigned int v57;
  BOOL v59;
  unsigned __int16 *v60;
  unsigned int v61;
  uint64_t v62;
  char *v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  WTF *v81;
  WTF *v82;
  WTF *v83;
  uint64_t v84;
  float v85;
  BOOL v86;
  uint64_t v87;
  float v88;
  BOOL v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int16 *v95;
  char *v96;
  uint64_t v97;
  unsigned int v98;
  char *v100;
  char *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  unsigned __int8 *v117;
  uint64_t v118;
  unsigned __int16 *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v124;
  WTF::StringImpl **v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  WTF *v128;
  WTF *v129;
  float64x2_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  WTF *v140;
  uint64_t v141;
  unsigned __int16 *v142;
  uint64_t v143;

  v11 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v11 <= 0x218)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x17Au)
    {
      if (v11 != 354)
      {
        if (v11 != 378)
          goto LABEL_16;
        goto LABEL_15;
      }
      if ((byte_1ECE84D16 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        qword_1ECE84D40 = *(_QWORD *)&v130.f64[0];
        byte_1ECE84D16 = 1;
      }
      if ((byte_1ECE84D17 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        qword_1ECE84D48 = *(_QWORD *)&v130.f64[0];
        byte_1ECE84D17 = 1;
      }
      if (*(_QWORD *)a4 == qword_1ECE84D40)
      {
        *(_BYTE *)(a1 + 385) = 0;
      }
      else
      {
        if (*(_QWORD *)a4 == qword_1ECE84D48)
          v26 = 1;
        else
          v26 = 2;
        *(_BYTE *)(a1 + 385) = v26;
      }
      goto LABEL_16;
    }
    if (v11 == 379)
    {
      if ((byte_1ECE84D12 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        qword_1ECE84D20 = *(_QWORD *)&v130.f64[0];
        byte_1ECE84D12 = 1;
      }
      if ((byte_1ECE84D13 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        qword_1ECE84D28 = *(_QWORD *)&v130.f64[0];
        byte_1ECE84D13 = 1;
      }
      if ((byte_1ECE84D14 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        qword_1ECE84D30 = *(_QWORD *)&v130.f64[0];
        byte_1ECE84D14 = 1;
      }
      if ((byte_1ECE84D15 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        qword_1ECE84D38 = *(_QWORD *)&v130.f64[0];
        byte_1ECE84D15 = 1;
      }
      v27 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == qword_1ECE84D20)
      {
        v28 = 0;
      }
      else if (v27 == qword_1ECE84D28)
      {
        v28 = 1;
      }
      else if (v27 == qword_1ECE84D30)
      {
        v28 = 2;
      }
      else if (v27 == qword_1ECE84D38)
      {
        v28 = 3;
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::animateMotionTag + 24))
      {
        v28 = 2;
      }
      else
      {
        v28 = 1;
      }
      *(_BYTE *)(a1 + 488) = v28;
      goto LABEL_16;
    }
    if (v11 != 492)
      goto LABEL_16;
LABEL_15:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1408))(a1);
    goto LABEL_16;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x21Au)
  {
    if (v11 == 537)
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::animateMotionTag + 24))
      {
        v34 = *(_QWORD *)a4;
        if (*(_QWORD *)a4)
        {
          v35 = *(_QWORD *)(v34 + 8);
          v36 = *(unsigned int *)(v34 + 4) | ((unint64_t)((*(_DWORD *)(v34 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v35 = 0;
          v36 = 0x100000000;
        }
        WebCore::parseKeyTimes((WTF **)&v130, v35, v36, 0);
        v38 = *(WTF **)(a1 + 440);
        if (v38)
        {
          *(_QWORD *)(a1 + 440) = 0;
          *(_DWORD *)(a1 + 448) = 0;
          WTF::fastFree(v38, v37);
        }
        *(float64x2_t *)(a1 + 440) = v130;
      }
      goto LABEL_16;
    }
    if (v11 != 538)
      goto LABEL_16;
    v16 = *(_QWORD *)a4;
    if (!*(_QWORD *)a4 || (v17 = *(unsigned int *)(v16 + 4), !(_DWORD)v17))
    {
LABEL_122:
      if (*(_DWORD *)(a1 + 464))
      {
        if (*(_DWORD *)(a1 + 468))
          *(_DWORD *)(a1 + 468) = 0;
        v83 = *(WTF **)(a1 + 456);
        if (v83)
        {
          *(_QWORD *)(a1 + 456) = 0;
          *(_DWORD *)(a1 + 464) = 0;
          WTF::fastFree(v83, a2);
        }
      }
      goto LABEL_16;
    }
    v18 = *(unsigned __int16 **)(v16 + 8);
    if ((*(_BYTE *)(v16 + 16) & 4) == 0)
    {
      v19 = *(unsigned __int16 **)(v16 + 8);
      while (1)
      {
        v20 = *v18;
        v46 = v20 > 0x20;
        v21 = (1 << v20) & 0x100003600;
        if (v46 || v21 == 0)
          break;
        ++v18;
        ++v19;
        if (!--v17)
        {
          v23 = 0;
          LODWORD(v5) = 0;
          v24 = 0;
          v25 = 1;
          goto LABEL_118;
        }
      }
      v129 = 0;
      v24 = 0;
      v142 = v19;
      v143 = v17;
      v140 = 0;
      v141 = 0;
      do
      {
        v44 = WebCore::genericParseNumber<char16_t,float>(&v142, 1);
        if ((v44 & 0xFF00000000) == 0)
          goto LABEL_115;
        v45 = *(float *)&v44;
        v46 = *(float *)&v44 < 0.0 || *(float *)&v44 > 1.0;
        if (v46
          || (v47 = WebCore::genericParseNumber<char16_t,float>(&v142, 1), (v47 & 0xFF00000000) == 0)
          || ((v48 = *(float *)&v47, *(float *)&v47 >= 0.0) ? (v49 = *(float *)&v47 > 1.0) : (v49 = 1),
              v49
           || (v50 = WebCore::genericParseNumber<char16_t,float>(&v142, 1), (v50 & 0xFF00000000) == 0)
           || (v51 = *(float *)&v50, *(float *)&v50 < 0.0)
           || *(float *)&v50 > 1.0
           || (v52 = WebCore::genericParseNumber<char16_t,float>(&v142, 0), (v52 & 0xFF00000000) == 0)
           || *(float *)&v52 < 0.0
           || *(float *)&v52 > 1.0))
        {
LABEL_115:
          v81 = v129;
          if (v129)
            goto LABEL_116;
          goto LABEL_117;
        }
        v53 = v143;
        if (v143)
        {
          v54 = 0;
          v55 = 0;
          v56 = &v142[v143];
          while (1)
          {
            v57 = v142[v55];
            if (v57 > 0x20 || ((1 << v57) & 0x100003600) == 0)
              break;
            ++v55;
            v54 -= 2;
            if (v143 == v55)
            {
              v5 = 0;
              v59 = 0;
LABEL_107:
              v142 = v56;
              v143 = v5;
              goto LABEL_108;
            }
          }
          v60 = &v142[v54 / 0xFFFFFFFFFFFFFFFELL];
          v59 = v57 == 59;
          if (v57 != 59)
          {
            v5 = v143 - v55;
LABEL_99:
            v56 = &v60[v5];
            while (1)
            {
              v61 = *v60;
              v46 = v61 > 0x20;
              v62 = (1 << v61) & 0x100003600;
              if (v46 || v62 == 0)
                break;
              ++v60;
              if (!--v5)
                goto LABEL_107;
            }
            v56 = v60;
            goto LABEL_107;
          }
          v5 = ~v55 + v143;
          v142 = ++v60;
          v143 = v5;
          if (v53 - 1 != v55)
            goto LABEL_99;
          v5 = 0;
          v59 = 1;
        }
        else
        {
          v5 = 0;
          v59 = 0;
        }
LABEL_108:
        WebCore::UnitBezier::UnitBezier(&v130, v45, v48, v51, *(float *)&v52);
        if (v24 == (_DWORD)v141)
        {
          v64 = WTF::Vector<WebCore::UnitBezier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v140, v24 + 1, (unint64_t)&v130);
          v24 = HIDWORD(v141);
          v129 = v140;
          v65 = (char *)v140 + 152 * HIDWORD(v141);
          v66 = *((_OWORD *)v64 + 1);
          *(_OWORD *)v65 = *(_OWORD *)v64;
          *((_OWORD *)v65 + 1) = v66;
          v67 = *((_OWORD *)v64 + 5);
          v69 = *((_OWORD *)v64 + 2);
          v68 = *((_OWORD *)v64 + 3);
          *((_OWORD *)v65 + 4) = *((_OWORD *)v64 + 4);
          *((_OWORD *)v65 + 5) = v67;
          *((_OWORD *)v65 + 2) = v69;
          *((_OWORD *)v65 + 3) = v68;
          v71 = *((_OWORD *)v64 + 7);
          v70 = *((_OWORD *)v64 + 8);
          v72 = *((_OWORD *)v64 + 6);
          *((_QWORD *)v65 + 18) = *((_QWORD *)v64 + 18);
          *((_OWORD *)v65 + 7) = v71;
          *((_OWORD *)v65 + 8) = v70;
          *((_OWORD *)v65 + 6) = v72;
        }
        else
        {
          v73 = (char *)v129 + 152 * v24;
          v74 = v131;
          *(float64x2_t *)v73 = v130;
          *((_OWORD *)v73 + 1) = v74;
          v75 = v132;
          v76 = v133;
          v77 = v135;
          *((_OWORD *)v73 + 4) = v134;
          *((_OWORD *)v73 + 5) = v77;
          *((_OWORD *)v73 + 2) = v75;
          *((_OWORD *)v73 + 3) = v76;
          v78 = v136;
          v79 = v137;
          v80 = v138;
          *((_QWORD *)v73 + 18) = v139;
          *((_OWORD *)v73 + 7) = v79;
          *((_OWORD *)v73 + 8) = v80;
          *((_OWORD *)v73 + 6) = v78;
        }
        HIDWORD(v141) = ++v24;
      }
      while (v5);
      if (v59)
      {
        v81 = v129;
LABEL_116:
        v140 = 0;
        LODWORD(v141) = 0;
        WTF::fastFree(v81, a2);
LABEL_117:
        v25 = 0;
        v23 = 0;
        goto LABEL_118;
      }
      v25 = 1;
      LODWORD(v5) = v141;
      v23 = v129;
LABEL_118:
      if (v25)
      {
        v82 = *(WTF **)(a1 + 456);
        if (v82)
        {
          *(_QWORD *)(a1 + 456) = 0;
          *(_DWORD *)(a1 + 464) = 0;
          WTF::fastFree(v82, a2);
        }
        *(_QWORD *)(a1 + 456) = v23;
        *(_DWORD *)(a1 + 464) = v5;
        *(_DWORD *)(a1 + 468) = v24;
        goto LABEL_16;
      }
      goto LABEL_122;
    }
    v142 = *(unsigned __int16 **)(v16 + 8);
    v143 = v17;
    v39 = (unsigned __int16 *)((char *)v18 + 1);
    v40 = v17 - 1;
    while (1)
    {
      v41 = *(unsigned __int8 *)v18;
      v46 = v41 > 0x20;
      v42 = (1 << v41) & 0x100003600;
      if (v46 || v42 == 0)
        break;
      v18 = (unsigned __int16 *)((char *)v18 + 1);
      v142 = v39;
      v143 = v40;
      v39 = (unsigned __int16 *)((char *)v39 + 1);
      if (--v40 == -1)
      {
        v23 = 0;
        LODWORD(v5) = 0;
        v24 = 0;
        v25 = 1;
        goto LABEL_118;
      }
    }
    v23 = 0;
    v24 = 0;
    v140 = 0;
    v141 = 0;
    while (1)
    {
      v84 = WebCore::parseNumber((uint64_t *)&v142, 1);
      if ((v84 & 0xFF00000000) == 0)
        goto LABEL_175;
      v85 = *(float *)&v84;
      v86 = *(float *)&v84 < 0.0 || *(float *)&v84 > 1.0;
      if (v86
        || (v87 = WebCore::parseNumber((uint64_t *)&v142, 1), (v87 & 0xFF00000000) == 0)
        || ((v88 = *(float *)&v87, *(float *)&v87 >= 0.0) ? (v89 = *(float *)&v87 > 1.0) : (v89 = 1),
            v89
         || (v90 = WebCore::parseNumber((uint64_t *)&v142, 1), (v90 & 0xFF00000000) == 0)
         || (v91 = *(float *)&v90, *(float *)&v90 < 0.0)
         || *(float *)&v90 > 1.0
         || (v92 = WebCore::parseNumber((uint64_t *)&v142, 0), (v92 & 0xFF00000000) == 0)
         || *(float *)&v92 < 0.0
         || *(float *)&v92 > 1.0))
      {
LABEL_175:
        if (!v23)
        {
          v25 = 0;
          goto LABEL_118;
        }
        goto LABEL_176;
      }
      v93 = v143;
      if (v143)
      {
        v94 = 0;
        v95 = v142;
        v96 = (char *)v142 + 1;
        v97 = -1;
        while (1)
        {
          v98 = *((unsigned __int8 *)v95 + v94);
          if (v98 > 0x20 || ((1 << v98) & 0x100003600) == 0)
            break;
          v142 = (unsigned __int16 *)&v96[v94];
          v143 = v93 + v97;
          ++v94;
          --v97;
          if (v93 == v94)
            goto LABEL_158;
        }
        v117 = (unsigned __int8 *)v95 + v94;
        LODWORD(v5) = v98 == 59;
        if (v98 != 59)
        {
          v118 = v93 - v94;
LABEL_168:
          v119 = (unsigned __int16 *)(v117 + 1);
          v120 = v118 - 1;
          do
          {
            v121 = *v117;
            v46 = v121 > 0x20;
            v122 = (1 << v121) & 0x100003600;
            if (v46 || v122 == 0)
              break;
            ++v117;
            v142 = v119;
            v143 = v120;
            v119 = (unsigned __int16 *)((char *)v119 + 1);
            --v120;
          }
          while (v120 != -1);
          goto LABEL_159;
        }
        v118 = v93 + v97;
        v142 = (unsigned __int16 *)++v117;
        v143 = v118;
        if (v93 - 1 != v94)
          goto LABEL_168;
        LODWORD(v5) = 1;
      }
      else
      {
LABEL_158:
        LODWORD(v5) = 0;
      }
LABEL_159:
      WebCore::UnitBezier::UnitBezier(&v130, v85, v88, v91, *(float *)&v92);
      if (v24 == (_DWORD)v141)
      {
        v100 = WTF::Vector<WebCore::UnitBezier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v140, v24 + 1, (unint64_t)&v130);
        v24 = HIDWORD(v141);
        v23 = v140;
        v101 = (char *)v140 + 152 * HIDWORD(v141);
        v102 = *((_OWORD *)v100 + 1);
        *(_OWORD *)v101 = *(_OWORD *)v100;
        *((_OWORD *)v101 + 1) = v102;
        v103 = *((_OWORD *)v100 + 5);
        v105 = *((_OWORD *)v100 + 2);
        v104 = *((_OWORD *)v100 + 3);
        *((_OWORD *)v101 + 4) = *((_OWORD *)v100 + 4);
        *((_OWORD *)v101 + 5) = v103;
        *((_OWORD *)v101 + 2) = v105;
        *((_OWORD *)v101 + 3) = v104;
        v107 = *((_OWORD *)v100 + 7);
        v106 = *((_OWORD *)v100 + 8);
        v108 = *((_OWORD *)v100 + 6);
        *((_QWORD *)v101 + 18) = *((_QWORD *)v100 + 18);
        *((_OWORD *)v101 + 7) = v107;
        *((_OWORD *)v101 + 8) = v106;
        *((_OWORD *)v101 + 6) = v108;
      }
      else
      {
        v109 = (char *)v23 + 152 * v24;
        v110 = v131;
        *(float64x2_t *)v109 = v130;
        *((_OWORD *)v109 + 1) = v110;
        v111 = v132;
        v112 = v133;
        v113 = v135;
        *((_OWORD *)v109 + 4) = v134;
        *((_OWORD *)v109 + 5) = v113;
        *((_OWORD *)v109 + 2) = v111;
        *((_OWORD *)v109 + 3) = v112;
        v114 = v136;
        v115 = v137;
        v116 = v138;
        *((_QWORD *)v109 + 18) = v139;
        *((_OWORD *)v109 + 7) = v115;
        *((_OWORD *)v109 + 8) = v116;
        *((_OWORD *)v109 + 6) = v114;
      }
      HIDWORD(v141) = ++v24;
      if (!v143)
      {
        if ((v5 & 1) == 0)
        {
          v25 = 1;
          LODWORD(v5) = v141;
          goto LABEL_118;
        }
LABEL_176:
        v140 = 0;
        LODWORD(v141) = 0;
        WTF::fastFree(v23, a2);
        v25 = 0;
        v23 = 0;
        goto LABEL_118;
      }
    }
  }
  switch(v11)
  {
    case 0x21Bu:
      v29 = *(_QWORD *)a4;
      if (*(_QWORD *)a4)
      {
        v30 = *(_QWORD *)(v29 + 8);
        v31 = *(unsigned int *)(v29 + 4) | ((unint64_t)((*(_DWORD *)(v29 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v30 = 0;
        v31 = 0x100000000;
      }
      WebCore::parseKeyTimes((WTF **)&v130, v30, v31, 1);
      v33 = *(WTF **)(a1 + 408);
      if (v33)
      {
        *(_QWORD *)(a1 + 408) = 0;
        *(_DWORD *)(a1 + 416) = 0;
        WTF::fastFree(v33, v32);
      }
      *(float64x2_t *)(a1 + 408) = v130;
      break;
    case 0x374u:
      goto LABEL_15;
    case 0x384u:
      if (*(_DWORD *)(a1 + 400))
      {
        v124 = *(unsigned int *)(a1 + 404);
        if ((_DWORD)v124)
        {
          v125 = *(WTF::StringImpl ***)(a1 + 392);
          v126 = 8 * v124;
          do
          {
            v127 = *v125;
            *v125 = 0;
            if (v127)
            {
              if (*(_DWORD *)v127 == 2)
                WTF::StringImpl::destroy(v127, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v127 -= 2;
            }
            ++v125;
            v126 -= 8;
          }
          while (v126);
          *(_DWORD *)(a1 + 404) = 0;
        }
        v128 = *(WTF **)(a1 + 392);
        if (v128)
        {
          *(_QWORD *)(a1 + 392) = 0;
          *(_DWORD *)(a1 + 400) = 0;
          WTF::fastFree(v128, a2);
        }
      }
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E3455BD0;
      v12[1] = a1;
      *(_QWORD *)&v130.f64[0] = v12;
      MEMORY[0x19AEA70E0](a4, 59, &v130);
      v13 = v130.f64[0];
      v130.f64[0] = 0.0;
      if (v13 != 0.0)
        (*(void (**)(float64_t))(**(_QWORD **)&v13 + 8))(COERCE_FLOAT64_T(*(_QWORD *)&v13));
      goto LABEL_15;
  }
LABEL_16:
  WebCore::SVGTests::parseAttribute((WTF *)(a1 + 368), (const WebCore::QualifiedName *)a2, a4);
  return WebCore::SVGSMILElement::attributeChanged(a1, (WTF::StringImpl *)a2, a3, (WTF::StringImpl **)a4, a5, v14);
}

uint64_t WebCore::SVGAnimateMotionElement::updateAnimationMode(uint64_t this, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WebCore::SVGAnimationElement *v5;
  int v6;

  v5 = (WebCore::SVGAnimationElement *)this;
  v6 = *(_DWORD *)(this + 656);
  if (v6 == 2)
  {
    this = *(_QWORD *)(this + 600);
    if (this)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 200))(this);
      if ((this & 1) != 0)
        return WebCore::SVGAnimationElement::updateAnimationMode(v5, a5, a2, a3, a4);
    }
  }
  else if (!v6)
  {
    return WebCore::SVGAnimationElement::updateAnimationMode(v5, a5, a2, a3, a4);
  }
  *((_BYTE *)v5 + 489) = 6;
  return this;
}

uint64_t WebCore::SVGAnimateMotionElement::startAnimation(WebCore::SVGAnimateMotionElement *this)
{
  uint64_t result;
  uint64_t v3;
  WebCore::Node *v4;
  void *v5;

  result = WebCore::SVGAnimateMotionElement::hasValidAttributeType(this);
  if ((_DWORD)result)
  {
    v3 = *((_QWORD *)this + 23);
    if (v3)
    {
      v4 = *(WebCore::Node **)(v3 + 8);
      if (v4)
      {
        *((_DWORD *)v4 + 6) += 2;
        result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v4 + 1256))(v4);
        if (result)
        {
          *(_QWORD *)result = 0x3FF0000000000000;
          *(_QWORD *)(result + 8) = 0;
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = 0x3FF0000000000000;
          *(_QWORD *)(result + 32) = 0;
          *(_QWORD *)(result + 40) = 0;
        }
        if (*((_DWORD *)v4 + 6) == 2)
        {
          if ((*((_WORD *)v4 + 15) & 0x400) == 0)
            return (uint64_t)WebCore::Node::removedLastRef(v4, v5);
        }
        else
        {
          *((_DWORD *)v4 + 6) -= 2;
        }
      }
    }
  }
  return result;
}

void WebCore::SVGAnimateMotionElement::stopAnimation(WebCore::SVGAnimateMotionElement *this, WebCore::SVGElement *a2)
{
  _QWORD *v3;

  if (a2)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(WebCore::SVGElement *))(*(_QWORD *)a2 + 1256))(a2);
    if (v3)
    {
      *v3 = 0x3FF0000000000000;
      v3[1] = 0;
      v3[2] = 0;
      v3[3] = 0x3FF0000000000000;
      v3[4] = 0;
      v3[5] = 0;
    }
    WebCore::SVGAnimateMotionElement::applyResultsToTarget(this);
  }
}

void WebCore::SVGAnimateMotionElement::applyResultsToTarget(WebCore::SVGAnimateMotionElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t *v7;
  WebCore::SVGElement **v8;
  WebCore::SVGElement **v9;
  _OWORD *v10;
  uint64_t v11;
  double v12;
  double v13;
  BOOL v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  WebCore::SVGElement *v18;
  WTF *v19;
  int v20;
  unsigned int v21;

  v1 = *((_QWORD *)this + 23);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_DWORD *)(v2 + 24) += 2;
      WebCore::SVGAnimateMotionElement::applyResultsToTarget(void)::$_0::operator()((WebCore::SVGElement *)v2);
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1256))(v2);
      if (!v3)
        goto LABEL_19;
      v5 = (__int128 *)v3;
      v6 = *(_QWORD *)(v2 + 120);
      if (v6)
      {
        v7 = (uint64_t *)(v6 + 40);
      }
      else
      {
        v7 = &WebCore::SVGElement::instances(void)const::emptyInstances;
        {
          WebCore::SVGElement::instances(void)const::emptyInstances = 0;
          *(_QWORD *)&dword_1EE2F9738 = 0;
        }
      }
      WTF::copyToVectorOf<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((uint64_t)v7, v4, (uint64_t)&v19);
      v8 = (WebCore::SVGElement **)v19;
      if (!v21)
        goto LABEL_18;
      v9 = (WebCore::SVGElement **)((char *)v19 + 8 * v21);
      do
      {
        v10 = (_OWORD *)(*(uint64_t (**)(WebCore::SVGElement *))(*(_QWORD *)*v8 + 1256))(*v8);
        if (v10)
        {
          v11 = 0;
          do
          {
            v12 = *(double *)((char *)v10 + v11);
            v13 = *(double *)((char *)v5 + v11);
            if (v12 != v13)
              break;
            v14 = v11 == 40;
            v11 += 8;
          }
          while (!v14);
          if (v12 != v13)
          {
            v15 = *v5;
            v16 = v5[2];
            v10[1] = v5[1];
            v10[2] = v16;
            *v10 = v15;
            WebCore::SVGAnimateMotionElement::applyResultsToTarget(void)::$_0::operator()(*v8);
          }
        }
        ++v8;
      }
      while (v8 != v9);
      v8 = (WebCore::SVGElement **)v19;
      if (v21)
      {
        v17 = 8 * v21;
        do
        {
          v18 = *v8;
          *v8 = 0;
          if (v18)
          {
            if (*((_DWORD *)v18 + 6) == 2)
            {
              if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v18, v4);
            }
            else
            {
              *((_DWORD *)v18 + 6) -= 2;
            }
          }
          ++v8;
          v17 -= 8;
        }
        while (v17);
        v8 = (WebCore::SVGElement **)v19;
        if (!v19)
          goto LABEL_19;
      }
      else
      {
LABEL_18:
        if (!v8)
          goto LABEL_19;
      }
      v19 = 0;
      v20 = 0;
      WTF::fastFree((WTF *)v8, v4);
LABEL_19:
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
  }
}

uint64_t WebCore::SVGAnimateMotionElement::setFromAndToValues(WebCore::SVGAnimateMotionElement *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v5;
  unsigned __int16 *v6;
  unint64_t v7;
  float v8;
  float v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  char v18;

  if (*((_BYTE *)this + 516))
    *((_BYTE *)this + 516) = 0;
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *(unsigned __int16 **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  v10 = WebCore::parsePoint(v6, v7);
  v9 = *((float *)&v10 + 1);
  v8 = *(float *)&v10;
  if (!v11)
  {
    v9 = 0.0;
    v8 = 0.0;
  }
  *((float *)this + 123) = v8;
  *((float *)this + 124) = v9;
  v12 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v13 = *(unsigned __int16 **)(v12 + 8);
    v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v13 = 0;
    v14 = 0x100000000;
  }
  v17 = WebCore::parsePoint(v13, v14);
  v16 = *((float *)&v17 + 1);
  v15 = *(float *)&v17;
  if (!v18)
  {
    v16 = 0.0;
    v15 = 0.0;
  }
  *((float *)this + 125) = v15;
  *((float *)this + 126) = v16;
  return 1;
}

uint64_t WebCore::SVGAnimateMotionElement::setFromAndByValues(WebCore::SVGAnimateMotionElement *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  float v22;
  float v23;
  unint64_t v24;
  char v25;
  float v26;
  const WTF::String *v28;
  _QWORD *v29;
  uint64_t v30;

  if (*((_BYTE *)this + 516))
    *((_BYTE *)this + 516) = 0;
  if (*((_BYTE *)this + 489) != 4)
    goto LABEL_20;
  v5 = *((_QWORD *)this + 13);
  if (!v5)
    goto LABEL_15;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) == 0)
  {
    v7 = v5 + 32;
    LODWORD(v8) = v6 >> 5;
    if ((_DWORD)v8)
      goto LABEL_7;
LABEL_15:
    v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v5 + 40);
  LODWORD(v8) = *(_DWORD *)(v5 + 52);
  if (!(_DWORD)v8)
    goto LABEL_15;
LABEL_7:
  v8 = v8;
  v9 = (_QWORD *)(v7 + 8);
  while (1)
  {
    v10 = *(v9 - 1);
    if (v10 == WebCore::SVGNames::additiveAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::SVGNames::additiveAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::SVGNames::additiveAttr + 32))
    {
      break;
    }
    v9 += 2;
    if (!--v8)
    {
      v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_16:
  {
    v11 = WebCore::sumAtom(void)::sum;
  }
  else
  {
    v28 = a2;
    v29 = v9;
    WTF::AtomStringImpl::add();
    a2 = v28;
    v9 = v29;
    v11 = v30;
    WebCore::sumAtom(void)::sum = v30;
  }
  if (*v9 != v11 && *((_BYTE *)this + 489) != 4)
    return 0;
LABEL_20:
  v12 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v13 = *(unsigned __int16 **)(v12 + 8);
    v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v13 = 0;
    v14 = 0x100000000;
  }
  v17 = WebCore::parsePoint(v13, v14);
  v16 = *((float *)&v17 + 1);
  v15 = *(float *)&v17;
  if (!v18)
  {
    v16 = 0.0;
    v15 = 0.0;
  }
  *((float *)this + 123) = v15;
  *((float *)this + 124) = v16;
  v19 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v20 = *(unsigned __int16 **)(v19 + 8);
    v21 = *(unsigned int *)(v19 + 4) | ((unint64_t)((*(_DWORD *)(v19 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v20 = 0;
    v21 = 0x100000000;
  }
  v24 = WebCore::parsePoint(v20, v21);
  v23 = *((float *)&v24 + 1);
  v22 = *(float *)&v24;
  if (!v25)
  {
    v23 = 0.0;
    v22 = 0.0;
  }
  v26 = *((float *)this + 124) + v23;
  *((float *)this + 125) = *((float *)this + 123) + v22;
  *((float *)this + 126) = v26;
  return 1;
}

BOOL WebCore::SVGAnimationElement::isAdditive(WebCore::SVGAnimationElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::SVGAnimationElement *v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_12;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_12:
    v5 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_12;
LABEL_4:
  v4 = v4;
  v5 = (_QWORD *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::SVGNames::additiveAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::SVGNames::additiveAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::SVGNames::additiveAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  {
    v7 = WebCore::sumAtom(void)::sum;
  }
  else
  {
    v9 = this;
    v10 = v5;
    WTF::AtomStringImpl::add();
    this = v9;
    v5 = v10;
    v7 = v11;
    WebCore::sumAtom(void)::sum = v11;
  }
  return *v5 == v7 || *((_BYTE *)this + 489) == 4;
}

uint64_t WebCore::SVGAnimateMotionElement::setToAtEndOfDurationValue(WebCore::SVGAnimateMotionElement *this, const WTF::String *a2)
{
  uint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  int v9;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(unsigned __int16 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  v6 = WebCore::parsePoint(v4, v5);
  if (!*((_BYTE *)this + 516))
    *((_BYTE *)this + 516) = 1;
  v8 = HIDWORD(v6);
  if (v7)
  {
    v9 = v6;
  }
  else
  {
    LODWORD(v8) = 0;
    v9 = 0;
  }
  *((_DWORD *)this + 127) = v9;
  *((_DWORD *)this + 128) = v8;
  return 1;
}

void WebCore::SVGAnimateMotionElement::calculateAnimatedValue(WebCore::SVGAnimateMotionElement *this, float a2, unsigned int a3)
{
  uint64_t v3;
  WebCore::Node *v4;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  float v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  BOOL v55;
  float v56;
  uint64_t v57;
  WTF::String *v58;
  __n128 v59;
  float v60;
  _QWORD *Attribute;
  int v62;
  __double2 v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  _QWORD *v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;

  v3 = *((_QWORD *)this + 23);
  if (v3)
  {
    v4 = *(WebCore::Node **)(v3 + 8);
    if (v4)
    {
      *((_DWORD *)v4 + 6) += 2;
      v8 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v4 + 1256))(v4);
      if (!v8)
      {
LABEL_101:
        if (*((_DWORD *)v4 + 6) == 2)
        {
          if ((*((_WORD *)v4 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v4, v9);
        }
        else
        {
          *((_DWORD *)v4 + 6) -= 2;
        }
        return;
      }
      v10 = v8;
      v11 = *((_QWORD *)this + 13);
      if (v11)
      {
        v12 = *(_DWORD *)(v11 + 4);
        if ((v12 & 1) != 0)
        {
          v13 = *(_QWORD *)(v11 + 40);
          LODWORD(v14) = *(_DWORD *)(v11 + 52);
          if ((_DWORD)v14)
          {
LABEL_7:
            v14 = v14;
            v15 = (_QWORD *)(v13 + 8);
            while (1)
            {
              v16 = *(v15 - 1);
              if (v16 == WebCore::SVGNames::additiveAttr
                || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::SVGNames::additiveAttr + 24)
                && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::SVGNames::additiveAttr + 32))
              {
                break;
              }
              v15 += 2;
              if (!--v14)
              {
                v15 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                break;
              }
            }
LABEL_16:
            {
              v17 = WebCore::sumAtom(void)::sum;
            }
            else
            {
              WTF::AtomStringImpl::add();
              v17 = v68;
              WebCore::sumAtom(void)::sum = v68;
            }
            if (*v15 != v17 && *((_BYTE *)this + 489) != 4)
            {
              *(_QWORD *)v10 = 0x3FF0000000000000;
              *(_QWORD *)(v10 + 8) = 0;
              *(_QWORD *)(v10 + 16) = 0;
              *(_QWORD *)(v10 + 24) = 0x3FF0000000000000;
              *(_QWORD *)(v10 + 32) = 0;
              *(_QWORD *)(v10 + 40) = 0;
            }
            v18 = *((unsigned __int8 *)this + 489);
            if (v18 == 6)
            {
              WebCore::Path::length((WebCore::SVGAnimateMotionElement *)((char *)this + 592));
              WebCore::Path::traversalStateAtLength((WebCore::SVGAnimateMotionElement *)((char *)this + 592), v19 * a2, (uint64_t)&v68);
              if (BYTE4(v68))
              {
                v20 = v69;
                v21 = v70;
                v22 = *(double *)(v10 + 8);
                v24 = *(double *)(v10 + 16);
                v23 = *(double *)(v10 + 24);
                if (*(double *)v10 == 1.0 && v22 == 0.0 && v24 == 0.0 && v23 == 1.0)
                {
                  *(double *)(v10 + 32) = *(double *)(v10 + 32) + v20;
                }
                else
                {
                  *(double *)(v10 + 32) = v24 * v21 + v20 * *(double *)v10 + *(double *)(v10 + 32);
                  v21 = v23 * v21 + v20 * v22;
                }
                *(double *)(v10 + 40) = v21 + *(double *)(v10 + 40);
              }
              v42 = *((_QWORD *)this + 13);
              if (v42)
              {
                v43 = *(_DWORD *)(v42 + 4);
                if ((v43 & 1) != 0)
                {
                  v44 = *(_QWORD *)(v42 + 40);
                  LODWORD(v45) = *(_DWORD *)(v42 + 52);
                  if ((_DWORD)v45)
                  {
LABEL_66:
                    v45 = v45;
                    v46 = (_QWORD *)(v44 + 8);
                    while (1)
                    {
                      v47 = *(v46 - 1);
                      if (v47 == WebCore::SVGNames::accumulateAttr
                        || *(_QWORD *)(v47 + 24) == *(_QWORD *)(WebCore::SVGNames::accumulateAttr + 24)
                        && *(_QWORD *)(v47 + 32) == *(_QWORD *)(WebCore::SVGNames::accumulateAttr + 32))
                      {
                        goto LABEL_75;
                      }
                      v46 += 2;
                      if (!--v45)
                      {
                        v46 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                        goto LABEL_75;
                      }
                    }
                  }
                }
                else
                {
                  v44 = v42 + 32;
                  LODWORD(v45) = v43 >> 5;
                  if ((_DWORD)v45)
                    goto LABEL_66;
                }
              }
              v46 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_75:
              {
                v48 = WebCore::sumAtom(void)::sum;
              }
              else
              {
                v67 = v46;
                WTF::AtomStringImpl::add();
                v46 = v67;
                v48 = v68;
                WebCore::sumAtom(void)::sum = v68;
              }
              if (*v46 == v48 && a3 && *((_BYTE *)this + 489) != 3)
              {
                do
                {
                  WebCore::Path::length((WebCore::SVGAnimateMotionElement *)((char *)this + 592));
                  WebCore::Path::traversalStateAtLength((WebCore::SVGAnimateMotionElement *)((char *)this + 592), v49, (uint64_t)&v68);
                  if (BYTE4(v68))
                  {
                    v50 = v69;
                    v51 = v70;
                    v52 = *(double *)(v10 + 8);
                    v54 = *(double *)(v10 + 16);
                    v53 = *(double *)(v10 + 24);
                    if (*(double *)v10 == 1.0 && v52 == 0.0 && (v54 == 0.0 ? (v55 = v53 == 1.0) : (v55 = 0), v55))
                    {
                      *(double *)(v10 + 32) = *(double *)(v10 + 32) + v50;
                    }
                    else
                    {
                      *(double *)(v10 + 32) = v54 * v51 + v50 * *(double *)v10 + *(double *)(v10 + 32);
                      v51 = v53 * v51 + v50 * v52;
                    }
                    *(double *)(v10 + 40) = v51 + *(double *)(v10 + 40);
                  }
                  --a3;
                }
                while (a3);
              }
              WebCore::Path::length((WebCore::SVGAnimateMotionElement *)((char *)this + 592));
              WebCore::Path::traversalStateAtLength((WebCore::SVGAnimateMotionElement *)((char *)this + 592), v56 * a2, (uint64_t)&v68);
              v60 = v71;
              if ((_MergedGlobals_269 & 1) == 0)
              {
                WTF::AtomStringImpl::add();
                qword_1ECE84D18 = v72;
                _MergedGlobals_269 = 1;
              }
              Attribute = (_QWORD *)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)&WebCore::SVGNames::rotateAttr, v57, v58, v59);
              if (*Attribute == WebCore::autoAtomData)
                v62 = 1;
              else
                v62 = 2 * (*Attribute == qword_1ECE84D18);
              if (v62)
              {
                if (v62 == 2)
                  v60 = v60 + 180.0;
                v63 = __sincos_stret(v60 * 0.0174532925);
                v64 = *(float64x2_t *)(v10 + 16);
                v65 = vaddq_f64(vmlaq_f64(vmulq_f64(v64, (float64x2_t)0), (float64x2_t)0, *(float64x2_t *)v10), *(float64x2_t *)(v10 + 32));
                v66 = vmlsq_lane_f64(vmulq_n_f64(v64, v63.__cosval), *(float64x2_t *)v10, v63.__sinval, 0);
                *(float64x2_t *)v10 = vmlaq_n_f64(vmulq_n_f64(v64, v63.__sinval), *(float64x2_t *)v10, v63.__cosval);
                *(float64x2_t *)(v10 + 16) = v66;
                *(float64x2_t *)(v10 + 32) = v65;
              }
              goto LABEL_101;
            }
            v25 = *((_QWORD *)this + 13);
            if (v25)
            {
              v26 = *(_DWORD *)(v25 + 4);
              if ((v26 & 1) != 0)
              {
                v27 = *(_QWORD *)(v25 + 40);
                LODWORD(v28) = *(_DWORD *)(v25 + 52);
                if ((_DWORD)v28)
                {
LABEL_31:
                  v28 = v28;
                  v29 = (_QWORD *)(v27 + 8);
                  while (1)
                  {
                    v30 = *(v29 - 1);
                    if (v30 == WebCore::SVGNames::accumulateAttr
                      || *(_QWORD *)(v30 + 24) == *(_QWORD *)(WebCore::SVGNames::accumulateAttr + 24)
                      && *(_QWORD *)(v30 + 32) == *(_QWORD *)(WebCore::SVGNames::accumulateAttr + 32))
                    {
                      goto LABEL_40;
                    }
                    v29 += 2;
                    if (!--v28)
                    {
                      v29 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                      goto LABEL_40;
                    }
                  }
                }
              }
              else
              {
                v27 = v25 + 32;
                LODWORD(v28) = v26 >> 5;
                if ((_DWORD)v28)
                  goto LABEL_31;
              }
            }
            v29 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_40:
            v31 = *((float *)this + 125);
            v32 = *((float *)this + 126);
            if (*v29 != v17 || a3 == 0 || v18 == 3)
            {
              v35 = *((float *)this + 125);
            }
            else
            {
              v35 = *((float *)this + 125);
              if (*((_BYTE *)this + 516))
              {
                v35 = *((float *)this + 127);
                v32 = *((float *)this + 128);
              }
            }
            LODWORD(v68) = 0;
            WebCore::SVGAnimationElement::animateAdditiveNumber(this, a2, a3, *((float *)this + 123), v31, v35, (float *)&v68);
            LODWORD(v72) = 0;
            WebCore::SVGAnimationElement::animateAdditiveNumber(this, a2, a3, *((float *)this + 124), *((float *)this + 126), v32, (float *)&v72);
            v36 = *(float *)&v68;
            v37 = *(float *)&v72;
            v38 = *(double *)(v10 + 8);
            v40 = *(double *)(v10 + 16);
            v39 = *(double *)(v10 + 24);
            if (*(double *)v10 == 1.0 && v38 == 0.0 && (v40 == 0.0 ? (v41 = v39 == 1.0) : (v41 = 0), v41))
            {
              *(double *)(v10 + 32) = *(double *)(v10 + 32) + v36;
            }
            else
            {
              *(double *)(v10 + 32) = v40 * v37 + v36 * *(double *)v10 + *(double *)(v10 + 32);
              v37 = v39 * v37 + v36 * v38;
            }
            *(double *)(v10 + 40) = v37 + *(double *)(v10 + 40);
            goto LABEL_101;
          }
        }
        else
        {
          v13 = v11 + 32;
          LODWORD(v14) = v12 >> 5;
          if ((_DWORD)v14)
            goto LABEL_7;
        }
      }
      v15 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      goto LABEL_16;
    }
  }
}

uint64_t WebCore::SVGAnimationElement::animateAdditiveNumber(WebCore::SVGAnimationElement *this, float a2, unsigned int a3, float a4, float a5, float a6, float *a7)
{
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t result;
  float v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;

  if (a2 >= 0.5)
    v9 = a5;
  else
    v9 = a4;
  v10 = a4 + (float)((float)(a5 - a4) * a2);
  if (*((_BYTE *)this + 488))
    v11 = v10;
  else
    v11 = v9;
  v12 = *((_QWORD *)this + 13);
  if (!v12)
    goto LABEL_18;
  v13 = *(_DWORD *)(v12 + 4);
  if ((v13 & 1) == 0)
  {
    v14 = v12 + 32;
    LODWORD(v15) = v13 >> 5;
    if ((_DWORD)v15)
      goto LABEL_10;
LABEL_18:
    v16 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_19;
  }
  v14 = *(_QWORD *)(v12 + 40);
  LODWORD(v15) = *(_DWORD *)(v12 + 52);
  if (!(_DWORD)v15)
    goto LABEL_18;
LABEL_10:
  v15 = v15;
  v16 = (_QWORD *)(v14 + 8);
  while (1)
  {
    v17 = *(v16 - 1);
    if (v17 == WebCore::SVGNames::accumulateAttr
      || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::SVGNames::accumulateAttr + 24)
      && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::SVGNames::accumulateAttr + 32))
    {
      break;
    }
    v16 += 2;
    if (!--v15)
    {
      v16 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_19:
  {
    v18 = WebCore::sumAtom(void)::sum;
  }
  else
  {
    v23 = v16;
    v22 = a3;
    v21 = a6;
    WTF::AtomStringImpl::add();
    v16 = v23;
    v18 = v24;
    a3 = v22;
    a6 = v21;
    WebCore::sumAtom(void)::sum = v24;
  }
  v19 = *v16 == v18 && *((_BYTE *)this + 489) != 3;
  if (a3 != 0 && v19)
    v11 = v11 + (float)(a6 * (float)a3);
  result = (*(uint64_t (**)(WebCore::SVGAnimationElement *))(*(_QWORD *)this + 1336))(this);
  if ((_DWORD)result && *((_BYTE *)this + 489) != 3)
    v11 = v11 + *a7;
  *a7 = v11;
  return result;
}

void WebCore::SVGAnimateMotionElement::applyResultsToTarget(void)::$_0::operator()(WebCore::SVGElement *a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  void *v14;
  uint64_t v15;
  float v16;
  int v17;

  v2 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
  v3 = *((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL;
  if ((*(_QWORD *)(*(_QWORD *)(v2 + 680) + 680) & 0x800000000000) == 0)
  {
    if (!v3)
      goto LABEL_18;
    if ((*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D4A40);
    }
    v4 = (int *)(v3 + 16);
    ++*(_DWORD *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 224))(v3);
    v5 = *(_DWORD *)(v3 + 16);
    if (!v5)
    {
LABEL_32:
      __break(0xC471u);
      JUMPOUT(0x1965D48F4);
    }
    goto LABEL_17;
  }
  if (v3)
  {
    if ((*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D4A60);
    }
    if ((*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) != 0)
    {
      v4 = (int *)(v3 + 16);
      ++*(_DWORD *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 832))(v3);
      if ((v6 & 1) != 0
        || (v7 = *(_QWORD *)(v3 + 88), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 40) + 20))
        || (v15 = *(_QWORD *)(v7 + 40), *(_QWORD *)(v15 + 328))
        || *(_QWORD *)(v15 + 320)
        || *(_QWORD *)(v15 + 312)
        || *(_QWORD *)(v15 + 304)
        || (*(_DWORD *)(v15 + 636) & 0x180) == 0x80)
      {
        v10 = *(_DWORD *)(v3 + 20);
        v9 = (unsigned int *)(v3 + 20);
        v8 = v10;
      }
      else
      {
        v16 = *(float *)(v15 + 260);
        v17 = *(_DWORD *)(v3 + 20);
        v9 = (unsigned int *)(v3 + 20);
        v8 = v17;
        if (v16 == -1.0)
        {
          v11 = 0;
LABEL_13:
          v12 = v8 & 0xFFEDFFFF;
          if (v6)
            v13 = 0x100000;
          else
            v13 = 0;
          *v9 = v12 | v11 | v13;
          v5 = *v4;
          if (!*v4)
            goto LABEL_32;
LABEL_17:
          *v4 = v5 - 1;
          v2 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
          goto LABEL_18;
        }
      }
      v11 = 0x20000;
      goto LABEL_13;
    }
  }
LABEL_18:
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateSVGRenderer((WebCore::Document *)v2, a1);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v14);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
}

uint64_t WebCore::SVGAnimateMotionElement::calculateDistance(WebCore::SVGAnimateMotionElement *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v4;
  unsigned __int16 *v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(unsigned __int16 **)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  v7 = WebCore::parsePoint(v5, v6);
  if (v8
    && ((v9 = v7, (v10 = *(_QWORD *)a3) == 0)
      ? (v11 = 0, v12 = 0x100000000)
      : (v11 = *(unsigned __int16 **)(v10 + 8),
         v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32)),
        v13 = WebCore::parsePoint(v11, v12),
        v14))
  {
    v15 = COERCE_UNSIGNED_INT(hypotf(*(float *)&v13 - *(float *)&v9, *((float *)&v13 + 1) - *((float *)&v9 + 1)));
    v16 = 0x100000000;
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  return v15 | v16;
}

uint64_t WebCore::SVGAnimationElement::updateAnimationMode(WebCore::SVGAnimationElement *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t result;
  WTF::StringImpl *v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;

  result = WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::SVGNames::valuesAttr, a4, a5, a2);
  if ((_DWORD)result)
  {
    v8 = 5;
LABEL_3:
    *((_BYTE *)this + 489) = v8;
    return result;
  }
  v9 = *((_QWORD *)this + 13);
  if (!v9)
    goto LABEL_15;
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) == 0)
  {
    v11 = v9 + 32;
    LODWORD(v12) = v10 >> 5;
    if ((_DWORD)v12)
      goto LABEL_7;
LABEL_15:
    v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(v9 + 40);
  LODWORD(v12) = *(_DWORD *)(v9 + 52);
  if (!(_DWORD)v12)
    goto LABEL_15;
LABEL_7:
  v12 = v12;
  v13 = (WTF::StringImpl **)(v11 + 8);
  while (1)
  {
    v14 = (uint64_t)*(v13 - 1);
    if (v14 == WebCore::SVGNames::toAttr
      || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::SVGNames::toAttr + 24)
      && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::SVGNames::toAttr + 32))
    {
      break;
    }
    v13 += 2;
    if (!--v12)
    {
      v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_16:
  v15 = *v13;
  if (*v13)
  {
    v16 = *(_DWORD *)v15;
    v17 = *((_DWORD *)v15 + 1);
    *(_DWORD *)v15 += 2;
    if (v16)
    {
      *(_DWORD *)v15 = v16;
      if (v17)
        goto LABEL_19;
    }
    else
    {
      WTF::StringImpl::destroy(v15, v7);
      if (v17)
      {
LABEL_19:
        v18 = *((_QWORD *)this + 13);
        if (v18)
        {
          v19 = *(_DWORD *)(v18 + 4);
          if ((v19 & 1) != 0)
          {
            v20 = *(_QWORD *)(v18 + 40);
            LODWORD(v21) = *(_DWORD *)(v18 + 52);
            if ((_DWORD)v21)
            {
LABEL_22:
              v21 = v21;
              v22 = (uint64_t *)(v20 + 8);
              while (1)
              {
                v23 = *(v22 - 1);
                if (v23 == WebCore::SVGNames::fromAttr
                  || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::SVGNames::fromAttr + 24)
                  && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::SVGNames::fromAttr + 32))
                {
                  goto LABEL_31;
                }
                v22 += 2;
                if (!--v21)
                {
                  v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                  goto LABEL_31;
                }
              }
            }
          }
          else
          {
            v20 = v18 + 32;
            LODWORD(v21) = v19 >> 5;
            if ((_DWORD)v21)
              goto LABEL_22;
          }
        }
        v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_31:
        result = *v22;
        if (!*v22)
        {
          v8 = 3;
          goto LABEL_3;
        }
        v24 = *(_DWORD *)(result + 4);
        *(_DWORD *)result += 2;
        if (v24)
          v25 = 1;
        else
          v25 = 3;
        goto LABEL_67;
      }
    }
  }
  v26 = *((_QWORD *)this + 13);
  if (!v26)
    goto LABEL_47;
  v27 = *(_DWORD *)(v26 + 4);
  if ((v27 & 1) == 0)
  {
    v28 = v26 + 32;
    LODWORD(v29) = v27 >> 5;
    if ((_DWORD)v29)
      goto LABEL_39;
LABEL_47:
    v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_48;
  }
  v28 = *(_QWORD *)(v26 + 40);
  LODWORD(v29) = *(_DWORD *)(v26 + 52);
  if (!(_DWORD)v29)
    goto LABEL_47;
LABEL_39:
  v29 = v29;
  v30 = (uint64_t *)(v28 + 8);
  while (1)
  {
    v31 = *(v30 - 1);
    if (v31 == WebCore::SVGNames::byAttr
      || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::SVGNames::byAttr + 24)
      && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::SVGNames::byAttr + 32))
    {
      break;
    }
    v30 += 2;
    if (!--v29)
    {
      v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_48:
  result = *v30;
  if (!*v30)
    goto LABEL_71;
  v32 = *(_DWORD *)result;
  v33 = *(_DWORD *)(result + 4);
  *(_DWORD *)result += 2;
  if (v32)
  {
    *(_DWORD *)result = v32;
    if (v33)
      goto LABEL_51;
LABEL_71:
    *((_BYTE *)this + 489) = 0;
    return result;
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
  if (!v33)
    goto LABEL_71;
LABEL_51:
  v34 = *((_QWORD *)this + 13);
  if (v34)
  {
    v35 = *(_DWORD *)(v34 + 4);
    if ((v35 & 1) != 0)
    {
      v36 = *(_QWORD *)(v34 + 40);
      LODWORD(v37) = *(_DWORD *)(v34 + 52);
      if ((_DWORD)v37)
      {
LABEL_54:
        v37 = v37;
        v38 = (uint64_t *)(v36 + 8);
        while (1)
        {
          v39 = *(v38 - 1);
          if (v39 == WebCore::SVGNames::fromAttr
            || *(_QWORD *)(v39 + 24) == *(_QWORD *)(WebCore::SVGNames::fromAttr + 24)
            && *(_QWORD *)(v39 + 32) == *(_QWORD *)(WebCore::SVGNames::fromAttr + 32))
          {
            goto LABEL_63;
          }
          v38 += 2;
          if (!--v37)
          {
            v38 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            goto LABEL_63;
          }
        }
      }
    }
    else
    {
      v36 = v34 + 32;
      LODWORD(v37) = v35 >> 5;
      if ((_DWORD)v37)
        goto LABEL_54;
    }
  }
  v38 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_63:
  result = *v38;
  if (!*v38)
  {
    v8 = 4;
    goto LABEL_3;
  }
  v40 = *(_DWORD *)(result + 4);
  *(_DWORD *)result += 2;
  if (v40)
    v25 = 2;
  else
    v25 = 4;
LABEL_67:
  *((_BYTE *)this + 489) = v25;
  if (*(_DWORD *)result == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
  *(_DWORD *)result -= 2;
  return result;
}

_QWORD *WebCore::SVGAnimateMotionElement::childrenChanged(WebCore::SVGAnimateMotionElement *a1, unsigned __int8 *a2)
{
  _QWORD *result;
  void *v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  result = (_QWORD *)WebCore::ContainerNode::childrenChanged((uint64_t)a1, a2);
  if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v10 = *(_QWORD *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v10)
    goto LABEL_2;
  v11 = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v11 + 2;
  v12 = *a2;
  if ((v12 - 2) < 3)
  {
    result = *(_QWORD **)(v10 + 224);
    if (!result)
      goto LABEL_16;
    v13 = 14;
    goto LABEL_23;
  }
  if (v12 == 8 || v12 == 5)
  {
    result = *(_QWORD **)(v10 + 224);
    if (result)
    {
      v13 = 13;
LABEL_23:
      v14 = v10;
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
      v10 = v14;
      v11 = *(_DWORD *)(v14 + 24) - 2;
    }
  }
LABEL_16:
  if (v11)
  {
    *(_DWORD *)(v10 + 24) = v11;
  }
  else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
  {
    result = WebCore::Node::removedLastRef((WebCore::Node *)v10, v5);
  }
LABEL_2:
  if (a2[32])
    result = WebCore::SVGElement::invalidateInstances(a1, v5);
  v6 = *a2;
  v7 = v6 > 8;
  v8 = (1 << v6) & 0x122;
  if (!v7 && v8 != 0)
    return (_QWORD *)WebCore::SVGAnimateMotionElement::updateAnimationPath(a1);
  return result;
}

WebCore::SVGAnimationElement *WebCore::SVGAnimateTransformElement::create@<X0>(WebCore::SVGAnimateTransformElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, WebCore::SVGAnimationElement **a3@<X8>)
{
  WebCore::SVGAnimationElement *v7;
  WebCore::SVGAnimationElement *result;

  v7 = (WebCore::SVGAnimationElement *)bmalloc::api::isoAllocate();
  result = WebCore::SVGAnimationElement::SVGAnimationElement(v7, this, a2);
  *((_QWORD *)result + 62) = 0;
  *((_WORD *)result + 252) = 0;
  *(_QWORD *)result = off_1E3453A48;
  *((_QWORD *)result + 14) = &unk_1E3454010;
  *((_DWORD *)result + 127) = 2;
  *a3 = result;
  return result;
}

uint64_t WebCore::SVGAnimateTransformElement::hasValidAttributeType(WebCore::SVGAnimateTransformElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 23);
  if (v1 && *(_QWORD *)(v1 + 8) && *((_BYTE *)this + 385))
    return WebCore::SVGAnimateElementBase::hasValidAttributeType(this);
  else
    return 0;
}

const WTF::AtomString *WebCore::SVGAnimateTransformElement::attributeChanged(uint64_t a1, _QWORD *a2, WTF::AtomString *a3, const WTF::AtomString *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;

  if (*a2 != WebCore::SVGNames::typeAttr)
    return WebCore::SVGAnimationElement::attributeChanged(a1, a2, a3, a4, a5);
  v10 = *(_QWORD *)a4;
  if (!*(_QWORD *)a4)
  {
    v12 = 0;
    v11 = 0;
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)(v10 + 4);
  if ((*(_BYTE *)(v10 + 16) & 4) != 0)
  {
LABEL_6:
    v16 = v11;
    v17 = v12;
    v13 = WebCore::SVGTransformable::parseTransformType(&v16);
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(v10 + 8);
  v17 = v12;
  v13 = WebCore::SVGTransformable::parseTransformType((uint64_t)&v16);
LABEL_7:
  if ((v13 & 0xFF00000000) != 0)
    v14 = v13;
  else
    v14 = 0;
  if (v14 == 1)
    v14 = 0;
  *(_DWORD *)(a1 + 508) = v14;
  return WebCore::SVGAnimationElement::attributeChanged(a1, a2, a3, a4, a5);
}

WTF::StringImpl *WebCore::SVGAnimateTransformElement::animateRangeString@<X0>(WebCore::SVGAnimateTransformElement *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  const char *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  v3 = *((_DWORD *)this + 127);
  if (v3 == 4)
  {
    v4 = "rotate(";
LABEL_3:
    v5 = 8;
  }
  else
  {
    v4 = "";
    v5 = 1;
    switch(v3)
    {
      case 1:
        v4 = "matrix(";
        goto LABEL_3;
      case 2:
        v4 = "translate(";
        v5 = 11;
        break;
      case 3:
        v4 = "scale(";
        goto LABEL_17;
      case 5:
        v4 = "skewX(";
        goto LABEL_17;
      case 6:
        v4 = "skewY(";
LABEL_17:
        v5 = 7;
        break;
      default:
        break;
    }
  }
  v6 = *a2;
  if (*a2)
    *(_DWORD *)v6 += 2;
  v9 = v6;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)v4, v5, (uint64_t *)&v9, 41, a3);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::SVGAnimationElement *WebCore::SVGAnimationElement::SVGAnimationElement(WebCore::SVGAnimationElement *this, const WebCore::QualifiedName *a2, WebCore::Document *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  *(_QWORD *)this = off_1E3455F60;
  *((_QWORD *)this + 14) = &unk_1E3456520;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E3455B60;
  v6[1] = this;
  v26 = v6;
  WebCore::SVGElement::SVGElement((uint64_t)this, (_DWORD **)a2, (uint64_t)a3, (uint64_t *)&v26, 0);
  *(_QWORD *)this = off_1E347A958;
  *((_QWORD *)this + 14) = &unk_1E347AEE0;
  v7 = WebCore::anyName;
  if (WebCore::anyName)
    ++*(_DWORD *)WebCore::anyName;
  *((_QWORD *)this + 22) = v7;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_WORD *)this + 104) = 0;
  *((_BYTE *)this + 210) = 1;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 33) = 0x7FEFFFFFFFFFFFFFLL;
  *((int64x2_t *)this + 17) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *((_QWORD *)this + 36) = 0;
  *((_DWORD *)this + 74) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_DWORD *)this + 80) = 0;
  *((_QWORD *)this + 41) = 0xBFF0000000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 21) = _Q0;
  *((_OWORD *)this + 22) = _Q0;
  WebCore::SVGSMILElement::resolveFirstInterval(this);
  if (v26)
    (*(void (**)(_QWORD *))(*v26 + 8))(v26);
  *(_QWORD *)this = off_1E3455F60;
  *((_QWORD *)this + 14) = &unk_1E3456520;
  if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v13 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 8) = this;
    *(_BYTE *)(v13 + 32) = 0;
    v15 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v15 & 0xFFFF000000000000 | v13;
    v16 = v15 & 0xFFFFFFFFFFFFLL;
    if ((v15 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)v16));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)v16);
        v22 = *(unsigned int *)(v16 + 28);
        if ((_DWORD)v22)
        {
          v25 = v16;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v22));
          v16 = v25;
        }
        v23 = *(WTF **)(v16 + 16);
        if (v23)
        {
          *(_QWORD *)(v16 + 16) = 0;
          *(_DWORD *)(v16 + 24) = 0;
          v24 = v16;
          WTF::fastFree(v23, v14);
          v16 = v24;
        }
        WTF::fastFree((WTF *)v16, v14);
      }
    }
  }
  v19 = (unsigned int *)(*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *(_QWORD *)this = off_1E3455F60;
  *((_QWORD *)this + 14) = &unk_1E3456520;
  *((_QWORD *)this + 46) = v19;
  *((_QWORD *)this + 47) = 0;
  *((_WORD *)this + 192) = 512;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_WORD *)this + 244) = 1;
  return this;
}

uint64_t WebCore::SVGAnimationElement::attributeContainsJavaScriptURL(WebCore::SVGAnimationElement *this, const WebCore::Attribute *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t IsJavaScript;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  __int16 v21;
  char v22;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == WebCore::SVGNames::fromAttr || v2 == WebCore::SVGNames::toAttr)
    return WTF::protocolIsJavaScript();
  if (v2 != WebCore::SVGNames::valuesAttr)
  {
    if ((*(unsigned int (**)(WebCore::SVGAnimationElement *, const WebCore::Attribute *))(*(_QWORD *)this + 600))(this, a2))
    {
      return WTF::protocolIsJavaScript();
    }
    return 0;
  }
  v5 = *((_QWORD *)a2 + 1);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  v19 = v6;
  v20 = v7;
  v21 = 59;
  v22 = 0;
  v15 = &v19;
  v16 = 0;
  v18 = (_DWORD)v7 == 0;
  result = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v15);
  v8 = v20;
  v9 = v16;
  if (v16 == (_DWORD)v20)
  {
    IsJavaScript = 0;
    if (v18)
      return IsJavaScript;
  }
  while (1)
  {
    v11 = *((unsigned int *)v15 + 2);
    if (v11 <= v9)
      goto LABEL_20;
    v12 = v17;
    if (v11 - v9 <= v17)
    {
      if (!v9)
        goto LABEL_20;
      v12 = v11 - v9;
    }
    v13 = v11 - v9;
    if (!*((_BYTE *)v15 + 12))
      break;
    if (v13 < v12)
      goto LABEL_31;
LABEL_20:
    IsJavaScript = WTF::protocolIsJavaScript();
    if ((IsJavaScript & 1) == 0)
    {
      result = WTF::StringView::SplitResult::Iterator::operator++();
      v9 = v16;
      if (v16 != v8 || !v18)
        continue;
    }
    return IsJavaScript;
  }
  if (v13 >= v12)
    goto LABEL_20;
LABEL_31:
  __break(1u);
  return result;
}

WTF *WebCore::parseKeyTimes(WTF **a1, uint64_t a2, uint64_t a3, int a4)
{
  WTF *result;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  WTF *v20;
  int v21;
  unint64_t v22;
  int v23;
  void *v24;
  float v25;
  int v27;
  float v28;
  WTF *v29;
  WTF *v30;
  float v31;
  char v32;
  WTF **v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  char v42;

  v39 = a2;
  v40 = a3;
  v41 = 59;
  v42 = 0;
  v37 = 0;
  v38 = 0;
  v33 = (WTF **)&v39;
  v34 = 0;
  v36 = (_DWORD)a3 == 0;
  result = (WTF *)WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v33);
  v7 = v40;
  v8 = v34;
  if (v34 != (_DWORD)v40 || !v36)
  {
    while (1)
    {
      v9 = *((unsigned int *)v33 + 2);
      if (v9 <= v8)
      {
LABEL_34:
        v10 = 0x100000000;
        goto LABEL_43;
      }
      LODWORD(v10) = v35;
      if (v9 - v8 <= v35)
      {
        if (!v8)
        {
          result = *v33;
          v10 = (unint64_t)v33[1];
          goto LABEL_12;
        }
        LODWORD(v10) = v9 - v8;
      }
      v11 = v8;
      v10 = v10;
      v12 = v9 - v8;
      if (*((_BYTE *)v33 + 12))
      {
        if (v12 < v10)
          goto LABEL_70;
        result = (WTF *)((char *)*v33 + v11);
        v10 = v10 | 0x100000000;
      }
      else
      {
        if (v12 < v10)
          goto LABEL_70;
        result = (WTF *)((char *)*v33 + 2 * v11);
      }
LABEL_12:
      v13 = v10;
      if ((v10 & 0xFF00000000) != 0)
      {
        if ((_DWORD)v10)
        {
          v14 = 0;
          while (1)
          {
            v15 = *((unsigned __int8 *)result + v14);
            if ((v15 - 9) >= 5 && v15 != 32)
              break;
            if (v10 == ++v14)
              goto LABEL_34;
          }
          if ((_DWORD)v10 != 1)
          {
            v16 = (v10 - 1);
            while (v16 < v10)
            {
              v17 = *((unsigned __int8 *)result + v16);
              if ((v17 - 9) < 5 || v17 == 32)
              {
                if ((_DWORD)--v16)
                  continue;
              }
              if (!(_DWORD)v14 && (_DWORD)v16 == (_DWORD)v10 - 1)
                goto LABEL_43;
              goto LABEL_27;
            }
LABEL_70:
            __break(1u);
LABEL_71:
            v29 = v37;
            v30 = v38;
            goto LABEL_73;
          }
          if ((_DWORD)v14)
          {
            LODWORD(v16) = 0;
LABEL_27:
            v18 = (v16 - v14 + 1);
            if (v13 - v14 < v18)
              goto LABEL_70;
            v10 = v18 | 0x100000000;
          }
        }
      }
      else if ((_DWORD)v10)
      {
        v19 = 0;
        v20 = result;
        while (1)
        {
          v21 = *(unsigned __int16 *)v20;
          if ((v21 - 9) >= 5 && v21 != 32)
            break;
          ++v19;
          v20 = (WTF *)((char *)v20 + 2);
          if (v10 == v19)
            goto LABEL_34;
        }
        if ((_DWORD)v10 != 1)
        {
          v22 = (v10 - 1);
          while (v22 < v10)
          {
            v23 = *((unsigned __int16 *)result + v22);
            if ((v23 - 9) < 5 || v23 == 32)
            {
              if ((_DWORD)--v22)
                continue;
            }
            if ((_DWORD)v19 || (_DWORD)v22 != (_DWORD)v10 - 1)
              goto LABEL_69;
            goto LABEL_43;
          }
          goto LABEL_70;
        }
        if ((_DWORD)v19)
        {
          LODWORD(v22) = 0;
LABEL_69:
          v10 = (v22 - v19 + 1);
          result = v20;
          if (v13 - v19 < v10)
            goto LABEL_70;
        }
      }
LABEL_43:
      v32 = 0;
      v31 = 0.0;
      if ((v10 & 0xFF00000000) != 0)
        WTF::charactersToFloat();
      else
        WTF::charactersToFloat();
      v31 = v25;
      if (!v32)
        goto LABEL_75;
      if (v25 < 0.0 || v25 > 1.0)
        goto LABEL_75;
      v27 = HIDWORD(v38);
      if (a4)
      {
        v28 = v25;
        if (HIDWORD(v38))
        {
          if (v25 >= *((float *)v37 + HIDWORD(v38) - 1))
            v28 = 0.0;
          else
            v28 = 1.0;
        }
        if (v28 != 0.0)
        {
LABEL_75:
          *a1 = 0;
          a1[1] = 0;
          result = v37;
          if (v37)
          {
            v37 = 0;
            LODWORD(v38) = 0;
            return (WTF *)WTF::fastFree(result, v24);
          }
          return result;
        }
      }
      if (HIDWORD(v38) == (_DWORD)v38)
      {
        WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>((uint64_t)&v37, (unint64_t)&v31);
      }
      else
      {
        *((float *)v37 + HIDWORD(v38)) = v25;
        HIDWORD(v38) = v27 + 1;
      }
      result = (WTF *)WTF::StringView::SplitResult::Iterator::operator++();
      v8 = v34;
      if (v34 == v7 && v36)
        goto LABEL_71;
    }
  }
  v29 = 0;
  v30 = 0;
LABEL_73:
  *a1 = v29;
  a1[1] = v30;
  return result;
}

WTF::StringImpl *WebCore::SVGAnimationElement::svgAttributeChanged(WebCore::SVGAnimationElement *this, const WebCore::QualifiedName *a2)
{
  _QWORD v5[3];
  _BYTE v6[24];

  if (byte_1ECE84D11 == 1)
  {
    if (!qword_1ECE84F38)
      return WebCore::SVGSMILElement::svgAttributeChanged(this, a2);
  }
  else
  {
    memset(v5, 0, 21);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v5, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::requiredFeaturesAttr, (uint64_t)v6);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v5, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::requiredExtensionsAttr, (uint64_t)v6);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v5, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::systemLanguageAttr, (uint64_t)v6);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v5, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::valuesAttr, (uint64_t)v6);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v5, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::keyTimesAttr, (uint64_t)v6);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v5, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::keyPointsAttr, (uint64_t)v6);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v5, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::keySplinesAttr, (uint64_t)v6);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v5, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::attributeTypeAttr, (uint64_t)v6);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v5, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::calcModeAttr, (uint64_t)v6);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v5, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::fromAttr, (uint64_t)v6);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v5, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::toAttr, (uint64_t)v6);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v5, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::byAttr, (uint64_t)v6);
    qword_1ECE84F38 = v5[0];
    qword_1ECE84F40 = v5[1];
    dword_1ECE84F48 = v5[2];
    byte_1ECE84F4C = BYTE4(v5[2]);
    byte_1ECE84D11 = 1;
    if (!v5[0])
      return WebCore::SVGSMILElement::svgAttributeChanged(this, a2);
  }
  if (WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::lookup<WTF::HashSetTranslatorAdapter<WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(&qword_1ECE84F38, (uint64_t *)a2))
  {
    return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::SVGAnimationElement *))(*(_QWORD *)this + 1328))(this);
  }
  return WebCore::SVGSMILElement::svgAttributeChanged(this, a2);
}

uint64_t WebCore::SVGAnimationElement::animationAttributeChanged(uint64_t this)
{
  *(_BYTE *)(this + 384) = 0;
  *(_DWORD *)(this + 288) = 0;
  return this;
}

float WebCore::SVGAnimationElement::calculatePercentFromKeyPoints(WebCore::SVGAnimationElement *this, float a2)
{
  uint64_t v2;
  float v3;
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  float v14;
  float v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v30;
  double v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  double v42;

  if (a2 == 1.0)
  {
    v2 = *((unsigned int *)this + 113);
    if (!(_DWORD)v2)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D5D04);
    }
    return *(float *)(*((_QWORD *)this + 55) + 4 * v2 - 4);
  }
  v4 = *((unsigned __int8 *)this + 488);
  v5 = (char *)this + 408;
  if (v4 == 2)
  {
    v5 = (char *)this + 424;
    if (*((_BYTE *)this + 489) == 6)
      v5 = (char *)this + 408;
  }
  v6 = *((unsigned int *)v5 + 3);
  v7 = v6 - (v4 != 0);
  if ((_DWORD)v6)
    v8 = v7 >= 2;
  else
    v8 = 0;
  if (v8)
  {
    v9 = 1;
    while (1)
    {
      if (v6 == v9)
        goto LABEL_45;
      if (*(float *)(*(_QWORD *)v5 + 4 * v9) > a2)
        break;
      if (v7 == ++v9)
        goto LABEL_18;
    }
    LODWORD(v7) = v9;
  }
  else
  {
    LODWORD(v7) = 1;
  }
LABEL_18:
  v10 = (v7 - 1);
  v11 = *((_DWORD *)this + 113);
  if (v11 <= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x1965D5D0CLL);
  }
  v12 = *((_QWORD *)this + 55);
  v3 = *(float *)(v12 + 4 * v10);
  if (*((_BYTE *)this + 488))
  {
    v13 = *((_DWORD *)this + 105);
    if (v13 <= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D5D14);
    }
    if (v13 <= v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D5D1CLL);
    }
    if (v11 <= v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D5D24);
    }
    v14 = *(float *)(v12 + 4 * v7);
    v15 = (float)(a2 - *(float *)(*((_QWORD *)this + 51) + 4 * v10))
        / (float)(*(float *)(*((_QWORD *)this + 51) + 4 * v7)
                - *(float *)(*((_QWORD *)this + 51) + 4 * v10));
    if (v4 != 3)
      return v3 + (float)((float)(v14 - v3) * v15);
    if (*((_DWORD *)this + 117) <= v10)
    {
LABEL_45:
      __break(0xC471u);
      JUMPOUT(0x1965D5CFCLL);
    }
    v16 = *((_QWORD *)this + 57) + 152 * v10;
    v17 = *(_OWORD *)(v16 + 16);
    v32 = *(_OWORD *)v16;
    v33 = v17;
    v18 = *(_OWORD *)(v16 + 80);
    v20 = *(_OWORD *)(v16 + 32);
    v19 = *(_OWORD *)(v16 + 48);
    v36 = *(_OWORD *)(v16 + 64);
    v37 = v18;
    v34 = v20;
    v35 = v19;
    v22 = *(_OWORD *)(v16 + 112);
    v21 = *(_OWORD *)(v16 + 128);
    v23 = *(_OWORD *)(v16 + 96);
    v41 = *(_QWORD *)(v16 + 144);
    v39 = v22;
    v40 = v21;
    v38 = v23;
    WebCore::SVGSMILElement::dur((uint64_t)this, &v42);
    if (v42 <= 3.40282347e38)
      v24 = v42;
    else
      v24 = 3.40282347e38;
    v25 = v15;
    v26 = 0.00005;
    if (v24 < 3.40282347e38)
      v26 = 1.0 / (v24 * 200.0);
    if (v15 < 0.0)
    {
      v30 = *(double *)&v35;
      v31 = 0.0;
    }
    else
    {
      if (v15 <= 1.0)
      {
        v27 = WebCore::UnitBezier::solveCurveX((WebCore::UnitBezier *)&v32, v25, v26);
        v28 = v27 * (*((double *)&v34 + 1) + (*(double *)&v34 + *((double *)&v33 + 1) * v27) * v27);
LABEL_33:
        v15 = v28;
        return v3 + (float)((float)(v14 - v3) * v15);
      }
      v30 = *((double *)&v35 + 1);
      v25 = v25 + -1.0;
      v31 = 1.0;
    }
    v28 = v31 + v30 * v25;
    goto LABEL_33;
  }
  return v3;
}

WTF::StringImpl *WebCore::SVGAnimationElement::startedActiveInterval(WebCore::SVGAnimationElement *this)
{
  WTF::StringImpl *result;
  void *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t (*v49)(WebCore::SVGAnimationElement *, WTF::StringImpl **, WTF::StringImpl **);
  WTF::StringImpl **v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  unsigned int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  char v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  float v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  float v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  WTF *v94;
  uint64_t v95;
  WTF *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  WTF *v102;
  uint64_t v103;

  *((_BYTE *)this + 384) = 0;
  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::SVGAnimationElement *))(*(_QWORD *)this + 1312))(this);
  if (!(_DWORD)result)
    return result;
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(uint64_t **)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if (!(_DWORD)v7)
        goto LABEL_14;
    }
    else
    {
      v6 = (uint64_t *)(v4 + 32);
      LODWORD(v7) = v5 >> 5;
      if (!(v5 >> 5))
        goto LABEL_14;
    }
    v7 = v7;
    while (1)
    {
      v8 = *v6;
      if (*v6 == WebCore::SVGNames::keyPointsAttr
        || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::SVGNames::keyPointsAttr + 24)
        && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::SVGNames::keyPointsAttr + 32))
      {
        break;
      }
      v6 += 2;
      if (!--v7)
        goto LABEL_14;
    }
    if (*((_DWORD *)this + 113) != *((_DWORD *)this + 105))
      return result;
  }
LABEL_14:
  v9 = *((unsigned __int8 *)this + 488);
  if (v9 == 2)
  {
    v10 = *((unsigned __int8 *)this + 489);
    v11 = 0;
    if (v10 == 6)
      v12 = (char *)this + 408;
    else
      v12 = (char *)this + 424;
LABEL_25:
    if (!v4)
      goto LABEL_59;
    v17 = *(_DWORD *)(v4 + 4);
    if ((v17 & 1) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
  v12 = (char *)this + 408;
  v10 = *((unsigned __int8 *)this + 489);
  if (v9 != 3)
  {
    v11 = 0;
    goto LABEL_25;
  }
  v13 = *((unsigned int *)this + 117);
  if (!(_DWORD)v13)
    return result;
  if (v4)
  {
    v14 = *(_DWORD *)(v4 + 4);
    if ((v14 & 1) != 0)
    {
      v15 = *(uint64_t **)(v4 + 40);
      LODWORD(v16) = *(_DWORD *)(v4 + 52);
      if (!(_DWORD)v16)
        goto LABEL_43;
    }
    else
    {
      v15 = (uint64_t *)(v4 + 32);
      LODWORD(v16) = v14 >> 5;
      if (!(v14 >> 5))
        goto LABEL_43;
    }
    v16 = v16;
    while (1)
    {
      v23 = *v15;
      if (*v15 == WebCore::SVGNames::keyPointsAttr
        || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::SVGNames::keyPointsAttr + 24)
        && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::SVGNames::keyPointsAttr + 32))
      {
        break;
      }
      v15 += 2;
      if (!--v16)
        goto LABEL_43;
    }
    if (*((unsigned int *)this + 113) - 1 != v13)
      return result;
  }
LABEL_43:
  if (v10 == 5 && *((unsigned int *)this + 101) - 1 != v13)
    return result;
  if (!v4)
  {
    v21 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    v11 = 1;
    goto LABEL_60;
  }
  v17 = *(_DWORD *)(v4 + 4);
  if ((v17 & 1) != 0)
  {
    v24 = *(uint64_t **)(v4 + 40);
    v25 = *(_DWORD *)(v4 + 52);
    if (v25)
      goto LABEL_48;
LABEL_57:
    v11 = 1;
    if ((v17 & 1) == 0)
    {
LABEL_27:
      v18 = v4 + 32;
      v19 = v17 >> 5;
      if (v19)
        goto LABEL_28;
      goto LABEL_59;
    }
LABEL_58:
    v18 = *(_QWORD *)(v4 + 40);
    v19 = *(_DWORD *)(v4 + 52);
    if (v19)
    {
LABEL_28:
      v20 = v19;
      v21 = (WTF::StringImpl **)(v18 + 8);
      while (1)
      {
        v22 = (uint64_t)*(v21 - 1);
        if (v22 == WebCore::SVGNames::fromAttr
          || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::SVGNames::fromAttr + 24)
          && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::SVGNames::fromAttr + 32))
        {
          break;
        }
        v21 += 2;
        if (!--v20)
        {
          v21 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
LABEL_60:
      v28 = *v21;
      if (v28)
        *(_DWORD *)v28 += 2;
      v100 = v28;
      if (v4)
      {
        v29 = *(_DWORD *)(v4 + 4);
        if ((v29 & 1) != 0)
        {
          v30 = *(_QWORD *)(v4 + 40);
          LODWORD(v31) = *(_DWORD *)(v4 + 52);
          if ((_DWORD)v31)
          {
LABEL_65:
            v31 = v31;
            v32 = (WTF::StringImpl **)(v30 + 8);
            while (1)
            {
              v33 = (uint64_t)*(v32 - 1);
              if (v33 == WebCore::SVGNames::toAttr
                || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::SVGNames::toAttr + 24)
                && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::SVGNames::toAttr + 32))
              {
                break;
              }
              v32 += 2;
              if (!--v31)
              {
                v32 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                break;
              }
            }
LABEL_74:
            v34 = *v32;
            if (v34)
              *(_DWORD *)v34 += 2;
            v99 = v34;
            if (v4)
            {
              v35 = *(_DWORD *)(v4 + 4);
              if ((v35 & 1) != 0)
              {
                v36 = *(_QWORD *)(v4 + 40);
                LODWORD(v37) = *(_DWORD *)(v4 + 52);
                if ((_DWORD)v37)
                {
LABEL_79:
                  v37 = v37;
                  v38 = (WTF::StringImpl **)(v36 + 8);
                  while (1)
                  {
                    v39 = (uint64_t)*(v38 - 1);
                    if (v39 == WebCore::SVGNames::byAttr
                      || *(_QWORD *)(v39 + 24) == *(_QWORD *)(WebCore::SVGNames::byAttr + 24)
                      && *(_QWORD *)(v39 + 32) == *(_QWORD *)(WebCore::SVGNames::byAttr + 32))
                    {
                      break;
                    }
                    v38 += 2;
                    if (!--v37)
                    {
                      v38 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                      break;
                    }
                  }
LABEL_88:
                  v40 = *v38;
                  if (*v38)
                    *(_DWORD *)v40 += 2;
                  v98 = v40;
                  if (!v10)
                    goto LABEL_130;
                  if (!v4 || v10 > 4)
                    goto LABEL_116;
                  v41 = *(_DWORD *)(v4 + 4);
                  if ((v41 & 1) != 0)
                  {
                    v42 = *(uint64_t **)(v4 + 40);
                    LODWORD(v43) = *(_DWORD *)(v4 + 52);
                    if (!(_DWORD)v43)
                    {
LABEL_116:
                      switch(v10)
                      {
                        case 1u:
                          v49 = *(uint64_t (**)(WebCore::SVGAnimationElement *, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)this + 1416);
                          v50 = &v100;
                          goto LABEL_124;
                        case 2u:
                          v49 = *(uint64_t (**)(WebCore::SVGAnimationElement *, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)this + 1424);
                          v50 = &v100;
                          goto LABEL_127;
                        case 3u:
                          v49 = *(uint64_t (**)(WebCore::SVGAnimationElement *, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)this + 1416);
                          v50 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
LABEL_124:
                          v55 = &v99;
                          goto LABEL_128;
                        case 4u:
                          v49 = *(uint64_t (**)(WebCore::SVGAnimationElement *, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)this + 1424);
                          v50 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
LABEL_127:
                          v55 = &v98;
LABEL_128:
                          *((_BYTE *)this + 384) = v49(this, v50, v55);
                          goto LABEL_129;
                        case 5u:
                          v51 = *((unsigned int *)this + 101);
                          if (!(_DWORD)v51)
                            goto LABEL_201;
                          if (v9 == 2)
                            goto LABEL_180;
                          if (!v4)
                            goto LABEL_179;
                          v52 = *(_DWORD *)(v4 + 4);
                          if ((v52 & 1) != 0)
                          {
                            v53 = *(uint64_t **)(v4 + 40);
                            LODWORD(v54) = *(_DWORD *)(v4 + 52);
                          }
                          else
                          {
                            v53 = (uint64_t *)(v4 + 32);
                            LODWORD(v54) = v52 >> 5;
                          }
                          if (!(_DWORD)v54)
                            goto LABEL_179;
                          v54 = v54;
                          while (1)
                          {
                            v63 = *v53;
                            if (*v53 == WebCore::SVGNames::keyTimesAttr
                              || *(_QWORD *)(v63 + 24) == *(_QWORD *)(WebCore::SVGNames::keyTimesAttr + 24)
                              && *(_QWORD *)(v63 + 32) == *(_QWORD *)(WebCore::SVGNames::keyTimesAttr + 32))
                            {
                              break;
                            }
                            v53 += 2;
                            if (!--v54)
                              goto LABEL_179;
                          }
                          if ((v52 & 1) != 0)
                          {
                            v64 = *(uint64_t **)(v4 + 40);
                            LODWORD(v65) = *(_DWORD *)(v4 + 52);
                          }
                          else
                          {
                            v64 = (uint64_t *)(v4 + 32);
                            LODWORD(v65) = v52 >> 5;
                          }
                          if ((_DWORD)v65)
                          {
                            v65 = v65;
                            while (1)
                            {
                              v66 = *v64;
                              if (*v64 == WebCore::SVGNames::keyPointsAttr
                                || *(_QWORD *)(v66 + 24) == *(_QWORD *)(WebCore::SVGNames::keyPointsAttr + 24)
                                && *(_QWORD *)(v66 + 32) == *(_QWORD *)(WebCore::SVGNames::keyPointsAttr + 32))
                              {
                                break;
                              }
                              v64 += 2;
                              if (!--v65)
                                goto LABEL_178;
                            }
                          }
                          else
                          {
LABEL_178:
                            if ((_DWORD)v51 != *((_DWORD *)v12 + 3))
                              goto LABEL_201;
                          }
LABEL_179:
                          if (v9)
                          {
LABEL_180:
                            v67 = *((unsigned int *)v12 + 3);
                            if ((_DWORD)v67 && *(float *)(*(_QWORD *)v12 + 4 * v67 - 4) != 1.0)
                              goto LABEL_201;
                            if (v11)
                            {
                              v68 = *((unsigned int *)this + 117);
                              if ((!(_DWORD)v68 || v51 - 1 != v68) && *((unsigned int *)this + 113) - 1 != v68)
                                goto LABEL_201;
                            }
                          }
                          if (!v4
                            || ((v69 = *(_DWORD *)(v4 + 4), (v69 & 1) != 0)
                              ? (v70 = *(uint64_t **)(v4 + 40), LODWORD(v71) = *(_DWORD *)(v4 + 52))
                              : (v70 = (uint64_t *)(v4 + 32), LODWORD(v71) = v69 >> 5),
                                !(_DWORD)v71))
                          {
LABEL_202:
                            *((_BYTE *)this + 384) = 1;
LABEL_203:
                            v75 = (*(uint64_t (**)(WebCore::SVGAnimationElement *, uint64_t))(*(_QWORD *)this + 1432))(this, *((_QWORD *)this + 49) + 8 * v51 - 8);
                            *((_BYTE *)this + 384) = v75;
                            if (v9 == 2 && (v75 & 1) != 0)
                            {
                              v76 = *((_DWORD *)this + 101);
                              v77 = (v76 - 1);
                              if (v76 != 1)
                              {
                                if (*((_DWORD *)this + 108))
                                {
                                  if (*((_DWORD *)this + 109))
                                    *((_DWORD *)this + 109) = 0;
                                  v97 = (WTF *)*((_QWORD *)this + 53);
                                  if (v97)
                                  {
                                    *((_QWORD *)this + 53) = 0;
                                    *((_DWORD *)this + 108) = 0;
                                    WTF::fastFree(v97, v3);
                                  }
                                }
                                v102 = 0;
                                v103 = 0;
                                WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v102, 0x10uLL);
                                v78 = 0;
                                v79 = HIDWORD(v103);
                                *((_DWORD *)v102 + HIDWORD(v103)) = 0;
                                HIDWORD(v103) = v79 + 1;
                                v80 = 0.0;
                                v81 = 8;
                                while (1)
                                {
                                  v82 = *((unsigned int *)this + 101);
                                  if (v78 >= v82)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x1965D67D4);
                                  }
                                  if (++v78 >= v82)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x1965D67DCLL);
                                  }
                                  v83 = (*(uint64_t (**)(WebCore::SVGAnimationElement *, uint64_t))(*(_QWORD *)this + 1448))(this, *((_QWORD *)this + 49) + v81 - 8);
                                  v101 = v83;
                                  if ((v83 & 0xFF00000000) == 0)
                                    break;
                                  v84 = *(float *)&v83;
                                  v85 = HIDWORD(v103);
                                  if (HIDWORD(v103) == (_DWORD)v103)
                                  {
                                    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>((uint64_t)&v102, (unint64_t)&v101);
                                  }
                                  else
                                  {
                                    *((_DWORD *)v102 + HIDWORD(v103)) = v83;
                                    HIDWORD(v103) = v85 + 1;
                                  }
                                  v80 = v80 + v84;
                                  v81 += 8;
                                  if (v77 == v78)
                                  {
                                    if (v80 != 0.0)
                                    {
                                      v86 = HIDWORD(v103);
                                      v87 = HIDWORD(v103) - 1;
                                      if (v87 >= 2)
                                      {
                                        if (HIDWORD(v103) <= 1)
                                          v88 = 1;
                                        else
                                          v88 = HIDWORD(v103);
                                        v89 = HIDWORD(v103) - 2;
                                        v90 = (float *)((char *)v102 + 4);
                                        v91 = v88 - 1;
                                        v92 = (HIDWORD(v103) + 1) - 1;
                                        do
                                        {
                                          if (!v92)
                                          {
                                            __break(0xC471u);
                                            JUMPOUT(0x1965D67E4);
                                          }
                                          if (!v91)
                                          {
                                            __break(0xC471u);
                                            JUMPOUT(0x1965D67ECLL);
                                          }
                                          *v90 = *(v90 - 1) + (float)(*v90 / v80);
                                          ++v90;
                                          --v91;
                                          --v92;
                                          --v89;
                                        }
                                        while (v89);
                                      }
                                      if (!v86)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x1965D67F4);
                                      }
                                      *((_DWORD *)v102 + v87) = 1065353216;
                                      v93 = (WTF *)*((_QWORD *)this + 53);
                                      if (v93)
                                      {
                                        *((_QWORD *)this + 53) = 0;
                                        *((_DWORD *)this + 108) = 0;
                                        WTF::fastFree(v93, v3);
                                      }
                                      v94 = v102;
                                      v102 = 0;
                                      *((_QWORD *)this + 53) = v94;
                                      v95 = v103;
                                      HIDWORD(v103) = 0;
                                      *((_QWORD *)this + 54) = v95;
                                    }
                                    break;
                                  }
                                }
                                v96 = v102;
                                if (v102)
                                {
                                  v102 = 0;
                                  LODWORD(v103) = 0;
                                  WTF::fastFree(v96, v3);
                                }
                              }
                            }
LABEL_129:
                            v40 = v98;
LABEL_130:
                            v98 = 0;
                            if (v40)
                            {
                              if (*(_DWORD *)v40 == 2)
                                WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v3);
                              else
                                *(_DWORD *)v40 -= 2;
                            }
                            v56 = v99;
                            v99 = 0;
                            if (v56)
                            {
                              if (*(_DWORD *)v56 == 2)
                                WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v3);
                              else
                                *(_DWORD *)v56 -= 2;
                            }
                            result = v100;
                            v100 = 0;
                            if (result)
                            {
                              if (*(_DWORD *)result == 2)
                                return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v3);
                              else
                                *(_DWORD *)result -= 2;
                            }
                            return result;
                          }
                          v71 = v71;
                          while (1)
                          {
                            v72 = *v70;
                            if (*v70 == WebCore::SVGNames::keyPointsAttr
                              || *(_QWORD *)(v72 + 24) == *(_QWORD *)(WebCore::SVGNames::keyPointsAttr + 24)
                              && *(_QWORD *)(v72 + 32) == *(_QWORD *)(WebCore::SVGNames::keyPointsAttr + 32))
                            {
                              break;
                            }
                            v70 += 2;
                            if (!--v71)
                              goto LABEL_202;
                          }
                          v73 = *((_DWORD *)v12 + 3);
                          if (v73 >= 2)
                          {
                            v74 = v73 == *((_DWORD *)this + 113);
                            *((_BYTE *)this + 384) = v74;
                            if (!v74)
                              goto LABEL_129;
                            goto LABEL_203;
                          }
LABEL_201:
                          *((_BYTE *)this + 384) = 0;
                          goto LABEL_129;
                        case 6u:
                          if (!v4)
                            goto LABEL_156;
                          v57 = *(_DWORD *)(v4 + 4);
                          if ((v57 & 1) != 0)
                          {
                            v58 = *(uint64_t **)(v4 + 40);
                            LODWORD(v59) = *(_DWORD *)(v4 + 52);
                          }
                          else
                          {
                            v58 = (uint64_t *)(v4 + 32);
                            LODWORD(v59) = v57 >> 5;
                          }
                          if (!(_DWORD)v59)
                            goto LABEL_156;
                          v59 = v59;
                          while (1)
                          {
                            v60 = *v58;
                            if (*v58 == WebCore::SVGNames::keyPointsAttr
                              || *(_QWORD *)(v60 + 24) == *(_QWORD *)(WebCore::SVGNames::keyPointsAttr + 24)
                              && *(_QWORD *)(v60 + 32) == *(_QWORD *)(WebCore::SVGNames::keyPointsAttr + 32))
                            {
                              break;
                            }
                            v58 += 2;
                            if (!--v59)
                            {
LABEL_156:
                              v62 = 1;
                              goto LABEL_157;
                            }
                          }
                          v61 = *((_DWORD *)v12 + 3);
                          v62 = v61 >= 2 && v61 == *((_DWORD *)this + 113);
LABEL_157:
                          *((_BYTE *)this + 384) = v62;
                          goto LABEL_129;
                        default:
                          goto LABEL_129;
                      }
                    }
                  }
                  else
                  {
                    v42 = (uint64_t *)(v4 + 32);
                    LODWORD(v43) = v41 >> 5;
                    if (!(v41 >> 5))
                      goto LABEL_116;
                  }
                  v43 = v43;
                  while (1)
                  {
                    v44 = *v42;
                    if (*v42 == WebCore::SVGNames::keyPointsAttr
                      || *(_QWORD *)(v44 + 24) == *(_QWORD *)(WebCore::SVGNames::keyPointsAttr + 24)
                      && *(_QWORD *)(v44 + 32) == *(_QWORD *)(WebCore::SVGNames::keyPointsAttr + 32))
                    {
                      break;
                    }
                    v42 += 2;
                    if (!--v43)
                      goto LABEL_116;
                  }
                  if ((v41 & 1) != 0)
                  {
                    v45 = *(uint64_t **)(v4 + 40);
                    LODWORD(v46) = *(_DWORD *)(v4 + 52);
                  }
                  else
                  {
                    v45 = (uint64_t *)(v4 + 32);
                    LODWORD(v46) = v41 >> 5;
                  }
                  if ((_DWORD)v46)
                  {
                    v46 = v46;
                    while (1)
                    {
                      v47 = *v45;
                      if (*v45 == WebCore::SVGNames::keyTimesAttr
                        || *(_QWORD *)(v47 + 24) == *(_QWORD *)(WebCore::SVGNames::keyTimesAttr + 24)
                        && *(_QWORD *)(v47 + 32) == *(_QWORD *)(WebCore::SVGNames::keyTimesAttr + 32))
                      {
                        break;
                      }
                      v45 += 2;
                      if (!--v46)
                        goto LABEL_116;
                    }
                    v48 = *((_DWORD *)v12 + 3);
                    if (v48 < 2 || v48 != *((_DWORD *)this + 113))
                      goto LABEL_129;
                  }
                  goto LABEL_116;
                }
              }
              else
              {
                v36 = v4 + 32;
                LODWORD(v37) = v35 >> 5;
                if (v35 >> 5)
                  goto LABEL_79;
              }
            }
            v38 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            goto LABEL_88;
          }
        }
        else
        {
          v30 = v4 + 32;
          LODWORD(v31) = v29 >> 5;
          if (v29 >> 5)
            goto LABEL_65;
        }
      }
      v32 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      goto LABEL_74;
    }
LABEL_59:
    v21 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_60;
  }
  v24 = (uint64_t *)(v4 + 32);
  v25 = v17 >> 5;
  if (!(v17 >> 5))
    goto LABEL_57;
LABEL_48:
  v26 = v25;
  while (1)
  {
    v27 = *v24;
    if (*v24 == WebCore::SVGNames::keyTimesAttr
      || *(_QWORD *)(v27 + 24) == *(_QWORD *)(WebCore::SVGNames::keyTimesAttr + 24)
      && *(_QWORD *)(v27 + 32) == *(_QWORD *)(WebCore::SVGNames::keyTimesAttr + 32))
    {
      break;
    }
    v24 += 2;
    v11 = 1;
    if (!--v26)
      goto LABEL_25;
  }
  if (*((unsigned int *)this + 105) - 1 == v13)
  {
    v11 = 1;
    goto LABEL_25;
  }
  return result;
}

WTF::StringImpl *WebCore::SVGAnimationElement::updateAnimation(WTF::StringImpl *this, float a2, uint64_t a3, const WTF::StringImpl *a4)
{
  float v5;
  WTF::StringImpl *v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  BOOL v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  float v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  const WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  int v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  double v105;

  if (!*((_BYTE *)this + 384))
    return this;
  v5 = a2;
  v6 = this;
  v7 = *((unsigned __int8 *)this + 488);
  v8 = *((unsigned __int8 *)this + 489);
  if (v8 != 5)
  {
    if (*((_DWORD *)this + 113))
    {
      if (v7 != 2 || v8 == 6)
        v5 = WebCore::SVGAnimationElement::calculatePercentFromKeyPoints(this, a2);
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, float))(*(_QWORD *)v6 + 1440))(v6, a3, v5);
    }
    if (v7 != 3)
    {
      v34 = (v8 & 0xFFFFFFFD) == 1 && v7 != 2 && v7 == 0;
      if (v34 && *((_DWORD *)this + 105) == 2)
      {
        if (*(float *)(*((_QWORD *)this + 51) + 4) >= a2)
          v5 = 0.0;
        else
          v5 = 1.0;
      }
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, float))(*(_QWORD *)v6 + 1440))(v6, a3, v5);
    }
    v25 = *((unsigned int *)this + 105);
    if (v25 < 2)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, float))(*(_QWORD *)v6 + 1440))(v6, a3, v5);
    if ((_DWORD)v25 == 2)
    {
      LODWORD(v26) = 1;
    }
    else
    {
      v26 = (v25 - 1);
      v74 = 1;
      while (1)
      {
        if (v25 == v74)
        {
          __break(0xC471u);
          JUMPOUT(0x1965D6FA0);
        }
        if (*(float *)(*((_QWORD *)this + 51) + 4 * v74) > a2)
          break;
        if (v26 == ++v74)
          goto LABEL_140;
      }
      LODWORD(v26) = v74;
    }
LABEL_140:
    v75 = v26 - 1;
    if (*((_DWORD *)this + 117) <= v75)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D6FE8);
    }
    v76 = *((_QWORD *)this + 57) + 152 * v75;
    v77 = *(_OWORD *)(v76 + 16);
    v95 = *(_OWORD *)v76;
    v96 = v77;
    v78 = *(_OWORD *)(v76 + 80);
    v80 = *(_OWORD *)(v76 + 32);
    v79 = *(_OWORD *)(v76 + 48);
    v99 = *(_OWORD *)(v76 + 64);
    v100 = v78;
    v97 = v80;
    v98 = v79;
    v82 = *(_OWORD *)(v76 + 112);
    v81 = *(_OWORD *)(v76 + 128);
    v83 = *(_OWORD *)(v76 + 96);
    v104 = *(_QWORD *)(v76 + 144);
    v102 = v82;
    v103 = v81;
    v101 = v83;
    WebCore::SVGSMILElement::dur((uint64_t)this, &v105);
    if (v105 <= 3.40282347e38)
      v84 = v105;
    else
      v84 = 3.40282347e38;
    v85 = v5;
    v86 = 0.00005;
    if (v84 < 3.40282347e38)
      v86 = 1.0 / (v84 * 200.0);
    if (v5 < 0.0)
    {
      v89 = *(double *)&v98;
      v90 = 0.0;
    }
    else
    {
      if (v5 <= 1.0)
      {
        v87 = WebCore::UnitBezier::solveCurveX((WebCore::UnitBezier *)&v95, v85, v86);
        v88 = v87 * (*((double *)&v97 + 1) + (*(double *)&v97 + *((double *)&v96 + 1) * v87) * v87);
LABEL_149:
        v5 = v88;
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, float))(*(_QWORD *)v6 + 1440))(v6, a3, v5);
      }
      v89 = *((double *)&v98 + 1);
      v85 = v85 + -1.0;
      v90 = 1.0;
    }
    v88 = v90 + v89 * v85;
    goto LABEL_149;
  }
  v93 = 0;
  v94 = 0;
  v9 = *((_DWORD *)this + 101);
  if (a2 == 1.0 || v9 == 1)
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D6FA8);
    }
    v11 = v9 - 1;
    v12 = *((_QWORD *)this + 49);
    v13 = *(WTF::StringImpl **)(v12 + 8 * v11);
    if (v13)
      *(_DWORD *)v13 += 2;
    v94 = v13;
    v14 = *(WTF::StringImpl **)(v12 + 8 * v11);
    if (v14)
      *(_DWORD *)v14 += 2;
    v93 = v14;
    v5 = 1.0;
    goto LABEL_101;
  }
  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::animateTag + 24))
  {
    if ((*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)this + 1312))(this))
    {
      v16 = (_DWORD *)WebCore::SVGAnimateElementBase::animator(v6);
      if (v16)
      {
        v17 = v16;
        ++v16[2];
        v18 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
        v19 = v18;
        if (v17[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
          if (!v19)
            goto LABEL_27;
          goto LABEL_26;
        }
        --v17[2];
        if ((v18 & 1) != 0)
LABEL_26:
          v7 = 0;
      }
    }
  }
LABEL_27:
  if (*((_DWORD *)v6 + 113) && v7 != 2)
  {
    v5 = WebCore::SVGAnimationElement::calculatePercentFromKeyPoints(v6, v5);
    v20 = *((unsigned int *)v6 + 101);
    v21 = v20 - 2;
    if (v5 != 1.0)
      v21 = (float)(v5 * (float)(unint64_t)(v20 - 1));
    if (v20 <= v21)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D6FB0);
    }
    v22 = *((_QWORD *)v6 + 49);
    v13 = *(WTF::StringImpl **)(v22 + 8 * v21);
    if (v13)
      *(_DWORD *)v13 += 2;
    v94 = v13;
    v23 = v21 + 1;
    if (v20 <= v23)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D6FB8);
    }
    v24 = *(WTF::StringImpl **)(v22 + 8 * v23);
    if (v24)
      *(_DWORD *)v24 += 2;
    v93 = v24;
    goto LABEL_101;
  }
  v27 = *((unsigned __int8 *)v6 + 488);
  if (v27 != 2)
  {
    v31 = *((unsigned int *)v6 + 105);
LABEL_61:
    v32 = (char *)v6 + 408;
    goto LABEL_62;
  }
  v28 = *((unsigned __int8 *)v6 + 489);
  v29 = v28 == 6;
  if (v28 == 6)
    v30 = 420;
  else
    v30 = 436;
  v31 = *(unsigned int *)((char *)v6 + v30);
  if (v29)
    goto LABEL_61;
  v32 = (char *)v6 + 424;
LABEL_62:
  v35 = *((unsigned int *)v32 + 3);
  v36 = v27 != 0;
  LODWORD(i) = 1;
  if ((_DWORD)v35)
  {
    v38 = (v35 - v36);
    if (v38 >= 2)
    {
      for (i = 1; i != v38; ++i)
      {
        if (v35 == i)
          goto LABEL_169;
        if (*(float *)(*(_QWORD *)v32 + 4 * i) > v5)
          goto LABEL_69;
      }
      LODWORD(i) = v38;
    }
  }
LABEL_69:
  v39 = (i - 1);
  if (!v7)
  {
    if ((_DWORD)v31)
      v44 = v39;
    else
      v44 = (float)((float)v9 * v5);
    if (*((_DWORD *)v6 + 101) <= v44)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D6FE0);
    }
    v45 = *((_QWORD *)v6 + 49);
    v13 = *(WTF::StringImpl **)(v45 + 8 * v44);
    if (v13)
      *(_DWORD *)v13 += 2;
    v94 = v13;
    v46 = *(WTF::StringImpl **)(v45 + 8 * v44);
    if (v46)
      *(_DWORD *)v46 += 2;
    v93 = v46;
    v5 = 0.0;
    goto LABEL_101;
  }
  if ((_DWORD)v31)
  {
    if (v31 <= v39)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D6FD0);
    }
    if (v31 <= i)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D6FD8);
    }
    v40 = *(_QWORD *)v32;
    v41 = *(float *)(v40 + 4 * v39);
    v42 = *(float *)(v40 + 4 * i);
    v43 = v9 - 1;
  }
  else
  {
    v43 = v9 - 1;
    v47 = (float)(v9 - 1) * v5;
    LODWORD(v39) = vcvtms_u32_f32(v47);
    v41 = (float)floorf(v47) / (float)(v9 - 1);
    v42 = (float)(v39 + 1) / (float)(v9 - 1);
  }
  v48 = v39 - ((_DWORD)v39 == v43);
  v49 = *((_DWORD *)v6 + 101);
  if (v49 <= v48)
  {
    __break(0xC471u);
    JUMPOUT(0x1965D6FC0);
  }
  v50 = *((_QWORD *)v6 + 49);
  v13 = *(WTF::StringImpl **)(v50 + 8 * v48);
  if (v13)
    *(_DWORD *)v13 += 2;
  v94 = v13;
  if (v49 <= (int)v48 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1965D6FC8);
  }
  v51 = *(WTF::StringImpl **)(v50 + 8 * (v48 + 1));
  if (v51)
    *(_DWORD *)v51 += 2;
  v93 = v51;
  v5 = (float)(v5 - v41) / (float)(v42 - v41);
  if (v7 == 3)
  {
    if (*((_DWORD *)v6 + 117) <= v48)
    {
LABEL_169:
      __break(0xC471u);
      JUMPOUT(0x1965D6F98);
    }
    v52 = *((_QWORD *)v6 + 57) + 152 * v48;
    v53 = *(_OWORD *)(v52 + 16);
    v95 = *(_OWORD *)v52;
    v96 = v53;
    v54 = *(_OWORD *)(v52 + 80);
    v56 = *(_OWORD *)(v52 + 32);
    v55 = *(_OWORD *)(v52 + 48);
    v99 = *(_OWORD *)(v52 + 64);
    v100 = v54;
    v97 = v56;
    v98 = v55;
    v58 = *(_OWORD *)(v52 + 112);
    v57 = *(_OWORD *)(v52 + 128);
    v59 = *(_OWORD *)(v52 + 96);
    v104 = *(_QWORD *)(v52 + 144);
    v102 = v58;
    v103 = v57;
    v101 = v59;
    WebCore::SVGSMILElement::dur((uint64_t)v6, &v105);
    if (v105 <= 3.40282347e38)
      v60 = v105;
    else
      v60 = 3.40282347e38;
    v61 = v5;
    v62 = 0.00005;
    if (v60 < 3.40282347e38)
      v62 = 1.0 / (v60 * 200.0);
    if (v5 < 0.0)
    {
      v91 = *(double *)&v98;
      v92 = 0.0;
    }
    else
    {
      if (v5 <= 1.0)
      {
        v63 = WebCore::UnitBezier::solveCurveX((WebCore::UnitBezier *)&v95, v61, v62);
        v64 = v63 * (*((double *)&v97 + 1) + (*(double *)&v97 + *((double *)&v96 + 1) * v63) * v63);
LABEL_100:
        v5 = v64;
        v13 = v94;
        goto LABEL_101;
      }
      v91 = *((double *)&v98 + 1);
      v61 = v61 + -1.0;
      v92 = 1.0;
    }
    v64 = v92 + v91 * v61;
    goto LABEL_100;
  }
LABEL_101:
  if (WTF::equal(v13, *((const WTF::StringImpl **)v6 + 59), a4))
  {
    v66 = v93;
    if ((WTF::equal(v93, *((const WTF::StringImpl **)v6 + 60), v65) & 1) != 0)
    {
LABEL_114:
      v93 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v67);
        else
          *(_DWORD *)v66 -= 2;
      }
      v72 = v94;
      v94 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
          WTF::StringImpl::destroy(v72, v67);
        else
          *(_DWORD *)v72 -= 2;
      }
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, float))(*(_QWORD *)v6 + 1440))(v6, a3, v5);
    }
  }
  v68 = (*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v6 + 1416))(v6, &v94, &v93);
  *((_BYTE *)v6 + 384) = v68;
  if (v68)
  {
    v69 = v94;
    if (v94)
      *(_DWORD *)v94 += 2;
    v70 = (WTF::StringImpl *)*((_QWORD *)v6 + 59);
    *((_QWORD *)v6 + 59) = v69;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v67);
      else
        *(_DWORD *)v70 -= 2;
    }
    v66 = v93;
    if (v93)
      *(_DWORD *)v93 += 2;
    v71 = (WTF::StringImpl *)*((_QWORD *)v6 + 60);
    *((_QWORD *)v6 + 60) = v66;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
      {
        WTF::StringImpl::destroy(v71, v67);
        v66 = v93;
      }
      else
      {
        *(_DWORD *)v71 -= 2;
      }
    }
    goto LABEL_114;
  }
  v73 = v93;
  v93 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v67);
    else
      *(_DWORD *)v73 -= 2;
  }
  this = v94;
  v94 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v67);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::SVGAnimationElement::resetAnimation(WebCore::SVGAnimationElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::SVGCircleElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  int v24;

  v24 = 0;
  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 == 790)
  {
    v11 = a1[30];
    v16 = *a4;
    if (*a4)
    {
      v13 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
      v14 = *((unsigned int *)v16 + 1) | ((unint64_t)((*((_DWORD *)v16 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v13 = 0;
      v14 = 0x100000000;
    }
    v15 = 2;
    v17 = 1;
  }
  else
  {
    if (v10 == 419)
    {
      v11 = a1[29];
      v18 = *a4;
      if (*a4)
      {
        v13 = (unsigned __int16 *)*((_QWORD *)v18 + 1);
        v14 = *((unsigned int *)v18 + 1) | ((unint64_t)((*((_DWORD *)v18 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v14 = 0x100000000;
      }
      v15 = 1;
    }
    else
    {
      if (v10 != 418)
        goto LABEL_16;
      v11 = a1[28];
      v12 = *a4;
      if (*a4)
      {
        v13 = (unsigned __int16 *)*((_QWORD *)v12 + 1);
        v14 = *((unsigned int *)v12 + 1) | ((unint64_t)((*((_DWORD *)v12 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v14 = 0x100000000;
      }
      v15 = 0;
    }
    v17 = 0;
  }
  v19 = WebCore::SVGLengthValue::construct(v15, v13, v14, &v24, v17);
  v20 = *(_QWORD *)(v11 + 40);
  *(_DWORD *)(v20 + 28) = v19;
  *(_WORD *)(v20 + 32) = WORD2(v19);
  v21 = *(_QWORD *)(v11 + 48);
  if (v21)
  {
    *(_DWORD *)(v21 + 28) = v19;
    *(_WORD *)(v21 + 32) = WORD2(v19);
  }
LABEL_16:
  WebCore::SVGElement::reportAttributeParsingError((uint64_t)a1, v24, a2, a4);
  return WebCore::SVGGeometryElement::attributeChanged((uint64_t)a1, a2, a3, (WTF::AtomString *)a4, a5, v22);
}

void WebCore::SVGCircleElement::svgAttributeChanged(WebCore::SVGCircleElement *this, WTF::StringImpl ***a2)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  void *v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;

  if ((byte_1ECE84D58 & 1) != 0)
  {
    v4 = qword_1ECE84D50;
    if (!qword_1ECE84D50)
      goto LABEL_35;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v4 = qword_1ECE84D50;
    if (v5)
      goto LABEL_4;
    if (qword_1ECE84D50)
      v5 = (WTF::StringImpl ***)(qword_1ECE84D50 + 16 * *(unsigned int *)(qword_1ECE84D50 - 4));
    else
LABEL_35:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
LABEL_4:
  if ((byte_1ECE84D58 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
  if ((WTF::StringImpl ***)v4 == v5 || !v5[1])
  {
    WebCore::SVGGeometryElement::svgAttributeChanged(this, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
  }
  else
  {
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v14 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 8) = this;
      *(_BYTE *)(v14 + 32) = 0;
      v16 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v16 & 0xFFFF000000000000 | v14;
      v17 = v16 & 0xFFFFFFFFFFFFLL;
      if ((v16 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v18 = __ldaxr((unsigned int *)v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, (unsigned int *)v17));
        if (!v19)
        {
          atomic_store(1u, (unsigned int *)v17);
          v20 = *(unsigned int *)(v17 + 28);
          if ((_DWORD)v20)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v17 + 16), (WTF::StringImpl *)(*(_QWORD *)(v17 + 16) + 32 * v20));
          v21 = *(WTF **)(v17 + 16);
          if (v21)
          {
            *(_QWORD *)(v17 + 16) = 0;
            *(_DWORD *)(v17 + 24) = 0;
            WTF::fastFree(v21, v15);
          }
          WTF::fastFree((WTF *)v17, v15);
        }
      }
    }
    v6 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
    v8 = *((_QWORD *)this + 13);
    if (!v8 || (v9 = *(_DWORD *)(v8 + 4), (v9 & 1) == 0))
    {
      WebCore::Element::createUniqueElementData(this);
      v8 = *((_QWORD *)this + 13);
      v9 = *(_DWORD *)(v8 + 4);
    }
    *(_DWORD *)(v8 + 4) = v9 | 4;
    WebCore::Element::invalidateStyle(this);
    WebCore::SVGGraphicsElement::invalidateResourceImageBuffersIfNeeded(this);
    WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v6 + 8), v10);
    do
    {
      v12 = __ldaxr((unsigned int *)v6);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v6));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v6);
      v22 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v22)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v22));
      v23 = *(WTF **)(v6 + 16);
      if (v23)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        WTF::fastFree(v23, v11);
      }
      WTF::fastFree((WTF *)v6, v11);
    }
  }
}

void WebCore::SVGElement::InstanceInvalidationGuard::~InstanceInvalidationGuard(WebCore::SVGElement::InstanceInvalidationGuard *this, void *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  WebCore::SVGElement::invalidateInstances(*(_QWORD **)(*(_QWORD *)this + 8), a2);
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, v3);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v25;
  WebCore::SVGElement::InstanceInvalidationGuard *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::SVGElement::InstanceInvalidationGuard *v31;
  uint64_t *v32;
  WTF *v33;
  WebCore::SVGElement::InstanceInvalidationGuard *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  WebCore::SVGUseElement *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  WebCore::SVGUseElement *v45;
  WebCore::SVGElement::InstanceInvalidationGuard *v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  WebCore::SVGElement::InstanceInvalidationGuard *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::SVGUseElement *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 120);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 64) & 1) != 0)
      goto LABEL_12;
    v3 = (uint64_t *)(v2 + 40);
  }
  else
  {
    v3 = &WebCore::SVGElement::instances(void)const::emptyInstances;
    {
      WebCore::SVGElement::instances(void)const::emptyInstances = 0;
      *(_QWORD *)&dword_1EE2F9738 = 0;
      goto LABEL_4;
    }
  }
  v4 = *v3;
  if (!*v3)
  {
LABEL_4:
    *((_DWORD *)v3 + 2) = 0;
LABEL_5:
    v5 = 0;
    *((_DWORD *)v3 + 3) = 0;
LABEL_6:
    v6 = 0;
    v7 = 0;
    v4 = 0;
    v8 = 0;
    v9 = 0;
    v56 = 0;
    v57 = 0;
    v55 = (WebCore::SVGUseElement *)v3;
    v10 = 1;
    goto LABEL_7;
  }
  v17 = *(_DWORD *)(v4 - 4);
  if (!v17)
    goto LABEL_23;
  v21 = 0;
  v22 = v17 - 1;
  do
  {
    v23 = v4 + 8 * v22;
    if ((unint64_t)(*(_QWORD *)v23 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v23 + 8))
    {
      v31 = this;
      v32 = v3;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket((uint64_t *)(v4 + 8 * v22), a2);
      v3 = v32;
      this = v31;
      ++v21;
    }
  }
  while ((unint64_t)v22--);
  v4 = *v3;
  if (v21)
  {
    *(_DWORD *)(v4 - 16) += v21;
    v47 = v3;
    v48 = *v3;
    if (v48)
      v49 = *(_DWORD *)(v48 - 12);
    else
      v49 = 0;
    *(_DWORD *)(v48 - 12) = v49 - v21;
    v3 = v47;
    v4 = *v47;
  }
  if (!v4)
    goto LABEL_4;
  v25 = *(_DWORD *)(v4 - 4);
  if (v25 < 9 || 6 * *(_DWORD *)(v4 - 12) >= v25)
  {
LABEL_23:
    *((_DWORD *)v3 + 2) = 0;
  }
  else
  {
    v27 = this;
    v28 = v3;
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(v3);
    v4 = *v28;
    v3 = v28;
    *((_DWORD *)v28 + 2) = 0;
    this = v27;
    if (!v4)
      goto LABEL_5;
  }
  v18 = *(_DWORD *)(v4 - 12);
  if (v18 >= 0x7FFFFFFF)
    v19 = -2;
  else
    v19 = 2 * v18;
  *((_DWORD *)v3 + 3) = v19;
  v20 = *(unsigned int *)(v4 - 12);
  if ((_DWORD)v20)
  {
    v45 = (WebCore::SVGUseElement *)v3;
    if (v20 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x196608EF0);
    }
    v46 = this;
    v5 = (WTF *)WTF::fastMalloc((WTF *)(8 * v20));
    v4 = *(_QWORD *)v45;
    if (!*(_QWORD *)v45)
    {
      this = v46;
      v3 = (uint64_t *)v45;
      goto LABEL_6;
    }
    v9 = *(unsigned int *)(v4 - 4);
    v7 = v4 + 8 * v9;
    if (*(_DWORD *)(v4 - 12))
    {
      v6 = *(_QWORD *)v45;
      if ((_DWORD)v9)
      {
        v52 = 8 * v9;
        v6 = *(_QWORD *)v45;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 8;
          v52 -= 8;
          if (!v52)
          {
            v6 = v4 + 8 * v9;
            break;
          }
        }
      }
      v55 = v45;
      v56 = v6;
      this = v46;
      goto LABEL_30;
    }
    this = v46;
    v3 = (uint64_t *)v45;
  }
  else
  {
    v5 = 0;
    v9 = *(unsigned int *)(v4 - 4);
    v7 = v4 + 8 * v9;
  }
  v55 = (WebCore::SVGUseElement *)v3;
  v56 = v7;
  v6 = v7;
LABEL_30:
  v10 = 0;
  v57 = v7;
  v8 = v7;
LABEL_7:
  v58 = v8;
  v59 = v4 + 8 * v9;
  if (v6 != v8)
  {
    if (*(_QWORD *)(*(_QWORD *)v6 + 8))
    {
      v29 = v6;
    }
    else
    {
      do
      {
        v53 = v6 + 8;
        v6 = v7;
        if (v53 != v7)
        {
          v6 = v53;
          while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
          {
            v6 += 8;
            if (v6 == v7)
            {
              v6 = v7;
              break;
            }
          }
        }
        v29 = v8;
        if (v6 == v8)
          break;
        v29 = v6;
      }
      while (!*(_QWORD *)(*(_QWORD *)v6 + 8));
    }
    v56 = v29;
    v6 = v29;
  }
  if ((v10 & 1) != 0)
    v11 = 0;
  else
    v11 = v4 + 8 * *(unsigned int *)(v4 - 4);
  if (v6 != v11)
  {
    v33 = v5;
    v34 = this;
    v35 = 0;
    do
    {
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      *(_DWORD *)(v36 + 24) += 2;
      v54 = 0;
      *((_QWORD *)v33 + v35++) = v36;
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v54);
      WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v55);
      v6 = v56;
    }
    while (v56 != v11);
    this = v34;
    v5 = v33;
    if (!v35)
      goto LABEL_72;
    v37 = 8 * v35;
    v38 = (uint64_t *)v33;
    do
    {
      WebCore::SVGElement::correspondingUseElement(*v38, &v55);
      v39 = v55;
      if (v55)
      {
        WebCore::SVGUseElement::invalidateShadowTree((uint64_t *)v55);
        if (*((_DWORD *)v39 + 6) == 2)
        {
          if ((*((_WORD *)v39 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v39, v40);
        }
        else
        {
          *((_DWORD *)v39 + 6) -= 2;
        }
      }
      v41 = *v38++;
      WebCore::SVGElement::setCorrespondingElement(v41, 0);
      v37 -= 8;
    }
    while (v37);
    v42 = 8 * v35;
    v43 = v33;
    do
    {
      v44 = *(_QWORD *)v43;
      *(_QWORD *)v43 = 0;
      if (v44)
      {
        if (*(_DWORD *)(v44 + 24) == 2)
        {
          if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v44, a2);
        }
        else
        {
          *(_DWORD *)(v44 + 24) -= 2;
        }
      }
      v43 = (WTF *)((char *)v43 + 8);
      v42 -= 8;
      this = v34;
      v5 = v33;
    }
    while (v42);
  }
  if (v5)
  {
LABEL_72:
    v50 = this;
    WTF::fastFree(v5, a2);
    this = v50;
  }
LABEL_12:
  v12 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v15 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v15)
      {
        v51 = v12;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v15));
        v12 = v51;
      }
      v16 = *(WTF **)(v12 + 16);
      if (v16)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        v30 = v12;
        WTF::fastFree(v16, a2);
        v12 = v30;
      }
      WTF::fastFree((WTF *)v12, a2);
    }
  }
}

void WebCore::SVGCircleElement::createElementRenderer(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 680) & 0x800000000000) != 0)
  {
    v9 = WebCore::RenderSVGEllipse::operator new(248);
    WebCore::RenderSVGEllipse::RenderSVGEllipse(v9, a1, a2);
  }
  else
  {
    v6 = bmalloc::api::isoAllocate();
    v7 = WebCore::RenderElement::RenderElement(v6, 89, a1, a2, 0, 12548);
    v8 = vdupq_n_s32(0x7FC00000u);
    *(int32x4_t *)(v7 + 160) = v8;
    *(int32x4_t *)(v7 + 176) = v8;
    *(_OWORD *)(v7 + 216) = constinit_14;
    *(_BYTE *)(v7 + 208) = *(_BYTE *)(v7 + 208) & 0x80 | 0xE;
    *(_QWORD *)(v7 + 144) = 0;
    *(_QWORD *)(v7 + 152) = 0;
    *(_QWORD *)(v7 + 192) = 0;
    *(_QWORD *)(v7 + 200) = 0;
    *(_OWORD *)(v7 + 232) = unk_1969FE260;
    *(_OWORD *)(v7 + 248) = xmmword_1969FE270;
    *(_QWORD *)v7 = off_1E344A548;
    *(_QWORD *)(v7 + 272) = 0;
    *(_QWORD *)(v7 + 280) = 0;
    *(_QWORD *)(v7 + 264) = 0;
  }
  *a3 = v7;
}

_QWORD *WebCore::SVGClipPathElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::AtomString *a4, int a5, __n128 a6)
{
  int v12;
  unsigned __int8 v13;

  if (*(_QWORD *)a2 == WebCore::SVGNames::clipPathUnitsAttr)
  {
    v12 = WebCore::SVGPropertyTraits<WebCore::SVGUnitTypes::SVGUnitType>::fromString(a4);
    v13 = v12;
    if (v12)
      WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::setBaseValInternal<WebCore::SVGUnitTypes::SVGUnitType>(*(_QWORD *)(a1 + 216), &v13);
  }
  return WebCore::SVGGraphicsElement::attributeChanged(a1, a2, a3, a4, a5, a6);
}

uint64_t WebCore::SVGPropertyTraits<WebCore::SVGUnitTypes::SVGUnitType>::fromString(_QWORD *a1)
{
  if ((MEMORY[0x19AEA53F4](*a1, "userSpaceOnUse", 14) & 1) != 0)
    return 1;
  if (MEMORY[0x19AEA53F4](*a1, "objectBoundingBox", 17))
    return 2;
  return 0;
}

uint64_t WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::setBaseValInternal<WebCore::SVGUnitTypes::SVGUnitType>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;

  v4 = *(_QWORD *)(a1 + 40);
  v7 = *a2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v4 + 16))(v4, &v7);
  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    v6 = *a2;
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)result + 16))(result, &v6);
  }
  return result;
}

void WebCore::SVGClipPathElement::svgAttributeChanged(WebCore::SVGClipPathElement *this, const WebCore::QualifiedName *a2)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  void *v6;
  uint64_t v7;
  WebCore::RenderElement *v8;
  int v9;
  unsigned int *v10;

  if ((byte_1ECE84D90 & 1) != 0)
  {
    v4 = qword_1ECE84D88;
    if (!qword_1ECE84D88)
      goto LABEL_15;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)a2);
    v4 = qword_1ECE84D88;
    if (v5)
      goto LABEL_6;
    if (qword_1ECE84D88)
      v5 = (WTF::StringImpl ***)(qword_1ECE84D88 + 16 * *(unsigned int *)(qword_1ECE84D88 - 4));
    else
LABEL_15:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
LABEL_6:
  if ((byte_1ECE84D90 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
  if ((WTF::StringImpl ***)v4 == v5 || !v5[1])
  {
    WebCore::SVGGraphicsElement::svgAttributeChanged(this, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
  }
  else
  {
    WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>(&v10, (uint64_t)this);
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 680) & 0x800000000000) != 0)
    {
      v7 = *((_QWORD *)this + 8);
      v8 = (WebCore::RenderElement *)(v7 & 0xFFFFFFFFFFFFLL);
      if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((v7 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1965D7808);
        }
        ++*(_DWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 0x10);
        WebCore::RenderElement::repaintClientsOfReferencedSVGResources(v8);
        v9 = *((_DWORD *)v8 + 4);
        if (!v9)
        {
          __break(0xC471u);
          JUMPOUT(0x1965D7828);
        }
        *((_DWORD *)v8 + 4) = v9 - 1;
      }
    }
    else
    {
      WebCore::SVGElement::updateSVGRendererForElementChange(this);
    }
    WebCore::SVGElement::InstanceInvalidationGuard::~InstanceInvalidationGuard((WebCore::SVGElement::InstanceInvalidationGuard *)&v10, v6);
  }
}

void WebCore::SVGClipPathElement::childrenChanged(WebCore::SVGElement *a1, unsigned __int8 *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  WebCore::ContainerNode::childrenChanged((uint64_t)a1, a2);
  if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v7 = *(_QWORD *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v7)
    goto LABEL_2;
  v8 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 2;
  v9 = *a2;
  if ((v9 - 2) < 3)
  {
    v10 = *(_QWORD **)(v7 + 224);
    if (!v10)
      goto LABEL_14;
    v11 = 14;
    goto LABEL_27;
  }
  if (v9 == 8 || v9 == 5)
  {
    v10 = *(_QWORD **)(v7 + 224);
    if (v10)
    {
      v11 = 13;
LABEL_27:
      v14 = v7;
      (*(void (**)(void))(*v10 + 8 * v11))();
      v7 = v14;
      v8 = *(_DWORD *)(v14 + 24) - 2;
    }
  }
LABEL_14:
  if (v8)
  {
    *(_DWORD *)(v7 + 24) = v8;
  }
  else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v7, v4);
  }
LABEL_2:
  if (a2[32])
  {
    WebCore::SVGElement::invalidateInstances(a1, v4);
    if (a2[32])
    {
      v5 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
      if ((*(_QWORD *)(*(_QWORD *)(v5 + 680) + 680) & 0x800000000000) != 0)
      {
        v12 = *((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL;
        if (v12)
        {
          if ((*(_BYTE *)(v12 + 45) & 2) != 0
            || (++*(_DWORD *)(v12 + 16),
                WebCore::RenderElement::repaintClientsOfReferencedSVGResources((WebCore::RenderElement *)v12),
                (v13 = *(_DWORD *)(v12 + 16)) == 0))
          {
            __break(0xC471u);
            JUMPOUT(0x1965D7A00);
          }
          *(_DWORD *)(v12 + 16) = v13 - 1;
        }
      }
      else
      {
        *(_DWORD *)(v5 + 24) += 2;
        WebCore::Document::updateSVGRenderer((WebCore::Document *)v5, a1);
        if (*(_DWORD *)(v5 + 24) == 2)
        {
          if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
        }
        else
        {
          *(_DWORD *)(v5 + 24) -= 2;
        }
      }
    }
  }
}

void WebCore::SVGClipPathElement::createElementRenderer(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 680) & 0x800000000000) != 0)
  {
    v8 = WebCore::RenderSVGResourceClipper::operator new(240);
    v7 = WebCore::RenderSVGResourceClipper::RenderSVGResourceClipper(v8, a1, a2);
  }
  else
  {
    v6 = bmalloc::api::isoAllocate();
    WebCore::LegacyRenderSVGResourceClipper::LegacyRenderSVGResourceClipper(v6, a1, a2);
  }
  *a3 = v7;
}

uint64_t WebCore::SVGClipPathElement::shouldApplyPathClipping@<X0>(uint64_t this@<X0>, WebCore::Node **a2@<X8>)
{
  _QWORD *v3;
  WebCore::Node *v4;
  int v5;
  uint64_t v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965D7D94);
    }
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 40) + 264))
    {
      *a2 = 0;
      return this;
    }
  }
  v3 = *(_QWORD **)(this + 80);
  if (v3)
  {
    v4 = 0;
    while (1)
    {
      if ((*((_WORD *)v3 + 14) & 0x20) == 0)
        goto LABEL_23;
      this = (*(uint64_t (**)(_QWORD *))(*v3 + 1184))(v3);
      if (!(_DWORD)this)
        goto LABEL_23;
      v5 = *((_DWORD *)v3 + 6) + 2;
      *((_DWORD *)v3 + 6) = v5;
      v6 = v3[8] & 0xFFFFFFFFFFFFLL;
      if (!v6)
      {
        v7 = 4;
        v8 = (int *)v3;
LABEL_20:
        if (v5 == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)v8);
        }
        else
        {
          v8[6] = v5 - 2;
        }
        goto LABEL_22;
      }
      if ((*(_BYTE *)((v3[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        goto LABEL_61;
      ++*(_DWORD *)((v3[8] & 0xFFFFFFFFFFFFLL) + 0x10);
      if (*(_BYTE *)(v6 + 46) == 85
        || (*(_QWORD *)(v6 + 96) & 0x1FLL) != 0x1A
        && (*(_BYTE *)(*(_QWORD *)(v6 + 104) + 239) & 4) == 0
        && (*(_BYTE *)(v6 + 120) & 0x30) == 0
        && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 40) + 264)
        || v4)
      {
        *a2 = 0;
        v7 = 1;
        v8 = (int *)v3;
        goto LABEL_17;
      }
      if (*(_QWORD *)(v3[12] + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
      {
        v7 = 0;
        v8 = 0;
        v4 = (WebCore::Node *)v3;
        goto LABEL_17;
      }
      v12 = v6;
      this = WebCore::SVGUseElement::rendererClipChild((WebCore::SVGUseElement *)v3);
      if (this)
      {
        v10 = *(_DWORD *)(this + 16);
        *(_DWORD *)(this + 16) = v10 + 1;
        if (*(_BYTE *)(this + 46) == 85)
          goto LABEL_34;
        v11 = this;
        if ((*(_BYTE *)(this + 45) & 2) != 0)
        {
          v11 = *(_QWORD *)(this + 32);
          if (v11)
            v11 = *(_QWORD *)(v11 + 8);
        }
        if ((*(_QWORD *)(v11 + 96) & 0x1FLL) != 0x1A
          && (*(_BYTE *)(*(_QWORD *)(v11 + 104) + 239) & 4) == 0
          && (*(_BYTE *)(v11 + 120) & 0x30) == 0
          && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 40) + 264))
        {
LABEL_34:
          *a2 = 0;
          if (v10 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1965D7DB4);
          }
          v4 = 0;
          *(_DWORD *)(this + 16) = v10;
          v7 = 1;
          v8 = (int *)v3;
          goto LABEL_43;
        }
        if (v10 == -1)
        {
LABEL_61:
          __break(0xC471u);
          JUMPOUT(0x1965D7D54);
        }
        v7 = 0;
        v8 = 0;
        *(_DWORD *)(this + 16) = v10;
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      v4 = (WebCore::Node *)v3;
LABEL_43:
      v6 = v12;
LABEL_17:
      v9 = *(_DWORD *)(v6 + 16);
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x1965D7D74);
      }
      *(_DWORD *)(v6 + 16) = v9 - 1;
      if (v8)
      {
        v5 = v8[6];
        goto LABEL_20;
      }
LABEL_22:
      if ((v7 | 4) != 4)
      {
        if (v4)
        {
          if (*((_DWORD *)v4 + 6) == 2)
          {
            if ((*((_WORD *)v4 + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef(v4);
          }
          else
          {
            *((_DWORD *)v4 + 6) -= 2;
          }
        }
        return this;
      }
LABEL_23:
      v3 = (_QWORD *)v3[7];
      if (!v3)
        goto LABEL_50;
    }
  }
  v4 = 0;
LABEL_50:
  *a2 = v4;
  return this;
}

float WebCore::SVGClipPathElement::calculateClipContentRepaintRect(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  WTF *v23;
  uint64_t v24;
  void *v25;
  WTF *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  void *v32;
  WTF *v33;
  WTF *v35[2];
  float64x2_t v36;
  __int128 v37;
  char v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float64x2_t v43;
  float64x2_t v44;
  __int128 v45;

  v2 = a1[10];
  if (!v2)
    return 0.0;
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  do
  {
    v9 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
    if (v9)
    {
      v10 = *(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
      *(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v10;
      if ((*(_WORD *)(v2 + 28) & 0x20) != 0
        && ((*(_BYTE *)(v9 + 52) & 7) == 4 && (*(_BYTE *)(v9 + 53) & 1) == 0 && (*(_BYTE *)(v9 + 53) & 0x10) != 0
         || *(_BYTE *)(v9 + 46) == 85
         || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24)))
      {
        v11 = v9;
        if ((*(_BYTE *)(v9 + 45) & 2) != 0)
        {
          v11 = *(_QWORD *)(v9 + 32);
          if (v11)
            v11 = *(_QWORD *)(v11 + 8);
        }
        if ((*(_QWORD *)(v11 + 96) & 0x1FLL) != 0x1A
          && (*(_BYTE *)(*(_QWORD *)(v11 + 104) + 239) & 4) == 0
          && (*(_BYTE *)(v11 + 120) & 0x30) == 0)
        {
          v39 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 256))(v9, a2);
          v40 = v12;
          v41 = v13;
          v42 = v14;
          if ((*(_BYTE *)(v9 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1965D821CLL);
          }
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 680) + 680) & 0x800000000000) != 0)
          {
            v15 = a1[8] & 0xFFFFFFFFFFFFLL;
            if (v15 && (*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1965D823CLL);
            }
            v16 = *(_DWORD *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x14);
            if ((v16 & 0x20000) != 0)
            {
              if ((*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                v15 = *(_QWORD *)(*(_QWORD *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
              v21 = *(_QWORD *)(v15 + 88);
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 32) + 40) + 20))
                goto LABEL_34;
              v22 = *(_QWORD **)(v21 + 40);
              if (v22[41] || v22[38] || v22[39] || v22[40] || (v16 & 0x100000) != 0)
                goto LABEL_34;
            }
            v17 = *(_DWORD *)(v9 + 20);
            if ((v17 & 0x20000) != 0)
            {
              v18 = v9;
              if ((*(_BYTE *)(v9 + 45) & 2) != 0)
                v18 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8);
              v19 = *(_QWORD *)(v18 + 88);
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 40) + 20)
                || (v20 = *(_QWORD **)(v19 + 40), v20[41])
                || v20[38]
                || v20[39]
                || v20[40]
                || (v17 & 0x100000) != 0)
              {
LABEL_34:
                if ((*(_BYTE *)(v9 + 21) & 0x80) != 0)
                {
                  v23 = *(WTF **)(v9 + 8);
                  if (!v23)
                  {
                    v23 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v23 = 1;
                    *((_QWORD *)v23 + 1) = v9;
                    v33 = *(WTF **)(v9 + 8);
                    *(_QWORD *)(v9 + 8) = v23;
                    if (v33)
                    {
                      if (*(_DWORD *)v33 == 1)
                      {
                        WTF::fastFree(v33, v32);
                        v23 = *(WTF **)(v9 + 8);
                      }
                      else
                      {
                        --*(_DWORD *)v33;
                      }
                    }
                  }
                  ++*(_DWORD *)v23;
                  v35[0] = v23;
                  v24 = a1[8] & 0xFFFFFFFFFFFFLL;
                  if (v24)
                  {
                    if ((*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1965D825CLL);
                    }
                    if ((*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) == 0)
                    {
LABEL_86:
                      __break(0xC471u);
                      JUMPOUT(0x1965D81FCLL);
                    }
                  }
                  WebCore::SVGLayerTransformComputation::computeAccumulatedTransform((uint64_t)v35, v24, 1, (uint64_t)&v43);
                  v26 = v35[0];
                  v35[0] = 0;
                  if (v26)
                  {
                    if (*(_DWORD *)v26 == 1)
                      WTF::fastFree(v26, v25);
                    else
                      --*(_DWORD *)v26;
                  }
                  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v43, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v44, (float64x2_t)xmmword_1968A14C0))))) & 1) == 0&& *(double *)&v45 == 0.0&& *((double *)&v45 + 1) == 0.0)
                  {
                    v13 = v41;
                    v14 = v42;
                  }
                  else
                  {
                    *(float64x2_t *)v35 = v43;
                    v36 = v44;
                    v37 = v45;
                    v38 = 1;
                    v39 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v35, (const WebCore::FloatRect *)&v39);
                    v40 = v27;
                  }
                }
              }
            }
          }
          if (v13 <= 0.0 || v14 <= 0.0)
          {
            v28 = v5;
            v13 = v7;
            v14 = v8;
          }
          else
          {
            v28 = v39;
            if (v7 <= 0.0 || v8 <= 0.0)
            {
              v6 = v40;
            }
            else
            {
              v29 = v13 + v39;
              if (v39 >= v5)
                v28 = v5;
              v30 = v6 + v8;
              if (v40 < v6)
                v6 = v40;
              if ((float)(v5 + v7) >= v29)
                v29 = v5 + v7;
              if (v30 >= (float)(v14 + v40))
                v31 = v30;
              else
                v31 = v14 + v40;
              v13 = v29 - v28;
              v14 = v31 - v6;
            }
          }
          v10 = *(_DWORD *)(v9 + 16);
          v5 = v28;
          v7 = v13;
          v8 = v14;
        }
      }
      if (!v10)
        goto LABEL_86;
      *(_DWORD *)(v9 + 16) = v10 - 1;
    }
    v2 = *(_QWORD *)(v2 + 56);
  }
  while (v2);
  return v5;
}

_QWORD *WebCore::SVGComponentTransferFunctionElement::SVGComponentTransferFunctionElement(_QWORD *a1, _DWORD **a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v23;
  uint64_t *v24;
  char *v25;

  *a1 = off_1E3452EE0;
  a1[14] = &unk_1E3453418;
  v6 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E3455C28;
  *((_QWORD *)v6 + 1) = a1;
  v25 = v6;
  WebCore::SVGElement::SVGElement((uint64_t)a1, a2, a3, (uint64_t *)&v25, 0);
  if (v25)
    (*(void (**)(char *))(*(_QWORD *)v25 + 8))(v25);
  *a1 = off_1E3452EE0;
  a1[14] = &unk_1E3453418;
  v7 = WTF::fastMalloc((WTF *)0x40);
  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v8 + 8) = 1;
  *(_BYTE *)(v8 + 12) = 1;
  *(_QWORD *)v8 = off_1E3455C98;
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)v7 = &off_1E34568A0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 48) = 0;
  *(_BYTE *)(v7 + 56) = 0;
  a1[22] = v7;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)v9 = off_1E3456920;
  v10 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = v9;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)v10 = off_1E346F430;
  *(_QWORD *)(v10 + 48) = &unk_1E346F4A8;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  a1[23] = v9;
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)v11 = &off_1E34566C8;
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_WORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = off_1E3456748;
  *(_DWORD *)(v12 + 28) = 1065353216;
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = 0;
  a1[24] = v11;
  v13 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)v13 = &off_1E34566C8;
  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)(v14 + 16) = 0;
  *(_WORD *)(v14 + 24) = 0;
  *(_QWORD *)v14 = off_1E3456748;
  *(_DWORD *)(v14 + 28) = 0;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = 0;
  a1[25] = v13;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)v15 = &off_1E34566C8;
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(_QWORD *)v16 = off_1E3456748;
  *(_DWORD *)(v16 + 28) = 1065353216;
  *(_QWORD *)(v15 + 40) = v16;
  *(_QWORD *)(v15 + 48) = 0;
  a1[26] = v15;
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)v17 = &off_1E34566C8;
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)(v18 + 16) = 0;
  *(_WORD *)(v18 + 24) = 0;
  *(_QWORD *)v18 = off_1E3456748;
  *(_DWORD *)(v18 + 28) = 1065353216;
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = 0;
  a1[27] = v17;
  v19 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)v19 = &off_1E34566C8;
  v20 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)(v20 + 16) = 0;
  *(_WORD *)(v20 + 24) = 0;
  *(_QWORD *)v20 = off_1E3456748;
  *(_DWORD *)(v20 + 28) = 0;
  *(_QWORD *)(v19 + 40) = v20;
  *(_QWORD *)(v19 + 48) = 0;
  a1[28] = v19;
  v21 = atomic_load(&WebCore::SVGComponentTransferFunctionElement::SVGComponentTransferFunctionElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v21 != -1)
  {
    v25 = &v23;
    v24 = (uint64_t *)&v25;
    std::__call_once(&WebCore::SVGComponentTransferFunctionElement::SVGComponentTransferFunctionElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGComponentTransferFunctionElement::SVGComponentTransferFunctionElement(WebCore::QualifiedName const&,WebCore::Document &)::$_0 &&>>);
  }
  return a1;
}

_QWORD *WebCore::SVGComponentTransferFunctionElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::String *this, int a5, __n128 a6)
{
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unint64_t v22;
  int v23;
  int v24;

  v11 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v11 <= 0x25B)
  {
    switch(v11)
    {
      case 0x125u:
        v12 = a1[26];
        goto LABEL_18;
      case 0x1C8u:
        v12 = a1[27];
        goto LABEL_18;
      case 0x20Cu:
        v12 = a1[25];
        goto LABEL_18;
    }
  }
  else if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) > 0x36Au)
  {
    if (v11 == 875)
    {
      v19 = *(_QWORD *)(a1[23] + 40);
      v20 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v21 = *(unsigned __int16 **)(v20 + 8);
        v22 = *(unsigned int *)(v20 + 4) | ((unint64_t)((*(_DWORD *)(v20 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v21 = 0;
        v22 = 0x100000000;
      }
      WebCore::SVGNumberList::parse(v19, v21, (unsigned __int16 *)v22);
    }
    else if (v11 == 952)
    {
      v13 = WebCore::SVGPropertyTraits<WebCore::ComponentTransferType>::fromString(*(_QWORD *)this);
      if (v13)
      {
        v14 = v13;
        v15 = a1[22];
        v16 = *(_QWORD *)(v15 + 40);
        v24 = v14;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 16))(v16, &v24);
        v17 = *(_QWORD *)(v15 + 48);
        if (v17)
        {
          v23 = v14;
          (*(void (**)(uint64_t, int *))(*(_QWORD *)v17 + 16))(v17, &v23);
        }
      }
    }
  }
  else
  {
    if (v11 == 604)
    {
      v12 = a1[28];
      goto LABEL_18;
    }
    if (v11 == 836)
    {
      v12 = a1[24];
LABEL_18:
      WTF::String::toFloat(this, 0);
      *(_DWORD *)(*(_QWORD *)(v12 + 40) + 28) = a6.n128_u32[0];
    }
  }
  return WebCore::SVGElement::attributeChanged((uint64_t)a1, a2, a3, (WTF::StringImpl **)this, a5, a6);
}

uint64_t WebCore::SVGPropertyTraits<WebCore::ComponentTransferType>::fromString(uint64_t a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  if (!a1)
    goto LABEL_16;
  v1 = *(unsigned __int16 **)(a1 + 8);
  v2 = *(unsigned int *)(a1 + 4);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    if (v2 > 8)
      goto LABEL_10;
    if ((_DWORD)v2)
    {
      v3 = 0;
      v10 = 8 * v2;
      v11 = 56;
      while (1)
      {
        v13 = *(char *)v1;
        v1 = (unsigned __int16 *)((char *)v1 + 1);
        v12 = v13;
        if (v13 < 0)
          goto LABEL_10;
        v3 |= (unint64_t)v12 << v11;
        v11 -= 8;
        if (v10 + v11 == 56)
          goto LABEL_17;
      }
    }
LABEL_16:
    v3 = 0;
    goto LABEL_17;
  }
  if (v2 > 8)
  {
LABEL_10:
    v3 = 0;
    v8 = 0;
    v9 = 0;
    goto LABEL_18;
  }
  v3 = 0;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    v5 = 56;
    do
    {
      v7 = *v1++;
      v6 = v7;
      if (v7 > 0x7FuLL)
        goto LABEL_10;
      v3 |= v6 << v5;
      v5 -= 8;
    }
    while (v4 + v5 != 56);
  }
LABEL_17:
  v9 = v3 & 0xFFFFFFFFFFFFFF00;
  v3 = v3;
  v8 = 1;
LABEL_18:
  v14 = v9 | v3;
  result = 0;
  if (!v8)
    return result;
  if (v14 <= 0x6964656E74697478)
  {
    if (v14 == 0x6469736372657465)
    {
      v16 = 0;
    }
    else
    {
      if (v14 != 0x67616D6D61000000)
        return result;
      v16 = 1;
    }
  }
  else
  {
    switch(v14)
    {
      case 0x6964656E74697479:
        v16 = 2;
        break;
      case 0x6C696E6561720000:
        v16 = 3;
        break;
      case 0x7461626C65000000:
        v16 = 4;
        break;
      default:
        return result;
    }
  }
  return *((unsigned __int8 *)&WebCore::SVGPropertyTraits<WebCore::ComponentTransferType>::fromString(WTF::String const&)::mappings
         + 16 * v16
         + 8);
}

unsigned int *WebCore::SVGComponentTransferFunctionElement::svgAttributeChanged(WebCore::SVGComponentTransferFunctionElement *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v4;
  unsigned int *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  WebCore::SVGComponentTransferFunctionElement *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;

  if ((byte_1ECE84E18 & 1) != 0)
  {
    v4 = qword_1ECE84E10;
    if (!qword_1ECE84E10)
      goto LABEL_6;
    result = (unsigned int *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v4 = qword_1ECE84E10;
    if (result)
      goto LABEL_7;
    if (qword_1ECE84E10)
      result = (unsigned int *)(qword_1ECE84E10 + 16 * *(unsigned int *)(qword_1ECE84E10 - 4));
    else
LABEL_6:
      result = 0;
  }
  else
  {
    v4 = 0;
    result = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
LABEL_7:
  if ((byte_1ECE84E18 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  if ((unsigned int *)v4 == result || !*((_QWORD *)result + 1))
    return (unsigned int *)WebCore::SVGElement::svgAttributeChanged(this, (const WebCore::QualifiedName *)a2);
  v6 = *((_QWORD *)this + 4);
  if (v6
    && (~*(unsigned __int16 *)(v6 + 28) & 0x28) == 0
    && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::feComponentTransferTag + 24))
  {
    *(_DWORD *)(v6 + 24) += 2;
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v7 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 8) = this;
      *(_BYTE *)(v7 + 32) = 0;
      v8 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v8 & 0xFFFF000000000000 | v7;
      v9 = v8 & 0xFFFFFFFFFFFFLL;
      if ((v8 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v10 = __ldaxr((unsigned int *)v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)v9));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)v9);
          v20 = *(unsigned int *)(v9 + 28);
          if ((_DWORD)v20)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v20));
          v21 = *(WTF **)(v9 + 16);
          if (v21)
          {
            *(_QWORD *)(v9 + 16) = 0;
            *(_DWORD *)(v9 + 24) = 0;
            WTF::fastFree(v21, a2);
          }
          WTF::fastFree((WTF *)v9, a2);
        }
      }
    }
    v12 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
    do
      v13 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v13 + 1, (unsigned int *)v12));
    v14 = this;
    while (1)
    {
      v14 = (WebCore::SVGComponentTransferFunctionElement *)*((_QWORD *)v14 + 7);
      if (!v14)
        break;
      if ((*((_WORD *)v14 + 14) & 8) != 0)
      {
LABEL_28:
        if (*(unsigned __int16 *)(*((_QWORD *)v14 + 12) + 10) == *(unsigned __int16 *)(*((_QWORD *)this + 12) + 10))
          goto LABEL_31;
        while (1)
        {
          v14 = (WebCore::SVGComponentTransferFunctionElement *)*((_QWORD *)v14 + 7);
          if (!v14)
            goto LABEL_30;
          if ((*((_WORD *)v14 + 14) & 8) != 0)
            goto LABEL_28;
        }
      }
    }
LABEL_30:
    WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeOnChildChanged((WebCore::SVGFilterPrimitiveStandardAttributes *)v6, this, (const WebCore::QualifiedName *)a2);
LABEL_31:
    result = (unsigned int *)WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v12 + 8), a2);
    do
    {
      v16 = __ldaxr((unsigned int *)v12);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v12));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v12);
      v18 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v18)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v18));
      v19 = *(WTF **)(v12 + 16);
      if (v19)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        WTF::fastFree(v19, v15);
      }
      result = (unsigned int *)WTF::fastFree((WTF *)v12, v15);
    }
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v6, v15);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::SVGComponentTransferFunctionElement::transferFunction@<X0>(WebCore::SVGComponentTransferFunctionElement *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;

  v4 = (_QWORD *)*((_QWORD *)this + 22);
  v5 = v4[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v26 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v26)
  {
    v27 = 8 * v26;
    v28 = (uint64_t *)v4[3];
    while ((unint64_t)(*v28 + 1) <= 1)
    {
      ++v28;
      v27 -= 8;
      if (!v27)
        goto LABEL_2;
    }
  }
  else
  {
    v28 = (uint64_t *)v4[3];
  }
  v47 = (uint64_t *)(v5 + 8 * v26);
  if (v28 == v47)
    goto LABEL_2;
  v48 = *v28;
LABEL_61:
  if (!*(_QWORD *)(v48 + 8))
  {
    while (++v28 != v47)
    {
      v48 = *v28;
      if ((unint64_t)(*v28 + 1) > 1)
      {
        if (v28 != v47)
          goto LABEL_61;
        break;
      }
    }
LABEL_2:
    v6 = v4 + 5;
    goto LABEL_3;
  }
  v6 = v4 + 6;
LABEL_3:
  *(_BYTE *)a2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  v7 = *((_QWORD *)this + 24);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_4;
  v29 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v29)
  {
    v30 = 8 * v29;
    v31 = *(uint64_t **)(v7 + 24);
    while ((unint64_t)(*v31 + 1) <= 1)
    {
      ++v31;
      v30 -= 8;
      if (!v30)
        goto LABEL_4;
    }
  }
  else
  {
    v31 = *(uint64_t **)(v7 + 24);
  }
  v49 = (uint64_t *)(v8 + 8 * v29);
  if (v31 == v49)
    goto LABEL_4;
  v50 = *v31;
LABEL_70:
  if (!*(_QWORD *)(v50 + 8))
  {
    while (++v31 != v49)
    {
      v50 = *v31;
      if ((unint64_t)(*v31 + 1) > 1)
      {
        if (v31 != v49)
          goto LABEL_70;
        break;
      }
    }
LABEL_4:
    v9 = v7 + 40;
    goto LABEL_5;
  }
  v9 = v7 + 48;
LABEL_5:
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(*(_QWORD *)v9 + 28);
  v10 = *((_QWORD *)this + 25);
  v11 = *(_QWORD *)(v10 + 24);
  if (!v11 || !*(_DWORD *)(v11 - 12))
    goto LABEL_6;
  v32 = *(unsigned int *)(v11 - 4);
  if ((_DWORD)v32)
  {
    v33 = 8 * v32;
    v34 = *(uint64_t **)(v10 + 24);
    while ((unint64_t)(*v34 + 1) <= 1)
    {
      ++v34;
      v33 -= 8;
      if (!v33)
        goto LABEL_6;
    }
  }
  else
  {
    v34 = *(uint64_t **)(v10 + 24);
  }
  v51 = (uint64_t *)(v11 + 8 * v32);
  if (v34 == v51)
    goto LABEL_6;
  v52 = *v34;
LABEL_79:
  if (!*(_QWORD *)(v52 + 8))
  {
    while (++v34 != v51)
    {
      v52 = *v34;
      if ((unint64_t)(*v34 + 1) > 1)
      {
        if (v34 != v51)
          goto LABEL_79;
        break;
      }
    }
LABEL_6:
    v12 = v10 + 40;
    goto LABEL_7;
  }
  v12 = v10 + 48;
LABEL_7:
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(_QWORD *)v12 + 28);
  v13 = *((_QWORD *)this + 26);
  v14 = *(_QWORD *)(v13 + 24);
  if (!v14 || !*(_DWORD *)(v14 - 12))
    goto LABEL_8;
  v35 = *(unsigned int *)(v14 - 4);
  if ((_DWORD)v35)
  {
    v36 = 8 * v35;
    v37 = *(uint64_t **)(v13 + 24);
    while ((unint64_t)(*v37 + 1) <= 1)
    {
      ++v37;
      v36 -= 8;
      if (!v36)
        goto LABEL_8;
    }
  }
  else
  {
    v37 = *(uint64_t **)(v13 + 24);
  }
  v53 = (uint64_t *)(v14 + 8 * v35);
  if (v37 == v53)
    goto LABEL_8;
  v54 = *v37;
LABEL_88:
  if (!*(_QWORD *)(v54 + 8))
  {
    while (++v37 != v53)
    {
      v54 = *v37;
      if ((unint64_t)(*v37 + 1) > 1)
      {
        if (v37 != v53)
          goto LABEL_88;
        break;
      }
    }
LABEL_8:
    v15 = v13 + 40;
    goto LABEL_9;
  }
  v15 = v13 + 48;
LABEL_9:
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(*(_QWORD *)v15 + 28);
  v16 = *((_QWORD *)this + 27);
  v17 = *(_QWORD *)(v16 + 24);
  if (!v17 || !*(_DWORD *)(v17 - 12))
    goto LABEL_10;
  v38 = *(unsigned int *)(v17 - 4);
  if ((_DWORD)v38)
  {
    v39 = 8 * v38;
    v40 = *(uint64_t **)(v16 + 24);
    while ((unint64_t)(*v40 + 1) <= 1)
    {
      ++v40;
      v39 -= 8;
      if (!v39)
        goto LABEL_10;
    }
  }
  else
  {
    v40 = *(uint64_t **)(v16 + 24);
  }
  v55 = (uint64_t *)(v17 + 8 * v38);
  if (v40 == v55)
    goto LABEL_10;
  v56 = *v40;
LABEL_97:
  if (!*(_QWORD *)(v56 + 8))
  {
    while (++v40 != v55)
    {
      v56 = *v40;
      if ((unint64_t)(*v40 + 1) > 1)
      {
        if (v40 != v55)
          goto LABEL_97;
        break;
      }
    }
LABEL_10:
    v18 = v16 + 40;
    goto LABEL_11;
  }
  v18 = v16 + 48;
LABEL_11:
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(*(_QWORD *)v18 + 28);
  v19 = *((_QWORD *)this + 28);
  v20 = *(_QWORD *)(v19 + 24);
  if (!v20 || !*(_DWORD *)(v20 - 12))
    goto LABEL_12;
  v41 = *(unsigned int *)(v20 - 4);
  if ((_DWORD)v41)
  {
    v42 = 8 * v41;
    v43 = *(uint64_t **)(v19 + 24);
    while ((unint64_t)(*v43 + 1) <= 1)
    {
      ++v43;
      v42 -= 8;
      if (!v42)
        goto LABEL_12;
    }
  }
  else
  {
    v43 = *(uint64_t **)(v19 + 24);
  }
  v57 = (uint64_t *)(v20 + 8 * v41);
  if (v43 == v57)
    goto LABEL_12;
  v58 = *v43;
LABEL_106:
  if (!*(_QWORD *)(v58 + 8))
  {
    while (++v43 != v57)
    {
      v58 = *v43;
      if ((unint64_t)(*v43 + 1) > 1)
      {
        if (v43 != v57)
          goto LABEL_106;
        break;
      }
    }
LABEL_12:
    v21 = v19 + 40;
    goto LABEL_13;
  }
  v21 = v19 + 48;
LABEL_13:
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(*(_QWORD *)v21 + 28);
  v22 = (_QWORD *)*((_QWORD *)this + 23);
  v23 = v22[3];
  if (v23 && *(_DWORD *)(v23 - 12))
  {
    v44 = *(unsigned int *)(v23 - 4);
    if ((_DWORD)v44)
    {
      v45 = 8 * v44;
      v46 = (uint64_t *)v22[3];
      while ((unint64_t)(*v46 + 1) <= 1)
      {
        ++v46;
        v45 -= 8;
        if (!v45)
          goto LABEL_14;
      }
    }
    else
    {
      v46 = (uint64_t *)v22[3];
    }
    v59 = (uint64_t *)(v23 + 8 * v44);
    if (v46 != v59)
    {
      v60 = *v46;
LABEL_115:
      if (*(_QWORD *)(v60 + 8))
      {
        v24 = v22 + 6;
        return WebCore::SVGValuePropertyList<WebCore::SVGNumber>::operator WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(*v24, a2 + 24);
      }
      while (++v46 != v59)
      {
        v60 = *v46;
        if ((unint64_t)(*v46 + 1) > 1)
        {
          if (v46 != v59)
            goto LABEL_115;
          break;
        }
      }
    }
  }
LABEL_14:
  v24 = v22 + 5;
  return WebCore::SVGValuePropertyList<WebCore::SVGNumber>::operator WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(*v24, a2 + 24);
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGNumber>::operator WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(unsigned int *)(result + 44);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)(result + 32);
    v5 = 8 * v3;
    do
    {
      v6 = (_DWORD *)(*v4 + 28);
      v7 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v7 == *(_DWORD *)(a2 + 8))
      {
        result = WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>(a2, (unint64_t)v6);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v7) = *v6;
        *(_DWORD *)(a2 + 12) = v7 + 1;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

void WebCore::SVGCursorElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  char *v30;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  *v6 = off_1E3454C58;
  v6[14] = &unk_1E3455188;
  v6[23] = &unk_1E34551C0;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E34559F8;
  *((_QWORD *)v7 + 1) = v6;
  v30 = v7;
  WebCore::SVGElement::SVGElement((uint64_t)v6, a1, a2, (uint64_t *)&v30, 0);
  if (v30)
    (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
  *v6 = off_1E3454C58;
  v6[14] = &unk_1E3455188;
  v6[23] = &unk_1E34551C0;
  if ((v6[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = v6;
    *(_BYTE *)(v8 + 32) = 0;
    v10 = v6[2];
    v6[2] = v10 & 0xFFFF000000000000 | v8;
    v11 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v11);
        v24 = *(unsigned int *)(v11 + 28);
        if ((_DWORD)v24)
        {
          v27 = v11;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v24));
          v11 = v27;
        }
        v25 = *(WTF **)(v11 + 16);
        if (v25)
        {
          *(_QWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          v26 = v11;
          WTF::fastFree(v25, v9);
          v11 = v26;
        }
        WTF::fastFree((WTF *)v11, v9);
      }
    }
  }
  v14 = (unsigned int *)(v6[2] & 0xFFFFFFFFFFFFLL);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *v6 = off_1E3454C58;
  v6[14] = &unk_1E3455188;
  v6[22] = v14;
  v6[23] = &off_1E3452C78;
  v16 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 16) = v6;
  *(_QWORD *)v16 = &off_1E3452E28;
  v17 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 16) = 0;
  *(_WORD *)(v17 + 24) = 0;
  *(_QWORD *)v17 = &off_1E3452EA8;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v16 + 40) = v17;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)v16 = off_1E347BDB8;
  v6[24] = v16;
  v18 = atomic_load(&WebCore::SVGURIReference::SVGURIReference(WebCore::SVGElement *)::onceFlag);
  if (v18 != -1)
  {
    v30 = &v28;
    v29 = (uint64_t *)&v30;
    std::__call_once(&WebCore::SVGURIReference::SVGURIReference(WebCore::SVGElement *)::onceFlag, &v29, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGURIReference::SVGURIReference(WebCore::SVGElement *)::$_0 &&>>);
  }
  *v6 = off_1E3454C58;
  v6[14] = &unk_1E3455188;
  v6[23] = &unk_1E34551C0;
  v19 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 16) = v6;
  *(_QWORD *)v19 = off_1E3456B10;
  v29 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v30, 0, (uint64_t *)&v29);
  v20 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)(v20 + 16) = v19;
  *(_WORD *)(v20 + 24) = 0;
  *(_QWORD *)v20 = off_1E32EE180;
  *(_QWORD *)(v20 + 28) = v30;
  *(_QWORD *)v20 = off_1E32EE148;
  *(_QWORD *)(v19 + 40) = v20;
  *(_QWORD *)(v19 + 48) = 0;
  v6[25] = v19;
  v21 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v21 + 8) = 1;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 16) = v6;
  *(_QWORD *)v21 = off_1E3456B10;
  v29 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v30, 1, (uint64_t *)&v29);
  v22 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = v21;
  *(_WORD *)(v22 + 24) = 0;
  *(_QWORD *)v22 = off_1E32EE180;
  *(_QWORD *)(v22 + 28) = v30;
  *(_QWORD *)v22 = off_1E32EE148;
  *(_QWORD *)(v21 + 40) = v22;
  *(_QWORD *)(v21 + 48) = 0;
  v6[27] = 0;
  v6[28] = 0;
  v6[26] = v21;
  v23 = atomic_load(&WebCore::SVGCursorElement::SVGCursorElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v23 != -1)
  {
    v29 = (uint64_t *)&v30;
    v30 = &v28;
    std::__call_once(&WebCore::SVGCursorElement::SVGCursorElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v29, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGCursorElement::SVGCursorElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

void WebCore::SVGCursorElement::~SVGCursorElement(WebCore::SVGCursorElement *this, WTF *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  char v31;

  v3 = *((_QWORD *)this + 27);
  if (!v3)
  {
    v4 = 0;
    v5 = 0;
LABEL_3:
    v6 = v4;
    v4 = v3 + 8 * v5;
    goto LABEL_4;
  }
  v5 = *(unsigned int *)(v3 - 4);
  v4 = v3 + 8 * v5;
  if (!*(_DWORD *)(v3 - 12))
    goto LABEL_3;
  if (!(_DWORD)v5)
  {
    v6 = *((_QWORD *)this + 27);
    goto LABEL_70;
  }
  v23 = 8 * v5;
  v6 = *((_QWORD *)this + 27);
  while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
  {
    v6 += 8;
    v23 -= 8;
    if (!v23)
    {
      v6 = v4;
      break;
    }
  }
LABEL_4:
  if (!v3)
  {
    v7 = 0;
    goto LABEL_6;
  }
  LODWORD(v5) = *(_DWORD *)(v3 - 4);
LABEL_70:
  v7 = v3 + 8 * v5;
LABEL_6:
  if (v7 != v6)
  {
    while (!*(_QWORD *)(*(_QWORD *)v6 + 8))
    {
      v8 = v6 + 8;
      v6 = v4;
      if (v8 != v4)
      {
        v6 = v8;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 8;
          if (v6 == v4)
          {
            v6 = v4;
            break;
          }
        }
      }
      if (v6 == v7)
      {
        v6 = v7;
        break;
      }
    }
  }
  if (v3)
    v9 = v3 + 8 * *(unsigned int *)(v3 - 4);
  else
    v9 = 0;
  if (v6 != v9)
  {
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      v11 = *(_DWORD *)(v10 + 132);
      v12 = *(_DWORD *)(v10 + 128) + 1;
      *(_DWORD *)(v10 + 128) = v12;
      if (v12 > v11)
      {
        _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_17RTCPeerConnectionES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)(v10 + 120), &v31);
        v13 = 0;
        *(_DWORD *)(v10 + 128) = 0;
        v14 = *(_QWORD *)(v10 + 120);
        if (v14)
        {
          v13 = *(_DWORD *)(v14 - 12);
          if (v13 > 0x7FFFFFFE)
            v13 = 0x7FFFFFFF;
        }
        *(_DWORD *)(v10 + 132) = 2 * v13;
      }
      a2 = (WTF *)(*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL);
      if (a2 && *(_QWORD *)((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) + 8))
        WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)(v10 + 120), a2);
      v15 = v4;
      if (v6 + 8 != v4)
      {
        v15 = v6 + 8;
        while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
        {
          v15 += 8;
          if (v15 == v4)
          {
            v15 = v4;
            break;
          }
        }
      }
      v6 = v7;
      if (v15 != v7)
      {
        v6 = v15;
        if (!*(_QWORD *)(*(_QWORD *)v15 + 8))
        {
          while (1)
          {
            v16 = v6 + 8;
            v6 = v4;
            if (v16 != v4)
            {
              v6 = v16;
              while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
              {
                v6 += 8;
                if (v6 == v4)
                {
                  v6 = v4;
                  break;
                }
              }
            }
            if (v6 == v7)
              break;
            if (*(_QWORD *)(*(_QWORD *)v6 + 8))
              goto LABEL_40;
          }
          v6 = v7;
        }
      }
LABEL_40:
      ++*((_DWORD *)this + 56);
    }
    while (v6 != v9);
    v3 = *((_QWORD *)this + 27);
  }
  if (v3)
  {
    v24 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v24)
    {
      for (i = 0; i != v24; ++i)
      {
        v26 = *(unsigned int **)(v3 + 8 * i);
        if (v26 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v17 = (_DWORD *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  v18 = (_DWORD *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 23) = &off_1E3452C78;
  *((_QWORD *)this + 24) = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v20 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      v29 = *(unsigned int *)(v20 + 28);
      if ((_DWORD)v29)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v20 + 16), (WTF::StringImpl *)(*(_QWORD *)(v20 + 16) + 32 * v29));
      v30 = *(WTF **)(v20 + 16);
      if (v30)
      {
        *(_QWORD *)(v20 + 16) = 0;
        *(_DWORD *)(v20 + 24) = 0;
        WTF::fastFree(v30, a2);
      }
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  WebCore::SVGElement::~SVGElement(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGCursorElement::~SVGCursorElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::SVGCursorElement::~SVGCursorElement(WebCore::SVGCursorElement *this, WTF *a2)
{
  WebCore::SVGCursorElement::~SVGCursorElement((WebCore::SVGCursorElement *)((char *)this - 112), a2);
}

{
  WebCore::SVGCursorElement::~SVGCursorElement((WebCore::SVGCursorElement *)((char *)this - 184), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGCursorElement::~SVGCursorElement((WebCore::SVGCursorElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGCursorElement::~SVGCursorElement((WebCore::SVGCursorElement *)((char *)this - 184), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

_QWORD *WebCore::SVGCursorElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  unsigned __int16 *v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::String *v19;
  __n128 v20;
  __n128 v21;
  int v23;

  v23 = 0;
  if (*(_QWORD *)a2 == WebCore::SVGNames::xAttr)
  {
    v10 = a1[25];
    ++*(_DWORD *)(v10 + 8);
    v15 = *a4;
    if (*a4)
    {
      v12 = (unsigned __int16 *)*((_QWORD *)v15 + 1);
      v13 = *((unsigned int *)v15 + 1) | ((unint64_t)((*((_DWORD *)v15 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v12 = 0;
      v13 = 0x100000000;
    }
    v14 = 0;
  }
  else
  {
    if (*(_QWORD *)a2 != WebCore::SVGNames::yAttr)
      goto LABEL_13;
    v10 = a1[26];
    ++*(_DWORD *)(v10 + 8);
    v11 = *a4;
    if (*a4)
    {
      v12 = (unsigned __int16 *)*((_QWORD *)v11 + 1);
      v13 = *((unsigned int *)v11 + 1) | ((unint64_t)((*((_DWORD *)v11 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v12 = 0;
      v13 = 0x100000000;
    }
    v14 = 1;
  }
  v16 = WebCore::SVGLengthValue::construct(v14, v12, v13, &v23, 0);
  v17 = *(_QWORD *)(v10 + 40);
  *(_DWORD *)(v17 + 28) = v16;
  *(_WORD *)(v17 + 32) = WORD2(v16);
  v18 = *(_QWORD *)(v10 + 48);
  if (v18)
  {
    *(_DWORD *)(v18 + 28) = v16;
    *(_WORD *)(v18 + 32) = WORD2(v16);
  }
  if (*(_DWORD *)(v10 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  else
    --*(_DWORD *)(v10 + 8);
LABEL_13:
  WebCore::SVGElement::reportAttributeParsingError((uint64_t)a1, v23, a2, a4);
  WebCore::SVGURIReference::parseAttribute((uint64_t)(a1 + 23), a2, (const WTF::AtomString *)a4, v19, v20);
  WebCore::SVGTests::parseAttribute((WTF *)(a1 + 22), a2, (const WTF::AtomString *)a4);
  return WebCore::SVGElement::attributeChanged((uint64_t)a1, a2, a3, a4, a5, v21);
}

WTF::StringImpl *WebCore::SVGCursorElement::svgAttributeChanged(uint64_t **this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  WTF::StringImpl *result;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;

  if ((byte_1ECE84DB8 & 1) != 0)
  {
    v4 = qword_1ECE84DB0;
    if (!qword_1ECE84DB0)
      goto LABEL_6;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v4 = qword_1ECE84DB0;
    if (v5)
      goto LABEL_7;
    if (qword_1ECE84DB0)
      v5 = (WTF::StringImpl ***)(qword_1ECE84DB0 + 16 * *(unsigned int *)(qword_1ECE84DB0 - 4));
    else
LABEL_6:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
LABEL_7:
  if ((byte_1ECE84DB8 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
  if ((WTF::StringImpl ***)v4 == v5 || !v5[1])
    return WebCore::SVGElement::svgAttributeChanged((WebCore::SVGElement *)this, (const WebCore::QualifiedName *)a2);
  if (((unint64_t)this[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v6 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 8) = this;
    *(_BYTE *)(v6 + 32) = 0;
    v7 = this[2];
    this[2] = (uint64_t *)((unint64_t)v7 & 0xFFFF000000000000 | v6);
    v8 = (unint64_t)v7 & 0xFFFFFFFFFFFFLL;
    if (((unint64_t)v7 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)v8);
        v32 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v32)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v32));
        v33 = *(WTF **)(v8 + 16);
        if (v33)
        {
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = 0;
          WTF::fastFree(v33, a2);
        }
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  v11 = (unint64_t)this[2] & 0xFFFFFFFFFFFFLL;
  do
    v12 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v12 + 1, (unsigned int *)v11));
  v13 = this[27];
  if (!v13)
  {
    v14 = 0;
    v15 = 0;
LABEL_20:
    v16 = v14;
    v14 = &v13[v15];
    goto LABEL_21;
  }
  v15 = *((unsigned int *)v13 - 1);
  v14 = &v13[v15];
  if (!*((_DWORD *)v13 - 3))
    goto LABEL_20;
  if (!(_DWORD)v15)
  {
    v29 = 0;
    v16 = this[27];
    goto LABEL_66;
  }
  v21 = 8 * v15;
  v16 = this[27];
  while ((unint64_t)(*v16 + 1) <= 1)
  {
    ++v16;
    v21 -= 8;
    if (!v21)
    {
      v16 = v14;
      break;
    }
  }
LABEL_21:
  if (v13)
  {
    v29 = *((unsigned int *)v13 - 1);
LABEL_66:
    v17 = &v13[v29];
    goto LABEL_23;
  }
  v17 = 0;
LABEL_23:
  if (v17 != v16)
  {
    while (!*(_QWORD *)(*v16 + 8))
    {
      v18 = v16 + 1;
      v16 = v14;
      if (v18 != v14)
      {
        v16 = v18;
        while ((unint64_t)(*v16 + 1) <= 1)
        {
          if (++v16 == v14)
          {
            v16 = v14;
            break;
          }
        }
      }
      if (v16 == v17)
      {
        v16 = v17;
        break;
      }
    }
  }
  if (v13)
    v19 = &v13[*((unsigned int *)v13 - 1)];
  else
    v19 = 0;
  while (v16 != v19)
  {
    v23 = *v16;
    v22 = v16 + 1;
    WebCore::StyleCursorImage::cursorElementChanged(*(WebCore::StyleCursorImage **)(v23 + 8), (WebCore::SVGCursorElement *)this);
    v24 = v14;
    if (v22 != v14)
    {
      v24 = v22;
      while ((unint64_t)(*v24 + 1) <= 1)
      {
        if (++v24 == v14)
        {
          v24 = v14;
          break;
        }
      }
    }
    v16 = v17;
    if (v24 != v17)
    {
      v16 = v24;
      if (!*(_QWORD *)(*v24 + 8))
      {
        while (1)
        {
          v25 = v16 + 1;
          v16 = v14;
          if (v25 != v14)
          {
            v16 = v25;
            while ((unint64_t)(*v16 + 1) <= 1)
            {
              if (++v16 == v14)
              {
                v16 = v14;
                break;
              }
            }
          }
          if (v16 == v17)
            break;
          if (*(_QWORD *)(*v16 + 8))
            goto LABEL_58;
        }
        v16 = v17;
      }
    }
LABEL_58:
    ++*((_DWORD *)this + 56);
  }
  result = (WTF::StringImpl *)WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v11 + 8), a2);
  do
  {
    v27 = __ldaxr((unsigned int *)v11);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, (unsigned int *)v11));
  if (!v28)
  {
    atomic_store(1u, (unsigned int *)v11);
    v30 = *(unsigned int *)(v11 + 28);
    if ((_DWORD)v30)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v30));
    v31 = *(WTF **)(v11 + 16);
    if (v31)
    {
      *(_QWORD *)(v11 + 16) = 0;
      *(_DWORD *)(v11 + 24) = 0;
      WTF::fastFree(v31, v26);
    }
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v11, v26);
  }
  return result;
}

WTF::StringImpl *WebCore::SVGCursorElement::addSubresourceAttributeURLs(_QWORD *a1, uint64_t *a2)
{
  WebCore::Document *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19[5];
  _BYTE v20[24];

  WebCore::StyledElement::addSubresourceAttributeURLs(a1, (uint64_t)a2);
  v4 = *(WebCore::Document **)(a1[5] + 8);
  v5 = a1[24];
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6 || !*(_DWORD *)(v6 - 12))
    goto LABEL_2;
  v13 = *(unsigned int *)(v6 - 4);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = *(uint64_t **)(v5 + 24);
    while ((unint64_t)(*v15 + 1) <= 1)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
        goto LABEL_2;
    }
  }
  else
  {
    v15 = *(uint64_t **)(v5 + 24);
  }
  v16 = (uint64_t *)(v6 + 8 * v13);
  if (v15 == v16)
    goto LABEL_2;
  v17 = *v15;
LABEL_25:
  if (!*(_QWORD *)(v17 + 8))
  {
    while (++v15 != v16)
    {
      v17 = *v15;
      if ((unint64_t)(*v15 + 1) > 1)
      {
        if (v15 != v16)
          goto LABEL_25;
        break;
      }
    }
LABEL_2:
    v7 = v5 + 40;
    goto LABEL_3;
  }
  v7 = v5 + 48;
LABEL_3:
  v8 = *(WTF::StringImpl **)(*(_QWORD *)v7 + 32);
  if (v8)
    *(_DWORD *)v8 += 2;
  v18 = v8;
  WebCore::Document::completeURL(v4, &v18, (uint64_t)v4 + 848, 0, (WTF::URL *)v19);
  if (v19[0])
  {
    WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v19, v10, (uint64_t)v20);
    v11 = v19[0];
    v19[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    v19[0] = 0;
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGDefsElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  *v6 = off_1E3455200;
  v6[14] = &unk_1E3455770;
  v6[22] = &unk_1E34557A8;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3455AD0;
  v7[1] = v6;
  v9 = v7;
  WebCore::SVGGraphicsElement::SVGGraphicsElement((uint64_t)v6, a1, a2, (uint64_t *)&v9, 0);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *v6 = off_1E3455200;
  v6[14] = &unk_1E3455770;
  v6[22] = &unk_1E34557A8;
  *a3 = v6;
  return result;
}

uint64_t WebCore::SVGDefsElement::isValid(WebCore::SVGDefsElement *this, void *a2)
{
  return WebCore::SVGTests::isValid((WebCore::SVGDefsElement *)((char *)this + 184), a2);
}

void WebCore::SVGDefsElement::createElementRenderer(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 680) & 0x800000000000) != 0)
  {
    v9 = WebCore::RenderSVGHiddenContainer::operator new(224);
    WebCore::RenderSVGHiddenContainer::RenderSVGHiddenContainer(v9, 69, a1, a2, 0);
  }
  else
  {
    v6 = bmalloc::api::isoAllocate();
    v7 = WebCore::RenderElement::RenderElement(v6, 91, a1, a2, 0, 9988);
    *(_QWORD *)(v7 + 144) = 0;
    *(_QWORD *)(v7 + 152) = 0;
    v8 = vdupq_n_s32(0x7FC00000u);
    *(int32x4_t *)(v7 + 160) = v8;
    *(_QWORD *)(v7 + 176) = 0;
    *(_QWORD *)(v7 + 184) = 0;
    *(int32x4_t *)(v7 + 192) = v8;
    *(_WORD *)(v7 + 208) = 256;
    *(_BYTE *)(v7 + 210) = 0;
    *(_QWORD *)v7 = off_1E344B068;
  }
  *a3 = v7;
}

void WebCore::SVGAnimateMotionElement::~SVGAnimateMotionElement(WebCore::SVGAnimateMotionElement *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v3 = *((unsigned int *)this + 164);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E34557F0[v3])(&v5, (char *)this + 600);
  *((_DWORD *)this + 164) = -1;
  v4 = *((unsigned int *)this + 146);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34557F0[v4])(&v6, (char *)this + 528);
  *((_DWORD *)this + 146) = -1;
  WebCore::SVGAnimationElement::~SVGAnimationElement(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;
  char v7;
  char v8;

  v3 = *((unsigned int *)this + 164);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E34557F0[v3])(&v7, (char *)this + 600);
  *((_DWORD *)this + 164) = -1;
  v4 = *((unsigned int *)this + 146);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34557F0[v4])(&v8, (char *)this + 528);
  *((_DWORD *)this + 146) = -1;
  WebCore::SVGAnimationElement::~SVGAnimationElement(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void `non-virtual thunk to'WebCore::SVGAnimateMotionElement::~SVGAnimateMotionElement(WebCore::SVGAnimateMotionElement *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v3 = *((unsigned int *)this + 136);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E34557F0[v3])(&v5, (char *)this + 488);
  *((_DWORD *)this + 136) = -1;
  v4 = *((unsigned int *)this + 118);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34557F0[v4])(&v6, (char *)this + 416);
  *((_DWORD *)this + 118) = -1;
  WebCore::SVGAnimationElement::~SVGAnimationElement((WebCore::SVGAnimateMotionElement *)((char *)this - 112), a2);
}

{
  uint64_t v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;
  char v7;
  char v8;

  v3 = *((unsigned int *)this + 136);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E34557F0[v3])(&v7, (char *)this + 488);
  *((_DWORD *)this + 136) = -1;
  v4 = *((unsigned int *)this + 118);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34557F0[v4])(&v8, (char *)this + 416);
  *((_DWORD *)this + 118) = -1;
  WebCore::SVGAnimationElement::~SVGAnimationElement((WebCore::SVGAnimateMotionElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::SVGAnimateTransformElement::~SVGAnimateTransformElement(WebCore::SVGAnimateTransformElement *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E34521C0;
  *((_QWORD *)this + 14) = &unk_1E3452788;
  v3 = (_DWORD *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGAnimationElement::~SVGAnimationElement(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E34521C0;
  *((_QWORD *)this + 14) = &unk_1E3452788;
  v3 = (_DWORD *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGAnimationElement::~SVGAnimationElement(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void `non-virtual thunk to'WebCore::SVGAnimateTransformElement::~SVGAnimateTransformElement(WebCore::SVGAnimateTransformElement *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WebCore::SVGAnimationElement *v4;

  *(_QWORD *)this = &unk_1E3452788;
  v3 = (_DWORD *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this - 14) = off_1E34521C0;
  v4 = (WebCore::SVGAnimateTransformElement *)((char *)this - 112);
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGAnimationElement::~SVGAnimationElement(v4, a2);
}

{
  _DWORD *v3;
  WebCore::SVGAnimationElement *v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E3452788;
  v3 = (_DWORD *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this - 14) = off_1E34521C0;
  v4 = (WebCore::SVGAnimateTransformElement *)((char *)this - 112);
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGAnimationElement::~SVGAnimationElement(v4, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::SVGCircleElement::~SVGCircleElement(WebCore::SVGCircleElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *(_QWORD *)this = off_1E346AC90;
  *((_QWORD *)this + 14) = &unk_1E346B210;
  *((_QWORD *)this + 22) = &unk_1E346B248;
  v6 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement(this, a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *(_QWORD *)this = off_1E346AC90;
  *((_QWORD *)this + 14) = &unk_1E346B210;
  *((_QWORD *)this + 22) = &unk_1E346B248;
  v6 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement(this, a2);
  bmalloc::api::isoDeallocate(v7, v8);
}

uint64_t WebCore::SVGGeometryElement::isSVGGeometryElement(WebCore::SVGGeometryElement *this)
{
  return 1;
}

uint64_t WebCore::SVGCircleElement::isValid(WebCore::SVGCircleElement *this, void *a2)
{
  return WebCore::SVGTests::isValid((WebCore::SVGCircleElement *)((char *)this + 184), a2);
}

uint64_t WebCore::SVGCircleElement::selfHasRelativeLengths(WebCore::SVGCircleElement *this)
{
  return 1;
}

void `non-virtual thunk to'WebCore::SVGCircleElement::~SVGCircleElement(WebCore::SVGCircleElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *((_QWORD *)this - 14) = off_1E346AC90;
  *(_QWORD *)this = &unk_1E346B210;
  *((_QWORD *)this + 8) = &unk_1E346B248;
  v6 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement((WebCore::SVGCircleElement *)((char *)this - 112), a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *((_QWORD *)this - 14) = off_1E346AC90;
  *(_QWORD *)this = &unk_1E346B210;
  *((_QWORD *)this + 8) = &unk_1E346B248;
  v6 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement((WebCore::SVGCircleElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v7, v8);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *((_QWORD *)this - 22) = off_1E346AC90;
  *((_QWORD *)this - 8) = &unk_1E346B210;
  *(_QWORD *)this = &unk_1E346B248;
  v6 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement((WebCore::SVGCircleElement *)((char *)this - 176), a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *((_QWORD *)this - 22) = off_1E346AC90;
  *((_QWORD *)this - 8) = &unk_1E346B210;
  *(_QWORD *)this = &unk_1E346B248;
  v6 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement((WebCore::SVGCircleElement *)((char *)this - 176), a2);
  bmalloc::api::isoDeallocate(v7, v8);
}

void WebCore::SVGClipPathElement::~SVGClipPathElement(WebCore::SVGClipPathElement *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::SVGClipPathElement::supportsFocus(WebCore::SVGClipPathElement *this)
{
  return 0;
}

uint64_t WebCore::SVGClipPathElement::needsPendingResourceHandling(WebCore::SVGClipPathElement *this)
{
  return 0;
}

uint64_t WebCore::SVGClipPathElement::isValid(WebCore::SVGClipPathElement *this, void *a2)
{
  return WebCore::SVGTests::isValid((WebCore::SVGClipPathElement *)((char *)this + 184), a2);
}

void `non-virtual thunk to'WebCore::SVGClipPathElement::~SVGClipPathElement(WebCore::SVGClipPathElement *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement((WebCore::SVGClipPathElement *)((char *)this - 112), a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement((WebCore::SVGClipPathElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement((WebCore::SVGClipPathElement *)((char *)this - 176), a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement((WebCore::SVGClipPathElement *)((char *)this - 176), a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::SVGComponentTransferFunctionElement::rendererIsNeeded(WebCore::SVGComponentTransferFunctionElement *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

uint64_t WebCore::SVGCursorElement::rendererIsNeeded(WebCore::SVGCursorElement *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

uint64_t WebCore::SVGCursorElement::isValid(WebCore::SVGCursorElement *this, void *a2)
{
  return WebCore::SVGTests::isValid((WebCore::SVGCursorElement *)((char *)this + 176), a2);
}

void WebCore::SVGDefsElement::~SVGDefsElement(WebCore::SVGDefsElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGGraphicsElement::~SVGGraphicsElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGDefsElement::supportsFocus(WebCore::SVGDefsElement *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::SVGDefsElement::~SVGDefsElement(WebCore::SVGDefsElement *this, void *a2)
{
  WebCore::SVGGraphicsElement::~SVGGraphicsElement((WebCore::SVGDefsElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGGraphicsElement::~SVGGraphicsElement((WebCore::SVGDefsElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::SVGGraphicsElement::~SVGGraphicsElement((WebCore::SVGDefsElement *)((char *)this - 176), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGGraphicsElement::~SVGGraphicsElement((WebCore::SVGDefsElement *)((char *)this - 176), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::StringImpl **WTF::GenericHashTraits<WebCore::QualifiedName>::assignToEmpty<WebCore::QualifiedName,WebCore::QualifiedName const&>(WTF::StringImpl ***a1, WTF::StringImpl ***a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  if (*a2)
    ++*(_DWORD *)v3;
  result = *a1;
  *a1 = v3;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

char *WTF::Vector<WebCore::UnitBezier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  WTF *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(_DWORD *)(a1 + 12);
    if ((unint64_t)v5 + 152 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v22 = *(WTF **)a1;
        return (char *)v22 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (v9 < 0x1AF286C)
      {
        v10 = 152 * v9;
        v11 = WTF::fastMalloc((WTF *)(152 * v9));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10 / 0x98;
        *(_QWORD *)a1 = v11;
        do
        {
          v14 = v11 + v13;
          v15 = *(_OWORD *)((char *)v5 + v13 + 16);
          *(_OWORD *)v14 = *(_OWORD *)((char *)v5 + v13);
          *(_OWORD *)(v14 + 16) = v15;
          v16 = *(_OWORD *)((char *)v5 + v13 + 32);
          v17 = *(_OWORD *)((char *)v5 + v13 + 48);
          v18 = *(_OWORD *)((char *)v5 + v13 + 80);
          *(_OWORD *)(v14 + 64) = *(_OWORD *)((char *)v5 + v13 + 64);
          *(_OWORD *)(v14 + 80) = v18;
          *(_OWORD *)(v14 + 32) = v16;
          *(_OWORD *)(v14 + 48) = v17;
          v19 = *(_OWORD *)((char *)v5 + v13 + 96);
          v20 = *(_OWORD *)((char *)v5 + v13 + 112);
          v21 = *(_OWORD *)((char *)v5 + v13 + 128);
          *(_QWORD *)(v14 + 144) = *(_QWORD *)((char *)v5 + v13 + 144);
          *(_OWORD *)(v14 + 112) = v20;
          *(_OWORD *)(v14 + 128) = v21;
          *(_OWORD *)(v14 + 96) = v19;
          v13 += 152;
        }
        while (152 * v6 != v13);
        v22 = *(WTF **)a1;
        if (v5)
        {
          if (v22 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v22 = *(WTF **)a1;
        }
        return (char *)v22 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x1965DADC8);
    }
  }
  v23 = *(unsigned int *)(a1 + 8);
  v24 = v23 + (v23 >> 2);
  if (v24 >= 0x10)
    v25 = v24 + 1;
  else
    v25 = 16;
  if (v25 <= a2)
    v25 = a2;
  if (v25 > v23)
  {
    if (v25 >= 0x1AF286C)
      goto LABEL_33;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = 152 * v25;
    v28 = WTF::fastMalloc((WTF *)(152 * v25));
    *(_DWORD *)(a1 + 8) = v27 / 0x98;
    *(_QWORD *)a1 = v28;
    if (v26)
    {
      v30 = 152 * v26;
      v31 = v5;
      do
      {
        v32 = *((_OWORD *)v31 + 1);
        *(_OWORD *)v28 = *(_OWORD *)v31;
        *(_OWORD *)(v28 + 16) = v32;
        v33 = *((_OWORD *)v31 + 2);
        v34 = *((_OWORD *)v31 + 3);
        v35 = *((_OWORD *)v31 + 5);
        *(_OWORD *)(v28 + 64) = *((_OWORD *)v31 + 4);
        *(_OWORD *)(v28 + 80) = v35;
        *(_OWORD *)(v28 + 32) = v33;
        *(_OWORD *)(v28 + 48) = v34;
        v36 = *((_OWORD *)v31 + 6);
        v37 = *((_OWORD *)v31 + 7);
        v38 = *((_OWORD *)v31 + 8);
        *(_QWORD *)(v28 + 144) = *((_QWORD *)v31 + 18);
        *(_OWORD *)(v28 + 112) = v37;
        *(_OWORD *)(v28 + 128) = v38;
        *(_OWORD *)(v28 + 96) = v36;
        v28 += 152;
        v31 = (WTF *)((char *)v31 + 152);
        v30 -= 152;
      }
      while (v30);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v29);
    }
  }
  return (char *)v3;
}

_QWORD *WebCore::SVGCircleElement::SVGCircleElement(_QWORD *a1, _DWORD **a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v16;
  char **v17;
  char *v18;

  *a1 = off_1E3454048;
  a1[14] = &unk_1E34545C8;
  a1[22] = &unk_1E3454600;
  v6 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E3455848;
  *((_QWORD *)v6 + 1) = a1;
  v18 = v6;
  WebCore::SVGGeometryElement::SVGGeometryElement((uint64_t)a1, a2, a3, (uint64_t *)&v18);
  v7 = (uint64_t)v18;
  v18 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *a1 = off_1E3454048;
  a1[14] = &unk_1E34545C8;
  a1[22] = &unk_1E3454600;
  v8 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)v8 = off_1E3456B10;
  v17 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v18, 0, (uint64_t *)&v17);
  v9 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 16) = v8;
  *(_WORD *)(v9 + 24) = 0;
  *(_QWORD *)v9 = off_1E32EE180;
  *(_QWORD *)(v9 + 28) = v18;
  *(_QWORD *)v9 = off_1E32EE148;
  *(_QWORD *)(v8 + 40) = v9;
  *(_QWORD *)(v8 + 48) = 0;
  a1[28] = v8;
  v10 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)v10 = off_1E3456B10;
  v17 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v18, 1, (uint64_t *)&v17);
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 16) = v10;
  *(_WORD *)(v11 + 24) = 0;
  *(_QWORD *)v11 = off_1E32EE180;
  *(_QWORD *)(v11 + 28) = v18;
  *(_QWORD *)v11 = off_1E32EE148;
  *(_QWORD *)(v10 + 40) = v11;
  *(_QWORD *)(v10 + 48) = 0;
  a1[29] = v10;
  v12 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)v12 = off_1E3456B10;
  v17 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v18, 2, (uint64_t *)&v17);
  v13 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 16) = v12;
  *(_WORD *)(v13 + 24) = 0;
  *(_QWORD *)v13 = off_1E32EE180;
  *(_QWORD *)(v13 + 28) = v18;
  *(_QWORD *)v13 = off_1E32EE148;
  *(_QWORD *)(v12 + 40) = v13;
  *(_QWORD *)(v12 + 48) = 0;
  a1[30] = v12;
  v14 = atomic_load(&WebCore::SVGCircleElement::SVGCircleElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v14 != -1)
  {
    v17 = &v18;
    v18 = &v16;
    std::__call_once(&WebCore::SVGCircleElement::SVGCircleElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGCircleElement::SVGCircleElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  return a1;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl ***v8;
  uint64_t v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF *v17;
  void *v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  WTF *v26;
  void *v27;
  WTF::StringImpl ***v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF *v37;
  void *v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl ***v41;
  WTF::StringImpl **v42;
  int v43;
  WTF::StringImpl **v44;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***v48;
  uint64_t v49;
  WTF::StringImpl ***v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  int v53;
  WTF::StringImpl **v54;
  uint64_t v55;
  WTF *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl ***v61;
  WTF::StringImpl ***v62;
  WTF::StringImpl **v63;
  int v64;
  WTF::StringImpl **v65;
  WTF *v67;
  void *v68;
  WTF::StringImpl ***v69;
  WTF::StringImpl ***v70;
  uint64_t v71;
  WTF::StringImpl ***v72;
  WTF::StringImpl ***v73;
  WTF::StringImpl **v74;
  uint64_t v75;
  int v76;
  WTF::StringImpl **v77;
  uint64_t v78;
  WTF *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl ***v84[2];

  v1 = result;
  if ((byte_1ECE84D58 & 1) == 0)
  {
    v2 = 0;
    v6 = 0;
    v3 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
    goto LABEL_170;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE84D50;
  if (!qword_1ECE84D50)
  {
    v6 = 0;
    v3 = 0;
LABEL_170:
    v4 = (uint64_t)&v2[2 * v3];
    goto LABEL_11;
  }
  v3 = *(unsigned int *)(qword_1ECE84D50 - 4);
  v4 = qword_1ECE84D50 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE84D50 - 12))
  {
    v6 = qword_1ECE84D50 + 16 * v3;
    goto LABEL_170;
  }
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*v2);
      if ((result & 1) == 0 && *v2 != (WTF::StringImpl **)-1)
        break;
      v2 += 2;
      v5 -= 16;
      if (!v5)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v6 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE84D50;
  }
  else
  {
    v6 = qword_1ECE84D50;
  }
LABEL_11:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  while ((WTF::StringImpl ***)v6 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 8) + 16))(*(_QWORD *)(v6 + 8), *(_QWORD *)(v1 + 8));
    v7 = v6 + 16;
    v6 = v4;
    if (v7 != v4)
    {
      v6 = v7;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*(WTF::StringImpl ***)v6);
        if ((result & 1) == 0 && *(_QWORD *)v6 != -1)
          break;
        v6 += 16;
        if (v6 == v4)
        {
          v6 = v4;
          break;
        }
      }
    }
  }
  {
    v8 = 0;
    v20 = 0;
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_174;
  }
  v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v20 = 0;
    v9 = 0;
LABEL_174:
    v10 = &v8[2 * v9];
    goto LABEL_42;
  }
  v9 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v9);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v9);
    goto LABEL_174;
  }
  if ((_DWORD)v9)
  {
    v11 = (WTF::StringImpl **)WebCore::nullName;
    v12 = 16 * v9;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v11)
        {
          v13 = (*(_DWORD *)v11)++;
          v14 = *v8;
          if (v13)
          {
            *(_DWORD *)v11 = v13;
            v15 = (uint64_t)v11;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v11);
            result = WTF::fastFree(v17, v18);
            v15 = WebCore::nullName;
          }
        }
        else
        {
          v15 = 0;
          v14 = *v8;
        }
        if (v14 != v11 && (WTF::StringImpl **)((char *)*v8 + 1) != 0)
          break;
        v8 += 2;
        v11 = (WTF::StringImpl **)v15;
        v12 -= 16;
        if (!v12)
        {
          v8 = v10;
          break;
        }
      }
      v20 = v8;
      v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v19 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v19)
                               + 1) <= 1)
      {
        v19 += 16;
        if (v12 == v19)
        {
          v20 = v10;
          goto LABEL_42;
        }
      }
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v19);
    }
  }
  else
  {
    v20 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_42:
  if (v8)
    v8 += 2 * *((unsigned int *)v8 - 1);
  while (v20 != v8)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v20[1] + 2))(v20[1], *(_QWORD *)(v1 + 8));
    v21 = v20 + 2;
    v20 = v10;
    if (v21 != v10)
    {
      v22 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v22)
          {
            v23 = (*(_DWORD *)v22)++;
            v24 = *v21;
            if (v23)
            {
              *(_DWORD *)v22 = v23;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
              result = WTF::fastFree(v26, v27);
            }
          }
          else
          {
            v24 = *v21;
          }
          if (v24 != v22 && (WTF::StringImpl **)((char *)*v21 + 1) != 0)
            break;
          v21 += 2;
          if (v21 == v10)
            goto LABEL_60;
          v22 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v21 + 1 <= 1)
        {
          v21 += 2;
          if (v21 == v10)
          {
LABEL_60:
            v20 = v10;
            goto LABEL_62;
          }
        }
      }
      v20 = v21;
    }
LABEL_62:
    ;
  }
  {
    v28 = 0;
    v40 = 0;
    v29 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_176;
  }
  v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v40 = 0;
    v29 = 0;
LABEL_176:
    v30 = &v28[2 * v29];
    goto LABEL_84;
  }
  v29 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v30 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v29);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v40 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v29);
    goto LABEL_176;
  }
  if ((_DWORD)v29)
  {
    v31 = (WTF::StringImpl **)WebCore::nullName;
    v32 = 16 * v29;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v31)
        {
          v33 = (*(_DWORD *)v31)++;
          v34 = *v28;
          if (v33)
          {
            *(_DWORD *)v31 = v33;
            v35 = (uint64_t)v31;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v31);
            result = WTF::fastFree(v37, v38);
            v35 = WebCore::nullName;
          }
        }
        else
        {
          v35 = 0;
          v34 = *v28;
        }
        if (v34 != v31 && (WTF::StringImpl **)((char *)*v28 + 1) != 0)
          break;
        v28 += 2;
        v31 = (WTF::StringImpl **)v35;
        v32 -= 16;
        if (!v32)
        {
          v28 = v30;
          break;
        }
      }
      v40 = v28;
      v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v39 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v39)
                               + 1) <= 1)
      {
        v39 += 16;
        if (v32 == v39)
        {
          v40 = v30;
          goto LABEL_84;
        }
      }
      v40 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v39);
    }
  }
  else
  {
    v40 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_84:
  if (v28)
    v28 += 2 * *((unsigned int *)v28 - 1);
  while (v40 != v28)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v40[1] + 2))(v40[1], *(_QWORD *)(v1 + 8));
    v41 = v40 + 2;
    v40 = v30;
    if (v41 != v30)
    {
      v42 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v42)
          {
            v43 = (*(_DWORD *)v42)++;
            v44 = *v41;
            if (v43)
            {
              *(_DWORD *)v42 = v43;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v42);
              result = WTF::fastFree(v46, v47);
            }
          }
          else
          {
            v44 = *v41;
          }
          if (v44 != v42 && (WTF::StringImpl **)((char *)*v41 + 1) != 0)
            break;
          v41 += 2;
          if (v41 == v30)
            goto LABEL_102;
          v42 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v41 + 1 <= 1)
        {
          v41 += 2;
          if (v41 == v30)
          {
LABEL_102:
            v40 = v30;
            goto LABEL_104;
          }
        }
      }
      v40 = v41;
    }
LABEL_104:
    ;
  }
  {
    v48 = 0;
    v61 = 0;
    v49 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_178;
  }
  v48 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v61 = 0;
    v49 = 0;
LABEL_178:
    v50 = &v48[2 * v49];
    goto LABEL_127;
  }
  v49 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v50 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v49);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v61 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v49);
    goto LABEL_178;
  }
  if ((_DWORD)v49)
  {
    v51 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v52 = 16 * v49;
      while (1)
      {
        if (v51)
        {
          v53 = (*(_DWORD *)v51)++;
          v54 = *v48;
          if (v53)
          {
            *(_DWORD *)v51 = v53;
            v55 = (uint64_t)v51;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v51);
            result = WTF::fastFree(v57, v58);
            v55 = WebCore::nullName;
          }
        }
        else
        {
          v55 = 0;
          v54 = *v48;
        }
        if (v54 != v51 && (WTF::StringImpl **)((char *)*v48 + 1) != 0)
          break;
        v48 += 2;
        v51 = (WTF::StringImpl **)v55;
        v52 -= 16;
        if (!v52)
        {
          v48 = v50;
          break;
        }
      }
      v61 = v48;
      v48 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v59 = 0;
      v60 = 16 * v49;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v59)
                               + 1) <= 1)
      {
        v59 += 16;
        if (v60 == v59)
        {
          v61 = v50;
          goto LABEL_127;
        }
      }
      v61 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v59);
    }
  }
  else
  {
    v61 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_127:
  if (v48)
    v48 += 2 * *((unsigned int *)v48 - 1);
  while (v61 != v48)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v61[1] + 2))(v61[1], *(_QWORD *)(v1 + 8));
    v62 = v61 + 2;
    v61 = v50;
    if (v62 != v50)
    {
      v63 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v63)
          {
            v64 = (*(_DWORD *)v63)++;
            v65 = *v62;
            if (v64)
            {
              *(_DWORD *)v63 = v64;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v63);
              result = WTF::fastFree(v67, v68);
            }
          }
          else
          {
            v65 = *v62;
          }
          if (v65 != v63 && (WTF::StringImpl **)((char *)*v62 + 1) != 0)
            break;
          v62 += 2;
          if (v62 == v50)
            goto LABEL_145;
          v63 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v62 + 1 <= 1)
        {
          v62 += 2;
          if (v62 == v50)
          {
LABEL_145:
            v61 = v50;
            goto LABEL_147;
          }
        }
      }
      v61 = v62;
    }
LABEL_147:
    ;
  }
  {
    v69 = 0;
    v70 = 0;
    v71 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v69 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v70 = 0;
    v71 = 0;
LABEL_151:
    v72 = &v69[2 * v71];
    goto LABEL_152;
  }
  v71 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v72 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v71);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v70 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v71);
    goto LABEL_151;
  }
  if ((_DWORD)v71)
  {
    v74 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v75 = 16 * v71;
      while (1)
      {
        if (v74)
        {
          v76 = (*(_DWORD *)v74)++;
          v77 = *v69;
          if (v76)
          {
            *(_DWORD *)v74 = v76;
            v78 = (uint64_t)v74;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v74);
            result = WTF::fastFree(v80, v81);
            v78 = WebCore::nullName;
          }
        }
        else
        {
          v78 = 0;
          v77 = *v69;
        }
        if (v77 != v74 && (WTF::StringImpl **)((char *)*v69 + 1) != 0)
          break;
        v69 += 2;
        v74 = (WTF::StringImpl **)v78;
        v75 -= 16;
        if (!v75)
        {
          v69 = v72;
          break;
        }
      }
      v70 = v69;
      v69 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v82 = 0;
      v83 = 16 * v71;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v82)
                               + 1) <= 1)
      {
        v82 += 16;
        if (v83 == v82)
        {
          v70 = v72;
          goto LABEL_152;
        }
      }
      v70 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v82);
    }
  }
  else
  {
    v70 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_152:
  v84[0] = v70;
  v84[1] = v72;
  if (v69)
    v73 = &v69[2 * *((unsigned int *)v69 - 1)];
  else
    v73 = 0;
  if (v73 != v70)
  {
    do
    {
      (*((void (**)(WTF::StringImpl **, uint64_t))*v70[1] + 2))(v70[1], *(_QWORD *)(v1 + 8) + 184);
      result = (uint64_t)WTF::HashTableIteratorAdapter<WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>::operator++(v84);
      v70 = v84[0];
    }
    while (v84[0] != v73);
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::propertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _DWORD *v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF *v22;
  void *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl ***v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  int v29;
  WTF::StringImpl **v30;
  WTF *v32;
  void *v33;
  WTF::StringImpl ***v34;
  uint64_t v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl **v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  WTF *v43;
  void *v44;
  uint64_t v45;
  WTF::StringImpl ***v46;
  WTF::StringImpl **v47;
  int v48;
  WTF::StringImpl **v49;
  WTF *v51;
  void *v52;
  WTF::StringImpl ***v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  int v58;
  WTF::StringImpl **v59;
  uint64_t v60;
  WTF *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl ***v66;
  WTF::StringImpl **v67;
  int v68;
  WTF::StringImpl **v69;
  WTF *v71;
  void *v72;
  WTF::StringImpl ***v73;
  uint64_t v74;
  WTF::StringImpl ***v75;
  WTF::StringImpl ***v76;
  WTF::StringImpl **v77;
  int v78;
  WTF::StringImpl **v79;
  WTF *v81;
  void *v82;
  WTF::StringImpl **v83;
  WTF *v84;
  void *v85;
  WTF::StringImpl **v86;
  uint64_t v87;
  int v88;
  WTF::StringImpl **v89;
  uint64_t v90;
  WTF *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;

  v4 = result;
  v6 = (_DWORD *)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = (uint64_t)v6;
  if ((byte_1ECE84D58 & 1) == 0)
  {
    v7 = 0;
    v11 = 0;
    v8 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
    goto LABEL_205;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE84D50;
  if (!qword_1ECE84D50)
  {
    v11 = 0;
    v8 = 0;
LABEL_205:
    v9 = (uint64_t)&v7[2 * v8];
    goto LABEL_13;
  }
  v8 = *(unsigned int *)(qword_1ECE84D50 - 4);
  v9 = qword_1ECE84D50 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE84D50 - 12))
  {
    v11 = qword_1ECE84D50 + 16 * v8;
    goto LABEL_205;
  }
  if ((_DWORD)v8)
  {
    v10 = 16 * v8;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*v7);
      if ((result & 1) == 0 && *v7 != (WTF::StringImpl **)-1)
        break;
      v7 += 2;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v11 = (uint64_t)v7;
    v7 = (WTF::StringImpl ***)qword_1ECE84D50;
  }
  else
  {
    v11 = qword_1ECE84D50;
  }
LABEL_13:
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  if (v7 != (WTF::StringImpl ***)v11)
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v11 + 8) + 40))(*(_QWORD *)(v11 + 8), *(_QWORD *)(v4 + 8), a2);
      if ((_DWORD)result)
        break;
      v12 = v11 + 16;
      v11 = v9;
      if (v12 != v9)
      {
        v11 = v12;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*(WTF::StringImpl ***)v11);
          if ((result & 1) == 0 && *(_QWORD *)v11 != -1)
            break;
          v11 += 16;
          if (v11 == v9)
          {
            v11 = v9;
            break;
          }
        }
      }
      if ((WTF::StringImpl ***)v11 == v7)
        goto LABEL_24;
    }
    v24 = *(WTF::StringImpl ***)v11;
    if (*(_QWORD *)v11)
      ++*(_DWORD *)v24;
    *a3 = (uint64_t)v24;
    if (v6)
    {
      if (*v6 != 1)
      {
        --*v6;
        return result;
      }
      result = (uint64_t)v6;
      goto LABEL_201;
    }
    return result;
  }
LABEL_24:
  {
    v13 = 0;
    v26 = 0;
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_207;
  }
  v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v26 = 0;
    v14 = 0;
LABEL_207:
    v15 = &v13[2 * v14];
    goto LABEL_52;
  }
  v14 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v14);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v14);
    goto LABEL_207;
  }
  if ((_DWORD)v14)
  {
    v16 = (WTF::StringImpl **)WebCore::nullName;
    v17 = 16 * v14;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v16)
        {
          v18 = (*(_DWORD *)v16)++;
          v19 = *v13;
          if (v18)
          {
            *(_DWORD *)v16 = v18;
            v20 = (uint64_t)v16;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
            result = WTF::fastFree(v22, v23);
            v20 = WebCore::nullName;
          }
        }
        else
        {
          v20 = 0;
          v19 = *v13;
        }
        if (v19 != v16 && (WTF::StringImpl **)((char *)*v13 + 1) != 0)
          break;
        v13 += 2;
        v16 = (WTF::StringImpl **)v20;
        v17 -= 16;
        if (!v17)
        {
          v13 = v15;
          break;
        }
      }
      v26 = v13;
      v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v25 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v25)
                               + 1) <= 1)
      {
        v25 += 16;
        if (v17 == v25)
        {
          v26 = v15;
          goto LABEL_52;
        }
      }
      v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v25);
    }
  }
  else
  {
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_52:
  if (v13)
    v13 += 2 * *((unsigned int *)v13 - 1);
  if (v13 == v26)
  {
LABEL_74:
    {
      v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      {
        v35 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
              - 1);
        v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16 * v35);
        if (*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             - 3))
        {
          if ((_DWORD)v35)
          {
            v37 = (WTF::StringImpl **)WebCore::nullName;
            v38 = 16 * v35;
            if (WebCore::nullName)
            {
              while (1)
              {
                if (v37)
                {
                  v39 = (*(_DWORD *)v37)++;
                  v40 = *v34;
                  if (v39)
                  {
                    *(_DWORD *)v37 = v39;
                    v41 = (uint64_t)v37;
                  }
                  else
                  {
                    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
                    result = WTF::fastFree(v43, v44);
                    v41 = WebCore::nullName;
                  }
                }
                else
                {
                  v41 = 0;
                  v40 = *v34;
                }
                if (v40 != v37 && (WTF::StringImpl **)((char *)*v34 + 1) != 0)
                  break;
                v34 += 2;
                v37 = (WTF::StringImpl **)v41;
                v38 -= 16;
                if (!v38)
                {
                  v34 = v36;
                  break;
                }
              }
              v26 = v34;
              v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
            }
            else
            {
              v45 = 0;
              while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                                   + v45)
                                       + 1) <= 1)
              {
                v45 += 16;
                if (v38 == v45)
                {
                  v26 = v36;
                  goto LABEL_97;
                }
              }
              v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        + v45);
            }
          }
          else
          {
            v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
          }
LABEL_97:
          if (v34)
            v34 += 2 * *((unsigned int *)v34 - 1);
          while (v26 != v34)
          {
            result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v26[1] + 5))(v26[1], *(_QWORD *)(v4 + 8), a2);
            if ((_DWORD)result)
              goto LABEL_192;
            v46 = v26 + 2;
            v26 = v36;
            if (v46 != v36)
            {
              v47 = (WTF::StringImpl **)WebCore::nullName;
              if (WebCore::nullName)
              {
LABEL_103:
                v48 = (*(_DWORD *)v47)++;
                v49 = *v46;
                if (v48)
                {
                  *(_DWORD *)v47 = v48;
                }
                else
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v47);
                  result = WTF::fastFree(v51, v52);
                }
                while (v49 == v47 || (WTF::StringImpl **)((char *)*v46 + 1) == 0)
                {
                  v46 += 2;
                  if (v46 == v36)
                    goto LABEL_116;
                  v47 = (WTF::StringImpl **)WebCore::nullName;
                  if (WebCore::nullName)
                    goto LABEL_103;
                  v49 = *v46;
                }
              }
              else
              {
                while ((unint64_t)*v46 + 1 <= 1)
                {
                  v46 += 2;
                  if (v46 == v36)
                  {
LABEL_116:
                    v26 = v36;
                    goto LABEL_118;
                  }
                }
              }
              v26 = v46;
            }
LABEL_118:
            ;
          }
          {
            v53 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
            if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
            {
              v54 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                    - 1);
              v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        + 16 * v54);
              if (*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                   - 3))
              {
                if ((_DWORD)v54)
                {
                  v56 = (WTF::StringImpl **)WebCore::nullName;
                  if (WebCore::nullName)
                  {
                    v57 = 16 * v54;
                    while (1)
                    {
                      if (v56)
                      {
                        v58 = (*(_DWORD *)v56)++;
                        v59 = *v53;
                        if (v58)
                        {
                          *(_DWORD *)v56 = v58;
                          v60 = (uint64_t)v56;
                        }
                        else
                        {
                          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v56);
                          result = WTF::fastFree(v62, v63);
                          v60 = WebCore::nullName;
                        }
                      }
                      else
                      {
                        v60 = 0;
                        v59 = *v53;
                      }
                      if (v59 != v56 && (WTF::StringImpl **)((char *)*v53 + 1) != 0)
                        break;
                      v53 += 2;
                      v56 = (WTF::StringImpl **)v60;
                      v57 -= 16;
                      if (!v57)
                      {
                        v53 = v55;
                        break;
                      }
                    }
                    v26 = v53;
                    v53 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                  }
                  else
                  {
                    v64 = 0;
                    v65 = 16 * v54;
                    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                                         + v64)
                                             + 1) <= 1)
                    {
                      v64 += 16;
                      if (v65 == v64)
                      {
                        v26 = v55;
                        goto LABEL_143;
                      }
                    }
                    v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                              + v64);
                  }
                }
                else
                {
                  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                }
LABEL_143:
                if (v53)
                  v53 += 2 * *((unsigned int *)v53 - 1);
                while (v26 != v53)
                {
                  result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v26[1] + 5))(v26[1], *(_QWORD *)(v4 + 8), a2);
                  if ((_DWORD)result)
                    goto LABEL_192;
                  v66 = v26 + 2;
                  v26 = v55;
                  if (v66 != v55)
                  {
                    v67 = (WTF::StringImpl **)WebCore::nullName;
                    if (WebCore::nullName)
                    {
LABEL_149:
                      v68 = (*(_DWORD *)v67)++;
                      v69 = *v66;
                      if (v68)
                      {
                        *(_DWORD *)v67 = v68;
                      }
                      else
                      {
                        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v67);
                        result = WTF::fastFree(v71, v72);
                      }
                      while (v69 == v67 || (WTF::StringImpl **)((char *)*v66 + 1) == 0)
                      {
                        v66 += 2;
                        if (v66 == v55)
                          goto LABEL_162;
                        v67 = (WTF::StringImpl **)WebCore::nullName;
                        if (WebCore::nullName)
                          goto LABEL_149;
                        v69 = *v66;
                      }
                    }
                    else
                    {
                      while ((unint64_t)*v66 + 1 <= 1)
                      {
                        v66 += 2;
                        if (v66 == v55)
                        {
LABEL_162:
                          v26 = v55;
                          goto LABEL_164;
                        }
                      }
                    }
                    v26 = v66;
                  }
LABEL_164:
                  ;
                }
                {
                  v73 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                  if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
                  {
                    v74 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                          - 1);
                    v75 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                              + 16 * v74);
                    if (*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                         - 3))
                    {
                      if ((_DWORD)v74)
                      {
                        v86 = (WTF::StringImpl **)WebCore::nullName;
                        if (WebCore::nullName)
                        {
                          v87 = 16 * v74;
                          while (1)
                          {
                            if (v86)
                            {
                              v88 = (*(_DWORD *)v86)++;
                              v89 = *v73;
                              if (v88)
                              {
                                *(_DWORD *)v86 = v88;
                                v90 = (uint64_t)v86;
                              }
                              else
                              {
                                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v86);
                                result = WTF::fastFree(v92, v93);
                                v90 = WebCore::nullName;
                              }
                            }
                            else
                            {
                              v90 = 0;
                              v89 = *v73;
                            }
                            if (v89 != v86 && (WTF::StringImpl **)((char *)*v73 + 1) != 0)
                              break;
                            v73 += 2;
                            v86 = (WTF::StringImpl **)v90;
                            v87 -= 16;
                            if (!v87)
                            {
                              v73 = v75;
                              break;
                            }
                          }
                          v26 = v73;
                          v73 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                        }
                        else
                        {
                          v94 = 0;
                          v95 = 16 * v74;
                          while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                                               + v94)
                                                   + 1) <= 1)
                          {
                            v94 += 16;
                            if (v95 == v94)
                            {
                              v26 = v75;
                              goto LABEL_169;
                            }
                          }
                          v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                                    + v94);
                        }
                      }
                      else
                      {
                        v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                      }
                      goto LABEL_169;
                    }
                    v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                              + 16 * v74);
                  }
                  else
                  {
                    v26 = 0;
                    v74 = 0;
                  }
                }
                else
                {
                  v73 = 0;
                  v26 = 0;
                  v74 = 0;
                  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
                }
                v75 = &v73[2 * v74];
LABEL_169:
                if (v73)
                  v73 += 2 * *((unsigned int *)v73 - 1);
                if (v73 == v26)
                  return result;
                while (1)
                {
                  result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v26[1] + 5))(v26[1], *(_QWORD *)(v4 + 8) + 184, a2);
                  if ((_DWORD)result)
                    goto LABEL_192;
                  v76 = v26 + 2;
                  v26 = v75;
                  if (v76 != v75)
                  {
                    v77 = (WTF::StringImpl **)WebCore::nullName;
                    if (WebCore::nullName)
                    {
LABEL_175:
                      v78 = (*(_DWORD *)v77)++;
                      v79 = *v76;
                      if (v78)
                      {
                        *(_DWORD *)v77 = v78;
                      }
                      else
                      {
                        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v77);
                        result = WTF::fastFree(v81, v82);
                      }
                      while (v79 == v77 || (WTF::StringImpl **)((char *)*v76 + 1) == 0)
                      {
                        v76 += 2;
                        if (v76 == v75)
                          goto LABEL_188;
                        v77 = (WTF::StringImpl **)WebCore::nullName;
                        if (WebCore::nullName)
                          goto LABEL_175;
                        v79 = *v76;
                      }
                    }
                    else
                    {
                      while ((unint64_t)*v76 + 1 <= 1)
                      {
                        v76 += 2;
                        if (v76 == v75)
                        {
LABEL_188:
                          v26 = v75;
                          goto LABEL_190;
                        }
                      }
                    }
                    v26 = v76;
                  }
LABEL_190:
                  if (v26 == v73)
                    return result;
                }
              }
              v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        + 16 * v54);
            }
            else
            {
              v26 = 0;
              v54 = 0;
            }
          }
          else
          {
            v53 = 0;
            v26 = 0;
            v54 = 0;
            WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
          }
          v55 = &v53[2 * v54];
          goto LABEL_143;
        }
        v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16 * v35);
      }
      else
      {
        v26 = 0;
        v35 = 0;
      }
    }
    else
    {
      v34 = 0;
      v26 = 0;
      v35 = 0;
      WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    }
    v36 = &v34[2 * v35];
    goto LABEL_97;
  }
  while (1)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v26[1] + 5))(v26[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      break;
    v27 = v26 + 2;
    v26 = v15;
    if (v27 != v15)
    {
      v28 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_58:
        v29 = (*(_DWORD *)v28)++;
        v30 = *v27;
        if (v29)
        {
          *(_DWORD *)v28 = v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = WTF::fastFree(v32, v33);
        }
        while (v30 == v28 || (WTF::StringImpl **)((char *)*v27 + 1) == 0)
        {
          v27 += 2;
          if (v27 == v15)
            goto LABEL_71;
          v28 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_58;
          v30 = *v27;
        }
      }
      else
      {
        while ((unint64_t)*v27 + 1 <= 1)
        {
          v27 += 2;
          if (v27 == v15)
          {
LABEL_71:
            v26 = v15;
            goto LABEL_73;
          }
        }
      }
      v26 = v27;
    }
LABEL_73:
    if (v26 == v13)
      goto LABEL_74;
  }
LABEL_192:
  v83 = *v26;
  if (*v26)
    ++*(_DWORD *)v83;
  result = *a3;
  *a3 = (uint64_t)v83;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
LABEL_201:
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
      return WTF::fastFree(v84, v85);
    }
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::animatedPropertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _DWORD *v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF *v22;
  void *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl ***v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  int v29;
  WTF::StringImpl **v30;
  WTF *v32;
  void *v33;
  WTF::StringImpl ***v34;
  uint64_t v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl **v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  WTF *v43;
  void *v44;
  uint64_t v45;
  WTF::StringImpl ***v46;
  WTF::StringImpl **v47;
  int v48;
  WTF::StringImpl **v49;
  WTF *v51;
  void *v52;
  WTF::StringImpl ***v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  int v58;
  WTF::StringImpl **v59;
  uint64_t v60;
  WTF *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl ***v66;
  WTF::StringImpl **v67;
  int v68;
  WTF::StringImpl **v69;
  WTF *v71;
  void *v72;
  WTF::StringImpl ***v73;
  uint64_t v74;
  WTF::StringImpl ***v75;
  WTF::StringImpl ***v76;
  WTF::StringImpl **v77;
  int v78;
  WTF::StringImpl **v79;
  WTF *v81;
  void *v82;
  WTF::StringImpl **v83;
  WTF *v84;
  void *v85;
  WTF::StringImpl **v86;
  uint64_t v87;
  int v88;
  WTF::StringImpl **v89;
  uint64_t v90;
  WTF *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;

  v4 = result;
  v6 = (_DWORD *)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = (uint64_t)v6;
  if ((byte_1ECE84D58 & 1) == 0)
  {
    v7 = 0;
    v11 = 0;
    v8 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
    goto LABEL_205;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE84D50;
  if (!qword_1ECE84D50)
  {
    v11 = 0;
    v8 = 0;
LABEL_205:
    v9 = (uint64_t)&v7[2 * v8];
    goto LABEL_13;
  }
  v8 = *(unsigned int *)(qword_1ECE84D50 - 4);
  v9 = qword_1ECE84D50 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE84D50 - 12))
  {
    v11 = qword_1ECE84D50 + 16 * v8;
    goto LABEL_205;
  }
  if ((_DWORD)v8)
  {
    v10 = 16 * v8;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*v7);
      if ((result & 1) == 0 && *v7 != (WTF::StringImpl **)-1)
        break;
      v7 += 2;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v11 = (uint64_t)v7;
    v7 = (WTF::StringImpl ***)qword_1ECE84D50;
  }
  else
  {
    v11 = qword_1ECE84D50;
  }
LABEL_13:
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  if (v7 != (WTF::StringImpl ***)v11)
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v11 + 8) + 48))(*(_QWORD *)(v11 + 8), *(_QWORD *)(v4 + 8), a2);
      if ((_DWORD)result)
        break;
      v12 = v11 + 16;
      v11 = v9;
      if (v12 != v9)
      {
        v11 = v12;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*(WTF::StringImpl ***)v11);
          if ((result & 1) == 0 && *(_QWORD *)v11 != -1)
            break;
          v11 += 16;
          if (v11 == v9)
          {
            v11 = v9;
            break;
          }
        }
      }
      if ((WTF::StringImpl ***)v11 == v7)
        goto LABEL_24;
    }
    v24 = *(WTF::StringImpl ***)v11;
    if (*(_QWORD *)v11)
      ++*(_DWORD *)v24;
    *a3 = (uint64_t)v24;
    if (v6)
    {
      if (*v6 != 1)
      {
        --*v6;
        return result;
      }
      result = (uint64_t)v6;
      goto LABEL_201;
    }
    return result;
  }
LABEL_24:
  {
    v13 = 0;
    v26 = 0;
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_207;
  }
  v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v26 = 0;
    v14 = 0;
LABEL_207:
    v15 = &v13[2 * v14];
    goto LABEL_52;
  }
  v14 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v14);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v14);
    goto LABEL_207;
  }
  if ((_DWORD)v14)
  {
    v16 = (WTF::StringImpl **)WebCore::nullName;
    v17 = 16 * v14;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v16)
        {
          v18 = (*(_DWORD *)v16)++;
          v19 = *v13;
          if (v18)
          {
            *(_DWORD *)v16 = v18;
            v20 = (uint64_t)v16;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
            result = WTF::fastFree(v22, v23);
            v20 = WebCore::nullName;
          }
        }
        else
        {
          v20 = 0;
          v19 = *v13;
        }
        if (v19 != v16 && (WTF::StringImpl **)((char *)*v13 + 1) != 0)
          break;
        v13 += 2;
        v16 = (WTF::StringImpl **)v20;
        v17 -= 16;
        if (!v17)
        {
          v13 = v15;
          break;
        }
      }
      v26 = v13;
      v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v25 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v25)
                               + 1) <= 1)
      {
        v25 += 16;
        if (v17 == v25)
        {
          v26 = v15;
          goto LABEL_52;
        }
      }
      v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v25);
    }
  }
  else
  {
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_52:
  if (v13)
    v13 += 2 * *((unsigned int *)v13 - 1);
  if (v13 == v26)
  {
LABEL_74:
    {
      v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      {
        v35 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
              - 1);
        v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16 * v35);
        if (*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             - 3))
        {
          if ((_DWORD)v35)
          {
            v37 = (WTF::StringImpl **)WebCore::nullName;
            v38 = 16 * v35;
            if (WebCore::nullName)
            {
              while (1)
              {
                if (v37)
                {
                  v39 = (*(_DWORD *)v37)++;
                  v40 = *v34;
                  if (v39)
                  {
                    *(_DWORD *)v37 = v39;
                    v41 = (uint64_t)v37;
                  }
                  else
                  {
                    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
                    result = WTF::fastFree(v43, v44);
                    v41 = WebCore::nullName;
                  }
                }
                else
                {
                  v41 = 0;
                  v40 = *v34;
                }
                if (v40 != v37 && (WTF::StringImpl **)((char *)*v34 + 1) != 0)
                  break;
                v34 += 2;
                v37 = (WTF::StringImpl **)v41;
                v38 -= 16;
                if (!v38)
                {
                  v34 = v36;
                  break;
                }
              }
              v26 = v34;
              v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
            }
            else
            {
              v45 = 0;
              while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                                   + v45)
                                       + 1) <= 1)
              {
                v45 += 16;
                if (v38 == v45)
                {
                  v26 = v36;
                  goto LABEL_97;
                }
              }
              v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        + v45);
            }
          }
          else
          {
            v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
          }
LABEL_97:
          if (v34)
            v34 += 2 * *((unsigned int *)v34 - 1);
          while (v26 != v34)
          {
            result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v26[1] + 6))(v26[1], *(_QWORD *)(v4 + 8), a2);
            if ((_DWORD)result)
              goto LABEL_192;
            v46 = v26 + 2;
            v26 = v36;
            if (v46 != v36)
            {
              v47 = (WTF::StringImpl **)WebCore::nullName;
              if (WebCore::nullName)
              {
LABEL_103:
                v48 = (*(_DWORD *)v47)++;
                v49 = *v46;
                if (v48)
                {
                  *(_DWORD *)v47 = v48;
                }
                else
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v47);
                  result = WTF::fastFree(v51, v52);
                }
                while (v49 == v47 || (WTF::StringImpl **)((char *)*v46 + 1) == 0)
                {
                  v46 += 2;
                  if (v46 == v36)
                    goto LABEL_116;
                  v47 = (WTF::StringImpl **)WebCore::nullName;
                  if (WebCore::nullName)
                    goto LABEL_103;
                  v49 = *v46;
                }
              }
              else
              {
                while ((unint64_t)*v46 + 1 <= 1)
                {
                  v46 += 2;
                  if (v46 == v36)
                  {
LABEL_116:
                    v26 = v36;
                    goto LABEL_118;
                  }
                }
              }
              v26 = v46;
            }
LABEL_118:
            ;
          }
          {
            v53 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
            if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
            {
              v54 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                    - 1);
              v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        + 16 * v54);
              if (*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                   - 3))
              {
                if ((_DWORD)v54)
                {
                  v56 = (WTF::StringImpl **)WebCore::nullName;
                  if (WebCore::nullName)
                  {
                    v57 = 16 * v54;
                    while (1)
                    {
                      if (v56)
                      {
                        v58 = (*(_DWORD *)v56)++;
                        v59 = *v53;
                        if (v58)
                        {
                          *(_DWORD *)v56 = v58;
                          v60 = (uint64_t)v56;
                        }
                        else
                        {
                          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v56);
                          result = WTF::fastFree(v62, v63);
                          v60 = WebCore::nullName;
                        }
                      }
                      else
                      {
                        v60 = 0;
                        v59 = *v53;
                      }
                      if (v59 != v56 && (WTF::StringImpl **)((char *)*v53 + 1) != 0)
                        break;
                      v53 += 2;
                      v56 = (WTF::StringImpl **)v60;
                      v57 -= 16;
                      if (!v57)
                      {
                        v53 = v55;
                        break;
                      }
                    }
                    v26 = v53;
                    v53 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                  }
                  else
                  {
                    v64 = 0;
                    v65 = 16 * v54;
                    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                                         + v64)
                                             + 1) <= 1)
                    {
                      v64 += 16;
                      if (v65 == v64)
                      {
                        v26 = v55;
                        goto LABEL_143;
                      }
                    }
                    v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                              + v64);
                  }
                }
                else
                {
                  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                }
LABEL_143:
                if (v53)
                  v53 += 2 * *((unsigned int *)v53 - 1);
                while (v26 != v53)
                {
                  result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v26[1] + 6))(v26[1], *(_QWORD *)(v4 + 8), a2);
                  if ((_DWORD)result)
                    goto LABEL_192;
                  v66 = v26 + 2;
                  v26 = v55;
                  if (v66 != v55)
                  {
                    v67 = (WTF::StringImpl **)WebCore::nullName;
                    if (WebCore::nullName)
                    {
LABEL_149:
                      v68 = (*(_DWORD *)v67)++;
                      v69 = *v66;
                      if (v68)
                      {
                        *(_DWORD *)v67 = v68;
                      }
                      else
                      {
                        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v67);
                        result = WTF::fastFree(v71, v72);
                      }
                      while (v69 == v67 || (WTF::StringImpl **)((char *)*v66 + 1) == 0)
                      {
                        v66 += 2;
                        if (v66 == v55)
                          goto LABEL_162;
                        v67 = (WTF::StringImpl **)WebCore::nullName;
                        if (WebCore::nullName)
                          goto LABEL_149;
                        v69 = *v66;
                      }
                    }
                    else
                    {
                      while ((unint64_t)*v66 + 1 <= 1)
                      {
                        v66 += 2;
                        if (v66 == v55)
                        {
LABEL_162:
                          v26 = v55;
                          goto LABEL_164;
                        }
                      }
                    }
                    v26 = v66;
                  }
LABEL_164:
                  ;
                }
                {
                  v73 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                  if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
                  {
                    v74 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                          - 1);
                    v75 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                              + 16 * v74);
                    if (*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                         - 3))
                    {
                      if ((_DWORD)v74)
                      {
                        v86 = (WTF::StringImpl **)WebCore::nullName;
                        if (WebCore::nullName)
                        {
                          v87 = 16 * v74;
                          while (1)
                          {
                            if (v86)
                            {
                              v88 = (*(_DWORD *)v86)++;
                              v89 = *v73;
                              if (v88)
                              {
                                *(_DWORD *)v86 = v88;
                                v90 = (uint64_t)v86;
                              }
                              else
                              {
                                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v86);
                                result = WTF::fastFree(v92, v93);
                                v90 = WebCore::nullName;
                              }
                            }
                            else
                            {
                              v90 = 0;
                              v89 = *v73;
                            }
                            if (v89 != v86 && (WTF::StringImpl **)((char *)*v73 + 1) != 0)
                              break;
                            v73 += 2;
                            v86 = (WTF::StringImpl **)v90;
                            v87 -= 16;
                            if (!v87)
                            {
                              v73 = v75;
                              break;
                            }
                          }
                          v26 = v73;
                          v73 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                        }
                        else
                        {
                          v94 = 0;
                          v95 = 16 * v74;
                          while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                                               + v94)
                                                   + 1) <= 1)
                          {
                            v94 += 16;
                            if (v95 == v94)
                            {
                              v26 = v75;
                              goto LABEL_169;
                            }
                          }
                          v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                                    + v94);
                        }
                      }
                      else
                      {
                        v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                      }
                      goto LABEL_169;
                    }
                    v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                              + 16 * v74);
                  }
                  else
                  {
                    v26 = 0;
                    v74 = 0;
                  }
                }
                else
                {
                  v73 = 0;
                  v26 = 0;
                  v74 = 0;
                  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
                }
                v75 = &v73[2 * v74];
LABEL_169:
                if (v73)
                  v73 += 2 * *((unsigned int *)v73 - 1);
                if (v73 == v26)
                  return result;
                while (1)
                {
                  result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v26[1] + 6))(v26[1], *(_QWORD *)(v4 + 8) + 184, a2);
                  if ((_DWORD)result)
                    goto LABEL_192;
                  v76 = v26 + 2;
                  v26 = v75;
                  if (v76 != v75)
                  {
                    v77 = (WTF::StringImpl **)WebCore::nullName;
                    if (WebCore::nullName)
                    {
LABEL_175:
                      v78 = (*(_DWORD *)v77)++;
                      v79 = *v76;
                      if (v78)
                      {
                        *(_DWORD *)v77 = v78;
                      }
                      else
                      {
                        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v77);
                        result = WTF::fastFree(v81, v82);
                      }
                      while (v79 == v77 || (WTF::StringImpl **)((char *)*v76 + 1) == 0)
                      {
                        v76 += 2;
                        if (v76 == v75)
                          goto LABEL_188;
                        v77 = (WTF::StringImpl **)WebCore::nullName;
                        if (WebCore::nullName)
                          goto LABEL_175;
                        v79 = *v76;
                      }
                    }
                    else
                    {
                      while ((unint64_t)*v76 + 1 <= 1)
                      {
                        v76 += 2;
                        if (v76 == v75)
                        {
LABEL_188:
                          v26 = v75;
                          goto LABEL_190;
                        }
                      }
                    }
                    v26 = v76;
                  }
LABEL_190:
                  if (v26 == v73)
                    return result;
                }
              }
              v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        + 16 * v54);
            }
            else
            {
              v26 = 0;
              v54 = 0;
            }
          }
          else
          {
            v53 = 0;
            v26 = 0;
            v54 = 0;
            WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
          }
          v55 = &v53[2 * v54];
          goto LABEL_143;
        }
        v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16 * v35);
      }
      else
      {
        v26 = 0;
        v35 = 0;
      }
    }
    else
    {
      v34 = 0;
      v26 = 0;
      v35 = 0;
      WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    }
    v36 = &v34[2 * v35];
    goto LABEL_97;
  }
  while (1)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v26[1] + 6))(v26[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      break;
    v27 = v26 + 2;
    v26 = v15;
    if (v27 != v15)
    {
      v28 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_58:
        v29 = (*(_DWORD *)v28)++;
        v30 = *v27;
        if (v29)
        {
          *(_DWORD *)v28 = v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = WTF::fastFree(v32, v33);
        }
        while (v30 == v28 || (WTF::StringImpl **)((char *)*v27 + 1) == 0)
        {
          v27 += 2;
          if (v27 == v15)
            goto LABEL_71;
          v28 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_58;
          v30 = *v27;
        }
      }
      else
      {
        while ((unint64_t)*v27 + 1 <= 1)
        {
          v27 += 2;
          if (v27 == v15)
          {
LABEL_71:
            v26 = v15;
            goto LABEL_73;
          }
        }
      }
      v26 = v27;
    }
LABEL_73:
    if (v26 == v13)
      goto LABEL_74;
  }
LABEL_192:
  v83 = *v26;
  if (*v26)
    ++*(_DWORD *)v83;
  result = *a3;
  *a3 = (uint64_t)v83;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
LABEL_201:
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
      return WTF::fastFree(v84, v85);
    }
    --*(_DWORD *)result;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::setAnimatedPropertyDirty(uint64_t a1, WTF::StringImpl ***a2, uint64_t a3)
{
  _QWORD *v6;
  WTF::StringImpl **v7;
  _QWORD *v8;
  WTF::StringImpl **result;
  uint64_t v10;
  WTF::StringImpl ***v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl ***v14;
  WTF::StringImpl **v15;

  v6 = *(_QWORD **)(a1 + 8);
  v7 = *a2;
  if (*a2 == (WTF::StringImpl **)WebCore::SVGNames::cxAttr)
  {
    v8 = v6 + 28;
  }
  else if (v7 == (WTF::StringImpl **)WebCore::SVGNames::cyAttr)
  {
    v8 = v6 + 29;
  }
  else
  {
    if (v7 != (WTF::StringImpl **)WebCore::SVGNames::rAttr)
      goto LABEL_8;
    v8 = v6 + 30;
  }
  if (*v8)
    return (WTF::StringImpl **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 64))(*v8);
LABEL_8:
  if ((byte_1ECE84D58 & 1) != 0)
  {
    v10 = qword_1ECE84D50;
    if (!qword_1ECE84D50)
      goto LABEL_42;
    v11 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v10 = qword_1ECE84D50;
    if (v11)
      goto LABEL_13;
    if (qword_1ECE84D50)
      v11 = (WTF::StringImpl ***)(qword_1ECE84D50 + 16 * *(unsigned int *)(qword_1ECE84D50 - 4));
    else
LABEL_42:
      v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
LABEL_13:
  if ((byte_1ECE84D58 & 1) != 0)
  {
    if (v10)
      v10 += 16 * *(unsigned int *)(v10 - 4);
  }
  else
  {
    v10 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
  if ((WTF::StringImpl ***)v10 != v11)
  {
    result = v11[1];
    if (result)
      goto LABEL_20;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::findAccessor(a2);
  if (result)
    goto LABEL_20;
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor(a2);
  if (result)
    goto LABEL_20;
  {
    v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_45;
    v14 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v14)
      goto LABEL_27;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v14 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_45:
      v14 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_27:
  {
    if (v13)
      v13 += 2 * *((unsigned int *)v13 - 1);
  }
  else
  {
    v13 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v13 != v14)
  {
    result = v14[1];
    if (result)
    {
LABEL_20:
      v12 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v12, a3);
    }
  }
  {
    v15 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_33:
      result = 0;
      goto LABEL_34;
    }
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
    v15 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!result)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_33;
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    }
  }
  else
  {
    v15 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_34:
  {
    if (v15)
      v15 += 2 * *((unsigned int *)v15 - 1);
  }
  else
  {
    v15 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v15 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v12 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v12, a3);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::synchronize@<X0>(uint64_t a1@<X0>, WTF::StringImpl ***a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *v4;
  WTF::StringImpl **v5;
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *result;
  uint64_t v9;
  WTF::StringImpl ***v10;
  uint64_t v11;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v13;
  WTF::StringImpl ***v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD v17[2];

  v4 = *(uint64_t **)(a1 + 8);
  v5 = *a2;
  if (*a2 == (WTF::StringImpl **)WebCore::SVGNames::cxAttr)
  {
    v6 = v4 + 28;
  }
  else if (v5 == (WTF::StringImpl **)WebCore::SVGNames::cyAttr)
  {
    v6 = v4 + 29;
  }
  else
  {
    if (v5 != (WTF::StringImpl **)WebCore::SVGNames::rAttr)
      goto LABEL_8;
    v6 = v4 + 30;
  }
  v7 = *v6;
  if (v7)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
LABEL_8:
  *a3 = 0;
  a3[8] = 0;
  v17[0] = a1;
  v17[1] = a3;
  if ((byte_1ECE84D58 & 1) != 0)
  {
    v9 = qword_1ECE84D50;
    if (!qword_1ECE84D50)
      goto LABEL_43;
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v9 = qword_1ECE84D50;
    if (v10)
      goto LABEL_11;
    if (qword_1ECE84D50)
      v10 = (WTF::StringImpl ***)(qword_1ECE84D50 + 16 * *(unsigned int *)(qword_1ECE84D50 - 4));
    else
LABEL_43:
      v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
LABEL_11:
  if ((byte_1ECE84D58 & 1) != 0)
  {
    if (v9)
      v9 += 16 * *(unsigned int *)(v9 - 4);
  }
  else
  {
    v9 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
  if ((WTF::StringImpl ***)v9 != v10)
  {
    v11 = (uint64_t)v10[1];
    if (v11)
      return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::synchronize(WebCore::QualifiedName const&)const::{lambda(WebCore::SVGElement &)#1}::operator()<WebCore::SVGMemberAccessor<WebCore::SVGElement> const>(v17, v11);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::findAccessor(a2);
  if (Accessor)
    return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::synchronize(WebCore::QualifiedName const&)const::{lambda(WebCore::SVGElement &)#1}::operator()<WebCore::SVGMemberAccessor<WebCore::SVGElement> const>(v17, (uint64_t)Accessor);
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor(a2);
  if (Accessor)
    return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::synchronize(WebCore::QualifiedName const&)const::{lambda(WebCore::SVGElement &)#1}::operator()<WebCore::SVGMemberAccessor<WebCore::SVGElement> const>(v17, (uint64_t)Accessor);
  {
    v13 = 0;
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_23;
  }
  v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    goto LABEL_44;
  v14 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
  v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!v14)
  {
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      v14 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
      goto LABEL_23;
    }
LABEL_44:
    v14 = 0;
  }
LABEL_23:
  {
    if (v13)
      v13 += 2 * *((unsigned int *)v13 - 1);
  }
  else
  {
    v13 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v13 != v14)
  {
    v11 = (uint64_t)v14[1];
    if (v11)
      return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::synchronize(WebCore::QualifiedName const&)const::{lambda(WebCore::SVGElement &)#1}::operator()<WebCore::SVGMemberAccessor<WebCore::SVGElement> const>(v17, v11);
  }
  {
    v15 = (WTF::StringImpl *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = (WTF::StringImpl *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
      v15 = (WTF::StringImpl *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     + 16
                                     * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                       - 1));
        else
          result = 0;
      }
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v15 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v15)
      v15 = (WTF::StringImpl *)((char *)v15 + 16 * *((unsigned int *)v15 - 1));
  }
  else
  {
    v15 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v15 != result)
  {
    v16 = *((_QWORD *)result + 1);
    if (v16)
      return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::synchronize(WebCore::QualifiedName const&)const::{lambda(WebCore::SVGCircleElement &)#1}::operator()<WebCore::SVGMemberAccessor<WebCore::SVGTests> const>(v17, v16);
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::synchronizeAllAttributes@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl ***v8;
  uint64_t v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF *v17;
  void *v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  WTF *v26;
  void *v27;
  WTF::StringImpl ***v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF *v37;
  void *v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl ***v41;
  WTF::StringImpl **v42;
  int v43;
  WTF::StringImpl **v44;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***v48;
  uint64_t v49;
  WTF::StringImpl ***v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  int v53;
  WTF::StringImpl **v54;
  uint64_t v55;
  WTF *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl ***v61;
  WTF::StringImpl ***v62;
  WTF::StringImpl **v63;
  int v64;
  WTF::StringImpl **v65;
  WTF *v67;
  void *v68;
  WTF::StringImpl ***v69;
  WTF::StringImpl ***v70;
  uint64_t v71;
  WTF::StringImpl ***v72;
  WTF::StringImpl ***v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl **v78;
  uint64_t v79;
  int v80;
  WTF::StringImpl **v81;
  uint64_t v82;
  WTF *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  WTF::StringImpl ***v90[3];
  WTF::StringImpl *v91;
  char v92;

  *a2 = 0;
  v88 = (uint64_t *)result;
  v89 = a2;
  if ((byte_1ECE84D58 & 1) == 0)
  {
    v2 = 0;
    v6 = 0;
    v3 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
    goto LABEL_174;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE84D50;
  if (!qword_1ECE84D50)
  {
    v6 = 0;
    v3 = 0;
LABEL_174:
    v4 = (uint64_t)&v2[2 * v3];
    goto LABEL_11;
  }
  v3 = *(unsigned int *)(qword_1ECE84D50 - 4);
  v4 = qword_1ECE84D50 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE84D50 - 12))
  {
    v6 = qword_1ECE84D50 + 16 * v3;
    goto LABEL_174;
  }
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*v2);
      if ((result & 1) == 0 && *v2 != (WTF::StringImpl **)-1)
        break;
      v2 += 2;
      v5 -= 16;
      if (!v5)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v6 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE84D50;
  }
  else
  {
    v6 = qword_1ECE84D50;
  }
LABEL_11:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  while ((WTF::StringImpl ***)v6 != v2)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v6 + 8)
                                                                                                 + 64))(&v91, *(_QWORD *)(v6 + 8), v88[1]);
    if (v92)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(v89, (WebCore::QualifiedName::QualifiedNameImpl **)v6, (WTF::StringImpl ***)&v91, (uint64_t)v90);
      if (v92)
      {
        result = (uint64_t)v91;
        v91 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v74);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v7 = v6 + 16;
    v6 = v4;
    if (v7 != v4)
    {
      v6 = v7;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*(WTF::StringImpl ***)v6);
        if ((result & 1) == 0 && *(_QWORD *)v6 != -1)
          break;
        v6 += 16;
        if (v6 == v4)
        {
          v6 = v4;
          break;
        }
      }
    }
  }
  {
    v8 = 0;
    v20 = 0;
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_194;
  }
  v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v20 = 0;
    v9 = 0;
LABEL_194:
    v10 = &v8[2 * v9];
    goto LABEL_43;
  }
  v9 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v9);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v9);
    goto LABEL_194;
  }
  if ((_DWORD)v9)
  {
    v11 = (WTF::StringImpl **)WebCore::nullName;
    v12 = 16 * v9;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v11)
        {
          v13 = (*(_DWORD *)v11)++;
          v14 = *v8;
          if (v13)
          {
            *(_DWORD *)v11 = v13;
            v15 = (uint64_t)v11;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v11);
            result = WTF::fastFree(v17, v18);
            v15 = WebCore::nullName;
          }
        }
        else
        {
          v15 = 0;
          v14 = *v8;
        }
        if (v14 != v11 && (WTF::StringImpl **)((char *)*v8 + 1) != 0)
          break;
        v8 += 2;
        v11 = (WTF::StringImpl **)v15;
        v12 -= 16;
        if (!v12)
        {
          v8 = v10;
          break;
        }
      }
      v20 = v8;
      v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v19 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v19)
                               + 1) <= 1)
      {
        v19 += 16;
        if (v12 == v19)
        {
          v20 = v10;
          goto LABEL_43;
        }
      }
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v19);
    }
  }
  else
  {
    v20 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_43:
  if (v8)
    v8 += 2 * *((unsigned int *)v8 - 1);
  while (v20 != v8)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v20[1]
                       + 8))(&v91, v20[1], v88[1]);
    if (v92)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(v89, (WebCore::QualifiedName::QualifiedNameImpl **)v20, (WTF::StringImpl ***)&v91, (uint64_t)v90);
      if (v92)
      {
        result = (uint64_t)v91;
        v91 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v75);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v21 = v20 + 2;
    v20 = v10;
    if (v21 != v10)
    {
      v22 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v22)
          {
            v23 = (*(_DWORD *)v22)++;
            v24 = *v21;
            if (v23)
            {
              *(_DWORD *)v22 = v23;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
              result = WTF::fastFree(v26, v27);
            }
          }
          else
          {
            v24 = *v21;
          }
          if (v24 != v22 && (WTF::StringImpl **)((char *)*v21 + 1) != 0)
            break;
          v21 += 2;
          if (v21 == v10)
            goto LABEL_62;
          v22 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v21 + 1 <= 1)
        {
          v21 += 2;
          if (v21 == v10)
          {
LABEL_62:
            v20 = v10;
            goto LABEL_64;
          }
        }
      }
      v20 = v21;
    }
LABEL_64:
    ;
  }
  {
    v28 = 0;
    v40 = 0;
    v29 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_196;
  }
  v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v40 = 0;
    v29 = 0;
LABEL_196:
    v30 = &v28[2 * v29];
    goto LABEL_86;
  }
  v29 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v30 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v29);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v40 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v29);
    goto LABEL_196;
  }
  if ((_DWORD)v29)
  {
    v31 = (WTF::StringImpl **)WebCore::nullName;
    v32 = 16 * v29;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v31)
        {
          v33 = (*(_DWORD *)v31)++;
          v34 = *v28;
          if (v33)
          {
            *(_DWORD *)v31 = v33;
            v35 = (uint64_t)v31;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v31);
            result = WTF::fastFree(v37, v38);
            v35 = WebCore::nullName;
          }
        }
        else
        {
          v35 = 0;
          v34 = *v28;
        }
        if (v34 != v31 && (WTF::StringImpl **)((char *)*v28 + 1) != 0)
          break;
        v28 += 2;
        v31 = (WTF::StringImpl **)v35;
        v32 -= 16;
        if (!v32)
        {
          v28 = v30;
          break;
        }
      }
      v40 = v28;
      v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v39 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v39)
                               + 1) <= 1)
      {
        v39 += 16;
        if (v32 == v39)
        {
          v40 = v30;
          goto LABEL_86;
        }
      }
      v40 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v39);
    }
  }
  else
  {
    v40 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_86:
  if (v28)
    v28 += 2 * *((unsigned int *)v28 - 1);
  while (v40 != v28)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v40[1]
                       + 8))(&v91, v40[1], v88[1]);
    if (v92)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(v89, (WebCore::QualifiedName::QualifiedNameImpl **)v40, (WTF::StringImpl ***)&v91, (uint64_t)v90);
      if (v92)
      {
        result = (uint64_t)v91;
        v91 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v76);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v41 = v40 + 2;
    v40 = v30;
    if (v41 != v30)
    {
      v42 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v42)
          {
            v43 = (*(_DWORD *)v42)++;
            v44 = *v41;
            if (v43)
            {
              *(_DWORD *)v42 = v43;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v42);
              result = WTF::fastFree(v46, v47);
            }
          }
          else
          {
            v44 = *v41;
          }
          if (v44 != v42 && (WTF::StringImpl **)((char *)*v41 + 1) != 0)
            break;
          v41 += 2;
          if (v41 == v30)
            goto LABEL_105;
          v42 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v41 + 1 <= 1)
        {
          v41 += 2;
          if (v41 == v30)
          {
LABEL_105:
            v40 = v30;
            goto LABEL_107;
          }
        }
      }
      v40 = v41;
    }
LABEL_107:
    ;
  }
  {
    v48 = 0;
    v61 = 0;
    v49 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_198;
  }
  v48 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v61 = 0;
    v49 = 0;
LABEL_198:
    v50 = &v48[2 * v49];
    goto LABEL_130;
  }
  v49 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v50 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v49);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v61 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v49);
    goto LABEL_198;
  }
  if ((_DWORD)v49)
  {
    v51 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v52 = 16 * v49;
      while (1)
      {
        if (v51)
        {
          v53 = (*(_DWORD *)v51)++;
          v54 = *v48;
          if (v53)
          {
            *(_DWORD *)v51 = v53;
            v55 = (uint64_t)v51;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v51);
            result = WTF::fastFree(v57, v58);
            v55 = WebCore::nullName;
          }
        }
        else
        {
          v55 = 0;
          v54 = *v48;
        }
        if (v54 != v51 && (WTF::StringImpl **)((char *)*v48 + 1) != 0)
          break;
        v48 += 2;
        v51 = (WTF::StringImpl **)v55;
        v52 -= 16;
        if (!v52)
        {
          v48 = v50;
          break;
        }
      }
      v61 = v48;
      v48 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v59 = 0;
      v60 = 16 * v49;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v59)
                               + 1) <= 1)
      {
        v59 += 16;
        if (v60 == v59)
        {
          v61 = v50;
          goto LABEL_130;
        }
      }
      v61 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v59);
    }
  }
  else
  {
    v61 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_130:
  if (v48)
    v48 += 2 * *((unsigned int *)v48 - 1);
  while (v61 != v48)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v61[1]
                       + 8))(&v91, v61[1], v88[1]);
    if (v92)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(v89, (WebCore::QualifiedName::QualifiedNameImpl **)v61, (WTF::StringImpl ***)&v91, (uint64_t)v90);
      if (v92)
      {
        result = (uint64_t)v91;
        v91 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v77);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v62 = v61 + 2;
    v61 = v50;
    if (v62 != v50)
    {
      v63 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v63)
          {
            v64 = (*(_DWORD *)v63)++;
            v65 = *v62;
            if (v64)
            {
              *(_DWORD *)v63 = v64;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v63);
              result = WTF::fastFree(v67, v68);
            }
          }
          else
          {
            v65 = *v62;
          }
          if (v65 != v63 && (WTF::StringImpl **)((char *)*v62 + 1) != 0)
            break;
          v62 += 2;
          if (v62 == v50)
            goto LABEL_149;
          v63 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v62 + 1 <= 1)
        {
          v62 += 2;
          if (v62 == v50)
          {
LABEL_149:
            v61 = v50;
            goto LABEL_151;
          }
        }
      }
      v61 = v62;
    }
LABEL_151:
    ;
  }
  {
    v69 = 0;
    v70 = 0;
    v71 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_155;
  }
  v69 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v70 = 0;
    v71 = 0;
LABEL_155:
    v72 = &v69[2 * v71];
    goto LABEL_156;
  }
  v71 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v72 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v71);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v70 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v71);
    goto LABEL_155;
  }
  if ((_DWORD)v71)
  {
    v78 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v79 = 16 * v71;
      while (1)
      {
        if (v78)
        {
          v80 = (*(_DWORD *)v78)++;
          v81 = *v69;
          if (v80)
          {
            *(_DWORD *)v78 = v80;
            v82 = (uint64_t)v78;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v78);
            result = WTF::fastFree(v84, v85);
            v82 = WebCore::nullName;
          }
        }
        else
        {
          v82 = 0;
          v81 = *v69;
        }
        if (v81 != v78 && (WTF::StringImpl **)((char *)*v69 + 1) != 0)
          break;
        v69 += 2;
        v78 = (WTF::StringImpl **)v82;
        v79 -= 16;
        if (!v79)
        {
          v69 = v72;
          break;
        }
      }
      v70 = v69;
      v69 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v86 = 0;
      v87 = 16 * v71;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v86)
                               + 1) <= 1)
      {
        v86 += 16;
        if (v87 == v86)
        {
          v70 = v72;
          goto LABEL_156;
        }
      }
      v70 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v86);
    }
  }
  else
  {
    v70 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_156:
  v90[0] = v70;
  v90[1] = v72;
  if (v69)
    v73 = &v69[2 * *((unsigned int *)v69 - 1)];
  else
    v73 = 0;
  if (v73 != v70)
  {
    do
    {
      WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::synchronizeAllAttributes(void)const::{lambda(WebCore::SVGCircleElement const&)#1}::operator()<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>(&v88, (uint64_t)v70);
      result = (uint64_t)WTF::HashTableIteratorAdapter<WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>::operator++(v90);
      v70 = v90[0];
    }
    while (v90[0] != v73);
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::isAnimatedPropertyAttribute(uint64_t a1, WTF::StringImpl ***a2)
{
  _QWORD *v3;
  WTF::StringImpl **v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = *a2;
  if (*a2 == (WTF::StringImpl **)WebCore::SVGNames::cxAttr)
  {
    v5 = v3 + 28;
  }
  else if (v4 == (WTF::StringImpl **)WebCore::SVGNames::cyAttr)
  {
    v5 = v3 + 29;
  }
  else
  {
    if (v4 != (WTF::StringImpl **)WebCore::SVGNames::rAttr)
      goto LABEL_8;
    v5 = v3 + 30;
  }
  if (*v5)
    return 1;
LABEL_8:
  if ((byte_1ECE84D58 & 1) != 0)
  {
    v7 = qword_1ECE84D50;
    if (!qword_1ECE84D50)
      goto LABEL_41;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v7 = qword_1ECE84D50;
    if (v8)
      goto LABEL_13;
    if (qword_1ECE84D50)
      v8 = (WTF::StringImpl ***)(qword_1ECE84D50 + 16 * *(unsigned int *)(qword_1ECE84D50 - 4));
    else
LABEL_41:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
LABEL_13:
  if ((byte_1ECE84D58 & 1) != 0)
  {
    if (v7)
      v7 += 16 * *(unsigned int *)(v7 - 4);
  }
  else
  {
    v7 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
  if ((WTF::StringImpl ***)v7 != v8)
  {
    result = (uint64_t)v8[1];
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  result = (uint64_t)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::findAccessor(a2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  result = (uint64_t)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor(a2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_44;
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v10)
      goto LABEL_26;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_44:
      v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_26:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != v10)
  {
    result = (uint64_t)v10[1];
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_32:
      v12 = 0;
      goto LABEL_33;
    }
    v12 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!v12)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_32;
      v12 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_33:
  {
    if (v11)
      v11 += 2 * *((unsigned int *)v11 - 1);
  }
  else
  {
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v11 == v12)
    return 0;
  result = (uint64_t)v12[1];
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::isAnimatedStylePropertyAttribute(uint64_t a1, WTF::StringImpl ***a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE84D68 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE84D60 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D60, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D60, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D60, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D60, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D60, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D60, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D60, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D60, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D60, v22, (uint64_t)v13);
    byte_1ECE84D68 = 1;
  }
  if ((byte_1ECE84D58 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
    goto LABEL_8;
  }
  v3 = qword_1ECE84D50;
  if (!qword_1ECE84D50)
    goto LABEL_23;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE84D50;
  if (!v4)
  {
    if (qword_1ECE84D50)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE84D50 + 16 * *(unsigned int *)(qword_1ECE84D50 - 4));
      goto LABEL_8;
    }
LABEL_23:
    v4 = 0;
  }
LABEL_8:
  if ((byte_1ECE84D58 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE84D60)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE84D60 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WTF::StringImpl ***)(qword_1ECE84D60 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WTF::StringImpl ***)(qword_1ECE84D60 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::createAnimator@<X0>(WTF::StringImpl ***a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl **result;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl **v9;
  uint64_t v10;

  *a2 = 0;
  if ((byte_1ECE84D58 & 1) != 0)
  {
    v4 = qword_1ECE84D50;
    if (!qword_1ECE84D50)
      goto LABEL_35;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
    v4 = qword_1ECE84D50;
    if (v5)
      goto LABEL_6;
    if (qword_1ECE84D50)
      v5 = (WTF::StringImpl ***)(qword_1ECE84D50 + 16 * *(unsigned int *)(qword_1ECE84D50 - 4));
    else
LABEL_35:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
LABEL_6:
  if ((byte_1ECE84D58 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
  if ((WTF::StringImpl ***)v4 != v5)
  {
    result = v5[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::findAccessor(a1);
  if (result)
    goto LABEL_13;
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor(a1);
  if (result)
    goto LABEL_13;
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_38;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a1);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_38:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    result = v8[1];
    if (result)
      goto LABEL_13;
  }
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a1);
      v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      + 16
                                      * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        - 1));
        else
          result = 0;
      }
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 9))(&v10);
      *a2 = v10;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::appendAnimatedInstance(uint64_t a1, WTF::StringImpl ***a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  uint64_t v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl **v12;

  if ((byte_1ECE84D58 & 1) != 0)
  {
    v6 = qword_1ECE84D50;
    if (!qword_1ECE84D50)
      goto LABEL_34;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE84D50;
    if (v7)
      goto LABEL_6;
    if (qword_1ECE84D50)
      v7 = (WTF::StringImpl ***)(qword_1ECE84D50 + 16 * *(unsigned int *)(qword_1ECE84D50 - 4));
    else
LABEL_34:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
LABEL_6:
  if ((byte_1ECE84D58 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::findAccessor(a2);
  if (result)
    goto LABEL_13;
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor(a2);
  if (result)
    goto LABEL_13;
  {
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_37;
    v11 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v11)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_37:
      v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != v11)
  {
    result = v11[1];
    if (result)
    {
LABEL_13:
      v9 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v9, a3);
    }
  }
  {
    v12 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
      v12 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      + 16
                                      * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        - 1));
        else
          result = 0;
      }
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v12)
      v12 += 2 * *((unsigned int *)v12 - 1);
  }
  else
  {
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v12 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v9, a3);
    }
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WTF::StringImpl ***a1)
{
  uint64_t v1;
  unsigned int v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;
  int v7;
  int v8;
  WTF::StringImpl ***v9;
  int v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  WTF *v15;
  void *v16;
  unsigned int v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  int i;
  uint64_t v23;
  __int128 v24;

  v1 = qword_1ECE84D50;
  if (qword_1ECE84D50)
  {
    v3 = *(_DWORD *)(qword_1ECE84D50 - 8);
    v4 = *a1;
    if ((*a1)[2])
    {
      v23 = *MEMORY[0x1E0CBF2F8];
      v24 = *(_OWORD *)(v4 + 3);
      v5 = WTF::computeHash<WebCore::QualifiedNameComponents>(&v23);
    }
    else
    {
      v5 = *((_DWORD *)v4 + 1);
      if (!v5)
      {
        v5 = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)v4);
        *((_DWORD *)v4 + 1) = v5;
      }
    }
    v6 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v7 = 0;
      while (1)
      {
        v8 = v5 & v3;
        v9 = (WTF::StringImpl ***)(v1 + 16 * (v5 & v3));
        if (v6)
        {
          v10 = (*(_DWORD *)v6)++;
          v11 = *v9;
          if (v10)
          {
            *(_DWORD *)v6 = v10;
            v12 = (uint64_t)v6;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
            WTF::fastFree(v15, v16);
            v12 = WebCore::nullName;
          }
        }
        else
        {
          v12 = 0;
          v11 = *v9;
        }
        if (v11 == v6)
          break;
        v13 = *v9;
        if (*v9 != (WTF::StringImpl **)-1)
        {
          v14 = *a1;
          if (v13 == *a1 || v13[3] == v14[3] && v13[4] == v14[4])
            return v9;
        }
        v5 = ++v7 + v8;
        v6 = (WTF::StringImpl **)v12;
      }
    }
    else
    {
      v17 = v5 & v3;
      v18 = (WTF::StringImpl ***)(v1 + 16 * (v5 & v3));
      v19 = *v18;
      if (*v18)
      {
        v20 = *a1;
        for (i = 1; ; ++i)
        {
          if (v19 != (WTF::StringImpl **)-1)
          {
            if (v19 == v20)
              return v18;
            if (v19[3] == v20[3])
            {
              v9 = v18;
              if (v19[4] == v20[4])
                return v9;
            }
          }
          v9 = 0;
          v17 = (v17 + i) & v3;
          v18 = (WTF::StringImpl ***)(v1 + 16 * v17);
          v19 = *v18;
          if (!*v18)
            return v9;
        }
      }
    }
  }
  return 0;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl *this)
{
  uint64_t result;
  uint64_t v3;
  __int128 v4;

  if (*((_QWORD *)this + 2))
  {
    v3 = *MEMORY[0x1E0CBF2F8];
    v4 = *(_OWORD *)((char *)this + 24);
    return WTF::computeHash<WebCore::QualifiedNameComponents>(&v3);
  }
  else
  {
    result = *((unsigned int *)this + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(this);
      *((_DWORD *)this + 1) = result;
    }
  }
  return result;
}

uint64_t WebCore::SVGAttributeHashTranslator::hash(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  __int128 v4;

  v1 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v3 = *MEMORY[0x1E0CBF2F8];
    v4 = *(_OWORD *)(v1 + 24);
    return WTF::computeHash<WebCore::QualifiedNameComponents>(&v3);
  }
  else
  {
    result = *(unsigned int *)(v1 + 4);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)v1);
      *(_DWORD *)(v1 + 4) = result;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::findAccessor(WTF::StringImpl ***a1)
{
  _BYTE *v1;
  char *v2;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  WTF::StringImpl **v7;
  int v8;
  int v9;
  WTF::StringImpl ***v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  unsigned int v16;
  WTF::StringImpl **v17;
  WTF::StringImpl **v18;
  int v19;
  WTF::StringImpl **v20;
  WTF::StringImpl **v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;

  v1 = &unk_1ECE7D000;
  {
    v2 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_33:
      v10 = 0;
      goto LABEL_14;
    }
    v4 = *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
         - 2);
    v5 = *a1;
    if ((*a1)[2])
    {
      v24 = *MEMORY[0x1E0CBF2F8];
      v25 = *(_OWORD *)(v5 + 3);
      v6 = WTF::computeHash<WebCore::QualifiedNameComponents>(&v24);
      v1 = &unk_1ECE7D000;
    }
    else
    {
      v6 = *((_DWORD *)v5 + 1);
      if (!v6)
      {
        v6 = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)v5);
        v1 = &unk_1ECE7D000;
        *((_DWORD *)v5 + 1) = v6;
      }
    }
    v7 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v8 = 0;
      while (1)
      {
        v9 = v6 & v4;
        v10 = (WTF::StringImpl ***)&v2[16 * (v6 & v4)];
        if (v7)
        {
          v11 = (*(_DWORD *)v7)++;
          v12 = *v10;
          if (v11)
          {
            *(_DWORD *)v7 = v11;
            v13 = (uint64_t)v7;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
            WTF::fastFree(v22, v23);
            v1 = (_BYTE *)&unk_1ECE7D000;
            v13 = WebCore::nullName;
          }
        }
        else
        {
          v13 = 0;
          v12 = *v10;
        }
        if (v12 == v7)
          break;
        v20 = *v10;
        if (*v10 != (WTF::StringImpl **)-1)
        {
          v21 = *a1;
          if (v20 == *a1 || v20[3] == v21[3] && v20[4] == v21[4])
            goto LABEL_14;
        }
        v6 = ++v8 + v9;
        v7 = (WTF::StringImpl **)v13;
      }
LABEL_12:
      if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      {
        v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
        goto LABEL_14;
      }
      goto LABEL_33;
    }
    v16 = v6 & v4;
    v10 = (WTF::StringImpl ***)&v2[16 * (v6 & v4)];
    v17 = *v10;
    if (!*v10)
      goto LABEL_12;
    v18 = *a1;
    v19 = 1;
    while (v17 == (WTF::StringImpl **)-1 || v17 != v18 && (v17[3] != v18[3] || v17[4] != v18[4]))
    {
      v16 = (v16 + v19) & v4;
      v10 = (WTF::StringImpl ***)&v2[16 * v16];
      v17 = *v10;
      ++v19;
      if (!*v10)
        goto LABEL_12;
    }
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_14:
  if ((v1[968] & 1) != 0)
  {
    v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v14 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
  }
  else
  {
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    v1[968] = 1;
  }
  if (v14 == v10)
    return 0;
  else
    return v10[1];
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::synchronize(WebCore::QualifiedName const&)const::{lambda(WebCore::SVGCircleElement &)#1}::operator()<WebCore::SVGMemberAccessor<WebCore::SVGTests> const>(_QWORD *a1, uint64_t a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned __int8 v9;

  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(&v8, a2, *(_QWORD *)(*a1 + 8) + 184);
  v5 = a1[1];
  if (*(unsigned __int8 *)(v5 + 8) == v9)
  {
    if (!*(_BYTE *)(v5 + 8))
      return result;
    v6 = v8;
    v8 = 0;
    result = *(WTF::StringImpl **)v5;
    *(_QWORD *)v5 = v6;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else if (*(_BYTE *)(v5 + 8))
  {
    result = *(WTF::StringImpl **)v5;
    *(_QWORD *)v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v5 + 8) = 0;
  }
  else
  {
    v7 = v8;
    v8 = 0;
    *(_QWORD *)v5 = v7;
    *(_BYTE *)(v5 + 8) = 1;
  }
  if (v9)
  {
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::synchronizeAllAttributes(void)const::{lambda(WebCore::SVGCircleElement const&)#1}::operator()<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>(uint64_t **a1, uint64_t a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  _BYTE v6[24];
  WTF::StringImpl *v7;
  char v8;

  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 64))(&v7, *(_QWORD *)(a2 + 8), (*a1)[1] + 184);
  if (v8)
  {
    result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a1[1], (WebCore::QualifiedName::QualifiedNameImpl **)a2, (WTF::StringImpl ***)&v7, (uint64_t)v6);
    if (v8)
    {
      result = v7;
      v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::commitPropertyChange(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  void *v5;

  v1 = *((_QWORD *)result + 6);
  if (v1)
  {
    v2 = *((_QWORD *)result + 5);
    v3 = *(_DWORD *)(v2 + 28);
    *(_WORD *)(v1 + 32) = *(_WORD *)(v2 + 32);
    *(_DWORD *)(v1 + 28) = v3;
  }
  v4 = *((_QWORD *)result + 2);
  if (v4)
  {
    *(_DWORD *)(v4 + 24) += 2;
    result = (unsigned int *)WebCore::SVGElement::commitPropertyChange((WebCore::SVGElement *)v4, (WebCore::SVGAnimatedProperty *)result);
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::baseValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::animValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
}

BOOL WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::isDirty(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 40) + 25) == 1;
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::setDirty(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 40) + 25) = 1;
  return result;
}

_BYTE *WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::synchronize@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *result;
  char v4;

  result = *(_BYTE **)(a1 + 40);
  v4 = result[25];
  if (v4)
  {
    result[25] = 0;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 32))(result);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[8] = v4;
  return result;
}

unsigned int *WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::startAnimation(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _BYTE v10[24];

  v4 = *(_QWORD *)(a1 + 48);
  v5 = (int *)(*(_QWORD *)(a1 + 40) + 28);
  if (v4)
  {
    v6 = *v5;
    *(_WORD *)(v4 + 32) = *(_WORD *)(*(_QWORD *)(a1 + 40) + 32);
    *(_DWORD *)(v4 + 28) = v6;
  }
  else
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v7 + 8) = 1;
    *(_QWORD *)(v7 + 16) = a1;
    *(_WORD *)(v7 + 24) = 1;
    *(_QWORD *)v7 = off_1E32EE180;
    *(_QWORD *)(v7 + 28) = *(_QWORD *)v5;
    *(_QWORD *)v7 = off_1E32EE148;
    v8 = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v7;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
  }
  return WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>(a1 + 24, a2, (uint64_t)v10);
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::stopAnimation(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;

  result = WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>(a1 + 24, a2);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_DWORD *)(v5 + 28);
    *(_WORD *)(v4 + 32) = *(_WORD *)(v5 + 32);
    *(_DWORD *)(v4 + 28) = v6;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::instanceStartAnimation(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = a1[3];
  if (!v6 || !*(_DWORD *)(v6 - 12))
    goto LABEL_2;
  v13 = *(unsigned int *)(v6 - 4);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = (uint64_t *)a1[3];
    while ((unint64_t)(*v15 + 1) <= 1)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
        goto LABEL_2;
    }
  }
  else
  {
    v15 = (uint64_t *)a1[3];
  }
  v16 = (uint64_t *)(v6 + 8 * v13);
  if (v15 == v16)
  {
LABEL_2:
    v7 = *(_QWORD *)(a3 + 48);
    if (!v7)
    {
      v8 = *(_QWORD *)(a3 + 40);
      v7 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v7 + 8) = 1;
      *(_QWORD *)(v7 + 16) = a3;
      *(_WORD *)(v7 + 24) = 1;
      *(_QWORD *)v7 = off_1E32EE180;
      *(_QWORD *)(v7 + 28) = *(_QWORD *)(v8 + 28);
      *(_QWORD *)v7 = off_1E32EE148;
      v9 = *(_DWORD **)(a3 + 48);
      *(_QWORD *)(a3 + 48) = v7;
      if (v9)
      {
        if (v9[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          v7 = *(_QWORD *)(a3 + 48);
          v10 = a1 + 6;
          if (!v7)
          {
LABEL_8:
            v11 = (_DWORD *)*v10;
            *v10 = v7;
            if (v11)
            {
              if (v11[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
              else
                --v11[2];
            }
            return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 80))(a1, a2);
          }
LABEL_7:
          ++*(_DWORD *)(v7 + 8);
          goto LABEL_8;
        }
        --v9[2];
      }
    }
    v10 = a1 + 6;
    goto LABEL_7;
  }
  v17 = *v15;
LABEL_24:
  if (!*(_QWORD *)(v17 + 8))
  {
    while (1)
    {
      if (++v15 == v16)
        goto LABEL_2;
      v17 = *v15;
      if ((unint64_t)(*v15 + 1) > 1)
      {
        if (v15 != v16)
          goto LABEL_24;
        goto LABEL_2;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 80))(a1, a2);
}

_DWORD *WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::instanceStopAnimation(_QWORD *a1)
{
  _DWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  result = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  v3 = a1[3];
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_2;
  v4 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = (uint64_t *)a1[3];
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_2;
    }
  }
  else
  {
    v6 = (uint64_t *)a1[3];
  }
  v7 = (uint64_t *)(v3 + 8 * v4);
  if (v6 == v7)
    goto LABEL_2;
  v8 = *v6;
LABEL_16:
  if (!*(_QWORD *)(v8 + 8))
  {
    while (++v6 != v7)
    {
      v8 = *v6;
      if ((unint64_t)(*v6 + 1) > 1)
      {
        if (v6 != v7)
          goto LABEL_16;
        break;
      }
    }
LABEL_2:
    result = (_DWORD *)a1[6];
    a1[6] = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

void *WebCore::SVGCircleElement::SVGCircleElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1}::operator()()
{
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::cxAttr,&WebCore::SVGCircleElement::m_cx>();
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::cyAttr,&WebCore::SVGCircleElement::m_cy>();
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::rAttr,&WebCore::SVGCircleElement::m_r>();
}

void *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::cxAttr,&WebCore::SVGCircleElement::m_cx>()
{
  if ((byte_1ECE84D70 & 1) == 0)
  {
    qword_1ECE84E68 = (uint64_t)off_1E34558B8;
    unk_1ECE84E70 = 224;
    byte_1ECE84D70 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::registerProperty(&WebCore::SVGNames::cxAttr, (uint64_t)&qword_1ECE84E68);
}

void *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::cyAttr,&WebCore::SVGCircleElement::m_cy>()
{
  if ((byte_1ECE84D78 & 1) == 0)
  {
    qword_1ECE84E78 = (uint64_t)off_1E34558B8;
    unk_1ECE84E80 = 232;
    byte_1ECE84D78 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::registerProperty(&WebCore::SVGNames::cyAttr, (uint64_t)&qword_1ECE84E78);
}

void *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::rAttr,&WebCore::SVGCircleElement::m_r>()
{
  if ((byte_1ECE84D80 & 1) == 0)
  {
    qword_1ECE84E88 = (uint64_t)off_1E34558B8;
    unk_1ECE84E90 = 240;
    byte_1ECE84D80 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::registerProperty(&WebCore::SVGNames::rAttr, (uint64_t)&qword_1ECE84E88);
}

void *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCircleElement,WebCore::SVGGeometryElement>::registerProperty(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((byte_1ECE84D58 & 1) == 0)
  {
    qword_1ECE84D50 = 0;
    byte_1ECE84D58 = 1;
  }
  v4 = a2;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>((uint64_t)&v3, a1, &v4);
}

void *WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  void *result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  int v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = qword_1ECE84D50;
  if (qword_1ECE84D50
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(0),
        (v6 = qword_1ECE84D50) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WebCore::SVGAttributeHashTranslator::hash(a2) & v7;
  v9 = (uint64_t *)(v6 + 16 * v8);
  result = (void *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket((WTF::StringImpl **)*v9);
  if ((result & 1) == 0)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      v20 = (WTF::StringImpl **)*v9;
      if (*v9 == -1)
      {
        v18 = v9;
      }
      else
      {
        v21 = *a2;
        if (v20 == (WTF::StringImpl **)*a2
          || v20[3] == *(WTF::StringImpl **)(v21 + 24) && v20[4] == *(WTF::StringImpl **)(v21 + 32))
        {
          if (qword_1ECE84D50)
            v23 = *(unsigned int *)(qword_1ECE84D50 - 4);
          else
            v23 = 0;
          v17 = 0;
          v16 = qword_1ECE84D50 + 16 * v23;
          goto LABEL_12;
        }
      }
      v8 = (v8 + v19) & v7;
      v9 = (uint64_t *)(v6 + 16 * v8);
      result = (void *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket((WTF::StringImpl **)*v9);
      ++v19;
    }
    while (!(_DWORD)result);
    if (v18)
    {
      v22 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v18 = v22;
      v18[1] = 0;
      --*(_DWORD *)(qword_1ECE84D50 - 16);
      v9 = v18;
    }
  }
  result = WTF::GenericHashTraits<WebCore::QualifiedName>::assignToEmpty<WebCore::QualifiedName,WebCore::QualifiedName const&>((WTF::StringImpl ***)v9, (WTF::StringImpl ***)a2);
  v9[1] = *a3;
  if (qword_1ECE84D50)
    v11 = *(_DWORD *)(qword_1ECE84D50 - 12) + 1;
  else
    v11 = 1;
  *(_DWORD *)(qword_1ECE84D50 - 12) = v11;
  v12 = qword_1ECE84D50;
  if (qword_1ECE84D50)
    v13 = *(_DWORD *)(qword_1ECE84D50 - 12);
  else
    v13 = 0;
  v14 = (*(_DWORD *)(qword_1ECE84D50 - 16) + v13);
  v15 = *(unsigned int *)(qword_1ECE84D50 - 4);
  if (v15 > 0x400)
  {
    if (v15 > 2 * v14)
      goto LABEL_11;
LABEL_14:
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand((WTF::StringImpl ***)v9);
    v9 = (uint64_t *)result;
    v12 = qword_1ECE84D50;
    if (qword_1ECE84D50)
      v15 = *(unsigned int *)(qword_1ECE84D50 - 4);
    else
      v15 = 0;
    goto LABEL_11;
  }
  if (3 * v15 <= 4 * v14)
    goto LABEL_14;
LABEL_11:
  v16 = v12 + 16 * v15;
  v17 = 1;
LABEL_12:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v17;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(WTF::StringImpl ***a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE84D50 && (v2 = *(_DWORD *)(qword_1ECE84D50 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE84D50 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v3, a1);
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WTF::StringImpl ***a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t Table;
  void *v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;

  v4 = qword_1ECE84D50;
  if (qword_1ECE84D50)
  {
    LODWORD(v5) = *(_DWORD *)(qword_1ECE84D50 - 4);
    v6 = *(_DWORD *)(qword_1ECE84D50 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  Table = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::allocateTable(a1);
  qword_1ECE84D50 = Table;
  *(_DWORD *)(Table - 8) = a1 - 1;
  *(_DWORD *)(Table - 4) = a1;
  *(_DWORD *)(Table - 16) = 0;
  *(_DWORD *)(qword_1ECE84D50 - 12) = v6;
  v9 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v11 = (WTF::StringImpl ***)v4;
    do
    {
      if (*v11 != (WTF::StringImpl **)-1)
      {
        if (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*v11))
        {
          WebCore::QualifiedName::~QualifiedName(v11);
        }
        else
        {
          v12 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert((WebCore::QualifiedName::QualifiedNameImpl **)v11);
          WebCore::QualifiedName::~QualifiedName(v11);
          if (v11 == a2)
            v9 = v12;
        }
      }
      v11 += 2;
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  result = 0;
  if (v4)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v9;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_QWORD *)(v2 + 24);
    do
    {
      v6 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v5 - 1) = v6;
      *v5 = 0;
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  _BOOL4 isEmptyBucket;
  WTF::StringImpl ***v8;
  WTF::StringImpl **v9;
  __int128 v10;
  WTF *v12;
  void *v13;

  v2 = qword_1ECE84D50;
  if (qword_1ECE84D50)
    v3 = *(_DWORD *)(qword_1ECE84D50 - 8);
  else
    v3 = 0;
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    isEmptyBucket = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*(WTF::StringImpl ***)(v2 + 16 * v6));
    v4 = ++v5 + v6;
  }
  while (!isEmptyBucket);
  v8 = (WTF::StringImpl ***)(v2 + 16 * v6);
  v9 = *v8;
  *v8 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v9);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = *(_OWORD *)a1;
  *a1 = 0;
  *(_OWORD *)v8 = v10;
  return v8;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGCircleElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGCircleElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedLengthAccessor<WebCore::SVGCircleElement>::isAnimatedLength()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGCircleElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGCircleElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGCircleElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGCircleElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedLengthAccessor<WebCore::SVGCircleElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + v15) + 40) + 33);
  v17 = WTF::fastMalloc((WTF *)0x68);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = a3;
  *(_QWORD *)v17 = off_1E3456BF8;
  v18 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v18 + 8);
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = 0;
  *(_BYTE *)(v17 + 64) = a4;
  *(_BYTE *)(v17 + 65) = a5;
  *(_BYTE *)(v17 + 66) = a6;
  *(_BYTE *)(v17 + 67) = a7;
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 56) = off_1E3456CB0;
  v20 = 0;
  WebCore::SVGLengthValue::SVGLengthValue(v17 + 68, 2, &v20);
  v20 = 0;
  result = WebCore::SVGLengthValue::SVGLengthValue(v17 + 76, 2, &v20);
  *(_BYTE *)(v17 + 84) = 0;
  *(_BYTE *)(v17 + 92) = 0;
  *(_QWORD *)(v17 + 56) = &off_1E3456C60;
  *(_BYTE *)(v17 + 96) = v16;
  *(_QWORD *)v17 = off_1E3456B90;
  *a8 = v17;
  return result;
}

_QWORD *WebCore::SVGAnimatedLengthAccessor<WebCore::SVGCircleElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

void WebCore::SVGAnimatedLengthAnimator::~SVGAnimatedLengthAnimator(WebCore::SVGAnimatedLengthAnimator *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E3456BF8;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E3456BF8;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>,WebCore::SVGAnimationLengthFunction>::isDiscrete()
{
  return 0;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>,WebCore::SVGAnimationLengthFunction>::setFromAndToValues(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  int v7;
  __int16 v8;

  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v7, *(_BYTE *)(a1 + 96), a3);
  *(_DWORD *)(a1 + 68) = v7;
  *(_WORD *)(a1 + 72) = v8;
  result = WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v7, *(_BYTE *)(a1 + 96), a4);
  *(_DWORD *)(a1 + 76) = v7;
  *(_WORD *)(a1 + 80) = v8;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>,WebCore::SVGAnimationLengthFunction>::setFromAndByValues(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 56;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 24))(a1 + 56);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>,WebCore::SVGAnimationLengthFunction>::setToAtEndOfDurationValue(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v4, *(_BYTE *)(a1 + 96), a2);
  if (*(_BYTE *)(a1 + 92))
  {
    *(_DWORD *)(a1 + 84) = v4;
    *(_WORD *)(a1 + 88) = WORD2(v4);
  }
  else
  {
    *(_QWORD *)(a1 + 84) = v4;
    *(_BYTE *)(a1 + 92) = 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>,WebCore::SVGAnimationLengthFunction>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedLengthAnimator::animate(WebCore::SVGAnimatedLengthAnimator *this, WebCore::SVGElement *a2, float a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  v8 = *((_QWORD *)this + 4);
  v9 = *(_QWORD *)(v8 + 48);
  if (!v9)
  {
    v10 = *(_QWORD *)(v8 + 40);
    v9 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v9 + 8) = 1;
    *(_QWORD *)(v9 + 16) = v8;
    *(_WORD *)(v9 + 24) = 1;
    *(_QWORD *)v9 = off_1E32EE180;
    *(_QWORD *)(v9 + 28) = *(_QWORD *)(v10 + 28);
    *(_QWORD *)v9 = off_1E32EE148;
    v11 = *(_DWORD **)(v8 + 48);
    *(_QWORD *)(v8 + 48) = v9;
    if (v11)
    {
      if (v11[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        v9 = *(_QWORD *)(v8 + 48);
      }
      else
      {
        --v11[2];
      }
    }
  }
  return WebCore::SVGAnimationLengthFunction::animate((WebCore::SVGAnimatedLengthAnimator *)((char *)this + 56), a2, a3, a4, (WTF::StringImpl **)(v9 + 28));
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>,WebCore::SVGAnimationLengthFunction>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>,WebCore::SVGAnimationLengthFunction>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>,WebCore::SVGAnimationLengthFunction>::calculateDistance(uint64_t a1, const WebCore::SVGElement *a2, uint64_t *a3, uint64_t *a4)
{
  float v7;
  void *v8;
  float v9;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  _BYTE v18[8];
  _BYTE v19[8];
  WTF *v20[5];

  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v20, a2);
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)v19, *(_BYTE *)(a1 + 96), a3);
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)v18, *(_BYTE *)(a1 + 96), a4);
  v7 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)v18, (const WebCore::SVGLengthContext *)v20);
  v9 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)v19, (const WebCore::SVGLengthContext *)v20);
  v10 = v20[0];
  v20[0] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *((unsigned int *)v10 + 7);
      if ((_DWORD)v14)
      {
        v17 = v10;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v10 + 2), (WTF::StringImpl *)(*((_QWORD *)v10 + 2) + 32 * v14));
        v10 = v17;
      }
      v15 = (WTF *)*((_QWORD *)v10 + 2);
      if (v15)
      {
        *((_QWORD *)v10 + 2) = 0;
        *((_DWORD *)v10 + 6) = 0;
        v16 = v10;
        WTF::fastFree(v15, v8);
        v10 = v16;
      }
      WTF::fastFree(v10, v8);
    }
  }
  return COERCE_UNSIGNED_INT(fabs(v7 - v9)) | 0x100000000;
}

void WebCore::SVGAnimationLengthFunction::~SVGAnimationLengthFunction(WebCore::SVGAnimationLengthFunction *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationFunction::isDiscrete(WebCore::SVGAnimationFunction *this)
{
  return 0;
}

uint64_t WebCore::SVGAnimationLengthFunction::setFromAndToValues(WebCore::SVGAnimationLengthFunction *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t result;
  int v7;
  __int16 v8;

  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v7, *((_BYTE *)this + 40), (uint64_t *)a3);
  *((_DWORD *)this + 3) = v7;
  *((_WORD *)this + 8) = v8;
  result = WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v7, *((_BYTE *)this + 40), (uint64_t *)a4);
  *((_DWORD *)this + 5) = v7;
  *((_WORD *)this + 12) = v8;
  return result;
}

uint64_t WebCore::SVGAnimationAdditiveFunction::setFromAndByValues(WebCore::SVGAnimationAdditiveFunction *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  (*(void (**)(WebCore::SVGAnimationAdditiveFunction *, WebCore::SVGElement *, const WTF::String *, const WTF::String *))(*(_QWORD *)this + 24))(this, a2, a3, a4);
  return (*(uint64_t (**)(WebCore::SVGAnimationAdditiveFunction *, WebCore::SVGElement *))(*(_QWORD *)this + 56))(this, a2);
}

uint64_t WebCore::SVGAnimationLengthFunction::setToAtEndOfDurationValue(WebCore::SVGAnimationLengthFunction *this, const WTF::String *a2)
{
  uint64_t result;
  uint64_t v4;

  result = WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v4, *((_BYTE *)this + 40), (uint64_t *)a2);
  if (*((_BYTE *)this + 36))
  {
    *((_DWORD *)this + 7) = v4;
    *((_WORD *)this + 16) = WORD2(v4);
  }
  else
  {
    *(_QWORD *)((char *)this + 28) = v4;
    *((_BYTE *)this + 36) = 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimationLengthFunction::calculateDistance(WebCore::SVGAnimationLengthFunction *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  float v7;
  void *v8;
  float v9;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  _BYTE v18[8];
  _BYTE v19[8];
  WTF *v20[5];

  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v20, a2);
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)v19, *((_BYTE *)this + 40), (uint64_t *)a3);
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)v18, *((_BYTE *)this + 40), (uint64_t *)a4);
  v7 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)v18, (const WebCore::SVGLengthContext *)v20);
  v9 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)v19, (const WebCore::SVGLengthContext *)v20);
  v10 = v20[0];
  v20[0] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *((unsigned int *)v10 + 7);
      if ((_DWORD)v14)
      {
        v17 = v10;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v10 + 2), (WTF::StringImpl *)(*((_QWORD *)v10 + 2) + 32 * v14));
        v10 = v17;
      }
      v15 = (WTF *)*((_QWORD *)v10 + 2);
      if (v15)
      {
        *((_QWORD *)v10 + 2) = 0;
        *((_DWORD *)v10 + 6) = 0;
        v16 = v10;
        WTF::fastFree(v15, v8);
        v10 = v16;
      }
      WTF::fastFree(v10, v8);
    }
  }
  return COERCE_UNSIGNED_INT(fabs(v7 - v9)) | 0x100000000;
}

WTF *WebCore::SVGAnimationLengthFunction::addFromAndToValues(WebCore::SVGAnimationLengthFunction *this, WebCore::SVGElement *a2)
{
  _DWORD *v3;
  float v4;
  float v5;
  const WebCore::SVGElement *v6;
  uint64_t v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *result;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  WTF *v18[5];
  int v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  char v22;

  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v18, a2);
  v3 = (_DWORD *)((char *)this + 20);
  v4 = WebCore::SVGLengthValue::value((WebCore::SVGAnimationLengthFunction *)((char *)this + 20), (const WebCore::SVGLengthContext *)v18);
  v5 = v4
     + WebCore::SVGLengthValue::value((WebCore::SVGAnimationLengthFunction *)((char *)this + 12), (const WebCore::SVGLengthContext *)v18);
  v6 = (const WebCore::SVGElement *)*((unsigned __int8 *)this + 24);
  if ((_DWORD)v6 == 2)
    v5 = v5 / 100.0;
  WebCore::SVGLengthContext::convertValueFromUserUnits((WebCore::SVGLengthContext *)v18, v6, *((unsigned __int8 *)this + 25), (uint64_t)&v19, v5);
  v7 = v21;
  if (v21)
  {
    if (v21 != 1)
    {
      result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_21;
    }
    v8 = 0;
    v9 = v20;
    v20 = 0;
  }
  else
  {
    v9 = 0;
    *v3 = v19;
    v8 = 1;
  }
  ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v7])(&v22, &v19);
  if ((v8 & 1) == 0 && v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v18[0];
  v18[0] = 0;
  if (result)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)result);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)result));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)result);
      v14 = *((unsigned int *)result + 7);
      if (!(_DWORD)v14)
      {
LABEL_17:
        v15 = (WTF *)*((_QWORD *)result + 2);
        if (v15)
        {
          *((_QWORD *)result + 2) = 0;
          *((_DWORD *)result + 6) = 0;
          v16 = result;
          WTF::fastFree(v15, v10);
          result = v16;
        }
        return (WTF *)WTF::fastFree(result, v10);
      }
LABEL_21:
      v17 = result;
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)result + 2), (WTF::StringImpl *)(*((_QWORD *)result + 2) + 32 * v14));
      result = v17;
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimationLengthFunction::animate(WebCore::SVGAnimationLengthFunction *this, WebCore::SVGElement *a2, float a3, unsigned int a4, WTF::StringImpl **a5)
{
  uint64_t v9;
  const WebCore::SVGElement *v10;
  WebCore::SVGLengthValue *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  int v21;
  float v22;
  char v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t result;
  WTF::StringImpl *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32[5];
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  char v36;

  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v32, a2);
  v9 = 24;
  if (a3 < 0.5)
    v9 = 16;
  v10 = (const WebCore::SVGElement *)*((unsigned __int8 *)this + v9);
  if (*((_BYTE *)this + 8) == 3)
    v11 = (WebCore::SVGLengthValue *)a5;
  else
    v11 = (WebCore::SVGAnimationLengthFunction *)((char *)this + 12);
  v12 = WebCore::SVGLengthValue::value(v11, (const WebCore::SVGLengthContext *)v32);
  v13 = WebCore::SVGLengthValue::value((WebCore::SVGAnimationLengthFunction *)((char *)this + 20), (const WebCore::SVGLengthContext *)v32);
  v14 = v13;
  if (a3 >= 0.5)
    v15 = v13;
  else
    v15 = v12;
  v16 = 28;
  if (!*((_BYTE *)this + 36))
    v16 = 20;
  v33 = *(_QWORD *)((char *)this + v16);
  v17 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)&v33, (const WebCore::SVGLengthContext *)v32);
  v18 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)a5, (const WebCore::SVGLengthContext *)v32);
  v19 = v12 + (float)((float)(v14 - v12) * a3);
  if (!*((_BYTE *)this + 9))
    v19 = v15;
  if (*((_BYTE *)this + 10))
    v20 = a4 == 0;
  else
    v20 = 1;
  if (!v20)
    v19 = v19 + (float)(v17 * (float)a4);
  if (*((_BYTE *)this + 11))
  {
    if (*((_BYTE *)this + 8) == 3)
      v18 = -0.0;
    v19 = v19 + v18;
  }
  v21 = *((unsigned __int8 *)this + 40);
  v22 = v19 / 100.0;
  if ((_DWORD)v10 != 2)
    v22 = v19;
  WebCore::SVGLengthContext::convertValueFromUserUnits((WebCore::SVGLengthContext *)v32, v10, v21, (uint64_t)&v33, v22);
  if (v35)
  {
    if (v35 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_42;
    }
    v23 = 0;
    v24 = v34;
    v34 = 0;
    v25 = 0;
  }
  else
  {
    v24 = 0;
    v23 = 1;
    v25 = v33;
  }
  result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v35])(&v36, &v33);
  if ((v23 & 1) == 0 && v24)
  {
    if (*(_DWORD *)v24 == 2)
      result = WTF::StringImpl::destroy(v24, v27);
    else
      *(_DWORD *)v24 -= 2;
  }
  *(_DWORD *)a5 = v25;
  *((_BYTE *)a5 + 4) = (_BYTE)v10;
  *((_BYTE *)a5 + 5) = v21;
  a5 = (WTF::StringImpl **)v32[0];
  v32[0] = 0;
  if (a5)
  {
    do
    {
      v28 = __ldaxr((unsigned int *)a5);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, (unsigned int *)a5));
    if (!v29)
    {
      atomic_store(1u, (unsigned int *)a5);
      v30 = *((unsigned int *)a5 + 7);
      if (!(_DWORD)v30)
      {
LABEL_38:
        v31 = a5[2];
        if (v31)
        {
          a5[2] = 0;
          *((_DWORD *)a5 + 6) = 0;
          WTF::fastFree(v31, v27);
        }
        return WTF::fastFree((WTF *)a5, v27);
      }
LABEL_42:
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(a5[2], (WTF::StringImpl *)((char *)a5[2] + 32 * v30));
      goto LABEL_38;
    }
  }
  return result;
}

_QWORD *WebCore::SVGClipPathElement::SVGClipPathElement(_QWORD *a1, _DWORD **a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v12;
  char **v13;
  char *v14;

  *a1 = off_1E3454658;
  a1[14] = &unk_1E3454BC8;
  a1[22] = &unk_1E3454C00;
  v6 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E3455920;
  *((_QWORD *)v6 + 1) = a1;
  v14 = v6;
  WebCore::SVGGraphicsElement::SVGGraphicsElement((uint64_t)a1, a2, a3, (uint64_t *)&v14, 0);
  v7 = (uint64_t)v14;
  v14 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *a1 = off_1E3454658;
  a1[14] = &unk_1E3454BC8;
  a1[22] = &unk_1E3454C00;
  v8 = WTF::fastMalloc((WTF *)0x40);
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v9 + 8) = 1;
  *(_BYTE *)(v9 + 12) = 1;
  *(_QWORD *)v9 = off_1E3456558;
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)v8 = &off_1E34568A0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = v9;
  *(_QWORD *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 56) = 0;
  a1[27] = v8;
  v10 = atomic_load(&WebCore::SVGClipPathElement::SVGClipPathElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v10 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WebCore::SVGClipPathElement::SVGClipPathElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGClipPathElement::SVGClipPathElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  return a1;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGClipPathElement,WebCore::SVGGraphicsElement>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl ***v8;
  uint64_t v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF *v17;
  void *v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  WTF *v26;
  void *v27;
  WTF::StringImpl ***v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl ***v41;
  WTF::StringImpl ***v42;
  WTF::StringImpl **v43;
  int v44;
  WTF::StringImpl **v45;
  WTF *v47;
  void *v48;
  WTF::StringImpl ***v49;
  WTF::StringImpl ***v50;
  uint64_t v51;
  WTF::StringImpl ***v52;
  WTF::StringImpl ***v53;
  WTF::StringImpl **v54;
  uint64_t v55;
  int v56;
  WTF::StringImpl **v57;
  uint64_t v58;
  WTF *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl ***v64[2];

  v1 = result;
  if ((byte_1ECE84D90 & 1) == 0)
  {
    v2 = 0;
    v6 = 0;
    v3 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
    goto LABEL_120;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE84D88;
  if (!qword_1ECE84D88)
  {
    v6 = 0;
    v3 = 0;
LABEL_120:
    v4 = (uint64_t)&v2[2 * v3];
    goto LABEL_11;
  }
  v3 = *(unsigned int *)(qword_1ECE84D88 - 4);
  v4 = qword_1ECE84D88 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE84D88 - 12))
  {
    v6 = qword_1ECE84D88 + 16 * v3;
    goto LABEL_120;
  }
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*v2);
      if ((result & 1) == 0 && *v2 != (WTF::StringImpl **)-1)
        break;
      v2 += 2;
      v5 -= 16;
      if (!v5)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v6 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE84D88;
  }
  else
  {
    v6 = qword_1ECE84D88;
  }
LABEL_11:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  while ((WTF::StringImpl ***)v6 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 8) + 16))(*(_QWORD *)(v6 + 8), *(_QWORD *)(v1 + 8));
    v7 = v6 + 16;
    v6 = v4;
    if (v7 != v4)
    {
      v6 = v7;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*(WTF::StringImpl ***)v6);
        if ((result & 1) == 0 && *(_QWORD *)v6 != -1)
          break;
        v6 += 16;
        if (v6 == v4)
        {
          v6 = v4;
          break;
        }
      }
    }
  }
  {
    v8 = 0;
    v20 = 0;
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_128;
  }
  v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v20 = 0;
    v9 = 0;
LABEL_128:
    v10 = &v8[2 * v9];
    goto LABEL_42;
  }
  v9 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v9);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v9);
    goto LABEL_128;
  }
  if ((_DWORD)v9)
  {
    v11 = (WTF::StringImpl **)WebCore::nullName;
    v12 = 16 * v9;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v11)
        {
          v13 = (*(_DWORD *)v11)++;
          v14 = *v8;
          if (v13)
          {
            *(_DWORD *)v11 = v13;
            v15 = (uint64_t)v11;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v11);
            result = WTF::fastFree(v17, v18);
            v15 = WebCore::nullName;
          }
        }
        else
        {
          v15 = 0;
          v14 = *v8;
        }
        if (v14 != v11 && (WTF::StringImpl **)((char *)*v8 + 1) != 0)
          break;
        v8 += 2;
        v11 = (WTF::StringImpl **)v15;
        v12 -= 16;
        if (!v12)
        {
          v8 = v10;
          break;
        }
      }
      v20 = v8;
      v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v19 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v19)
                               + 1) <= 1)
      {
        v19 += 16;
        if (v12 == v19)
        {
          v20 = v10;
          goto LABEL_42;
        }
      }
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v19);
    }
  }
  else
  {
    v20 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_42:
  if (v8)
    v8 += 2 * *((unsigned int *)v8 - 1);
  while (v20 != v8)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v20[1] + 2))(v20[1], *(_QWORD *)(v1 + 8));
    v21 = v20 + 2;
    v20 = v10;
    if (v21 != v10)
    {
      v22 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v22)
          {
            v23 = (*(_DWORD *)v22)++;
            v24 = *v21;
            if (v23)
            {
              *(_DWORD *)v22 = v23;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
              result = WTF::fastFree(v26, v27);
            }
          }
          else
          {
            v24 = *v21;
          }
          if (v24 != v22 && (WTF::StringImpl **)((char *)*v21 + 1) != 0)
            break;
          v21 += 2;
          if (v21 == v10)
            goto LABEL_60;
          v22 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v21 + 1 <= 1)
        {
          v21 += 2;
          if (v21 == v10)
          {
LABEL_60:
            v20 = v10;
            goto LABEL_62;
          }
        }
      }
      v20 = v21;
    }
LABEL_62:
    ;
  }
  {
    v28 = 0;
    v41 = 0;
    v29 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_130;
  }
  v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v41 = 0;
    v29 = 0;
LABEL_130:
    v30 = &v28[2 * v29];
    goto LABEL_85;
  }
  v29 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v30 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v29);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v41 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v29);
    goto LABEL_130;
  }
  if ((_DWORD)v29)
  {
    v31 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v32 = 16 * v29;
      while (1)
      {
        if (v31)
        {
          v33 = (*(_DWORD *)v31)++;
          v34 = *v28;
          if (v33)
          {
            *(_DWORD *)v31 = v33;
            v35 = (uint64_t)v31;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v31);
            result = WTF::fastFree(v37, v38);
            v35 = WebCore::nullName;
          }
        }
        else
        {
          v35 = 0;
          v34 = *v28;
        }
        if (v34 != v31 && (WTF::StringImpl **)((char *)*v28 + 1) != 0)
          break;
        v28 += 2;
        v31 = (WTF::StringImpl **)v35;
        v32 -= 16;
        if (!v32)
        {
          v28 = v30;
          break;
        }
      }
      v41 = v28;
      v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v39 = 0;
      v40 = 16 * v29;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v39)
                               + 1) <= 1)
      {
        v39 += 16;
        if (v40 == v39)
        {
          v41 = v30;
          goto LABEL_85;
        }
      }
      v41 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v39);
    }
  }
  else
  {
    v41 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_85:
  if (v28)
    v28 += 2 * *((unsigned int *)v28 - 1);
  while (v41 != v28)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v41[1] + 2))(v41[1], *(_QWORD *)(v1 + 8));
    v42 = v41 + 2;
    v41 = v30;
    if (v42 != v30)
    {
      v43 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v43)
          {
            v44 = (*(_DWORD *)v43)++;
            v45 = *v42;
            if (v44)
            {
              *(_DWORD *)v43 = v44;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v43);
              result = WTF::fastFree(v47, v48);
            }
          }
          else
          {
            v45 = *v42;
          }
          if (v45 != v43 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
            break;
          v42 += 2;
          if (v42 == v30)
            goto LABEL_103;
          v43 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v42 + 1 <= 1)
        {
          v42 += 2;
          if (v42 == v30)
          {
LABEL_103:
            v41 = v30;
            goto LABEL_105;
          }
        }
      }
      v41 = v42;
    }
LABEL_105:
    ;
  }
  {
    v49 = 0;
    v50 = 0;
    v51 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_109;
  }
  v49 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v50 = 0;
    v51 = 0;
LABEL_109:
    v52 = &v49[2 * v51];
    goto LABEL_110;
  }
  v51 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v52 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v51);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v50 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v51);
    goto LABEL_109;
  }
  if ((_DWORD)v51)
  {
    v54 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v55 = 16 * v51;
      while (1)
      {
        if (v54)
        {
          v56 = (*(_DWORD *)v54)++;
          v57 = *v49;
          if (v56)
          {
            *(_DWORD *)v54 = v56;
            v58 = (uint64_t)v54;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v54);
            result = WTF::fastFree(v60, v61);
            v58 = WebCore::nullName;
          }
        }
        else
        {
          v58 = 0;
          v57 = *v49;
        }
        if (v57 != v54 && (WTF::StringImpl **)((char *)*v49 + 1) != 0)
          break;
        v49 += 2;
        v54 = (WTF::StringImpl **)v58;
        v55 -= 16;
        if (!v55)
        {
          v49 = v52;
          break;
        }
      }
      v50 = v49;
      v49 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v62 = 0;
      v63 = 16 * v51;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v62)
                               + 1) <= 1)
      {
        v62 += 16;
        if (v63 == v62)
        {
          v50 = v52;
          goto LABEL_110;
        }
      }
      v50 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v62);
    }
  }
  else
  {
    v50 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_110:
  v64[0] = v50;
  v64[1] = v52;
  if (v49)
    v53 = &v49[2 * *((unsigned int *)v49 - 1)];
  else
    v53 = 0;
  if (v53 != v50)
  {
    do
    {
      (*((void (**)(WTF::StringImpl **, uint64_t))*v50[1] + 2))(v50[1], *(_QWORD *)(v1 + 8) + 184);
      result = (uint64_t)WTF::HashTableIteratorAdapter<WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>::operator++(v64);
      v50 = v64[0];
    }
    while (v64[0] != v53);
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGClipPathElement,WebCore::SVGGraphicsElement>::propertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _DWORD *v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF *v22;
  void *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl ***v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  int v29;
  WTF::StringImpl **v30;
  WTF *v32;
  void *v33;
  WTF::StringImpl ***v34;
  uint64_t v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl **v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  WTF *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl ***v47;
  WTF::StringImpl **v48;
  int v49;
  WTF::StringImpl **v50;
  WTF *v52;
  void *v53;
  WTF::StringImpl ***v54;
  uint64_t v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl ***v57;
  WTF::StringImpl **v58;
  int v59;
  WTF::StringImpl **v60;
  WTF *v62;
  void *v63;
  WTF::StringImpl **v64;
  WTF *v65;
  void *v66;
  WTF::StringImpl **v67;
  uint64_t v68;
  int v69;
  WTF::StringImpl **v70;
  uint64_t v71;
  WTF *v73;
  void *v74;
  uint64_t v75;

  v4 = result;
  v6 = (_DWORD *)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = (uint64_t)v6;
  if ((byte_1ECE84D90 & 1) == 0)
  {
    v7 = 0;
    v11 = 0;
    v8 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
    goto LABEL_156;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE84D88;
  if (!qword_1ECE84D88)
  {
    v11 = 0;
    v8 = 0;
LABEL_156:
    v9 = (uint64_t)&v7[2 * v8];
    goto LABEL_13;
  }
  v8 = *(unsigned int *)(qword_1ECE84D88 - 4);
  v9 = qword_1ECE84D88 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE84D88 - 12))
  {
    v11 = qword_1ECE84D88 + 16 * v8;
    goto LABEL_156;
  }
  if ((_DWORD)v8)
  {
    v10 = 16 * v8;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*v7);
      if ((result & 1) == 0 && *v7 != (WTF::StringImpl **)-1)
        break;
      v7 += 2;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v11 = (uint64_t)v7;
    v7 = (WTF::StringImpl ***)qword_1ECE84D88;
  }
  else
  {
    v11 = qword_1ECE84D88;
  }
LABEL_13:
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  if (v7 != (WTF::StringImpl ***)v11)
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v11 + 8) + 40))(*(_QWORD *)(v11 + 8), *(_QWORD *)(v4 + 8), a2);
      if ((_DWORD)result)
        break;
      v12 = v11 + 16;
      v11 = v9;
      if (v12 != v9)
      {
        v11 = v12;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*(WTF::StringImpl ***)v11);
          if ((result & 1) == 0 && *(_QWORD *)v11 != -1)
            break;
          v11 += 16;
          if (v11 == v9)
          {
            v11 = v9;
            break;
          }
        }
      }
      if ((WTF::StringImpl ***)v11 == v7)
        goto LABEL_24;
    }
    v24 = *(WTF::StringImpl ***)v11;
    if (*(_QWORD *)v11)
      ++*(_DWORD *)v24;
    *a3 = (uint64_t)v24;
    if (v6)
    {
      if (*v6 != 1)
      {
        --*v6;
        return result;
      }
      result = (uint64_t)v6;
      goto LABEL_158;
    }
    return result;
  }
LABEL_24:
  {
    v13 = 0;
    v26 = 0;
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_161;
  }
  v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v26 = 0;
    v14 = 0;
LABEL_161:
    v15 = &v13[2 * v14];
    goto LABEL_52;
  }
  v14 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v14);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v14);
    goto LABEL_161;
  }
  if ((_DWORD)v14)
  {
    v16 = (WTF::StringImpl **)WebCore::nullName;
    v17 = 16 * v14;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v16)
        {
          v18 = (*(_DWORD *)v16)++;
          v19 = *v13;
          if (v18)
          {
            *(_DWORD *)v16 = v18;
            v20 = (uint64_t)v16;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
            result = WTF::fastFree(v22, v23);
            v20 = WebCore::nullName;
          }
        }
        else
        {
          v20 = 0;
          v19 = *v13;
        }
        if (v19 != v16 && (WTF::StringImpl **)((char *)*v13 + 1) != 0)
          break;
        v13 += 2;
        v16 = (WTF::StringImpl **)v20;
        v17 -= 16;
        if (!v17)
        {
          v13 = v15;
          break;
        }
      }
      v26 = v13;
      v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v25 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v25)
                               + 1) <= 1)
      {
        v25 += 16;
        if (v17 == v25)
        {
          v26 = v15;
          goto LABEL_52;
        }
      }
      v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v25);
    }
  }
  else
  {
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_52:
  if (v13)
    v13 += 2 * *((unsigned int *)v13 - 1);
  if (v13 == v26)
  {
LABEL_74:
    {
      v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      {
        v35 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
              - 1);
        v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16 * v35);
        if (*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             - 3))
        {
          if ((_DWORD)v35)
          {
            v37 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
            {
              v38 = 16 * v35;
              while (1)
              {
                if (v37)
                {
                  v39 = (*(_DWORD *)v37)++;
                  v40 = *v34;
                  if (v39)
                  {
                    *(_DWORD *)v37 = v39;
                    v41 = (uint64_t)v37;
                  }
                  else
                  {
                    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
                    result = WTF::fastFree(v43, v44);
                    v41 = WebCore::nullName;
                  }
                }
                else
                {
                  v41 = 0;
                  v40 = *v34;
                }
                if (v40 != v37 && (WTF::StringImpl **)((char *)*v34 + 1) != 0)
                  break;
                v34 += 2;
                v37 = (WTF::StringImpl **)v41;
                v38 -= 16;
                if (!v38)
                {
                  v34 = v36;
                  break;
                }
              }
              v26 = v34;
              v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
            }
            else
            {
              v45 = 0;
              v46 = 16 * v35;
              while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                                   + v45)
                                       + 1) <= 1)
              {
                v45 += 16;
                if (v46 == v45)
                {
                  v26 = v36;
                  goto LABEL_98;
                }
              }
              v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        + v45);
            }
          }
          else
          {
            v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
          }
LABEL_98:
          if (v34)
            v34 += 2 * *((unsigned int *)v34 - 1);
          while (v26 != v34)
          {
            result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v26[1] + 5))(v26[1], *(_QWORD *)(v4 + 8), a2);
            if ((_DWORD)result)
              goto LABEL_147;
            v47 = v26 + 2;
            v26 = v36;
            if (v47 != v36)
            {
              v48 = (WTF::StringImpl **)WebCore::nullName;
              if (WebCore::nullName)
              {
LABEL_104:
                v49 = (*(_DWORD *)v48)++;
                v50 = *v47;
                if (v49)
                {
                  *(_DWORD *)v48 = v49;
                }
                else
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v48);
                  result = WTF::fastFree(v52, v53);
                }
                while (v50 == v48 || (WTF::StringImpl **)((char *)*v47 + 1) == 0)
                {
                  v47 += 2;
                  if (v47 == v36)
                    goto LABEL_117;
                  v48 = (WTF::StringImpl **)WebCore::nullName;
                  if (WebCore::nullName)
                    goto LABEL_104;
                  v50 = *v47;
                }
              }
              else
              {
                while ((unint64_t)*v47 + 1 <= 1)
                {
                  v47 += 2;
                  if (v47 == v36)
                  {
LABEL_117:
                    v26 = v36;
                    goto LABEL_119;
                  }
                }
              }
              v26 = v47;
            }
LABEL_119:
            ;
          }
          {
            v54 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
            if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
            {
              v55 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                    - 1);
              v56 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        + 16 * v55);
              if (*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                   - 3))
              {
                if ((_DWORD)v55)
                {
                  v67 = (WTF::StringImpl **)WebCore::nullName;
                  v68 = 16 * v55;
                  if (WebCore::nullName)
                  {
                    while (1)
                    {
                      if (v67)
                      {
                        v69 = (*(_DWORD *)v67)++;
                        v70 = *v54;
                        if (v69)
                        {
                          *(_DWORD *)v67 = v69;
                          v71 = (uint64_t)v67;
                        }
                        else
                        {
                          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v67);
                          result = WTF::fastFree(v73, v74);
                          v71 = WebCore::nullName;
                        }
                      }
                      else
                      {
                        v71 = 0;
                        v70 = *v54;
                      }
                      if (v70 != v67 && (WTF::StringImpl **)((char *)*v54 + 1) != 0)
                        break;
                      v54 += 2;
                      v67 = (WTF::StringImpl **)v71;
                      v68 -= 16;
                      if (!v68)
                      {
                        v54 = v56;
                        break;
                      }
                    }
                    v26 = v54;
                    v54 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                  }
                  else
                  {
                    v75 = 0;
                    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                                         + v75)
                                             + 1) <= 1)
                    {
                      v75 += 16;
                      if (v68 == v75)
                      {
                        v26 = v56;
                        goto LABEL_124;
                      }
                    }
                    v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                              + v75);
                  }
                }
                else
                {
                  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                }
                goto LABEL_124;
              }
              v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        + 16 * v55);
            }
            else
            {
              v26 = 0;
              v55 = 0;
            }
          }
          else
          {
            v54 = 0;
            v26 = 0;
            v55 = 0;
            WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
          }
          v56 = &v54[2 * v55];
LABEL_124:
          if (v54)
            v54 += 2 * *((unsigned int *)v54 - 1);
          if (v54 == v26)
            return result;
          while (1)
          {
            result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v26[1] + 5))(v26[1], *(_QWORD *)(v4 + 8) + 184, a2);
            if ((_DWORD)result)
              goto LABEL_147;
            v57 = v26 + 2;
            v26 = v56;
            if (v57 != v56)
            {
              v58 = (WTF::StringImpl **)WebCore::nullName;
              if (WebCore::nullName)
              {
LABEL_130:
                v59 = (*(_DWORD *)v58)++;
                v60 = *v57;
                if (v59)
                {
                  *(_DWORD *)v58 = v59;
                }
                else
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v58);
                  result = WTF::fastFree(v62, v63);
                }
                while (v60 == v58 || (WTF::StringImpl **)((char *)*v57 + 1) == 0)
                {
                  v57 += 2;
                  if (v57 == v56)
                    goto LABEL_143;
                  v58 = (WTF::StringImpl **)WebCore::nullName;
                  if (WebCore::nullName)
                    goto LABEL_130;
                  v60 = *v57;
                }
              }
              else
              {
                while ((unint64_t)*v57 + 1 <= 1)
                {
                  v57 += 2;
                  if (v57 == v56)
                  {
LABEL_143:
                    v26 = v56;
                    goto LABEL_145;
                  }
                }
              }
              v26 = v57;
            }
LABEL_145:
            if (v26 == v54)
              return result;
          }
        }
        v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16 * v35);
      }
      else
      {
        v26 = 0;
        v35 = 0;
      }
    }
    else
    {
      v34 = 0;
      v26 = 0;
      v35 = 0;
      WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    }
    v36 = &v34[2 * v35];
    goto LABEL_98;
  }
  while (1)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v26[1] + 5))(v26[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      break;
    v27 = v26 + 2;
    v26 = v15;
    if (v27 != v15)
    {
      v28 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_58:
        v29 = (*(_DWORD *)v28)++;
        v30 = *v27;
        if (v29)
        {
          *(_DWORD *)v28 = v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = WTF::fastFree(v32, v33);
        }
        while (v30 == v28 || (WTF::StringImpl **)((char *)*v27 + 1) == 0)
        {
          v27 += 2;
          if (v27 == v15)
            goto LABEL_71;
          v28 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_58;
          v30 = *v27;
        }
      }
      else
      {
        while ((unint64_t)*v27 + 1 <= 1)
        {
          v27 += 2;
          if (v27 == v15)
          {
LABEL_71:
            v26 = v15;
            goto LABEL_73;
          }
        }
      }
      v26 = v27;
    }
LABEL_73:
    if (v26 == v13)
      goto LABEL_74;
  }
LABEL_147:
  v64 = *v26;
  if (*v26)
    ++*(_DWORD *)v64;
  result = *a3;
  *a3 = (uint64_t)v64;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
LABEL_158:
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
      return WTF::fastFree(v65, v66);
    }
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGClipPathElement,WebCore::SVGGraphicsElement>::animatedPropertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _DWORD *v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF *v22;
  void *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl ***v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  int v29;
  WTF::StringImpl **v30;
  WTF *v32;
  void *v33;
  WTF::StringImpl ***v34;
  uint64_t v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl **v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  WTF *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl ***v47;
  WTF::StringImpl **v48;
  int v49;
  WTF::StringImpl **v50;
  WTF *v52;
  void *v53;
  WTF::StringImpl ***v54;
  uint64_t v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl ***v57;
  WTF::StringImpl **v58;
  int v59;
  WTF::StringImpl **v60;
  WTF *v62;
  void *v63;
  WTF::StringImpl **v64;
  WTF *v65;
  void *v66;
  WTF::StringImpl **v67;
  uint64_t v68;
  int v69;
  WTF::StringImpl **v70;
  uint64_t v71;
  WTF *v73;
  void *v74;
  uint64_t v75;

  v4 = result;
  v6 = (_DWORD *)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = (uint64_t)v6;
  if ((byte_1ECE84D90 & 1) == 0)
  {
    v7 = 0;
    v11 = 0;
    v8 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
    goto LABEL_156;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE84D88;
  if (!qword_1ECE84D88)
  {
    v11 = 0;
    v8 = 0;
LABEL_156:
    v9 = (uint64_t)&v7[2 * v8];
    goto LABEL_13;
  }
  v8 = *(unsigned int *)(qword_1ECE84D88 - 4);
  v9 = qword_1ECE84D88 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE84D88 - 12))
  {
    v11 = qword_1ECE84D88 + 16 * v8;
    goto LABEL_156;
  }
  if ((_DWORD)v8)
  {
    v10 = 16 * v8;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*v7);
      if ((result & 1) == 0 && *v7 != (WTF::StringImpl **)-1)
        break;
      v7 += 2;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v11 = (uint64_t)v7;
    v7 = (WTF::StringImpl ***)qword_1ECE84D88;
  }
  else
  {
    v11 = qword_1ECE84D88;
  }
LABEL_13:
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  if (v7 != (WTF::StringImpl ***)v11)
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v11 + 8) + 48))(*(_QWORD *)(v11 + 8), *(_QWORD *)(v4 + 8), a2);
      if ((_DWORD)result)
        break;
      v12 = v11 + 16;
      v11 = v9;
      if (v12 != v9)
      {
        v11 = v12;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*(WTF::StringImpl ***)v11);
          if ((result & 1) == 0 && *(_QWORD *)v11 != -1)
            break;
          v11 += 16;
          if (v11 == v9)
          {
            v11 = v9;
            break;
          }
        }
      }
      if ((WTF::StringImpl ***)v11 == v7)
        goto LABEL_24;
    }
    v24 = *(WTF::StringImpl ***)v11;
    if (*(_QWORD *)v11)
      ++*(_DWORD *)v24;
    *a3 = (uint64_t)v24;
    if (v6)
    {
      if (*v6 != 1)
      {
        --*v6;
        return result;
      }
      result = (uint64_t)v6;
      goto LABEL_158;
    }
    return result;
  }
LABEL_24:
  {
    v13 = 0;
    v26 = 0;
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_161;
  }
  v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v26 = 0;
    v14 = 0;
LABEL_161:
    v15 = &v13[2 * v14];
    goto LABEL_52;
  }
  v14 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v14);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v14);
    goto LABEL_161;
  }
  if ((_DWORD)v14)
  {
    v16 = (WTF::StringImpl **)WebCore::nullName;
    v17 = 16 * v14;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v16)
        {
          v18 = (*(_DWORD *)v16)++;
          v19 = *v13;
          if (v18)
          {
            *(_DWORD *)v16 = v18;
            v20 = (uint64_t)v16;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
            result = WTF::fastFree(v22, v23);
            v20 = WebCore::nullName;
          }
        }
        else
        {
          v20 = 0;
          v19 = *v13;
        }
        if (v19 != v16 && (WTF::StringImpl **)((char *)*v13 + 1) != 0)
          break;
        v13 += 2;
        v16 = (WTF::StringImpl **)v20;
        v17 -= 16;
        if (!v17)
        {
          v13 = v15;
          break;
        }
      }
      v26 = v13;
      v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v25 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v25)
                               + 1) <= 1)
      {
        v25 += 16;
        if (v17 == v25)
        {
          v26 = v15;
          goto LABEL_52;
        }
      }
      v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v25);
    }
  }
  else
  {
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_52:
  if (v13)
    v13 += 2 * *((unsigned int *)v13 - 1);
  if (v13 == v26)
  {
LABEL_74:
    {
      v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      {
        v35 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
              - 1);
        v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16 * v35);
        if (*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             - 3))
        {
          if ((_DWORD)v35)
          {
            v37 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
            {
              v38 = 16 * v35;
              while (1)
              {
                if (v37)
                {
                  v39 = (*(_DWORD *)v37)++;
                  v40 = *v34;
                  if (v39)
                  {
                    *(_DWORD *)v37 = v39;
                    v41 = (uint64_t)v37;
                  }
                  else
                  {
                    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
                    result = WTF::fastFree(v43, v44);
                    v41 = WebCore::nullName;
                  }
                }
                else
                {
                  v41 = 0;
                  v40 = *v34;
                }
                if (v40 != v37 && (WTF::StringImpl **)((char *)*v34 + 1) != 0)
                  break;
                v34 += 2;
                v37 = (WTF::StringImpl **)v41;
                v38 -= 16;
                if (!v38)
                {
                  v34 = v36;
                  break;
                }
              }
              v26 = v34;
              v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
            }
            else
            {
              v45 = 0;
              v46 = 16 * v35;
              while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                                   + v45)
                                       + 1) <= 1)
              {
                v45 += 16;
                if (v46 == v45)
                {
                  v26 = v36;
                  goto LABEL_98;
                }
              }
              v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        + v45);
            }
          }
          else
          {
            v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
          }
LABEL_98:
          if (v34)
            v34 += 2 * *((unsigned int *)v34 - 1);
          while (v26 != v34)
          {
            result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v26[1] + 6))(v26[1], *(_QWORD *)(v4 + 8), a2);
            if ((_DWORD)result)
              goto LABEL_147;
            v47 = v26 + 2;
            v26 = v36;
            if (v47 != v36)
            {
              v48 = (WTF::StringImpl **)WebCore::nullName;
              if (WebCore::nullName)
              {
LABEL_104:
                v49 = (*(_DWORD *)v48)++;
                v50 = *v47;
                if (v49)
                {
                  *(_DWORD *)v48 = v49;
                }
                else
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v48);
                  result = WTF::fastFree(v52, v53);
                }
                while (v50 == v48 || (WTF::StringImpl **)((char *)*v47 + 1) == 0)
                {
                  v47 += 2;
                  if (v47 == v36)
                    goto LABEL_117;
                  v48 = (WTF::StringImpl **)WebCore::nullName;
                  if (WebCore::nullName)
                    goto LABEL_104;
                  v50 = *v47;
                }
              }
              else
              {
                while ((unint64_t)*v47 + 1 <= 1)
                {
                  v47 += 2;
                  if (v47 == v36)
                  {
LABEL_117:
                    v26 = v36;
                    goto LABEL_119;
                  }
                }
              }
              v26 = v47;
            }
LABEL_119:
            ;
          }
          {
            v54 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
            if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
            {
              v55 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                    - 1);
              v56 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        + 16 * v55);
              if (*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                   - 3))
              {
                if ((_DWORD)v55)
                {
                  v67 = (WTF::StringImpl **)WebCore::nullName;
                  v68 = 16 * v55;
                  if (WebCore::nullName)
                  {
                    while (1)
                    {
                      if (v67)
                      {
                        v69 = (*(_DWORD *)v67)++;
                        v70 = *v54;
                        if (v69)
                        {
                          *(_DWORD *)v67 = v69;
                          v71 = (uint64_t)v67;
                        }
                        else
                        {
                          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v67);
                          result = WTF::fastFree(v73, v74);
                          v71 = WebCore::nullName;
                        }
                      }
                      else
                      {
                        v71 = 0;
                        v70 = *v54;
                      }
                      if (v70 != v67 && (WTF::StringImpl **)((char *)*v54 + 1) != 0)
                        break;
                      v54 += 2;
                      v67 = (WTF::StringImpl **)v71;
                      v68 -= 16;
                      if (!v68)
                      {
                        v54 = v56;
                        break;
                      }
                    }
                    v26 = v54;
                    v54 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                  }
                  else
                  {
                    v75 = 0;
                    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                                         + v75)
                                             + 1) <= 1)
                    {
                      v75 += 16;
                      if (v68 == v75)
                      {
                        v26 = v56;
                        goto LABEL_124;
                      }
                    }
                    v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                              + v75);
                  }
                }
                else
                {
                  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
                }
                goto LABEL_124;
              }
              v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        + 16 * v55);
            }
            else
            {
              v26 = 0;
              v55 = 0;
            }
          }
          else
          {
            v54 = 0;
            v26 = 0;
            v55 = 0;
            WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
          }
          v56 = &v54[2 * v55];
LABEL_124:
          if (v54)
            v54 += 2 * *((unsigned int *)v54 - 1);
          if (v54 == v26)
            return result;
          while (1)
          {
            result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v26[1] + 6))(v26[1], *(_QWORD *)(v4 + 8) + 184, a2);
            if ((_DWORD)result)
              goto LABEL_147;
            v57 = v26 + 2;
            v26 = v56;
            if (v57 != v56)
            {
              v58 = (WTF::StringImpl **)WebCore::nullName;
              if (WebCore::nullName)
              {
LABEL_130:
                v59 = (*(_DWORD *)v58)++;
                v60 = *v57;
                if (v59)
                {
                  *(_DWORD *)v58 = v59;
                }
                else
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v58);
                  result = WTF::fastFree(v62, v63);
                }
                while (v60 == v58 || (WTF::StringImpl **)((char *)*v57 + 1) == 0)
                {
                  v57 += 2;
                  if (v57 == v56)
                    goto LABEL_143;
                  v58 = (WTF::StringImpl **)WebCore::nullName;
                  if (WebCore::nullName)
                    goto LABEL_130;
                  v60 = *v57;
                }
              }
              else
              {
                while ((unint64_t)*v57 + 1 <= 1)
                {
                  v57 += 2;
                  if (v57 == v56)
                  {
LABEL_143:
                    v26 = v56;
                    goto LABEL_145;
                  }
                }
              }
              v26 = v57;
            }
LABEL_145:
            if (v26 == v54)
              return result;
          }
        }
        v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16 * v35);
      }
      else
      {
        v26 = 0;
        v35 = 0;
      }
    }
    else
    {
      v34 = 0;
      v26 = 0;
      v35 = 0;
      WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    }
    v36 = &v34[2 * v35];
    goto LABEL_98;
  }
  while (1)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v26[1] + 6))(v26[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      break;
    v27 = v26 + 2;
    v26 = v15;
    if (v27 != v15)
    {
      v28 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_58:
        v29 = (*(_DWORD *)v28)++;
        v30 = *v27;
        if (v29)
        {
          *(_DWORD *)v28 = v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = WTF::fastFree(v32, v33);
        }
        while (v30 == v28 || (WTF::StringImpl **)((char *)*v27 + 1) == 0)
        {
          v27 += 2;
          if (v27 == v15)
            goto LABEL_71;
          v28 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_58;
          v30 = *v27;
        }
      }
      else
      {
        while ((unint64_t)*v27 + 1 <= 1)
        {
          v27 += 2;
          if (v27 == v15)
          {
LABEL_71:
            v26 = v15;
            goto LABEL_73;
          }
        }
      }
      v26 = v27;
    }
LABEL_73:
    if (v26 == v13)
      goto LABEL_74;
  }
LABEL_147:
  v64 = *v26;
  if (*v26)
    ++*(_DWORD *)v64;
  result = *a3;
  *a3 = (uint64_t)v64;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
LABEL_158:
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
      return WTF::fastFree(v65, v66);
    }
    --*(_DWORD *)result;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGClipPathElement,WebCore::SVGGraphicsElement>::setAnimatedPropertyDirty(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  uint64_t v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  _QWORD *v12;
  WTF::StringImpl **v13;

  if ((byte_1ECE84D90 & 1) != 0)
  {
    v6 = qword_1ECE84D88;
    if (!qword_1ECE84D88)
      goto LABEL_34;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE84D88;
    if (v7)
      goto LABEL_6;
    if (qword_1ECE84D88)
      v7 = (WTF::StringImpl ***)(qword_1ECE84D88 + 16 * *(unsigned int *)(qword_1ECE84D88 - 4));
    else
LABEL_34:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
LABEL_6:
  if ((byte_1ECE84D90 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_11;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a2);
  if (result)
    goto LABEL_11;
  {
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_35;
    v11 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v11)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_35:
      v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != v11)
  {
    result = v11[1];
    if (result)
    {
LABEL_11:
      v9 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v9, a3);
    }
  }
  v12 = &unk_1ECE7D000;
  {
    v13 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
      v13 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      + 16
                                      * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        - 1));
        else
          result = 0;
      }
      v12 = (_QWORD *)&unk_1ECE7D000;
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v13)
      v13 += 2 * *((unsigned int *)v13 - 1);
  }
  else
  {
    v13 = 0;
    v12[116] = 0;
  }
  if (v13 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v9, a3);
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGClipPathElement,WebCore::SVGGraphicsElement>::synchronize@<X0>(uint64_t *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl **result;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  _QWORD *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  char v12;

  *a2 = 0;
  a2[8] = 0;
  if ((byte_1ECE84D90 & 1) != 0)
  {
    v4 = qword_1ECE84D88;
    if (!qword_1ECE84D88)
      goto LABEL_34;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
    v4 = qword_1ECE84D88;
    if (v5)
      goto LABEL_6;
    if (qword_1ECE84D88)
      v5 = (WTF::StringImpl ***)(qword_1ECE84D88 + 16 * *(unsigned int *)(qword_1ECE84D88 - 4));
    else
LABEL_34:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
LABEL_6:
  if ((byte_1ECE84D90 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
  if ((WTF::StringImpl ***)v4 != v5)
  {
    result = v5[1];
    if (result)
      goto LABEL_11;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a1);
  if (result)
    goto LABEL_11;
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_35;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a1);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_35:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    result = v8[1];
    if (result)
      goto LABEL_11;
  }
  v9 = &unk_1ECE7D000;
  {
    v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
      v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      + 16
                                      * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        - 1));
        else
          result = 0;
      }
      v9 = (_QWORD *)&unk_1ECE7D000;
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    v9[116] = 0;
  }
  if (v10 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_11:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 8))(&v11);
      if (v12)
      {
        *(_QWORD *)a2 = v11;
        a2[8] = 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGClipPathElement,WebCore::SVGGraphicsElement>::synchronizeAllAttributes@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl ***v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF *v20;
  void *v21;
  uint64_t v22;
  WTF::StringImpl ***v23;
  WTF::StringImpl *v24;
  WTF::StringImpl ***v25;
  WTF::StringImpl **v26;
  int v27;
  WTF::StringImpl **v28;
  WTF *v30;
  void *v31;
  WTF::StringImpl ***v32;
  uint64_t v33;
  WTF::StringImpl ***v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  int v37;
  WTF::StringImpl **v38;
  uint64_t v39;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl ***v45;
  WTF::StringImpl *v46;
  WTF::StringImpl ***v47;
  WTF::StringImpl **v48;
  int v49;
  WTF::StringImpl **v50;
  WTF *v52;
  void *v53;
  WTF::StringImpl ***v54;
  WTF::StringImpl ***v55;
  uint64_t v56;
  WTF::StringImpl ***v57;
  WTF::StringImpl *v58;
  WTF::StringImpl ***v59;
  WTF::StringImpl **v60;
  int v61;
  WTF::StringImpl **v62;
  WTF *v64;
  void *v65;
  WTF::StringImpl **v66;
  uint64_t v67;
  int v68;
  WTF::StringImpl **v69;
  uint64_t v70;
  WTF *v72;
  void *v73;
  uint64_t v74;
  _BYTE v75[24];
  WTF::StringImpl *v76;
  char v77;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE84D90 & 1) == 0)
  {
    v4 = 0;
    v8 = 0;
    v5 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
    goto LABEL_168;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE84D88;
  if (!qword_1ECE84D88)
  {
    v8 = 0;
    v5 = 0;
LABEL_168:
    v6 = (uint64_t)&v4[2 * v5];
    goto LABEL_11;
  }
  v5 = *(unsigned int *)(qword_1ECE84D88 - 4);
  v6 = qword_1ECE84D88 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE84D88 - 12))
  {
    v8 = qword_1ECE84D88 + 16 * v5;
    goto LABEL_168;
  }
  if ((_DWORD)v5)
  {
    v7 = 16 * v5;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*v4);
      if ((result & 1) == 0 && *v4 != (WTF::StringImpl **)-1)
        break;
      v4 += 2;
      v7 -= 16;
      if (!v7)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v8 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE84D88;
  }
  else
  {
    v8 = qword_1ECE84D88;
  }
LABEL_11:
  if (v4)
    v4 += 2 * *((unsigned int *)v4 - 1);
  while ((WTF::StringImpl ***)v8 != v4)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v8 + 8)
                                                                                                + 64))(&v76, *(_QWORD *)(v8 + 8), *(_QWORD *)(v2 + 8));
    if (v77)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v8, (WTF::StringImpl ***)&v76, (uint64_t)v75);
      if (v77)
      {
        result = (uint64_t)v76;
        v76 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v10 = v8 + 16;
    v8 = v6;
    if (v10 != v6)
    {
      v8 = v10;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*(WTF::StringImpl ***)v8);
        if ((result & 1) == 0 && *(_QWORD *)v8 != -1)
          break;
        v8 += 16;
        if (v8 == v6)
        {
          v8 = v6;
          break;
        }
      }
    }
  }
  {
    v11 = 0;
    v23 = 0;
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_170;
  }
  v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v23 = 0;
    v12 = 0;
LABEL_170:
    v13 = &v11[2 * v12];
    goto LABEL_50;
  }
  v12 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v13 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v12);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v23 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v12);
    goto LABEL_170;
  }
  if ((_DWORD)v12)
  {
    v14 = (WTF::StringImpl **)WebCore::nullName;
    v15 = 16 * v12;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v14)
        {
          v16 = (*(_DWORD *)v14)++;
          v17 = *v11;
          if (v16)
          {
            *(_DWORD *)v14 = v16;
            v18 = (uint64_t)v14;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v14);
            result = WTF::fastFree(v20, v21);
            v18 = WebCore::nullName;
          }
        }
        else
        {
          v18 = 0;
          v17 = *v11;
        }
        if (v17 != v14 && (WTF::StringImpl **)((char *)*v11 + 1) != 0)
          break;
        v11 += 2;
        v14 = (WTF::StringImpl **)v18;
        v15 -= 16;
        if (!v15)
        {
          v11 = v13;
          break;
        }
      }
      v23 = v11;
      v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v22 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v22)
                               + 1) <= 1)
      {
        v22 += 16;
        if (v15 == v22)
        {
          v23 = v13;
          goto LABEL_50;
        }
      }
      v23 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v22);
    }
  }
  else
  {
    v23 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_50:
  if (v11)
    v11 += 2 * *((unsigned int *)v11 - 1);
  while (v23 != v11)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v23[1] + 8))(&v76, v23[1], *(_QWORD *)(v2 + 8));
    if (v77)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v23, (WTF::StringImpl ***)&v76, (uint64_t)v75);
      if (v77)
      {
        result = (uint64_t)v76;
        v76 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v24);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v25 = v23 + 2;
    v23 = v13;
    if (v25 != v13)
    {
      v26 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_60:
        v27 = (*(_DWORD *)v26)++;
        v28 = *v25;
        if (v27)
        {
          *(_DWORD *)v26 = v27;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v26);
          result = WTF::fastFree(v30, v31);
        }
        while (v28 == v26 || (WTF::StringImpl **)((char *)*v25 + 1) == 0)
        {
          v25 += 2;
          if (v25 == v13)
            goto LABEL_73;
          v26 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_60;
          v28 = *v25;
        }
      }
      else
      {
        while ((unint64_t)*v25 + 1 <= 1)
        {
          v25 += 2;
          if (v25 == v13)
          {
LABEL_73:
            v23 = v13;
            goto LABEL_75;
          }
        }
      }
      v23 = v25;
    }
LABEL_75:
    ;
  }
  {
    v32 = 0;
    v45 = 0;
    v33 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_172;
  }
  v32 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v45 = 0;
    v33 = 0;
LABEL_172:
    v34 = &v32[2 * v33];
    goto LABEL_101;
  }
  v33 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v34 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v33);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v45 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v33);
    goto LABEL_172;
  }
  if ((_DWORD)v33)
  {
    v35 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v36 = 16 * v33;
      while (1)
      {
        if (v35)
        {
          v37 = (*(_DWORD *)v35)++;
          v38 = *v32;
          if (v37)
          {
            *(_DWORD *)v35 = v37;
            v39 = (uint64_t)v35;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
            result = WTF::fastFree(v41, v42);
            v39 = WebCore::nullName;
          }
        }
        else
        {
          v39 = 0;
          v38 = *v32;
        }
        if (v38 != v35 && (WTF::StringImpl **)((char *)*v32 + 1) != 0)
          break;
        v32 += 2;
        v35 = (WTF::StringImpl **)v39;
        v36 -= 16;
        if (!v36)
        {
          v32 = v34;
          break;
        }
      }
      v45 = v32;
      v32 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v43 = 0;
      v44 = 16 * v33;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v43)
                               + 1) <= 1)
      {
        v43 += 16;
        if (v44 == v43)
        {
          v45 = v34;
          goto LABEL_101;
        }
      }
      v45 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v43);
    }
  }
  else
  {
    v45 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_101:
  if (v32)
    v32 += 2 * *((unsigned int *)v32 - 1);
  while (v45 != v32)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v45[1] + 8))(&v76, v45[1], *(_QWORD *)(v2 + 8));
    if (v77)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v45, (WTF::StringImpl ***)&v76, (uint64_t)v75);
      if (v77)
      {
        result = (uint64_t)v76;
        v76 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v46);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v47 = v45 + 2;
    v45 = v34;
    if (v47 != v34)
    {
      v48 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_111:
        v49 = (*(_DWORD *)v48)++;
        v50 = *v47;
        if (v49)
        {
          *(_DWORD *)v48 = v49;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v48);
          result = WTF::fastFree(v52, v53);
        }
        while (v50 == v48 || (WTF::StringImpl **)((char *)*v47 + 1) == 0)
        {
          v47 += 2;
          if (v47 == v34)
            goto LABEL_124;
          v48 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_111;
          v50 = *v47;
        }
      }
      else
      {
        while ((unint64_t)*v47 + 1 <= 1)
        {
          v47 += 2;
          if (v47 == v34)
          {
LABEL_124:
            v45 = v34;
            goto LABEL_126;
          }
        }
      }
      v45 = v47;
    }
LABEL_126:
    ;
  }
  {
    v54 = 0;
    v55 = 0;
    v56 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_132;
  }
  v54 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v56 = 0;
LABEL_132:
    v57 = &v54[2 * v56];
    goto LABEL_133;
  }
  v56 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v57 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v56);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v56);
    goto LABEL_132;
  }
  if ((_DWORD)v56)
  {
    v66 = (WTF::StringImpl **)WebCore::nullName;
    v67 = 16 * v56;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v66)
        {
          v68 = (*(_DWORD *)v66)++;
          v69 = *v54;
          if (v68)
          {
            *(_DWORD *)v66 = v68;
            v70 = (uint64_t)v66;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v66);
            result = WTF::fastFree(v72, v73);
            v70 = WebCore::nullName;
          }
        }
        else
        {
          v70 = 0;
          v69 = *v54;
        }
        if (v69 != v66 && (WTF::StringImpl **)((char *)*v54 + 1) != 0)
          break;
        v54 += 2;
        v66 = (WTF::StringImpl **)v70;
        v67 -= 16;
        if (!v67)
        {
          v54 = v57;
          break;
        }
      }
      v55 = v54;
      v54 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v74 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v74)
                               + 1) <= 1)
      {
        v74 += 16;
        if (v67 == v74)
        {
          v55 = v57;
          goto LABEL_133;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v74);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_133:
  if (v54)
    v54 += 2 * *((unsigned int *)v54 - 1);
  while (v55 != v54)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v55[1]
                       + 8))(&v76, v55[1], *(_QWORD *)(v2 + 8) + 184);
    if (v77)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v55, (WTF::StringImpl ***)&v76, (uint64_t)v75);
      if (v77)
      {
        result = (uint64_t)v76;
        v76 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v58);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v59 = v55 + 2;
    v55 = v57;
    if (v59 != v57)
    {
      v60 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_143:
        v61 = (*(_DWORD *)v60)++;
        v62 = *v59;
        if (v61)
        {
          *(_DWORD *)v60 = v61;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v60);
          result = WTF::fastFree(v64, v65);
        }
        while (v62 == v60 || (WTF::StringImpl **)((char *)*v59 + 1) == 0)
        {
          v59 += 2;
          if (v59 == v57)
            goto LABEL_156;
          v60 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_143;
          v62 = *v59;
        }
      }
      else
      {
        while ((unint64_t)*v59 + 1 <= 1)
        {
          v59 += 2;
          if (v59 == v57)
          {
LABEL_156:
            v55 = v57;
            goto LABEL_158;
          }
        }
      }
      v55 = v59;
    }
LABEL_158:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGClipPathElement,WebCore::SVGGraphicsElement>::isAnimatedPropertyAttribute(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  _QWORD *v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;

  if ((byte_1ECE84D90 & 1) != 0)
  {
    v3 = qword_1ECE84D88;
    if (!qword_1ECE84D88)
      goto LABEL_33;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE84D88;
    if (v4)
      goto LABEL_6;
    if (qword_1ECE84D88)
      v4 = (WTF::StringImpl ***)(qword_1ECE84D88 + 16 * *(unsigned int *)(qword_1ECE84D88 - 4));
    else
LABEL_33:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
LABEL_6:
  if ((byte_1ECE84D90 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_34;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_17;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_34:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_17:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  v9 = &unk_1ECE7D000;
  {
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      v11 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
      v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!v11)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    + 16
                                    * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      - 1));
        else
          v11 = 0;
      }
      v9 = (_QWORD *)&unk_1ECE7D000;
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    v9[116] = 0;
  }
  if (v10 != v11)
  {
    Accessor = v11[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGClipPathElement,WebCore::SVGGraphicsElement>::isAnimatedStylePropertyAttribute(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE84DA0 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE84D98 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D98, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D98, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D98, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D98, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D98, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D98, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D98, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D98, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84D98, v22, (uint64_t)v13);
    byte_1ECE84DA0 = 1;
  }
  if ((byte_1ECE84D90 & 1) != 0)
  {
    v3 = qword_1ECE84D88;
    if (!qword_1ECE84D88)
      goto LABEL_22;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE84D88;
    if (v4)
      goto LABEL_8;
    if (qword_1ECE84D88)
      v4 = (WTF::StringImpl ***)(qword_1ECE84D88 + 16 * *(unsigned int *)(qword_1ECE84D88 - 4));
    else
LABEL_22:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
LABEL_8:
  if ((byte_1ECE84D90 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
    {
      if (!qword_1ECE84D98)
        return 0;
      v6 = *(_DWORD *)(qword_1ECE84D98 - 8);
      v7 = ~(*a2 << 32) + *a2;
      v8 = 9
         * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      v11 = *(_QWORD *)(qword_1ECE84D98 + 8 * v10);
      if (v11 == *a2)
      {
        return 1;
      }
      else
      {
        v12 = 1;
        do
        {
          result = v11 != 0;
          if (!v11)
            break;
          v10 = (v10 + v12) & v6;
          v11 = *(_QWORD *)(qword_1ECE84D98 + 8 * v10);
          ++v12;
        }
        while (v11 != *a2);
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGClipPathElement,WebCore::SVGGraphicsElement>::createAnimator@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl **result;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  _QWORD *v9;
  WTF::StringImpl **v10;
  uint64_t v11;

  *a2 = 0;
  if ((byte_1ECE84D90 & 1) != 0)
  {
    v4 = qword_1ECE84D88;
    if (!qword_1ECE84D88)
      goto LABEL_33;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
    v4 = qword_1ECE84D88;
    if (v5)
      goto LABEL_6;
    if (qword_1ECE84D88)
      v5 = (WTF::StringImpl ***)(qword_1ECE84D88 + 16 * *(unsigned int *)(qword_1ECE84D88 - 4));
    else
LABEL_33:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
LABEL_6:
  if ((byte_1ECE84D90 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
  if ((WTF::StringImpl ***)v4 != v5)
  {
    result = v5[1];
    if (result)
      goto LABEL_11;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a1);
  if (result)
    goto LABEL_11;
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_34;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a1);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_17;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_34:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_17:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    result = v8[1];
    if (result)
      goto LABEL_11;
  }
  v9 = &unk_1ECE7D000;
  {
    v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
      v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      + 16
                                      * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        - 1));
        else
          result = 0;
      }
      v9 = (_QWORD *)&unk_1ECE7D000;
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    v9[116] = 0;
  }
  if (v10 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_11:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 9))(&v11);
      *a2 = v11;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGClipPathElement,WebCore::SVGGraphicsElement>::appendAnimatedInstance(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  uint64_t v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  _QWORD *v12;
  WTF::StringImpl **v13;

  if ((byte_1ECE84D90 & 1) != 0)
  {
    v6 = qword_1ECE84D88;
    if (!qword_1ECE84D88)
      goto LABEL_34;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE84D88;
    if (v7)
      goto LABEL_6;
    if (qword_1ECE84D88)
      v7 = (WTF::StringImpl ***)(qword_1ECE84D88 + 16 * *(unsigned int *)(qword_1ECE84D88 - 4));
    else
LABEL_34:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
LABEL_6:
  if ((byte_1ECE84D90 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_11;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a2);
  if (result)
    goto LABEL_11;
  {
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_35;
    v11 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v11)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_35:
      v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != v11)
  {
    result = v11[1];
    if (result)
    {
LABEL_11:
      v9 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v9, a3);
    }
  }
  v12 = &unk_1ECE7D000;
  {
    v13 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
      v13 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      + 16
                                      * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        - 1));
        else
          result = 0;
      }
      v12 = (_QWORD *)&unk_1ECE7D000;
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v13)
      v13 += 2 * *((unsigned int *)v13 - 1);
  }
  else
  {
    v13 = 0;
    v12[116] = 0;
  }
  if (v13 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v9, a3);
    }
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl **v6;
  int v7;
  int v8;
  WTF::StringImpl ***v9;
  int v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  unsigned int v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int i;
  uint64_t v18;
  WTF *v19;
  void *v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v1 = qword_1ECE84D88;
  if (qword_1ECE84D88)
  {
    v3 = *(_DWORD *)(qword_1ECE84D88 - 8);
    v4 = *a1;
    if (*(_QWORD *)(*a1 + 16))
    {
      v23 = *MEMORY[0x1E0CBF2F8];
      v24 = *(_OWORD *)(v4 + 24);
      v5 = WTF::computeHash<WebCore::QualifiedNameComponents>(&v23);
    }
    else
    {
      v5 = *(_DWORD *)(v4 + 4);
      if (!v5)
      {
        v5 = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)v4);
        *(_DWORD *)(v4 + 4) = v5;
      }
    }
    v6 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v7 = 0;
      while (1)
      {
        v8 = v5 & v3;
        v9 = (WTF::StringImpl ***)(v1 + 16 * (v5 & v3));
        if (v6)
        {
          v10 = (*(_DWORD *)v6)++;
          v11 = *v9;
          if (v10)
          {
            *(_DWORD *)v6 = v10;
            v12 = (uint64_t)v6;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
            WTF::fastFree(v19, v20);
            v12 = WebCore::nullName;
          }
        }
        else
        {
          v12 = 0;
          v11 = *v9;
        }
        if (v11 == v6)
          break;
        v21 = *v9;
        if (*v9 != (WTF::StringImpl **)-1)
        {
          v22 = *a1;
          if (v21 == (WTF::StringImpl **)*a1
            || v21[3] == *(WTF::StringImpl **)(v22 + 24) && v21[4] == *(WTF::StringImpl **)(v22 + 32))
          {
            return v9;
          }
        }
        v5 = ++v7 + v8;
        v6 = (WTF::StringImpl **)v12;
      }
    }
    else
    {
      v14 = v5 & v3;
      v15 = (WTF::StringImpl ***)(v1 + 16 * (v5 & v3));
      v16 = *v15;
      if (*v15)
      {
        for (i = 1; ; ++i)
        {
          if (v16 != (WTF::StringImpl **)-1)
          {
            v18 = *a1;
            if (v16 == (WTF::StringImpl **)*a1)
              return v15;
            if (v16[3] == *(WTF::StringImpl **)(v18 + 24))
            {
              v9 = v15;
              if (v16[4] == *(WTF::StringImpl **)(v18 + 32))
                return v9;
            }
          }
          v9 = 0;
          v14 = (v14 + i) & v3;
          v15 = (WTF::StringImpl ***)(v1 + 16 * v14);
          v16 = *v15;
          if (!*v15)
            return v9;
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::SVGUnitTypes::SVGUnitType>::setValueInternal(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(result + 12) = *a2;
  return result;
}

BOOL WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::SVGUnitTypes::SVGUnitType>::setValue(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 <= 1)
    *(_BYTE *)(a1 + 12) = *a2;
  return v2 < 2;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::SVGUnitTypes::SVGUnitType>::valueInternal(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::SVGUnitTypes::SVGUnitType>::value(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) <= 2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  else
    return 0;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::SVGUnitTypes::SVGUnitType>::valueAsString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  _DWORD *v3;

  v2 = *(unsigned __int8 *)(result + 12);
  if (v2 == 2 || v2 == 1)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a2 = v3;
  return result;
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::SVGUnitTypes::SVGUnitType>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = *(_BYTE *)(a1 + 12);
  *(_QWORD *)result = off_1E3456558;
  *a2 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::~SVGAnimatedDecoratedProperty(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = &off_1E34568A0;
  v3 = (_DWORD *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *a1 = off_1E347BE40;
  v5 = a1[3];
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v13 = i;
              v14 = v5;
              v12 = v7;
              WTF::fastFree((WTF *)v9, a2);
              v7 = v12;
              i = v13;
              v5 = v14;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::~SVGAnimatedDecoratedProperty(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E34568A0;
  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *(_QWORD *)this = off_1E347BE40;
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v13 = i;
              v14 = v5;
              v12 = v7;
              WTF::fastFree((WTF *)v9, a2);
              v7 = v12;
              i = v13;
              v5 = v14;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::baseValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
}

uint64_t WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::animValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48));
}

BOOL WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::isDirty(uint64_t a1)
{
  return *(_BYTE *)(a1 + 56) == 1;
}

uint64_t WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::setDirty(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

_BYTE *WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::synchronize@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  char v2;
  _BYTE *v3;

  v2 = result[56];
  if (v2)
  {
    result[56] = 0;
    v3 = a2;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 40))(result);
    a2 = v3;
    v2 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[8] = v2;
  return result;
}

unsigned int *WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::startAnimation(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  _QWORD v9[3];

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    LODWORD(v9[0]) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v4, v9);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 40) + 56))(v9);
    v5 = v9[0];
    v9[0] = 0;
    v6 = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v5;
    if (v6)
    {
      v7 = v6[2] - 1;
      if (v6[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        v6 = (_DWORD *)v9[0];
        v9[0] = 0;
        if (!v6)
          return WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>(a1 + 24, a2, (uint64_t)v9);
        v7 = v6[2] - 1;
        if (v6[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          return WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>(a1 + 24, a2, (uint64_t)v9);
        }
      }
      v6[2] = v7;
    }
  }
  return WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>(a1 + 24, a2, (uint64_t)v9);
}

_DWORD *WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::stopAnimation(uint64_t a1, _QWORD *a2)
{
  _DWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  result = (_DWORD *)WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>(a1 + 24, a2);
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v5 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = *(uint64_t **)(a1 + 24);
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      ++v7;
      v6 -= 8;
      if (!v6)
        goto LABEL_2;
    }
  }
  else
  {
    v7 = *(uint64_t **)(a1 + 24);
  }
  v8 = (uint64_t *)(v4 + 8 * v5);
  if (v7 == v8)
    goto LABEL_2;
  v9 = *v7;
LABEL_16:
  if (!*(_QWORD *)(v9 + 8))
  {
    while (++v7 != v8)
    {
      v9 = *v7;
      if ((unint64_t)(*v7 + 1) > 1)
      {
        if (v7 != v8)
          goto LABEL_16;
        break;
      }
    }
LABEL_2:
    result = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    return result;
  }
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
  {
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
    return (_DWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v10 + 24))(v10, &v11);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::instanceStartAnimation(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v5 = a1[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v9 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = (uint64_t *)a1[3];
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_2;
    }
  }
  else
  {
    v11 = (uint64_t *)a1[3];
  }
  v12 = (uint64_t *)(v5 + 8 * v9);
  if (v11 == v12)
    goto LABEL_2;
  v13 = *v11;
LABEL_18:
  if (!*(_QWORD *)(v13 + 8))
  {
    while (++v11 != v12)
    {
      v13 = *v11;
      if ((unint64_t)(*v11 + 1) > 1)
      {
        if (v11 != v12)
          goto LABEL_18;
        break;
      }
    }
LABEL_2:
    v6 = *(_QWORD *)(a3 + 48);
    if (v6)
      ++*(_DWORD *)(v6 + 8);
    v7 = (_DWORD *)a1[6];
    a1[6] = v6;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, a2);
}

_DWORD *WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::instanceStopAnimation(_QWORD *a1)
{
  _DWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  result = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  v3 = a1[3];
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_2;
  v4 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = (uint64_t *)a1[3];
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_2;
    }
  }
  else
  {
    v6 = (uint64_t *)a1[3];
  }
  v7 = (uint64_t *)(v3 + 8 * v4);
  if (v6 == v7)
    goto LABEL_2;
  v8 = *v6;
LABEL_16:
  if (!*(_QWORD *)(v8 + 8))
  {
    while (++v6 != v7)
    {
      v8 = *v6;
      if ((unint64_t)(*v6 + 1) > 1)
      {
        if (v6 != v7)
          goto LABEL_16;
        break;
      }
    }
LABEL_2:
    result = (_DWORD *)a1[6];
    a1[6] = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

void *std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGClipPathElement::SVGClipPathElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  if ((byte_1ECE84DA8 & 1) == 0)
  {
    qword_1ECE84E98 = (uint64_t)off_1E3455990;
    unk_1ECE84EA0 = 216;
    byte_1ECE84DA8 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGClipPathElement,WebCore::SVGGraphicsElement>::registerProperty();
}

void *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGClipPathElement,WebCore::SVGGraphicsElement>::registerProperty()
{
  uint64_t v1;
  uint64_t *v2;

  if ((byte_1ECE84D90 & 1) == 0)
  {
    qword_1ECE84D88 = 0;
    byte_1ECE84D90 = 1;
  }
  v2 = &qword_1ECE84E98;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>((uint64_t)&v1, (uint64_t *)&v2);
}

void *WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  void *result;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  int v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  uint64_t v20;

  v4 = qword_1ECE84D88;
  if (qword_1ECE84D88
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(0),
        (v4 = qword_1ECE84D88) != 0))
  {
    v5 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = WebCore::SVGAttributeHashTranslator::hash(&WebCore::SVGNames::clipPathUnitsAttr) & v5;
  v7 = (uint64_t *)(v4 + 16 * v6);
  result = (void *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket((WTF::StringImpl **)*v7);
  if ((result & 1) == 0)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      v18 = (WTF::StringImpl **)*v7;
      if (*v7 == -1)
      {
        v16 = v7;
      }
      else if (v18 == (WTF::StringImpl **)WebCore::SVGNames::clipPathUnitsAttr
             || v18[3] == *(WTF::StringImpl **)(WebCore::SVGNames::clipPathUnitsAttr + 24)
             && v18[4] == *(WTF::StringImpl **)(WebCore::SVGNames::clipPathUnitsAttr + 32))
      {
        if (qword_1ECE84D88)
          v20 = *(unsigned int *)(qword_1ECE84D88 - 4);
        else
          v20 = 0;
        v15 = 0;
        v14 = qword_1ECE84D88 + 16 * v20;
        goto LABEL_12;
      }
      v6 = (v6 + v17) & v5;
      v7 = (uint64_t *)(v4 + 16 * v6);
      result = (void *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket((WTF::StringImpl **)*v7);
      ++v17;
    }
    while (!(_DWORD)result);
    if (v16)
    {
      v19 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v16 = v19;
      v16[1] = 0;
      --*(_DWORD *)(qword_1ECE84D88 - 16);
      v7 = v16;
    }
  }
  result = WTF::GenericHashTraits<WebCore::QualifiedName>::assignToEmpty<WebCore::QualifiedName,WebCore::QualifiedName const&>((WTF::StringImpl ***)v7, (WTF::StringImpl ***)&WebCore::SVGNames::clipPathUnitsAttr);
  v7[1] = *a2;
  if (qword_1ECE84D88)
    v9 = *(_DWORD *)(qword_1ECE84D88 - 12) + 1;
  else
    v9 = 1;
  *(_DWORD *)(qword_1ECE84D88 - 12) = v9;
  v10 = qword_1ECE84D88;
  if (qword_1ECE84D88)
    v11 = *(_DWORD *)(qword_1ECE84D88 - 12);
  else
    v11 = 0;
  v12 = (*(_DWORD *)(qword_1ECE84D88 - 16) + v11);
  v13 = *(unsigned int *)(qword_1ECE84D88 - 4);
  if (v13 > 0x400)
  {
    if (v13 > 2 * v12)
      goto LABEL_11;
LABEL_25:
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand((WTF::StringImpl ***)v7);
    v7 = (uint64_t *)result;
    v10 = qword_1ECE84D88;
    if (qword_1ECE84D88)
      v13 = *(unsigned int *)(qword_1ECE84D88 - 4);
    else
      v13 = 0;
    goto LABEL_11;
  }
  if (3 * v13 <= 4 * v12)
    goto LABEL_25;
LABEL_11:
  v14 = v10 + 16 * v13;
  v15 = 1;
LABEL_12:
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v14;
  *(_BYTE *)(a1 + 16) = v15;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(WTF::StringImpl ***a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE84D88 && (v2 = *(_DWORD *)(qword_1ECE84D88 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE84D88 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v3, a1);
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WTF::StringImpl ***a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t Table;
  void *v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;

  v4 = qword_1ECE84D88;
  if (qword_1ECE84D88)
  {
    LODWORD(v5) = *(_DWORD *)(qword_1ECE84D88 - 4);
    v6 = *(_DWORD *)(qword_1ECE84D88 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  Table = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::allocateTable(a1);
  qword_1ECE84D88 = Table;
  *(_DWORD *)(Table - 8) = a1 - 1;
  *(_DWORD *)(Table - 4) = a1;
  *(_DWORD *)(Table - 16) = 0;
  *(_DWORD *)(qword_1ECE84D88 - 12) = v6;
  v9 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v11 = (WTF::StringImpl ***)v4;
    do
    {
      if (*v11 != (WTF::StringImpl **)-1)
      {
        if (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*v11))
        {
          WebCore::QualifiedName::~QualifiedName(v11);
        }
        else
        {
          v12 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert((WebCore::QualifiedName::QualifiedNameImpl **)v11);
          WebCore::QualifiedName::~QualifiedName(v11);
          if (v11 == a2)
            v9 = v12;
        }
      }
      v11 += 2;
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  result = 0;
  if (v4)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v9;
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  _BOOL4 isEmptyBucket;
  WTF::StringImpl ***v8;
  WTF::StringImpl **v9;
  __int128 v10;
  WTF *v12;
  void *v13;

  v2 = qword_1ECE84D88;
  if (qword_1ECE84D88)
    v3 = *(_DWORD *)(qword_1ECE84D88 - 8);
  else
    v3 = 0;
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    isEmptyBucket = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*(WTF::StringImpl ***)(v2 + 16 * v6));
    v4 = ++v5 + v6;
  }
  while (!isEmptyBucket);
  v8 = (WTF::StringImpl ***)(v2 + 16 * v6);
  v9 = *v8;
  *v8 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v9);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = *(_OWORD *)a1;
  *a1 = 0;
  *(_OWORD *)v8 = v10;
  return v8;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGClipPathElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGClipPathElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGClipPathElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGClipPathElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGClipPathElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGClipPathElement,WebCore::SVGUnitTypes::SVGUnitType>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456678;
  *(_QWORD *)result = &off_1E34565A8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGClipPathElement,WebCore::SVGUnitTypes::SVGUnitType>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::SVGUnitTypes::SVGUnitType>::~SVGAnimatedEnumerationAnimator(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)a1 = off_1E3456610;
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::SVGUnitTypes::SVGUnitType>::~SVGAnimatedEnumerationAnimator(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E3456610;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::SVGUnitTypes::SVGUnitType>>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::SVGUnitTypes::SVGUnitType>>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;

  *(_BYTE *)(a1 + 65) = WebCore::SVGPropertyTraits<WebCore::SVGUnitTypes::SVGUnitType>::fromString(a3);
  result = WebCore::SVGPropertyTraits<WebCore::SVGUnitTypes::SVGUnitType>::fromString(a4);
  *(_BYTE *)(a1 + 66) = result;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::SVGUnitTypes::SVGUnitType>>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::SVGUnitTypes::SVGUnitType>::animate(uint64_t a1, float a2)
{
  int v2;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v9;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v5 = a2 > 0.5 && v2 == 1 || a2 == 1.0 || v2 == 3;
  v6 = (unsigned __int8 *)(a1 + 65);
  if (v5)
    v6 = (unsigned __int8 *)(a1 + 66);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v9 = *v6;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 16))(v7, &v9);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::SVGUnitTypes::SVGUnitType>>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::SVGUnitTypes::SVGUnitType>>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::SVGUnitTypes::SVGUnitType>>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationEnumerationFunction<WebCore::SVGUnitTypes::SVGUnitType>::~SVGAnimationEnumerationFunction()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationDiscreteFunction<WebCore::SVGUnitTypes::SVGUnitType>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimationEnumerationFunction<WebCore::SVGUnitTypes::SVGUnitType>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;

  *(_BYTE *)(a1 + 9) = WebCore::SVGPropertyTraits<WebCore::SVGUnitTypes::SVGUnitType>::fromString(a3);
  result = WebCore::SVGPropertyTraits<WebCore::SVGUnitTypes::SVGUnitType>::fromString(a4);
  *(_BYTE *)(a1 + 10) = result;
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCursorElement,WebCore::SVGElement,WebCore::SVGTests,WebCore::SVGURIReference>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl **v37;
  int v38;
  WTF::StringImpl **v39;
  WTF *v41;
  void *v42;
  WTF::StringImpl ***v43;
  WTF::StringImpl ***v44;
  uint64_t v45;
  WTF::StringImpl ***v46;
  WTF::StringImpl ***v47;
  WTF::StringImpl **v48;
  int v49;
  WTF::StringImpl **v50;
  WTF *v52;
  void *v53;
  WTF::StringImpl ***v54;
  uint64_t v55;
  WTF::StringImpl ***v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  char *v59;
  WTF::StringImpl **v60;
  uint64_t v61;
  int v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  WTF *v66;
  void *v67;
  uint64_t v68;

  v1 = result;
  if ((byte_1ECE84DB8 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE84DB0;
  if (!qword_1ECE84DB0)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE84DB0 - 4);
  v4 = qword_1ECE84DB0 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE84DB0 - 12))
  {
    v13 = qword_1ECE84DB0 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE84DB0;
    if (!qword_1ECE84DB0)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE84DB0;
    if (qword_1ECE84DB0)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84DB0 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE84DB0)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE84DB0 + v14;
    if (qword_1ECE84DB0)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v35 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_148;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v35 = 0;
    v23 = 0;
LABEL_148:
    v24 = &v22[2 * v23];
    goto LABEL_73;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_148;
  }
  if ((_DWORD)v23)
  {
    v25 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v26 = 16 * v23;
      while (1)
      {
        if (v25)
        {
          v27 = (*(_DWORD *)v25)++;
          v28 = *v22;
          if (v27)
          {
            *(_DWORD *)v25 = v27;
            v29 = (uint64_t)v25;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
            result = WTF::fastFree(v31, v32);
            v29 = WebCore::nullName;
          }
        }
        else
        {
          v29 = 0;
          v28 = *v22;
        }
        if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
          break;
        v22 += 2;
        v25 = (WTF::StringImpl **)v29;
        v26 -= 16;
        if (!v26)
        {
          v22 = v24;
          break;
        }
      }
      v35 = v22;
      v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v33 = 0;
      v34 = 16 * v23;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v33)
                               + 1) <= 1)
      {
        v33 += 16;
        if (v34 == v33)
        {
          v35 = v24;
          goto LABEL_73;
        }
      }
      v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v33);
    }
  }
  else
  {
    v35 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_73:
  if (v22)
    v22 += 2 * *((unsigned int *)v22 - 1);
  while (v35 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v35[1] + 2))(v35[1], *(_QWORD *)(v1 + 8));
    v36 = v35 + 2;
    v35 = v24;
    if (v36 != v24)
    {
      v37 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_78:
        v38 = (*(_DWORD *)v37)++;
        v39 = *v36;
        if (v38)
        {
          *(_DWORD *)v37 = v38;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
          result = WTF::fastFree(v41, v42);
        }
        while (v39 == v37 || (WTF::StringImpl **)((char *)*v36 + 1) == 0)
        {
          v36 += 2;
          if (v36 == v24)
            goto LABEL_91;
          v37 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_78;
          v39 = *v36;
        }
      }
      else
      {
        while ((unint64_t)*v36 + 1 <= 1)
        {
          v36 += 2;
          if (v36 == v24)
          {
LABEL_91:
            v35 = v24;
            goto LABEL_93;
          }
        }
      }
      v35 = v36;
    }
LABEL_93:
    ;
  }
  {
    v43 = 0;
    v44 = 0;
    v45 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_97;
  }
  v43 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v44 = 0;
    v45 = 0;
LABEL_97:
    v46 = &v43[2 * v45];
    goto LABEL_98;
  }
  v45 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v46 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v45);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v45);
    goto LABEL_97;
  }
  if ((_DWORD)v45)
  {
    v60 = (WTF::StringImpl **)WebCore::nullName;
    v61 = 16 * v45;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v60)
        {
          v62 = (*(_DWORD *)v60)++;
          v63 = *v43;
          if (v62)
          {
            *(_DWORD *)v60 = v62;
            v64 = (uint64_t)v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v60);
            result = WTF::fastFree(v66, v67);
            v64 = WebCore::nullName;
          }
        }
        else
        {
          v64 = 0;
          v63 = *v43;
        }
        if (v63 != v60 && (WTF::StringImpl **)((char *)*v43 + 1) != 0)
          break;
        v43 += 2;
        v60 = (WTF::StringImpl **)v64;
        v61 -= 16;
        if (!v61)
        {
          v43 = v46;
          break;
        }
      }
      v44 = v43;
      v43 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v68 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v68)
                               + 1) <= 1)
      {
        v68 += 16;
        if (v61 == v68)
        {
          v44 = v46;
          goto LABEL_98;
        }
      }
      v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v68);
    }
  }
  else
  {
    v44 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_98:
  if (v43)
    v43 += 2 * *((unsigned int *)v43 - 1);
  while (v44 != v43)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t))*v44[1] + 2))(v44[1], *(_QWORD *)(v1 + 8) + 176);
    v47 = v44 + 2;
    v44 = v46;
    if (v47 != v46)
    {
      v48 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_103:
        v49 = (*(_DWORD *)v48)++;
        v50 = *v47;
        if (v49)
        {
          *(_DWORD *)v48 = v49;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v48);
          result = WTF::fastFree(v52, v53);
        }
        while (v50 == v48 || (WTF::StringImpl **)((char *)*v47 + 1) == 0)
        {
          v47 += 2;
          if (v47 == v46)
            goto LABEL_116;
          v48 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_103;
          v50 = *v47;
        }
      }
      else
      {
        while ((unint64_t)*v47 + 1 <= 1)
        {
          v47 += 2;
          if (v47 == v46)
          {
LABEL_116:
            v44 = v46;
            goto LABEL_118;
          }
        }
      }
      v44 = v47;
    }
LABEL_118:
    ;
  }
  {
    v54 = 0;
    v58 = 0;
    v55 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_146;
  }
  v54 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v55 = 0;
LABEL_146:
    v56 = &v54[2 * v55];
    goto LABEL_129;
  }
  v55 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v56 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v55);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v55);
    goto LABEL_146;
  }
  if ((_DWORD)v55)
  {
    v57 = 16 * v55;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v54);
      if ((result & 1) == 0 && *v54 != (WTF::StringImpl **)-1)
        break;
      v54 += 2;
      v57 -= 16;
      if (!v57)
      {
        v54 = v56;
        break;
      }
    }
    v58 = v54;
    v54 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_129:
  if (v54)
    v54 += 2 * *((unsigned int *)v54 - 1);
  while (v58 != v54)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t))*v58[1] + 2))(v58[1], *(_QWORD *)(v1 + 8) + 184);
    v59 = (char *)(v58 + 2);
    v58 = v56;
    if (v59 != (char *)v56)
    {
      v58 = (WTF::StringImpl ***)v59;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v58);
        if ((result & 1) == 0 && *v58 != (WTF::StringImpl **)-1)
          break;
        v58 += 2;
        if (v58 == v56)
        {
          v58 = v56;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCursorElement,WebCore::SVGElement,WebCore::SVGTests,WebCore::SVGURIReference>::propertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl **v39;
  int v40;
  WTF::StringImpl **v41;
  WTF *v43;
  void *v44;
  WTF::StringImpl ***v45;
  uint64_t v46;
  WTF::StringImpl ***v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  int v50;
  WTF::StringImpl **v51;
  WTF *v53;
  void *v54;
  WTF::StringImpl ***v55;
  uint64_t v56;
  WTF::StringImpl ***v57;
  uint64_t v58;
  char *v59;
  WTF::StringImpl **v60;
  WTF *v61;
  void *v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  int v65;
  WTF::StringImpl **v66;
  uint64_t v67;
  WTF *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = (uint64_t)v6;
  if ((byte_1ECE84DB8 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE84DB0;
  if (!qword_1ECE84DB0)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE84DB0 - 4);
  v9 = qword_1ECE84DB0 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE84DB0 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE84DB0 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE84DB0;
    if (!qword_1ECE84DB0)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE84DB0;
    if (qword_1ECE84DB0)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84DB0 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE84DB0)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE84DB0 + v18);
    if (qword_1ECE84DB0)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_145;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_160;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
LABEL_160:
    v28 = &v26[2 * v27];
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_160;
  }
  if ((_DWORD)v27)
  {
    v29 = (WTF::StringImpl **)WebCore::nullName;
    v30 = 16 * v27;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v29)
        {
          v31 = (*(_DWORD *)v29)++;
          v32 = *v26;
          if (v31)
          {
            *(_DWORD *)v29 = v31;
            v33 = (uint64_t)v29;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
            result = WTF::fastFree(v35, v36);
            v33 = WebCore::nullName;
          }
        }
        else
        {
          v33 = 0;
          v32 = *v26;
        }
        if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
          break;
        v26 += 2;
        v29 = (WTF::StringImpl **)v33;
        v30 -= 16;
        if (!v30)
        {
          v26 = v28;
          break;
        }
      }
      v17 = v26;
      v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v37 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v37)
                               + 1) <= 1)
      {
        v37 += 16;
        if (v30 == v37)
        {
          v17 = v28;
          goto LABEL_75;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v37);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_75:
  if (v26)
    v26 += 2 * *((unsigned int *)v26 - 1);
  while (v17 != v26)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_145;
    v38 = v17 + 2;
    v17 = v28;
    if (v38 != v28)
    {
      v39 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_81:
        v40 = (*(_DWORD *)v39)++;
        v41 = *v38;
        if (v40)
        {
          *(_DWORD *)v39 = v40;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v39);
          result = WTF::fastFree(v43, v44);
        }
        while (v41 == v39 || (WTF::StringImpl **)((char *)*v38 + 1) == 0)
        {
          v38 += 2;
          if (v38 == v28)
            goto LABEL_94;
          v39 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_81;
          v41 = *v38;
        }
      }
      else
      {
        while ((unint64_t)*v38 + 1 <= 1)
        {
          v38 += 2;
          if (v38 == v28)
          {
LABEL_94:
            v17 = v28;
            goto LABEL_96;
          }
        }
      }
      v17 = v38;
    }
LABEL_96:
    ;
  }
  {
    v45 = 0;
    v17 = 0;
    v46 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_100;
  }
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v45 = 0;
    v17 = 0;
    v46 = 0;
LABEL_100:
    v47 = &v45[2 * v46];
    goto LABEL_101;
  }
  v46 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v45 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  v47 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v46);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v46);
    goto LABEL_100;
  }
  if ((_DWORD)v46)
  {
    v63 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v64 = 16 * v46;
      while (1)
      {
        if (v63)
        {
          v65 = (*(_DWORD *)v63)++;
          v66 = *v45;
          if (v65)
          {
            *(_DWORD *)v63 = v65;
            v67 = (uint64_t)v63;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v63);
            result = WTF::fastFree(v69, v70);
            v67 = WebCore::nullName;
          }
        }
        else
        {
          v67 = 0;
          v66 = *v45;
        }
        if (v66 != v63 && (WTF::StringImpl **)((char *)*v45 + 1) != 0)
          break;
        v45 += 2;
        v63 = (WTF::StringImpl **)v67;
        v64 -= 16;
        if (!v64)
        {
          v45 = v47;
          break;
        }
      }
      v17 = v45;
      v45 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v71 = 0;
      v72 = 16 * v46;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v71)
                               + 1) <= 1)
      {
        v71 += 16;
        if (v72 == v71)
        {
          v17 = v47;
          goto LABEL_101;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v71);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_101:
  if (v45)
    v45 += 2 * *((unsigned int *)v45 - 1);
  while (v17 != v45)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8) + 176, a2);
    if ((_DWORD)result)
      goto LABEL_145;
    v48 = v17 + 2;
    v17 = v47;
    if (v48 != v47)
    {
      v49 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_107:
        v50 = (*(_DWORD *)v49)++;
        v51 = *v48;
        if (v50)
        {
          *(_DWORD *)v49 = v50;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
          result = WTF::fastFree(v53, v54);
        }
        while (v51 == v49 || (WTF::StringImpl **)((char *)*v48 + 1) == 0)
        {
          v48 += 2;
          if (v48 == v47)
            goto LABEL_120;
          v49 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_107;
          v51 = *v48;
        }
      }
      else
      {
        while ((unint64_t)*v48 + 1 <= 1)
        {
          v48 += 2;
          if (v48 == v47)
          {
LABEL_120:
            v17 = v47;
            goto LABEL_122;
          }
        }
      }
      v17 = v48;
    }
LABEL_122:
    ;
  }
  {
    v55 = 0;
    v17 = 0;
    v56 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_158;
  }
  v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v56 = 0;
LABEL_158:
    v57 = &v55[2 * v56];
    goto LABEL_133;
  }
  v56 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v57 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v56);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v56);
    goto LABEL_158;
  }
  if ((_DWORD)v56)
  {
    v58 = 16 * v56;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v55);
      if ((result & 1) == 0 && *v55 != (WTF::StringImpl **)-1)
        break;
      v55 += 2;
      v58 -= 16;
      if (!v58)
      {
        v55 = v57;
        break;
      }
    }
    v17 = v55;
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_133:
  if (v55)
    v55 += 2 * *((unsigned int *)v55 - 1);
  if (v55 != v17)
  {
    while (1)
    {
      result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8) + 184, a2);
      if ((_DWORD)result)
        break;
      v59 = (char *)(v17 + 2);
      v17 = v57;
      if (v59 != (char *)v57)
      {
        v17 = (WTF::StringImpl ***)v59;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v17);
          if ((result & 1) == 0 && *v17 != (WTF::StringImpl **)-1)
            break;
          v17 += 2;
          if (v17 == v57)
          {
            v17 = v57;
            break;
          }
        }
      }
      if (v17 == v55)
        return result;
    }
LABEL_145:
    v60 = *v17;
    if (*v17)
      ++*(_DWORD *)v60;
    result = *a3;
    *a3 = (uint64_t)v60;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        return WTF::fastFree(v61, v62);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCursorElement,WebCore::SVGElement,WebCore::SVGTests,WebCore::SVGURIReference>::animatedPropertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl **v39;
  int v40;
  WTF::StringImpl **v41;
  WTF *v43;
  void *v44;
  WTF::StringImpl ***v45;
  uint64_t v46;
  WTF::StringImpl ***v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  int v50;
  WTF::StringImpl **v51;
  WTF *v53;
  void *v54;
  WTF::StringImpl ***v55;
  uint64_t v56;
  WTF::StringImpl ***v57;
  uint64_t v58;
  char *v59;
  WTF::StringImpl **v60;
  WTF *v61;
  void *v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  int v65;
  WTF::StringImpl **v66;
  uint64_t v67;
  WTF *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = (uint64_t)v6;
  if ((byte_1ECE84DB8 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE84DB0;
  if (!qword_1ECE84DB0)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE84DB0 - 4);
  v9 = qword_1ECE84DB0 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE84DB0 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE84DB0 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE84DB0;
    if (!qword_1ECE84DB0)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE84DB0;
    if (qword_1ECE84DB0)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84DB0 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE84DB0)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE84DB0 + v18);
    if (qword_1ECE84DB0)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_145;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_160;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
LABEL_160:
    v28 = &v26[2 * v27];
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_160;
  }
  if ((_DWORD)v27)
  {
    v29 = (WTF::StringImpl **)WebCore::nullName;
    v30 = 16 * v27;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v29)
        {
          v31 = (*(_DWORD *)v29)++;
          v32 = *v26;
          if (v31)
          {
            *(_DWORD *)v29 = v31;
            v33 = (uint64_t)v29;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
            result = WTF::fastFree(v35, v36);
            v33 = WebCore::nullName;
          }
        }
        else
        {
          v33 = 0;
          v32 = *v26;
        }
        if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
          break;
        v26 += 2;
        v29 = (WTF::StringImpl **)v33;
        v30 -= 16;
        if (!v30)
        {
          v26 = v28;
          break;
        }
      }
      v17 = v26;
      v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v37 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v37)
                               + 1) <= 1)
      {
        v37 += 16;
        if (v30 == v37)
        {
          v17 = v28;
          goto LABEL_75;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v37);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_75:
  if (v26)
    v26 += 2 * *((unsigned int *)v26 - 1);
  while (v17 != v26)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_145;
    v38 = v17 + 2;
    v17 = v28;
    if (v38 != v28)
    {
      v39 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_81:
        v40 = (*(_DWORD *)v39)++;
        v41 = *v38;
        if (v40)
        {
          *(_DWORD *)v39 = v40;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v39);
          result = WTF::fastFree(v43, v44);
        }
        while (v41 == v39 || (WTF::StringImpl **)((char *)*v38 + 1) == 0)
        {
          v38 += 2;
          if (v38 == v28)
            goto LABEL_94;
          v39 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_81;
          v41 = *v38;
        }
      }
      else
      {
        while ((unint64_t)*v38 + 1 <= 1)
        {
          v38 += 2;
          if (v38 == v28)
          {
LABEL_94:
            v17 = v28;
            goto LABEL_96;
          }
        }
      }
      v17 = v38;
    }
LABEL_96:
    ;
  }
  {
    v45 = 0;
    v17 = 0;
    v46 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_100;
  }
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v45 = 0;
    v17 = 0;
    v46 = 0;
LABEL_100:
    v47 = &v45[2 * v46];
    goto LABEL_101;
  }
  v46 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v45 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  v47 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v46);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v46);
    goto LABEL_100;
  }
  if ((_DWORD)v46)
  {
    v63 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v64 = 16 * v46;
      while (1)
      {
        if (v63)
        {
          v65 = (*(_DWORD *)v63)++;
          v66 = *v45;
          if (v65)
          {
            *(_DWORD *)v63 = v65;
            v67 = (uint64_t)v63;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v63);
            result = WTF::fastFree(v69, v70);
            v67 = WebCore::nullName;
          }
        }
        else
        {
          v67 = 0;
          v66 = *v45;
        }
        if (v66 != v63 && (WTF::StringImpl **)((char *)*v45 + 1) != 0)
          break;
        v45 += 2;
        v63 = (WTF::StringImpl **)v67;
        v64 -= 16;
        if (!v64)
        {
          v45 = v47;
          break;
        }
      }
      v17 = v45;
      v45 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v71 = 0;
      v72 = 16 * v46;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v71)
                               + 1) <= 1)
      {
        v71 += 16;
        if (v72 == v71)
        {
          v17 = v47;
          goto LABEL_101;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v71);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_101:
  if (v45)
    v45 += 2 * *((unsigned int *)v45 - 1);
  while (v17 != v45)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8) + 176, a2);
    if ((_DWORD)result)
      goto LABEL_145;
    v48 = v17 + 2;
    v17 = v47;
    if (v48 != v47)
    {
      v49 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_107:
        v50 = (*(_DWORD *)v49)++;
        v51 = *v48;
        if (v50)
        {
          *(_DWORD *)v49 = v50;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
          result = WTF::fastFree(v53, v54);
        }
        while (v51 == v49 || (WTF::StringImpl **)((char *)*v48 + 1) == 0)
        {
          v48 += 2;
          if (v48 == v47)
            goto LABEL_120;
          v49 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_107;
          v51 = *v48;
        }
      }
      else
      {
        while ((unint64_t)*v48 + 1 <= 1)
        {
          v48 += 2;
          if (v48 == v47)
          {
LABEL_120:
            v17 = v47;
            goto LABEL_122;
          }
        }
      }
      v17 = v48;
    }
LABEL_122:
    ;
  }
  {
    v55 = 0;
    v17 = 0;
    v56 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_158;
  }
  v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v56 = 0;
LABEL_158:
    v57 = &v55[2 * v56];
    goto LABEL_133;
  }
  v56 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v57 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v56);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v56);
    goto LABEL_158;
  }
  if ((_DWORD)v56)
  {
    v58 = 16 * v56;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v55);
      if ((result & 1) == 0 && *v55 != (WTF::StringImpl **)-1)
        break;
      v55 += 2;
      v58 -= 16;
      if (!v58)
      {
        v55 = v57;
        break;
      }
    }
    v17 = v55;
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_133:
  if (v55)
    v55 += 2 * *((unsigned int *)v55 - 1);
  if (v55 != v17)
  {
    while (1)
    {
      result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8) + 184, a2);
      if ((_DWORD)result)
        break;
      v59 = (char *)(v17 + 2);
      v17 = v57;
      if (v59 != (char *)v57)
      {
        v17 = (WTF::StringImpl ***)v59;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v17);
          if ((result & 1) == 0 && *v17 != (WTF::StringImpl **)-1)
            break;
          v17 += 2;
          if (v17 == v57)
          {
            v17 = v57;
            break;
          }
        }
      }
      if (v17 == v55)
        return result;
    }
LABEL_145:
    v60 = *v17;
    if (*v17)
      ++*(_DWORD *)v60;
    result = *a3;
    *a3 = (uint64_t)v60;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        return WTF::fastFree(v61, v62);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCursorElement,WebCore::SVGElement,WebCore::SVGTests,WebCore::SVGURIReference>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***result;
  uint64_t v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl ***v14;

  if ((byte_1ECE84DB8 & 1) != 0)
  {
    v6 = qword_1ECE84DB0;
    if (!qword_1ECE84DB0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE84DB0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE84DB0)
      v7 = (WTF::StringImpl ***)(qword_1ECE84DB0 + 16 * *(unsigned int *)(qword_1ECE84DB0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
LABEL_7:
  if ((byte_1ECE84DB8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = (WTF::StringImpl ***)v7[1];
    if (result)
      goto LABEL_12;
  }
  {
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_45;
    v11 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v11)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_45:
      v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != v11)
  {
    result = (WTF::StringImpl ***)v11[1];
    if (result)
    {
LABEL_12:
      v9 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, uint64_t, uint64_t))(*result)[7])(result, v9, a3);
    }
  }
  {
    v12 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_25:
      v13 = 0;
      goto LABEL_26;
    }
    v13 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
    v12 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!v13)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_25;
      v13 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_26:
  {
    if (v12)
      v12 += 2 * *((unsigned int *)v12 - 1);
  }
  else
  {
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v12 != v13)
  {
    result = (WTF::StringImpl ***)v13[1];
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8) + 176;
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, uint64_t, uint64_t))(*result)[7])(result, v9, a3);
    }
  }
  {
    v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_44;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_35;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_44:
      result = 0;
  }
  else
  {
    v14 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_35:
  {
    if (v14)
      v14 += 2 * *((unsigned int *)v14 - 1);
  }
  else
  {
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v14 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, uint64_t, _QWORD))(*result)[7])(result, v9, a3);
    }
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCursorElement,WebCore::SVGElement,WebCore::SVGTests,WebCore::SVGURIReference>::synchronize@<X0>(WebCore::QualifiedName::QualifiedNameImpl **a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  uint64_t v12;
  char v13;

  *a2 = 0;
  a2[8] = 0;
  if ((byte_1ECE84DB8 & 1) != 0)
  {
    v4 = qword_1ECE84DB0;
    if (!qword_1ECE84DB0)
      goto LABEL_6;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
    v4 = qword_1ECE84DB0;
    if (v5)
      goto LABEL_7;
    if (qword_1ECE84DB0)
      v5 = (WTF::StringImpl ***)(qword_1ECE84DB0 + 16 * *(unsigned int *)(qword_1ECE84DB0 - 4));
    else
LABEL_6:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
LABEL_7:
  if ((byte_1ECE84DB8 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
  if ((WTF::StringImpl ***)v4 != v5)
  {
    result = (WTF::StringImpl ***)v5[1];
    if (result)
      goto LABEL_12;
  }
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_45;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_45:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    result = (WTF::StringImpl ***)v8[1];
    if (result)
      goto LABEL_12;
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_25:
      v10 = 0;
      goto LABEL_26;
    }
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a1);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!v10)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_25;
      v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_26:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != v10)
  {
    result = (WTF::StringImpl ***)v10[1];
    if (result)
      goto LABEL_12;
  }
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_44;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_35;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_44:
      result = 0;
  }
  else
  {
    v11 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_35:
  {
    if (v11)
      v11 += 2 * *((unsigned int *)v11 - 1);
  }
  else
  {
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v11 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
LABEL_12:
      result = (WTF::StringImpl ***)((WTF::StringImpl ***(*)(uint64_t *__return_ptr))(*result)[8])(&v12);
      if (v13)
      {
        *(_QWORD *)a2 = v12;
        a2[8] = 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCursorElement,WebCore::SVGElement,WebCore::SVGTests,WebCore::SVGURIReference>::synchronizeAllAttributes@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl *v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl ***v47;
  WTF::StringImpl ***v48;
  uint64_t v49;
  WTF::StringImpl ***v50;
  WTF::StringImpl *v51;
  WTF::StringImpl ***v52;
  WTF::StringImpl **v53;
  int v54;
  WTF::StringImpl **v55;
  WTF *v57;
  void *v58;
  WTF::StringImpl ***v59;
  uint64_t v60;
  WTF::StringImpl ***v61;
  uint64_t v62;
  WTF::StringImpl ***v63;
  WTF::StringImpl *v64;
  char *v65;
  WTF::StringImpl **v66;
  uint64_t v67;
  int v68;
  WTF::StringImpl **v69;
  uint64_t v70;
  WTF *v72;
  void *v73;
  uint64_t v74;
  _BYTE v75[24];
  WTF::StringImpl *v76;
  char v77;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE84DB8 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE84DB0;
  if (!qword_1ECE84DB0)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE84DB0 - 4);
  v6 = qword_1ECE84DB0 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE84DB0 - 12))
  {
    v15 = qword_1ECE84DB0 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE84DB0;
    if (!qword_1ECE84DB0)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE84DB0;
    if (qword_1ECE84DB0)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84DB0 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE84DB0)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE84DB0 + v16;
    if (qword_1ECE84DB0)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8)
                                                                                                + 64))(&v76, *(_QWORD *)(v15 + 8), *(_QWORD *)(v2 + 8));
    if (v77)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v76, (uint64_t)v75);
      if (v77)
      {
        result = (uint64_t)v76;
        v76 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v38 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_176;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v38 = 0;
    v26 = 0;
LABEL_176:
    v27 = &v25[2 * v26];
    goto LABEL_80;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v38 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_176;
  }
  if ((_DWORD)v26)
  {
    v28 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v29 = 16 * v26;
      while (1)
      {
        if (v28)
        {
          v30 = (*(_DWORD *)v28)++;
          v31 = *v25;
          if (v30)
          {
            *(_DWORD *)v28 = v30;
            v32 = (uint64_t)v28;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
            result = WTF::fastFree(v34, v35);
            v32 = WebCore::nullName;
          }
        }
        else
        {
          v32 = 0;
          v31 = *v25;
        }
        if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
          break;
        v25 += 2;
        v28 = (WTF::StringImpl **)v32;
        v29 -= 16;
        if (!v29)
        {
          v25 = v27;
          break;
        }
      }
      v38 = v25;
      v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v36 = 0;
      v37 = 16 * v26;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v36)
                               + 1) <= 1)
      {
        v36 += 16;
        if (v37 == v36)
        {
          v38 = v27;
          goto LABEL_80;
        }
      }
      v38 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v36);
    }
  }
  else
  {
    v38 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_80:
  if (v25)
    v25 += 2 * *((unsigned int *)v25 - 1);
  while (v38 != v25)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v38[1] + 8))(&v76, v38[1], *(_QWORD *)(v2 + 8));
    if (v77)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v38, (WTF::StringImpl ***)&v76, (uint64_t)v75);
      if (v77)
      {
        result = (uint64_t)v76;
        v76 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v39);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v40 = v38 + 2;
    v38 = v27;
    if (v40 != v27)
    {
      v41 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_90:
        v42 = (*(_DWORD *)v41)++;
        v43 = *v40;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
          result = WTF::fastFree(v45, v46);
        }
        while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
        {
          v40 += 2;
          if (v40 == v27)
            goto LABEL_103;
          v41 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_90;
          v43 = *v40;
        }
      }
      else
      {
        while ((unint64_t)*v40 + 1 <= 1)
        {
          v40 += 2;
          if (v40 == v27)
          {
LABEL_103:
            v38 = v27;
            goto LABEL_105;
          }
        }
      }
      v38 = v40;
    }
LABEL_105:
    ;
  }
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_111;
  }
  v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v48 = 0;
    v49 = 0;
LABEL_111:
    v50 = &v47[2 * v49];
    goto LABEL_112;
  }
  v49 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v50 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v49);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v49);
    goto LABEL_111;
  }
  if ((_DWORD)v49)
  {
    v66 = (WTF::StringImpl **)WebCore::nullName;
    v67 = 16 * v49;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v66)
        {
          v68 = (*(_DWORD *)v66)++;
          v69 = *v47;
          if (v68)
          {
            *(_DWORD *)v66 = v68;
            v70 = (uint64_t)v66;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v66);
            result = WTF::fastFree(v72, v73);
            v70 = WebCore::nullName;
          }
        }
        else
        {
          v70 = 0;
          v69 = *v47;
        }
        if (v69 != v66 && (WTF::StringImpl **)((char *)*v47 + 1) != 0)
          break;
        v47 += 2;
        v66 = (WTF::StringImpl **)v70;
        v67 -= 16;
        if (!v67)
        {
          v47 = v50;
          break;
        }
      }
      v48 = v47;
      v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v74 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v74)
                               + 1) <= 1)
      {
        v74 += 16;
        if (v67 == v74)
        {
          v48 = v50;
          goto LABEL_112;
        }
      }
      v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v74);
    }
  }
  else
  {
    v48 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_112:
  if (v47)
    v47 += 2 * *((unsigned int *)v47 - 1);
  while (v48 != v47)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v48[1]
                       + 8))(&v76, v48[1], *(_QWORD *)(v2 + 8) + 176);
    if (v77)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v48, (WTF::StringImpl ***)&v76, (uint64_t)v75);
      if (v77)
      {
        result = (uint64_t)v76;
        v76 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v51);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v52 = v48 + 2;
    v48 = v50;
    if (v52 != v50)
    {
      v53 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_122:
        v54 = (*(_DWORD *)v53)++;
        v55 = *v52;
        if (v54)
        {
          *(_DWORD *)v53 = v54;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v53);
          result = WTF::fastFree(v57, v58);
        }
        while (v55 == v53 || (WTF::StringImpl **)((char *)*v52 + 1) == 0)
        {
          v52 += 2;
          if (v52 == v50)
            goto LABEL_135;
          v53 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_122;
          v55 = *v52;
        }
      }
      else
      {
        while ((unint64_t)*v52 + 1 <= 1)
        {
          v52 += 2;
          if (v52 == v50)
          {
LABEL_135:
            v48 = v50;
            goto LABEL_137;
          }
        }
      }
      v48 = v52;
    }
LABEL_137:
    ;
  }
  {
    v59 = 0;
    v63 = 0;
    v60 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_174;
  }
  v59 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v63 = 0;
    v60 = 0;
LABEL_174:
    v61 = &v59[2 * v60];
    goto LABEL_150;
  }
  v60 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v61 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v60);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v63 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v60);
    goto LABEL_174;
  }
  if ((_DWORD)v60)
  {
    v62 = 16 * v60;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v59);
      if ((result & 1) == 0 && *v59 != (WTF::StringImpl **)-1)
        break;
      v59 += 2;
      v62 -= 16;
      if (!v62)
      {
        v59 = v61;
        break;
      }
    }
    v63 = v59;
    v59 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v63 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_150:
  if (v59)
    v59 += 2 * *((unsigned int *)v59 - 1);
  while (v63 != v59)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v63[1]
                       + 8))(&v76, v63[1], *(_QWORD *)(v2 + 8) + 184);
    if (v77)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v63, (WTF::StringImpl ***)&v76, (uint64_t)v75);
      if (v77)
      {
        result = (uint64_t)v76;
        v76 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v64);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v65 = (char *)(v63 + 2);
    v63 = v61;
    if (v65 != (char *)v61)
    {
      v63 = (WTF::StringImpl ***)v65;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v63);
        if ((result & 1) == 0 && *v63 != (WTF::StringImpl **)-1)
          break;
        v63 += 2;
        if (v63 == v61)
        {
          v63 = v61;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCursorElement,WebCore::SVGElement,WebCore::SVGTests,WebCore::SVGURIReference>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;

  if ((byte_1ECE84DB8 & 1) != 0)
  {
    v3 = qword_1ECE84DB0;
    if (!qword_1ECE84DB0)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE84DB0;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE84DB0)
      v4 = (WTF::StringImpl ***)(qword_1ECE84DB0 + 16 * *(unsigned int *)(qword_1ECE84DB0 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
LABEL_7:
  if ((byte_1ECE84DB8 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    v5 = v4[1];
    if (v5)
      return (*((uint64_t (**)(WTF::StringImpl **))*v5 + 3))(v5);
  }
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_44;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_44:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    v5 = v8[1];
    if (v5)
      return (*((uint64_t (**)(WTF::StringImpl **))*v5 + 3))(v5);
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_24:
      v10 = 0;
      goto LABEL_25;
    }
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!v10)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_24;
      v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_25:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != v10)
  {
    v5 = v10[1];
    if (v5)
      return (*((uint64_t (**)(WTF::StringImpl **))*v5 + 3))(v5);
  }
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_43;
    v12 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v12)
      goto LABEL_34;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v12 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_43:
      v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_34:
  {
    if (v11)
      v11 += 2 * *((unsigned int *)v11 - 1);
  }
  else
  {
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v11 != v12)
  {
    v5 = v12[1];
    if (v5)
      return (*((uint64_t (**)(WTF::StringImpl **))*v5 + 3))(v5);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCursorElement,WebCore::SVGElement,WebCore::SVGTests,WebCore::SVGURIReference>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE84DC8 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE84DC0 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DC0, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DC0, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DC0, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DC0, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DC0, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DC0, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DC0, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DC0, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DC0, v22, (uint64_t)v13);
    byte_1ECE84DC8 = 1;
  }
  if ((byte_1ECE84DB8 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE84DB0;
  if (!qword_1ECE84DB0)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE84DB0;
  if (!v4)
  {
    if (qword_1ECE84DB0)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE84DB0 + 16 * *(unsigned int *)(qword_1ECE84DB0 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE84DB8 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE84DC0)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE84DC0 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE84DC0 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE84DC0 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCursorElement,WebCore::SVGElement,WebCore::SVGTests,WebCore::SVGURIReference>::createAnimator@<X0>(WebCore::QualifiedName::QualifiedNameImpl **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  uint64_t v12;

  *a2 = 0;
  if ((byte_1ECE84DB8 & 1) != 0)
  {
    v4 = qword_1ECE84DB0;
    if (!qword_1ECE84DB0)
      goto LABEL_6;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
    v4 = qword_1ECE84DB0;
    if (v5)
      goto LABEL_7;
    if (qword_1ECE84DB0)
      v5 = (WTF::StringImpl ***)(qword_1ECE84DB0 + 16 * *(unsigned int *)(qword_1ECE84DB0 - 4));
    else
LABEL_6:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
LABEL_7:
  if ((byte_1ECE84DB8 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
  if ((WTF::StringImpl ***)v4 != v5)
  {
    result = (WTF::StringImpl ***)v5[1];
    if (result)
      goto LABEL_12;
  }
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_44;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_44:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    result = (WTF::StringImpl ***)v8[1];
    if (result)
      goto LABEL_12;
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_24:
      v10 = 0;
      goto LABEL_25;
    }
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a1);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!v10)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_24;
      v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_25:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != v10)
  {
    result = (WTF::StringImpl ***)v10[1];
    if (result)
      goto LABEL_12;
  }
  {
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_43;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v11 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_34;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_43:
      result = 0;
  }
  else
  {
    v11 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_34:
  {
    if (v11)
      v11 += 2 * *((unsigned int *)v11 - 1);
  }
  else
  {
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v11 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
LABEL_12:
      result = (WTF::StringImpl ***)((WTF::StringImpl ***(*)(uint64_t *__return_ptr))(*result)[9])(&v12);
      *a2 = v12;
    }
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGCursorElement,WebCore::SVGElement,WebCore::SVGTests,WebCore::SVGURIReference>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***result;
  uint64_t v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl ***v14;

  if ((byte_1ECE84DB8 & 1) != 0)
  {
    v6 = qword_1ECE84DB0;
    if (!qword_1ECE84DB0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE84DB0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE84DB0)
      v7 = (WTF::StringImpl ***)(qword_1ECE84DB0 + 16 * *(unsigned int *)(qword_1ECE84DB0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
LABEL_7:
  if ((byte_1ECE84DB8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = (WTF::StringImpl ***)v7[1];
    if (result)
      goto LABEL_12;
  }
  {
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_45;
    v11 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v11)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_45:
      v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != v11)
  {
    result = (WTF::StringImpl ***)v11[1];
    if (result)
    {
LABEL_12:
      v9 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, uint64_t, uint64_t))(*result)[10])(result, v9, a3);
    }
  }
  {
    v12 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_25:
      v13 = 0;
      goto LABEL_26;
    }
    v13 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
    v12 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!v13)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_25;
      v13 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_26:
  {
    if (v12)
      v12 += 2 * *((unsigned int *)v12 - 1);
  }
  else
  {
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v12 != v13)
  {
    result = (WTF::StringImpl ***)v13[1];
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8) + 176;
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, uint64_t, uint64_t))(*result)[10])(result, v9, a3);
    }
  }
  {
    v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_44;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_35;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_44:
      result = 0;
  }
  else
  {
    v14 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_35:
  {
    if (v14)
      v14 += 2 * *((unsigned int *)v14 - 1);
  }
  else
  {
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v14 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, uint64_t, _QWORD))(*result)[10])(result, v9, a3);
    }
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE84DB0;
  if (!qword_1ECE84DB0)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE84DB0 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGCursorElement::SVGCursorElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  _BYTE v1[24];
  WebCore::QualifiedName::QualifiedNameImpl *v2;

  if ((byte_1ECE84DD0 & 1) == 0)
  {
    qword_1ECE84EA8 = (uint64_t)off_1E3455A68;
    unk_1ECE84EB0 = 200;
    byte_1ECE84DD0 = 1;
  }
  if ((byte_1ECE84DB8 & 1) == 0)
  {
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE84EA8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::xAttr, &v2);
  if ((byte_1ECE84DD8 & 1) == 0)
  {
    qword_1ECE84EB8 = (uint64_t)off_1E3455A68;
    unk_1ECE84EC0 = 208;
    byte_1ECE84DD8 = 1;
  }
  if ((byte_1ECE84DB8 & 1) == 0)
  {
    qword_1ECE84DB0 = 0;
    byte_1ECE84DB8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE84EB8;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::yAttr, &v2);
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v5;
  int v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  uint64_t result;
  int *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  int i;
  unsigned int v13;
  WebCore::QualifiedName::QualifiedNameImpl **v14;
  int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  int v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;

  v5 = qword_1ECE84DB0;
  if (qword_1ECE84DB0
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0), (v5 = qword_1ECE84DB0) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    v40 = *((_QWORD *)v7 + 3);
    v41 = *((_QWORD *)v7 + 4);
    v42 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v43 = v42 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v44 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v43 + (v42 >> 11)) << 16) ^ (v43 + (v42 >> 11));
    v45 = (v40 >> 5) & 0x7FFF800 ^ ((v44 + (unsigned __int16)v40 + (v44 >> 11)) << 16) ^ (v44 + (unsigned __int16)v40 + (v44 >> 11));
    v46 = (v40 >> 37) & 0x7FFF800 ^ ((v45 + WORD2(v40) + (v45 >> 11)) << 16) ^ (v45 + WORD2(v40) + (v45 >> 11));
    v47 = (v41 >> 5) & 0x7FFF800 ^ ((v46 + (unsigned __int16)v41 + (v46 >> 11)) << 16) ^ (v46 + (unsigned __int16)v41 + (v46 >> 11));
    v48 = (v41 >> 37) & 0x7FFF800 ^ ((v47 + WORD2(v41) + (v47 >> 11)) << 16) ^ (v47 + WORD2(v41) + (v47 >> 11));
    v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
    v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
    v51 = (v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10);
    if (v51)
      result = v51;
    else
      result = 0x800000;
  }
  else
  {
    result = *((unsigned int *)v7 + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v7 + 1) = result;
    }
  }
  v9 = &webThreadDelegateMessageScopeCount;
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v53 = a1;
    v11 = 0;
    for (i = 1; ; ++i)
    {
      v13 = result & v6;
      v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
      if (v10)
      {
        v15 = (*(_DWORD *)v10)++;
        v16 = *v14;
        if (v15)
        {
          *(_DWORD *)v10 = v15;
          v17 = v10;
        }
        else
        {
          v20 = v9;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = WTF::fastFree(v21, v22);
          v9 = v20;
          v17 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v17 = 0;
        v16 = *v14;
      }
      if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)v10)
        break;
      v18 = *v14;
      if (*v14 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v13);
      }
      else
      {
        v19 = *a2;
        if (v18 == *a2 || *((_QWORD *)v18 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v18 + 4) == *((_QWORD *)v19 + 4))
          goto LABEL_42;
      }
      result = i + v13;
      v10 = v17;
    }
LABEL_31:
    a1 = v53;
    if (v11)
    {
      v27 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v9 + 254);
      if (v27)
        ++*(_DWORD *)v27;
      *v11 = v27;
      v11[1] = 0;
      --*(_DWORD *)(qword_1ECE84DB0 - 16);
      v14 = v11;
    }
LABEL_35:
    v28 = *a2;
    if (*a2)
      ++*(_DWORD *)v28;
    result = (uint64_t)*v14;
    *v14 = v28;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v14[1] = *a3;
    if (qword_1ECE84DB0)
      v29 = *(_DWORD *)(qword_1ECE84DB0 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(qword_1ECE84DB0 - 12) = v29;
    v33 = qword_1ECE84DB0;
    if (qword_1ECE84DB0)
      v34 = *(_DWORD *)(qword_1ECE84DB0 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(qword_1ECE84DB0 - 16) + v34);
    v36 = *(unsigned int *)(qword_1ECE84DB0 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_53;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_56:
        result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v37, v14);
        v14 = (WebCore::QualifiedName::QualifiedNameImpl **)result;
        v33 = qword_1ECE84DB0;
        if (qword_1ECE84DB0)
          v36 = *(unsigned int *)(qword_1ECE84DB0 - 4);
        else
          v36 = 0;
        goto LABEL_60;
      }
LABEL_53:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(qword_1ECE84DB0 - 12) >= (2 * v36));
      goto LABEL_56;
    }
LABEL_60:
    v32 = v33 + 16 * v36;
    v31 = 1;
    goto LABEL_61;
  }
  v23 = result & v6;
  v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
  v24 = *v14;
  if (!*v14)
    goto LABEL_35;
  v53 = a1;
  v11 = 0;
  v25 = *a2;
  v26 = 1;
  while (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
  {
    v11 = v14;
LABEL_30:
    v23 = (v23 + v26) & v6;
    v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v23);
    v24 = *v14;
    ++v26;
    if (!*v14)
      goto LABEL_31;
  }
  if (v24 != v25 && (*((_QWORD *)v24 + 3) != *((_QWORD *)v25 + 3) || *((_QWORD *)v24 + 4) != *((_QWORD *)v25 + 4)))
    goto LABEL_30;
LABEL_42:
  if (qword_1ECE84DB0)
    v30 = *(unsigned int *)(qword_1ECE84DB0 - 4);
  else
    v30 = 0;
  a1 = v53;
  v31 = 0;
  v32 = qword_1ECE84DB0 + 16 * v30;
LABEL_61:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCursorElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  char *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***result;
  uint64_t v49;
  WTF::StringImpl ***v51;

  v3 = &InitWebCoreThreadSystemInterface::didInit;
  v4 = qword_1ECE84DB0;
  if (qword_1ECE84DB0)
  {
    v5 = *(_DWORD *)(qword_1ECE84DB0 - 4);
    v6 = *(_DWORD *)(qword_1ECE84DB0 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = v7 + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE84DB0 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE84DB0 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v49 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        goto LABEL_53;
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = *((_QWORD *)v3 + 438);
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v51 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v51;
        v15 = v49;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &InitWebCoreThreadSystemInterface::didInit;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &InitWebCoreThreadSystemInterface::didInit;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v51;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v49;
    goto LABEL_40;
  }
  v14 = 0;
  result = 0;
  if (v4)
  {
LABEL_53:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v14;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGCursorElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGCursorElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedLengthAccessor<WebCore::SVGCursorElement>::isAnimatedLength()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGCursorElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGCursorElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGCursorElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGCursorElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedLengthAccessor<WebCore::SVGCursorElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + v15) + 40) + 33);
  v17 = WTF::fastMalloc((WTF *)0x68);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = a3;
  *(_QWORD *)v17 = off_1E3456BF8;
  v18 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v18 + 8);
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = 0;
  *(_BYTE *)(v17 + 64) = a4;
  *(_BYTE *)(v17 + 65) = a5;
  *(_BYTE *)(v17 + 66) = a6;
  *(_BYTE *)(v17 + 67) = a7;
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 56) = off_1E3456CB0;
  v20 = 0;
  WebCore::SVGLengthValue::SVGLengthValue(v17 + 68, 2, &v20);
  v20 = 0;
  result = WebCore::SVGLengthValue::SVGLengthValue(v17 + 76, 2, &v20);
  *(_BYTE *)(v17 + 84) = 0;
  *(_BYTE *)(v17 + 92) = 0;
  *(_QWORD *)(v17 + 56) = &off_1E3456C60;
  *(_BYTE *)(v17 + 96) = v16;
  *(_QWORD *)v17 = off_1E3456B90;
  *a8 = v17;
  return result;
}

_QWORD *WebCore::SVGAnimatedLengthAccessor<WebCore::SVGCursorElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGDefsElement,WebCore::SVGGraphicsElement>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl **v37;
  int v38;
  WTF::StringImpl **v39;
  WTF *v41;
  void *v42;
  WTF::StringImpl ***v43;
  WTF::StringImpl ***v44;
  uint64_t v45;
  WTF::StringImpl ***v46;
  WTF::StringImpl ***v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  int v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  WTF *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl ***v58[2];

  v1 = result;
  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  {
    v2 = 0;
    v14 = 0;
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_107;
  }
  v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v14 = 0;
    v3 = 0;
LABEL_107:
    v4 = &v2[2 * v3];
    goto LABEL_24;
  }
  v3 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v3);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v14 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v3);
    goto LABEL_107;
  }
  if ((_DWORD)v3)
  {
    v5 = (WTF::StringImpl **)WebCore::nullName;
    v6 = 16 * v3;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v5)
        {
          v7 = (*(_DWORD *)v5)++;
          v8 = *v2;
          if (v7)
          {
            *(_DWORD *)v5 = v7;
            v9 = (uint64_t)v5;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
            result = WTF::fastFree(v11, v12);
            v9 = WebCore::nullName;
          }
        }
        else
        {
          v9 = 0;
          v8 = *v2;
        }
        if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
          break;
        v2 += 2;
        v5 = (WTF::StringImpl **)v9;
        v6 -= 16;
        if (!v6)
        {
          v2 = v4;
          break;
        }
      }
      v14 = v2;
      v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v13 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v13)
                               + 1) <= 1)
      {
        v13 += 16;
        if (v6 == v13)
        {
          v14 = v4;
          goto LABEL_24;
        }
      }
      v14 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v13);
    }
  }
  else
  {
    v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_24:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  while (v14 != v2)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v14[1] + 2))(v14[1], *(_QWORD *)(v1 + 8));
    v15 = v14 + 2;
    v14 = v4;
    if (v15 != v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v16)
          {
            v17 = (*(_DWORD *)v16)++;
            v18 = *v15;
            if (v17)
            {
              *(_DWORD *)v16 = v17;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
              result = WTF::fastFree(v20, v21);
            }
          }
          else
          {
            v18 = *v15;
          }
          if (v18 != v16 && (WTF::StringImpl **)((char *)*v15 + 1) != 0)
            break;
          v15 += 2;
          if (v15 == v4)
            goto LABEL_42;
          v16 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == v4)
          {
LABEL_42:
            v14 = v4;
            goto LABEL_44;
          }
        }
      }
      v14 = v15;
    }
LABEL_44:
    ;
  }
  {
    v22 = 0;
    v35 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_109;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v35 = 0;
    v23 = 0;
LABEL_109:
    v24 = &v22[2 * v23];
    goto LABEL_67;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_109;
  }
  if ((_DWORD)v23)
  {
    v25 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v26 = 16 * v23;
      while (1)
      {
        if (v25)
        {
          v27 = (*(_DWORD *)v25)++;
          v28 = *v22;
          if (v27)
          {
            *(_DWORD *)v25 = v27;
            v29 = (uint64_t)v25;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
            result = WTF::fastFree(v31, v32);
            v29 = WebCore::nullName;
          }
        }
        else
        {
          v29 = 0;
          v28 = *v22;
        }
        if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
          break;
        v22 += 2;
        v25 = (WTF::StringImpl **)v29;
        v26 -= 16;
        if (!v26)
        {
          v22 = v24;
          break;
        }
      }
      v35 = v22;
      v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v33 = 0;
      v34 = 16 * v23;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v33)
                               + 1) <= 1)
      {
        v33 += 16;
        if (v34 == v33)
        {
          v35 = v24;
          goto LABEL_67;
        }
      }
      v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v33);
    }
  }
  else
  {
    v35 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_67:
  if (v22)
    v22 += 2 * *((unsigned int *)v22 - 1);
  while (v35 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v35[1] + 2))(v35[1], *(_QWORD *)(v1 + 8));
    v36 = v35 + 2;
    v35 = v24;
    if (v36 != v24)
    {
      v37 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v37)
          {
            v38 = (*(_DWORD *)v37)++;
            v39 = *v36;
            if (v38)
            {
              *(_DWORD *)v37 = v38;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
              result = WTF::fastFree(v41, v42);
            }
          }
          else
          {
            v39 = *v36;
          }
          if (v39 != v37 && (WTF::StringImpl **)((char *)*v36 + 1) != 0)
            break;
          v36 += 2;
          if (v36 == v24)
            goto LABEL_85;
          v37 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v36 + 1 <= 1)
        {
          v36 += 2;
          if (v36 == v24)
          {
LABEL_85:
            v35 = v24;
            goto LABEL_87;
          }
        }
      }
      v35 = v36;
    }
LABEL_87:
    ;
  }
  {
    v43 = 0;
    v44 = 0;
    v45 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_91;
  }
  v43 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v44 = 0;
    v45 = 0;
LABEL_91:
    v46 = &v43[2 * v45];
    goto LABEL_92;
  }
  v45 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v46 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v45);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v45);
    goto LABEL_91;
  }
  if ((_DWORD)v45)
  {
    v48 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v49 = 16 * v45;
      while (1)
      {
        if (v48)
        {
          v50 = (*(_DWORD *)v48)++;
          v51 = *v43;
          if (v50)
          {
            *(_DWORD *)v48 = v50;
            v52 = (uint64_t)v48;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v48);
            result = WTF::fastFree(v54, v55);
            v52 = WebCore::nullName;
          }
        }
        else
        {
          v52 = 0;
          v51 = *v43;
        }
        if (v51 != v48 && (WTF::StringImpl **)((char *)*v43 + 1) != 0)
          break;
        v43 += 2;
        v48 = (WTF::StringImpl **)v52;
        v49 -= 16;
        if (!v49)
        {
          v43 = v46;
          break;
        }
      }
      v44 = v43;
      v43 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v56 = 0;
      v57 = 16 * v45;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v56)
                               + 1) <= 1)
      {
        v56 += 16;
        if (v57 == v56)
        {
          v44 = v46;
          goto LABEL_92;
        }
      }
      v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v56);
    }
  }
  else
  {
    v44 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_92:
  v58[0] = v44;
  v58[1] = v46;
  if (v43)
    v47 = &v43[2 * *((unsigned int *)v43 - 1)];
  else
    v47 = 0;
  if (v47 != v44)
  {
    do
    {
      (*((void (**)(WTF::StringImpl **, uint64_t))*v44[1] + 2))(v44[1], *(_QWORD *)(v1 + 8) + 184);
      result = (uint64_t)WTF::HashTableIteratorAdapter<WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>::operator++(v58);
      v44 = v58[0];
    }
    while (v58[0] != v47);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGDefsElement,WebCore::SVGGraphicsElement>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl **v4;
  uint64_t v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  WTF *v26;
  void *v27;
  WTF::StringImpl ***v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF *v37;
  void *v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl ***v47;
  uint64_t v48;
  WTF::StringImpl ***v49;
  WTF::StringImpl ***v50;
  WTF::StringImpl **v51;
  int v52;
  WTF::StringImpl **v53;
  WTF *v55;
  void *v56;
  WTF::StringImpl **v57;
  WTF *v58;
  void *v59;
  WTF::StringImpl **v60;
  uint64_t v61;
  int v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  WTF *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;

  v4 = result;
  v6 = WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  {
    v7 = 0;
    v20 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_133;
  }
  v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v20 = 0;
    v8 = 0;
LABEL_133:
    v9 = &v7[2 * v8];
    goto LABEL_28;
  }
  v8 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v8);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v8);
    goto LABEL_133;
  }
  if ((_DWORD)v8)
  {
    v10 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v11 = 16 * v8;
      while (1)
      {
        if (v10)
        {
          v12 = (*(_DWORD *)v10)++;
          v13 = *v7;
          if (v12)
          {
            *(_DWORD *)v10 = v12;
            v14 = (uint64_t)v10;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
            result = (WTF::StringImpl **)WTF::fastFree(v16, v17);
            v14 = WebCore::nullName;
          }
        }
        else
        {
          v14 = 0;
          v13 = *v7;
        }
        if (v13 != v10 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
          break;
        v7 += 2;
        v10 = (WTF::StringImpl **)v14;
        v11 -= 16;
        if (!v11)
        {
          v7 = v9;
          break;
        }
      }
      v20 = v7;
      v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v18 = 0;
      v19 = 16 * v8;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v18)
                               + 1) <= 1)
      {
        v18 += 16;
        if (v19 == v18)
        {
          v20 = v9;
          goto LABEL_28;
        }
      }
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v18);
    }
  }
  else
  {
    v20 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_28:
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  while (v20 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v20[1] + 5))(v20[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_122;
    v21 = v20 + 2;
    v20 = v9;
    if (v21 != v9)
    {
      v22 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v23 = (*(_DWORD *)v22)++;
        v24 = *v21;
        if (v23)
        {
          *(_DWORD *)v22 = v23;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          result = (WTF::StringImpl **)WTF::fastFree(v26, v27);
        }
        while (v24 == v22 || (WTF::StringImpl **)((char *)*v21 + 1) == 0)
        {
          v21 += 2;
          if (v21 == v9)
            goto LABEL_47;
          v22 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v24 = *v21;
        }
      }
      else
      {
        while ((unint64_t)*v21 + 1 <= 1)
        {
          v21 += 2;
          if (v21 == v9)
          {
LABEL_47:
            v20 = v9;
            goto LABEL_49;
          }
        }
      }
      v20 = v21;
    }
LABEL_49:
    ;
  }
  {
    v28 = 0;
    v20 = 0;
    v29 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_135;
  }
  v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v20 = 0;
    v29 = 0;
LABEL_135:
    v30 = &v28[2 * v29];
    goto LABEL_73;
  }
  v29 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v30 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v29);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v29);
    goto LABEL_135;
  }
  if ((_DWORD)v29)
  {
    v31 = (WTF::StringImpl **)WebCore::nullName;
    v32 = 16 * v29;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v31)
        {
          v33 = (*(_DWORD *)v31)++;
          v34 = *v28;
          if (v33)
          {
            *(_DWORD *)v31 = v33;
            v35 = (uint64_t)v31;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v31);
            result = (WTF::StringImpl **)WTF::fastFree(v37, v38);
            v35 = WebCore::nullName;
          }
        }
        else
        {
          v35 = 0;
          v34 = *v28;
        }
        if (v34 != v31 && (WTF::StringImpl **)((char *)*v28 + 1) != 0)
          break;
        v28 += 2;
        v31 = (WTF::StringImpl **)v35;
        v32 -= 16;
        if (!v32)
        {
          v28 = v30;
          break;
        }
      }
      v20 = v28;
      v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v39 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v39)
                               + 1) <= 1)
      {
        v39 += 16;
        if (v32 == v39)
        {
          v20 = v30;
          goto LABEL_73;
        }
      }
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v39);
    }
  }
  else
  {
    v20 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_73:
  if (v28)
    v28 += 2 * *((unsigned int *)v28 - 1);
  while (v20 != v28)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v20[1] + 5))(v20[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_122;
    v40 = v20 + 2;
    v20 = v30;
    if (v40 != v30)
    {
      v41 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_79:
        v42 = (*(_DWORD *)v41)++;
        v43 = *v40;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
          result = (WTF::StringImpl **)WTF::fastFree(v45, v46);
        }
        while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
        {
          v40 += 2;
          if (v40 == v30)
            goto LABEL_92;
          v41 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_79;
          v43 = *v40;
        }
      }
      else
      {
        while ((unint64_t)*v40 + 1 <= 1)
        {
          v40 += 2;
          if (v40 == v30)
          {
LABEL_92:
            v20 = v30;
            goto LABEL_94;
          }
        }
      }
      v20 = v40;
    }
LABEL_94:
    ;
  }
  {
    v47 = 0;
    v20 = 0;
    v48 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_98;
  }
  v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v20 = 0;
    v48 = 0;
LABEL_98:
    v49 = &v47[2 * v48];
    goto LABEL_99;
  }
  v48 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v49 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v48);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v48);
    goto LABEL_98;
  }
  if ((_DWORD)v48)
  {
    v60 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v61 = 16 * v48;
      while (1)
      {
        if (v60)
        {
          v62 = (*(_DWORD *)v60)++;
          v63 = *v47;
          if (v62)
          {
            *(_DWORD *)v60 = v62;
            v64 = (uint64_t)v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v60);
            result = (WTF::StringImpl **)WTF::fastFree(v66, v67);
            v64 = WebCore::nullName;
          }
        }
        else
        {
          v64 = 0;
          v63 = *v47;
        }
        if (v63 != v60 && (WTF::StringImpl **)((char *)*v47 + 1) != 0)
          break;
        v47 += 2;
        v60 = (WTF::StringImpl **)v64;
        v61 -= 16;
        if (!v61)
        {
          v47 = v49;
          break;
        }
      }
      v20 = v47;
      v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v68 = 0;
      v69 = 16 * v48;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v68)
                               + 1) <= 1)
      {
        v68 += 16;
        if (v69 == v68)
        {
          v20 = v49;
          goto LABEL_99;
        }
      }
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v68);
    }
  }
  else
  {
    v20 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_99:
  if (v47)
    v47 += 2 * *((unsigned int *)v47 - 1);
  if (v47 != v20)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v20[1] + 5))(v20[1], (uint64_t)v4[1] + 184, a2);
      if ((_DWORD)result)
        break;
      v50 = v20 + 2;
      v20 = v49;
      if (v50 != v49)
      {
        v51 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_105:
          v52 = (*(_DWORD *)v51)++;
          v53 = *v50;
          if (v52)
          {
            *(_DWORD *)v51 = v52;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v51);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
          }
          while (v53 == v51 || (WTF::StringImpl **)((char *)*v50 + 1) == 0)
          {
            v50 += 2;
            if (v50 == v49)
              goto LABEL_118;
            v51 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_105;
            v53 = *v50;
          }
        }
        else
        {
          while ((unint64_t)*v50 + 1 <= 1)
          {
            v50 += 2;
            if (v50 == v49)
            {
LABEL_118:
              v20 = v49;
              goto LABEL_120;
            }
          }
        }
        v20 = v50;
      }
LABEL_120:
      if (v20 == v47)
        return result;
    }
LABEL_122:
    v57 = *v20;
    if (*v20)
      ++*(_DWORD *)v57;
    result = (WTF::StringImpl **)*a3;
    *a3 = (uint64_t)v57;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v58, v59);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGDefsElement,WebCore::SVGGraphicsElement>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl **v4;
  uint64_t v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  WTF *v26;
  void *v27;
  WTF::StringImpl ***v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF *v37;
  void *v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl ***v47;
  uint64_t v48;
  WTF::StringImpl ***v49;
  WTF::StringImpl ***v50;
  WTF::StringImpl **v51;
  int v52;
  WTF::StringImpl **v53;
  WTF *v55;
  void *v56;
  WTF::StringImpl **v57;
  WTF *v58;
  void *v59;
  WTF::StringImpl **v60;
  uint64_t v61;
  int v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  WTF *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;

  v4 = result;
  v6 = WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  {
    v7 = 0;
    v20 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_133;
  }
  v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v20 = 0;
    v8 = 0;
LABEL_133:
    v9 = &v7[2 * v8];
    goto LABEL_28;
  }
  v8 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v8);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v8);
    goto LABEL_133;
  }
  if ((_DWORD)v8)
  {
    v10 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v11 = 16 * v8;
      while (1)
      {
        if (v10)
        {
          v12 = (*(_DWORD *)v10)++;
          v13 = *v7;
          if (v12)
          {
            *(_DWORD *)v10 = v12;
            v14 = (uint64_t)v10;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
            result = (WTF::StringImpl **)WTF::fastFree(v16, v17);
            v14 = WebCore::nullName;
          }
        }
        else
        {
          v14 = 0;
          v13 = *v7;
        }
        if (v13 != v10 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
          break;
        v7 += 2;
        v10 = (WTF::StringImpl **)v14;
        v11 -= 16;
        if (!v11)
        {
          v7 = v9;
          break;
        }
      }
      v20 = v7;
      v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v18 = 0;
      v19 = 16 * v8;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v18)
                               + 1) <= 1)
      {
        v18 += 16;
        if (v19 == v18)
        {
          v20 = v9;
          goto LABEL_28;
        }
      }
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v18);
    }
  }
  else
  {
    v20 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_28:
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  while (v20 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v20[1] + 6))(v20[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_122;
    v21 = v20 + 2;
    v20 = v9;
    if (v21 != v9)
    {
      v22 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v23 = (*(_DWORD *)v22)++;
        v24 = *v21;
        if (v23)
        {
          *(_DWORD *)v22 = v23;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          result = (WTF::StringImpl **)WTF::fastFree(v26, v27);
        }
        while (v24 == v22 || (WTF::StringImpl **)((char *)*v21 + 1) == 0)
        {
          v21 += 2;
          if (v21 == v9)
            goto LABEL_47;
          v22 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v24 = *v21;
        }
      }
      else
      {
        while ((unint64_t)*v21 + 1 <= 1)
        {
          v21 += 2;
          if (v21 == v9)
          {
LABEL_47:
            v20 = v9;
            goto LABEL_49;
          }
        }
      }
      v20 = v21;
    }
LABEL_49:
    ;
  }
  {
    v28 = 0;
    v20 = 0;
    v29 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_135;
  }
  v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v20 = 0;
    v29 = 0;
LABEL_135:
    v30 = &v28[2 * v29];
    goto LABEL_73;
  }
  v29 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v30 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v29);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v29);
    goto LABEL_135;
  }
  if ((_DWORD)v29)
  {
    v31 = (WTF::StringImpl **)WebCore::nullName;
    v32 = 16 * v29;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v31)
        {
          v33 = (*(_DWORD *)v31)++;
          v34 = *v28;
          if (v33)
          {
            *(_DWORD *)v31 = v33;
            v35 = (uint64_t)v31;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v31);
            result = (WTF::StringImpl **)WTF::fastFree(v37, v38);
            v35 = WebCore::nullName;
          }
        }
        else
        {
          v35 = 0;
          v34 = *v28;
        }
        if (v34 != v31 && (WTF::StringImpl **)((char *)*v28 + 1) != 0)
          break;
        v28 += 2;
        v31 = (WTF::StringImpl **)v35;
        v32 -= 16;
        if (!v32)
        {
          v28 = v30;
          break;
        }
      }
      v20 = v28;
      v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v39 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v39)
                               + 1) <= 1)
      {
        v39 += 16;
        if (v32 == v39)
        {
          v20 = v30;
          goto LABEL_73;
        }
      }
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v39);
    }
  }
  else
  {
    v20 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_73:
  if (v28)
    v28 += 2 * *((unsigned int *)v28 - 1);
  while (v20 != v28)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v20[1] + 6))(v20[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_122;
    v40 = v20 + 2;
    v20 = v30;
    if (v40 != v30)
    {
      v41 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_79:
        v42 = (*(_DWORD *)v41)++;
        v43 = *v40;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
          result = (WTF::StringImpl **)WTF::fastFree(v45, v46);
        }
        while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
        {
          v40 += 2;
          if (v40 == v30)
            goto LABEL_92;
          v41 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_79;
          v43 = *v40;
        }
      }
      else
      {
        while ((unint64_t)*v40 + 1 <= 1)
        {
          v40 += 2;
          if (v40 == v30)
          {
LABEL_92:
            v20 = v30;
            goto LABEL_94;
          }
        }
      }
      v20 = v40;
    }
LABEL_94:
    ;
  }
  {
    v47 = 0;
    v20 = 0;
    v48 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_98;
  }
  v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v20 = 0;
    v48 = 0;
LABEL_98:
    v49 = &v47[2 * v48];
    goto LABEL_99;
  }
  v48 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v49 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v48);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v48);
    goto LABEL_98;
  }
  if ((_DWORD)v48)
  {
    v60 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v61 = 16 * v48;
      while (1)
      {
        if (v60)
        {
          v62 = (*(_DWORD *)v60)++;
          v63 = *v47;
          if (v62)
          {
            *(_DWORD *)v60 = v62;
            v64 = (uint64_t)v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v60);
            result = (WTF::StringImpl **)WTF::fastFree(v66, v67);
            v64 = WebCore::nullName;
          }
        }
        else
        {
          v64 = 0;
          v63 = *v47;
        }
        if (v63 != v60 && (WTF::StringImpl **)((char *)*v47 + 1) != 0)
          break;
        v47 += 2;
        v60 = (WTF::StringImpl **)v64;
        v61 -= 16;
        if (!v61)
        {
          v47 = v49;
          break;
        }
      }
      v20 = v47;
      v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v68 = 0;
      v69 = 16 * v48;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v68)
                               + 1) <= 1)
      {
        v68 += 16;
        if (v69 == v68)
        {
          v20 = v49;
          goto LABEL_99;
        }
      }
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v68);
    }
  }
  else
  {
    v20 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_99:
  if (v47)
    v47 += 2 * *((unsigned int *)v47 - 1);
  if (v47 != v20)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v20[1] + 6))(v20[1], (uint64_t)v4[1] + 184, a2);
      if ((_DWORD)result)
        break;
      v50 = v20 + 2;
      v20 = v49;
      if (v50 != v49)
      {
        v51 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_105:
          v52 = (*(_DWORD *)v51)++;
          v53 = *v50;
          if (v52)
          {
            *(_DWORD *)v51 = v52;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v51);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
          }
          while (v53 == v51 || (WTF::StringImpl **)((char *)*v50 + 1) == 0)
          {
            v50 += 2;
            if (v50 == v49)
              goto LABEL_118;
            v51 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_105;
            v53 = *v50;
          }
        }
        else
        {
          while ((unint64_t)*v50 + 1 <= 1)
          {
            v50 += 2;
            if (v50 == v49)
            {
LABEL_118:
              v20 = v49;
              goto LABEL_120;
            }
          }
        }
        v20 = v50;
      }
LABEL_120:
      if (v20 == v47)
        return result;
    }
LABEL_122:
    v57 = *v20;
    if (*v20)
      ++*(_DWORD *)v57;
    result = (WTF::StringImpl **)*a3;
    *a3 = (uint64_t)v57;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v58, v59);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGDefsElement,WebCore::SVGGraphicsElement>::setAnimatedPropertyDirty(uint64_t a1, WTF::StringImpl ***a2, uint64_t a3)
{
  WTF::StringImpl **result;
  uint64_t v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;

  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor(a2);
  if (result)
    goto LABEL_6;
  {
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    v9 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v9)
      goto LABEL_13;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_27:
      v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_13:
  {
    if (v8)
      v8 += 2 * *((unsigned int *)v8 - 1);
  }
  else
  {
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v8 != v9)
  {
    result = v9[1];
    if (result)
    {
LABEL_6:
      v7 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v7, a3);
    }
  }
  {
    v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
      v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      + 16
                                      * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        - 1));
        else
          result = 0;
      }
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v7 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v7, a3);
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGDefsElement,WebCore::SVGGraphicsElement>::synchronize@<X0>(WTF::StringImpl ***a1@<X1>, _BYTE *a2@<X8>)
{
  WTF::StringImpl **result;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  char v9;

  *a2 = 0;
  a2[8] = 0;
  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor(a1);
  if (result)
    goto LABEL_6;
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a1);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_13;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_27:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_13:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    result = v6[1];
    if (result)
      goto LABEL_6;
  }
  {
    v7 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a1);
      v7 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      + 16
                                      * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        - 1));
        else
          result = 0;
      }
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_6:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 8))(&v8);
      if (v9)
      {
        *(_QWORD *)a2 = v8;
        a2[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGDefsElement,WebCore::SVGGraphicsElement>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WTF::StringImpl ***v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl *v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl ***v47;
  WTF::StringImpl ***v48;
  uint64_t v49;
  WTF::StringImpl ***v50;
  WTF::StringImpl *v51;
  WTF::StringImpl ***v52;
  WTF::StringImpl **v53;
  int v54;
  WTF::StringImpl **v55;
  WTF *v57;
  void *v58;
  WTF::StringImpl **v59;
  uint64_t v60;
  int v61;
  WTF::StringImpl **v62;
  uint64_t v63;
  WTF *v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[24];
  WTF::StringImpl *v69;
  char v70;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  {
    v4 = 0;
    v16 = 0;
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_142;
  }
  v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v16 = 0;
    v5 = 0;
LABEL_142:
    v6 = &v4[2 * v5];
    goto LABEL_25;
  }
  v5 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v5);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v16 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v5);
    goto LABEL_142;
  }
  if ((_DWORD)v5)
  {
    v7 = (WTF::StringImpl **)WebCore::nullName;
    v8 = 16 * v5;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v7)
        {
          v9 = (*(_DWORD *)v7)++;
          v10 = *v4;
          if (v9)
          {
            *(_DWORD *)v7 = v9;
            v11 = (uint64_t)v7;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
            result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
            v11 = WebCore::nullName;
          }
        }
        else
        {
          v11 = 0;
          v10 = *v4;
        }
        if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
          break;
        v4 += 2;
        v7 = (WTF::StringImpl **)v11;
        v8 -= 16;
        if (!v8)
        {
          v4 = v6;
          break;
        }
      }
      v16 = v4;
      v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v15 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v15)
                               + 1) <= 1)
      {
        v15 += 16;
        if (v8 == v15)
        {
          v16 = v6;
          goto LABEL_25;
        }
      }
      v16 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v15);
    }
  }
  else
  {
    v16 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_25:
  if (v4)
    v4 += 2 * *((unsigned int *)v4 - 1);
  while (v16 != v4)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v16[1]
                                 + 8))(&v69, v16[1], *((_QWORD *)v2 + 1));
    if (v70)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v16, (WTF::StringImpl ***)&v69, (uint64_t)v68);
      if (v70)
      {
        result = v69;
        v69 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = v16 + 2;
    v16 = v6;
    if (v18 != v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_35:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == v6)
            goto LABEL_48;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_35;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == v6)
          {
LABEL_48:
            v16 = v6;
            goto LABEL_50;
          }
        }
      }
      v16 = v18;
    }
LABEL_50:
    ;
  }
  {
    v25 = 0;
    v38 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_144;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v38 = 0;
    v26 = 0;
LABEL_144:
    v27 = &v25[2 * v26];
    goto LABEL_76;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v38 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_144;
  }
  if ((_DWORD)v26)
  {
    v28 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v29 = 16 * v26;
      while (1)
      {
        if (v28)
        {
          v30 = (*(_DWORD *)v28)++;
          v31 = *v25;
          if (v30)
          {
            *(_DWORD *)v28 = v30;
            v32 = (uint64_t)v28;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
            result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
            v32 = WebCore::nullName;
          }
        }
        else
        {
          v32 = 0;
          v31 = *v25;
        }
        if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
          break;
        v25 += 2;
        v28 = (WTF::StringImpl **)v32;
        v29 -= 16;
        if (!v29)
        {
          v25 = v27;
          break;
        }
      }
      v38 = v25;
      v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v36 = 0;
      v37 = 16 * v26;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v36)
                               + 1) <= 1)
      {
        v36 += 16;
        if (v37 == v36)
        {
          v38 = v27;
          goto LABEL_76;
        }
      }
      v38 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v36);
    }
  }
  else
  {
    v38 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_76:
  if (v25)
    v25 += 2 * *((unsigned int *)v25 - 1);
  while (v38 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v38[1]
                                 + 8))(&v69, v38[1], *((_QWORD *)v2 + 1));
    if (v70)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v38, (WTF::StringImpl ***)&v69, (uint64_t)v68);
      if (v70)
      {
        result = v69;
        v69 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v39);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v40 = v38 + 2;
    v38 = v27;
    if (v40 != v27)
    {
      v41 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_86:
        v42 = (*(_DWORD *)v41)++;
        v43 = *v40;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
          result = (WTF::StringImpl *)WTF::fastFree(v45, v46);
        }
        while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
        {
          v40 += 2;
          if (v40 == v27)
            goto LABEL_99;
          v41 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_86;
          v43 = *v40;
        }
      }
      else
      {
        while ((unint64_t)*v40 + 1 <= 1)
        {
          v40 += 2;
          if (v40 == v27)
          {
LABEL_99:
            v38 = v27;
            goto LABEL_101;
          }
        }
      }
      v38 = v40;
    }
LABEL_101:
    ;
  }
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_107;
  }
  v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v48 = 0;
    v49 = 0;
LABEL_107:
    v50 = &v47[2 * v49];
    goto LABEL_108;
  }
  v49 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v50 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v49);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v49);
    goto LABEL_107;
  }
  if ((_DWORD)v49)
  {
    v59 = (WTF::StringImpl **)WebCore::nullName;
    v60 = 16 * v49;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v59)
        {
          v61 = (*(_DWORD *)v59)++;
          v62 = *v47;
          if (v61)
          {
            *(_DWORD *)v59 = v61;
            v63 = (uint64_t)v59;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
            v63 = WebCore::nullName;
          }
        }
        else
        {
          v63 = 0;
          v62 = *v47;
        }
        if (v62 != v59 && (WTF::StringImpl **)((char *)*v47 + 1) != 0)
          break;
        v47 += 2;
        v59 = (WTF::StringImpl **)v63;
        v60 -= 16;
        if (!v60)
        {
          v47 = v50;
          break;
        }
      }
      v48 = v47;
      v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v67 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v67)
                               + 1) <= 1)
      {
        v67 += 16;
        if (v60 == v67)
        {
          v48 = v50;
          goto LABEL_108;
        }
      }
      v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v67);
    }
  }
  else
  {
    v48 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_108:
  if (v47)
    v47 += 2 * *((unsigned int *)v47 - 1);
  while (v48 != v47)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v48[1]
                                 + 8))(&v69, v48[1], *((_QWORD *)v2 + 1) + 184);
    if (v70)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v48, (WTF::StringImpl ***)&v69, (uint64_t)v68);
      if (v70)
      {
        result = v69;
        v69 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v51);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v52 = v48 + 2;
    v48 = v50;
    if (v52 != v50)
    {
      v53 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_118:
        v54 = (*(_DWORD *)v53)++;
        v55 = *v52;
        if (v54)
        {
          *(_DWORD *)v53 = v54;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v53);
          result = (WTF::StringImpl *)WTF::fastFree(v57, v58);
        }
        while (v55 == v53 || (WTF::StringImpl **)((char *)*v52 + 1) == 0)
        {
          v52 += 2;
          if (v52 == v50)
            goto LABEL_131;
          v53 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_118;
          v55 = *v52;
        }
      }
      else
      {
        while ((unint64_t)*v52 + 1 <= 1)
        {
          v52 += 2;
          if (v52 == v50)
          {
LABEL_131:
            v48 = v50;
            goto LABEL_133;
          }
        }
      }
      v48 = v52;
    }
LABEL_133:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGDefsElement,WebCore::SVGGraphicsElement>::isAnimatedPropertyAttribute(uint64_t a1, WTF::StringImpl ***a2)
{
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor(a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_26;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_12;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_26:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_12:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    Accessor = v6[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
      v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!v8)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
        else
          v8 = 0;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGDefsElement,WebCore::SVGGraphicsElement>::isAnimatedStylePropertyAttribute()
{
  _BYTE v1[24];
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE84DF0 & 1) == 0)
  {
    v2 = WebCore::SVGNames::cxAttr;
    v3 = WebCore::SVGNames::cyAttr;
    v4 = WebCore::SVGNames::rAttr;
    v5 = WebCore::SVGNames::rxAttr;
    v6 = WebCore::SVGNames::ryAttr;
    v7 = WebCore::SVGNames::heightAttr;
    v8 = WebCore::SVGNames::widthAttr;
    v9 = WebCore::SVGNames::xAttr;
    v10[0] = WebCore::SVGNames::yAttr;
    qword_1ECE84DE8 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DE8, &v2, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DE8, &v3, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DE8, &v4, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DE8, &v5, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DE8, &v6, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DE8, &v7, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DE8, &v8, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DE8, &v9, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84DE8, v10, (uint64_t)v1);
    byte_1ECE84DF0 = 1;
  }
  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  return 0;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGDefsElement,WebCore::SVGGraphicsElement>::createAnimator@<X0>(WTF::StringImpl ***a1@<X1>, _QWORD *a2@<X8>)
{
  WTF::StringImpl **result;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl **v7;
  uint64_t v8;

  *a2 = 0;
  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor(a1);
  if (result)
    goto LABEL_6;
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_26;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a1);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_12;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_26:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_12:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    result = v6[1];
    if (result)
      goto LABEL_6;
  }
  {
    v7 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a1);
      v7 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      + 16
                                      * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        - 1));
        else
          result = 0;
      }
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_6:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 9))(&v8);
      *a2 = v8;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGDefsElement,WebCore::SVGGraphicsElement>::appendAnimatedInstance(uint64_t a1, WTF::StringImpl ***a2, uint64_t a3)
{
  WTF::StringImpl **result;
  uint64_t v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;

  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  if ((byte_1ECE84DE0 & 1) == 0)
    byte_1ECE84DE0 = 1;
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor(a2);
  if (result)
    goto LABEL_6;
  {
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    v9 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v9)
      goto LABEL_13;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_27:
      v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_13:
  {
    if (v8)
      v8 += 2 * *((unsigned int *)v8 - 1);
  }
  else
  {
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v8 != v9)
  {
    result = v9[1];
    if (result)
    {
LABEL_6:
      v7 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v7, a3);
    }
  }
  {
    v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
      v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                      + 16
                                      * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                        - 1));
        else
          result = 0;
      }
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v7 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v7, a3);
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAnimationElement,WebCore::SVGElement,WebCore::SVGTests>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl ***v16;
  WTF::StringImpl **v17;
  int v18;
  WTF::StringImpl **v19;
  WTF *v21;
  void *v22;
  WTF::StringImpl ***v23;
  WTF::StringImpl ***v24;
  uint64_t v25;
  WTF::StringImpl ***v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  int v29;
  WTF::StringImpl **v30;
  WTF *v32;
  void *v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  int v36;
  WTF::StringImpl **v37;
  uint64_t v38;
  WTF *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;

  v1 = result;
  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  {
    v2 = 0;
    v15 = 0;
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_76;
  }
  v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v15 = 0;
    v3 = 0;
LABEL_76:
    v4 = &v2[2 * v3];
    goto LABEL_26;
  }
  v3 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v3);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v3);
    goto LABEL_76;
  }
  if ((_DWORD)v3)
  {
    v5 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v6 = 16 * v3;
      while (1)
      {
        if (v5)
        {
          v7 = (*(_DWORD *)v5)++;
          v8 = *v2;
          if (v7)
          {
            *(_DWORD *)v5 = v7;
            v9 = (uint64_t)v5;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
            result = WTF::fastFree(v11, v12);
            v9 = WebCore::nullName;
          }
        }
        else
        {
          v9 = 0;
          v8 = *v2;
        }
        if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
          break;
        v2 += 2;
        v5 = (WTF::StringImpl **)v9;
        v6 -= 16;
        if (!v6)
        {
          v2 = v4;
          break;
        }
      }
      v15 = v2;
      v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v13 = 0;
      v14 = 16 * v3;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v13)
                               + 1) <= 1)
      {
        v13 += 16;
        if (v14 == v13)
        {
          v15 = v4;
          goto LABEL_26;
        }
      }
      v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v13);
    }
  }
  else
  {
    v15 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_26:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  while (v15 != v2)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v15[1] + 2))(v15[1], *(_QWORD *)(v1 + 8));
    v16 = v15 + 2;
    v15 = v4;
    if (v16 != v4)
    {
      v17 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_31:
        v18 = (*(_DWORD *)v17)++;
        v19 = *v16;
        if (v18)
        {
          *(_DWORD *)v17 = v18;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v17);
          result = WTF::fastFree(v21, v22);
        }
        while (v19 == v17 || (WTF::StringImpl **)((char *)*v16 + 1) == 0)
        {
          v16 += 2;
          if (v16 == v4)
            goto LABEL_44;
          v17 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_31;
          v19 = *v16;
        }
      }
      else
      {
        while ((unint64_t)*v16 + 1 <= 1)
        {
          v16 += 2;
          if (v16 == v4)
          {
LABEL_44:
            v15 = v4;
            goto LABEL_46;
          }
        }
      }
      v15 = v16;
    }
LABEL_46:
    ;
  }
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_50;
  }
  v23 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v24 = 0;
    v25 = 0;
LABEL_50:
    v26 = &v23[2 * v25];
    goto LABEL_51;
  }
  v25 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v26 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v25);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v25);
    goto LABEL_50;
  }
  if ((_DWORD)v25)
  {
    v34 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v35 = 16 * v25;
      while (1)
      {
        if (v34)
        {
          v36 = (*(_DWORD *)v34)++;
          v37 = *v23;
          if (v36)
          {
            *(_DWORD *)v34 = v36;
            v38 = (uint64_t)v34;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v34);
            result = WTF::fastFree(v40, v41);
            v38 = WebCore::nullName;
          }
        }
        else
        {
          v38 = 0;
          v37 = *v23;
        }
        if (v37 != v34 && (WTF::StringImpl **)((char *)*v23 + 1) != 0)
          break;
        v23 += 2;
        v34 = (WTF::StringImpl **)v38;
        v35 -= 16;
        if (!v35)
        {
          v23 = v26;
          break;
        }
      }
      v24 = v23;
      v23 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v42 = 0;
      v43 = 16 * v25;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v42)
                               + 1) <= 1)
      {
        v42 += 16;
        if (v43 == v42)
        {
          v24 = v26;
          goto LABEL_51;
        }
      }
      v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v42);
    }
  }
  else
  {
    v24 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_51:
  if (v23)
    v23 += 2 * *((unsigned int *)v23 - 1);
  while (v24 != v23)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t))*v24[1] + 2))(v24[1], *(_QWORD *)(v1 + 8) + 368);
    v27 = v24 + 2;
    v24 = v26;
    if (v27 != v26)
    {
      v28 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_56:
        v29 = (*(_DWORD *)v28)++;
        v30 = *v27;
        if (v29)
        {
          *(_DWORD *)v28 = v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = WTF::fastFree(v32, v33);
        }
        while (v30 == v28 || (WTF::StringImpl **)((char *)*v27 + 1) == 0)
        {
          v27 += 2;
          if (v27 == v26)
            goto LABEL_69;
          v28 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_56;
          v30 = *v27;
        }
      }
      else
      {
        while ((unint64_t)*v27 + 1 <= 1)
        {
          v27 += 2;
          if (v27 == v26)
          {
LABEL_69:
            v24 = v26;
            goto LABEL_71;
          }
        }
      }
      v24 = v27;
    }
LABEL_71:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAnimationElement,WebCore::SVGElement,WebCore::SVGTests>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl **v4;
  uint64_t v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  WTF *v26;
  void *v27;
  WTF::StringImpl ***v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl ***v31;
  WTF::StringImpl **v32;
  int v33;
  WTF::StringImpl **v34;
  WTF *v36;
  void *v37;
  WTF::StringImpl **v38;
  WTF *v39;
  void *v40;
  WTF::StringImpl **v41;
  uint64_t v42;
  int v43;
  WTF::StringImpl **v44;
  uint64_t v45;
  WTF *v47;
  void *v48;
  uint64_t v49;

  v4 = result;
  v6 = WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  {
    v7 = 0;
    v20 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_87;
  }
  v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v20 = 0;
    v8 = 0;
LABEL_87:
    v9 = &v7[2 * v8];
    goto LABEL_28;
  }
  v8 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v8);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v8);
    goto LABEL_87;
  }
  if ((_DWORD)v8)
  {
    v10 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v11 = 16 * v8;
      while (1)
      {
        if (v10)
        {
          v12 = (*(_DWORD *)v10)++;
          v13 = *v7;
          if (v12)
          {
            *(_DWORD *)v10 = v12;
            v14 = (uint64_t)v10;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
            result = (WTF::StringImpl **)WTF::fastFree(v16, v17);
            v14 = WebCore::nullName;
          }
        }
        else
        {
          v14 = 0;
          v13 = *v7;
        }
        if (v13 != v10 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
          break;
        v7 += 2;
        v10 = (WTF::StringImpl **)v14;
        v11 -= 16;
        if (!v11)
        {
          v7 = v9;
          break;
        }
      }
      v20 = v7;
      v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v18 = 0;
      v19 = 16 * v8;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v18)
                               + 1) <= 1)
      {
        v18 += 16;
        if (v19 == v18)
        {
          v20 = v9;
          goto LABEL_28;
        }
      }
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v18);
    }
  }
  else
  {
    v20 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_28:
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  while (v20 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v20[1] + 5))(v20[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_77;
    v21 = v20 + 2;
    v20 = v9;
    if (v21 != v9)
    {
      v22 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v23 = (*(_DWORD *)v22)++;
        v24 = *v21;
        if (v23)
        {
          *(_DWORD *)v22 = v23;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          result = (WTF::StringImpl **)WTF::fastFree(v26, v27);
        }
        while (v24 == v22 || (WTF::StringImpl **)((char *)*v21 + 1) == 0)
        {
          v21 += 2;
          if (v21 == v9)
            goto LABEL_47;
          v22 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v24 = *v21;
        }
      }
      else
      {
        while ((unint64_t)*v21 + 1 <= 1)
        {
          v21 += 2;
          if (v21 == v9)
          {
LABEL_47:
            v20 = v9;
            goto LABEL_49;
          }
        }
      }
      v20 = v21;
    }
LABEL_49:
    ;
  }
  {
    v28 = 0;
    v20 = 0;
    v29 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_53;
  }
  v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v20 = 0;
    v29 = 0;
LABEL_53:
    v30 = &v28[2 * v29];
    goto LABEL_54;
  }
  v29 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v30 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v29);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v29);
    goto LABEL_53;
  }
  if ((_DWORD)v29)
  {
    v41 = (WTF::StringImpl **)WebCore::nullName;
    v42 = 16 * v29;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v41)
        {
          v43 = (*(_DWORD *)v41)++;
          v44 = *v28;
          if (v43)
          {
            *(_DWORD *)v41 = v43;
            v45 = (uint64_t)v41;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
            result = (WTF::StringImpl **)WTF::fastFree(v47, v48);
            v45 = WebCore::nullName;
          }
        }
        else
        {
          v45 = 0;
          v44 = *v28;
        }
        if (v44 != v41 && (WTF::StringImpl **)((char *)*v28 + 1) != 0)
          break;
        v28 += 2;
        v41 = (WTF::StringImpl **)v45;
        v42 -= 16;
        if (!v42)
        {
          v28 = v30;
          break;
        }
      }
      v20 = v28;
      v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v49 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v49)
                               + 1) <= 1)
      {
        v49 += 16;
        if (v42 == v49)
        {
          v20 = v30;
          goto LABEL_54;
        }
      }
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v49);
    }
  }
  else
  {
    v20 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_54:
  if (v28)
    v28 += 2 * *((unsigned int *)v28 - 1);
  if (v28 != v20)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v20[1] + 5))(v20[1], (uint64_t)v4[1] + 368, a2);
      if ((_DWORD)result)
        break;
      v31 = v20 + 2;
      v20 = v30;
      if (v31 != v30)
      {
        v32 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_60:
          v33 = (*(_DWORD *)v32)++;
          v34 = *v31;
          if (v33)
          {
            *(_DWORD *)v32 = v33;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v32);
            result = (WTF::StringImpl **)WTF::fastFree(v36, v37);
          }
          while (v34 == v32 || (WTF::StringImpl **)((char *)*v31 + 1) == 0)
          {
            v31 += 2;
            if (v31 == v30)
              goto LABEL_73;
            v32 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_60;
            v34 = *v31;
          }
        }
        else
        {
          while ((unint64_t)*v31 + 1 <= 1)
          {
            v31 += 2;
            if (v31 == v30)
            {
LABEL_73:
              v20 = v30;
              goto LABEL_75;
            }
          }
        }
        v20 = v31;
      }
LABEL_75:
      if (v20 == v28)
        return result;
    }
LABEL_77:
    v38 = *v20;
    if (*v20)
      ++*(_DWORD *)v38;
    result = (WTF::StringImpl **)*a3;
    *a3 = (uint64_t)v38;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v39, v40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAnimationElement,WebCore::SVGElement,WebCore::SVGTests>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl **v4;
  uint64_t v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  WTF *v26;
  void *v27;
  WTF::StringImpl ***v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl ***v31;
  WTF::StringImpl **v32;
  int v33;
  WTF::StringImpl **v34;
  WTF *v36;
  void *v37;
  WTF::StringImpl **v38;
  WTF *v39;
  void *v40;
  WTF::StringImpl **v41;
  uint64_t v42;
  int v43;
  WTF::StringImpl **v44;
  uint64_t v45;
  WTF *v47;
  void *v48;
  uint64_t v49;

  v4 = result;
  v6 = WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  {
    v7 = 0;
    v20 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_87;
  }
  v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v20 = 0;
    v8 = 0;
LABEL_87:
    v9 = &v7[2 * v8];
    goto LABEL_28;
  }
  v8 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v8);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v8);
    goto LABEL_87;
  }
  if ((_DWORD)v8)
  {
    v10 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v11 = 16 * v8;
      while (1)
      {
        if (v10)
        {
          v12 = (*(_DWORD *)v10)++;
          v13 = *v7;
          if (v12)
          {
            *(_DWORD *)v10 = v12;
            v14 = (uint64_t)v10;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
            result = (WTF::StringImpl **)WTF::fastFree(v16, v17);
            v14 = WebCore::nullName;
          }
        }
        else
        {
          v14 = 0;
          v13 = *v7;
        }
        if (v13 != v10 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
          break;
        v7 += 2;
        v10 = (WTF::StringImpl **)v14;
        v11 -= 16;
        if (!v11)
        {
          v7 = v9;
          break;
        }
      }
      v20 = v7;
      v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v18 = 0;
      v19 = 16 * v8;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v18)
                               + 1) <= 1)
      {
        v18 += 16;
        if (v19 == v18)
        {
          v20 = v9;
          goto LABEL_28;
        }
      }
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v18);
    }
  }
  else
  {
    v20 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_28:
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  while (v20 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v20[1] + 6))(v20[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_77;
    v21 = v20 + 2;
    v20 = v9;
    if (v21 != v9)
    {
      v22 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v23 = (*(_DWORD *)v22)++;
        v24 = *v21;
        if (v23)
        {
          *(_DWORD *)v22 = v23;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          result = (WTF::StringImpl **)WTF::fastFree(v26, v27);
        }
        while (v24 == v22 || (WTF::StringImpl **)((char *)*v21 + 1) == 0)
        {
          v21 += 2;
          if (v21 == v9)
            goto LABEL_47;
          v22 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v24 = *v21;
        }
      }
      else
      {
        while ((unint64_t)*v21 + 1 <= 1)
        {
          v21 += 2;
          if (v21 == v9)
          {
LABEL_47:
            v20 = v9;
            goto LABEL_49;
          }
        }
      }
      v20 = v21;
    }
LABEL_49:
    ;
  }
  {
    v28 = 0;
    v20 = 0;
    v29 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_53;
  }
  v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v20 = 0;
    v29 = 0;
LABEL_53:
    v30 = &v28[2 * v29];
    goto LABEL_54;
  }
  v29 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v30 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v29);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v29);
    goto LABEL_53;
  }
  if ((_DWORD)v29)
  {
    v41 = (WTF::StringImpl **)WebCore::nullName;
    v42 = 16 * v29;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v41)
        {
          v43 = (*(_DWORD *)v41)++;
          v44 = *v28;
          if (v43)
          {
            *(_DWORD *)v41 = v43;
            v45 = (uint64_t)v41;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
            result = (WTF::StringImpl **)WTF::fastFree(v47, v48);
            v45 = WebCore::nullName;
          }
        }
        else
        {
          v45 = 0;
          v44 = *v28;
        }
        if (v44 != v41 && (WTF::StringImpl **)((char *)*v28 + 1) != 0)
          break;
        v28 += 2;
        v41 = (WTF::StringImpl **)v45;
        v42 -= 16;
        if (!v42)
        {
          v28 = v30;
          break;
        }
      }
      v20 = v28;
      v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v49 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v49)
                               + 1) <= 1)
      {
        v49 += 16;
        if (v42 == v49)
        {
          v20 = v30;
          goto LABEL_54;
        }
      }
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v49);
    }
  }
  else
  {
    v20 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_54:
  if (v28)
    v28 += 2 * *((unsigned int *)v28 - 1);
  if (v28 != v20)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v20[1] + 6))(v20[1], (uint64_t)v4[1] + 368, a2);
      if ((_DWORD)result)
        break;
      v31 = v20 + 2;
      v20 = v30;
      if (v31 != v30)
      {
        v32 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_60:
          v33 = (*(_DWORD *)v32)++;
          v34 = *v31;
          if (v33)
          {
            *(_DWORD *)v32 = v33;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v32);
            result = (WTF::StringImpl **)WTF::fastFree(v36, v37);
          }
          while (v34 == v32 || (WTF::StringImpl **)((char *)*v31 + 1) == 0)
          {
            v31 += 2;
            if (v31 == v30)
              goto LABEL_73;
            v32 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_60;
            v34 = *v31;
          }
        }
        else
        {
          while ((unint64_t)*v31 + 1 <= 1)
          {
            v31 += 2;
            if (v31 == v30)
            {
LABEL_73:
              v20 = v30;
              goto LABEL_75;
            }
          }
        }
        v20 = v31;
      }
LABEL_75:
      if (v20 == v28)
        return result;
    }
LABEL_77:
    v38 = *v20;
    if (*v20)
      ++*(_DWORD *)v38;
    result = (WTF::StringImpl **)*a3;
    *a3 = (uint64_t)v38;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v39, v40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAnimationElement,WebCore::SVGElement,WebCore::SVGTests>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  WTF::StringImpl ***v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***result;
  uint64_t v10;

  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  {
    v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_25;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v7)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v7 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_25:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v6)
      v6 += 2 * *((unsigned int *)v6 - 1);
  }
  else
  {
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v6 != v7)
  {
    result = (WTF::StringImpl ***)v7[1];
    if (result)
    {
      v10 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, uint64_t, uint64_t))(*result)[7])(result, v10, a3);
    }
  }
  {
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
      v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                       + 16
                                       * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         - 1));
        else
          result = 0;
      }
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v8 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v8)
      v8 += 2 * *((unsigned int *)v8 - 1);
  }
  else
  {
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v8 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
      v10 = *(_QWORD *)(a1 + 8) + 368;
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, uint64_t, uint64_t))(*result)[7])(result, v10, a3);
    }
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAnimationElement,WebCore::SVGElement,WebCore::SVGTests>::synchronize@<X0>(WebCore::QualifiedName::QualifiedNameImpl **a1@<X1>, _BYTE *a2@<X8>)
{
  WTF::StringImpl ***v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl ***result;
  uint64_t v8;
  char v9;

  *a2 = 0;
  a2[8] = 0;
  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  {
    v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_25;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v5)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v5 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_25:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v4)
      v4 += 2 * *((unsigned int *)v4 - 1);
  }
  else
  {
    v4 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v4 != v5)
  {
    result = (WTF::StringImpl ***)v5[1];
    if (result)
      goto LABEL_23;
  }
  {
    v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a1);
      v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                       + 16
                                       * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         - 1));
        else
          result = 0;
      }
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v6)
      v6 += 2 * *((unsigned int *)v6 - 1);
  }
  else
  {
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v6 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
LABEL_23:
      result = (WTF::StringImpl ***)((WTF::StringImpl ***(*)(uint64_t *__return_ptr))(*result)[8])(&v8);
      if (v9)
      {
        *(_QWORD *)a2 = v8;
        a2[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAnimationElement,WebCore::SVGElement,WebCore::SVGTests>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl ***v17;
  WTF::StringImpl *v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl *v30;
  WTF::StringImpl ***v31;
  WTF::StringImpl **v32;
  int v33;
  WTF::StringImpl **v34;
  WTF *v36;
  void *v37;
  WTF::StringImpl **v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl **v41;
  uint64_t v42;
  WTF *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[24];
  WTF::StringImpl *v48;
  char v49;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  {
    v4 = 0;
    v17 = 0;
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_90;
  }
  v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v5 = 0;
LABEL_90:
    v6 = &v4[2 * v5];
    goto LABEL_26;
  }
  v5 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v5);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v5);
    goto LABEL_90;
  }
  if ((_DWORD)v5)
  {
    v7 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v8 = 16 * v5;
      while (1)
      {
        if (v7)
        {
          v9 = (*(_DWORD *)v7)++;
          v10 = *v4;
          if (v9)
          {
            *(_DWORD *)v7 = v9;
            v11 = (uint64_t)v7;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
            result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
            v11 = WebCore::nullName;
          }
        }
        else
        {
          v11 = 0;
          v10 = *v4;
        }
        if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
          break;
        v4 += 2;
        v7 = (WTF::StringImpl **)v11;
        v8 -= 16;
        if (!v8)
        {
          v4 = v6;
          break;
        }
      }
      v17 = v4;
      v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v15 = 0;
      v16 = 16 * v5;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v15)
                               + 1) <= 1)
      {
        v15 += 16;
        if (v16 == v15)
        {
          v17 = v6;
          goto LABEL_26;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v15);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_26:
  if (v4)
    v4 += 2 * *((unsigned int *)v4 - 1);
  while (v17 != v4)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v17[1]
                                 + 8))(&v48, v17[1], *((_QWORD *)v2 + 1));
    if (v49)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v17, (WTF::StringImpl ***)&v48, (uint64_t)v47);
      if (v49)
      {
        result = v48;
        v48 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v19 = v17 + 2;
    v17 = v6;
    if (v19 != v6)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_36:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl *)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == v6)
            goto LABEL_49;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_36;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == v6)
          {
LABEL_49:
            v17 = v6;
            goto LABEL_51;
          }
        }
      }
      v17 = v19;
    }
LABEL_51:
    ;
  }
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_57;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v27 = 0;
    v28 = 0;
LABEL_57:
    v29 = &v26[2 * v28];
    goto LABEL_58;
  }
  v28 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v29 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v28);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v28);
    goto LABEL_57;
  }
  if ((_DWORD)v28)
  {
    v38 = (WTF::StringImpl **)WebCore::nullName;
    v39 = 16 * v28;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v38)
        {
          v40 = (*(_DWORD *)v38)++;
          v41 = *v26;
          if (v40)
          {
            *(_DWORD *)v38 = v40;
            v42 = (uint64_t)v38;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v38);
            result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
            v42 = WebCore::nullName;
          }
        }
        else
        {
          v42 = 0;
          v41 = *v26;
        }
        if (v41 != v38 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
          break;
        v26 += 2;
        v38 = (WTF::StringImpl **)v42;
        v39 -= 16;
        if (!v39)
        {
          v26 = v29;
          break;
        }
      }
      v27 = v26;
      v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v46 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v46)
                               + 1) <= 1)
      {
        v46 += 16;
        if (v39 == v46)
        {
          v27 = v29;
          goto LABEL_58;
        }
      }
      v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v46);
    }
  }
  else
  {
    v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_58:
  if (v26)
    v26 += 2 * *((unsigned int *)v26 - 1);
  while (v27 != v26)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v27[1]
                                 + 8))(&v48, v27[1], *((_QWORD *)v2 + 1) + 368);
    if (v49)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v27, (WTF::StringImpl ***)&v48, (uint64_t)v47);
      if (v49)
      {
        result = v48;
        v48 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v31 = v27 + 2;
    v27 = v29;
    if (v31 != v29)
    {
      v32 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_68:
        v33 = (*(_DWORD *)v32)++;
        v34 = *v31;
        if (v33)
        {
          *(_DWORD *)v32 = v33;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v32);
          result = (WTF::StringImpl *)WTF::fastFree(v36, v37);
        }
        while (v34 == v32 || (WTF::StringImpl **)((char *)*v31 + 1) == 0)
        {
          v31 += 2;
          if (v31 == v29)
            goto LABEL_81;
          v32 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_68;
          v34 = *v31;
        }
      }
      else
      {
        while ((unint64_t)*v31 + 1 <= 1)
        {
          v31 += 2;
          if (v31 == v29)
          {
LABEL_81:
            v27 = v29;
            goto LABEL_83;
          }
        }
      }
      v27 = v31;
    }
LABEL_83:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAnimationElement,WebCore::SVGElement,WebCore::SVGTests>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  WTF::StringImpl ***v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl **v8;

  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  {
    v3 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_24;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v3 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v4)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_24:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v3)
      v3 += 2 * *((unsigned int *)v3 - 1);
  }
  else
  {
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v3 != v4)
  {
    v8 = v4[1];
    if (v8)
      return (*((uint64_t (**)(WTF::StringImpl **))*v8 + 3))(v8);
  }
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
      v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!v6)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
        else
          v6 = 0;
      }
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6 && (v8 = v6[1]) != 0)
    return (*((uint64_t (**)(WTF::StringImpl **))*v8 + 3))(v8);
  else
    return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAnimationElement,WebCore::SVGElement,WebCore::SVGTests>::isAnimatedStylePropertyAttribute()
{
  _BYTE v1[24];
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE84E08 & 1) == 0)
  {
    v2 = WebCore::SVGNames::cxAttr;
    v3 = WebCore::SVGNames::cyAttr;
    v4 = WebCore::SVGNames::rAttr;
    v5 = WebCore::SVGNames::rxAttr;
    v6 = WebCore::SVGNames::ryAttr;
    v7 = WebCore::SVGNames::heightAttr;
    v8 = WebCore::SVGNames::widthAttr;
    v9 = WebCore::SVGNames::xAttr;
    v10[0] = WebCore::SVGNames::yAttr;
    qword_1ECE84E00 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E00, &v2, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E00, &v3, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E00, &v4, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E00, &v5, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E00, &v6, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E00, &v7, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E00, &v8, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E00, &v9, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E00, v10, (uint64_t)v1);
    byte_1ECE84E08 = 1;
  }
  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  return 0;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAnimationElement,WebCore::SVGElement,WebCore::SVGTests>::createAnimator@<X0>(WebCore::QualifiedName::QualifiedNameImpl **a1@<X1>, _QWORD *a2@<X8>)
{
  WTF::StringImpl ***v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl ***result;
  uint64_t v8;

  *a2 = 0;
  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  {
    v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_24;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v5)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v5 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_24:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v4)
      v4 += 2 * *((unsigned int *)v4 - 1);
  }
  else
  {
    v4 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v4 != v5)
  {
    result = (WTF::StringImpl ***)v5[1];
    if (result)
      goto LABEL_23;
  }
  {
    v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a1);
      v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                       + 16
                                       * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         - 1));
        else
          result = 0;
      }
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v6)
      v6 += 2 * *((unsigned int *)v6 - 1);
  }
  else
  {
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v6 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
LABEL_23:
      result = (WTF::StringImpl ***)((WTF::StringImpl ***(*)(uint64_t *__return_ptr))(*result)[9])(&v8);
      *a2 = v8;
    }
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAnimationElement,WebCore::SVGElement,WebCore::SVGTests>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  WTF::StringImpl ***v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***result;
  uint64_t v10;

  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  if ((byte_1ECE84DF8 & 1) == 0)
    byte_1ECE84DF8 = 1;
  {
    v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_25;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v6 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v7)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v7 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_25:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v6)
      v6 += 2 * *((unsigned int *)v6 - 1);
  }
  else
  {
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v6 != v7)
  {
    result = (WTF::StringImpl ***)v7[1];
    if (result)
    {
      v10 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, uint64_t, uint64_t))(*result)[10])(result, v10, a3);
    }
  }
  {
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
      v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
      if (!result)
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                       + 16
                                       * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         - 1));
        else
          result = 0;
      }
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    v8 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  {
    if (v8)
      v8 += 2 * *((unsigned int *)v8 - 1);
  }
  else
  {
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v8 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
      v10 = *(_QWORD *)(a1 + 8) + 368;
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, uint64_t, uint64_t))(*result)[10])(result, v10, a3);
    }
  }
  return result;
}

WebCore::QualifiedName::QualifiedNameImpl **WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::lookup<WTF::HashSetTranslatorAdapter<WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1, uint64_t *a2)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int *v7;
  WTF::StringImpl **v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  int v12;
  WebCore::QualifiedName::QualifiedNameImpl **v13;
  int v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  int v18;
  uint64_t v19;
  int *v20;
  WTF *v21;
  void *v22;
  int *v23;
  uint64_t v24;
  unsigned int v25;
  WebCore::QualifiedName::QualifiedNameImpl *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v33;

  if (*a1)
  {
    v33 = *((_DWORD *)a1 + 2);
    v3 = v33 - 1;
    v4 = *((_DWORD *)a1 + 4);
    v5 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(a2);
    v6 = v5 ^ v4;
    v7 = &webThreadDelegateMessageScopeCount;
    v8 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v9 = 0;
      v10 = v33;
      v11 = a2;
      while (1)
      {
        v12 = v6 & v3;
        v13 = (WebCore::QualifiedName::QualifiedNameImpl **)(*a1 + 8 * (v6 & v3));
        if (v8)
        {
          v14 = (*(_DWORD *)v8)++;
          v15 = (WTF::StringImpl **)*v13;
          if (v14)
          {
            *(_DWORD *)v8 = v14;
            v16 = v8;
          }
          else
          {
            v20 = v7;
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v8);
            WTF::fastFree(v21, v22);
            v7 = v20;
            v11 = a2;
            v10 = v33;
            v16 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
          }
        }
        else
        {
          v16 = 0;
          v15 = (WTF::StringImpl **)*v13;
        }
        if (v15 == v8)
          break;
        v17 = *v13;
        v18 = *((_DWORD *)*v13 + 1);
        if (!v18)
        {
          v23 = v7;
          v18 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*v13);
          v7 = v23;
          v11 = a2;
          v10 = v33;
          *((_DWORD *)v17 + 1) = v18;
        }
        if (v9 > ((v12 + v10 - ((v18 ^ v4) & v3)) & v3))
          break;
        if (v18 == v5)
        {
          v19 = *v11;
          if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)*v11
            || *((_QWORD *)v17 + 3) == *(_QWORD *)(v19 + 24) && *((_QWORD *)v17 + 4) == *(_QWORD *)(v19 + 32))
          {
            return v13;
          }
        }
        v6 = v12 + 1;
        ++v9;
        v8 = v16;
      }
    }
    else
    {
      v24 = *a1;
      v25 = v6 & v3;
      v13 = (WebCore::QualifiedName::QualifiedNameImpl **)(*a1 + 8 * (v6 & v3));
      v26 = *v13;
      if (*v13)
      {
        v27 = *a2;
        v28 = -1;
        v29 = v33;
        do
        {
          v30 = *((_DWORD *)v26 + 1);
          if (!v30)
          {
            v30 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(v26);
            v29 = v33;
            *((_DWORD *)v26 + 1) = v30;
          }
          if (++v28 > ((v25 + v29 - ((v30 ^ v4) & v3)) & v3))
            break;
          if (v30 == v5
            && (v26 == (WebCore::QualifiedName::QualifiedNameImpl *)v27
             || *((_QWORD *)v26 + 3) == *(_QWORD *)(v27 + 24) && *((_QWORD *)v26 + 4) == *(_QWORD *)(v27 + 32)))
          {
            return v13;
          }
          v25 = (v25 + 1) & v3;
          v13 = (WebCore::QualifiedName::QualifiedNameImpl **)(v24 + 8 * v25);
          v26 = *v13;
        }
        while (*v13);
      }
    }
  }
  return 0;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::SVGAnimationElement::attributeChanged(WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&,WebCore::Element::AttributeModificationReason)::$_0,void,WTF::StringView>::call(WTF::StringImpl *result, unsigned __int16 *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WTF::StringImpl *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;

  v3 = *((_QWORD *)result + 1);
  v4 = a3;
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3)
    {
      v5 = 0;
      while (1)
      {
        v6 = *((unsigned __int8 *)a2 + v5);
        v7 = v6 > 0x20;
        v8 = (1 << v6) & 0x100003600;
        if (v7 || v8 == 0)
          break;
        if (a3 == ++v5)
          goto LABEL_41;
      }
      if ((_DWORD)a3 != 1)
      {
        v10 = (a3 - 1);
        while (v10 < a3)
        {
          v11 = *((unsigned __int8 *)a2 + v10);
          v7 = v11 > 0x20;
          v12 = (1 << v11) & 0x100003600;
          if (!v7 && v12 != 0)
          {
            if ((_DWORD)--v10)
              continue;
          }
          if (!(_DWORD)v5 && (_DWORD)v10 == (_DWORD)a3 - 1)
            goto LABEL_40;
          goto LABEL_20;
        }
        goto LABEL_56;
      }
      if ((_DWORD)v5)
      {
        LODWORD(v10) = 0;
LABEL_20:
        v14 = (v10 - v5 + 1);
        if ((unint64_t)a3 - v5 < v14)
          goto LABEL_56;
        a3 = v14 | 0x100000000;
      }
    }
  }
  else if ((_DWORD)a3)
  {
    v15 = 0;
    v16 = a2;
    while (1)
    {
      v17 = *v16;
      v7 = v17 > 0x20;
      v18 = (1 << v17) & 0x100003600;
      if (v7 || v18 == 0)
        break;
      ++v15;
      ++v16;
      if (a3 == v15)
        goto LABEL_41;
    }
    if ((_DWORD)a3 != 1)
    {
      v20 = (a3 - 1);
      while (v20 < a3)
      {
        v21 = a2[v20];
        v7 = v21 > 0x20;
        v22 = (1 << v21) & 0x100003600;
        if (!v7 && v22 != 0)
        {
          if ((_DWORD)--v20)
            continue;
        }
        if ((_DWORD)v15 || (_DWORD)v20 != (_DWORD)a3 - 1)
          goto LABEL_55;
        goto LABEL_40;
      }
      goto LABEL_56;
    }
    if ((_DWORD)v15)
    {
      LODWORD(v20) = 0;
LABEL_55:
      a3 = (v20 - v15 + 1);
      if (v4 - v15 < a3)
      {
LABEL_56:
        __break(1u);
        return result;
      }
    }
  }
LABEL_40:
  if ((a3 & 0xFF00000000) != 0)
LABEL_41:
    WTF::String::String();
  else
    WTF::String::String();
  v25 = (uint64_t *)(v3 + 392);
  v26 = *(unsigned int *)(v3 + 404);
  if ((_DWORD)v26 == *(_DWORD *)(v3 + 400))
  {
    v29 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v30);
    v26 = *(unsigned int *)(v3 + 404);
    v27 = *(_QWORD *)(v3 + 392);
    v28 = *v29;
    *v29 = 0;
  }
  else
  {
    v27 = *v25;
    v28 = v30;
    v30 = 0;
  }
  *(_QWORD *)(v27 + 8 * v26) = v28;
  *(_DWORD *)(v3 + 404) = v26 + 1;
  result = v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGElement>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl **v37;
  int v38;
  WTF::StringImpl **v39;
  WTF *v41;
  void *v42;

  v1 = result;
  if ((byte_1ECE84E18 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE84E10;
  if (!qword_1ECE84E10)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE84E10 - 4);
  v4 = qword_1ECE84E10 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE84E10 - 12))
  {
    v13 = qword_1ECE84E10 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE84E10;
    if (!qword_1ECE84E10)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE84E10;
    if (qword_1ECE84E10)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84E10 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE84E10)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE84E10 + v14;
    if (qword_1ECE84E10)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v35 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_100;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v35 = 0;
    v23 = 0;
LABEL_100:
    v24 = &v22[2 * v23];
    goto LABEL_73;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_100;
  }
  if ((_DWORD)v23)
  {
    v25 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v26 = 16 * v23;
      while (1)
      {
        if (v25)
        {
          v27 = (*(_DWORD *)v25)++;
          v28 = *v22;
          if (v27)
          {
            *(_DWORD *)v25 = v27;
            v29 = (uint64_t)v25;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
            result = WTF::fastFree(v31, v32);
            v29 = WebCore::nullName;
          }
        }
        else
        {
          v29 = 0;
          v28 = *v22;
        }
        if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
          break;
        v22 += 2;
        v25 = (WTF::StringImpl **)v29;
        v26 -= 16;
        if (!v26)
        {
          v22 = v24;
          break;
        }
      }
      v35 = v22;
      v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v33 = 0;
      v34 = 16 * v23;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v33)
                               + 1) <= 1)
      {
        v33 += 16;
        if (v34 == v33)
        {
          v35 = v24;
          goto LABEL_73;
        }
      }
      v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v33);
    }
  }
  else
  {
    v35 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_73:
  if (v22)
    v22 += 2 * *((unsigned int *)v22 - 1);
  while (v35 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v35[1] + 2))(v35[1], *(_QWORD *)(v1 + 8));
    v36 = v35 + 2;
    v35 = v24;
    if (v36 != v24)
    {
      v37 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_78:
        v38 = (*(_DWORD *)v37)++;
        v39 = *v36;
        if (v38)
        {
          *(_DWORD *)v37 = v38;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
          result = WTF::fastFree(v41, v42);
        }
        while (v39 == v37 || (WTF::StringImpl **)((char *)*v36 + 1) == 0)
        {
          v36 += 2;
          if (v36 == v24)
            goto LABEL_91;
          v37 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_78;
          v39 = *v36;
        }
      }
      else
      {
        while ((unint64_t)*v36 + 1 <= 1)
        {
          v36 += 2;
          if (v36 == v24)
          {
LABEL_91:
            v35 = v24;
            goto LABEL_93;
          }
        }
      }
      v35 = v36;
    }
LABEL_93:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGElement>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl **v39;
  int v40;
  WTF::StringImpl **v41;
  WTF *v43;
  void *v44;
  WTF::StringImpl **v45;
  WTF *v46;
  void *v47;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE84E18 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE84E10;
  if (!qword_1ECE84E10)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE84E10 - 4);
  v9 = qword_1ECE84E10 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE84E10 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE84E10 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE84E10;
    if (!qword_1ECE84E10)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE84E10;
    if (qword_1ECE84E10)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84E10 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE84E10)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE84E10 + v18);
    if (qword_1ECE84E10)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_98;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_110;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
LABEL_110:
    v28 = &v26[2 * v27];
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_110;
  }
  if ((_DWORD)v27)
  {
    v29 = (WTF::StringImpl **)WebCore::nullName;
    v30 = 16 * v27;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v29)
        {
          v31 = (*(_DWORD *)v29)++;
          v32 = *v26;
          if (v31)
          {
            *(_DWORD *)v29 = v31;
            v33 = (uint64_t)v29;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
            result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
            v33 = WebCore::nullName;
          }
        }
        else
        {
          v33 = 0;
          v32 = *v26;
        }
        if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
          break;
        v26 += 2;
        v29 = (WTF::StringImpl **)v33;
        v30 -= 16;
        if (!v30)
        {
          v26 = v28;
          break;
        }
      }
      v17 = v26;
      v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v37 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v37)
                               + 1) <= 1)
      {
        v37 += 16;
        if (v30 == v37)
        {
          v17 = v28;
          goto LABEL_75;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v37);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_75:
  if (v26)
    v26 += 2 * *((unsigned int *)v26 - 1);
  if (v26 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v38 = v17 + 2;
      v17 = v28;
      if (v38 != v28)
      {
        v39 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_81:
          v40 = (*(_DWORD *)v39)++;
          v41 = *v38;
          if (v40)
          {
            *(_DWORD *)v39 = v40;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v39);
            result = (WTF::StringImpl **)WTF::fastFree(v43, v44);
          }
          while (v41 == v39 || (WTF::StringImpl **)((char *)*v38 + 1) == 0)
          {
            v38 += 2;
            if (v38 == v28)
              goto LABEL_94;
            v39 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_81;
            v41 = *v38;
          }
        }
        else
        {
          while ((unint64_t)*v38 + 1 <= 1)
          {
            v38 += 2;
            if (v38 == v28)
            {
LABEL_94:
              v17 = v28;
              goto LABEL_96;
            }
          }
        }
        v17 = v38;
      }
LABEL_96:
      if (v17 == v26)
        return result;
    }
LABEL_98:
    v45 = *v17;
    if (*v17)
      ++*(_DWORD *)v45;
    result = *a3;
    *a3 = v45;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v46, v47);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGElement>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl **v39;
  int v40;
  WTF::StringImpl **v41;
  WTF *v43;
  void *v44;
  WTF::StringImpl **v45;
  WTF *v46;
  void *v47;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE84E18 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE84E10;
  if (!qword_1ECE84E10)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE84E10 - 4);
  v9 = qword_1ECE84E10 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE84E10 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE84E10 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE84E10;
    if (!qword_1ECE84E10)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE84E10;
    if (qword_1ECE84E10)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84E10 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE84E10)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE84E10 + v18);
    if (qword_1ECE84E10)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_98;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_110;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
LABEL_110:
    v28 = &v26[2 * v27];
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_110;
  }
  if ((_DWORD)v27)
  {
    v29 = (WTF::StringImpl **)WebCore::nullName;
    v30 = 16 * v27;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v29)
        {
          v31 = (*(_DWORD *)v29)++;
          v32 = *v26;
          if (v31)
          {
            *(_DWORD *)v29 = v31;
            v33 = (uint64_t)v29;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
            result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
            v33 = WebCore::nullName;
          }
        }
        else
        {
          v33 = 0;
          v32 = *v26;
        }
        if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
          break;
        v26 += 2;
        v29 = (WTF::StringImpl **)v33;
        v30 -= 16;
        if (!v30)
        {
          v26 = v28;
          break;
        }
      }
      v17 = v26;
      v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v37 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v37)
                               + 1) <= 1)
      {
        v37 += 16;
        if (v30 == v37)
        {
          v17 = v28;
          goto LABEL_75;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v37);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_75:
  if (v26)
    v26 += 2 * *((unsigned int *)v26 - 1);
  if (v26 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v38 = v17 + 2;
      v17 = v28;
      if (v38 != v28)
      {
        v39 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_81:
          v40 = (*(_DWORD *)v39)++;
          v41 = *v38;
          if (v40)
          {
            *(_DWORD *)v39 = v40;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v39);
            result = (WTF::StringImpl **)WTF::fastFree(v43, v44);
          }
          while (v41 == v39 || (WTF::StringImpl **)((char *)*v38 + 1) == 0)
          {
            v38 += 2;
            if (v38 == v28)
              goto LABEL_94;
            v39 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_81;
            v41 = *v38;
          }
        }
        else
        {
          while ((unint64_t)*v38 + 1 <= 1)
          {
            v38 += 2;
            if (v38 == v28)
            {
LABEL_94:
              v17 = v28;
              goto LABEL_96;
            }
          }
        }
        v17 = v38;
      }
LABEL_96:
      if (v17 == v26)
        return result;
    }
LABEL_98:
    v45 = *v17;
    if (*v17)
      ++*(_DWORD *)v45;
    result = *a3;
    *a3 = v45;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v46, v47);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGElement>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v9;

  if ((byte_1ECE84E18 & 1) != 0)
  {
    v6 = qword_1ECE84E10;
    if (!qword_1ECE84E10)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE84E10;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE84E10)
      v7 = (WTF::StringImpl ***)(qword_1ECE84E10 + 16 * *(unsigned int *)(qword_1ECE84E10 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
LABEL_7:
  if ((byte_1ECE84E18 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = (WTF::StringImpl ***)v7[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[7])(result, *(_QWORD *)(a1 + 8), a3);
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_24;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_24:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[7])(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGElement>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE84E18 & 1) != 0)
  {
    v6 = qword_1ECE84E10;
    if (!qword_1ECE84E10)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE84E10;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE84E10)
      v7 = (WTF::StringImpl ***)(qword_1ECE84E10 + 16 * *(unsigned int *)(qword_1ECE84E10 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
LABEL_7:
  if ((byte_1ECE84E18 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = (WTF::StringImpl ***)v7[1];
    if (result)
      goto LABEL_12;
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_26;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_26:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
LABEL_12:
      result = (WTF::StringImpl ***)((WTF::StringImpl ***(*)(uint64_t *__return_ptr, WTF::StringImpl ***, _QWORD))(*result)[8])(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGElement>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl ***v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  _BYTE v46[24];
  WTF::StringImpl *v47;
  char v48;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE84E18 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE84E10;
  if (!qword_1ECE84E10)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE84E10 - 4);
  v6 = qword_1ECE84E10 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE84E10 - 12))
  {
    v15 = qword_1ECE84E10 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE84E10;
    if (!qword_1ECE84E10)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE84E10;
    if (qword_1ECE84E10)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84E10 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE84E10)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE84E10 + v16;
    if (qword_1ECE84E10)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v47, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v48)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v47, (uint64_t)v46);
      if (v48)
      {
        result = v47;
        v47 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v37 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_113;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v37 = 0;
    v26 = 0;
LABEL_113:
    v27 = &v25[2 * v26];
    goto LABEL_79;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_113;
  }
  if ((_DWORD)v26)
  {
    v28 = (WTF::StringImpl **)WebCore::nullName;
    v29 = 16 * v26;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v28)
        {
          v30 = (*(_DWORD *)v28)++;
          v31 = *v25;
          if (v30)
          {
            *(_DWORD *)v28 = v30;
            v32 = (uint64_t)v28;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
            result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
            v32 = WebCore::nullName;
          }
        }
        else
        {
          v32 = 0;
          v31 = *v25;
        }
        if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
          break;
        v25 += 2;
        v28 = (WTF::StringImpl **)v32;
        v29 -= 16;
        if (!v29)
        {
          v25 = v27;
          break;
        }
      }
      v37 = v25;
      v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v36 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v36)
                               + 1) <= 1)
      {
        v36 += 16;
        if (v29 == v36)
        {
          v37 = v27;
          goto LABEL_79;
        }
      }
      v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v36);
    }
  }
  else
  {
    v37 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_79:
  if (v25)
    v25 += 2 * *((unsigned int *)v25 - 1);
  while (v37 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v37[1]
                                 + 8))(&v47, v37[1], *((_QWORD *)v2 + 1));
    if (v48)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v37, (WTF::StringImpl ***)&v47, (uint64_t)v46);
      if (v48)
      {
        result = v47;
        v47 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v37 + 2;
    v37 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_89:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_102;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_89;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_102:
            v37 = v27;
            goto LABEL_104;
          }
        }
      }
      v37 = v39;
    }
LABEL_104:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGElement>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE84E18 & 1) != 0)
  {
    v3 = qword_1ECE84E10;
    if (!qword_1ECE84E10)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE84E10;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE84E10)
      v4 = (WTF::StringImpl ***)(qword_1ECE84E10 + 16 * *(unsigned int *)(qword_1ECE84E10 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
LABEL_7:
  if ((byte_1ECE84E18 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    v5 = v4[1];
    if (v5)
      return (*((uint64_t (**)(WTF::StringImpl **))*v5 + 3))(v5);
  }
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_25;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_25:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    v5 = v8[1];
    if (v5)
      return (*((uint64_t (**)(WTF::StringImpl **))*v5 + 3))(v5);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGElement>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE84E28 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE84E20 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E20, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E20, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E20, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E20, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E20, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E20, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E20, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E20, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84E20, v22, (uint64_t)v13);
    byte_1ECE84E28 = 1;
  }
  if ((byte_1ECE84E18 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE84E10;
  if (!qword_1ECE84E10)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE84E10;
  if (!v4)
  {
    if (qword_1ECE84E10)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE84E10 + 16 * *(unsigned int *)(qword_1ECE84E10 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE84E18 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE84E20)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE84E20 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE84E20 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE84E20 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGElement>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE84E18 & 1) != 0)
  {
    v14 = qword_1ECE84E10;
    if (!qword_1ECE84E10)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = qword_1ECE84E10;
    if (v15)
      goto LABEL_7;
    if (qword_1ECE84E10)
      v15 = (WTF::StringImpl ***)(qword_1ECE84E10 + 16 * *(unsigned int *)(qword_1ECE84E10 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
LABEL_7:
  if ((byte_1ECE84E18 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = (WTF::StringImpl ***)v15[1];
    if (result)
      goto LABEL_12;
  }
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_24;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_24:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
LABEL_12:
      result = (WTF::StringImpl ***)((WTF::StringImpl ***(*)(uint64_t *__return_ptr, WTF::StringImpl ***, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))(*result)[9])(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGElement>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v9;

  if ((byte_1ECE84E18 & 1) != 0)
  {
    v6 = qword_1ECE84E10;
    if (!qword_1ECE84E10)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE84E10;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE84E10)
      v7 = (WTF::StringImpl ***)(qword_1ECE84E10 + 16 * *(unsigned int *)(qword_1ECE84E10 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
LABEL_7:
  if ((byte_1ECE84E18 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = (WTF::StringImpl ***)v7[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[10])(result, *(_QWORD *)(a1 + 8), a3);
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_24;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_24:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[10])(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE84E10;
  if (!qword_1ECE84E10)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE84E10 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::ComponentTransferType>::setValueInternal(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(result + 12) = *a2;
  return result;
}

BOOL WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::ComponentTransferType>::setValue(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 <= 4)
    *(_BYTE *)(a1 + 12) = *a2;
  return v2 < 5;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::ComponentTransferType>::valueInternal(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::ComponentTransferType>::value(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) <= 5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  else
    return 0;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::ComponentTransferType>::valueAsString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  switch(*(_BYTE *)(result + 12))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      break;
    default:
      v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v2 += 2;
      *a2 = v2;
      break;
  }
  return result;
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::ComponentTransferType>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = *(_BYTE *)(a1 + 12);
  *(_QWORD *)result = off_1E3455C98;
  *a2 = result;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::~SVGAnimatedPropertyList(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::~SVGAnimatedPropertyList(a1, a2);
  return WTF::fastFree(v2, v3);
}

unsigned int *WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::commitPropertyChange(WebCore::SVGAnimatedProperty *a1)
{
  unsigned int *result;
  uint64_t v3;
  void *v4;

  result = (unsigned int *)*((_QWORD *)a1 + 6);
  if (result)
    result = (unsigned int *)WebCore::SVGValuePropertyList<WebCore::SVGNumber>::operator=((uint64_t)result, *((_QWORD *)a1 + 5));
  v3 = *((_QWORD *)a1 + 2);
  if (v3)
  {
    *(_DWORD *)(v3 + 24) += 2;
    result = (unsigned int *)WebCore::SVGElement::commitPropertyChange((WebCore::SVGElement *)v3, a1);
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::baseValAsString@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X8>, __n128 a3@<Q0>)
{
  return WebCore::SVGNumberList::valueAsString(*(WebCore::SVGNumberList **)(a1 + 40), a2, a3);
}

WTF::StringImpl *WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::animValAsString@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X8>, __n128 a3@<Q0>)
{
  return WebCore::SVGNumberList::valueAsString(*(WebCore::SVGNumberList **)(a1 + 48), a2, a3);
}

BOOL WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::isDirty(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 40) + 25) == 1;
}

uint64_t WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::setDirty(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 40) + 25) = 1;
  return result;
}

_BYTE *WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::synchronize@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *result;
  char v4;

  result = *(_BYTE **)(a1 + 40);
  v4 = result[25];
  if (v4)
  {
    result[25] = 0;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 32))(result);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[8] = v4;
  return result;
}

unsigned int *WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::startAnimation(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  _BYTE v10[24];

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    WebCore::SVGValuePropertyList<WebCore::SVGNumber>::operator=(v4, *(_QWORD *)(a1 + 40));
  }
  else
  {
    v6 = WTF::fastMalloc((WTF *)0x38);
    v7 = (_QWORD *)WebCore::SVGValuePropertyList<WebCore::SVGNumber>::SVGValuePropertyList(v6, v5, 1);
    *v7 = off_1E346F430;
    v7[6] = &unk_1E346F4A8;
    v8 = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v6;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
  }
  return WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>(a1 + 24, a2, (uint64_t)v10);
}

uint64_t WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::stopAnimation(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>(a1 + 24, a2);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return WebCore::SVGValuePropertyList<WebCore::SVGNumber>::operator=(result, *(_QWORD *)(a1 + 40));
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::instanceStartAnimation(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t *v11;
  _DWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v6 = a1[3];
  if (!v6 || !*(_DWORD *)(v6 - 12))
    goto LABEL_2;
  v14 = *(unsigned int *)(v6 - 4);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    v16 = (uint64_t *)a1[3];
    while ((unint64_t)(*v16 + 1) <= 1)
    {
      ++v16;
      v15 -= 8;
      if (!v15)
        goto LABEL_2;
    }
  }
  else
  {
    v16 = (uint64_t *)a1[3];
  }
  v17 = (uint64_t *)(v6 + 8 * v14);
  if (v16 == v17)
  {
LABEL_2:
    v7 = *(_QWORD *)(a3 + 48);
    if (!v7)
    {
      v8 = *(_QWORD *)(a3 + 40);
      v9 = WTF::fastMalloc((WTF *)0x38);
      v7 = WebCore::SVGValuePropertyList<WebCore::SVGNumber>::SVGValuePropertyList(v9, v8, 1);
      *(_QWORD *)v7 = off_1E346F430;
      *(_QWORD *)(v7 + 48) = &unk_1E346F4A8;
      v10 = *(_DWORD **)(a3 + 48);
      *(_QWORD *)(a3 + 48) = v7;
      if (v10)
      {
        if (v10[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          v7 = *(_QWORD *)(a3 + 48);
          v11 = a1 + 6;
          if (!v7)
          {
LABEL_8:
            v12 = (_DWORD *)*v11;
            *v11 = v7;
            if (v12)
            {
              if (v12[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
              else
                --v12[2];
            }
            return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 80))(a1, a2);
          }
LABEL_7:
          ++*(_DWORD *)(v7 + 8);
          goto LABEL_8;
        }
        --v10[2];
      }
    }
    v11 = a1 + 6;
    goto LABEL_7;
  }
  v18 = *v16;
LABEL_24:
  if (!*(_QWORD *)(v18 + 8))
  {
    while (1)
    {
      if (++v16 == v17)
        goto LABEL_2;
      v18 = *v16;
      if ((unint64_t)(*v16 + 1) > 1)
      {
        if (v16 != v17)
          goto LABEL_24;
        goto LABEL_2;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 80))(a1, a2);
}

_DWORD *WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::instanceStopAnimation(_QWORD *a1)
{
  _DWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  result = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  v3 = a1[3];
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_2;
  v4 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = (uint64_t *)a1[3];
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_2;
    }
  }
  else
  {
    v6 = (uint64_t *)a1[3];
  }
  v7 = (uint64_t *)(v3 + 8 * v4);
  if (v6 == v7)
    goto LABEL_2;
  v8 = *v6;
LABEL_16:
  if (!*(_QWORD *)(v8 + 8))
  {
    while (++v6 != v7)
    {
      v8 = *v6;
      if ((unint64_t)(*v6 + 1) > 1)
      {
        if (v6 != v7)
          goto LABEL_16;
        break;
      }
    }
LABEL_2:
    result = (_DWORD *)a1[6];
    a1[6] = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

_QWORD *WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::~SVGAnimatedPropertyList(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = off_1E3456920;
  v3 = a1[5];
  *(_QWORD *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  v4 = a1[6];
  if (v4)
  {
    *(_QWORD *)(v4 + 16) = 0;
    *(_WORD *)(v4 + 24) = 0;
    v13 = (_DWORD *)a1[6];
    a1[6] = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
  }
  else
  {
    a1[6] = 0;
  }
  v5 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *a1 = off_1E347BE40;
  v6 = a1[3];
  if (v6)
  {
    v8 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v10 = *(unsigned int **)(v6 + 8 * i);
        if (v10 != (unsigned int *)-1)
        {
          *(_QWORD *)(v6 + 8 * i) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v10);
              v15 = i;
              v16 = v6;
              v14 = v8;
              WTF::fastFree((WTF *)v10, a2);
              v8 = v14;
              i = v15;
              v6 = v16;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  return a1;
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGNumber>::operator=(uint64_t a1, uint64_t a2)
{
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v13;
  _DWORD *v14;

  v4 = (WTF *)(a1 + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v4, 0);
  v5 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v7 = 8 * v5;
    do
    {
      v8 = *(_DWORD *)(*(_QWORD *)v6 + 28);
      v9 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v9 + 8) = 1;
      *(_QWORD *)(v9 + 16) = 0;
      *(_WORD *)(v9 + 24) = 0;
      *(_DWORD *)(v9 + 28) = v8;
      *(_QWORD *)v9 = off_1E32EE788;
      v13 = (_DWORD *)v9;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, _DWORD **))(*(_QWORD *)a1 + 80))(&v14, a1, &v13);
      v10 = v14;
      v14 = 0;
      if (v10)
      {
        if (v10[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        else
          --v10[2];
      }
      v11 = v13;
      v13 = 0;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[2];
      }
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  return a1;
}

_QWORD *WebCore::SVGAnimatedPrimitiveProperty<float>::~SVGAnimatedPrimitiveProperty(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = &off_1E34566C8;
  v3 = (_DWORD *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *a1 = off_1E347BE40;
  v5 = a1[3];
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v13 = i;
              v14 = v5;
              v12 = v7;
              WTF::fastFree((WTF *)v9, a2);
              v7 = v12;
              i = v13;
              v5 = v14;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<float>::~SVGAnimatedPrimitiveProperty(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E34566C8;
  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *(_QWORD *)this = off_1E347BE40;
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v13 = i;
              v14 = v5;
              v12 = v7;
              WTF::fastFree((WTF *)v9, a2);
              v7 = v12;
              i = v13;
              v5 = v14;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<float>::baseValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<float>::animValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
}

BOOL WebCore::SVGAnimatedPrimitiveProperty<float>::isDirty(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 40) + 25) == 1;
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<float>::setDirty(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 40) + 25) = 1;
  return result;
}

_BYTE *WebCore::SVGAnimatedPrimitiveProperty<float>::synchronize@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *result;
  char v4;

  result = *(_BYTE **)(a1 + 40);
  v4 = result[25];
  if (v4)
  {
    result[25] = 0;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 32))(result);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[8] = v4;
  return result;
}

unsigned int *WebCore::SVGAnimatedPrimitiveProperty<float>::startAnimation(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _BYTE v9[24];

  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    *(_DWORD *)(v4 + 28) = *(_DWORD *)(v5 + 28);
  }
  else
  {
    v6 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v6 + 8) = 1;
    *(_QWORD *)(v6 + 16) = 0;
    *(_WORD *)(v6 + 24) = 0;
    *(_QWORD *)v6 = off_1E3456748;
    *(_DWORD *)(v6 + 28) = *(_DWORD *)(v5 + 28);
    v7 = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v6;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
  }
  return WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>(a1 + 24, a2, (uint64_t)v9);
}

_DWORD *WebCore::SVGAnimatedPrimitiveProperty<float>::stopAnimation(_QWORD *a1, _QWORD *a2)
{
  _DWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  result = (_DWORD *)WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>((uint64_t)(a1 + 3), a2);
  v4 = a1[3];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v5 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = (uint64_t *)a1[3];
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      ++v7;
      v6 -= 8;
      if (!v6)
        goto LABEL_2;
    }
  }
  else
  {
    v7 = (uint64_t *)a1[3];
  }
  v8 = (uint64_t *)(v4 + 8 * v5);
  if (v7 == v8)
    goto LABEL_2;
  v9 = *v7;
LABEL_16:
  if (!*(_QWORD *)(v9 + 8))
  {
    while (++v7 != v8)
    {
      v9 = *v7;
      if ((unint64_t)(*v7 + 1) > 1)
      {
        if (v7 != v8)
          goto LABEL_16;
        break;
      }
    }
LABEL_2:
    result = (_DWORD *)a1[6];
    a1[6] = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    return result;
  }
  v10 = a1[6];
  if (v10)
    *(_DWORD *)(v10 + 28) = *(_DWORD *)(a1[5] + 28);
  return result;
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<float>::instanceStartAnimation(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v5 = a1[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v9 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = (uint64_t *)a1[3];
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_2;
    }
  }
  else
  {
    v11 = (uint64_t *)a1[3];
  }
  v12 = (uint64_t *)(v5 + 8 * v9);
  if (v11 == v12)
    goto LABEL_2;
  v13 = *v11;
LABEL_18:
  if (!*(_QWORD *)(v13 + 8))
  {
    while (++v11 != v12)
    {
      v13 = *v11;
      if ((unint64_t)(*v11 + 1) > 1)
      {
        if (v11 != v12)
          goto LABEL_18;
        break;
      }
    }
LABEL_2:
    v6 = *(_QWORD *)(a3 + 48);
    if (v6)
      ++*(_DWORD *)(v6 + 8);
    v7 = (_DWORD *)a1[6];
    a1[6] = v6;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, a2);
}

_DWORD *WebCore::SVGAnimatedPrimitiveProperty<float>::instanceStopAnimation(_QWORD *a1)
{
  _DWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  result = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  v3 = a1[3];
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_2;
  v4 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = (uint64_t *)a1[3];
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_2;
    }
  }
  else
  {
    v6 = (uint64_t *)a1[3];
  }
  v7 = (uint64_t *)(v3 + 8 * v4);
  if (v6 == v7)
    goto LABEL_2;
  v8 = *v6;
LABEL_16:
  if (!*(_QWORD *)(v8 + 8))
  {
    while (++v6 != v7)
    {
      v8 = *v6;
      if ((unint64_t)(*v6 + 1) > 1)
      {
        if (v6 != v7)
          goto LABEL_16;
        break;
      }
    }
LABEL_2:
    result = (_DWORD *)a1[6];
    a1[6] = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

uint64_t WebCore::SVGSharedPrimitiveProperty<float>::valueAsString(float *a1)
{
  return WTF::String::number((WTF::String *)a1, a1[7]);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGComponentTransferFunctionElement::SVGComponentTransferFunctionElement(WebCore::QualifiedName const&,WebCore::Document &)::$_0 &&>>()
{
  _BYTE v1[24];
  WebCore::QualifiedName::QualifiedNameImpl *v2;

  if ((byte_1ECE84E30 & 1) == 0)
  {
    qword_1ECE84EC8 = (uint64_t)off_1E3455CE8;
    unk_1ECE84ED0 = 176;
    byte_1ECE84E30 = 1;
  }
  if ((byte_1ECE84E18 & 1) == 0)
  {
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE84EC8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::typeAttr, &v2);
  if ((byte_1ECE84E38 & 1) == 0)
  {
    qword_1ECE84ED8 = (uint64_t)off_1E3455E70;
    unk_1ECE84EE0 = 184;
    byte_1ECE84E38 = 1;
  }
  if ((byte_1ECE84E18 & 1) == 0)
  {
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE84ED8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::tableValuesAttr, &v2);
  if ((byte_1ECE84E40 & 1) == 0)
  {
    qword_1ECE84EE8 = (uint64_t)off_1E3455ED8;
    unk_1ECE84EF0 = 192;
    byte_1ECE84E40 = 1;
  }
  if ((byte_1ECE84E18 & 1) == 0)
  {
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE84EE8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>((uint64_t)v1, &WebCore::SVGNames::slopeAttr, &v2);
  if ((byte_1ECE84E48 & 1) == 0)
  {
    qword_1ECE84EF8 = (uint64_t)off_1E3455ED8;
    unk_1ECE84F00 = 200;
    byte_1ECE84E48 = 1;
  }
  if ((byte_1ECE84E18 & 1) == 0)
  {
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE84EF8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>((uint64_t)v1, &WebCore::SVGNames::interceptAttr, &v2);
  if ((byte_1ECE84E50 & 1) == 0)
  {
    qword_1ECE84F08 = (uint64_t)off_1E3455ED8;
    unk_1ECE84F10 = 208;
    byte_1ECE84E50 = 1;
  }
  if ((byte_1ECE84E18 & 1) == 0)
  {
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE84F08;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>((uint64_t)v1, &WebCore::SVGNames::amplitudeAttr, &v2);
  if ((byte_1ECE84E58 & 1) == 0)
  {
    qword_1ECE84F18 = (uint64_t)off_1E3455ED8;
    unk_1ECE84F20 = 216;
    byte_1ECE84E58 = 1;
  }
  if ((byte_1ECE84E18 & 1) == 0)
  {
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE84F18;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>((uint64_t)v1, &WebCore::SVGNames::exponentAttr, &v2);
  if ((byte_1ECE84E60 & 1) == 0)
  {
    qword_1ECE84F28 = (uint64_t)off_1E3455ED8;
    unk_1ECE84F30 = 224;
    byte_1ECE84E60 = 1;
  }
  if ((byte_1ECE84E18 & 1) == 0)
  {
    qword_1ECE84E10 = 0;
    byte_1ECE84E18 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE84F28;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::offsetAttr, &v2);
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v5;
  int v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  uint64_t result;
  int *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  int i;
  unsigned int v13;
  WebCore::QualifiedName::QualifiedNameImpl **v14;
  int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  int v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;

  v5 = qword_1ECE84E10;
  if (qword_1ECE84E10
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0), (v5 = qword_1ECE84E10) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    v40 = *((_QWORD *)v7 + 3);
    v41 = *((_QWORD *)v7 + 4);
    v42 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v43 = v42 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v44 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v43 + (v42 >> 11)) << 16) ^ (v43 + (v42 >> 11));
    v45 = (v40 >> 5) & 0x7FFF800 ^ ((v44 + (unsigned __int16)v40 + (v44 >> 11)) << 16) ^ (v44 + (unsigned __int16)v40 + (v44 >> 11));
    v46 = (v40 >> 37) & 0x7FFF800 ^ ((v45 + WORD2(v40) + (v45 >> 11)) << 16) ^ (v45 + WORD2(v40) + (v45 >> 11));
    v47 = (v41 >> 5) & 0x7FFF800 ^ ((v46 + (unsigned __int16)v41 + (v46 >> 11)) << 16) ^ (v46 + (unsigned __int16)v41 + (v46 >> 11));
    v48 = (v41 >> 37) & 0x7FFF800 ^ ((v47 + WORD2(v41) + (v47 >> 11)) << 16) ^ (v47 + WORD2(v41) + (v47 >> 11));
    v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
    v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
    v51 = (v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10);
    if (v51)
      result = v51;
    else
      result = 0x800000;
  }
  else
  {
    result = *((unsigned int *)v7 + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v7 + 1) = result;
    }
  }
  v9 = &webThreadDelegateMessageScopeCount;
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v53 = a1;
    v11 = 0;
    for (i = 1; ; ++i)
    {
      v13 = result & v6;
      v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
      if (v10)
      {
        v15 = (*(_DWORD *)v10)++;
        v16 = *v14;
        if (v15)
        {
          *(_DWORD *)v10 = v15;
          v17 = v10;
        }
        else
        {
          v20 = v9;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = WTF::fastFree(v21, v22);
          v9 = v20;
          v17 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v17 = 0;
        v16 = *v14;
      }
      if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)v10)
        break;
      v18 = *v14;
      if (*v14 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v13);
      }
      else
      {
        v19 = *a2;
        if (v18 == *a2 || *((_QWORD *)v18 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v18 + 4) == *((_QWORD *)v19 + 4))
          goto LABEL_42;
      }
      result = i + v13;
      v10 = v17;
    }
LABEL_31:
    a1 = v53;
    if (v11)
    {
      v27 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v9 + 254);
      if (v27)
        ++*(_DWORD *)v27;
      *v11 = v27;
      v11[1] = 0;
      --*(_DWORD *)(qword_1ECE84E10 - 16);
      v14 = v11;
    }
LABEL_35:
    v28 = *a2;
    if (*a2)
      ++*(_DWORD *)v28;
    result = (uint64_t)*v14;
    *v14 = v28;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v14[1] = *a3;
    if (qword_1ECE84E10)
      v29 = *(_DWORD *)(qword_1ECE84E10 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(qword_1ECE84E10 - 12) = v29;
    v33 = qword_1ECE84E10;
    if (qword_1ECE84E10)
      v34 = *(_DWORD *)(qword_1ECE84E10 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(qword_1ECE84E10 - 16) + v34);
    v36 = *(unsigned int *)(qword_1ECE84E10 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_53;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_56:
        result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v37, v14);
        v14 = (WebCore::QualifiedName::QualifiedNameImpl **)result;
        v33 = qword_1ECE84E10;
        if (qword_1ECE84E10)
          v36 = *(unsigned int *)(qword_1ECE84E10 - 4);
        else
          v36 = 0;
        goto LABEL_60;
      }
LABEL_53:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(qword_1ECE84E10 - 12) >= (2 * v36));
      goto LABEL_56;
    }
LABEL_60:
    v32 = v33 + 16 * v36;
    v31 = 1;
    goto LABEL_61;
  }
  v23 = result & v6;
  v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
  v24 = *v14;
  if (!*v14)
    goto LABEL_35;
  v53 = a1;
  v11 = 0;
  v25 = *a2;
  v26 = 1;
  while (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
  {
    v11 = v14;
LABEL_30:
    v23 = (v23 + v26) & v6;
    v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v23);
    v24 = *v14;
    ++v26;
    if (!*v14)
      goto LABEL_31;
  }
  if (v24 != v25 && (*((_QWORD *)v24 + 3) != *((_QWORD *)v25 + 3) || *((_QWORD *)v24 + 4) != *((_QWORD *)v25 + 4)))
    goto LABEL_30;
LABEL_42:
  if (qword_1ECE84E10)
    v30 = *(unsigned int *)(qword_1ECE84E10 - 4);
  else
    v30 = 0;
  a1 = v53;
  v31 = 0;
  v32 = qword_1ECE84E10 + 16 * v30;
LABEL_61:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  char *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***result;
  uint64_t v49;
  WTF::StringImpl ***v51;

  v3 = &InitWebCoreThreadSystemInterface::didInit;
  v4 = qword_1ECE84E10;
  if (qword_1ECE84E10)
  {
    v5 = *(_DWORD *)(qword_1ECE84E10 - 4);
    v6 = *(_DWORD *)(qword_1ECE84E10 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = v7 + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE84E10 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE84E10 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v49 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        goto LABEL_53;
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = *((_QWORD *)v3 + 450);
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v51 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v51;
        v15 = v49;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &InitWebCoreThreadSystemInterface::didInit;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &InitWebCoreThreadSystemInterface::didInit;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v51;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v49;
    goto LABEL_40;
  }
  v14 = 0;
  result = 0;
  if (v4)
  {
LABEL_53:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v14;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGComponentTransferFunctionElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::ComponentTransferType>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3455E20;
  *(_QWORD *)result = &off_1E3455D50;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::ComponentTransferType>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::ComponentTransferType>::~SVGAnimatedEnumerationAnimator(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)a1 = off_1E3455DB8;
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::ComponentTransferType>::~SVGAnimatedEnumerationAnimator(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E3455DB8;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ComponentTransferType>>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ComponentTransferType>>::setFromAndToValues(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;

  *(_BYTE *)(a1 + 65) = WebCore::SVGPropertyTraits<WebCore::ComponentTransferType>::fromString(*a3);
  result = WebCore::SVGPropertyTraits<WebCore::ComponentTransferType>::fromString(*a4);
  *(_BYTE *)(a1 + 66) = result;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ComponentTransferType>>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::ComponentTransferType>::animate(uint64_t a1, float a2)
{
  int v2;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v9;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v5 = a2 > 0.5 && v2 == 1 || a2 == 1.0 || v2 == 3;
  v6 = (unsigned __int8 *)(a1 + 65);
  if (v5)
    v6 = (unsigned __int8 *)(a1 + 66);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v9 = *v6;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 16))(v7, &v9);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ComponentTransferType>>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ComponentTransferType>>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ComponentTransferType>>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationEnumerationFunction<WebCore::ComponentTransferType>::~SVGAnimationEnumerationFunction()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationDiscreteFunction<WebCore::ComponentTransferType>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimationEnumerationFunction<WebCore::ComponentTransferType>::setFromAndToValues(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;

  *(_BYTE *)(a1 + 9) = WebCore::SVGPropertyTraits<WebCore::ComponentTransferType>::fromString(*a3);
  result = WebCore::SVGPropertyTraits<WebCore::ComponentTransferType>::fromString(*a4);
  *(_BYTE *)(a1 + 10) = result;
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

_QWORD *WebCore::SVGAnimatedNumberListAccessor<WebCore::SVGComponentTransferFunctionElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *result;

  v15 = *(_QWORD *)(a1 + 8);
  v16 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = a3;
  *(_QWORD *)v16 = off_1E3456A08;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = 0;
  *(_BYTE *)(v16 + 64) = a4;
  *(_BYTE *)(v16 + 65) = a5;
  *(_BYTE *)(v16 + 66) = a6;
  *(_BYTE *)(v16 + 67) = a7;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = off_1E3456AC0;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  v18[1] = 0;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = 0;
  *((_DWORD *)v18 + 2) = 1;
  *v18 = off_1E346F430;
  v18[5] = 0;
  v18[6] = &unk_1E346F4A8;
  *(_QWORD *)(v16 + 72) = v18;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  v19[1] = 0;
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = 0;
  *((_DWORD *)v19 + 2) = 1;
  v19[5] = 0;
  v19[6] = &unk_1E346F4A8;
  *v19 = off_1E346F430;
  *(_QWORD *)(v16 + 80) = v19;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  *((_DWORD *)result + 2) = 1;
  result[5] = 0;
  result[6] = &unk_1E346F4A8;
  *result = off_1E346F430;
  *(_QWORD *)(v16 + 88) = result;
  *(_QWORD *)(v16 + 56) = &off_1E3456A70;
  *(_QWORD *)v16 = off_1E34569A0;
  *a8 = v16;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberListAccessor<WebCore::SVGComponentTransferFunctionElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

void WebCore::SVGAnimatedNumberListAnimator::~SVGAnimatedNumberListAnimator(WebCore::SVGAnimatedNumberListAnimator *this, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>,WebCore::SVGAnimationNumberListFunction>::~SVGAnimatedPropertyAnimator((uint64_t)this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>,WebCore::SVGAnimationNumberListFunction>::isDiscrete()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>,WebCore::SVGAnimationNumberListFunction>::setFromAndToValues(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;

  v6 = *(_QWORD *)(a1 + 72);
  v7 = *a3;
  if (*a3)
  {
    v8 = *(unsigned __int16 **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebCore::SVGNumberList::parse(v6, v8, (unsigned __int16 *)v9);
  v10 = *a4;
  if (*a4)
  {
    v11 = *(unsigned __int16 **)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  return WebCore::SVGNumberList::parse(*(_QWORD *)(a1 + 80), v11, (unsigned __int16 *)v12);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>,WebCore::SVGAnimationNumberListFunction>::setFromAndByValues(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 56;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 24))(a1 + 56);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, a2);
}

BOOL WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>,WebCore::SVGAnimationNumberListFunction>::setToAtEndOfDurationValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *a2;
  if (*a2)
  {
    v4 = *(unsigned __int16 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  return WebCore::SVGNumberList::parse(v2, v4, (unsigned __int16 *)v5);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>,WebCore::SVGAnimationNumberListFunction>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedNumberListAnimator::animate(WebCore::SVGAnimatedNumberListAnimator *this, WebCore::SVGElement *a2, float a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;

  v8 = *((_QWORD *)this + 4);
  if (!*(_QWORD *)(v8 + 48))
  {
    v9 = *(_QWORD *)(v8 + 40);
    v10 = WTF::fastMalloc((WTF *)0x38);
    v11 = (_QWORD *)WebCore::SVGValuePropertyList<WebCore::SVGNumber>::SVGValuePropertyList(v10, v9, 1);
    *v11 = off_1E346F430;
    v11[6] = &unk_1E346F4A8;
    v12 = *(_DWORD **)(v8 + 48);
    *(_QWORD *)(v8 + 48) = v10;
    if (v12)
    {
      if (v12[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[2];
    }
  }
  return WebCore::SVGAnimationNumberListFunction::animate((uint64_t)this + 56, a3, (uint64_t)a2, a4, (uint64_t *)(v8 + 48));
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>,WebCore::SVGAnimationNumberListFunction>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>,WebCore::SVGAnimationNumberListFunction>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>,WebCore::SVGAnimationNumberListFunction>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationNumberListFunction::~SVGAnimationNumberListFunction(WebCore::SVGAnimationNumberListFunction *this)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = off_1E3456AC0;
  v2 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
}

{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = off_1E3456AC0;
  v2 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::SVGAnimationNumberListFunction::setFromAndToValues(WebCore::SVGAnimationNumberListFunction *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;

  v6 = *((_QWORD *)this + 2);
  v7 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v8 = *(unsigned __int16 **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebCore::SVGNumberList::parse(v6, v8, (unsigned __int16 *)v9);
  v10 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    v11 = *(unsigned __int16 **)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  return WebCore::SVGNumberList::parse(*((_QWORD *)this + 3), v11, (unsigned __int16 *)v12);
}

BOOL WebCore::SVGAnimationNumberListFunction::setToAtEndOfDurationValue(WebCore::SVGAnimationNumberListFunction *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(unsigned __int16 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  return WebCore::SVGNumberList::parse(v2, v4, (unsigned __int16 *)v5);
}

float WebCore::SVGAnimationNumberListFunction::addFromAndToValues(WebCore::SVGAnimationNumberListFunction *this, WebCore::SVGElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float result;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned int *)(v2 + 44);
  if ((_DWORD)v3)
  {
    v4 = *((_QWORD *)this + 3);
    if ((_DWORD)v3 == *(_DWORD *)(v4 + 44))
    {
      v5 = *(uint64_t **)(v4 + 32);
      v6 = *(uint64_t **)(v2 + 32);
      do
      {
        v8 = *v5++;
        v7 = v8;
        v9 = *v6++;
        result = *(float *)(v9 + 28) + *(float *)(v7 + 28);
        *(float *)(v7 + 28) = result;
        --v3;
      }
      while (v3);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>,WebCore::SVGAnimationNumberListFunction>::~SVGAnimatedPropertyAnimator(uint64_t a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  WTF *v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  *(_QWORD *)a1 = off_1E3456A08;
  *(_QWORD *)(a1 + 56) = off_1E3456AC0;
  v3 = *(_DWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *(_DWORD **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *(_DWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD ***)(a1 + 40);
    v8 = 8 * v6;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v10 = *(WTF **)(a1 + 40);
  if (v10)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimationNumberListFunction::animate(uint64_t result, float a2, uint64_t a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  unint64_t v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  BOOL v28;
  uint64_t v29;
  float v30;
  unint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unint64_t v36;
  float v37;
  float v38;
  BOOL v39;
  uint64_t v40;
  float v41;
  unint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;

  v5 = *(_QWORD *)(result + 24);
  v6 = *(unsigned int *)(v5 + 44);
  if ((_DWORD)v6)
  {
    v9 = result;
    v10 = *(unsigned __int8 *)(result + 8);
    v11 = (uint64_t *)(result + 16);
    v12 = *(_DWORD *)(*(_QWORD *)(result + 16) + 44);
    if (v12)
      v13 = v12 == (_DWORD)v6;
    else
      v13 = 1;
    if (v13)
    {
      result = *a5;
      if (*(_DWORD *)(*a5 + 44) < v6)
      {
        WebCore::SVGValuePropertyList<WebCore::SVGNumber>::resize((unsigned int *)result, v6);
        v10 = *(unsigned __int8 *)(v9 + 8);
        v5 = *(_QWORD *)(v9 + 24);
        result = *a5;
        LODWORD(v6) = *(_DWORD *)(v5 + 44);
      }
      if (v10 == 3)
        v15 = a5;
      else
        v15 = v11;
      if (*(_DWORD *)(*(_QWORD *)(v9 + 32) + 44))
        v16 = *(_QWORD *)(v9 + 32);
      else
        v16 = v5;
      if ((_DWORD)v6)
      {
        v17 = *v15;
        v18 = *(unsigned int *)(v17 + 44);
        v19 = *(_QWORD *)(v5 + 32);
        v20 = *(unsigned int *)(v16 + 44);
        v21 = *(unsigned int *)(result + 44);
        v22 = (float)a4;
        if (a2 >= 0.5)
        {
          if (a4)
          {
            if (v10 == 3)
            {
              v31 = 0;
              while (1)
              {
                v32 = 0.0;
                v33 = 0.0;
                if (v31 < v18)
                  v33 = *(float *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v31) + 28);
                if (v31 < v20)
                  v32 = *(float *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v31) + 28);
                if (v21 == v31)
                  break;
                v34 = v33 + (float)((float)(*(float *)(*(_QWORD *)(v19 + 8 * v31) + 28) - v33) * a2);
                if (!*(_BYTE *)(v9 + 9))
                  v34 = *(float *)(*(_QWORD *)(v19 + 8 * v31) + 28);
                v35 = v34 + (float)(v32 * v22);
                if (!*(_BYTE *)(v9 + 10))
                  v35 = v34;
                *(float *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8 * v31++) + 28) = v35;
                if (v6 == v31)
                  return result;
              }
            }
            else
            {
              v42 = 0;
              while (1)
              {
                v43 = 0.0;
                v44 = 0.0;
                if (v42 < v18)
                  v44 = *(float *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v42) + 28);
                if (v42 < v20)
                  v43 = *(float *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v42) + 28);
                if (v21 == v42)
                  break;
                v45 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * v42);
                v46 = v44 + (float)((float)(*(float *)(*(_QWORD *)(v19 + 8 * v42) + 28) - v44) * a2);
                if (!*(_BYTE *)(v9 + 9))
                  v46 = *(float *)(*(_QWORD *)(v19 + 8 * v42) + 28);
                v47 = v46 + (float)(v43 * v22);
                if (!*(_BYTE *)(v9 + 10))
                  v47 = v46;
                if (*(_BYTE *)(v9 + 11))
                  v48 = *(float *)(v45 + 28);
                else
                  v48 = -0.0;
                *(float *)(v45 + 28) = v47 + v48;
                if (v6 == ++v42)
                  return result;
              }
            }
          }
          else
          {
            v36 = 0;
            while (1)
            {
              v37 = 0.0;
              if (v36 < v18)
                v37 = *(float *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v36) + 28);
              if (v21 == v36)
                break;
              v38 = v37 + (float)((float)(*(float *)(*(_QWORD *)(v19 + 8 * v36) + 28) - v37) * a2);
              if (!*(_BYTE *)(v9 + 9))
                v38 = *(float *)(*(_QWORD *)(v19 + 8 * v36) + 28);
              if (*(_BYTE *)(v9 + 11))
                v39 = v10 == 3;
              else
                v39 = 1;
              v40 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * v36);
              v41 = *(float *)(v40 + 28);
              if (v39)
                v41 = -0.0;
              *(float *)(v40 + 28) = v38 + v41;
              if (v6 == ++v36)
                return result;
            }
          }
        }
        else
        {
          v23 = 0;
          while (1)
          {
            v24 = 0.0;
            v25 = 0.0;
            if (v23 < v18)
              v25 = *(float *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v23) + 28);
            if (v23 < v20)
              v24 = *(float *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v23) + 28);
            if (v21 == v23)
              break;
            if (*(_BYTE *)(v9 + 9))
              v25 = v25 + (float)((float)(*(float *)(*(_QWORD *)(v19 + 8 * v23) + 28) - v25) * a2);
            if (*(_BYTE *)(v9 + 10))
              v26 = a4 == 0;
            else
              v26 = 1;
            v27 = v25 + (float)(v24 * v22);
            if (v26)
              v27 = v25;
            if (*(_BYTE *)(v9 + 11))
              v28 = v10 == 3;
            else
              v28 = 1;
            v29 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * v23);
            v30 = *(float *)(v29 + 28);
            if (v28)
              v30 = -0.0;
            *(float *)(v29 + 28) = v27 + v30;
            if (v6 == ++v23)
              return result;
          }
        }
        __break(0xC471u);
      }
    }
    else
    {
      if (a2 >= 0.5)
        return WebCore::SVGValuePropertyList<WebCore::SVGNumber>::operator=(*a5, v5);
      v5 = *(_QWORD *)(result + 16);
      if (v10 != 3)
        return WebCore::SVGValuePropertyList<WebCore::SVGNumber>::operator=(*a5, v5);
    }
  }
  return result;
}

unsigned int *WebCore::SVGValuePropertyList<WebCore::SVGNumber>::resize(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  unint64_t i;
  uint64_t v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  _DWORD *v9;

  v3 = result;
  for (i = result[11]; i < a2; i = v3[11])
  {
    v5 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v5 + 8) = 1;
    *(_QWORD *)(v5 + 16) = 0;
    *(_WORD *)(v5 + 24) = 0;
    *(_DWORD *)(v5 + 28) = 0;
    *(_QWORD *)v5 = off_1E32EE788;
    v8 = (unsigned int *)v5;
    (*(void (**)(_DWORD **__return_ptr, unsigned int *, unsigned int **))(*(_QWORD *)v3 + 80))(&v9, v3, &v8);
    v6 = v9;
    v9 = 0;
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
    result = v8;
    v8 = 0;
    if (result)
    {
      if (result[2] == 1)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  if (i > a2)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, unsigned int *, _QWORD))(*(_QWORD *)v3 + 72))(&v7, v3, (i - 1));
      result = v7;
      v7 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      LODWORD(i) = v3[11];
    }
    while (i > a2);
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGComponentTransferFunctionElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedNumberAccessor<WebCore::SVGComponentTransferFunctionElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberAccessor<WebCore::SVGComponentTransferFunctionElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

void WebCore::SVGAnimatedNumberAnimator::~SVGAnimatedNumberAnimator(WebCore::SVGAnimatedNumberAnimator *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E34567E8;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E34567E8;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<float>,WebCore::SVGAnimationNumberFunction>::isDiscrete()
{
  return 0;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<float>,WebCore::SVGAnimationNumberFunction>::setFromAndToValues(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  float v17;
  unsigned __int16 *v18;
  uint64_t v19;

  v6 = *a3;
  if (*a3)
  {
    v7 = *(unsigned __int16 **)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4);
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      v18 = *(unsigned __int16 **)(v6 + 8);
      v19 = v8;
      v9 = WebCore::genericParseNumber<char16_t,float>(&v18, 1);
      goto LABEL_6;
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v18 = v7;
  v19 = v8;
  v9 = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v18, 1);
LABEL_6:
  if (v19)
    v10 = 0;
  else
    v10 = v9;
  v11 = *(float *)&v10;
  if ((v10 & 0xFF00000000) == 0)
    v11 = 0.0;
  *(float *)(a1 + 68) = v11;
  v12 = *a4;
  if (*a4)
  {
    v13 = *(unsigned __int16 **)(v12 + 8);
    v14 = *(unsigned int *)(v12 + 4);
    if ((*(_BYTE *)(v12 + 16) & 4) == 0)
    {
      v18 = *(unsigned __int16 **)(v12 + 8);
      v19 = v14;
      result = WebCore::genericParseNumber<char16_t,float>(&v18, 1);
      goto LABEL_16;
    }
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  v18 = v13;
  v19 = v14;
  result = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v18, 1);
LABEL_16:
  if (v19)
    v16 = 0;
  else
    v16 = result;
  v17 = *(float *)&v16;
  if ((v16 & 0xFF00000000) == 0)
    v17 = 0.0;
  *(float *)(a1 + 72) = v17;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<float>,WebCore::SVGAnimationNumberFunction>::setFromAndByValues(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 56;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 24))(a1 + 56);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<float>,WebCore::SVGAnimationNumberFunction>::setToAtEndOfDurationValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  float v8;
  unsigned __int16 *v9;
  uint64_t v10;

  v3 = *a2;
  if (*a2)
  {
    v4 = *(unsigned __int16 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4);
    if ((*(_BYTE *)(v3 + 16) & 4) == 0)
    {
      v9 = *(unsigned __int16 **)(v3 + 8);
      v10 = v5;
      result = WebCore::genericParseNumber<char16_t,float>(&v9, 1);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v9 = v4;
  v10 = v5;
  result = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v9, 1);
LABEL_6:
  if (v10)
    v7 = 0;
  else
    v7 = result;
  v8 = *(float *)&v7;
  if ((v7 & 0xFF00000000) == 0)
    v8 = 0.0;
  *(float *)(a1 + 76) = v8;
  *(_BYTE *)(a1 + 80) = 1;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<float>,WebCore::SVGAnimationNumberFunction>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

float WebCore::SVGAnimatedNumberAnimator::animate(WebCore::SVGAnimatedNumberAnimator *this, WebCore::SVGElement *a2, float a3, unsigned int a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  BOOL v17;
  BOOL v18;
  float result;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;

  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v5 = v4[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v20 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v20)
  {
    v21 = 8 * v20;
    v22 = (uint64_t *)v4[3];
    while ((unint64_t)(*v22 + 1) <= 1)
    {
      ++v22;
      v21 -= 8;
      if (!v21)
        goto LABEL_2;
    }
  }
  else
  {
    v22 = (uint64_t *)v4[3];
  }
  v23 = (uint64_t *)(v5 + 8 * v20);
  if (v22 == v23)
    goto LABEL_2;
  v24 = *v22;
LABEL_32:
  if (!*(_QWORD *)(v24 + 8))
  {
    while (++v22 != v23)
    {
      v24 = *v22;
      if ((unint64_t)(*v22 + 1) > 1)
      {
        if (v22 != v23)
          goto LABEL_32;
        break;
      }
    }
LABEL_2:
    v6 = v4 + 5;
    goto LABEL_3;
  }
  v6 = v4 + 6;
LABEL_3:
  v7 = *v6;
  v8 = *((unsigned __int8 *)this + 64);
  v9 = (float *)((char *)this + 68);
  v11 = *(float *)(v7 + 28);
  v10 = (float *)(v7 + 28);
  v12 = v11;
  if (v8 == 3)
    v9 = v10;
  v13 = *v9;
  v14 = 76;
  if (!*((_BYTE *)this + 80))
    v14 = 72;
  if (a3 >= 0.5)
    v15 = *((float *)this + 18);
  else
    v15 = v13;
  v16 = v13 + (float)((float)(*((float *)this + 18) - v13) * a3);
  if (!*((_BYTE *)this + 65))
    v16 = v15;
  if (*((_BYTE *)this + 66))
    v17 = a4 == 0;
  else
    v17 = 1;
  if (!v17)
    v16 = v16 + (float)(*(float *)((char *)this + v14) * (float)a4);
  if (*((_BYTE *)this + 67))
    v18 = v8 == 3;
  else
    v18 = 1;
  if (v18)
    v12 = -0.0;
  result = v16 + v12;
  *v10 = result;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<float>,WebCore::SVGAnimationNumberFunction>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<float>,WebCore::SVGAnimationNumberFunction>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<float>,WebCore::SVGAnimationNumberFunction>::calculateDistance(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  unsigned __int16 *v18;
  uint64_t v19;

  v5 = *a4;
  if (*a4)
  {
    v6 = *(unsigned __int16 **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4);
    if ((*(_BYTE *)(v5 + 16) & 4) == 0)
    {
      v18 = *(unsigned __int16 **)(v5 + 8);
      v19 = v7;
      v8 = WebCore::genericParseNumber<char16_t,float>(&v18, 1);
      goto LABEL_6;
    }
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v18 = v6;
  v19 = v7;
  v8 = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v18, 1);
LABEL_6:
  if (v19)
    v9 = 0;
  else
    v9 = v8;
  v10 = *a3;
  if (*a3)
  {
    v11 = *(unsigned __int16 **)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4);
    if ((*(_BYTE *)(v10 + 16) & 4) == 0)
    {
      v18 = *(unsigned __int16 **)(v10 + 8);
      v19 = v12;
      v13 = WebCore::genericParseNumber<char16_t,float>(&v18, 1);
      goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v18 = v11;
  v19 = v12;
  v13 = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v18, 1);
LABEL_14:
  if (v19)
    v14 = 0;
  else
    v14 = v13;
  v15 = *(float *)&v9;
  v16 = 0.0;
  if ((v9 & 0xFF00000000) == 0)
    v15 = 0.0;
  if ((v14 & 0xFF00000000) != 0)
    v16 = *(float *)&v14;
  return COERCE_UNSIGNED_INT(fabs(v15 - v16)) | 0x100000000;
}

void WebCore::SVGAnimationNumberFunction::~SVGAnimationNumberFunction(WebCore::SVGAnimationNumberFunction *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationNumberFunction::setFromAndToValues(WebCore::SVGAnimationNumberFunction *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  float v17;
  unsigned __int16 *v18;
  uint64_t v19;

  v6 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v7 = *(unsigned __int16 **)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4);
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      v18 = *(unsigned __int16 **)(v6 + 8);
      v19 = v8;
      v9 = WebCore::genericParseNumber<char16_t,float>(&v18, 1);
      goto LABEL_6;
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v18 = v7;
  v19 = v8;
  v9 = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v18, 1);
LABEL_6:
  if (v19)
    v10 = 0;
  else
    v10 = v9;
  v11 = *(float *)&v10;
  if ((v10 & 0xFF00000000) == 0)
    v11 = 0.0;
  *((float *)this + 3) = v11;
  v12 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    v13 = *(unsigned __int16 **)(v12 + 8);
    v14 = *(unsigned int *)(v12 + 4);
    if ((*(_BYTE *)(v12 + 16) & 4) == 0)
    {
      v18 = *(unsigned __int16 **)(v12 + 8);
      v19 = v14;
      result = WebCore::genericParseNumber<char16_t,float>(&v18, 1);
      goto LABEL_16;
    }
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  v18 = v13;
  v19 = v14;
  result = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v18, 1);
LABEL_16:
  if (v19)
    v16 = 0;
  else
    v16 = result;
  v17 = *(float *)&v16;
  if ((v16 & 0xFF00000000) == 0)
    v17 = 0.0;
  *((float *)this + 4) = v17;
  return result;
}

uint64_t WebCore::SVGAnimationNumberFunction::setToAtEndOfDurationValue(WebCore::SVGAnimationNumberFunction *this, const WTF::String *a2)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  float v8;
  unsigned __int16 *v9;
  uint64_t v10;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(unsigned __int16 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4);
    if ((*(_BYTE *)(v3 + 16) & 4) == 0)
    {
      v9 = *(unsigned __int16 **)(v3 + 8);
      v10 = v5;
      result = WebCore::genericParseNumber<char16_t,float>(&v9, 1);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v9 = v4;
  v10 = v5;
  result = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v9, 1);
LABEL_6:
  if (v10)
    v7 = 0;
  else
    v7 = result;
  v8 = *(float *)&v7;
  if ((v7 & 0xFF00000000) == 0)
    v8 = 0.0;
  *((float *)this + 5) = v8;
  *((_BYTE *)this + 24) = 1;
  return result;
}

uint64_t WebCore::SVGAnimationNumberFunction::calculateDistance(WebCore::SVGAnimationNumberFunction *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  unsigned __int16 *v18;
  uint64_t v19;

  v5 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    v6 = *(unsigned __int16 **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4);
    if ((*(_BYTE *)(v5 + 16) & 4) == 0)
    {
      v18 = *(unsigned __int16 **)(v5 + 8);
      v19 = v7;
      v8 = WebCore::genericParseNumber<char16_t,float>(&v18, 1);
      goto LABEL_6;
    }
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v18 = v6;
  v19 = v7;
  v8 = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v18, 1);
LABEL_6:
  if (v19)
    v9 = 0;
  else
    v9 = v8;
  v10 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v11 = *(unsigned __int16 **)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4);
    if ((*(_BYTE *)(v10 + 16) & 4) == 0)
    {
      v18 = *(unsigned __int16 **)(v10 + 8);
      v19 = v12;
      v13 = WebCore::genericParseNumber<char16_t,float>(&v18, 1);
      goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v18 = v11;
  v19 = v12;
  v13 = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v18, 1);
LABEL_14:
  if (v19)
    v14 = 0;
  else
    v14 = v13;
  v15 = *(float *)&v9;
  v16 = 0.0;
  if ((v9 & 0xFF00000000) == 0)
    v15 = 0.0;
  if ((v14 & 0xFF00000000) != 0)
    v16 = *(float *)&v14;
  return COERCE_UNSIGNED_INT(fabs(v15 - v16)) | 0x100000000;
}

float WebCore::SVGAnimationNumberFunction::addFromAndToValues(WebCore::SVGAnimationNumberFunction *this, WebCore::SVGElement *a2)
{
  float result;

  result = *((float *)this + 3) + *((float *)this + 4);
  *((float *)this + 4) = result;
  return result;
}

void WebCore::SVGDescElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char **v14;
  char *v15;

  v6 = bmalloc::api::isoAllocate();
  *(_QWORD *)v6 = off_1E3457860;
  *(_QWORD *)(v6 + 112) = &unk_1E3457D90;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3347E50;
  v7[1] = v6;
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x142C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = a2 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v8 = *a1;
  if (*a1)
    ++*v8;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E34572F8;
  *(_QWORD *)(v6 + 112) = &unk_1E3457828;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_DWORD *)(v6 + 143) = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v9 = 0;
  *(_QWORD *)(v6 + 152) = v9;
  *(_QWORD *)(v6 + 160) = v7;
  v10 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)v10 = &off_1E3452E28;
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 16) = 0;
  *(_WORD *)(v11 + 24) = 0;
  *(_QWORD *)v11 = &off_1E3452EA8;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v10 + 40) = v11;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)v10 = off_1E347BDB8;
  *(_QWORD *)(v6 + 168) = v10;
  v12 = atomic_load(&WebCore::SVGElement::SVGElement(WebCore::QualifiedName const&,WebCore::Document &,WTF::UniqueRef<WebCore::SVGPropertyRegistry> &&,WTF::OptionSet<WebCore::Node::TypeFlag>)::onceFlag);
  if (v12 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WebCore::SVGElement::SVGElement(WebCore::QualifiedName const&,WebCore::Document &,WTF::UniqueRef<WebCore::SVGPropertyRegistry> &&,WTF::OptionSet<WebCore::Node::TypeFlag>)::onceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGElement::SVGElement(WebCore::QualifiedName const&,WebCore::Document &,WTF::UniqueRef<WebCore::SVGPropertyRegistry> &&,WTF::OptionSet<WebCore::Node::TypeFlag>)::$_0 &&>>);
  }
  *(_QWORD *)v6 = off_1E3457860;
  *(_QWORD *)(v6 + 112) = &unk_1E3457D90;
  *a3 = v6;
}

WTF::StringImpl *WebCore::SVGDescElement::description(WebCore::SVGDescElement *this, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::StringBuilder *a6)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  WebCore::Node::textContent(this, 0, a6, &v8, a2);
  WTF::String::simplifyWhiteSpace();
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGDocument::operator new(uint64_t this)
{
  if (this == 3520)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::SVGDocument::SVGDocument(WebCore::SVGDocument *this, WebCore::LocalFrame *a2, const WebCore::Settings *a3, const WTF::URL *a4)
{
  _QWORD *v4;
  double result;

  v4 = WebCore::XMLDocument::XMLDocument((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, 0x20u);
  *v4 = off_1E3456D00;
  v4[24] = &unk_1E3457050;
  v4[36] = &unk_1E3457210;
  v4[63] = &unk_1E3457238;
  v4[64] = &unk_1E3457260;
  v4[68] = &unk_1E3457290;
  v4[69] = &unk_1E34572B8;
  result = 0.0;
  v4[439] = 0;
  return result;
}

BOOL WebCore::SVGDocument::zoomAndPanEnabled(WebCore::SVGDocument *this, void *a2)
{
  uint64_t v2;
  int v3;
  _DWORD *v4;
  _BOOL8 v5;
  __int16 v7;
  __int16 v8;

  v2 = *((_QWORD *)this + 159);
  if (!v2
    || (*(_WORD *)(v2 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    return 0;
  }
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  if (*(_BYTE *)(v2 + 240))
  {
    v4 = (_DWORD *)(WebCore::SVGSVGElement::currentView((WebCore::SVGSVGElement *)v2) + 28);
    v3 = *(_DWORD *)(v2 + 24) - 2;
  }
  else
  {
    v4 = (_DWORD *)(v2 + 236);
  }
  v5 = *v4 == 2;
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = v3;
  }
  else
  {
    v7 = *(_WORD *)(v2 + 30);
    if ((v7 & 0x400) == 0)
    {
      v8 = *(_WORD *)(v2 + 28);
      if ((v8 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v2, a2);
      }
      else
      {
        if ((v8 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
          v7 = *(_WORD *)(v2 + 30);
        }
        *(_WORD *)(v2 + 30) = v7 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  return v5;
}

uint64_t *WebCore::SVGDocument::cloneDocumentWithoutChildren@<X0>(WebCore::SVGDocument *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::LocalFrame *v3;
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;

  v3 = (WebCore::LocalFrame *)*((_QWORD *)this + 85);
  ++*((_DWORD *)v3 + 57);
  WebCore::SVGDocument::create(0, v3, (WebCore::SVGDocument *)((char *)this + 736), &v6);
  v4 = v6;
  v6 = 0;
  *a2 = v4;
  result = WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v6);
  if (*((_DWORD *)v3 + 57) == 1)
    return (uint64_t *)(*(uint64_t (**)(WebCore::LocalFrame *))(*(_QWORD *)v3 + 24))(v3);
  --*((_DWORD *)v3 + 57);
  return result;
}

BOOL WebCore::animationsPausedForDocument(WebCore *this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return !this
      || (v2 = *((_QWORD *)this + 1)) == 0
      || (v3 = *(_QWORD *)(v2 + 24)) == 0
      || (v4 = *(_QWORD *)(v3 + 8)) == 0
      || (*(_WORD *)(v4 + 658) & 4) == 0
      || *(_BYTE *)(v4 + 545) == 0;
}

void WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(WebCore::SVGDocumentExtensions *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF ***v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v14 = (uint64_t *)*((_QWORD *)this + 7);
    v15 = 8 * v3;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)(v16 + 24) == 2)
        {
          if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v16);
        }
        else
        {
          *(_DWORD *)(v16 + 24) -= 2;
        }
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF ***)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*v5)
      WTF::HashTable<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::SVGResources>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(*v5, a2);
    WTF::fastFree((WTF *)v5, a2);
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 4, a2);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 2, v6);
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v11 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v11)
      {
        v17 = v8;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
        v8 = v17;
      }
      v12 = *(WTF **)(v8 + 16);
      if (v12)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        v13 = v8;
        WTF::fastFree(v12, v7);
        v8 = v13;
      }
      WTF::fastFree((WTF *)v8, v7);
    }
  }
}

uint64_t *WebCore::SVGDocumentExtensions::allSVGSVGElements@<X0>(WebCore::SVGDocumentExtensions *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  return WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>,WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>&&)#1},WTF::Vector<WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(a2, (_DWORD *)this + 4);
}

uint64_t WebCore::SVGDocumentExtensions::startAnimations(WebCore::SVGDocumentExtensions *this)
{
  uint64_t result;
  void *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  double v7;
  double v8;
  double v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  double v15;

  v13 = 0;
  v14 = 0;
  result = (uint64_t)WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>,WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>&&)#1},WTF::Vector<WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t *)&v13, (_DWORD *)this + 4);
  v3 = v13;
  if (HIDWORD(v14))
  {
    v4 = 8 * HIDWORD(v14);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)v3 + 248);
      ++*(_DWORD *)v5;
      if (*(double *)(v5 + 8) == 0.0 && WebCore::gNonUtilityPageCount != 0)
      {
        WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
        v8 = v7;
        v9 = *(double *)(v5 + 40);
        *(double *)(v5 + 32) = v8 - v9;
        *(double *)(v5 + 8) = v8 - v9;
        v15 = v9;
        result = (uint64_t)WebCore::SMILTimeContainer::updateAnimations((_BYTE *)v5, (uint64_t *)&v15, v9 != 0.0);
        *(_QWORD *)(v5 + 40) = 0;
        if (*(double *)(v5 + 16) != 0.0)
        {
          *(double *)(v5 + 16) = v8;
          if ((*(_QWORD *)(v5 + 88) & 0xFFFFFFFFFFFFLL) != 0)
            result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v5 + 56));
        }
      }
      if (*(_DWORD *)v5 == 1)
      {
        WebCore::SMILTimeContainer::~SMILTimeContainer((WebCore::SMILTimeContainer *)v5, v2);
        result = WTF::fastFree(v10, v11);
      }
      else
      {
        --*(_DWORD *)v5;
      }
      v3 = (WTF *)((char *)v3 + 8);
      v4 -= 8;
    }
    while (v4);
    v3 = v13;
    if (HIDWORD(v14))
    {
      v12 = 8 * HIDWORD(v14);
      do
      {
        result = *(_QWORD *)v3;
        *(_QWORD *)v3 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)result);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        v3 = (WTF *)((char *)v3 + 8);
        v12 -= 8;
      }
      while (v12);
      v3 = v13;
    }
  }
  if (v3)
  {
    v13 = 0;
    LODWORD(v14) = 0;
    return WTF::fastFree(v3, v2);
  }
  return result;
}

_QWORD *WebCore::SVGDocumentExtensions::pauseAnimations(_QWORD *this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  uint64_t v20;

  v2 = this;
  v3 = this[2];
  if (!v3)
  {
    v4 = 0;
    v5 = 0;
LABEL_3:
    v6 = v4;
    v4 = v3 + 8 * v5;
    goto LABEL_4;
  }
  v5 = *(unsigned int *)(v3 - 4);
  v4 = v3 + 8 * v5;
  if (!*(_DWORD *)(v3 - 12))
    goto LABEL_3;
  if (!(_DWORD)v5)
  {
    v10 = 0;
    v6 = this[2];
    goto LABEL_19;
  }
  v11 = 8 * v5;
  v6 = this[2];
  while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
  {
    v6 += 8;
    v11 -= 8;
    if (!v11)
    {
      v6 = v4;
      break;
    }
  }
LABEL_4:
  if (!v3)
  {
    v7 = 0;
    goto LABEL_6;
  }
  v10 = *(unsigned int *)(v3 - 4);
LABEL_19:
  v7 = v3 + 8 * v10;
LABEL_6:
  if (v7 != v6)
  {
    while (!*(_QWORD *)(*(_QWORD *)v6 + 8))
    {
      v20 = v6 + 8;
      v6 = v4;
      if (v20 != v4)
      {
        v6 = v20;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 8;
          if (v6 == v4)
          {
            v6 = v4;
            break;
          }
        }
      }
      if (v6 == v7)
      {
        v6 = v7;
        break;
      }
    }
  }
  if (v3)
    v8 = v3 + 8 * *(unsigned int *)(v3 - 4);
  else
    v8 = 0;
  while (v6 != v8)
  {
    v12 = *(_QWORD *)(*(_QWORD *)v6 + 8);
    *(_DWORD *)(v12 + 24) += 2;
    v13 = *(_QWORD *)(v12 + 248);
    ++*(_DWORD *)v13;
    if (*(double *)(v13 + 16) == 0.0)
    {
      this = (_QWORD *)WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      *(double *)(v13 + 16) = v14;
      if (*(double *)(v13 + 8) != 0.0)
      {
        *(double *)(v13 + 24) = v14 - *(double *)(v13 + 32) + *(double *)(v13 + 24);
        if ((*(_QWORD *)(v13 + 88) & 0xFFFFFFFFFFFFLL) != 0)
          this = (_QWORD *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v13 + 56));
      }
    }
    if (*(_DWORD *)v13 == 1)
    {
      WebCore::SMILTimeContainer::~SMILTimeContainer((WebCore::SMILTimeContainer *)v13, a2);
      this = (_QWORD *)WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v13;
    }
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      v18 = *(_WORD *)(v12 + 30);
      if ((v18 & 0x400) == 0)
      {
        v19 = *(_WORD *)(v12 + 28);
        if ((v19 & 0xF000) == 0x9000)
        {
          this = WebCore::Document::removedLastRef((WebCore::Document *)v12, a2);
        }
        else
        {
          if ((v19 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 160) + 16))(*(_QWORD *)(v12 + 160));
            v18 = *(_WORD *)(v12 + 30);
          }
          *(_WORD *)(v12 + 30) = v18 | 0x400;
          this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
        }
      }
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
    v9 = v4;
    if (v6 + 8 != v4)
    {
      v9 = v6 + 8;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 8;
        if (v9 == v4)
        {
          v9 = v4;
          break;
        }
      }
    }
    v6 = v7;
    if (v9 != v7)
    {
      v6 = v9;
      if (!*(_QWORD *)(*(_QWORD *)v9 + 8))
      {
        while (1)
        {
          v17 = v6 + 8;
          v6 = v4;
          if (v17 != v4)
          {
            v6 = v17;
            while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
            {
              v6 += 8;
              if (v6 == v4)
              {
                v6 = v4;
                break;
              }
            }
          }
          if (v6 == v7)
            break;
          if (*(_QWORD *)(*(_QWORD *)v6 + 8))
            goto LABEL_15;
        }
        v6 = v7;
      }
    }
LABEL_15:
    ++*((_DWORD *)v2 + 6);
  }
  *((_BYTE *)v2 + 72) = 1;
  return this;
}

uint64_t WebCore::SVGDocumentExtensions::unpauseAnimations(WebCore::SVGDocumentExtensions *this, WebCore::Document *a2)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  double *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  WTF *v20;
  void *v21;
  __int16 v22;
  __int16 v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v4 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v4 + 2;
  result = WebCore::animationsPausedForDocument(*(WebCore **)(v3 + 528), a2);
  v6 = result;
  if (v4)
  {
    *(_DWORD *)(v3 + 24) = v4;
  }
  else
  {
    v22 = *(_WORD *)(v3 + 30);
    if ((v22 & 0x400) == 0)
    {
      v23 = *(_WORD *)(v3 + 28);
      if ((v23 & 0xF000) == 0x9000)
      {
        result = WebCore::Document::removedLastRef((WebCore::Document *)v3);
      }
      else
      {
        if ((v23 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
          v22 = *(_WORD *)(v3 + 30);
        }
        *(_WORD *)(v3 + 30) = v22 | 0x400;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
      }
    }
  }
  if ((v6 & 1) == 0)
  {
    WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v26, (uint64_t *)this + 2);
    result = (uint64_t)WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(&v24, (uint64_t *)this + 2);
    v8 = v27;
    v9 = v25;
    if (v27 != v25)
    {
      v11 = v28;
      v10 = v29;
      v12 = v26;
      do
      {
        v13 = *(_QWORD *)(*(_QWORD *)v8 + 8);
        *(_DWORD *)(v13 + 24) += 2;
        v14 = *(double **)(v13 + 248);
        v15 = (*(_DWORD *)v14)++;
        if (v14[2] == 0.0)
        {
          if (!v15)
            goto LABEL_36;
        }
        else
        {
          result = (uint64_t)WebCore::SMILTimeContainer::resume((WTF::MonotonicTime *)v14);
          v15 = *(_DWORD *)v14 - 1;
          if (*(_DWORD *)v14 == 1)
          {
LABEL_36:
            WebCore::SMILTimeContainer::~SMILTimeContainer((WebCore::SMILTimeContainer *)v14, v7);
            result = WTF::fastFree(v20, v21);
            goto LABEL_9;
          }
        }
        *(_DWORD *)v14 = v15;
LABEL_9:
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          v18 = *(_WORD *)(v13 + 30);
          if ((v18 & 0x400) == 0)
          {
            v19 = *(_WORD *)(v13 + 28);
            if ((v19 & 0xF000) == 0x9000)
            {
              result = WebCore::Document::removedLastRef((WebCore::Document *)v13);
            }
            else
            {
              if ((v19 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 160) + 16))(*(_QWORD *)(v13 + 160));
                v18 = *(_WORD *)(v13 + 30);
              }
              *(_WORD *)(v13 + 30) = v18 | 0x400;
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
            }
          }
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
        v27 = v8 + 8;
        v16 = v11;
        if (v8 + 8 != v11)
        {
          v16 = v8 + 8;
          while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
          {
            v16 += 8;
            if (v16 == v11)
            {
              v16 = v11;
              break;
            }
          }
          v27 = v16;
        }
        v8 = v10;
        if (v16 != v10)
        {
          while (!*(_QWORD *)(*(_QWORD *)v16 + 8))
          {
            v17 = v16 + 8;
            v27 = v17;
            v16 = v11;
            if (v17 != v11)
            {
              v16 = v17;
              while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
              {
                v16 += 8;
                v27 = v16;
                if (v16 == v11)
                {
                  v16 = v11;
                  break;
                }
              }
            }
            if (v16 == v10)
            {
              v8 = v10;
              goto LABEL_18;
            }
          }
          v8 = v16;
        }
LABEL_18:
        ++*((_DWORD *)v12 + 2);
      }
      while (v8 != v9);
    }
    *((_BYTE *)this + 72) = 0;
  }
  return result;
}

uint64_t WebCore::SVGElement::isOutermostSVGSVGElement(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (this)
  {
    v1 = this;
    if (*(_QWORD *)(*(_QWORD *)(this + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
      return 0;
    v2 = *(_QWORD *)(this + 32);
    if (!v2)
      return 1;
    v3 = *(_WORD *)(v2 + 28);
    this = (v3 & 0x20) == 0;
    if ((v3 & 0x20) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24))
    {
      return 1;
    }
    if ((*(_BYTE *)(v1 + 22) & 0x10) != 0)
    {
      v4 = **(_QWORD **)(v1 + 40);
      if (v4 && (*(_WORD *)(v4 + 28) & 0x80) != 0)
      {
        v6 = *(_QWORD *)(v4 + 200);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            if ((*(_WORD *)(v7 + 28) & 0x20) != 0
              && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24))
            {
              return 0;
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::SVGElement::sendLoadEventIfPossible(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t StatusReg;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  __int16 v16;
  unsigned int *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if ((*(_BYTE *)(this + 22) & 8) == 0)
    return this;
  v1 = this;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 528);
  if (!v2)
    return this;
  if (!*(_QWORD *)(v2 + 8))
    return this;
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 1272))(this);
  if (!(_DWORD)this)
    return this;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_QWORD *)(StatusReg + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
  {
    this = WebCore::threadGlobalDataSlow((WebCore *)this);
    v5 = this;
  }
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    this = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = *(_QWORD *)(v1 + 16);
  if ((v7 & 0x1000000000000) != 0)
  {
    v25 = v7 & 0xFFFFFFFFFFFFLL;
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26)
    {
      v27 = *(_QWORD **)(v25 + 16);
      v28 = *(_QWORD *)(v6 + 1104);
      v29 = 32 * v26;
      do
      {
        if (*v27 == v28)
          goto LABEL_68;
        v27 += 4;
        v29 -= 32;
      }
      while (v29);
    }
  }
  if ((*(_WORD *)(v1 + 28) & 0x80) != 0)
  {
    v31 = *(_QWORD *)(v1 + 200);
    if (!v31)
      return this;
    v8 = (uint64_t *)(v31 + 8);
  }
  else
  {
    v8 = (uint64_t *)(v1 + 32);
  }
  v9 = *v8;
  if (!*v8)
    return this;
  v10 = *(_WORD *)(v9 + 28);
  if ((v10 & 0x80) == 0)
  {
    if ((v10 & 8) != 0)
      goto LABEL_16;
    return this;
  }
  v32 = *(_QWORD *)(v9 + 200);
  if (!v32)
    return this;
  v9 = *(_QWORD *)(v32 + 8);
  if (!v9)
    return this;
  while (1)
  {
LABEL_16:
    v11 = *(_QWORD *)(StatusReg + 736);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 96);
      if (!v12)
        goto LABEL_29;
    }
    else
    {
      this = WTF::Thread::initializeCurrentTLS((WTF::Thread *)this);
      v11 = this;
      v12 = *(_QWORD *)(this + 96);
      if (!v12)
      {
LABEL_29:
        v12 = WTF::fastMalloc((WTF *)0x60);
        *(_DWORD *)(v12 + 8) = 1;
        v17 = (unsigned int *)(v12 + 8);
        *(_QWORD *)v12 = off_1E31F4A70;
        v18 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        *v18 = 0;
        *(_QWORD *)(v12 + 16) = v18;
        *(_QWORD *)v12 = off_1E3407108;
        *(_BYTE *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 32) = 0;
        *(_QWORD *)(v12 + 40) = 0;
        v19 = WTF::fastMalloc((WTF *)0x28);
        *(_DWORD *)(v19 + 28) = 0;
        *(_QWORD *)(v19 + 32) = 0;
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v19 + 16) = 0;
        *(_QWORD *)v19 = 0;
        *(_WORD *)(v19 + 24) = 0;
        if (WTF::isUIThread((WTF *)v19))
        {
          {
            WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
            qword_1ECE90CE8 = 0;
          }
          WebCore::ThreadTimers::setSharedTimer((uint64_t **)v19, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
        }
        *(_QWORD *)(v12 + 48) = v19;
        *(_OWORD *)(v12 + 56) = 0u;
        *(_OWORD *)(v12 + 72) = 0u;
        *(_BYTE *)(v12 + 88) = 0;
        if (pthread_main_np())
        {
          WebCore::sharedMainThreadStaticData = v12;
          do
            v20 = __ldaxr(v17);
          while (__stlxr(v20 + 1, v17));
        }
        this = *(_QWORD *)(v11 + 96);
        *(_QWORD *)(v11 + 96) = v12;
        if (this)
        {
          v21 = (unsigned int *)(this + 8);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)(this + 8));
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          }
        }
      }
    }
    v13 = *(_QWORD *)(v12 + 40);
    if (!v13)
    {
      this = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
      v13 = *(_QWORD *)(v12 + 40);
    }
    v14 = *(_QWORD *)(v9 + 16);
    if ((v14 & 0x1000000000000) != 0)
    {
      v33 = v14 & 0xFFFFFFFFFFFFLL;
      v34 = *(unsigned int *)(v33 + 28);
      if ((_DWORD)v34)
      {
        v35 = *(_QWORD *)(v33 + 16);
        v36 = *(_QWORD *)(v13 + 1104);
        v37 = 32 * v34;
        while (*(_QWORD *)v35 != v36)
        {
          v35 += 32;
          v37 -= 32;
          if (!v37)
            goto LABEL_21;
        }
        v38 = *(unsigned int *)(v35 + 20);
        if ((_DWORD)v38)
          break;
      }
    }
LABEL_21:
    if (v9 && (*(_WORD *)(v9 + 28) & 0x80) != 0)
    {
      v24 = *(_QWORD *)(v9 + 200);
      if (!v24)
        return this;
      v15 = (uint64_t *)(v24 + 8);
    }
    else
    {
      v15 = (uint64_t *)(v9 + 32);
    }
    v9 = *v15;
    if (!*v15)
      return this;
    v16 = *(_WORD *)(v9 + 28);
    if ((v16 & 0x80) != 0)
    {
      v30 = *(_QWORD *)(v9 + 200);
      if (!v30)
        return this;
      v9 = *(_QWORD *)(v30 + 8);
    }
    else if ((v16 & 8) == 0)
    {
      return this;
    }
    if (!v9)
      return this;
  }
  v39 = *(_QWORD *)(v35 + 8);
  v40 = 8 * v38;
  while ((*(_BYTE *)(*(_QWORD *)v39 + 4) & 1) == 0)
  {
    v39 += 8;
    v40 -= 8;
    if (!v40)
      goto LABEL_21;
  }
LABEL_68:
  v41 = WebCore::eventNames((WebCore *)this);
  WebCore::Event::create((_QWORD *)(v41 + 1104), 0, 0, 0, &v42);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 48))(v1, v42);
  this = v42;
  v42 = 0;
  if (this)
  {
    if (*(_DWORD *)(this + 16) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    else
      --*(_DWORD *)(this + 16);
  }
  return this;
}

uint64_t WebCore::SVGDocumentExtensions::reportWarning(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_DWORD *)(v3 + 4);
    *(_DWORD *)v3 += 2;
    if (v4 < 0 || (this = (v4 + 9), __OFADD__(v4, 9)))
    {
      v10 = 0;
      goto LABEL_30;
    }
    v5 = (*(unsigned __int8 *)(v3 + 16) >> 2) & 1;
  }
  else
  {
    v5 = 1;
    this = 9;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v5, (int8x16_t *)"Warning: ", 9u, v3, &v10);
  this = (uint64_t)v10;
  if (!v10)
  {
LABEL_30:
    __break(0xC471u);
    return this;
  }
  v7 = *(_QWORD *)(v2 + 528);
  if (v7 && *(_QWORD *)(v7 + 8))
  {
    WebCore::Document::addConsoleMessage((_QWORD *)v2, 6, 1, &v10, 0);
    this = (uint64_t)v10;
    v10 = 0;
    if (!this)
      goto LABEL_13;
  }
  else
  {
    v10 = 0;
  }
  if (*(_DWORD *)this == 2)
  {
    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
    if (!v3)
      goto LABEL_16;
    goto LABEL_14;
  }
  *(_DWORD *)this -= 2;
LABEL_13:
  if (!v3)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v3 == 2)
    this = WTF::StringImpl::destroy((WTF::StringImpl *)v3, v6);
  else
    *(_DWORD *)v3 -= 2;
LABEL_16:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    v8 = *(_WORD *)(v2 + 30);
    if ((v8 & 0x400) == 0)
    {
      v9 = *(_WORD *)(v2 + 28);
      if ((v9 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v2);
      }
      else
      {
        if ((v9 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
          v8 = *(_WORD *)(v2 + 30);
        }
        *(_WORD *)(v2 + 30) = v8 | 0x400;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::SVGDocumentExtensions::reportError(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_DWORD *)(v3 + 4);
    *(_DWORD *)v3 += 2;
    if (v4 < 0 || (this = (v4 + 7), __OFADD__(v4, 7)))
    {
      v10 = 0;
      goto LABEL_30;
    }
    v5 = (*(unsigned __int8 *)(v3 + 16) >> 2) & 1;
  }
  else
  {
    v5 = 1;
    this = 7;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v5, (int8x16_t *)"Error: ", 7u, v3, &v10);
  this = (uint64_t)v10;
  if (!v10)
  {
LABEL_30:
    __break(0xC471u);
    return this;
  }
  v7 = *(_QWORD *)(v2 + 528);
  if (v7 && *(_QWORD *)(v7 + 8))
  {
    WebCore::Document::addConsoleMessage((_QWORD *)v2, 6, 2, &v10, 0);
    this = (uint64_t)v10;
    v10 = 0;
    if (!this)
      goto LABEL_13;
  }
  else
  {
    v10 = 0;
  }
  if (*(_DWORD *)this == 2)
  {
    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
    if (!v3)
      goto LABEL_16;
    goto LABEL_14;
  }
  *(_DWORD *)this -= 2;
LABEL_13:
  if (!v3)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v3 == 2)
    this = WTF::StringImpl::destroy((WTF::StringImpl *)v3, v6);
  else
    *(_DWORD *)v3 -= 2;
LABEL_16:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    v8 = *(_WORD *)(v2 + 30);
    if ((v8 & 0x400) == 0)
    {
      v9 = *(_WORD *)(v2 + 28);
      if ((v9 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v2);
      }
      else
      {
        if ((v9 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
          v8 = *(_WORD *)(v2 + 30);
        }
        *(_WORD *)(v2 + 30) = v8 | 0x400;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::SVGDocumentExtensions::addElementToRebuild(uint64_t this, WebCore::SVGElement *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;

  v3 = this;
  v4 = *(unsigned int *)(this + 68);
  if ((_DWORD)v4 != *(_DWORD *)(this + 64))
  {
    v11 = (_QWORD *)(*(_QWORD *)(this + 56) + 8 * v4);
LABEL_12:
    *((_DWORD *)a2 + 6) += 2;
    *v11 = a2;
    *(_DWORD *)(v3 + 68) = v4 + 1;
    return this;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  if (!(v7 >> 29))
  {
    v8 = *(void **)(this + 56);
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(v3 + 64) = v7;
    *(_QWORD *)(v3 + 56) = v9;
    this = (uint64_t)memcpy(v9, v8, 8 * v4);
    if (v8)
    {
      if (*(void **)(v3 + 56) == v8)
      {
        *(_QWORD *)(v3 + 56) = 0;
        *(_DWORD *)(v3 + 64) = 0;
      }
      this = WTF::fastFree((WTF *)v8, v10);
    }
    v4 = *(unsigned int *)(v3 + 68);
    v11 = (_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
    goto LABEL_12;
  }
  __break(0xC471u);
  return this;
}

WebCore::Node *WebCore::SVGDocumentExtensions::rebuildAllElementReferencesForTarget(WebCore::SVGDocumentExtensions *this, WebCore::SVGElement *a2)
{
  WebCore::Node *result;
  void *v3;
  WTF *v4;
  uint64_t v5;
  WebCore::Node *v6;
  uint64_t v7;
  WebCore::Node *v8;
  WTF *v9;
  int v10;
  unsigned int v11;

  result = (WebCore::Node *)*((_QWORD *)a2 + 15);
  if (result)
  {
    result = (WebCore::Node *)WTF::copyToVectorOf<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((uint64_t)result, a2, (uint64_t)&v9);
    v4 = v9;
    if (v11)
    {
      v5 = 8 * v11;
      do
      {
        v6 = *(WebCore::Node **)v4;
        v4 = (WTF *)((char *)v4 + 8);
        *((_DWORD *)v6 + 6) += 2;
        v8 = v6;
        (*(void (**)(WebCore::Node *, uint64_t *))(*(_QWORD *)v6 + 1240))(v6, &WebCore::SVGNames::hrefAttr);
        result = (WebCore::Node *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v8);
        v5 -= 8;
      }
      while (v5);
      v4 = v9;
      if (v11)
      {
        v7 = 8 * v11;
        do
        {
          result = *(WebCore::Node **)v4;
          *(_QWORD *)v4 = 0;
          if (result)
          {
            if (*((_DWORD *)result + 6) == 2)
            {
              if ((*((_WORD *)result + 15) & 0x400) == 0)
                result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v3);
            }
            else
            {
              *((_DWORD *)result + 6) -= 2;
            }
          }
          v4 = (WTF *)((char *)v4 + 8);
          v7 -= 8;
        }
        while (v7);
        v4 = v9;
      }
    }
    if (v4)
    {
      v9 = 0;
      v10 = 0;
      return (WebCore::Node *)WTF::fastFree(v4, v3);
    }
  }
  return result;
}

uint64_t WebCore::SVGElement::SVGElement(uint64_t a1, _DWORD **a2, uint64_t a3, uint64_t *a4, __int16 a5)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v16;
  char **v17;
  char *v18;

  v7 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_1968BC9D0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_WORD *)(a1 + 28) = a5 | 0x142C;
  *(_WORD *)(a1 + 30) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if ((a5 & 0xE000 | 0x1000) != 0x9000)
  {
    if ((a5 & 0x80) != 0)
      v7 = 0;
    else
      v7 = a3;
  }
  if (v7)
    v8 = v7 + 96;
  else
    v8 = 0;
  *(_QWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  ++*(_DWORD *)(a3 + 3324);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v9 = *a2;
  if (*a2)
    ++*v9;
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = off_1E34572F8;
  *(_QWORD *)(a1 + 112) = &unk_1E3457828;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 143) = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v10 = 0;
  *(_QWORD *)(a1 + 152) = v10;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 160) = v11;
  v12 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)v12 = &off_1E3452E28;
  v13 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 16) = 0;
  *(_WORD *)(v13 + 24) = 0;
  *(_QWORD *)v13 = &off_1E3452EA8;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v12 + 40) = v13;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)v12 = off_1E347BDB8;
  *(_QWORD *)(a1 + 168) = v12;
  v14 = atomic_load(&WebCore::SVGElement::SVGElement(WebCore::QualifiedName const&,WebCore::Document &,WTF::UniqueRef<WebCore::SVGPropertyRegistry> &&,WTF::OptionSet<WebCore::Node::TypeFlag>)::onceFlag);
  if (v14 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WebCore::SVGElement::SVGElement(WebCore::QualifiedName const&,WebCore::Document &,WTF::UniqueRef<WebCore::SVGPropertyRegistry> &&,WTF::OptionSet<WebCore::Node::TypeFlag>)::onceFlag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGElement::SVGElement(WebCore::QualifiedName const&,WebCore::Document &,WTF::UniqueRef<WebCore::SVGPropertyRegistry> &&,WTF::OptionSet<WebCore::Node::TypeFlag>)::$_0 &&>>);
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedString::create@<X0>(WebCore::SVGAnimatedString *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 16) = this;
  *(_QWORD *)v5 = &off_1E3452E28;
  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = &off_1E3452EA8;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(v5 + 40) = result;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)v5 = off_1E347BDB8;
  *a2 = v5;
  return result;
}

uint64_t WebCore::SVGElementRareData::setCorrespondingElement(WebCore::SVGElementRareData *this, WebCore::SVGElement *a2)
{
  WebCore::SVGElementRareData *v2;
  unsigned int *v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;

  v2 = this;
  if (a2)
  {
    v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
    v3 = v9;
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    v2 = this;
  }
  else
  {
    v3 = 0;
  }
  result = *((_QWORD *)v2 + 7);
  *((_QWORD *)v2 + 7) = v3;
  if (result)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)result));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)result);
      v7 = *(unsigned int *)(result + 28);
      if ((_DWORD)v7)
      {
        v13 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v7));
        result = v13;
      }
      v8 = *(WTF **)(result + 16);
      if (v8)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v12 = result;
        WTF::fastFree(v8, a2);
        result = v12;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void `non-virtual thunk to'WebCore::SVGElement::~SVGElement(WebCore::SVGElement *this, void *a2)
{
  WebCore::SVGElement::~SVGElement((WebCore::SVGElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGElement::~SVGElement((WebCore::SVGElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGElement::willRecalcStyle(uint64_t result, int a2)
{
  uint64_t v2;
  __int16 v3;

  v2 = *(_QWORD *)(result + 120);
  if (v2)
  {
    v3 = *(_WORD *)(result + 30);
    if ((v3 & 0x40) == 0 && (a2 || (v3 & 0x20) != 0 || (*(_QWORD *)(result + 64) & 0x7000000000000) != 0))
      *(_BYTE *)(v2 + 64) |= 4u;
  }
  return result;
}

uint64_t WebCore::SVGElement::ensureSVGRareData(WebCore::SVGElement *this)
{
  uint64_t result;
  void *v3;
  WebCore::SVGElementRareData *v4;
  WTF *v5;
  void *v6;

  result = *((_QWORD *)this + 15);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x60);
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_BYTE *)(result + 64) &= 0xF8u;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 72) = 0;
    v4 = (WebCore::SVGElementRareData *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = result;
    if (v4)
    {
      WebCore::SVGElementRareData::~SVGElementRareData(v4, v3);
      WTF::fastFree(v5, v6);
      return *((_QWORD *)this + 15);
    }
  }
  return result;
}

uint64_t WebCore::SVGElement::isInnerSVGSVGElement(uint64_t this)
{
  uint64_t v1;

  if (this)
  {
    if (*(_QWORD *)(*(_QWORD *)(this + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24)
      && (v1 = *(_QWORD *)(this + 32)) != 0)
    {
      return (*(unsigned __int16 *)(v1 + 28) >> 5) & 1;
    }
    else
    {
      return 0;
    }
  }
  return this;
}

uint64_t WebCore::SVGElement::reportAttributeParsingError(uint64_t result, int a2, WTF::StringImpl *a3, WTF::StringImpl **a4)
{
  uint64_t v4;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebCore::Document *v12;
  int *v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebCore::Document *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  if (!a2)
    return result;
  v4 = result;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 104))(&v29);
  WebCore::QualifiedName::toString(a3, &v28);
  v7 = *a4;
  if (*a4)
    *(_DWORD *)v7 += 2;
  v27 = v7;
  WTF::makeString<char,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>((_BYTE *)0x3C, (uint64_t *)&v29, "> attribute ", 13, (uint64_t *)&v28, "=\"", 3, (uint64_t *)&v27, &v30, (int8x16_t *)"\"", 2);
  v9 = v27;
  v27 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v28;
  v28 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v29;
  v29 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WebCore::Document **)(*(_QWORD *)(v4 + 40) + 8);
  *((_DWORD *)v12 + 6) += 2;
  v26 = v12;
  v13 = (int *)WebCore::Document::svgExtensions(v12);
  v14 = *v13 + 1;
  *v13 = v14;
  if (a2 == 1)
  {
    v19 = v30;
    if (v30)
      *(_DWORD *)v30 += 2;
    v23 = v19;
    WTF::makeString<WTF::ASCIILiteral,WTF::String>((int8x16_t *)"Invalid value for ", 19, (uint64_t *)&v23, &v25);
    WebCore::SVGDocumentExtensions::reportError((uint64_t)v13, (const WTF::String *)&v25);
    v20 = v25;
    v25 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v16);
      else
        *(_DWORD *)v20 -= 2;
    }
    v18 = v23;
    v23 = 0;
    if (!v18)
      goto LABEL_31;
    goto LABEL_29;
  }
  if (a2 != 2)
    goto LABEL_32;
  v15 = (uint64_t)v30;
  if (v30)
    *(_DWORD *)v30 += 2;
  v24 = (WTF::StringImpl *)v15;
  WTF::makeString<WTF::ASCIILiteral,WTF::String>((int8x16_t *)"Invalid negative value for ", 28, (uint64_t *)&v24, &v25);
  WebCore::SVGDocumentExtensions::reportError((uint64_t)v13, (const WTF::String *)&v25);
  v17 = v25;
  v25 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
LABEL_29:
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
LABEL_31:
  v14 = *v13;
LABEL_32:
  if (v14)
  {
    *v13 = v14 - 1;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v26);
    result = (uint64_t)v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

_BYTE *WTF::makeString<char,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>@<X0>(_BYTE *result@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _OWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, _QWORD *a9@<X8>, int8x16_t *a10, uint64_t a11)
{
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  int8x16_t *v32;
  size_t v33;
  size_t v34;
  uint64_t v35;
  _WORD *v36;
  int8x16_t *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  _BYTE *v42;
  size_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  size_t v48;
  uint64_t v49;
  _BYTE *v50;
  size_t v51;
  unsigned __int128 *v52;
  _BYTE *v53;
  size_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  char *v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  char *v63;
  char *v64;
  char *v65;
  __int16 v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  int8x16_t v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  char *v75;
  char *v76;
  __int16 v77;
  int8x16_t *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  char *v88;
  char *v89;
  char *v90;
  __int16 v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  int8x16_t v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  char *v100;
  char *v101;
  __int16 v102;
  int8x16_t *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  __int128 v108;
  char *v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  char *v113;
  char *v114;
  char *v115;
  __int16 v116;
  char *v117;
  char *v118;
  char *v119;
  __int128 v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  char *v124;
  char *v125;
  char *v126;
  __int16 v127;
  unsigned __int128 *v128;
  unsigned __int128 *v129;
  unsigned __int128 v130;
  unsigned __int128 *v131;
  unsigned __int128 *v132;
  unsigned __int128 v133;
  unsigned __int128 *v134;
  unsigned __int128 *v135;
  unsigned __int128 v136;
  char v137;
  char v138;
  char v139;
  size_t v141;
  size_t __n;
  uint64_t v143;
  int8x16x2_t v144;
  int8x16x2_t v145;
  int8x16x2_t v146;
  int8x16x2_t v147;
  int8x16x2_t v148;
  int8x16x2_t v149;
  int8x16x2_t v150;
  int8x16x2_t v151;
  int8x16x2_t v152;
  int8x16x2_t v153;
  int8x16x2_t v154;
  int8x16x2_t v155;
  int8x16x2_t v156;
  int8x16x2_t v157;
  int8x16x2_t v158;
  int8x16x2_t v159;
  int8x16x2_t v160;
  int8x16x2_t v161;

  v13 = (__int16)result;
  v14 = *a2;
  v15 = *a5;
  v16 = *a8;
  if (a4)
  {
    v17 = a4 - 1;
    if ((unint64_t)(a4 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1965F4E74);
    }
  }
  else
  {
    v17 = 0;
  }
  if (a7)
  {
    v18 = a7 - 1;
    if ((unint64_t)(a7 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1965F4EA4);
    }
  }
  else
  {
    v18 = 0;
  }
  __n = v18;
  if (a11)
  {
    v19 = a11 - 1;
    if ((unint64_t)(a11 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1965F4ED4);
    }
    if (v14)
    {
LABEL_7:
      v20 = *(_DWORD *)(v14 + 4);
      if (v15)
        goto LABEL_8;
      goto LABEL_171;
    }
  }
  else
  {
    v19 = 0;
    if (v14)
      goto LABEL_7;
  }
  v20 = 0;
  if (v15)
  {
LABEL_8:
    v21 = *(_DWORD *)(v15 + 4);
    if (v16)
      goto LABEL_9;
LABEL_172:
    v22 = 0;
    goto LABEL_10;
  }
LABEL_171:
  v21 = 0;
  if (!v16)
    goto LABEL_172;
LABEL_9:
  v22 = *(_DWORD *)(v16 + 4);
  if (v22 < 0)
    goto LABEL_162;
LABEL_10:
  v23 = __OFADD__(v22, (_DWORD)v19);
  v24 = v22 + v19;
  if (v23)
    goto LABEL_162;
  v23 = __OFADD__((_DWORD)v18, v24);
  v25 = v18 + v24;
  v26 = v23;
  if (v21 < 0)
    goto LABEL_162;
  if (v26)
    goto LABEL_162;
  v23 = __OFADD__(v21, v25);
  v27 = v21 + v25;
  if (v23)
    goto LABEL_162;
  v23 = __OFADD__((_DWORD)v17, v27);
  v28 = v17 + v27;
  v29 = v23;
  if (v20 < 0)
    goto LABEL_162;
  if (v29)
    goto LABEL_162;
  v23 = __OFADD__(v20, v28);
  v30 = v20 + v28;
  if (v23)
    goto LABEL_162;
  v31 = (v30 + 1);
  if (__OFADD__(v30, 1))
    goto LABEL_162;
  v32 = a10;
  v141 = v19;
  if ((!v14 || (*(_BYTE *)(v14 + 16) & 4) != 0)
    && (!v15 || (*(_BYTE *)(v15 + 16) & 4) != 0)
    && (!v16 || (*(_BYTE *)(v16 + 16) & 4) != 0))
  {
    if (v30 == -1)
      goto LABEL_134;
    if ((v31 & 0x80000000) == 0)
    {
      result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v31 + 20));
      v35 = v143;
      if (v143)
      {
        *(_DWORD *)v143 = 2;
        *(_DWORD *)(v143 + 4) = v31;
        *(_BYTE *)(v143 + 20) = v13;
        *(_QWORD *)(v143 + 8) = v143 + 20;
        *(_DWORD *)(v143 + 16) = 4;
        v41 = (_BYTE *)(v143 + 21);
        if (v14)
        {
          v42 = *(_BYTE **)(v14 + 8);
          v43 = *(unsigned int *)(v14 + 4);
          if ((*(_BYTE *)(v14 + 16) & 4) != 0)
          {
            if ((_DWORD)v43)
            {
              if ((_DWORD)v43 == 1)
                *v41 = *v42;
              else
                result = memcpy((void *)(v143 + 21), v42, v43);
            }
          }
          else
          {
            if (v43 < 0x10)
            {
              v128 = (unsigned __int128 *)(v143 + 21);
            }
            else
            {
              v128 = (unsigned __int128 *)&v41[v43 & 0xFFFFFFF0];
              v129 = (unsigned __int128 *)(v143 + 21);
              do
              {
                v130 = (unsigned __int128)vld2q_s8(v42);
                v42 += 32;
                *v129++ = v130;
              }
              while (v129 != v128);
            }
            while (v128 != (unsigned __int128 *)&v41[v43])
            {
              v137 = *v42;
              v42 += 2;
              *(_BYTE *)v128 = v137;
              v128 = (unsigned __int128 *)((char *)v128 + 1);
            }
          }
          v44 = *(unsigned int *)(v14 + 4);
        }
        else
        {
          v44 = 0;
        }
        v45 = &v41[v44];
        if ((_DWORD)v17)
        {
          if ((_DWORD)v17 == 1)
            *v45 = *(_BYTE *)a3;
          else
            result = memcpy(v45, a3, v17);
        }
        v46 = &v45[v17];
        if (v15)
        {
          v47 = *(_BYTE **)(v15 + 8);
          v48 = *(unsigned int *)(v15 + 4);
          if ((*(_BYTE *)(v15 + 16) & 4) != 0)
          {
            if ((_DWORD)v48)
            {
              if ((_DWORD)v48 == 1)
                *v46 = *v47;
              else
                result = memcpy(&v45[v17], v47, v48);
            }
          }
          else
          {
            if (v48 < 0x10)
            {
              v131 = (unsigned __int128 *)&v45[v17];
            }
            else
            {
              v131 = (unsigned __int128 *)&v46[v48 & 0xFFFFFFF0];
              v132 = (unsigned __int128 *)&v45[v17];
              do
              {
                v133 = (unsigned __int128)vld2q_s8(v47);
                v47 += 32;
                *v132++ = v133;
              }
              while (v132 != v131);
            }
            while (v131 != (unsigned __int128 *)&v46[v48])
            {
              v138 = *v47;
              v47 += 2;
              *(_BYTE *)v131 = v138;
              v131 = (unsigned __int128 *)((char *)v131 + 1);
            }
          }
          v49 = *(unsigned int *)(v15 + 4);
        }
        else
        {
          v49 = 0;
        }
        v50 = &v46[v49];
        v51 = __n;
        if ((_DWORD)__n)
        {
          if ((_DWORD)__n == 1)
          {
            *v50 = *(_BYTE *)a6;
          }
          else
          {
            result = memcpy(v50, a6, __n);
            v51 = __n;
          }
        }
        v52 = (unsigned __int128 *)&v50[v51];
        if (v16)
        {
          v53 = *(_BYTE **)(v16 + 8);
          v54 = *(unsigned int *)(v16 + 4);
          if ((*(_BYTE *)(v16 + 16) & 4) != 0)
          {
            if ((_DWORD)v54)
            {
              if ((_DWORD)v54 == 1)
                *(_BYTE *)v52 = *v53;
              else
                result = memcpy(&v50[v51], v53, v54);
            }
          }
          else
          {
            if (v54 < 0x10)
            {
              v134 = (unsigned __int128 *)&v50[v51];
            }
            else
            {
              v134 = (unsigned __int128 *)((char *)v52 + (v54 & 0xFFFFFFF0));
              v135 = v52;
              do
              {
                v136 = (unsigned __int128)vld2q_s8(v53);
                v53 += 32;
                *v135++ = v136;
              }
              while (v135 != v134);
            }
            while (v134 != (unsigned __int128 *)((char *)v52 + v54))
            {
              v139 = *v53;
              v53 += 2;
              *(_BYTE *)v134 = v139;
              v134 = (unsigned __int128 *)((char *)v134 + 1);
            }
          }
          v55 = *(unsigned int *)(v16 + 4);
        }
        else
        {
          v55 = 0;
        }
        if ((_DWORD)v141)
        {
          result = (char *)v52 + v55;
          if ((_DWORD)v141 == 1)
            *result = a10->i8[0];
          else
            result = memcpy(result, a10, v141);
        }
        goto LABEL_69;
      }
    }
LABEL_162:
    *a9 = 0;
    __break(0xC471u);
    JUMPOUT(0x1965F4E48);
  }
  if (v30 == -1)
  {
LABEL_134:
    v35 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
LABEL_69:
    v56 = a9;
    goto LABEL_127;
  }
  if (v31 > 0x7FFFFFEF)
    goto LABEL_162;
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(2 * v31 + 20));
  v33 = v141;
  v34 = __n;
  v35 = v143;
  if (!v143)
    goto LABEL_162;
  *(_DWORD *)v143 = 2;
  *(_DWORD *)(v143 + 4) = v31;
  *(_WORD *)(v143 + 20) = v13;
  *(_QWORD *)(v143 + 8) = v143 + 20;
  *(_DWORD *)(v143 + 16) = 0;
  v36 = (_WORD *)(v143 + 22);
  if (v14)
  {
    v37 = *(int8x16_t **)(v14 + 8);
    v38 = *(unsigned int *)(v14 + 4);
    if ((*(_BYTE *)(v14 + 16) & 4) != 0)
    {
      v39 = (char *)&v36[v38];
      if (v38 >= 0x40)
      {
        v40 = (char *)&v36[v38 & 0xFFFFFFC0];
        v58 = 0uLL;
        v59 = (char *)(v143 + 22);
        do
        {
          v144.val[0] = *v37;
          v60 = v37[1];
          v150.val[0] = v37[2];
          v61 = v37[3];
          v37 += 4;
          v62 = v61;
          v150.val[1] = 0uLL;
          v156.val[0] = v60;
          v144.val[1] = 0uLL;
          v63 = v59;
          vst2q_s8(v63, v144);
          v63 += 32;
          v156.val[1] = 0uLL;
          vst2q_s8(v63, v156);
          v64 = v59 + 64;
          vst2q_s8(v64, v150);
          v65 = v59 + 96;
          vst2q_s8(v65, *(int8x16x2_t *)(&v58 - 1));
          v59 += 128;
        }
        while (v59 != v40);
      }
      else
      {
        v40 = (char *)(v143 + 22);
      }
      while (v40 != v39)
      {
        v66 = v37->u8[0];
        v37 = (int8x16_t *)((char *)v37 + 1);
        *(_WORD *)v40 = v66;
        v40 += 2;
      }
    }
    else if ((_DWORD)v38 == 1)
    {
      *v36 = v37->i16[0];
    }
    else if ((_DWORD)v38)
    {
      result = memcpy((void *)(v143 + 22), v37, 2 * v38);
      v33 = v141;
      v34 = __n;
    }
    v57 = *(unsigned int *)(v14 + 4);
  }
  else
  {
    v57 = 0;
  }
  v67 = (char *)&v36[v57];
  v68 = &v67[2 * v17];
  if ((v17 & 0x7FFFFFC0) != 0)
  {
    v69 = &v67[2 * (v17 & 0x7FFFFFC0)];
    v70 = 0uLL;
    do
    {
      v145.val[0] = (int8x16_t)*a3;
      v71 = *((int8x16_t *)a3 + 1);
      v151.val[0] = (int8x16_t)a3[2];
      v72 = a3[3];
      a3 += 4;
      v73 = v72;
      v151.val[1] = 0uLL;
      v157.val[0] = v71;
      v145.val[1] = 0uLL;
      v74 = v67;
      vst2q_s8(v74, v145);
      v74 += 32;
      v157.val[1] = 0uLL;
      vst2q_s8(v74, v157);
      v75 = v67 + 64;
      vst2q_s8(v75, v151);
      v76 = v67 + 96;
      vst2q_s8(v76, *(int8x16x2_t *)(&v70 - 1));
      v67 += 128;
    }
    while (v67 != v69);
    v67 = v69;
  }
  while (v67 != v68)
  {
    v77 = *(unsigned __int8 *)a3;
    a3 = (_OWORD *)((char *)a3 + 1);
    *(_WORD *)v67 = v77;
    v67 += 2;
  }
  if (v15)
  {
    v78 = *(int8x16_t **)(v15 + 8);
    v79 = *(unsigned int *)(v15 + 4);
    if ((*(_BYTE *)(v15 + 16) & 4) != 0)
    {
      v80 = &v68[2 * v79];
      if (v79 >= 0x40)
      {
        v81 = &v68[2 * (v79 & 0xFFFFFFC0)];
        v83 = 0uLL;
        v84 = v68;
        do
        {
          v146.val[0] = *v78;
          v85 = v78[1];
          v152.val[0] = v78[2];
          v86 = v78[3];
          v78 += 4;
          v87 = v86;
          v152.val[1] = 0uLL;
          v158.val[0] = v85;
          v146.val[1] = 0uLL;
          v88 = v84;
          vst2q_s8(v88, v146);
          v88 += 32;
          v158.val[1] = 0uLL;
          vst2q_s8(v88, v158);
          v89 = v84 + 64;
          vst2q_s8(v89, v152);
          v90 = v84 + 96;
          vst2q_s8(v90, *(int8x16x2_t *)(&v83 - 1));
          v84 += 128;
        }
        while (v84 != v81);
      }
      else
      {
        v81 = v68;
      }
      while (v81 != v80)
      {
        v91 = v78->u8[0];
        v78 = (int8x16_t *)((char *)v78 + 1);
        *(_WORD *)v81 = v91;
        v81 += 2;
      }
    }
    else if ((_DWORD)v79 == 1)
    {
      *(_WORD *)v68 = v78->i16[0];
    }
    else if ((_DWORD)v79)
    {
      result = memcpy(v68, v78, 2 * v79);
      v33 = v141;
      v34 = __n;
    }
    v82 = *(unsigned int *)(v15 + 4);
  }
  else
  {
    v82 = 0;
  }
  v92 = &v68[2 * v82];
  v93 = &v92[2 * v34];
  if ((v34 & 0x7FFFFFC0) != 0)
  {
    v94 = &v92[2 * (v34 & 0x7FFFFFC0)];
    v95 = 0uLL;
    do
    {
      v147.val[0] = (int8x16_t)*a6;
      v96 = *((int8x16_t *)a6 + 1);
      v153.val[0] = (int8x16_t)a6[2];
      v97 = a6[3];
      a6 += 4;
      v98 = v97;
      v153.val[1] = 0uLL;
      v159.val[0] = v96;
      v147.val[1] = 0uLL;
      v99 = v92;
      vst2q_s8(v99, v147);
      v99 += 32;
      v159.val[1] = 0uLL;
      vst2q_s8(v99, v159);
      v100 = v92 + 64;
      vst2q_s8(v100, v153);
      v101 = v92 + 96;
      vst2q_s8(v101, *(int8x16x2_t *)(&v95 - 1));
      v92 += 128;
    }
    while (v92 != v94);
    v92 = v94;
  }
  while (v92 != v93)
  {
    v102 = *(unsigned __int8 *)a6;
    a6 = (_OWORD *)((char *)a6 + 1);
    *(_WORD *)v92 = v102;
    v92 += 2;
  }
  if (v16)
  {
    v103 = *(int8x16_t **)(v16 + 8);
    v104 = *(unsigned int *)(v16 + 4);
    v56 = a9;
    if ((*(_BYTE *)(v16 + 16) & 4) != 0)
    {
      v105 = &v93[2 * v104];
      if (v104 >= 0x40)
      {
        v106 = &v93[2 * (v104 & 0xFFFFFFC0)];
        v108 = 0uLL;
        v109 = v93;
        do
        {
          v148.val[0] = *v103;
          v110 = v103[1];
          v154.val[0] = v103[2];
          v111 = v103[3];
          v103 += 4;
          v112 = v111;
          v154.val[1] = 0uLL;
          v160.val[0] = v110;
          v148.val[1] = 0uLL;
          v113 = v109;
          vst2q_s8(v113, v148);
          v113 += 32;
          v160.val[1] = 0uLL;
          vst2q_s8(v113, v160);
          v114 = v109 + 64;
          vst2q_s8(v114, v154);
          v115 = v109 + 96;
          vst2q_s8(v115, *(int8x16x2_t *)(&v108 - 1));
          v109 += 128;
        }
        while (v109 != v106);
      }
      else
      {
        v106 = v93;
      }
      while (v106 != v105)
      {
        v116 = v103->u8[0];
        v103 = (int8x16_t *)((char *)v103 + 1);
        *(_WORD *)v106 = v116;
        v106 += 2;
      }
    }
    else if ((_DWORD)v104 == 1)
    {
      *(_WORD *)v93 = v103->i16[0];
    }
    else if ((_DWORD)v104)
    {
      result = memcpy(v93, v103, 2 * v104);
      v33 = v141;
    }
    v107 = *(unsigned int *)(v16 + 4);
  }
  else
  {
    v107 = 0;
    v56 = a9;
  }
  v117 = &v93[2 * v107];
  v118 = &v117[2 * v33];
  if ((v33 & 0x7FFFFFC0) != 0)
  {
    v119 = &v117[2 * (v33 & 0x7FFFFFC0)];
    v120 = 0uLL;
    do
    {
      v149.val[0] = *v32;
      v121 = v32[1];
      v155.val[0] = v32[2];
      v122 = v32[3];
      v32 += 4;
      v123 = v122;
      v155.val[1] = 0uLL;
      v161.val[0] = v121;
      v149.val[1] = 0uLL;
      v124 = v117;
      vst2q_s8(v124, v149);
      v124 += 32;
      v161.val[1] = 0uLL;
      vst2q_s8(v124, v161);
      v125 = v117 + 64;
      vst2q_s8(v125, v155);
      v126 = v117 + 96;
      vst2q_s8(v126, *(int8x16x2_t *)(&v120 - 1));
      v117 += 128;
    }
    while (v117 != v119);
    v117 = v119;
  }
  while (v117 != v118)
  {
    v127 = v32->u8[0];
    v32 = (int8x16_t *)((char *)v32 + 1);
    *(_WORD *)v117 = v127;
    v117 += 2;
  }
LABEL_127:
  *v56 = v35;
  return result;
}

void WebCore::SVGElement::removedFromAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t *v29;
  unsigned int v31;
  uint64_t v33;
  __int16 v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  __int16 v38;
  WebCore::TreeScope *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  WebCore::SVGDocumentExtensions *v60;
  WTF *v61;
  uint64_t v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  BOOL v68;
  uint64_t v69;
  WTF *v70;
  WebCore::SVGElement *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  WebCore::SVGUseElement *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  WebCore::SVGElement *v94;
  uint64_t *v95[5];
  uint64_t v96[2];
  WebCore::SVGUseElement *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  WebCore::Element::removedFromAncestor((WebCore::Element *)a1, (void *)a2, a3, a4, a5);
  if (!*(_QWORD *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 144) = 0;
    if ((*(_WORD *)(a3 + 28) & 0x20) != 0)
    {
      *(_DWORD *)(a3 + 24) += 2;
      WebCore::SVGElement::updateRelativeLengthsInformationForChild((WebCore::SVGElement *)a3, 0, (WebCore::SVGElement *)a1);
      if (*(_DWORD *)(a3 + 24) == 2)
      {
        v37 = *(_WORD *)(a3 + 30);
        if ((v37 & 0x400) == 0)
        {
          v38 = *(_WORD *)(a3 + 28);
          if ((v38 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)a3, v8);
          }
          else
          {
            if ((v38 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 160) + 16))(*(_QWORD *)(a3 + 160));
              v37 = *(_WORD *)(a3 + 30);
            }
            *(_WORD *)(a3 + 30) = v37 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3);
          }
        }
      }
      else
      {
        *(_DWORD *)(a3 + 24) -= 2;
      }
    }
  }
  if ((*(_QWORD *)(a1 + 16) & 0x8000000000000000) != 0)
  {
    v39 = *(WebCore::TreeScope **)(a1 + 40);
    v40 = *(_QWORD *)v39;
    if (*(_QWORD *)v39)
      v41 = (*(_WORD *)(*(_QWORD *)v39 + 28) & 0x80) == 0;
    else
      v41 = 1;
    if (!v41 && !*(_BYTE *)(v40 + 193))
    {
      v72 = *(_QWORD *)(v40 + 200);
      if (v72)
      {
        v73 = *(_QWORD *)(v72 + 8);
        if (v73)
        {
          if (*(_WORD *)(*(_QWORD *)(v73 + 96) + 10) == 242)
            v39 = (WebCore::TreeScope *)*((_QWORD *)v39 + 2);
        }
      }
    }
    WebCore::TreeScope::removeElementFromPendingSVGResources(v39, (WebCore::SVGElement *)a1);
  }
  if ((a2 & 1) != 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    *(_DWORD *)(v9 + 24) += 2;
    if (!*(_QWORD *)(v9 + 1808))
    {
      v51 = WTF::fastMalloc((WTF *)0x50);
      *(_DWORD *)v51 = 0;
      v52 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v9);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 + 1, v52));
      *(_QWORD *)(v51 + 8) = v52;
      *(_OWORD *)(v51 + 16) = 0u;
      *(_OWORD *)(v51 + 32) = 0u;
      v54 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v54 = 0;
      *(_QWORD *)(v51 + 48) = v54;
      *(_QWORD *)(v51 + 56) = 0;
      *(_QWORD *)(v51 + 64) = 0;
      v55 = *(_QWORD *)(v9 + 528);
      if (!v55)
        goto LABEL_98;
      v56 = *(_QWORD *)(v55 + 8);
      if (v56
        && (v57 = *(_QWORD *)(v56 + 24)) != 0
        && (v58 = *(_QWORD *)(v57 + 8)) != 0
        && (*(_WORD *)(v58 + 658) & 4) != 0)
      {
        v59 = *(_BYTE *)(v58 + 545) == 0;
      }
      else
      {
LABEL_98:
        v59 = 1;
      }
      *(_BYTE *)(v51 + 72) = v59;
      v60 = *(WebCore::SVGDocumentExtensions **)(v9 + 1808);
      *(_QWORD *)(v9 + 1808) = v51;
      if (v60)
      {
        WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v60, v8);
        if (*(_DWORD *)v61)
        {
          *((_OWORD *)v61 + 3) = 0u;
          *((_OWORD *)v61 + 4) = 0u;
          *((_OWORD *)v61 + 1) = 0u;
          *((_OWORD *)v61 + 2) = 0u;
          *(_OWORD *)v61 = 0u;
        }
        else
        {
          WTF::fastFree(v61, v8);
        }
      }
    }
    v10 = *(_QWORD *)(v9 + 1808);
    ++*(_DWORD *)v10;
    v11 = *(uint64_t **)(a1 + 120);
    if (v11)
    {
      v42 = *v11;
      v43 = v11[1];
      *v11 = 0;
      v11[1] = 0;
      v96[0] = v42;
      v96[1] = v43;
      WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t **)&v97, v96);
      WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v95, v96);
      v44 = v98;
      v45 = v95[1];
      while (v44 != v45)
      {
        v71 = *(WebCore::SVGElement **)(*v44 + 8);
        *((_DWORD *)v71 + 6) += 2;
        v94 = v71;
        WebCore::SVGDocumentExtensions::addElementToRebuild(v10, v71);
        (*(void (**)(WebCore::SVGElement *))(*(_QWORD *)v94 + 1304))(v94);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v94);
        WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v97);
        v44 = v98;
      }
      v46 = v96[0];
      if (v96[0])
      {
        v62 = *(unsigned int *)(v96[0] - 4);
        if ((_DWORD)v62)
        {
          for (i = 0; i != v62; ++i)
          {
            v64 = *(_QWORD *)(v46 + 8 * i);
            if (v64 != -1)
            {
              *(_QWORD *)(v46 + 8 * i) = 0;
              if (v64)
              {
                v65 = i;
                v66 = v62;
                do
                {
                  v67 = __ldaxr((unsigned int *)v64);
                  v68 = --v67 == 0;
                }
                while (__stlxr(v67, (unsigned int *)v64));
                v62 = v66;
                if (v68)
                {
                  atomic_store(1u, (unsigned int *)v64);
                  v93 = (WTF *)v64;
                  v69 = *(unsigned int *)(v64 + 28);
                  if ((_DWORD)v69)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v64 + 16), (WTF::StringImpl *)(*(_QWORD *)(v64 + 16) + 32 * v69));
                  v70 = (WTF *)*((_QWORD *)v93 + 2);
                  if (v70)
                  {
                    *((_QWORD *)v93 + 2) = 0;
                    *((_DWORD *)v93 + 6) = 0;
                    WTF::fastFree(v70, v8);
                  }
                  WTF::fastFree(v93, v8);
                  v62 = v66;
                  i = v65;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v46 - 16), v8);
      }
      v47 = **(_QWORD **)(a1 + 120);
      if (v47)
      {
        if (*(_DWORD *)(v47 - 12))
        {
          v48 = *(unsigned int *)(v47 - 4);
          if ((_DWORD)v48)
          {
            v49 = 8 * v48;
            v50 = **(uint64_t ***)(a1 + 120);
            while ((unint64_t)(*v50 + 1) <= 1)
            {
              ++v50;
              v49 -= 8;
              if (!v49)
                goto LABEL_6;
            }
          }
          else
          {
            v50 = **(uint64_t ***)(a1 + 120);
          }
          v90 = (uint64_t *)(v47 + 8 * v48);
          if (v50 != v90)
          {
            v91 = *v50;
LABEL_161:
            if (*(_QWORD *)(v91 + 8))
            {
              __break(0xC471u);
              JUMPOUT(0x1965F56D8);
            }
            while (++v50 != v90)
            {
              v91 = *v50;
              if ((unint64_t)(*v50 + 1) > 1)
              {
                if (v50 == v90)
                  break;
                goto LABEL_161;
              }
            }
          }
        }
      }
    }
LABEL_6:
    v12 = (void *)*(unsigned int *)(v10 + 68);
    if ((_DWORD)v12)
    {
      v8 = 0;
      while (*(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * (_QWORD)v8) != a1)
      {
        v8 = (char *)v8 + 1;
        if (v12 == v8)
          goto LABEL_7;
      }
      WTF::Vector<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(v10 + 56, v8);
    }
LABEL_7:
    if (!*(_DWORD *)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1965F5254);
    }
    --*(_DWORD *)v10;
    if (v9)
    {
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        v34 = *(_WORD *)(v9 + 30);
        if ((v34 & 0x400) == 0)
        {
          v35 = *(_WORD *)(v9 + 28);
          if ((v35 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v9, v8);
          }
          else
          {
            if ((v35 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
              v34 = *(_WORD *)(v9 + 30);
            }
            *(_WORD *)(v9 + 30) = v34 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          }
        }
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
  }
  v13 = *(_QWORD *)(a1 + 120);
  if (v13)
  {
    if ((*(_BYTE *)(v13 + 64) & 1) != 0)
      goto LABEL_22;
    v14 = (uint64_t *)(v13 + 40);
  }
  else
  {
    v14 = &WebCore::SVGElement::instances(void)const::emptyInstances;
    {
      WebCore::SVGElement::instances(void)const::emptyInstances = 0;
      *(_QWORD *)&dword_1EE2F9738 = 0;
      goto LABEL_14;
    }
  }
  v15 = *v14;
  if (!*v14)
  {
LABEL_14:
    *((_DWORD *)v14 + 2) = 0;
LABEL_15:
    v16 = 0;
    *((_DWORD *)v14 + 3) = 0;
LABEL_16:
    v17 = 0;
    v18 = 0;
    v15 = 0;
    v19 = 0;
    v20 = 0;
    v98 = 0;
    v99 = 0;
    v97 = (WebCore::SVGUseElement *)v14;
    v21 = 1;
    goto LABEL_17;
  }
  v23 = *(_DWORD *)(v15 - 4);
  if (!v23)
    goto LABEL_27;
  v27 = 0;
  v28 = v23 - 1;
  do
  {
    v29 = (uint64_t *)(v15 + 8 * v28);
    if ((unint64_t)(*v29 + 1) >= 2 && !*(_QWORD *)(*v29 + 8))
    {
      v74 = v15;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v29, v8);
      v15 = v74;
      ++v27;
    }
  }
  while ((unint64_t)v28--);
  v15 = *v14;
  if (v27)
  {
    *(_DWORD *)(v15 - 16) += v27;
    v88 = *v14;
    if (*v14)
      v89 = *(_DWORD *)(v88 - 12);
    else
      v89 = 0;
    *(_DWORD *)(v88 - 12) = v89 - v27;
    v15 = *v14;
  }
  if (!v15)
    goto LABEL_14;
  v31 = *(_DWORD *)(v15 - 4);
  if (v31 < 9 || 6 * *(_DWORD *)(v15 - 12) >= v31)
  {
LABEL_27:
    *((_DWORD *)v14 + 2) = 0;
  }
  else
  {
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(v14);
    v33 = *v14;
    *((_DWORD *)v14 + 2) = 0;
    if (!v33)
      goto LABEL_15;
    v15 = v33;
  }
  v24 = *(_DWORD *)(v15 - 12);
  if (v24 >= 0x7FFFFFFF)
    v25 = -2;
  else
    v25 = 2 * v24;
  *((_DWORD *)v14 + 3) = v25;
  v26 = *(unsigned int *)(v15 - 12);
  if ((_DWORD)v26)
  {
    if (v26 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1965F5744);
    }
    v16 = (WTF *)WTF::fastMalloc((WTF *)(8 * v26));
    v85 = *v14;
    if (!*v14)
      goto LABEL_16;
    v15 = *v14;
    v86 = *(_DWORD *)(v85 - 12);
    v20 = *(unsigned int *)(v85 - 4);
    v18 = v85 + 8 * v20;
    if (v86)
    {
      v17 = *v14;
      if ((_DWORD)v20)
      {
        v87 = 8 * v20;
        v17 = *v14;
        while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
        {
          v17 += 8;
          v87 -= 8;
          if (!v87)
          {
            v17 = v18;
            break;
          }
        }
      }
      v97 = (WebCore::SVGUseElement *)v14;
      v98 = (uint64_t *)v17;
      goto LABEL_34;
    }
  }
  else
  {
    v16 = 0;
    v20 = *(unsigned int *)(v15 - 4);
    v18 = v15 + 8 * v20;
  }
  v97 = (WebCore::SVGUseElement *)v14;
  v98 = (uint64_t *)v18;
  v17 = v18;
LABEL_34:
  v21 = 0;
  v99 = v18;
  v19 = v18;
LABEL_17:
  v100 = v19;
  v101 = v15 + 8 * v20;
  if (v17 != v19)
  {
    if (*(_QWORD *)(*(_QWORD *)v17 + 8))
    {
      v36 = v17;
    }
    else
    {
      do
      {
        v92 = v17 + 8;
        v17 = v18;
        if (v92 != v18)
        {
          v17 = v92;
          while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
          {
            v17 += 8;
            if (v17 == v18)
            {
              v17 = v18;
              break;
            }
          }
        }
        v36 = v19;
        if (v17 == v19)
          break;
        v36 = v17;
      }
      while (!*(_QWORD *)(*(_QWORD *)v17 + 8));
    }
    v98 = (uint64_t *)v36;
    v17 = v36;
  }
  if ((v21 & 1) != 0)
    v22 = 0;
  else
    v22 = v15 + 8 * *(unsigned int *)(v15 - 4);
  if (v17 != v22)
  {
    v75 = 0;
    do
    {
      v76 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      *(_DWORD *)(v76 + 24) += 2;
      v95[0] = 0;
      *((_QWORD *)v16 + v75++) = v76;
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v95);
      WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v97);
      v17 = (uint64_t)v98;
    }
    while (v98 != (uint64_t *)v22);
    if (!v75)
      goto LABEL_154;
    v77 = 8 * v75;
    v78 = (uint64_t *)v16;
    do
    {
      WebCore::SVGElement::correspondingUseElement(*v78, &v97);
      v79 = v97;
      if (v97)
      {
        WebCore::SVGUseElement::invalidateShadowTree((uint64_t *)v97);
        if (*((_DWORD *)v79 + 6) == 2)
        {
          if ((*((_WORD *)v79 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v79, v80);
        }
        else
        {
          *((_DWORD *)v79 + 6) -= 2;
        }
      }
      v81 = *v78++;
      WebCore::SVGElement::setCorrespondingElement(v81, 0);
      v77 -= 8;
    }
    while (v77);
    v82 = 8 * v75;
    v83 = v16;
    do
    {
      v84 = *(_QWORD *)v83;
      *(_QWORD *)v83 = 0;
      if (v84)
      {
        if (*(_DWORD *)(v84 + 24) == 2)
        {
          if ((*(_WORD *)(v84 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v84, v8);
        }
        else
        {
          *(_DWORD *)(v84 + 24) -= 2;
        }
      }
      v83 = (WTF *)((char *)v83 + 8);
      v82 -= 8;
    }
    while (v82);
  }
  if (v16)
LABEL_154:
    WTF::fastFree(v16, v8);
LABEL_22:
  if ((a2 & 0x100) != 0 && (*(_WORD *)(a3 + 28) & 0x80) != 0 && !*(_BYTE *)(a3 + 193))
    WebCore::SVGElement::setCorrespondingElement(a1, 0);
}

unsigned int *WebCore::SVGElement::updateRelativeLengthsInformationForChild(WebCore::SVGElement *this, void *a2, WebCore::SVGElement *a3)
{
  BOOL v3;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int *result;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int i;
  unsigned int *v19;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v40;
  __int16 v42;
  __int16 v43;
  uint64_t v44;
  WTF *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  int v56;
  WebCore::SVGElement *v57;
  unint64_t v58;
  WebCore::SVGElement *v59;
  char v60[24];

  v3 = (char)a2;
  v5 = (uint64_t *)((char *)this + 128);
  if ((_DWORD)a2)
  {
    result = (unsigned int *)WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::SVGElement>((uint64_t)this + 128, a3, (uint64_t)v60);
    if (*((_BYTE *)this + 144))
      return result;
LABEL_33:
    v30 = *((_QWORD *)this + 4);
    if (v30 && (*(_WORD *)(v30 + 28) & 0x20) != 0)
    {
      *(_DWORD *)(v30 + 24) += 2;
      *((_BYTE *)this + 144) = v3;
      result = (unsigned int *)WebCore::SVGElement::updateRelativeLengthsInformationForChild((WebCore::SVGElement *)v30, v3, this);
      if (*(_DWORD *)(v30 + 24) == 2)
      {
        v42 = *(_WORD *)(v30 + 30);
        if ((v42 & 0x400) == 0)
        {
          v43 = *(_WORD *)(v30 + 28);
          if ((v43 & 0xF000) == 0x9000)
          {
            return WebCore::Document::removedLastRef((WebCore::Document *)v30, v31);
          }
          else
          {
            if ((v43 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v30 + 160) + 16))(*(_QWORD *)(v30 + 160));
              v42 = *(_WORD *)(v30 + 30);
            }
            *(_WORD *)(v30 + 30) = v42 | 0x400;
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 72))(v30);
          }
        }
      }
      else
      {
        *(_DWORD *)(v30 + 24) -= 2;
      }
    }
    return result;
  }
  v6 = *((_DWORD *)this + 35);
  v7 = *((_DWORD *)this + 34) + 1;
  *((_DWORD *)this + 34) = v7;
  if (v7 > v6)
  {
    v8 = *v5;
    if (!*v5)
    {
LABEL_4:
      v9 = 0;
      *((_DWORD *)this + 34) = 0;
LABEL_5:
      v10 = v9;
LABEL_6:
      *((_DWORD *)this + 35) = 2 * v10;
      goto LABEL_7;
    }
    v32 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v32)
      goto LABEL_39;
    v36 = 0;
    v37 = v32 - 1;
    do
    {
      v38 = (uint64_t *)(v8 + 8 * v37);
      if ((unint64_t)(*v38 + 1) >= 2 && !*(_QWORD *)(*v38 + 8))
      {
        v59 = a3;
        v51 = v37;
        v53 = v8;
        v56 = v36;
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v38, a2);
        v37 = v51;
        v8 = v53;
        a3 = v59;
        v36 = v56 + 1;
      }
    }
    while ((unint64_t)v37--);
    v8 = *v5;
    if (v36)
    {
      v48 = v36;
      *(_DWORD *)(v8 - 16) += v36;
      v49 = *v5;
      if (*v5)
        v50 = *(_DWORD *)(v49 - 12);
      else
        v50 = 0;
      *(_DWORD *)(v49 - 12) = v50 - v48;
      v8 = *v5;
    }
    if (!v8)
      goto LABEL_4;
    v40 = *(_DWORD *)(v8 - 4);
    if (v40 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v40)
    {
LABEL_39:
      *((_DWORD *)this + 34) = 0;
    }
    else
    {
      v57 = a3;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(v5);
      a3 = v57;
      v9 = 0;
      v8 = *((_QWORD *)this + 16);
      *((_DWORD *)this + 34) = 0;
      if (!v8)
        goto LABEL_5;
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_7:
  v11 = *((_QWORD *)a3 + 2);
  result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
  if ((v11 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 8))
  {
    v13 = *v5;
    if (!*v5)
      goto LABEL_32;
    v14 = *(_DWORD *)(v13 - 8);
    v15 = ((unint64_t)result + ~(v11 << 32)) ^ (((unint64_t)result + ~(v11 << 32)) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    LODWORD(v17) = v14 & ((v17 >> 31) ^ v17);
    for (i = 1; ; ++i)
    {
      v19 = *(unsigned int **)(v13 + 8 * v17);
      if (!v19)
        break;
      v17 = v17;
      if (v19 != (unsigned int *)-1 && v19 == result)
      {
        if ((_DWORD)v17 == *(_DWORD *)(v13 - 4))
          break;
        *(_QWORD *)(v13 + 8 * v17) = 0;
        do
        {
          v21 = __ldaxr(result);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, result));
        if (!v22)
        {
          v55 = v13;
          v58 = v17;
          atomic_store(1u, result);
          v44 = result[7];
          if ((_DWORD)v44)
          {
            v54 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)result + 2), (WTF::StringImpl *)(*((_QWORD *)result + 2) + 32 * v44));
            result = v54;
          }
          v45 = (WTF *)*((_QWORD *)result + 2);
          if (v45)
          {
            *((_QWORD *)result + 2) = 0;
            result[6] = 0;
            v52 = result;
            WTF::fastFree(v45, a2);
            result = v52;
          }
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
          v13 = v55;
          v17 = v58;
        }
        *(_QWORD *)(v13 + 8 * v17) = -1;
        ++*(_DWORD *)(*v5 - 16);
        v23 = *v5;
        if (*v5)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v5;
        if (*v5)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
            result = (unsigned int *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v5, v27 >> 1, 0);
          break;
        }
        goto LABEL_32;
      }
      LODWORD(v17) = (v17 + i) & v14;
    }
  }
  v29 = *v5;
  if (!*v5 || !*(_DWORD *)(v29 - 12))
    goto LABEL_32;
  v33 = *(unsigned int *)(v29 - 4);
  if ((_DWORD)v33)
  {
    v34 = 8 * v33;
    v35 = (uint64_t *)*v5;
    while ((unint64_t)(*v35 + 1) <= 1)
    {
      ++v35;
      v34 -= 8;
      if (!v34)
        goto LABEL_32;
    }
  }
  else
  {
    v35 = (uint64_t *)*v5;
  }
  v46 = (uint64_t *)(v29 + 8 * v33);
  if (v35 == v46)
  {
LABEL_32:
    if (!*((_BYTE *)this + 144))
      return result;
    goto LABEL_33;
  }
  v47 = *v35;
LABEL_76:
  if (!*(_QWORD *)(v47 + 8))
  {
    while (1)
    {
      if (++v35 == v46)
        goto LABEL_32;
      v47 = *v35;
      if ((unint64_t)(*v35 + 1) > 1)
      {
        if (v35 == v46)
          goto LABEL_32;
        goto LABEL_76;
      }
    }
  }
  return result;
}

_QWORD *WebCore::SVGElement::invalidateInstances(_QWORD *this, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  WebCore::SVGUseElement *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  WebCore::SVGUseElement *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::SVGUseElement *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = this[15];
  if (!v2)
  {
    v3 = &WebCore::SVGElement::instances(void)const::emptyInstances;
    {
      WebCore::SVGElement::instances(void)const::emptyInstances = 0;
      *(_QWORD *)&dword_1EE2F9738 = 0;
      goto LABEL_4;
    }
LABEL_3:
    v4 = *v3;
    if (!*v3)
    {
LABEL_4:
      *((_DWORD *)v3 + 2) = 0;
LABEL_5:
      this = 0;
      *((_DWORD *)v3 + 3) = 0;
LABEL_6:
      v5 = 0;
      v6 = 0;
      v4 = 0;
      v7 = 0;
      v8 = 0;
      v46 = 0;
      v47 = 0;
      v45 = (WebCore::SVGUseElement *)v3;
      v9 = 1;
      goto LABEL_7;
    }
    v11 = *(_DWORD *)(v4 - 4);
    if (!v11)
      goto LABEL_15;
    v15 = 0;
    v16 = v11 - 1;
    do
    {
      v17 = (uint64_t *)(v4 + 8 * v16);
      if ((unint64_t)(*v17 + 1) >= 2 && !*(_QWORD *)(*v17 + 8))
      {
        v24 = v3;
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v17, a2);
        v3 = v24;
        ++v15;
      }
    }
    while ((unint64_t)v16--);
    v4 = *v3;
    if (v15)
    {
      *(_DWORD *)(v4 - 16) += v15;
      v38 = v3;
      v39 = *v3;
      if (v39)
        v40 = *(_DWORD *)(v39 - 12);
      else
        v40 = 0;
      *(_DWORD *)(v39 - 12) = v40 - v15;
      v3 = v38;
      v4 = *v38;
    }
    if (!v4)
      goto LABEL_4;
    v19 = *(_DWORD *)(v4 - 4);
    if (v19 < 9 || 6 * *(_DWORD *)(v4 - 12) >= v19)
    {
LABEL_15:
      *((_DWORD *)v3 + 2) = 0;
    }
    else
    {
      v21 = v3;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(v3);
      v22 = *v21;
      v3 = v21;
      *((_DWORD *)v21 + 2) = 0;
      if (!v22)
        goto LABEL_5;
      v4 = v22;
    }
    v12 = *(_DWORD *)(v4 - 12);
    if (v12 >= 0x7FFFFFFF)
      v13 = -2;
    else
      v13 = 2 * v12;
    *((_DWORD *)v3 + 3) = v13;
    v14 = *(unsigned int *)(v4 - 12);
    if ((_DWORD)v14)
    {
      v36 = (WebCore::SVGUseElement *)v3;
      if (v14 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1965F5EE4);
      }
      this = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v14));
      v37 = *(_QWORD *)v36;
      if (!*(_QWORD *)v36)
      {
        v3 = (uint64_t *)v36;
        goto LABEL_6;
      }
      v41 = *(_QWORD *)v36;
      v8 = *(unsigned int *)(v37 - 4);
      v6 = v37 + 8 * v8;
      if (*(_DWORD *)(v37 - 12))
      {
        v5 = *(_QWORD *)v36;
        if ((_DWORD)v8)
        {
          v42 = 8 * v8;
          v5 = *(_QWORD *)v36;
          while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
          {
            v5 += 8;
            v42 -= 8;
            if (!v42)
            {
              v5 = v6;
              break;
            }
          }
        }
        v45 = v36;
        v46 = v5;
        v4 = v41;
        goto LABEL_22;
      }
      v3 = (uint64_t *)v36;
      v4 = *(_QWORD *)v36;
    }
    else
    {
      this = 0;
      v8 = *(unsigned int *)(v4 - 4);
      v6 = v4 + 8 * v8;
    }
    v45 = (WebCore::SVGUseElement *)v3;
    v46 = v6;
    v5 = v6;
LABEL_22:
    v9 = 0;
    v47 = v6;
    v7 = v6;
LABEL_7:
    v48 = v7;
    v49 = v4 + 8 * v8;
    if (v5 != v7)
    {
      if (*(_QWORD *)(*(_QWORD *)v5 + 8))
      {
        v23 = v5;
      }
      else
      {
        do
        {
          v43 = v5 + 8;
          v5 = v6;
          if (v43 != v6)
          {
            v5 = v43;
            while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
            {
              v5 += 8;
              if (v5 == v6)
              {
                v5 = v6;
                break;
              }
            }
          }
          v23 = v7;
          if (v5 == v7)
            break;
          v23 = v5;
        }
        while (!*(_QWORD *)(*(_QWORD *)v5 + 8));
      }
      v46 = v23;
      v5 = v23;
    }
    if ((v9 & 1) != 0)
      v10 = 0;
    else
      v10 = v4 + 8 * *(unsigned int *)(v4 - 4);
    if (v5 != v10)
    {
      v25 = this;
      v26 = 0;
      do
      {
        v27 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        *(_DWORD *)(v27 + 24) += 2;
        v44 = 0;
        v25[v26++] = v27;
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v44);
        WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v45);
        v5 = v46;
      }
      while (v46 != v10);
      this = v25;
      if (!v26)
        return (_QWORD *)WTF::fastFree((WTF *)this, a2);
      v28 = 8 * v26;
      v29 = v25;
      do
      {
        WebCore::SVGElement::correspondingUseElement(*v29, &v45);
        v30 = v45;
        if (v45)
        {
          WebCore::SVGUseElement::invalidateShadowTree((uint64_t *)v45);
          if (*((_DWORD *)v30 + 6) == 2)
          {
            if ((*((_WORD *)v30 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v30, v31);
          }
          else
          {
            *((_DWORD *)v30 + 6) -= 2;
          }
        }
        v32 = *v29++;
        WebCore::SVGElement::setCorrespondingElement(v32, 0);
        v28 -= 8;
      }
      while (v28);
      v33 = 8 * v26;
      v34 = v25;
      do
      {
        v35 = *v34;
        *v34 = 0;
        if (v35)
        {
          if (*(_DWORD *)(v35 + 24) == 2)
          {
            if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v35, a2);
          }
          else
          {
            *(_DWORD *)(v35 + 24) -= 2;
          }
        }
        ++v34;
        v33 -= 8;
        this = v25;
      }
      while (v33);
    }
    if (!this)
      return this;
    return (_QWORD *)WTF::fastFree((WTF *)this, a2);
  }
  if ((*(_BYTE *)(v2 + 64) & 1) == 0)
  {
    v3 = (uint64_t *)(v2 + 40);
    goto LABEL_3;
  }
  return this;
}

uint64_t WebCore::SVGElement::setCorrespondingElement(uint64_t this, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BOOL4 v5;
  WebCore::SVGElementRareData *v6;
  WTF *v7;
  void *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  WebCore::SVGElementRareData *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];

  v3 = (_QWORD *)this;
  v4 = *(_QWORD *)(this + 120);
  if (!v4)
  {
    if (!a2)
      return this;
    v5 = 1;
    goto LABEL_4;
  }
  v18 = *(_QWORD *)(v4 + 56);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
    {
      *(_DWORD *)(v19 + 24) += 2;
      WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGElement>(*(_QWORD *)(v19 + 120) + 40, (_QWORD *)this);
      if (*(_DWORD *)(v19 + 24) == 2)
      {
        if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v19, (void *)a2);
      }
      else
      {
        *(_DWORD *)(v19 + 24) -= 2;
      }
    }
  }
  this = v3[15];
  v5 = a2 != 0;
  if (a2 | this)
  {
    if (this)
    {
LABEL_6:
      if (a2)
      {
        v22 = this;
        v23 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
        v9 = v23;
        if (v23)
        {
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
        }
        this = v22;
      }
      else
      {
        v9 = 0;
      }
      v10 = *(_QWORD *)(this + 56);
      *(_QWORD *)(this + 56) = v9;
      if (v10)
      {
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v10);
          v20 = *(unsigned int *)(v10 + 28);
          if ((_DWORD)v20)
          {
            v26 = v10;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v20));
            v10 = v26;
          }
          v21 = *(WTF **)(v10 + 16);
          if (v21)
          {
            *(_QWORD *)(v10 + 16) = 0;
            *(_DWORD *)(v10 + 24) = 0;
            v25 = v10;
            WTF::fastFree(v21, (void *)a2);
            v10 = v25;
          }
          this = WTF::fastFree((WTF *)v10, (void *)a2);
        }
      }
      if (v5)
      {
        v13 = *(_QWORD *)(a2 + 120);
        if (!v13)
        {
          v13 = WTF::fastMalloc((WTF *)0x60);
          *(_OWORD *)v13 = 0u;
          *(_OWORD *)(v13 + 16) = 0u;
          *(_OWORD *)(v13 + 32) = 0u;
          *(_OWORD *)(v13 + 48) = 0u;
          *(_BYTE *)(v13 + 64) &= 0xF8u;
          *(_QWORD *)(v13 + 80) = 0;
          *(_QWORD *)(v13 + 88) = 0;
          *(_QWORD *)(v13 + 72) = 0;
          v15 = *(WebCore::SVGElementRareData **)(a2 + 120);
          *(_QWORD *)(a2 + 120) = v13;
          if (v15)
          {
            WebCore::SVGElementRareData::~SVGElementRareData(v15, v14);
            WTF::fastFree(v16, v17);
            v13 = *(_QWORD *)(a2 + 120);
          }
        }
        return WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::SVGElement>(v13 + 40, v3, (uint64_t)v27);
      }
      return this;
    }
LABEL_4:
    this = WTF::fastMalloc((WTF *)0x60);
    *(_OWORD *)this = 0u;
    *(_OWORD *)(this + 16) = 0u;
    *(_OWORD *)(this + 32) = 0u;
    *(_OWORD *)(this + 48) = 0u;
    *(_BYTE *)(this + 64) &= 0xF8u;
    *(_QWORD *)(this + 80) = 0;
    *(_QWORD *)(this + 88) = 0;
    *(_QWORD *)(this + 72) = 0;
    v6 = (WebCore::SVGElementRareData *)v3[15];
    v3[15] = this;
    if (v6)
    {
      WebCore::SVGElementRareData::~SVGElementRareData(v6, (void *)a2);
      WTF::fastFree(v7, v8);
      this = v3[15];
    }
    goto LABEL_6;
  }
  return this;
}

void WebCore::SVGElement::getBoundingBox(WebCore::SVGElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;

  if (!(*(unsigned int (**)(WebCore::SVGElement *))(*(_QWORD *)this + 1184))(this)
    || (v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v8 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_5;
  }
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    *(float *)a2 = (*(float (**)(uint64_t))(*(_QWORD *)v4 + 232))(v4);
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 12) = v7;
    v8 = 1;
LABEL_5:
    *(_BYTE *)(a2 + 16) = v8;
    return;
  }
  __break(0xC471u);
}

unsigned int *WebCore::SVGElement::addReferencingElement(WebCore::SVGElement *this, WebCore::SVGElement *a2)
{
  uint64_t v4;
  void *v5;
  WebCore::SVGElementRareData *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  WebCore::SVGElementRareData *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  unsigned int *result;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  _BYTE v23[24];

  v4 = *((_QWORD *)this + 15);
  if (!v4)
  {
    v4 = WTF::fastMalloc((WTF *)0x60);
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_BYTE *)(v4 + 64) &= 0xF8u;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 88) = 0;
    *(_QWORD *)(v4 + 72) = 0;
    v6 = (WebCore::SVGElementRareData *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v4;
    if (v6)
    {
      WebCore::SVGElementRareData::~SVGElementRareData(v6, v5);
      WTF::fastFree(v7, v8);
      v4 = *((_QWORD *)this + 15);
    }
  }
  WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::SVGElement>(v4, a2, (uint64_t)v23);
  v9 = *((_QWORD *)a2 + 15);
  if (!v9)
  {
    v9 = WTF::fastMalloc((WTF *)0x60);
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_BYTE *)(v9 + 64) &= 0xF8u;
    *(_QWORD *)(v9 + 80) = 0;
    *(_QWORD *)(v9 + 88) = 0;
    *(_QWORD *)(v9 + 72) = 0;
    v11 = (WebCore::SVGElementRareData *)*((_QWORD *)a2 + 15);
    *((_QWORD *)a2 + 15) = v9;
    if (v11)
    {
      WebCore::SVGElementRareData::~SVGElementRareData(v11, v10);
      WTF::fastFree(v12, v13);
      v9 = *((_QWORD *)a2 + 15);
    }
  }
  v14 = *(_QWORD *)(v9 + 16);
  if (v14 && *(_QWORD *)(v14 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1965F6364);
  }
  result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (result)
  {
    do
      v17 = __ldaxr(result);
    while (__stlxr(v17 + 1, result));
  }
  v18 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = result;
  if (v18)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v18));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v18);
      v21 = *(unsigned int *)(v18 + 28);
      if ((_DWORD)v21)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v21));
      v22 = *(WTF **)(v18 + 16);
      if (v22)
      {
        *(_QWORD *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        WTF::fastFree(v22, v16);
      }
      return (unsigned int *)WTF::fastFree((WTF *)v18, v16);
    }
  }
  return result;
}

uint64_t WebCore::SVGElement::removeReferencingElement(WebCore::SVGElement *this, WebCore::SVGElement *a2)
{
  uint64_t v4;
  void *v5;
  WebCore::SVGElementRareData *v6;
  WTF *v7;
  void *v8;
  void *v9;
  uint64_t result;
  WebCore::SVGElementRareData *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;

  v4 = *((_QWORD *)this + 15);
  if (!v4)
  {
    v4 = WTF::fastMalloc((WTF *)0x60);
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_BYTE *)(v4 + 64) &= 0xF8u;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 88) = 0;
    *(_QWORD *)(v4 + 72) = 0;
    v6 = (WebCore::SVGElementRareData *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v4;
    if (v6)
    {
      WebCore::SVGElementRareData::~SVGElementRareData(v6, v5);
      WTF::fastFree(v7, v8);
      v4 = *((_QWORD *)this + 15);
    }
  }
  WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGElement>(v4, a2);
  result = *((_QWORD *)a2 + 15);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x60);
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_BYTE *)(result + 64) &= 0xF8u;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 72) = 0;
    v11 = (WebCore::SVGElementRareData *)*((_QWORD *)a2 + 15);
    *((_QWORD *)a2 + 15) = result;
    if (v11)
    {
      WebCore::SVGElementRareData::~SVGElementRareData(v11, v9);
      WTF::fastFree(v12, v13);
      result = *((_QWORD *)a2 + 15);
    }
  }
  v14 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v14));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v14);
      v17 = *(unsigned int *)(v14 + 28);
      if ((_DWORD)v17)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v17));
      v18 = *(WTF **)(v14 + 16);
      if (v18)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
        WTF::fastFree(v18, v9);
      }
      return WTF::fastFree((WTF *)v14, v9);
    }
  }
  return result;
}

unsigned int *WebCore::SVGElement::addReferencingCSSClient(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  void *v8;
  WebCore::SVGElementRareData *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  int v13;
  _BYTE v14[24];

  v4 = *(_QWORD *)(a1 + 64);
  v5 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFLL);
  if ((v4 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v4 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_12;
    if ((*(_BYTE *)((v4 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 4
      && (*(_BYTE *)((v4 & 0xFFFFFFFFFFFFLL) + 0x35) & 1) == 0
      && (*(_BYTE *)((v4 & 0xFFFFFFFFFFFFLL) + 0x35) & 8) != 0)
    {
      ++*(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10);
      v12 = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v5 + 928))(v5, v12);
      v13 = v5[4];
      if (v13)
      {
        v5[4] = v13 - 1;
        goto LABEL_4;
      }
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x1965F6604);
    }
  }
LABEL_4:
  v6 = *(_QWORD *)(a1 + 120);
  if (!v6)
  {
    v6 = WTF::fastMalloc((WTF *)0x60);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_BYTE *)(v6 + 64) &= 0xF8u;
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 72) = 0;
    v9 = *(WebCore::SVGElementRareData **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v6;
    if (v9)
    {
      WebCore::SVGElementRareData::~SVGElementRareData(v9, v8);
      WTF::fastFree(v10, v11);
      v6 = *(_QWORD *)(a1 + 120);
    }
  }
  return WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::SVGResourceElementClient>(v6 + 24, a2, (uint64_t)v14);
}

uint64_t WebCore::SVGElement::removeReferencingCSSClient(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  void *v6;
  WebCore::SVGElementRareData *v7;
  WTF *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  result = *(_QWORD *)(a1 + 120);
  if (result)
  {
    if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        goto LABEL_15;
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 4
        && (*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) == 0)
      {
        v11 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
        v12 = a1;
        if ((*(_BYTE *)(v11 + 0x35) & 8) != 0)
        {
          ++*(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
          v10 = a2;
          v4 = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 936))(v11, v4);
          v5 = *(_DWORD *)(v11 + 16);
          if (v5)
          {
            *(_DWORD *)(v11 + 16) = v5 - 1;
            result = *(_QWORD *)(v12 + 120);
            if (!result)
            {
              result = WTF::fastMalloc((WTF *)0x60);
              *(_OWORD *)result = 0u;
              *(_OWORD *)(result + 16) = 0u;
              *(_OWORD *)(result + 32) = 0u;
              *(_OWORD *)(result + 48) = 0u;
              *(_BYTE *)(result + 64) &= 0xF8u;
              *(_QWORD *)(result + 80) = 0;
              *(_QWORD *)(result + 88) = 0;
              *(_QWORD *)(result + 72) = 0;
              v7 = *(WebCore::SVGElementRareData **)(v12 + 120);
              *(_QWORD *)(v12 + 120) = result;
              if (v7)
              {
                WebCore::SVGElementRareData::~SVGElementRareData(v7, v6);
                WTF::fastFree(v8, v9);
                result = *(_QWORD *)(v12 + 120);
              }
            }
            a2 = v10;
            return WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGResourceElementClient>(result + 24, a2);
          }
LABEL_15:
          __break(0xC471u);
          JUMPOUT(0x1965F6754);
        }
      }
    }
    return WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGResourceElementClient>(result + 24, a2);
  }
  return result;
}

uint64_t WebCore::SVGElement::correspondingUseElement@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = **(_QWORD **)(this + 40);
  if (v2)
    v3 = (*(_WORD *)(v2 + 28) & 0x80) == 0;
  else
    v3 = 1;
  if (v3 || *(_BYTE *)(v2 + 193))
  {
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(v2 + 200);
  if (v4)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (v4)
    {
      if ((*(_WORD *)(v4 + 28) & 0x20) != 0
        && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24))
      {
        *(_DWORD *)(v4 + 24) += 2;
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  *a2 = v4;
  return this;
}

BOOL WebCore::SVGElement::haveLoadedRequiredResources(WebCore::SVGElement *this)
{
  uint64_t v1;
  _BOOL8 v2;

  v1 = *((_QWORD *)this + 10);
  if (!v1)
    return 1;
  v2 = 1;
  while ((*(_WORD *)(v1 + 28) & 0x20) == 0)
  {
    v1 = *(_QWORD *)(v1 + 56);
    if (!v1)
      return v2;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 1272))(v1))
    return 0;
  do
  {
    v1 = *(_QWORD *)(v1 + 56);
    v2 = v1 == 0;
  }
  while (v1
       && ((*(_WORD *)(v1 + 28) & 0x20) == 0
        || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1272))(v1) & 1) != 0));
  return v2;
}

uint64_t WebCore::SVGElement::addEventListener(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, unsigned __int8 *a4)
{
  WTF *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  WTF *v17;
  uint64_t v19;
  WebCore *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  WebCore *v24;
  _DWORD *v25;
  WTF *v26;
  int v27;
  unsigned int v28;

  v8 = (WTF *)*a3;
  *((_DWORD *)v8 + 4) = *(_DWORD *)(*a3 + 16) + 1;
  v26 = v8;
  v10 = WebCore::Node::addEventListener((WebCore *)a1, a2, (uint64_t *)&v26, a4);
  v11 = v26;
  v26 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 4) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v11 + 8))(v11);
    else
      --*((_DWORD *)v11 + 4);
  }
  if ((_DWORD)v10)
  {
    v12 = **(_QWORD **)(a1 + 40);
    if (!v12 || (*(_WORD *)(v12 + 28) & 0x80) == 0)
    {
      v14 = *(_QWORD *)(a1 + 120);
      if (v14)
      {
        v15 = (uint64_t *)(v14 + 40);
      }
      else
      {
        v15 = &WebCore::SVGElement::instances(void)const::emptyInstances;
        {
          WebCore::SVGElement::instances(void)const::emptyInstances = 0;
          *(_QWORD *)&dword_1EE2F9738 = 0;
        }
      }
      WTF::copyToVectorOf<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((uint64_t)v15, v9, (uint64_t)&v26);
      v17 = v26;
      if (v28)
      {
        v19 = 8 * v28;
        do
        {
          v20 = *(WebCore **)v17;
          v21 = *a3;
          *(_DWORD *)(v21 + 16) = *(_DWORD *)(*a3 + 16) + 1;
          v25 = (_DWORD *)v21;
          WebCore::Node::addEventListener(v20, a2, (uint64_t *)&v25, a4);
          v22 = v25;
          v25 = 0;
          if (v22)
          {
            if (v22[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
            else
              --v22[4];
          }
          v17 = (WTF *)((char *)v17 + 8);
          v19 -= 8;
        }
        while (v19);
        v17 = v26;
        if (v28)
        {
          v23 = 8 * v28;
          do
          {
            v24 = *(WebCore **)v17;
            *(_QWORD *)v17 = 0;
            if (v24)
            {
              if (*((_DWORD *)v24 + 6) == 2)
              {
                if ((*((_WORD *)v24 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v24, v16);
              }
              else
              {
                *((_DWORD *)v24 + 6) -= 2;
              }
            }
            v17 = (WTF *)((char *)v17 + 8);
            v23 -= 8;
          }
          while (v23);
          v17 = v26;
        }
      }
      if (v17)
      {
        v26 = 0;
        v27 = 0;
        WTF::fastFree(v17, v16);
      }
    }
  }
  return v10;
}

uint64_t WebCore::SVGElement::removeEventListener(uint64_t a1, WTF::StringImpl **a2, WebCore::EventListener *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  WebCore::EventTarget **v15;
  uint64_t v17;
  uint64_t v18;
  WebCore::EventTarget *v19;
  WTF *v20;
  int v21;
  unsigned int v22;

  v8 = **(_QWORD **)(a1 + 40);
  if (v8)
    v9 = (*(_WORD *)(v8 + 28) & 0x80) == 0;
  else
    v9 = 1;
  if (!v9)
    return WebCore::Node::removeEventListener((WebCore::EventTarget *)a1, a2, a3, a4);
  ++*((_DWORD *)a3 + 4);
  v11 = WebCore::Node::removeEventListener((WebCore::EventTarget *)a1, a2, a3, a4);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 120);
    if (v12)
    {
      v13 = (uint64_t *)(v12 + 40);
    }
    else
    {
      v13 = &WebCore::SVGElement::instances(void)const::emptyInstances;
      {
        WebCore::SVGElement::instances(void)const::emptyInstances = 0;
        *(_QWORD *)&dword_1EE2F9738 = 0;
      }
    }
    WTF::copyToVectorOf<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((uint64_t)v13, v10, (uint64_t)&v20);
    v15 = (WebCore::EventTarget **)v20;
    if (v22)
    {
      v17 = 8 * v22;
      do
      {
        if ((WebCore::Node::removeEventListener(*v15, a2, a3, a4) & 1) == 0)
          WebCore::EventListenerMap::removeFirstEventListenerCreatedFromMarkup((unsigned __int8 *)(((*((_QWORD *)*v15 + 2) & 0xFFFFFFFFFFFFLL) + 16) & ((uint64_t)(*((_QWORD *)*v15 + 2) << 15) >> 63)), (const WTF::AtomString *)a2);
        ++v15;
        v17 -= 8;
      }
      while (v17);
      v15 = (WebCore::EventTarget **)v20;
      if (v22)
      {
        v18 = 8 * v22;
        do
        {
          v19 = *v15;
          *v15 = 0;
          if (v19)
          {
            if (*((_DWORD *)v19 + 6) == 2)
            {
              if ((*((_WORD *)v19 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v19, v14);
            }
            else
            {
              *((_DWORD *)v19 + 6) -= 2;
            }
          }
          ++v15;
          v18 -= 8;
        }
        while (v18);
        v15 = (WebCore::EventTarget **)v20;
      }
    }
    if (v15)
    {
      v20 = 0;
      v21 = 0;
      WTF::fastFree((WTF *)v15, v14);
    }
  }
  if (*((_DWORD *)a3 + 4) == 1)
    (*(void (**)(WebCore::EventListener *))(*(_QWORD *)a3 + 8))(a3);
  else
    --*((_DWORD *)a3 + 4);
  return v11;
}

uint64_t WebCore::SVGElement::loadEventTimer(WebCore::SVGElement *this)
{
  return 0;
}

WTF::MonotonicTime *WebCore::SVGElement::finishParsingChildren(WTF::MonotonicTime *this, void *a2)
{
  WTF::MonotonicTime *v2;
  __int16 v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::MonotonicTime *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WebCore::SVGUseElement *v18;
  WebCore::SVGUseElement *v19;
  WebCore::SVGUseElement *v20;
  uint64_t v21;
  char v22;
  WebCore::SVGUseElement *v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  unsigned int v31;
  uint64_t *v32;
  unsigned int v34;
  unint64_t v36;
  WebCore::SVGUseElement *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::MonotonicTime *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  WebCore::SVGUseElement *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::MonotonicTime *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t ElementChild;
  uint64_t v58;
  WebCore::SVGUseElement *v59;
  WTF::MonotonicTime *v60;
  uint64_t v61;
  WebCore::SVGUseElement *v62[2];
  __int128 v63;
  uint64_t v64;

  v2 = this;
  v3 = *((_WORD *)this + 15);
  if ((v3 & 0x200) != 0)
  {
    v9 = 0;
    *((_WORD *)this + 15) = v3 & 0xFDFF;
    v64 = 0;
    *(_OWORD *)v62 = 0u;
    v63 = 0u;
    LOBYTE(v62[0]) = 8;
    v10 = *((_QWORD *)this + 10);
    if (v10)
    {
      while ((*(_WORD *)(v10 + 28) & 8) == 0)
      {
        v9 = 0;
        v10 = *(_QWORD *)(v10 + 56);
        if (!v10)
          goto LABEL_17;
      }
      v9 = v10;
    }
LABEL_17:
    if (v9)
      v11 = 2;
    else
      v11 = 1;
    BYTE1(v64) = v11;
    this = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *, WebCore::SVGUseElement **))(*(_QWORD *)this + 376))(this, v62);
    v3 = *((_WORD *)v2 + 15);
  }
  *((_WORD *)v2 + 15) = v3 & 0xFFFD;
  if ((*((_BYTE *)v2 + 22) & 8) == 0)
    goto LABEL_27;
  v4 = (uint64_t *)*((_QWORD *)v2 + 5);
  v5 = v4[1];
  if (!*(_QWORD *)(v5 + 1944) || *(_BYTE *)(v5 + 3405))
    goto LABEL_27;
  v6 = *((_QWORD *)v2 + 8);
  if ((v6 & 0x4000000000000) != 0)
  {
    v12 = *v4;
    v13 = (*(_WORD *)(v12 + 28) & 0x80) == 0 || v12 == 0;
    v14 = v12 + 216;
    if (v13)
      v14 = v5 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v14 + 236))
      goto LABEL_27;
  }
  v7 = *(_QWORD *)(v5 + 1272);
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 70) & 4) != 0)
      goto LABEL_27;
  }
  if (!*(_BYTE *)(v5 + 3362) && *(_BYTE *)(v5 + 3390) && !*(_BYTE *)(v5 + 3391))
    goto LABEL_27;
  if ((v6 & 0x800000000000000) != 0)
  {
    v42 = v6 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_104;
    if ((*(_BYTE *)((v6 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      v42 = *(_QWORD *)(*(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    if ((*(_BYTE *)(v42 + 100) & 0x80) == 0 || *((_QWORD *)v2 + 10))
LABEL_104:
      this = WebCore::Element::invalidateStyleForSubtree(v2);
  }
  v8 = (WTF::MonotonicTime *)*((_QWORD *)v2 + 11);
  if (v8)
  {
    while ((*((_WORD *)v8 + 14) & 8) == 0)
    {
      v8 = (WTF::MonotonicTime *)(*((_QWORD *)v8 + 6) & 0xFFFFFFFFFFFFLL);
      if (!v8)
        goto LABEL_14;
    }
    v36 = *((_QWORD *)v2 + 8);
    if ((v36 & 0x80000000000000) != 0)
    {
      this = WebCore::Style::invalidateForLastChildState(v8, 0);
      v36 = *((_QWORD *)v2 + 8);
    }
    if (!(v36 >> 62))
      goto LABEL_27;
    if ((v36 & 0x8000000000000000) != 0)
    {
      this = v8;
      do
      {
        v60 = this;
        if ((v36 & 0x4000000000000000) != 0)
          WebCore::Element::invalidateStyleInternal(this);
        ElementChild = WebCore::ContainerNode::firstElementChild(v60);
        if (ElementChild)
        {
          v58 = ElementChild;
LABEL_142:
          WebCore::Element::invalidateStyleForSubtreeInternal((WTF::MonotonicTime *)v58);
          while (1)
          {
            v58 = *(_QWORD *)(v58 + 56);
            if (!v58)
              break;
            if ((*(_WORD *)(v58 + 28) & 8) != 0)
              goto LABEL_142;
          }
        }
        this = (WTF::MonotonicTime *)WebCore::Node::previousElementSibling((uint64_t)v60);
      }
      while (this);
    }
    else if ((v36 & 0x4000000000000000) != 0)
    {
      do
      {
        WebCore::Element::invalidateStyleInternal(v8);
        this = (WTF::MonotonicTime *)WebCore::Node::previousElementSibling((uint64_t)v8);
        v8 = this;
      }
      while (this);
    }
    else
    {
      this = v8;
      do
        this = (WTF::MonotonicTime *)WebCore::Node::previousElementSibling((uint64_t)this);
      while (this);
    }
LABEL_14:
    if (v2)
      goto LABEL_27;
  }
  else
  {
LABEL_27:
    if (*(_QWORD *)(*((_QWORD *)v2 + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      v28 = *((_QWORD *)v2 + 4);
      if (!v28)
        return this;
      v29 = *(_WORD *)(v28 + 28);
      if ((v29 & 0x20) != 0
        && *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24))
      {
        return this;
      }
      if ((*((_BYTE *)v2 + 22) & 0x10) != 0
        && ((v38 = **((_QWORD **)v2 + 5)) != 0 ? (v39 = (*(_WORD *)(v38 + 28) & 0x80) == 0) : (v39 = 1),
            !v39
         && (v40 = *(_QWORD *)(v38 + 200)) != 0
         && (v41 = *(_QWORD *)(v40 + 8)) != 0
         && (*(_WORD *)(v41 + 28) & 0x20) != 0))
      {
        if ((v29 & 0x20) == 0
          && *(_QWORD *)(*(_QWORD *)(v41 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
        {
          return this;
        }
      }
      else if ((v29 & 0x20) == 0)
      {
        return this;
      }
    }
  }
  v15 = *((_QWORD *)v2 + 15);
  if (!v15)
  {
    v16 = &WebCore::SVGElement::instances(void)const::emptyInstances;
    {
      WebCore::SVGElement::instances(void)const::emptyInstances = 0;
      *(_QWORD *)&dword_1EE2F9738 = 0;
      goto LABEL_31;
    }
LABEL_30:
    v17 = *v16;
    if (!*v16)
    {
LABEL_31:
      *((_DWORD *)v16 + 2) = 0;
LABEL_32:
      this = 0;
      *((_DWORD *)v16 + 3) = 0;
LABEL_33:
      v18 = 0;
      v19 = 0;
      v17 = 0;
      v20 = 0;
      v21 = 0;
      v62[1] = 0;
      *(_QWORD *)&v63 = 0;
      v62[0] = (WebCore::SVGUseElement *)v16;
      v22 = 1;
      goto LABEL_34;
    }
    v24 = *(_DWORD *)(v17 - 4);
    if (!v24)
      goto LABEL_42;
    v30 = 0;
    v31 = v24 - 1;
    do
    {
      v32 = (uint64_t *)(v17 + 8 * v31);
      if ((unint64_t)(*v32 + 1) >= 2 && !*(_QWORD *)(*v32 + 8))
      {
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v32, a2);
        ++v30;
      }
    }
    while ((unint64_t)v31--);
    v17 = *v16;
    if (v30)
    {
      *(_DWORD *)(v17 - 16) += v30;
      v55 = *v16;
      if (*v16)
        v56 = *(_DWORD *)(v55 - 12);
      else
        v56 = 0;
      *(_DWORD *)(v55 - 12) = v56 - v30;
      v17 = *v16;
    }
    if (!v17)
      goto LABEL_31;
    v34 = *(_DWORD *)(v17 - 4);
    if (v34 < 9 || 6 * *(_DWORD *)(v17 - 12) >= v34)
    {
LABEL_42:
      *((_DWORD *)v16 + 2) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(v16);
      v17 = *v16;
      *((_DWORD *)v16 + 2) = 0;
      if (!v17)
        goto LABEL_32;
    }
    v25 = *(_DWORD *)(v17 - 12);
    if (v25 >= 0x7FFFFFFF)
      v26 = -2;
    else
      v26 = 2 * v25;
    *((_DWORD *)v16 + 3) = v26;
    v27 = *(unsigned int *)(v17 - 12);
    if ((_DWORD)v27)
    {
      if (v27 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1965F724CLL);
      }
      this = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)(8 * v27));
      v17 = *v16;
      if (!*v16)
        goto LABEL_33;
      v21 = *(unsigned int *)(v17 - 4);
      v19 = (WebCore::SVGUseElement *)(v17 + 8 * v21);
      if (*(_DWORD *)(v17 - 12))
      {
        v18 = (WebCore::SVGUseElement *)*v16;
        if ((_DWORD)v21)
        {
          v54 = 8 * v21;
          v18 = (WebCore::SVGUseElement *)*v16;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 = (WebCore::SVGUseElement *)((char *)v18 + 8);
            v54 -= 8;
            if (!v54)
            {
              v18 = (WebCore::SVGUseElement *)(v17 + 8 * v21);
              break;
            }
          }
        }
        v62[0] = (WebCore::SVGUseElement *)v16;
        v62[1] = v18;
        goto LABEL_49;
      }
    }
    else
    {
      this = 0;
      v21 = *(unsigned int *)(v17 - 4);
      v19 = (WebCore::SVGUseElement *)(v17 + 8 * v21);
    }
    v62[0] = (WebCore::SVGUseElement *)v16;
    v62[1] = v19;
    v18 = v19;
LABEL_49:
    v22 = 0;
    *(_QWORD *)&v63 = v19;
    v20 = v19;
LABEL_34:
    *((_QWORD *)&v63 + 1) = v20;
    v64 = v17 + 8 * v21;
    if (v18 != v20)
    {
      if (*(_QWORD *)(*(_QWORD *)v18 + 8))
      {
        v37 = v18;
      }
      else
      {
        do
        {
          v59 = (WebCore::SVGUseElement *)((char *)v18 + 8);
          v18 = v19;
          if (v59 != v19)
          {
            v18 = v59;
            while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
            {
              v18 = (WebCore::SVGUseElement *)((char *)v18 + 8);
              if (v18 == v19)
              {
                v18 = v19;
                break;
              }
            }
          }
          v37 = v20;
          if (v18 == v20)
            break;
          v37 = v18;
        }
        while (!*(_QWORD *)(*(_QWORD *)v18 + 8));
      }
      v62[1] = v37;
      v18 = v37;
    }
    if ((v22 & 1) != 0)
      v23 = 0;
    else
      v23 = (WebCore::SVGUseElement *)(v17 + 8 * *(unsigned int *)(v17 - 4));
    if (v18 != v23)
    {
      v43 = this;
      v44 = 0;
      do
      {
        v45 = *(_QWORD *)(*(_QWORD *)v18 + 8);
        *(_DWORD *)(v45 + 24) += 2;
        v61 = 0;
        *((_QWORD *)v43 + v44++) = v45;
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v61);
        WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(v62);
        v18 = v62[1];
      }
      while (v62[1] != v23);
      this = v43;
      if (!v44)
        return (WTF::MonotonicTime *)WTF::fastFree(this, a2);
      v46 = 8 * v44;
      v47 = (uint64_t *)v43;
      do
      {
        WebCore::SVGElement::correspondingUseElement(*v47, v62);
        v48 = v62[0];
        if (v62[0])
        {
          WebCore::SVGUseElement::invalidateShadowTree((uint64_t *)v62[0]);
          if (*((_DWORD *)v48 + 6) == 2)
          {
            if ((*((_WORD *)v48 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v48, v49);
          }
          else
          {
            *((_DWORD *)v48 + 6) -= 2;
          }
        }
        v50 = *v47++;
        WebCore::SVGElement::setCorrespondingElement(v50, 0);
        v46 -= 8;
      }
      while (v46);
      v51 = 8 * v44;
      v52 = v43;
      do
      {
        v53 = *(_QWORD *)v52;
        *(_QWORD *)v52 = 0;
        if (v53)
        {
          if (*(_DWORD *)(v53 + 24) == 2)
          {
            if ((*(_WORD *)(v53 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v53, a2);
          }
          else
          {
            *(_DWORD *)(v53 + 24) -= 2;
          }
        }
        v52 = (WTF::MonotonicTime *)((char *)v52 + 8);
        v51 -= 8;
        this = v43;
      }
      while (v51);
    }
    if (!this)
      return this;
    return (WTF::MonotonicTime *)WTF::fastFree(this, a2);
  }
  if ((*(_BYTE *)(v15 + 64) & 1) == 0)
  {
    v16 = (uint64_t *)(v15 + 40);
    goto LABEL_30;
  }
  return this;
}

uint64_t WebCore::SVGElement::childShouldCreateRenderer(WebCore::SVGElement *this, const WebCore::Node *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  int isSVGLayerAwareElement;
  const WebCore::Node *v7;

  if ((*((_WORD *)a2 + 14) & 0x20) == 0)
    return 0;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 680) & 0x800000000000) != 0)
  {
    v5 = *((_QWORD *)a2 + 12);
    v7 = a2;
    isSVGLayerAwareElement = WebCore::isSVGLayerAwareElement((WebCore *)*(unsigned __int16 *)(v5 + 10), a2);
    v2 = v5;
    a2 = v7;
    if (!isSVGLayerAwareElement)
      return 0;
  }
  else
  {
    v2 = *((_QWORD *)a2 + 12);
  }
  v3 = *(unsigned __int16 *)(v2 + 10);
  if ((v3 - 239) >= 3 && v3 != 177)
    return (*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)a2 + 1232))(a2);
  return 0;
}

uint64_t WebCore::isSVGLayerAwareElement(WebCore *this, const WebCore::SVGElement *a2)
{
  int v2;
  uint64_t result;

  v2 = (unsigned __int16)this;
  result = 1;
  switch(v2)
  {
    case 177:
    case 184:
    case 185:
    case 187:
    case 189:
    case 215:
    case 216:
    case 217:
    case 221:
    case 222:
    case 223:
    case 224:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
      return result;
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 186:
    case 188:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 218:
    case 219:
    case 220:
    case 225:
    case 226:
    case 233:
      goto LABEL_5;
    default:
      if (v2 != 259 && v2 != 266)
LABEL_5:
        result = 0;
      break;
  }
  return result;
}

_QWORD *WebCore::SVGElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  unsigned int *v11;
  unsigned int *Ref;
  uint64_t v13;
  int v14;
  int *v15;
  unsigned int v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WebCore::SVGDocumentExtensions *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int i;
  uint64_t v39;
  int *v40;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl **v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl **v71;

  WebCore::Element::attributeChanged(a1, a2, a3, a4, a5, a6);
  if (*(WTF::StringImpl **)a3 != *a4)
  {
    if (*(_QWORD *)a2 == WebCore::HTMLNames::styleAttr)
    {
      WebCore::StyledElement::styleAttributeChanged((WebCore::StyledElement *)a1, (WTF::StringImpl *)a4, a5);
      goto LABEL_4;
    }
    Ref = (unsigned int *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)a1 + 1144))(a1, a2);
    if ((_DWORD)Ref)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4) |= 4u;
      if ((*(_BYTE *)(a1 + 22) & 8) != 0)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        if (*(_QWORD *)(v21 + 1944))
        {
          if (!*(_BYTE *)(v21 + 3405) && !*(_BYTE *)(v21 + 3392))
          {
            *(_WORD *)(a1 + 30) |= 0x10u;
            v22 = *(_QWORD *)(a1 + 64);
            v23 = HIWORD(v22) & 7;
            if (v23 <= 2)
            {
              *(_QWORD *)(a1 + 64) = v22 & 0xFFF8FFFFFFFFFFFFLL | 0x3000000000000;
              if (!(_DWORD)v23)
              {
                *(_DWORD *)(a1 + 24) += 2;
                v24 = *(unsigned __int16 *)(a1 + 28);
                if ((v24 & 0x80) != 0)
                {
                  v46 = *(_QWORD *)(a1 + 200);
                  if (!v46)
                    goto LABEL_87;
                }
                else if ((~v24 & 0x408) == 0
                       && (Ref = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1),
                           (_DWORD)Ref))
                {
                  v46 = *(_QWORD *)(a1 + 112);
                  if (!v46)
                    goto LABEL_87;
                }
                else
                {
                  v11 = *(unsigned int **)(a1 + 32);
                  if (!v11)
                    goto LABEL_87;
                  v25 = *((_WORD *)v11 + 14);
                  if ((v25 & 0x80) == 0)
                  {
                    if ((v25 & 8) != 0)
                    {
                      if ((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) == 0)
                        goto LABEL_33;
                      v34 = *(_QWORD *)((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
                      if (!v34)
                        goto LABEL_33;
                      Ref = *(unsigned int **)(v34 + 224);
                      if (Ref)
                      {
                        Ref = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)Ref + 16))(Ref, a1);
                        v11 = Ref;
                        goto LABEL_110;
                      }
                    }
LABEL_87:
                    if (*(_DWORD *)(a1 + 24) == 2)
                    {
                      v52 = *(_WORD *)(a1 + 30);
                      if ((v52 & 0x400) == 0)
                      {
                        v53 = *(_WORD *)(a1 + 28);
                        if ((v53 & 0xF000) == 0x9000)
                        {
                          Ref = WebCore::Document::removedLastRef((WebCore::Document *)a1, v11);
                        }
                        else
                        {
                          if ((v53 & 0x20) != 0)
                          {
                            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160));
                            v52 = *(_WORD *)(a1 + 30);
                          }
                          *(_WORD *)(a1 + 30) = v52 | 0x400;
                          Ref = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
                        }
                      }
                    }
                    else
                    {
                      *(_DWORD *)(a1 + 24) -= 2;
                    }
                    v47 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
                    v48 = *(_QWORD *)(v47 + 1272);
                    if (v48)
                    {
                      v49 = *(_QWORD *)(v48 + 64);
                      if ((v49 & 0x8000000000000) != 0
                        || (v49 & 0x7000000000000) != 0
                        || (*(_WORD *)(v48 + 30) & 0x20) != 0)
                      {
                        *(_DWORD *)(v47 + 24) += 2;
                        *(_QWORD *)(v47 + 64) |= 0x8000000000000uLL;
                        if (((*(_QWORD *)(v47 + 1536) & 0xFFFFFFFFFFFFLL) == 0
                           || *(double *)((*(_QWORD *)(v47 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                          && !*(_BYTE *)(v47 + 3362))
                        {
                          *(_QWORD *)(v47 + 1528) = 0;
                          WTF::MonotonicTime::now((WTF::MonotonicTime *)Ref);
                          WebCore::TimerBase::setNextFireTime(v47 + 1504, v50 + 0.0);
                          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                          {
                            v57 = *(_QWORD *)(v47 + 528);
                            if (v57)
                            {
                              v58 = *(_QWORD *)(v57 + 8);
                              if (v58)
                              {
                                v59 = *(_QWORD *)(v58 + 24);
                                if (v59)
                                {
                                  v60 = *(_QWORD *)(v59 + 8);
                                  if (v60)
                                    goto LABEL_119;
                                }
                              }
                            }
                            v62 = *(_QWORD *)(v47 + 2632);
                            if (v62)
                            {
                              v63 = *(_QWORD *)(v62 + 8);
                              if (v63)
                              {
                                v64 = *(_QWORD *)(v63 + 528);
                                if (v64)
                                {
                                  v65 = *(_QWORD *)(v64 + 8);
                                  if (v65)
                                  {
                                    v66 = *(_QWORD *)(v65 + 24);
                                    if (v66)
                                    {
                                      v60 = *(_QWORD *)(v66 + 8);
                                      if (v60)
                                      {
LABEL_119:
                                        v61 = *(WTF::StringImpl **)(*(_QWORD *)(v60 + 80) + 8);
                                        if (v61)
                                          WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(v61, (WebCore::Document *)v47);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        if (*(_DWORD *)(v47 + 24) == 2)
                        {
                          v54 = *(_WORD *)(v47 + 30);
                          if ((v54 & 0x400) == 0)
                          {
                            v55 = *(_WORD *)(v47 + 28);
                            if ((v55 & 0xF000) == 0x9000)
                            {
                              WebCore::Document::removedLastRef((WebCore::Document *)v47, v11);
                            }
                            else
                            {
                              if ((v55 & 0x20) != 0)
                              {
                                (*(void (**)(_QWORD))(**(_QWORD **)(v47 + 160) + 16))(*(_QWORD *)(v47 + 160));
                                v54 = *(_WORD *)(v47 + 30);
                              }
                              *(_WORD *)(v47 + 30) = v54 | 0x400;
                              (*(void (**)(uint64_t))(*(_QWORD *)v47 + 72))(v47);
                            }
                          }
                        }
                        else
                        {
                          *(_DWORD *)(v47 + 24) -= 2;
                        }
                      }
                    }
                    goto LABEL_4;
                  }
                  v46 = *((_QWORD *)v11 + 25);
                  if (!v46)
                    goto LABEL_87;
                }
                v11 = *(unsigned int **)(v46 + 8);
LABEL_110:
                if (!v11)
                  goto LABEL_87;
LABEL_33:
                *((_QWORD *)v11 + 8) |= 0x10000000000000uLL;
                while (1)
                {
                  if ((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) != 0)
                  {
                    v28 = *(_QWORD *)((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
                    if (v28)
                      *(_QWORD *)(v28 + 64) |= 0x8000000000000uLL;
                  }
                  v26 = *((_QWORD *)v11 + 8);
                  if ((v26 & 0x8000000000000) != 0)
                    goto LABEL_87;
                  *((_QWORD *)v11 + 8) = v26 | 0x8000000000000;
                  Ref = (unsigned int *)*((_QWORD *)v11 + 4);
                  if (!Ref)
                    goto LABEL_87;
                  v27 = *((_WORD *)Ref + 14);
                  if ((v27 & 0x80) != 0)
                  {
                    v56 = *((_QWORD *)Ref + 25);
                    if (!v56)
                      goto LABEL_87;
                    Ref = *(unsigned int **)(v56 + 8);
                  }
                  else
                  {
                    if ((v27 & 8) == 0)
                      goto LABEL_87;
                    if ((*((_QWORD *)Ref + 9) & 0xFFFFFFFFFFFFLL) != 0)
                    {
                      v35 = *(_QWORD *)((*((_QWORD *)Ref + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
                      if (v35)
                      {
                        Ref = *(unsigned int **)(v35 + 224);
                        if (!Ref)
                          goto LABEL_87;
                        Ref = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)Ref + 16))(Ref);
                      }
                    }
                  }
                  v11 = Ref;
                  if (!Ref)
                    goto LABEL_87;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_4:
  v13 = *(_QWORD *)a2;
  v14 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  switch(v14)
  {
    case 391:
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 40);
      v30 = *a4;
      if (*a4)
        *(_DWORD *)v30 += 2;
      v31 = *(WTF::StringImpl **)(v29 + 32);
      *(_QWORD *)(v29 + 32) = v30;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v31 -= 2;
      }
      break;
    case 513:
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      *(_DWORD *)(v32 + 24) += 2;
      WebCore::Document::checkedSVGExtensions((WebCore::Document *)v32, &v71);
      WebCore::SVGDocumentExtensions::rebuildAllElementReferencesForTarget(v33, (WebCore::SVGElement *)a1);
      if (v71)
      {
        if (!*(_DWORD *)v71)
        {
          __break(0xC471u);
          JUMPOUT(0x1965F79BCLL);
        }
        --*(_DWORD *)v71;
      }
      if (*(_DWORD *)(v32 + 24) == 2)
      {
        v44 = *(_WORD *)(v32 + 30);
        if ((v44 & 0x400) == 0)
        {
          v45 = *(_WORD *)(v32 + 28);
          if ((v45 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v32, v11);
          }
          else
          {
            if ((v45 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v32 + 160) + 16))(*(_QWORD *)(v32 + 160));
              v44 = *(_WORD *)(v32 + 30);
            }
            *(_WORD *)(v32 + 30) = v44 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 72))(v32);
          }
        }
      }
      else
      {
        *(_DWORD *)(v32 + 24) -= 2;
      }
      break;
    case 874:
      v69 = *a4;
      if (*a4 && (v70 = *((unsigned int *)v69 + 1), (_DWORD)v70))
      {
        WebCore::parseHTMLInteger(*((uint64_t **)v69 + 1), v70 | ((unint64_t)((*((_DWORD *)v69 + 4) >> 2) & 1) << 32), (uint64_t *)&v71);
        if (!HIDWORD(v71))
          WebCore::Element::setTabIndexExplicitly((_QWORD *)a1, v71 | 0x100000000);
      }
      else
      {
        WebCore::Element::setTabIndexExplicitly((_QWORD *)a1, 0);
      }
      break;
    default:
      {
        WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::$_0::operator()((uint64_t *)&v71);
        v67 = v71;
        v71 = 0;
        WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map = (uint64_t)v67;
        WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::~HashMap(&v71, v68);
        v13 = *(_QWORD *)a2;
      }
      if (*(_QWORD *)(v13 + 32))
        goto LABEL_13;
      v15 = *(int **)(v13 + 24);
      if (v15[1] < 3)
        goto LABEL_13;
      v16 = v15[4];
      v17 = *((_QWORD *)v15 + 1);
      if ((v16 & 4) != 0)
      {
        if (*(_BYTE *)v17 != 111)
        {
LABEL_13:
          v18 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_14:
          if (*v18)
            WebCore::Element::setAttributeEventListener((WebCore::Element *)a1, v18, a2, (const WTF::AtomString *)a4);
          break;
        }
        v20 = *(unsigned __int8 *)(v17 + 1);
      }
      else
      {
        if (*(_WORD *)v17 != 111)
          goto LABEL_13;
        v20 = *(unsigned __int16 *)(v17 + 2);
      }
      v18 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      if (v20 == 110)
      {
        v36 = *v15;
        *v15 += 2;
        if (WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map)
        {
          v37 = 0;
          for (i = v16 >> 8; ; i = v37 + v39)
          {
            v39 = i & *(_DWORD *)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                                - 8);
            v40 = *(int **)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                          + 16 * v39);
            if (!v40)
              break;
            if (v40 != (int *)-1 && v40 == v15)
              goto LABEL_73;
            ++v37;
          }
          v39 = *(unsigned int *)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                                - 4);
LABEL_73:
          v42 = WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map + 16 * v39;
        }
        else
        {
          v42 = 0;
        }
        if (v36)
          *v15 = v36;
        else
          WTF::StringImpl::destroy((WTF::StringImpl *)v15, (WTF::StringImpl *)v11);
        v43 = WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map;
        if (WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map)
          v43 = WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
              + 16
              * *(unsigned int *)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                                - 4);
        if (v42 != v43)
          v18 = (WTF::StringImpl **)(v42 + 8);
      }
      goto LABEL_14;
  }
  if (*(_QWORD *)a2 == WebCore::HTMLNames::styleAttr)
    return WebCore::SVGElement::invalidateInstances((_QWORD *)a1, v11);
  else
    return (_QWORD *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)a1 + 1240))(a1, a2);
}

WTF::StringImpl *WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::setBaseValInternal(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  _DWORD *v3;
  WTF::StringImpl *result;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = *(WTF::StringImpl **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::SVGElement::synchronizeAttribute(WebCore::SVGElement *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;

  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 20) + 48))(&v7);
  if (v8)
  {
    WTF::AtomString::AtomString((WTF::AtomString *)&v6, &v7);
    WebCore::Element::setSynchronizedLazyAttribute((WTF::StringImpl **)this, a2, &v6);
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
    if (v8)
    {
      result = v7;
      v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGElement::synchronizeAllAttributes(WebCore::SVGElement *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl ***v5;
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF *v21;
  void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  int v26;
  WTF::StringImpl **v27;
  WTF *v29;
  void *v30;
  unint64_t v31;
  WTF::StringImpl ***v32;
  WTF::StringImpl *v33;

  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl ****__return_ptr))(**((_QWORD **)this + 20)
                                                                                          + 56))(&v32);
  v4 = v32;
  if (!v32)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = &v32[2 * v6];
    goto LABEL_4;
  }
  v6 = *((unsigned int *)v32 - 1);
  v7 = &v32[2 * v6];
  if (!*((_DWORD *)v32 - 3))
  {
    v5 = &v32[2 * v6];
    goto LABEL_3;
  }
  if ((_DWORD)v6)
  {
    v9 = (WTF::StringImpl **)WebCore::nullName;
    v10 = 16 * v6;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v9)
        {
          v11 = (*(_DWORD *)v9)++;
          v12 = *v4;
          if (v11)
          {
            *(_DWORD *)v9 = v11;
            v13 = (uint64_t)v9;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v9);
            result = (WTF::StringImpl *)WTF::fastFree(v15, v16);
            v13 = WebCore::nullName;
          }
        }
        else
        {
          v13 = 0;
          v12 = *v4;
        }
        if (v12 != v9 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
          break;
        v4 += 2;
        v9 = (WTF::StringImpl **)v13;
        v10 -= 16;
        if (!v10)
        {
          v4 = v7;
          break;
        }
      }
      v5 = v4;
      v4 = v32;
    }
    else
    {
      v31 = 0;
      while ((unint64_t)v32[v31 / 8] + 1 <= 1)
      {
        v31 += 16;
        if (v10 == v31)
        {
          v5 = v7;
          goto LABEL_4;
        }
      }
      v5 = &v32[v31 / 8];
    }
  }
  else
  {
    v5 = v32;
  }
LABEL_4:
  if (v4)
    v8 = &v4[2 * *((unsigned int *)v4 - 1)];
  else
    v8 = 0;
  if (v8 != v5)
  {
    do
    {
      v23 = (WTF::StringImpl *)v5[1];
      if (v23)
      {
        if ((*((_BYTE *)v23 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v23 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v23, v3);
          v23 = v33;
        }
      }
      v33 = v23;
      WebCore::Element::setSynchronizedLazyAttribute(this, (const WebCore::QualifiedName *)v5, (const WTF::AtomString *)&v33);
      result = v33;
      v33 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
        else
          *(_DWORD *)result -= 2;
      }
      v24 = v5 + 2;
      v5 = v7;
      if (v24 != v7)
      {
        v25 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
          while (1)
          {
            if (v25)
            {
              v26 = (*(_DWORD *)v25)++;
              v27 = *v24;
              if (v26)
              {
                *(_DWORD *)v25 = v26;
              }
              else
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
                result = (WTF::StringImpl *)WTF::fastFree(v29, v30);
              }
            }
            else
            {
              v27 = *v24;
            }
            if (v27 != v25 && (WTF::StringImpl **)((char *)*v24 + 1) != 0)
              break;
            v24 += 2;
            if (v24 == v7)
              goto LABEL_59;
            v25 = (WTF::StringImpl **)WebCore::nullName;
          }
        }
        else
        {
          while ((unint64_t)*v24 + 1 <= 1)
          {
            v24 += 2;
            if (v24 == v7)
            {
LABEL_59:
              v5 = v7;
              goto LABEL_61;
            }
          }
        }
        v5 = v24;
      }
LABEL_61:
      ;
    }
    while (v5 != v8);
    v4 = v32;
  }
  if (v4)
  {
    v17 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v17)
    {
      v18 = v4;
      do
      {
        v19 = *v18;
        if (*v18 != (WTF::StringImpl **)-1)
        {
          v20 = (WTF::StringImpl *)v18[1];
          v18[1] = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
            {
              WTF::StringImpl::destroy(v20, v3);
              v19 = *v18;
            }
            else
            {
              *(_DWORD *)v20 -= 2;
            }
          }
          *v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
              WTF::fastFree(v21, v22);
            }
            else
            {
              --*(_DWORD *)v19;
            }
          }
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    return (WTF::StringImpl *)WTF::fastFree((WTF *)(v4 - 2), v3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGElement::commitPropertyChange(WebCore::SVGElement *this, WebCore::SVGProperty *a2)
{
  uint64_t v4;
  int v5;
  WTF::StringImpl **result;
  WTF *v7;
  void *v8;
  WebCore::QualifiedName::QualifiedNameImpl *v9;

  *((_BYTE *)a2 + 25) = 1;
  v4 = *((_QWORD *)this + 13);
  if (!v4 || (v5 = *(_DWORD *)(v4 + 4), (v5 & 1) == 0))
  {
    WebCore::Element::createUniqueElementData(this);
    v4 = *((_QWORD *)this + 13);
    v5 = *(_DWORD *)(v4 + 4);
  }
  *(_DWORD *)(v4 + 4) = v5 | 0x10;
  (*(void (**)(WebCore::QualifiedName::QualifiedNameImpl **__return_ptr, _QWORD, WebCore::SVGProperty *))(**((_QWORD **)this + 20) + 24))(&v9, *((_QWORD *)this + 20), a2);
  (*(void (**)(WebCore::SVGElement *, WebCore::QualifiedName::QualifiedNameImpl **))(*(_QWORD *)this + 1240))(this, &v9);
  result = (WTF::StringImpl **)v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl **`non-virtual thunk to'WebCore::SVGElement::commitPropertyChange(WebCore::SVGElement *this, WebCore::SVGProperty *a2)
{
  char *v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl **result;
  WTF *v8;
  void *v9;
  WebCore::QualifiedName::QualifiedNameImpl *v10;

  v4 = (char *)this - 112;
  *((_BYTE *)a2 + 25) = 1;
  v5 = *((_QWORD *)this - 1);
  if (!v5 || (v6 = *(_DWORD *)(v5 + 4), (v6 & 1) == 0))
  {
    WebCore::Element::createUniqueElementData((WebCore::SVGElement *)((char *)this - 112));
    v5 = *((_QWORD *)this - 1);
    v6 = *(_DWORD *)(v5 + 4);
  }
  *(_DWORD *)(v5 + 4) = v6 | 0x10;
  (*(void (**)(WebCore::QualifiedName::QualifiedNameImpl **__return_ptr, _QWORD, WebCore::SVGProperty *))(**((_QWORD **)this + 6) + 24))(&v10, *((_QWORD *)this + 6), a2);
  (*(void (**)(char *, WebCore::QualifiedName::QualifiedNameImpl **))(*((_QWORD *)this - 14) + 1240))(v4, &v10);
  result = (WTF::StringImpl **)v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGElement::commitPropertyChange(WebCore::SVGElement *this, WebCore::SVGAnimatedProperty *a2)
{
  uint64_t v4;
  int v5;
  WTF::StringImpl **result;
  WTF *v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebCore::QualifiedName::QualifiedNameImpl *v14;

  (*(void (**)(WebCore::QualifiedName::QualifiedNameImpl **__return_ptr))(**((_QWORD **)this + 20) + 32))(&v14);
  if (((*(uint64_t (**)(_QWORD, WebCore::QualifiedName::QualifiedNameImpl **))(**((_QWORD **)this + 20) + 72))(*((_QWORD *)this + 20), &v14) & 1) != 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::SVGAnimatedProperty *))(*(_QWORD *)a2 + 40))(&v12, a2);
    WTF::AtomString::AtomString(&v13, &v12);
    WebCore::Element::setSynchronizedLazyAttribute((WTF::StringImpl **)this, &v14, &v13);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v12;
    v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    (*(void (**)(_QWORD, WebCore::QualifiedName::QualifiedNameImpl **, WebCore::SVGAnimatedProperty *))(**((_QWORD **)this + 20) + 40))(*((_QWORD *)this + 20), &v14, a2);
  }
  v4 = *((_QWORD *)this + 13);
  if (!v4 || (v5 = *(_DWORD *)(v4 + 4), (v5 & 1) == 0))
  {
    WebCore::Element::createUniqueElementData(this);
    v4 = *((_QWORD *)this + 13);
    v5 = *(_DWORD *)(v4 + 4);
  }
  *(_DWORD *)(v4 + 4) = v5 | 0x10;
  (*(void (**)(WebCore::SVGElement *, WebCore::QualifiedName::QualifiedNameImpl **))(*(_QWORD *)this + 1240))(this, &v14);
  result = (WTF::StringImpl **)v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::SVGElement::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, WTF::StringImpl ***a7@<X8>)
{
  uint64_t result;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  WTF *v26;
  int v27;
  unsigned int v28;

  result = (uint64_t)WebCore::SVGPropertyAnimatorFactory::createAnimator(*(WebCore::SVGPropertyAnimatorFactory **)(a1 + 152), a2, a3, a4, a5, a6, a7);
  if (!*a7)
  {
    *a7 = 0;
    result = (*(uint64_t (**)(_QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 160) + 80))(*(_QWORD *)(a1 + 160), a2, a3, a4, a5, a6);
    if (*a7)
    {
      v16 = *(_QWORD *)(a1 + 120);
      if (v16)
      {
        v17 = (uint64_t *)(v16 + 40);
      }
      else
      {
        v17 = &WebCore::SVGElement::instances(void)const::emptyInstances;
        {
          WebCore::SVGElement::instances(void)const::emptyInstances = 0;
          *(_QWORD *)&dword_1EE2F9738 = 0;
        }
      }
      result = WTF::copyToVectorOf<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((uint64_t)v17, v15, (uint64_t)&v26);
      v19 = v26;
      if (!v28)
        goto LABEL_10;
      v20 = 8 * v28;
      do
      {
        v21 = *(_QWORD *)v19;
        v19 = (WTF *)((char *)v19 + 8);
        result = (*(uint64_t (**)(_QWORD, WebCore::QualifiedName::QualifiedNameImpl **, WTF::StringImpl **))(**(_QWORD **)(v21 + 160) + 88))(*(_QWORD *)(v21 + 160), a2, *a7);
        v20 -= 8;
      }
      while (v20);
      v19 = v26;
      if (!v28)
      {
LABEL_10:
        if (!v19)
          return result;
LABEL_26:
        v26 = 0;
        v27 = 0;
        return WTF::fastFree(v19, v18);
      }
      v22 = 8 * v28;
      do
      {
        v23 = *(_QWORD *)v19;
        *(_QWORD *)v19 = 0;
        if (v23)
        {
          if (*(_DWORD *)(v23 + 24) == 2)
          {
            v24 = *(_WORD *)(v23 + 30);
            if ((v24 & 0x400) == 0)
            {
              v25 = *(_WORD *)(v23 + 28);
              if ((v25 & 0xF000) == 0x9000)
              {
                result = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v23, v18);
              }
              else
              {
                if ((v25 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v23 + 160) + 16))(*(_QWORD *)(v23 + 160));
                  v24 = *(_WORD *)(v23 + 30);
                }
                *(_WORD *)(v23 + 30) = v24 | 0x400;
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
              }
            }
          }
          else
          {
            *(_DWORD *)(v23 + 24) -= 2;
          }
        }
        v19 = (WTF *)((char *)v19 + 8);
        v22 -= 8;
      }
      while (v22);
      v19 = v26;
      if (v26)
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t *WebCore::SVGPropertyAnimatorFactory::createAnimator@<X0>(WebCore::SVGPropertyAnimatorFactory *a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, unsigned int a6@<W5>, WTF::StringImpl ***a7@<X8>)
{
  WebCore::SVGPropertyAnimatorFactory *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  WebCore::QualifiedName::QualifiedNameImpl *v22;
  int v23;
  uint64_t *result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  unsigned int v29;
  int *v30;
  WTF::StringImpl **v31;
  WTF::StringImpl ***v32;
  int v33;
  unsigned int v34;
  WTF::StringImpl ***v35;
  int v36;
  WebCore::QualifiedName::QualifiedNameImpl *v37;
  WTF::StringImpl **v38;
  int *v39;
  WTF *v40;
  void *v41;
  unsigned int v42;
  WTF::StringImpl **v43;
  int v44;
  uint64_t *v45;
  WTF::StringImpl **v46;
  WebCore::QualifiedName::QualifiedNameImpl *v47;
  WTF::StringImpl **v48;
  WTF::StringImpl **v49;
  WTF::StringImpl **v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  WTF::StringImpl **v59;
  WTF *v60;
  void *v61;
  uint64_t *v62;
  WebCore::QualifiedName::QualifiedNameImpl **v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  WTF::StringImpl ***v68;
  uint64_t *v69;
  WTF::StringImpl **v70;

  v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(a1);
  v15 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
    v18 = 9
        * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = v15 + 24 * v20;
    v22 = *(WebCore::QualifiedName::QualifiedNameImpl **)v21;
    if (*(WebCore::QualifiedName::QualifiedNameImpl **)v21 != *a2)
    {
      v23 = 1;
      while (v22)
      {
        v20 = (v20 + v23) & v16;
        v21 = v15 + 24 * v20;
        v22 = *(WebCore::QualifiedName::QualifiedNameImpl **)v21;
        ++v23;
        if (*(WebCore::QualifiedName::QualifiedNameImpl **)v21 == *a2)
          goto LABEL_9;
      }
      v21 = v15 + 24 * *(unsigned int *)(v15 - 4);
    }
  }
  else
  {
    v21 = 0;
  }
LABEL_9:
  result = WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
  v25 = *result;
  if (*result)
    v25 += 24 * *(unsigned int *)(v25 - 4);
  if (v25 == v21)
  {
    *a7 = 0;
    return result;
  }
  v26 = *(_QWORD *)a1;
  v64 = a3;
  v65 = a4;
  if (*(_QWORD *)a1
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash((uint64_t *)a1, 8u, 0), (v26 = *(_QWORD *)a1) != 0))
  {
    v27 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    v27 = 0;
  }
  v62 = (uint64_t *)a1;
  v28 = *a2;
  v29 = *((_DWORD *)*a2 + 1);
  if (!v29)
  {
    v29 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
    *((_DWORD *)v28 + 1) = v29;
  }
  v30 = &webThreadDelegateMessageScopeCount;
  v31 = (WTF::StringImpl **)WebCore::nullName;
  v68 = a7;
  v66 = a5;
  v67 = a6;
  if (WebCore::nullName)
  {
    v32 = 0;
    v33 = 1;
    v63 = a2;
    while (1)
    {
      v34 = v29 & v27;
      v35 = (WTF::StringImpl ***)(v26 + 16 * (v29 & v27));
      if (v31)
      {
        v36 = (*(_DWORD *)v31)++;
        v37 = (WebCore::QualifiedName::QualifiedNameImpl *)*v35;
        if (v36)
        {
          *(_DWORD *)v31 = v36;
          v38 = v31;
        }
        else
        {
          v39 = v30;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v31);
          WTF::fastFree(v40, v41);
          v30 = v39;
          a2 = v63;
          v38 = (WTF::StringImpl **)*((_QWORD *)v30 + 254);
        }
      }
      else
      {
        v38 = 0;
        v37 = (WebCore::QualifiedName::QualifiedNameImpl *)*v35;
      }
      if (v37 == (WebCore::QualifiedName::QualifiedNameImpl *)v31)
        break;
      if (*v35 == (WTF::StringImpl **)-1)
      {
        v32 = (WTF::StringImpl ***)(v26 + 16 * v34);
      }
      else if (*v35 == (WTF::StringImpl **)*a2)
      {
        goto LABEL_64;
      }
      v29 = v33 + v34;
      ++v33;
      v31 = v38;
    }
  }
  else
  {
    v42 = v29 & v27;
    v35 = (WTF::StringImpl ***)(v26 + 16 * (v29 & v27));
    v43 = *v35;
    if (!*v35)
    {
      v45 = v62;
      goto LABEL_44;
    }
    v32 = 0;
    v44 = 1;
    do
    {
      if (v43 == (WTF::StringImpl **)-1)
      {
        v32 = v35;
      }
      else if (v43 == (WTF::StringImpl **)*a2)
      {
        goto LABEL_64;
      }
      v42 = (v42 + v44) & v27;
      v35 = (WTF::StringImpl ***)(v26 + 16 * v42);
      v43 = *v35;
      ++v44;
    }
    while (*v35);
  }
  v45 = v62;
  if (v32)
  {
    v46 = (WTF::StringImpl **)*((_QWORD *)v30 + 254);
    if (v46)
      ++*(_DWORD *)v46;
    *v32 = v46;
    v32[1] = 0;
    --*(_DWORD *)(*v62 - 16);
    v35 = v32;
  }
LABEL_44:
  v47 = *a2;
  if (*a2)
    ++*(_DWORD *)v47;
  v48 = *v35;
  *v35 = (WTF::StringImpl **)v47;
  if (v48)
  {
    if (*(_DWORD *)v48 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v48);
      WTF::fastFree(v60, v61);
    }
    else
    {
      --*(_DWORD *)v48;
    }
  }
  (*(void (**)(WTF::StringImpl ***__return_ptr))(**(_QWORD **)(v21 + 8) + 16))(&v70);
  v49 = v70;
  v70 = 0;
  v50 = v35[1];
  v35[1] = v49;
  if (v50)
  {
    v51 = *((_DWORD *)v50 + 2) - 1;
    if (*((_DWORD *)v50 + 2) != 1)
    {
LABEL_51:
      *((_DWORD *)v50 + 2) = v51;
      goto LABEL_52;
    }
    (*((void (**)(WTF::StringImpl **))*v50 + 1))(v50);
    v50 = v70;
    v70 = 0;
    if (v50)
    {
      v51 = *((_DWORD *)v50 + 2) - 1;
      if (*((_DWORD *)v50 + 2) != 1)
        goto LABEL_51;
      (*((void (**)(WTF::StringImpl **))*v50 + 1))(v50);
    }
  }
LABEL_52:
  v52 = *v45;
  if (*v45)
    v53 = *(_DWORD *)(v52 - 12) + 1;
  else
    v53 = 1;
  *(_DWORD *)(v52 - 12) = v53;
  v54 = *v45;
  if (*v45)
    v55 = *(_DWORD *)(v54 - 12);
  else
    v55 = 0;
  v56 = (*(_DWORD *)(v54 - 16) + v55);
  v57 = *(unsigned int *)(v54 - 4);
  if (v57 <= 0x400)
  {
    if (3 * v57 > 4 * v56)
      goto LABEL_64;
    if (!(_DWORD)v57)
    {
      v58 = 8;
      goto LABEL_63;
    }
LABEL_61:
    v58 = (_DWORD)v57 << (6 * *(_DWORD *)(v54 - 12) >= (2 * v57));
LABEL_63:
    v35 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v45, v58, (WebCore::QualifiedName::QualifiedNameImpl **)v35);
    goto LABEL_64;
  }
  if (v57 <= 2 * v56)
    goto LABEL_61;
LABEL_64:
  v59 = v35[1];
  ++*((_DWORD *)v59 + 2);
  v69 = (uint64_t *)v59;
  (*(void (**)(WTF::StringImpl ***__return_ptr, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t **, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v21 + 16) + 16))(&v70, *(_QWORD *)(v21 + 16), a2, &v69, v64, v65, v66, v67);
  result = v69;
  *v68 = v70;
  v69 = 0;
  v70 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

void WebCore::SVGElement::resolveCustomStyle(WebCore::RenderStyle *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  const WebCore::SVGElement *v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  void *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  WebCore::Style::Adjuster *v25[2];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v6 = *((_QWORD *)a1 + 15);
  if (v6 && (v11 = *(_QWORD *)(v6 + 56)) != 0 && (v12 = *(_QWORD *)(v11 + 8)) != 0)
  {
    *(_DWORD *)(v12 + 24) += 2;
    v13 = *(_OWORD *)(a2 + 32);
    v14 = *(_OWORD *)a2;
    v28 = *(unint64_t *)(a2 + 16);
    v29 = v13;
    v27 = v14;
    BYTE8(v29) = 1;
    WebCore::Element::resolveStyle(v12, (uint64_t)&v27, v25);
    WebCore::Style::Adjuster::adjustSVGElementStyle(v25[0], a1, v15);
    v16 = *(_OWORD *)v25;
    v25[0] = 0;
    v25[1] = 0;
    *(_OWORD *)a3 = v16;
    v17 = v26;
    v26 = 0;
    *(_QWORD *)(a3 + 16) = v17;
    *(_BYTE *)(a3 + 24) = 1;
    WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)v25, v18);
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      v22 = *(_WORD *)(v12 + 30);
      if ((v22 & 0x400) == 0)
      {
        v23 = *(_WORD *)(v12 + 28);
        if ((v23 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v12, v19);
        }
        else
        {
          if ((v23 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 160) + 16))(*(_QWORD *)(v12 + 160));
            v22 = *(_WORD *)(v12 + 30);
          }
          *(_WORD *)(v12 + 30) = v22 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
        }
      }
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  else
  {
    v7 = (_QWORD *)*((_QWORD *)a1 + 5);
    if (*v7)
      v8 = (*(_WORD *)(*v7 + 28) & 0x80) == 0;
    else
      v8 = 1;
    if (v8)
      v10 = v7[1] + 1328;
    else
      v10 = *v7 + 216;
    v9 = *(_QWORD *)v10;
    if (!*(_QWORD *)(*(_QWORD *)v10 + 32))
    {
      if (*(_QWORD *)(v9 + 24))
        WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v9);
      else
        WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v9);
      v21 = *(_QWORD *)(v9 + 32);
      if (*(_DWORD *)(v21 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      {
        v24 = *(_QWORD *)(v9 + 32);
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v21 + 32), v20);
        v21 = v24;
      }
      if (*(_BYTE *)(v21 + 242)
        || *(_BYTE *)(v21 + 243)
        || *(_BYTE *)(v21 + 244)
        || *(_BYTE *)(v21 + 245)
        || *(_BYTE *)(v21 + 246)
        || *(_BYTE *)(v21 + 247)
        || *(_BYTE *)(v21 + 248))
      {
        *(_BYTE *)(v9 + 236) = 1;
      }
    }
    WebCore::Style::Resolver::styleForElement(*(_QWORD *)(v9 + 32), (uint64_t)a1, a2, 0, (WebCore::Node **)&v27);
    *(_OWORD *)a3 = v27;
    *(_QWORD *)(a3 + 16) = v28;
    *(_BYTE *)(a3 + 24) = 1;
  }
}

uint64_t WebCore::SVGElement::animatedSMILStyleProperties(WebCore::SVGElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 15);
  if (v1)
    return *(_QWORD *)(v1 + 72);
  else
    return 0;
}

_QWORD *WebCore::SVGElementRareData::ensureAnimatedSMILStyleProperties(WebCore::SVGElementRareData *this)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;
  WTF *v9;
  uint64_t v11;

  result = (_QWORD *)*((_QWORD *)this + 9);
  if (!result)
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    *result = 0xA00000001;
    result[1] = 0;
    result[2] = result + 4;
    result[3] = 4;
    v4 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = result;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        v5 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v5)
        {
          v6 = 16 * v5;
          v7 = (_DWORD **)(*(_QWORD *)(v4 + 16) + 8);
          do
          {
            v8 = *v7;
            *v7 = 0;
            if (v8)
            {
              if (*v8 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v3);
              else
                *v8 -= 2;
            }
            v7 += 2;
            v6 -= 16;
          }
          while (v6);
        }
        v9 = *(WTF **)(v4 + 16);
        if ((WTF *)(v4 + 32) != v9 && v9 != 0)
        {
          *(_QWORD *)(v4 + 16) = 0;
          *(_DWORD *)(v4 + 24) = 0;
          WTF::fastFree(v9, v3);
        }
        v11 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        WTF::fastFree((WTF *)v4, v3);
        return (_QWORD *)*((_QWORD *)this + 9);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGElement::computedStyle(WebCore::Node *this, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  WebCore::SVGElementRareData *v12;
  uint64_t v13;
  void *v14;
  int v15;
  const WebCore::RenderStyle *v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  v4 = *((_QWORD *)this + 15);
  if (v4 && (*(_BYTE *)(v4 + 64) & 2) != 0)
  {
    v12 = (WebCore::SVGElementRareData *)*((_QWORD *)this + 15);
    v13 = WebCore::Node::parentOrShadowHostElement(this);
    if (!v13)
    {
      v16 = 0;
      return WebCore::SVGElementRareData::overrideComputedStyle(v12, this, v16);
    }
    v15 = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v13 + 24) = v15 + 2;
    if ((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v16 = 0;
LABEL_27:
      if (v15)
      {
        *(_DWORD *)(v13 + 24) = v15;
      }
      else if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
        v12 = (WebCore::SVGElementRareData *)*((_QWORD *)this + 15);
      }
      return WebCore::SVGElementRareData::overrideComputedStyle(v12, this, v16);
    }
    if ((*(_BYTE *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      v16 = (const WebCore::RenderStyle *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 80);
      goto LABEL_27;
    }
    result = 105;
    __break(0xC471u);
LABEL_50:
    __break(1u);
    return result;
  }
  if ((*((_BYTE *)this + 22) & 8) == 0)
    return 0;
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    v6 = *((_QWORD *)this + 9);
    if (*(_DWORD *)a2 == 6)
    {
      if ((v6 & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_5;
      v17 = (uint64_t *)((v6 & 0xFFFFFFFFFFFFLL) + 168);
    }
    else
    {
      if (*(_DWORD *)a2 != 7 || (v6 & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_5;
      v17 = (uint64_t *)((v6 & 0xFFFFFFFFFFFFLL) + 176);
    }
    v18 = *v17;
    if (*v17)
    {
      *(_DWORD *)(v18 + 24) += 2;
      v20 = WebCore::Node::computedStyle((WebCore::Node *)v18);
      if (*(_DWORD *)(v18 + 24) == 2)
      {
        if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v18, v19);
      }
      else
      {
        *(_DWORD *)(v18 + 24) -= 2;
      }
      return v20;
    }
  }
  else
  {
    v6 = *((_QWORD *)this + 9);
  }
LABEL_5:
  v7 = v6 & 0xFFFFFFFFFFFFLL;
  if (!v7
    || (result = *(_QWORD *)(v7 + 48)) == 0
    && ((result = *(_QWORD *)(v7 + 56)) == 0
     || ((v10 = *(_QWORD *)(result + 16) & 0x1FLL, v10 != 26) ? (v11 = v10 == 18) : (v11 = 1), !v11)))
  {
    v8 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v8)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v8 = *(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v8)
          v8 = *(_QWORD *)(v8 + 8);
      }
      result = v8 + 80;
    }
    else
    {
      result = (uint64_t)WebCore::Element::resolveComputedStyle((uint64_t)this, 0);
      v5 = *(unsigned __int8 *)(a2 + 16);
    }
  }
  if (v5)
  {
    result = WebCore::RenderStyle::getCachedPseudoStyle(result, a2);
    if (!result)
    {
      if (*(_BYTE *)(a2 + 16))
        return WebCore::Element::resolvePseudoElementStyle(this, (int *)a2);
      goto LABEL_50;
    }
  }
  return result;
}

uint64_t WebCore::SVGElementRareData::overrideComputedStyle(WebCore::SVGElementRareData *this, WebCore::Element *a2, const WebCore::RenderStyle *a3)
{
  uint64_t result;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WebCore::Node *v12;
  WebCore::RenderStyle *v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  const WebCore::RenderStyle *v19;
  __int128 v20;
  __int128 v21;
  char v22;
  WebCore::Node *v23[3];

  if ((*((_BYTE *)this + 64) & 2) == 0)
    return 0;
  if ((*((_BYTE *)this + 64) & 4) != 0 || (result = *((_QWORD *)this + 10)) == 0)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 5);
    if (*v7)
      v8 = (*(_WORD *)(*v7 + 28) & 0x80) == 0;
    else
      v8 = 1;
    if (v8)
      v15 = v7[1] + 1328;
    else
      v15 = *v7 + 216;
    v9 = *(_QWORD *)v15;
    if (!*(_QWORD *)(*(_QWORD *)v15 + 32))
    {
      if (*(_QWORD *)(v9 + 24))
        WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v9);
      else
        WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v9);
      v17 = *(_QWORD *)(v9 + 32);
      if (*(_DWORD *)(v17 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      {
        v18 = *(_QWORD *)(v9 + 32);
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v17 + 32), v16);
        v17 = v18;
      }
      if (*(_BYTE *)(v17 + 242)
        || *(_BYTE *)(v17 + 243)
        || *(_BYTE *)(v17 + 244)
        || *(_BYTE *)(v17 + 245)
        || *(_BYTE *)(v17 + 246)
        || *(_BYTE *)(v17 + 247)
        || *(_BYTE *)(v17 + 248))
      {
        *(_BYTE *)(v9 + 236) = 1;
      }
    }
    v10 = *(_QWORD *)(v9 + 32);
    v19 = a3;
    v20 = 0u;
    v21 = 0u;
    v22 = 0;
    WebCore::Style::Resolver::styleForElement(v10, (uint64_t)a2, (uint64_t)&v19, 1, v23);
    v12 = v23[0];
    v23[0] = 0;
    v13 = (WebCore::RenderStyle *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v12;
    if (v13)
    {
      WebCore::RenderStyle::~RenderStyle(v13, v11);
      if (*(_DWORD *)v14)
      {
        *((_OWORD *)v14 + 2) = 0u;
        *((_OWORD *)v14 + 3) = 0u;
        *(_OWORD *)v14 = 0u;
        *((_OWORD *)v14 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v14, v11);
      }
    }
    WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)v23, v11);
    *((_BYTE *)this + 64) &= ~4u;
    return *((_QWORD *)this + 10);
  }
  return result;
}

uint64_t WebCore::SVGElement::colorInterpolation(WebCore::SVGElement *this)
{
  uint64_t v1;
  uint64_t result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  int v6;
  WebCore::SVGElement *v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
    *((_DWORD *)this + 6) += 2;
    v7 = this;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v7, 89, 0, 0, &v11);
    WebCore::ComputedStyleExtractor::~ComputedStyleExtractor((WebCore::ComputedStyleExtractor *)&v7, v3);
    v5 = (_DWORD *)v11;
    if (!v11)
      return 0;
    if (((*(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16)) & 0x3F87F) == 0x50)
    {
      v6 = *(unsigned __int16 *)(v11 + 8);
      if (v6 == 1148)
        v1 = 2;
      else
        v1 = v6 == 936;
    }
    else
    {
      v1 = 0;
    }
    v11 = 0;
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v4);
    else
      *v5 -= 2;
    return v1;
  }
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    return *(_BYTE *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x88) + 5) & 3;
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::SVGElement::animatableAttributeForName(WTF::AtomString const&)::$_0::operator()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = 0;
  *a1 = 0;
  a1[1] = 0;
  *(_QWORD *)((char *)a1 + 13) = 0;
  do
  {
    result = WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::LazyNeverDestroyed<WebCore::QualifiedName const,WTF::AnyThreadsAccessTraits> &>((uint64_t)a1, (WTF::StringImpl **)(*(&WebCore::SVGElement::animatableAttributeForName(WTF::AtomString const&)::$_0::operator() const(void)::names)[v2]+ 24), (WTF::StringImpl ***)(&WebCore::SVGElement::animatableAttributeForName(WTF::AtomString const&)::$_0::operator() const(void)::names)[v2], (uint64_t)v4);
    ++v2;
  }
  while (v2 != 92);
  return result;
}

unsigned int *WebCore::SVGElement::title@<X0>(unsigned int *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  unsigned int *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  v2 = this;
  if (this && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
    {
      v7 = *(_WORD *)(v6 + 28);
      if ((v7 & 0x20) == 0
        || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24))
      {
        if ((*((_BYTE *)this + 22) & 0x10) != 0
          && ((v10 = **((_QWORD **)this + 5)) != 0 ? (v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0) : (v11 = 1),
              !v11
           && (v12 = *(_QWORD *)(v10 + 200)) != 0
           && (v13 = *(_QWORD *)(v12 + 8)) != 0
           && (*(_WORD *)(v13 + 28) & 0x20) != 0))
        {
          if ((v7 & 0x20) != 0
            || *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24))
          {
            goto LABEL_3;
          }
        }
        else if ((v7 & 0x20) != 0)
        {
          goto LABEL_3;
        }
      }
    }
    this = (unsigned int *)WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)this + 5) + 8));
    if ((*((_WORD *)this + 1679) & 0x20) != 0)
      goto LABEL_7;
  }
LABEL_3:
  v4 = *((_QWORD *)v2 + 10);
  if (!v4)
  {
LABEL_7:
    *a2 = 0;
    return this;
  }
  while ((*(_WORD *)(v4 + 28) & 0x20) == 0
       || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::titleTag + 24))
  {
    v4 = *(_QWORD *)(v4 + 56);
    if (!v4)
      goto LABEL_7;
  }
  *(_DWORD *)(v4 + 24) += 2;
  this = WebCore::Element::innerText((WebCore::Element *)v4, a2);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    v8 = *(_WORD *)(v4 + 30);
    if ((v8 & 0x400) == 0)
    {
      v9 = *(_WORD *)(v4 + 28);
      if ((v9 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v4, v5);
      }
      else
      {
        if ((v9 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
          v8 = *(_WORD *)(v4 + 30);
        }
        *(_WORD *)(v4 + 30) = v8 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return this;
}

BOOL WebCore::SVGElement::rendererIsNeeded(WebCore::SVGElement *this, const WebCore::RenderStyle *a2)
{
  BOOL v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  __int16 v6;
  uint64_t *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v11;
  uint64_t v12;

  v2 = (*((_WORD *)this + 14) & 0x80) == 0 || this == 0;
  v3 = v2;
  if (v2)
  {
    v4 = (uint64_t *)((char *)this + 32);
  }
  else
  {
    v11 = *((_QWORD *)this + 25);
    if (!v11)
      return (*((_QWORD *)a2 + 2) & 0x17) != 18;
    v4 = (uint64_t *)(v11 + 8);
  }
  v5 = *v4;
  if (!v5)
    return (*((_QWORD *)a2 + 2) & 0x17) != 18;
  v6 = *(_WORD *)(v5 + 28);
  if ((v6 & 0x80) != 0)
  {
    v12 = *(_QWORD *)(v5 + 200);
    if (v12 && *(_QWORD *)(v12 + 8))
      goto LABEL_13;
    return (*((_QWORD *)a2 + 2) & 0x17) != 18;
  }
  if ((v6 & 8) == 0)
    return (*((_QWORD *)a2 + 2) & 0x17) != 18;
LABEL_13:
  if ((v3 & 1) != 0)
    v7 = (uint64_t *)((char *)this + 32);
  else
    v7 = (uint64_t *)(*((_QWORD *)this + 25) + 8);
  v8 = *v7;
  v9 = *(_WORD *)(v8 + 28);
  if ((v9 & 0x80) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v8 + 200) + 8);
  }
  else if ((v9 & 8) == 0)
  {
    v8 = 0;
  }
  if ((*(_WORD *)(v8 + 28) & 0x20) != 0)
    return (*((_QWORD *)a2 + 2) & 0x17) != 18;
  return 0;
}

uint64_t WebCore::SVGElement::cssPropertyIdForSVGAttributeName(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  if (*(_QWORD *)(*(_QWORD *)a1 + 32))
    return 0;
  v2 = *(unsigned __int16 *)(*(_QWORD *)a1 + 10) - 287;
  result = 44;
  switch(v2)
  {
    case 0:
      return result;
    case 83:
      result = 68;
      break;
    case 90:
      result = 81;
      break;
    case 107:
      result = 85;
      break;
    case 109:
      result = 86;
      break;
    case 110:
      result = 87;
      break;
    case 115:
      result = 5;
      break;
    case 116:
      result = 88;
      break;
    case 117:
      result = 89;
      break;
    case 130:
      result = 106;
      break;
    case 131:
      result = 107;
      break;
    case 132:
      result = 108;
      break;
    case 133:
      if ((*(_QWORD *)(a2 + 672) & 0x400) == 0)
        return 0;
      result = 109;
      break;
    case 146:
      result = 6;
      break;
    case 151:
      result = 7;
      break;
    case 154:
      result = 110;
      break;
    case 175:
      result = 114;
      break;
    case 176:
      result = 115;
      break;
    case 177:
      result = 116;
      break;
    case 178:
      result = 117;
      break;
    case 180:
      result = 124;
      break;
    case 181:
      result = 125;
      break;
    case 183:
      result = 8;
      break;
    case 184:
      result = 13;
      break;
    case 185:
      result = 14;
      break;
    case 186:
      result = 15;
      break;
    case 187:
      result = 16;
      break;
    case 188:
      result = 494;
      break;
    case 189:
      result = 28;
      break;
    case 212:
      result = 127;
      break;
    case 213:
      result = 128;
      break;
    case 217:
      result = 393;
      break;
    case 227:
      result = 143;
      break;
    case 249:
      result = 151;
      break;
    case 260:
      result = 36;
      break;
    case 261:
      result = 152;
      break;
    case 280:
      result = 159;
      break;
    case 281:
      result = 160;
      break;
    case 282:
      result = 161;
      break;
    case 283:
      result = 509;
      break;
    case 286:
      result = 171;
      break;
    case 468:
      result = 183;
      break;
    case 475:
      result = 514;
      break;
    case 476:
      result = 197;
      break;
    case 489:
      result = 201;
      break;
    case 503:
      result = 207;
      break;
    case 525:
      result = 212;
      break;
    case 526:
      result = 213;
      break;
    case 546:
      result = 227;
      break;
    case 567:
      result = 232;
      break;
    case 568:
      result = 233;
      break;
    case 570:
      result = 234;
      break;
    case 571:
      result = 236;
      break;
    case 572:
      result = 237;
      break;
    case 573:
      result = 238;
      break;
    case 574:
      result = 239;
      break;
    case 575:
      result = 240;
      break;
    case 576:
      result = 241;
      break;
    case 577:
      result = 242;
      break;
    case 594:
      result = 251;
      break;
    case 595:
      result = 533;
      break;
    case 596:
      result = 30;
      break;
    case 600:
      result = 537;
      break;
    case 607:
      result = 285;
      break;
    case 615:
      result = 287;
      break;
    case 622:
      result = 293;
      break;
    case 635:
      result = 450;
      break;
    case 636:
      result = 350;
      break;
    case 638:
      result = 3;
      break;
    case 642:
      result = 298;
      break;
    case 652:
      result = 299;
      break;
    default:
      return 0;
  }
  return result;
}

BOOL WebCore::SVGElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  return WebCore::SVGElement::cssPropertyIdForSVGAttributeName(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680)) != 0;
}

WTF::StringImpl *WebCore::SVGElement::collectPresentationalHintsForAttribute(WebCore::SVGElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  uint64_t *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  _QWORD *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  char *v19;
  _WORD *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27[3];

  v6 = *(uint64_t **)(*((_QWORD *)this + 5) + 8);
  result = (WTF::StringImpl *)WebCore::SVGElement::cssPropertyIdForSVGAttributeName((uint64_t)a2, v6[85]);
  if ((_DWORD)result)
  {
    v8 = (uint64_t)result;
    WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v22, (const WebCore::Document *)v6);
    if ((WebCore::isExposed(v8, &v25) & 1) != 0 || WebCore::isInternal(v8))
    {
      if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
      {
        v24 = *((_BYTE *)a4 + 4) & 7;
        WebCore::CSSParser::parseValue((uint64_t)a4, v8);
      }
      else if ((v8 - 2) > 0x1C8)
      {
        v18 = WebCore::shorthandForProperty(v8);
        if (*((_DWORD *)a4 + 7))
        {
          v19 = (char *)a4 + 16;
          v26 = 0;
          if ((_DWORD)v9)
          {
            v20 = (_WORD *)v18;
            v21 = 2 * v9;
            do
            {
              WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::add(&v26, v20++, (uint64_t)v27);
              v21 -= 2;
            }
            while (v21);
          }
          v27[0] = &v26;
          WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::MutableStyleProperties::removeProperties(std::span<WebCore::CSSPropertyID const,18446744073709551615ul>)::$_0>((uint64_t)v19, v27);
          if (v26)
            WTF::fastFree((WTF *)(v26 - 16), v9);
        }
      }
      else
      {
        v10 = *((_QWORD *)a4 + 2);
        v11 = *((_DWORD *)a4 + 7);
        v12 = v11 - 1;
        while ((v12 & 0x80000000) == 0)
        {
          v13 = v12;
          v14 = *(_WORD *)(v10 + 16 * v12--) & 0x3FF;
          if (v14 == (_DWORD)v8)
          {
            v15 = (_QWORD *)(v10 + 16 * v13);
            v16 = (_DWORD *)v15[1];
            v15[1] = 0;
            if (v16)
            {
              if (*v16 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, (WTF::StringImpl *)v9);
                v11 = *((_DWORD *)a4 + 7);
              }
              else
              {
                *v16 -= 2;
              }
            }
            memmove(v15, v15 + 2, *((_QWORD *)a4 + 2) + 16 * v11 - (_QWORD)(v15 + 2));
            --*((_DWORD *)a4 + 7);
            break;
          }
        }
      }
    }
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = v22;
    v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::SVGElement::updateSVGRendererForElementChange(WebCore::SVGElement *this)
{
  uint64_t v1;
  void *v2;
  __int16 v3;
  __int16 v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v1 + 24) += 2;
  WebCore::Document::updateSVGRenderer((WebCore::Document *)v1, this);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    v3 = *(_WORD *)(v1 + 30);
    if ((v3 & 0x400) == 0)
    {
      v4 = *(_WORD *)(v1 + 28);
      if ((v4 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v1, v2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 160) + 16))(*(_QWORD *)(v1 + 160));
          v3 = *(_WORD *)(v1 + 30);
        }
        *(_WORD *)(v1 + 30) = v3 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
      }
    }
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
}

WTF::StringImpl *WebCore::SVGElement::svgAttributeChanged(WebCore::SVGElement *this, const WebCore::QualifiedName *a2)
{
  WTF::StringImpl *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL hasPendingFullStyleRebuild;
  WebCore::LegacyRenderSVGResourceContainer *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  char v36;
  WTF *v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v45;
  uint64_t *v47;
  int v48;
  WTF *v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  WTF::StringImpl *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  WTF::StringImpl *v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  WTF *v66;
  WTF::StringImpl *v67;
  WTF *v68[5];
  WTF::StringImpl *v69;
  WTF *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72[2];

  result = (WTF::StringImpl *)WebCore::SVGElement::cssPropertyIdForSVGAttributeName((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680));
  if ((_DWORD)result)
    return (WTF::StringImpl *)WebCore::SVGElement::invalidateInstances(this, v5);
  if (*(_QWORD *)a2 != WebCore::HTMLNames::classAttr)
  {
    if (*(_QWORD *)a2 != WebCore::HTMLNames::idAttr)
      return result;
    v17 = (WebCore::LegacyRenderSVGResourceContainer *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
    if (v17)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1965F9C6CLL);
      }
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 4
        && (~*(unsigned __int8 *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 9) == 0)
      {
        ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
        WebCore::LegacyRenderSVGResourceContainer::idChanged(v17);
        v48 = *((_DWORD *)v17 + 4);
        if (!v48)
        {
          __break(0xC471u);
          JUMPOUT(0x1965F9C8CLL);
        }
        *((_DWORD *)v17 + 4) = v48 - 1;
      }
    }
    if ((*((_BYTE *)this + 22) & 8) != 0)
      WebCore::SVGElement::buildPendingResourcesIfNeeded(this);
    return (WTF::StringImpl *)WebCore::SVGElement::invalidateInstances(this, v5);
  }
  v6 = *((_QWORD *)this + 21);
  v8 = (uint64_t *)(v6 + 24);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7
    && *(_DWORD *)(v7 - 12)
    && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v8, (uint64_t **)&v69), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v8, (uint64_t **)v68), v70 != v68[1]))
  {
    v9 = v6 + 48;
  }
  else
  {
    v9 = v6 + 40;
  }
  v10 = *(WTF::StringImpl **)(*(_QWORD *)v9 + 32);
  if (v10)
  {
    if ((*((_BYTE *)v10 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v10 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v10, (WTF::StringImpl *)v5);
      v10 = v69;
    }
  }
  v67 = v10;
  if (!*((_QWORD *)this + 13))
    WebCore::Element::ensureUniqueElementData(this);
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v50 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x50);
    if (v50)
    {
      if (!*(_BYTE *)(v50 + 16))
        *(_BYTE *)(v50 + 17) = 1;
    }
  }
  v11 = v67;
  if (v67 && *((_DWORD *)v67 + 1))
  {
    if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3384) == 2)
    {
      WTF::AtomString::convertToASCIILowercase((WTF::AtomString *)&v67);
    }
    else
    {
      *(_DWORD *)v67 += 2;
      v69 = v11;
    }
    WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v69, (const WTF::AtomString *)v5, v68);
    v19 = v69;
    v69 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  else
  {
    v68[0] = 0;
  }
  v12 = *((_QWORD *)this + 13);
  if ((*((_BYTE *)this + 22) & 8) == 0)
    goto LABEL_43;
  v13 = (uint64_t *)*((_QWORD *)this + 5);
  v14 = v13[1];
  if (!*(_QWORD *)(v14 + 1944) || *(_BYTE *)(v14 + 3405))
    goto LABEL_43;
  if ((*((_BYTE *)this + 70) & 4) != 0)
  {
    v20 = *v13;
    v21 = (*(_WORD *)(v20 + 28) & 0x80) == 0 || v20 == 0;
    v22 = v20 + 216;
    if (v21)
      v22 = v14 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v22 + 236))
      goto LABEL_43;
  }
  v15 = *(_QWORD *)(v14 + 1272);
  if (v15 && (*(_BYTE *)(v15 + 70) & 4) != 0)
  {
LABEL_43:
    LOBYTE(v69) = 0;
    v71 = 0;
    v72[0] = 0;
    v70 = this;
  }
  else
  {
    hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v14);
    LOBYTE(v69) = !hasPendingFullStyleRebuild;
    v71 = 0;
    v72[0] = 0;
    v70 = this;
    if (!hasPendingFullStyleRebuild)
    {
      WebCore::Style::ClassChangeInvalidation::computeInvalidation((uint64_t)&v69, (uint64_t *)(v12 + 16), (uint64_t *)v68);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v70, &v71);
      v12 = *((_QWORD *)this + 13);
    }
  }
  WebCore::Document::invalidateQuerySelectorAllResultsForClassAttributeChange(*(_QWORD *)(*((_QWORD *)this + 5) + 8), this, (uint64_t *)(v12 + 16), (uint64_t *)v68);
  v24 = *((_QWORD *)this + 13);
  v25 = v68[0];
  v68[0] = 0;
  v26 = *(WTF **)(v24 + 16);
  *(_QWORD *)(v24 + 16) = v25;
  if (v26)
  {
    if (*((_DWORD *)v26 + 2) == 1)
      WebCore::SpaceSplitStringData::destroy(v26, v23);
    else
      --*((_DWORD *)v26 + 2);
  }
  if ((_BYTE)v69)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v70, v72);
  if (v72[0])
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v72[0], v23);
  if (v71)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v71, v23);
  v27 = v68[0];
  v68[0] = 0;
  if (v27)
  {
    if (*((_DWORD *)v27 + 2) == 1)
      WebCore::SpaceSplitStringData::destroy(v27, v23);
    else
      --*((_DWORD *)v27 + 2);
  }
  result = v67;
  v67 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  v28 = *((_QWORD *)this + 15);
  if (!v28)
  {
    v29 = &WebCore::SVGElement::instances(void)const::emptyInstances;
    {
      WebCore::SVGElement::instances(void)const::emptyInstances = 0;
      *(_QWORD *)&dword_1EE2F9738 = 0;
      goto LABEL_62;
    }
LABEL_61:
    v30 = (WTF *)*v29;
    if (!*v29)
    {
LABEL_62:
      *((_DWORD *)v29 + 2) = 0;
LABEL_63:
      v31 = 0;
      *((_DWORD *)v29 + 3) = 0;
LABEL_64:
      v32 = 0;
      v33 = 0;
      v30 = 0;
      v34 = 0;
      v35 = 0;
      v70 = 0;
      v71 = 0;
      v69 = (WTF::StringImpl *)v29;
      v36 = 1;
      goto LABEL_65;
    }
    v38 = *((_DWORD *)v30 - 1);
    if (!v38)
      goto LABEL_73;
    v42 = 0;
    v43 = v38 - 1;
    do
    {
      result = (WTF *)((char *)v30 + 8 * v43);
      if ((unint64_t)(*(_QWORD *)result + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)result + 8))
      {
        v51 = v29;
        result = (WTF::StringImpl *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket((uint64_t *)result, v23);
        v29 = v51;
        ++v42;
      }
    }
    while ((unint64_t)v43--);
    v30 = (WTF *)*v29;
    if (v42)
    {
      *((_DWORD *)v30 - 4) += v42;
      v62 = v29;
      v63 = *v29;
      if (v63)
        v64 = *(_DWORD *)(v63 - 12);
      else
        v64 = 0;
      *(_DWORD *)(v63 - 12) = v64 - v42;
      v29 = v62;
      v30 = (WTF *)*v62;
    }
    if (!v30)
      goto LABEL_62;
    v45 = *((_DWORD *)v30 - 1);
    if (v45 < 9 || 6 * *((_DWORD *)v30 - 3) >= v45)
    {
LABEL_73:
      *((_DWORD *)v29 + 2) = 0;
    }
    else
    {
      v47 = v29;
      result = (WTF::StringImpl *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(v29);
      v30 = (WTF *)*v47;
      v29 = v47;
      *((_DWORD *)v47 + 2) = 0;
      if (!v30)
        goto LABEL_63;
    }
    v39 = *((_DWORD *)v30 - 3);
    if (v39 >= 0x7FFFFFFF)
      v40 = -2;
    else
      v40 = 2 * v39;
    *((_DWORD *)v29 + 3) = v40;
    v41 = *((unsigned int *)v30 - 3);
    if ((_DWORD)v41)
    {
      v61 = (WTF::StringImpl *)v29;
      if (v41 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1965F9E3CLL);
      }
      result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v41));
      v31 = result;
      v30 = *(WTF **)v61;
      if (!*(_QWORD *)v61)
      {
        v29 = (uint64_t *)v61;
        goto LABEL_64;
      }
      v35 = *((unsigned int *)v30 - 1);
      v33 = (unsigned __int8 *)v30 + 8 * v35;
      if (*((_DWORD *)v30 - 3))
      {
        v32 = *(WTF **)v61;
        if ((_DWORD)v35)
        {
          v65 = 8 * v35;
          v32 = *(WTF **)v61;
          while ((unint64_t)(*(_QWORD *)v32 + 1) <= 1)
          {
            v32 = (WTF *)((char *)v32 + 8);
            v65 -= 8;
            if (!v65)
            {
              v32 = (WTF *)((char *)v30 + 8 * v35);
              break;
            }
          }
        }
        v69 = v61;
        v70 = v32;
        goto LABEL_80;
      }
      v29 = (uint64_t *)v61;
    }
    else
    {
      v31 = 0;
      v35 = *((unsigned int *)v30 - 1);
      v33 = (unsigned __int8 *)v30 + 8 * v35;
    }
    v69 = (WTF::StringImpl *)v29;
    v70 = (WTF *)v33;
    v32 = (WTF *)v33;
LABEL_80:
    v36 = 0;
    v71 = v33;
    v34 = v33;
LABEL_65:
    v72[0] = v34;
    v72[1] = (unsigned __int8 *)v30 + 8 * v35;
    if (v32 != (WTF *)v34)
    {
      if (*(_QWORD *)(*(_QWORD *)v32 + 8))
      {
        v49 = v32;
      }
      else
      {
        do
        {
          v66 = (WTF *)((char *)v32 + 8);
          v32 = (WTF *)v33;
          if (v66 != (WTF *)v33)
          {
            v32 = v66;
            while ((unint64_t)(*(_QWORD *)v32 + 1) <= 1)
            {
              v32 = (WTF *)((char *)v32 + 8);
              if (v32 == (WTF *)v33)
              {
                v32 = (WTF *)v33;
                break;
              }
            }
          }
          v49 = (WTF *)v34;
          if (v32 == (WTF *)v34)
            break;
          v49 = v32;
        }
        while (!*(_QWORD *)(*(_QWORD *)v32 + 8));
      }
      v70 = v49;
      v32 = v49;
    }
    if ((v36 & 1) != 0)
      v37 = 0;
    else
      v37 = (WTF *)((char *)v30 + 8 * *((unsigned int *)v30 - 1));
    if (v32 != v37)
    {
      v52 = 0;
      do
      {
        v53 = *(_QWORD *)(*(_QWORD *)v32 + 8);
        *(_DWORD *)(v53 + 24) += 2;
        v68[0] = 0;
        *((_QWORD *)v31 + v52++) = v53;
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v68);
        WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v69);
        v32 = v70;
      }
      while (v70 != v37);
      if (!v52)
        return (WTF::StringImpl *)WTF::fastFree(v31, v23);
      v54 = 8 * v52;
      v55 = (uint64_t *)v31;
      do
      {
        WebCore::SVGElement::correspondingUseElement(*v55, &v69);
        v56 = v69;
        if (v69)
        {
          WebCore::SVGUseElement::invalidateShadowTree((uint64_t *)v69);
          if (*((_DWORD *)v56 + 6) == 2)
          {
            if ((*((_WORD *)v56 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v56, v57);
          }
          else
          {
            *((_DWORD *)v56 + 6) -= 2;
          }
        }
        v58 = *v55++;
        WebCore::SVGElement::setCorrespondingElement(v58, 0);
        v54 -= 8;
      }
      while (v54);
      v59 = 8 * v52;
      v60 = v31;
      do
      {
        result = *(WTF::StringImpl **)v60;
        *(_QWORD *)v60 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 6) == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              result = (WTF::StringImpl *)WebCore::Node::removedLastRef(result, v23);
          }
          else
          {
            *((_DWORD *)result + 6) -= 2;
          }
        }
        v60 = (WTF *)((char *)v60 + 8);
        v59 -= 8;
      }
      while (v59);
    }
    if (!v31)
      return result;
    return (WTF::StringImpl *)WTF::fastFree(v31, v23);
  }
  if ((*(_BYTE *)(v28 + 64) & 1) == 0)
  {
    v29 = (uint64_t *)(v28 + 40);
    goto LABEL_61;
  }
  return result;
}

unsigned int *WebCore::SVGElement::buildPendingResourcesIfNeeded(WebCore::SVGElement *this)
{
  unsigned int *result;
  WTF::StringImpl *v3;
  WebCore::TreeScope *v4;
  uint64_t v5;
  __int16 v6;
  BOOL v7;
  uint64_t v8;
  int **v9;
  int *v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t *v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::SVGElement *v21;
  WebCore::SVGElement *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::SVGElement *v29;
  int *v30;

  result = (unsigned int *)(*(uint64_t (**)(WebCore::SVGElement *))(*(_QWORD *)this + 1160))(this);
  if (!(_DWORD)result || (*((_QWORD *)this + 2) & 0x18000000000000) != 0x8000000000000)
    return result;
  v4 = (WebCore::TreeScope *)*((_QWORD *)this + 5);
  v5 = *(_QWORD *)v4;
  v6 = *(_WORD *)(*(_QWORD *)v4 + 28);
  if (*(_QWORD *)v4)
    v7 = (v6 & 0x80) == 0;
  else
    v7 = 1;
  if (!v7 && !*(_BYTE *)(v5 + 193))
  {
    v19 = *(_QWORD *)(v5 + 200);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
      {
        if (*(_WORD *)(*(_QWORD *)(v20 + 96) + 10) == 242)
        {
          v4 = (WebCore::TreeScope *)*((_QWORD *)v4 + 2);
          v5 = *(_QWORD *)v4;
          v6 = *(_WORD *)(*(_QWORD *)v4 + 28);
        }
      }
    }
  }
  if ((v6 & 0xF000) != 0x9000 && (v6 & 0x80) == 0)
  {
    __break(0xC471u);
    goto LABEL_81;
  }
  *(_DWORD *)(v5 + 24) += 2;
  v8 = *((_QWORD *)this + 13);
  if (v8 && *(_QWORD *)(v8 + 24))
  {
    v15 = *(_DWORD *)(v8 + 4);
    if ((v15 & 1) != 0)
    {
      v16 = *(_QWORD **)(v8 + 40);
      LODWORD(v17) = *(_DWORD *)(v8 + 52);
    }
    else
    {
      v16 = (_QWORD *)(v8 + 32);
      LODWORD(v17) = v15 >> 5;
    }
    if ((_DWORD)v17)
    {
      v17 = v17;
      while (1)
      {
        v18 = *v16;
        if (*v16 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v16 += 2;
        if (!--v17)
          goto LABEL_35;
      }
    }
    else
    {
LABEL_35:
      v16 = 0;
    }
    v9 = (int **)(v16 + 1);
  }
  else
  {
    v9 = (int **)MEMORY[0x1E0CBF2F8];
  }
  v10 = *v9;
  if (*v9)
  {
    v11 = *v10;
    *v10 += 2;
    v30 = v10;
    if (!v10[1])
    {
      v30 = 0;
LABEL_15:
      if (v11)
        *v10 = v11;
      else
        WTF::StringImpl::destroy((WTF::StringImpl *)v10, v3);
      goto LABEL_17;
    }
    v14 = (uint64_t *)WebCore::TreeScope::svgResourcesMap(v4);
    if (!*v14
      || !WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>,WTF::AtomString>(v14, (uint64_t *)&v30)|| (WebCore::TreeScope::markPendingSVGResourcesForRemoval(v4, (const WTF::AtomString *)&v30), WebCore::TreeScope::takeElementFromPendingSVGResourcesForRemovalMap((uint64_t)v4, (const WTF::AtomString *)&v30, &v29), (v21 = v29) == 0))
    {
LABEL_24:
      v10 = v30;
      v30 = 0;
      if (!v10)
        goto LABEL_17;
      v11 = *v10 - 2;
      goto LABEL_15;
    }
    while ((*((_QWORD *)v21 + 2) & 0x8000000000000000) != 0)
    {
      (*(void (**)(WebCore::SVGElement *))(*(_QWORD *)v21 + 1176))(v21);
      v22 = v29;
      v23 = *((_QWORD *)v29 + 8);
      v24 = v23 & 0xFFFFFFFFFFFFLL;
      if ((v23 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((v23 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1965FA2B4);
        }
        v25 = *(_DWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
        *(_DWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 0x10) = v25;
        v26 = WebCore::ancestorsOfType<WebCore::LegacyRenderSVGResourceContainer>(*(_QWORD *)((v23 & 0xFFFFFFFFFFFFLL)
                                                                                            + 0x20));
        if (v26)
        {
          v27 = v26;
LABEL_61:
          ++*(_DWORD *)(v27 + 16);
          WebCore::LegacyRenderSVGResourceContainer::markAllClientsForRepaint((WebCore::LegacyRenderSVGResourceContainer *)v27);
          if (!*(_DWORD *)(v27 + 16))
          {
            __break(0xC471u);
            JUMPOUT(0x1965FA294);
          }
          --*(_DWORD *)(v27 + 16);
          while (1)
          {
            v28 = *(_QWORD *)(v27 + 32);
            if (!v28)
              break;
            v27 = *(_QWORD *)(v28 + 8);
            if (!v27)
              break;
            if ((*(_BYTE *)(v27 + 52) & 7) == 4 && (~*(unsigned __int8 *)(v27 + 53) & 9) == 0)
              goto LABEL_61;
          }
          v25 = *(_DWORD *)(v24 + 16);
        }
        if (!v25)
        {
          __break(0xC471u);
LABEL_81:
          JUMPOUT(0x1965FA0A8);
        }
        *(_DWORD *)(v24 + 16) = v25 - 1;
        v22 = v29;
      }
      WebCore::TreeScope::clearHasPendingSVGResourcesIfPossible(v4, v22);
      v21 = v29;
      v29 = 0;
      if (v21)
        goto LABEL_53;
LABEL_55:
      WebCore::TreeScope::takeElementFromPendingSVGResourcesForRemovalMap((uint64_t)v4, (const WTF::AtomString *)&v30, &v29);
      v21 = v29;
      if (!v29)
        goto LABEL_24;
    }
    v29 = 0;
LABEL_53:
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21, v3);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
    goto LABEL_55;
  }
LABEL_17:
  result = *(unsigned int **)v4;
  v12 = *(_WORD *)(*(_QWORD *)v4 + 28);
  if (*(_QWORD *)v4 && (v12 & 0xF000) == 0x9000)
  {
    v13 = result[6] - 2;
    if (result[6] != 2)
    {
LABEL_20:
      result[6] = v13;
      return result;
    }
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      return WebCore::Document::removedLastRef((WebCore::Document *)result, v3);
  }
  else
  {
    if ((v12 & 0x80) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965FA260);
    }
    v13 = result[6] - 2;
    if (result[6] != 2)
      goto LABEL_20;
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)result, v3);
  }
  return result;
}

uint64_t WebCore::SVGElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, WebCore::SVGElement *a3)
{
  char v4;
  void *v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _BOOL8 v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  WebCore::TreeScope *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  __int16 v24;
  __int16 v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _BOOL8 v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a2;
  WebCore::Element::insertedIntoAncestor((WebCore::Element *)a1, (WebCore::Element *)a2, (uint64_t)a3);
  if (*(_BYTE *)(a1 + 146))
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (!v8 || (*(_WORD *)(v8 + 28) & 0x20) == 0)
      goto LABEL_9;
    v11 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v11 + 2;
    if ((WebCore::SVGElement *)v8 != a3)
    {
LABEL_36:
      if (v11)
        goto LABEL_8;
      goto LABEL_37;
    }
    if (*(_BYTE *)(a1 + 145))
    {
      v31 = 1;
    }
    else
    {
      v30 = *(_QWORD **)(a1 + 128);
      if (v30 && *((_DWORD *)v30 - 3))
      {
        v36 = *((unsigned int *)v30 - 1);
        v37 = &v30[v36];
        if ((_DWORD)v36)
        {
          v38 = 8 * v36;
          while ((unint64_t)(*v30 + 1) <= 1)
          {
            ++v30;
            v38 -= 8;
            if (!v38)
              goto LABEL_80;
          }
        }
        if (v30 != v37)
        {
          v42 = *v30;
LABEL_96:
          if (*(_QWORD *)(v42 + 8))
            goto LABEL_81;
          while (++v30 != v37)
          {
            v42 = *v30;
            if ((unint64_t)(*v30 + 1) > 1)
            {
              if (v30 == v37)
                break;
              goto LABEL_96;
            }
          }
        }
LABEL_80:
        v30 = v37;
LABEL_81:
        v31 = v30 != v37;
        goto LABEL_60;
      }
      v31 = 0;
    }
LABEL_60:
    WebCore::SVGElement::updateRelativeLengthsInformationForChild(a3, (void *)v31, (WebCore::SVGElement *)a1);
    v11 = *(_DWORD *)(v8 + 24) - 2;
    goto LABEL_36;
  }
  *(_BYTE *)(a1 + 146) = 1;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1296))(a1);
  *(_BYTE *)(a1 + 145) = v7;
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8 || (*(_WORD *)(v8 + 28) & 0x20) == 0)
    goto LABEL_9;
  *(_DWORD *)(v8 + 24) += 2;
  if ((v7 & 1) != 0)
  {
    v10 = 1;
    goto LABEL_7;
  }
  v9 = *(_QWORD **)(a1 + 128);
  if (!v9 || !*((_DWORD *)v9 - 3))
  {
    v10 = 0;
    goto LABEL_7;
  }
  v27 = *((unsigned int *)v9 - 1);
  v28 = &v9[v27];
  if ((_DWORD)v27)
  {
    v29 = 8 * v27;
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      ++v9;
      v29 -= 8;
      if (!v29)
        goto LABEL_55;
    }
  }
  if (v9 != v28)
  {
    v41 = *v9;
LABEL_88:
    if (*(_QWORD *)(v41 + 8))
      goto LABEL_56;
    while (++v9 != v28)
    {
      v41 = *v9;
      if ((unint64_t)(*v9 + 1) > 1)
      {
        if (v9 == v28)
          break;
        goto LABEL_88;
      }
    }
  }
LABEL_55:
  v9 = v28;
LABEL_56:
  v10 = v9 != v28;
LABEL_7:
  WebCore::SVGElement::updateRelativeLengthsInformationForChild((WebCore::SVGElement *)v8, (void *)v10, (WebCore::SVGElement *)a1);
  v11 = *(_DWORD *)(v8 + 24) - 2;
  if (*(_DWORD *)(v8 + 24) != 2)
  {
LABEL_8:
    *(_DWORD *)(v8 + 24) = v11;
    goto LABEL_9;
  }
LABEL_37:
  v24 = *(_WORD *)(v8 + 30);
  if ((v24 & 0x400) == 0)
  {
    v25 = *(_WORD *)(v8 + 28);
    if ((v25 & 0xF000) == 0x9000)
    {
      WebCore::Document::removedLastRef((WebCore::Document *)v8, v6);
    }
    else
    {
      if ((v25 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
        v24 = *(_WORD *)(v8 + 30);
      }
      *(_WORD *)(v8 + 30) = v24 | 0x400;
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
    }
  }
LABEL_9:
  if ((*(_BYTE *)(a1 + 22) & 8) != 0)
  {
    v12 = *(_QWORD *)(a1 + 104);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) != 0)
      {
        v14 = *(uint64_t **)(v12 + 40);
        LODWORD(v15) = *(_DWORD *)(v12 + 52);
      }
      else
      {
        v14 = (uint64_t *)(v12 + 32);
        LODWORD(v15) = v13 >> 5;
      }
      if ((_DWORD)v15)
      {
        v15 = v15;
        while (1)
        {
          v16 = *v14;
          if (*v14 == WebCore::HTMLNames::nonceAttr
            || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 24)
            && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 32))
          {
            break;
          }
          v14 += 2;
          if (!--v15)
            goto LABEL_18;
        }
        WebCore::Element::hideNonceSlow((WebCore::Element *)a1);
      }
    }
  }
LABEL_18:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1160))(a1))
    v17 = (v4 & 1) == 0;
  else
    v17 = 1;
  if (v17 || (*(_BYTE *)(a1 + 22) & 0x10) != 0)
    return 0;
  v18 = *(WebCore::TreeScope **)(a1 + 40);
  v19 = *(_QWORD *)v18;
  if (*(_QWORD *)v18)
    v20 = (*(_WORD *)(*(_QWORD *)v18 + 28) & 0x80) == 0;
  else
    v20 = 1;
  if (!v20 && !*(_BYTE *)(v19 + 193))
  {
    v39 = *(_QWORD *)(v19 + 200);
    if (v39)
    {
      v40 = *(_QWORD *)(v39 + 8);
      if (v40)
      {
        if (*(_WORD *)(*(_QWORD *)(v40 + 96) + 10) == 242)
          v18 = (WebCore::TreeScope *)*((_QWORD *)v18 + 2);
      }
    }
  }
  v21 = *(_QWORD *)(a1 + 104);
  if (v21 && *(_QWORD *)(v21 + 24))
  {
    v32 = *(_DWORD *)(v21 + 4);
    if ((v32 & 1) != 0)
    {
      v33 = *(uint64_t **)(v21 + 40);
      LODWORD(v34) = *(_DWORD *)(v21 + 52);
    }
    else
    {
      v33 = (uint64_t *)(v21 + 32);
      LODWORD(v34) = v32 >> 5;
    }
    if ((_DWORD)v34)
    {
      v34 = v34;
      while (1)
      {
        v35 = *v33;
        if (*v33 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v35 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v35 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v33 += 2;
        if (!--v34)
          goto LABEL_68;
      }
    }
    else
    {
LABEL_68:
      v33 = 0;
    }
    v22 = v33 + 1;
  }
  else
  {
    v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  if (*v22
    && *(_DWORD *)(*v22 + 4)
    && (v26 = (uint64_t *)WebCore::TreeScope::svgResourcesMap(v18), *v26)
    && WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>,WTF::AtomString>(v26, v22))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::SVGElement::updateRelativeLengthsInformation(WebCore::SVGElement *this)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  _BOOL8 v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;

  *((_BYTE *)this + 146) = 1;
  result = (*(uint64_t (**)(WebCore::SVGElement *))(*(_QWORD *)this + 1296))(this);
  *((_BYTE *)this + 145) = result;
  v3 = *((_QWORD *)this + 4);
  if (!v3 || (*(_WORD *)(v3 + 28) & 0x20) == 0)
    return result;
  *(_DWORD *)(v3 + 24) += 2;
  if ((result & 1) != 0)
  {
    v5 = 1;
    goto LABEL_6;
  }
  v4 = (_QWORD *)*((_QWORD *)this + 16);
  if (!v4 || !*((_DWORD *)v4 - 3))
  {
    v5 = 0;
    goto LABEL_6;
  }
  v7 = *((unsigned int *)v4 - 1);
  v8 = &v4[v7];
  if ((_DWORD)v7)
  {
    v9 = 8 * v7;
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      ++v4;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
  }
  if (v4 != v8)
  {
    v12 = *v4;
LABEL_26:
    if (*(_QWORD *)(v12 + 8))
      goto LABEL_18;
    while (++v4 != v8)
    {
      v12 = *v4;
      if ((unint64_t)(*v4 + 1) > 1)
      {
        if (v4 == v8)
          break;
        goto LABEL_26;
      }
    }
  }
LABEL_17:
  v4 = v8;
LABEL_18:
  v5 = v4 != v8;
LABEL_6:
  result = (uint64_t)WebCore::SVGElement::updateRelativeLengthsInformationForChild((WebCore::SVGElement *)v3, (void *)v5, this);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    v10 = *(_WORD *)(v3 + 30);
    if ((v10 & 0x400) == 0)
    {
      v11 = *(_WORD *)(v3 + 28);
      if ((v11 & 0xF000) == 0x9000)
      {
        return (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v3, v6);
      }
      else
      {
        if ((v11 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
          v10 = *(_WORD *)(v3 + 30);
        }
        *(_WORD *)(v3 + 30) = v10 | 0x400;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
      }
    }
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::ancestorsOfType<WebCore::LegacyRenderSVGResourceContainer>(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
    {
      while ((*(_BYTE *)(result + 52) & 7) != 4 || (~*(unsigned __int8 *)(result + 53) & 9) != 0)
      {
        v1 = *(_QWORD *)(result + 32);
        if (!v1)
          return 0;
        result = *(_QWORD *)(v1 + 8);
        if (!result)
          return result;
      }
    }
  }
  return result;
}

_QWORD *WebCore::SVGElement::childrenChanged(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *result;
  void *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;

  result = (_QWORD *)WebCore::ContainerNode::childrenChanged((uint64_t)a1, a2);
  if ((a1[9] & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v6 = *(_QWORD *)((a1[9] & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v6)
    goto LABEL_2;
  v7 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 2;
  v8 = *a2;
  if ((v8 - 2) < 3)
  {
    result = *(_QWORD **)(v6 + 224);
    if (!result)
      goto LABEL_10;
    v9 = 14;
    goto LABEL_21;
  }
  if (v8 == 8 || v8 == 5)
  {
    result = *(_QWORD **)(v6 + 224);
    if (result)
    {
      v9 = 13;
LABEL_21:
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
      v7 = *(_DWORD *)(v6 + 24) - 2;
    }
  }
LABEL_10:
  if (v7)
  {
    *(_DWORD *)(v6 + 24) = v7;
  }
  else
  {
    v10 = *(_WORD *)(v6 + 30);
    if ((v10 & 0x400) == 0)
    {
      v11 = *(_WORD *)(v6 + 28);
      if ((v11 & 0xF000) == 0x9000)
      {
        result = WebCore::Document::removedLastRef((WebCore::Document *)v6, v5);
      }
      else
      {
        if ((v11 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
          v10 = *(_WORD *)(v6 + 30);
        }
        *(_WORD *)(v6 + 30) = v10 | 0x400;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
      }
    }
  }
LABEL_2:
  if (a2[32])
    return WebCore::SVGElement::invalidateInstances(a1, v5);
  return result;
}

double WebCore::SVGElement::localCoordinateSpaceTransform@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *a1 = xmmword_1969FE948;
  a1[1] = unk_1969FE958;
  result = 0.0;
  a1[2] = xmmword_1969FE968;
  return result;
}

uint64_t WebCore::SVGElement::accessKeyAction(WebCore::SVGElement *this, int a2)
{
  return WebCore::simulateClick(this, 0, a2, 1, 1);
}

WebCore::SVGConditionalProcessingAttributes *WebCore::SVGElementRareData::conditionalProcessingAttributes(WebCore::SVGElementRareData *this, WebCore::SVGElement *a2)
{
  WebCore::SVGConditionalProcessingAttributes *result;
  WebCore::SVGConditionalProcessingAttributes *v5;
  void *v6;
  WTF *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;

  result = (WebCore::SVGConditionalProcessingAttributes *)*((_QWORD *)this + 11);
  if (!result)
  {
    v5 = (WebCore::SVGConditionalProcessingAttributes *)WTF::fastMalloc((WTF *)0x18);
    result = WebCore::SVGConditionalProcessingAttributes::SVGConditionalProcessingAttributes(v5, a2);
    v7 = (WTF *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = result;
    if (v7)
    {
      v8 = (_DWORD *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      v9 = (_DWORD *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      v10 = *(_DWORD **)v7;
      *(_QWORD *)v7 = 0;
      if (v10)
      {
        if (v10[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        else
          --v10[2];
      }
      WTF::fastFree(v7, v6);
      return (WebCore::SVGConditionalProcessingAttributes *)*((_QWORD *)this + 11);
    }
  }
  return result;
}

uint64_t WebCore::SVGElement::hasAssociatedSVGLayoutBox(WebCore::SVGElement *this)
{
  uint64_t result;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 103)
      return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 680) & 0x800000000000) == 0;
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t *WebCore::SVGEllipseElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  uint64_t *result;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  result = WebCore::SVGEllipseElement::SVGEllipseElement(v6, a1, a2);
  *a3 = result;
  return result;
}

_QWORD *WebCore::SVGEllipseElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, uint64_t a5)
{
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  int v25;

  v25 = 0;
  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 > 0x32B)
  {
    if (v10 == 812)
    {
      v11 = a1[30];
      ++*(_DWORD *)(v11 + 8);
      v19 = *a4;
      if (*a4)
      {
        v13 = (unsigned __int16 *)*((_QWORD *)v19 + 1);
        v14 = *((unsigned int *)v19 + 1) | ((unint64_t)((*((_DWORD *)v19 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v14 = 0x100000000;
      }
      v15 = 0;
    }
    else
    {
      if (v10 != 813)
        goto LABEL_24;
      v11 = a1[31];
      ++*(_DWORD *)(v11 + 8);
      v16 = *a4;
      if (*a4)
      {
        v13 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
        v14 = *((unsigned int *)v16 + 1) | ((unint64_t)((*((_DWORD *)v16 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v14 = 0x100000000;
      }
      v15 = 1;
    }
    v18 = 1;
  }
  else
  {
    if (v10 == 418)
    {
      v11 = a1[28];
      ++*(_DWORD *)(v11 + 8);
      v17 = *a4;
      if (*a4)
      {
        v13 = (unsigned __int16 *)*((_QWORD *)v17 + 1);
        v14 = *((unsigned int *)v17 + 1) | ((unint64_t)((*((_DWORD *)v17 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v14 = 0x100000000;
      }
      v15 = 0;
    }
    else
    {
      if (v10 != 419)
        goto LABEL_24;
      v11 = a1[29];
      ++*(_DWORD *)(v11 + 8);
      v12 = *a4;
      if (*a4)
      {
        v13 = (unsigned __int16 *)*((_QWORD *)v12 + 1);
        v14 = *((unsigned int *)v12 + 1) | ((unint64_t)((*((_DWORD *)v12 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v14 = 0x100000000;
      }
      v15 = 1;
    }
    v18 = 0;
  }
  v20 = WebCore::SVGLengthValue::construct(v15, v13, v14, &v25, v18);
  v21 = *(_QWORD *)(v11 + 40);
  *(_DWORD *)(v21 + 28) = v20;
  *(_WORD *)(v21 + 32) = WORD2(v20);
  v22 = *(_QWORD *)(v11 + 48);
  if (v22)
  {
    *(_DWORD *)(v22 + 28) = v20;
    *(_WORD *)(v22 + 32) = WORD2(v20);
  }
  if (*(_DWORD *)(v11 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  else
    --*(_DWORD *)(v11 + 8);
LABEL_24:
  WebCore::SVGElement::reportAttributeParsingError((uint64_t)a1, v25, a2, a4);
  return WebCore::SVGGeometryElement::attributeChanged((uint64_t)a1, a2, a3, (WTF::AtomString *)a4, a5, v23);
}

void WebCore::SVGEllipseElement::svgAttributeChanged(WebCore::SVGEllipseElement *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v4;
  void *v5;
  unsigned int *v6;

  if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::findAccessor((uint64_t *)a2))
  {
    WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>(&v6, (uint64_t)this);
    WebCore::SVGElement::setPresentationalHintStyleIsDirty(this, v4);
    WebCore::SVGGraphicsElement::invalidateResourceImageBuffersIfNeeded(this);
    WebCore::SVGElement::InstanceInvalidationGuard::~InstanceInvalidationGuard((WebCore::SVGElement::InstanceInvalidationGuard *)&v6, v5);
  }
  else
  {
    WebCore::SVGGeometryElement::svgAttributeChanged(this, a2);
  }
}

WebCore::Node *WebCore::SVGElement::setPresentationalHintStyleIsDirty(WebCore::Node *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = (uint64_t)this;
  v3 = *((_QWORD *)this + 13);
  if (!v3 || (v4 = *(_DWORD *)(v3 + 4), (v4 & 1) == 0))
  {
    this = (WebCore::Node *)WebCore::Element::createUniqueElementData(this);
    v3 = *(_QWORD *)(v2 + 104);
    v4 = *(_DWORD *)(v3 + 4);
  }
  *(_DWORD *)(v3 + 4) = v4 | 4;
  if ((*(_BYTE *)(v2 + 22) & 8) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
    if (*(_QWORD *)(v5 + 1944))
    {
      if (!*(_BYTE *)(v5 + 3405) && !*(_BYTE *)(v5 + 3392))
      {
        *(_WORD *)(v2 + 30) |= 0x10u;
        v6 = *(_QWORD *)(v2 + 64);
        v7 = HIWORD(v6) & 7;
        if (v7 <= 2)
        {
          *(_QWORD *)(v2 + 64) = v6 & 0xFFF8FFFFFFFFFFFFLL | 0x3000000000000;
          if (!(_DWORD)v7)
          {
            *(_DWORD *)(v2 + 24) += 2;
            v8 = *(unsigned __int16 *)(v2 + 28);
            if ((v8 & 0x80) != 0)
            {
              v15 = *(_QWORD *)(v2 + 200);
              if (!v15)
                goto LABEL_42;
            }
            else if ((~v8 & 0x408) == 0
                   && (this = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 368))(v2),
                       (_DWORD)this))
            {
              v15 = *(_QWORD *)(v2 + 112);
              if (!v15)
                goto LABEL_42;
            }
            else
            {
              a2 = *(_QWORD *)(v2 + 32);
              if (!a2)
                goto LABEL_42;
              v9 = *(_WORD *)(a2 + 28);
              if ((v9 & 0x80) == 0)
              {
                if ((v9 & 8) == 0)
                  goto LABEL_42;
                if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) == 0)
                  goto LABEL_16;
                v13 = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                if (!v13)
                  goto LABEL_16;
                this = *(WebCore::Node **)(v13 + 224);
                if (!this)
                  goto LABEL_42;
                this = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
                a2 = (uint64_t)this;
LABEL_36:
                if (!a2)
                {
LABEL_42:
                  if (*(_DWORD *)(v2 + 24) == 2)
                  {
                    v24 = *(_WORD *)(v2 + 30);
                    if ((v24 & 0x400) == 0)
                    {
                      v25 = *(_WORD *)(v2 + 28);
                      if ((v25 & 0xF000) == 0x9000)
                      {
                        this = (WebCore::Node *)WebCore::Document::removedLastRef((WebCore::Document *)v2, (void *)a2);
                      }
                      else
                      {
                        if ((v25 & 0x20) != 0)
                        {
                          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
                          v24 = *(_WORD *)(v2 + 30);
                        }
                        *(_WORD *)(v2 + 30) = v24 | 0x400;
                        this = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v2 + 24) -= 2;
                  }
LABEL_44:
                  v17 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
                  v18 = *(_QWORD *)(v17 + 1272);
                  if (v18)
                  {
                    v19 = *(_QWORD *)(v18 + 64);
                    if ((v19 & 0x8000000000000) != 0
                      || (v19 & 0x7000000000000) != 0
                      || (*(_WORD *)(v18 + 30) & 0x20) != 0)
                    {
                      *(_DWORD *)(v17 + 24) += 2;
                      *(_QWORD *)(v17 + 64) |= 0x8000000000000uLL;
                      if (((*(_QWORD *)(v17 + 1536) & 0xFFFFFFFFFFFFLL) == 0
                         || *(double *)((*(_QWORD *)(v17 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                        && !*(_BYTE *)(v17 + 3362))
                      {
                        *(_QWORD *)(v17 + 1528) = 0;
                        WTF::MonotonicTime::now(this);
                        this = (WebCore::Node *)WebCore::TimerBase::setNextFireTime(v17 + 1504, v20 + 0.0);
                        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                        {
                          v26 = *(_QWORD *)(v17 + 528);
                          if (v26)
                          {
                            v27 = *(_QWORD *)(v26 + 8);
                            if (v27)
                            {
                              v28 = *(_QWORD *)(v27 + 24);
                              if (v28)
                              {
                                v29 = *(_QWORD *)(v28 + 8);
                                if (v29)
                                  goto LABEL_70;
                              }
                            }
                          }
                          v30 = *(_QWORD *)(v17 + 2632);
                          if (v30)
                          {
                            v31 = *(_QWORD *)(v30 + 8);
                            if (v31)
                            {
                              v32 = *(_QWORD *)(v31 + 528);
                              if (v32)
                              {
                                v33 = *(_QWORD *)(v32 + 8);
                                if (v33)
                                {
                                  v34 = *(_QWORD *)(v33 + 24);
                                  if (v34)
                                  {
                                    v29 = *(_QWORD *)(v34 + 8);
                                    if (v29)
                                    {
LABEL_70:
                                      this = *(WebCore::Node **)(*(_QWORD *)(v29 + 80) + 8);
                                      if (this)
                                        this = WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(this, (WebCore::Document *)v17);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if (*(_DWORD *)(v17 + 24) == 2)
                      {
                        v22 = *(_WORD *)(v17 + 30);
                        if ((v22 & 0x400) == 0)
                        {
                          v23 = *(_WORD *)(v17 + 28);
                          if ((v23 & 0xF000) == 0x9000)
                          {
                            this = (WebCore::Node *)WebCore::Document::removedLastRef((WebCore::Document *)v17, (void *)a2);
                          }
                          else
                          {
                            if ((v23 & 0x20) != 0)
                            {
                              (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 160) + 16))(*(_QWORD *)(v17 + 160));
                              v22 = *(_WORD *)(v17 + 30);
                            }
                            *(_WORD *)(v17 + 30) = v22 | 0x400;
                            this = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 72))(v17);
                          }
                        }
                      }
                      else
                      {
                        *(_DWORD *)(v17 + 24) -= 2;
                      }
                    }
                  }
                  goto LABEL_51;
                }
LABEL_16:
                *(_QWORD *)(a2 + 64) |= 0x10000000000000uLL;
                do
                {
                  if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                  {
                    v12 = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                    if (v12)
                      *(_QWORD *)(v12 + 64) |= 0x8000000000000uLL;
                  }
                  v10 = *(_QWORD *)(a2 + 64);
                  if ((v10 & 0x8000000000000) != 0)
                    break;
                  *(_QWORD *)(a2 + 64) = v10 | 0x8000000000000;
                  this = *(WebCore::Node **)(a2 + 32);
                  if (!this)
                    break;
                  v11 = *((_WORD *)this + 14);
                  if ((v11 & 0x80) != 0)
                  {
                    v16 = *((_QWORD *)this + 25);
                    if (!v16)
                      break;
                    this = *(WebCore::Node **)(v16 + 8);
                  }
                  else
                  {
                    if ((v11 & 8) == 0)
                      break;
                    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
                    {
                      v14 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
                      if (v14)
                      {
                        this = *(WebCore::Node **)(v14 + 224);
                        if (!this)
                          break;
                        this = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)this + 16))(this);
                      }
                    }
                  }
                  a2 = (uint64_t)this;
                }
                while (this);
                if (!v2)
                  goto LABEL_44;
                goto LABEL_42;
              }
              v15 = *(_QWORD *)(a2 + 200);
              if (!v15)
                goto LABEL_42;
            }
            a2 = *(_QWORD *)(v15 + 8);
            goto LABEL_36;
          }
        }
      }
    }
  }
LABEL_51:
  if ((*(_BYTE *)(v2 + 71) & 1) != 0)
  {
    v35 = *(_QWORD *)(v2 + 32);
    if (!v35 || (*(_WORD *)(v35 + 28) & 8) == 0 || (*(_BYTE *)(v35 + 70) & 4) == 0)
    {
      do
        v2 = *(_QWORD *)(v2 + 56);
      while (v2 && (*(_WORD *)(v2 + 28) & 8) == 0);
      return WebCore::invalidateForSiblingCombinators((WebCore::Node *)v2, (WebCore::Element *)a2);
    }
  }
  return this;
}

void WebCore::SVGEllipseElement::createElementRenderer(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 680) & 0x800000000000) != 0)
  {
    v8 = WebCore::RenderSVGEllipse::operator new(248);
    WebCore::RenderSVGEllipse::RenderSVGEllipse(v8, a1, a2);
  }
  else
  {
    v6 = WebCore::LegacyRenderSVGEllipse::operator new(288);
    WebCore::LegacyRenderSVGEllipse::LegacyRenderSVGEllipse(v6, a1, a2);
  }
  *a3 = v7;
}

void WebCore::SVGFEBlendElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char **v17;
  char *v18;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E34583D8;
  v6[14] = (uint64_t)&unk_1E3458938;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E3459FD0;
  *((_QWORD *)v7 + 1) = v6;
  v18 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v18);
  v8 = (uint64_t)v18;
  v18 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *v6 = (uint64_t)off_1E34583D8;
  v6[14] = (uint64_t)&unk_1E3458938;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E3452E28;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E3452EA8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = off_1E347BDB8;
  v6[28] = v9;
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)v11 = &off_1E3452E28;
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_WORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = &off_1E3452EA8;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)v11 = off_1E347BDB8;
  v6[29] = v11;
  v13 = WTF::fastMalloc((WTF *)0x40);
  v14 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v14 + 8) = 1;
  *(_BYTE *)(v14 + 12) = 1;
  *(_QWORD *)v14 = off_1E345A040;
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 16) = v6;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)v13 = &off_1E34568A0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = 0;
  *(_BYTE *)(v13 + 56) = 0;
  v6[30] = v13;
  v15 = atomic_load(&WebCore::SVGFEBlendElement::SVGFEBlendElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v15 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WebCore::SVGFEBlendElement::SVGFEBlendElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEBlendElement::SVGFEBlendElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

_QWORD *WebCore::SVGFEBlendElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl *a4, int a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  unsigned __int8 v20;
  int v21;
  int v22;

  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  switch(v10)
  {
    case 517:
      v11 = a1[29];
      goto LABEL_11;
    case 518:
      v11 = a1[28];
LABEL_11:
      v15 = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v11 + 8) = v15 + 1;
      v16 = *(_QWORD *)(v11 + 40);
      v17 = *(_DWORD **)a4;
      if (*(_QWORD *)a4)
        *v17 += 2;
      v18 = *(WTF::StringImpl **)(v16 + 32);
      *(_QWORD *)(v16 + 32) = v17;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::destroy(v18, a2);
          v15 = *(_DWORD *)(v11 + 8) - 1;
          if (*(_DWORD *)(v11 + 8) != 1)
            goto LABEL_17;
          goto LABEL_8;
        }
        *(_DWORD *)v18 -= 2;
      }
      if (v15)
        goto LABEL_17;
LABEL_8:
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
    case 588:
      v20 = 1;
      if (WebCore::parseBlendMode(a4, (char *)&v20))
      {
        v11 = a1[30];
        ++*(_DWORD *)(v11 + 8);
        v12 = *(_QWORD *)(v11 + 40);
        v13 = v20;
        v22 = v20;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v12 + 16))(v12, &v22);
        v14 = *(_QWORD *)(v11 + 48);
        if (v14)
        {
          v21 = v13;
          (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 16))(v14, &v21);
        }
        v15 = *(_DWORD *)(v11 + 8) - 1;
        if (*(_DWORD *)(v11 + 8) == 1)
          goto LABEL_8;
LABEL_17:
        *(_DWORD *)(v11 + 8) = v15;
      }
      break;
  }
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
}

uint64_t WebCore::SVGFEBlendElement::setFilterEffectAttribute(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  if (*(_BYTE *)(a2 + 48) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1965FB6A0);
  }
  if (*a3 != WebCore::SVGNames::modeAttr)
    return 0;
  v4 = *(_QWORD **)(a1 + 240);
  v5 = v4[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_4;
  v9 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = (uint64_t *)v4[3];
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_4;
    }
  }
  else
  {
    v11 = (uint64_t *)v4[3];
  }
  v12 = (uint64_t *)(v5 + 8 * v9);
  if (v11 == v12)
    goto LABEL_4;
  v13 = *v11;
LABEL_18:
  if (!*(_QWORD *)(v13 + 8))
  {
    while (++v11 != v12)
    {
      v13 = *v11;
      if ((unint64_t)(*v11 + 1) > 1)
      {
        if (v11 != v12)
          goto LABEL_18;
        break;
      }
    }
LABEL_4:
    v6 = v4 + 5;
    goto LABEL_5;
  }
  v6 = v4 + 6;
LABEL_5:
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  if (*(unsigned __int8 *)(a2 + 64) == v7)
    return 0;
  *(_BYTE *)(a2 + 64) = v7;
  return 1;
}

void WebCore::SVGFEBlendElement::svgAttributeChanged(WebCore::SVGFEBlendElement *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  unsigned int *v21;

  if ((byte_1ECE84FF8 & 1) != 0)
  {
    v4 = qword_1ECE84FF0;
    if (!qword_1ECE84FF0)
      goto LABEL_6;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v4 = qword_1ECE84FF0;
    if (v5)
      goto LABEL_7;
    if (qword_1ECE84FF0)
      v5 = (WTF::StringImpl ***)(qword_1ECE84FF0 + 16 * *(unsigned int *)(qword_1ECE84FF0 - 4));
    else
LABEL_6:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
LABEL_7:
  if ((byte_1ECE84FF8 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
  if ((WTF::StringImpl ***)v4 == v5 || !v5[1])
  {
    WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, (const WebCore::QualifiedName *)a2);
  }
  else
  {
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v6 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v6 = 1;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 8) = this;
      *(_BYTE *)(v6 + 32) = 0;
      v8 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v8 & 0xFFFF000000000000 | v6;
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          v20 = (WTF *)v9;
          v18 = v9[7];
          if ((_DWORD)v18)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v20 + 2), (WTF::StringImpl *)(*((_QWORD *)v20 + 2) + 32 * v18));
          v19 = (WTF *)*((_QWORD *)v20 + 2);
          if (v19)
          {
            *((_QWORD *)v20 + 2) = 0;
            *((_DWORD *)v20 + 6) = 0;
            WTF::fastFree(v19, v7);
          }
          WTF::fastFree(v20, v7);
        }
      }
    }
    v12 = (unsigned int *)(*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v21 = v12;
    if (*a2 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::modeAttr)
    {
      WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(this, (const WebCore::QualifiedName *)a2);
    }
    else
    {
      v14 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      *(_DWORD *)(v14 + 24) += 2;
      WebCore::Document::updateSVGRenderer((WebCore::Document *)v14, this);
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        v16 = *(_WORD *)(v14 + 30);
        if ((v16 & 0x400) == 0)
        {
          v17 = *(_WORD *)(v14 + 28);
          if ((v17 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v14, v15);
          }
          else
          {
            if ((v17 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 160) + 16))(*(_QWORD *)(v14 + 160));
              v16 = *(_WORD *)(v14 + 30);
            }
            *(_WORD *)(v14 + 30) = v16 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
          }
        }
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
    }
    WebCore::SVGElement::InstanceInvalidationGuard::~InstanceInvalidationGuard((WebCore::SVGElement::InstanceInvalidationGuard *)&v21, v15);
  }
}

void WebCore::SVGFEBlendElement::createFilterEffect(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char **v17;
  char *v18;

  v3 = *(_QWORD **)(a1 + 240);
  v4 = v3[3];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v10 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    v12 = (uint64_t *)v3[3];
    while ((unint64_t)(*v12 + 1) <= 1)
    {
      ++v12;
      v11 -= 8;
      if (!v11)
        goto LABEL_2;
    }
  }
  else
  {
    v12 = (uint64_t *)v3[3];
  }
  v13 = (uint64_t *)(v4 + 8 * v10);
  if (v12 == v13)
    goto LABEL_2;
  v14 = *v12;
LABEL_18:
  if (!*(_QWORD *)(v14 + 8))
  {
    while (++v12 != v13)
    {
      v14 = *v12;
      if ((unint64_t)(*v12 + 1) > 1)
      {
        if (v12 != v13)
          goto LABEL_18;
        break;
      }
    }
LABEL_2:
    v5 = v3 + 5;
    goto LABEL_3;
  }
  v5 = v3 + 6;
LABEL_3:
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5);
  v7 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v7 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v8 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  v15 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
  {
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    WebCore::FEBlend::create(v6, (const void **)&v15, (uint64_t *)&v18);
    v9 = (uint64_t)v18;
    CFRelease(v8);
  }
  else
  {
    WebCore::FEBlend::create(v6, (const void **)&v15, (uint64_t *)&v18);
    v9 = (uint64_t)v18;
  }
  *a2 = v9;
}

uint64_t *WebCore::SVGFEColorMatrixElement::create@<X0>(WebCore::SVGFEColorMatrixElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v7;
  uint64_t *result;

  v7 = (uint64_t *)bmalloc::api::isoAllocate();
  result = WebCore::SVGFEColorMatrixElement::SVGFEColorMatrixElement(v7, (_DWORD **)this, (uint64_t)a2);
  *a3 = result;
  return result;
}

BOOL WebCore::SVGFEColorMatrixElement::isInvalidValuesLength(WebCore::SVGFEColorMatrixElement *this)
{
  WebCore::SVGAnimatedProperty *v2;
  _BOOL4 isAnimating;
  uint64_t v4;
  int v5;
  int v6;

  v2 = (WebCore::SVGAnimatedProperty *)*((_QWORD *)this + 29);
  isAnimating = WebCore::SVGAnimatedProperty::isAnimating(v2);
  v4 = 40;
  if (isAnimating)
    v4 = 48;
  v5 = (*(unsigned __int8 (**)(_QWORD))(**(_QWORD **)((char *)v2 + v4) + 32))(*(_QWORD *)((char *)v2 + v4));
  v6 = *(_DWORD *)(WebCore::SVGPolyElement::points(*((WebCore::SVGPolyElement **)this + 30)) + 44);
  if (v5 == 1 && v6 != 20)
    return 1;
  if (v5 == 3 && v6 != 1)
    return 1;
  return v5 == 2 && v6 != 1;
}

_QWORD *WebCore::SVGFEColorMatrixElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl *a4, int a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  int v16;
  unsigned __int8 v17;

  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  switch(v10)
  {
    case 518:
      v11 = a1[28];
      ++*(_DWORD *)(v11 + 8);
      WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::setBaseValInternal(v11, a4);
      goto LABEL_7;
    case 900:
      v11 = a1[30];
      ++*(_DWORD *)(v11 + 8);
      v12 = *(_QWORD *)a4;
      if (*(_QWORD *)a4)
      {
        v13 = *(unsigned __int16 **)(v12 + 8);
        v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v14 = 0x100000000;
      }
      WebCore::SVGNumberList::parse(*(_QWORD *)(v11 + 40), v13, (unsigned __int16 *)v14);
      goto LABEL_7;
    case 952:
      v16 = WebCore::SVGPropertyTraits<WebCore::ColorMatrixType>::fromString(a4);
      v17 = v16;
      if (v16)
      {
        v11 = a1[29];
        ++*(_DWORD *)(v11 + 8);
        WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::setBaseValInternal<WebCore::ColorMatrixType>(v11, &v17);
LABEL_7:
        if (*(_DWORD *)(v11 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        else
          --*(_DWORD *)(v11 + 8);
      }
      break;
  }
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
}

uint64_t WebCore::SVGPropertyTraits<WebCore::ColorMatrixType>::fromString(_QWORD *a1)
{
  if ((MEMORY[0x19AEA53F4](*a1, "matrix", 6) & 1) != 0)
    return 1;
  if ((MEMORY[0x19AEA53F4](*a1, "saturate", 8) & 1) != 0)
    return 2;
  if ((MEMORY[0x19AEA53F4](*a1, "hueRotate", 9) & 1) != 0)
    return 3;
  if (MEMORY[0x19AEA53F4](*a1, "luminanceToAlpha", 16))
    return 4;
  return 0;
}

uint64_t WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::setBaseValInternal<WebCore::ColorMatrixType>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;

  v4 = *(_QWORD *)(a1 + 40);
  v7 = *a2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v4 + 16))(v4, &v7);
  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    v6 = *a2;
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)result + 16))(result, &v6);
  }
  return result;
}

uint64_t WebCore::SVGFEColorMatrixElement::setFilterEffectAttribute(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  _BOOL8 v8;
  WTF *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned __int8 v13;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF *v26;
  int v27;

  if (*(_BYTE *)(a2 + 48) != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1965FBF3CLL);
  }
  if (*a3 == WebCore::SVGNames::typeAttr)
  {
    v10 = *(_QWORD *)(a1 + 232);
    v11 = *(_QWORD **)(v10 + 24);
    if (!v11 || !*((_DWORD *)v11 - 3))
    {
      v12 = (_QWORD *)(v10 + 40);
      goto LABEL_10;
    }
    v15 = *((unsigned int *)v11 - 1);
    v16 = &v11[v15];
    if ((_DWORD)v15)
    {
      v17 = 8 * v15;
      while ((unint64_t)(*v11 + 1) <= 1)
      {
        ++v11;
        v17 -= 8;
        if (!v17)
          goto LABEL_19;
      }
    }
    if (v11 != v16)
    {
      v23 = *v11;
LABEL_32:
      if (*(_QWORD *)(v23 + 8))
        goto LABEL_20;
      while (++v11 != v16)
      {
        v23 = *v11;
        if ((unint64_t)(*v11 + 1) > 1)
        {
          if (v11 != v16)
            goto LABEL_32;
          break;
        }
      }
    }
LABEL_19:
    v11 = v16;
LABEL_20:
    v18 = v11 == v16;
    v19 = 40;
    if (!v18)
      v19 = 48;
    v12 = (_QWORD *)(v10 + v19);
LABEL_10:
    v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 32))(*v12);
    if (*(unsigned __int8 *)(a2 + 64) != v13)
    {
      *(_BYTE *)(a2 + 64) = v13;
      return 1;
    }
    return 0;
  }
  if (*a3 != WebCore::SVGNames::valuesAttr)
    return 0;
  v4 = *(_QWORD **)(a1 + 240);
  v5 = v4[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_5;
  v20 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v20)
  {
    v21 = 8 * v20;
    v22 = (uint64_t *)v4[3];
    while ((unint64_t)(*v22 + 1) <= 1)
    {
      ++v22;
      v21 -= 8;
      if (!v21)
        goto LABEL_5;
    }
  }
  else
  {
    v22 = (uint64_t *)v4[3];
  }
  v24 = (uint64_t *)(v5 + 8 * v20);
  if (v22 == v24)
    goto LABEL_5;
  v25 = *v22;
LABEL_40:
  if (!*(_QWORD *)(v25 + 8))
  {
    while (++v22 != v24)
    {
      v25 = *v22;
      if ((unint64_t)(*v22 + 1) > 1)
      {
        if (v22 != v24)
          goto LABEL_40;
        break;
      }
    }
LABEL_5:
    v6 = v4 + 5;
    goto LABEL_6;
  }
  v6 = v4 + 6;
LABEL_6:
  WebCore::SVGValuePropertyList<WebCore::SVGNumber>::operator WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(*v6, (uint64_t)&v26);
  v8 = WebCore::FEColorMatrix::setValues(a2, (uint64_t)&v26);
  v9 = v26;
  if (v26)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree(v9, v7);
  }
  return v8;
}

void WebCore::SVGFEColorMatrixElement::svgAttributeChanged(WebCore::SVGFEColorMatrixElement *this, const WebCore::QualifiedName *a2)
{
  int v3;
  WebCore::SVGElement *v5;
  void *v6;
  unsigned int *v7;

  v3 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v3 == 518)
  {
    WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>(&v7, (uint64_t)this);
    WebCore::SVGElement::updateSVGRendererForElementChange(this);
LABEL_7:
    WebCore::SVGElement::InstanceInvalidationGuard::~InstanceInvalidationGuard((WebCore::SVGElement::InstanceInvalidationGuard *)&v7, v6);
    return;
  }
  if (v3 == 900 || v3 == 952)
  {
    WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>(&v7, (uint64_t)this);
    if (WebCore::SVGFEColorMatrixElement::isInvalidValuesLength(this))
      WebCore::SVGFilterPrimitiveStandardAttributes::markFilterEffectForRebuild(this, v5);
    else
      WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(this, a2);
    goto LABEL_7;
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, a2);
}

WTF *WebCore::SVGFEColorMatrixElement::createFilterEffect@<X0>(WebCore::SVGAnimatedProperty **a1@<X0>, WTF **a2@<X8>)
{
  WebCore::SVGAnimatedProperty *v4;
  _BOOL4 isAnimating;
  uint64_t v6;
  char v7;
  uint64_t v8;
  WTF::String *v9;
  __n128 v10;
  uint64_t hasAttribute;
  WTF *result;
  uint64_t v13;
  const void *v14;
  WTF *v15;
  void *v16;
  void *v17;
  CFTypeRef v18;
  CFTypeRef cf;
  int v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v4 = a1[29];
  isAnimating = WebCore::SVGAnimatedProperty::isAnimating(v4);
  v6 = 40;
  if (isAnimating)
    v6 = 48;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)((char *)v4 + v6) + 32))(*(_QWORD *)((char *)v4 + v6));
  hasAttribute = WebCore::Element::hasAttribute((WebCore::Element *)a1, (const WebCore::QualifiedName *)&WebCore::SVGNames::valuesAttr, v8, v9, v10);
  if ((hasAttribute & 1) == 0)
  {
    switch(v7)
    {
      case 3:
        v20 = 0;
        break;
      case 2:
        v20 = 1065353216;
        break;
      case 1:
        hasAttribute = WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::SVGFEColorMatrixElement::createFilterEffect(WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::GraphicsContext const&)::$_0,void>((uint64_t)&v21);
LABEL_21:
        v23 = v21;
        v24 = v22;
        goto LABEL_6;
      default:
        goto LABEL_6;
    }
    hasAttribute = (uint64_t)WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v21, &v20, 1uLL);
    goto LABEL_21;
  }
  result = (WTF *)WebCore::SVGFEColorMatrixElement::isInvalidValuesLength((WebCore::SVGFEColorMatrixElement *)a1);
  if ((_DWORD)result)
  {
    *a2 = 0;
    return result;
  }
  v13 = WebCore::SVGPolyElement::points(a1[30]);
  WebCore::SVGValuePropertyList<WebCore::SVGNumber>::operator WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(v13, (uint64_t)&v21);
  v23 = v21;
  v24 = v22;
  hasAttribute = (uint64_t)WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v23, HIDWORD(v22));
LABEL_6:
  v14 = (const void *)*WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)hasAttribute);
  cf = v14;
  if (v14)
    CFRetain(v14);
  WebCore::FEColorMatrix::create(v7, (uint64_t *)&v23, &cf, (uint64_t *)&v21);
  v15 = v21;
  v21 = 0;
  *a2 = v15;
  WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref((uint64_t *)&v21, v16);
  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);
  result = v23;
  if (v23)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    return (WTF *)WTF::fastFree(result, v17);
  }
  return result;
}

uint64_t WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::SVGFEColorMatrixElement::createFilterEffect(WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::GraphicsContext const&)::$_0,void>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)a1 = v2;
  v3 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)(v2 + 4 * v3) = 1065353216;
  *(_DWORD *)(v2 + 4 * (v3 + 1)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 2)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 3)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 4)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 5)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 6)) = 1065353216;
  *(_DWORD *)(v2 + 4 * (v3 + 7)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 8)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 9)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 10)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 11)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 12)) = 1065353216;
  *(_DWORD *)(v2 + 4 * (v3 + 13)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 14)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 15)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 16)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 17)) = 0;
  *(_DWORD *)(v2 + 4 * (v3 + 18)) = 1065353216;
  *(_DWORD *)(v2 + 4 * (v3 + 19)) = 0;
  *(_DWORD *)(a1 + 8) = 20;
  *(_DWORD *)(a1 + 12) = v3 + 20;
  return a1;
}

uint64_t *WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, int *a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 30))
  {
    v6 = 4 * a3;
    v7 = WTF::fastMalloc((WTF *)(4 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2++;
      *(_DWORD *)(v7 + 4 * v8++) = v9;
      v6 -= 4;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WebCore::SVGFEComponentTransferElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char **v13;
  char *v14;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E3458F08;
  v6[14] = (uint64_t)&unk_1E3459468;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E345A598;
  *((_QWORD *)v7 + 1) = v6;
  v14 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v14);
  v8 = (uint64_t)v14;
  v14 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *v6 = (uint64_t)off_1E3458F08;
  v6[14] = (uint64_t)&unk_1E3459468;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E3452E28;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E3452EA8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = off_1E347BDB8;
  v6[28] = v9;
  v11 = atomic_load(&WebCore::SVGFEComponentTransferElement::SVGFEComponentTransferElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v11 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WebCore::SVGFEComponentTransferElement::SVGFEComponentTransferElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEComponentTransferElement::SVGFEComponentTransferElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

_QWORD *WebCore::SVGFEComponentTransferElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl *a4, int a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  WTF::StringImpl *v14;

  if (*(_QWORD *)a2 == WebCore::SVGNames::inAttr)
  {
    v10 = a1[28];
    v11 = *(_DWORD *)(v10 + 8);
    *(_DWORD *)(v10 + 8) = v11 + 1;
    v12 = *(_QWORD *)(v10 + 40);
    v13 = *(_DWORD **)a4;
    if (*(_QWORD *)a4)
      *v13 += 2;
    v14 = *(WTF::StringImpl **)(v12 + 32);
    *(_QWORD *)(v12 + 32) = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, a2);
        v11 = *(_DWORD *)(v10 + 8) - 1;
        if (*(_DWORD *)(v10 + 8) != 1)
          goto LABEL_8;
        goto LABEL_11;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (v11)
    {
LABEL_8:
      *(_DWORD *)(v10 + 8) = v11;
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
    }
LABEL_11:
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
}

void WebCore::SVGFEComponentTransferElement::svgAttributeChanged(WebCore::SVGFEComponentTransferElement *this, const WebCore::QualifiedName *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  WTF *v16;
  unsigned int *v17;

  if (*(_QWORD *)a2 == WebCore::SVGNames::inAttr)
  {
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v3 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v3 = 1;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 8) = this;
      *(_BYTE *)(v3 + 32) = 0;
      v5 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v5 & 0xFFFF000000000000 | v3;
      v6 = v5 & 0xFFFFFFFFFFFFLL;
      if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v7 = __ldaxr((unsigned int *)v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)v6));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)v6);
          v15 = *(unsigned int *)(v6 + 28);
          if ((_DWORD)v15)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v15));
          v16 = *(WTF **)(v6 + 16);
          if (v16)
          {
            *(_QWORD *)(v6 + 16) = 0;
            *(_DWORD *)(v6 + 24) = 0;
            WTF::fastFree(v16, v4);
          }
          WTF::fastFree((WTF *)v6, v4);
        }
      }
    }
    v9 = (unsigned int *)(*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v17 = v9;
    v11 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v11 + 24) += 2;
    WebCore::Document::updateSVGRenderer((WebCore::Document *)v11, this);
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      v13 = *(_WORD *)(v11 + 30);
      if ((v13 & 0x400) == 0)
      {
        v14 = *(_WORD *)(v11 + 28);
        if ((v14 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v11, v12);
        }
        else
        {
          if ((v14 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
            v13 = *(_WORD *)(v11 + 30);
          }
          *(_WORD *)(v11 + 30) = v13 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
        }
      }
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    WebCore::SVGElement::InstanceInvalidationGuard::~InstanceInvalidationGuard((WebCore::SVGElement::InstanceInvalidationGuard *)&v17, v12);
  }
  else
  {
    WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, a2);
  }
}

uint64_t WebCore::SVGFEComponentTransferElement::createFilterEffect@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _BYTE *v10;
  WTF *v11;
  _QWORD *v12;
  WTF *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[4];
  __int128 v20;
  _DWORD v21[6];
  __int128 v22;
  _DWORD v23[6];
  __int128 v24;
  _DWORD v25[6];
  __int128 v26;
  __int128 v27;
  int v28;

  v19[0] = 0;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  v20 = 0u;
  memset(v21, 0, 21);
  v22 = 0u;
  memset(v23, 0, 21);
  v24 = 0u;
  memset(v25, 0, 21);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3)
  {
    while (1)
    {
      if ((~*(unsigned __int16 *)(v3 + 28) & 0x28) == 0)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24);
        if (v4 == *(_QWORD *)(WebCore::SVGNames::feFuncRTag + 24)
          || v4 == *(_QWORD *)(WebCore::SVGNames::feFuncGTag + 24)
          || v4 == *(_QWORD *)(WebCore::SVGNames::feFuncBTag + 24)
          || v4 == *(_QWORD *)(WebCore::SVGNames::feFuncATag + 24))
        {
          break;
        }
      }
      v3 = *(_QWORD *)(v3 + 56);
      if (!v3)
        goto LABEL_8;
    }
    WebCore::SVGComponentTransferFunctionElement::transferFunction((WebCore::SVGComponentTransferFunctionElement *)v3, (uint64_t)&v15);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1312))(v3);
    if (result > 3)
    {
LABEL_30:
      __break(1u);
      return result;
    }
    v9 = result;
    while (1)
    {
      v10 = &v19[40 * v9];
      *(_OWORD *)v10 = v15;
      *((_QWORD *)v10 + 2) = v16;
      v13 = (WTF *)*((_QWORD *)v10 + 3);
      v12 = v10 + 24;
      v11 = v13;
      if (v13)
        WTF::fastFree(v11, v8);
      *v12 = v17;
      v12[1] = v18;
      v3 = *(_QWORD *)(v3 + 56);
      if (!v3)
        break;
      while (1)
      {
        if ((~*(unsigned __int16 *)(v3 + 28) & 0x28) == 0)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24);
          if (v14 == *(_QWORD *)(WebCore::SVGNames::feFuncRTag + 24)
            || v14 == *(_QWORD *)(WebCore::SVGNames::feFuncGTag + 24)
            || v14 == *(_QWORD *)(WebCore::SVGNames::feFuncBTag + 24)
            || v14 == *(_QWORD *)(WebCore::SVGNames::feFuncATag + 24))
          {
            break;
          }
        }
        v3 = *(_QWORD *)(v3 + 56);
        if (!v3)
          goto LABEL_8;
      }
      WebCore::SVGComponentTransferFunctionElement::transferFunction((WebCore::SVGComponentTransferFunctionElement *)v3, (uint64_t)&v15);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1312))(v3);
      v9 = result;
      if (result >= 4)
        goto LABEL_30;
    }
  }
LABEL_8:
  v5 = WTF::fastMalloc((WTF *)0xE0);
  *a2 = WebCore::FEComponentTransfer::FEComponentTransfer(v5, (uint64_t)v19);
  if (*(_QWORD *)((char *)&v27 + 4))
    WTF::fastFree(*(WTF **)((char *)&v27 + 4), v6);
  if (*(_QWORD *)&v25[1])
    WTF::fastFree(*(WTF **)&v25[1], v6);
  if (*(_QWORD *)&v23[1])
    WTF::fastFree(*(WTF **)&v23[1], v6);
  result = *(_QWORD *)&v21[1];
  if (*(_QWORD *)&v21[1])
    return WTF::fastFree(*(WTF **)&v21[1], v6);
  return result;
}

uint64_t WebCore::SVGFEComponentTransferElement::setFilterEffectAttributeFromChild(WebCore::SVGFEComponentTransferElement *this, WebCore::FilterEffect *a2, const WebCore::Element *a3, const WebCore::QualifiedName *a4)
{
  char *v4;
  int v5;
  WebCore::FilterEffect *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 v30;
  char *v31;
  unsigned __int8 *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  float v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  WTF *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  float v58;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  void *__s2;
  int v98;
  int v99;

  if ((*((_WORD *)a3 + 14) & 0x20) == 0)
    return 0;
  v7 = a2;
  v8 = *(_QWORD *)(*((_QWORD *)a3 + 12) + 24);
  if (v8 != *(_QWORD *)(WebCore::SVGNames::feFuncRTag + 24)
    && v8 != *(_QWORD *)(WebCore::SVGNames::feFuncGTag + 24)
    && v8 != *(_QWORD *)(WebCore::SVGNames::feFuncBTag + 24)
    && v8 != *(_QWORD *)(WebCore::SVGNames::feFuncATag + 24))
  {
    return 0;
  }
  *((_DWORD *)a3 + 6) += 2;
  if (*((_BYTE *)a2 + 48) != 4)
  {
    a2 = (WebCore::FilterEffect *)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xc"
                                  "ode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Int"
                                  "ernal.sdk/usr/local/include/wtf/TypeCasts.h";
    __break(0xC471u);
    goto LABEL_107;
  }
  v9 = 0;
  v10 = *(unsigned __int16 *)(*(_QWORD *)a4 + 10);
  if (v10 <= 0x25B)
  {
    if (v10 != 293)
    {
      if (v10 != 456)
      {
        if (v10 != 524)
          goto LABEL_55;
        v20 = (*(uint64_t (**)(const WebCore::Element *))(*(_QWORD *)a3 + 1312))(a3);
        v21 = *((_QWORD *)a3 + 25);
        v22 = *(_QWORD *)(v21 + 24);
        if (v22 && *(_DWORD *)(v22 - 12))
        {
          v74 = *(unsigned int *)(v22 - 4);
          if ((_DWORD)v74)
          {
            v75 = 8 * v74;
            v76 = *(uint64_t **)(v21 + 24);
            while ((unint64_t)(*v76 + 1) <= 1)
            {
              ++v76;
              v75 -= 8;
              if (!v75)
                goto LABEL_19;
            }
          }
          else
          {
            v76 = *(uint64_t **)(v21 + 24);
          }
          v91 = (uint64_t *)(v22 + 8 * v74);
          if (v76 != v91)
          {
            v92 = *v76;
LABEL_149:
            if (*(_QWORD *)(v92 + 8))
            {
              v23 = v21 + 48;
LABEL_20:
              if (v20 < 4)
              {
                v15 = *(float *)(*(_QWORD *)v23 + 28);
                v24 = (float *)((char *)v7 + 40 * v20);
                v25 = v24[18];
                v17 = v24 + 18;
                v19 = v25;
                goto LABEL_49;
              }
              goto LABEL_107;
            }
            while (++v76 != v91)
            {
              v92 = *v76;
              if ((unint64_t)(*v76 + 1) > 1)
              {
                if (v76 != v91)
                  goto LABEL_149;
                break;
              }
            }
          }
        }
LABEL_19:
        v23 = v21 + 40;
        goto LABEL_20;
      }
      v53 = (*(uint64_t (**)(const WebCore::Element *))(*(_QWORD *)a3 + 1312))(a3);
      v54 = *((_QWORD *)a3 + 27);
      v55 = *(_QWORD *)(v54 + 24);
      if (v55 && *(_DWORD *)(v55 - 12))
      {
        v80 = *(unsigned int *)(v55 - 4);
        if ((_DWORD)v80)
        {
          v81 = 8 * v80;
          v82 = *(uint64_t **)(v54 + 24);
          while ((unint64_t)(*v82 + 1) <= 1)
          {
            ++v82;
            v81 -= 8;
            if (!v81)
              goto LABEL_46;
          }
        }
        else
        {
          v82 = *(uint64_t **)(v54 + 24);
        }
        v95 = (uint64_t *)(v55 + 8 * v80);
        if (v82 != v95)
        {
          v96 = *v82;
LABEL_167:
          if (*(_QWORD *)(v96 + 8))
          {
            v56 = v54 + 48;
LABEL_47:
            if (v53 < 4)
            {
              v15 = *(float *)(*(_QWORD *)v56 + 28);
              v57 = (float *)((char *)v7 + 40 * v53);
              v58 = v57[20];
              v17 = v57 + 20;
              v19 = v58;
LABEL_49:
              if (v19 != v15)
              {
                *v17 = v15;
                goto LABEL_51;
              }
              goto LABEL_54;
            }
LABEL_107:
            __break(1u);
LABEL_108:
            v52 = *(WTF **)v4;
            if (*(_QWORD *)v4)
              goto LABEL_109;
            goto LABEL_44;
          }
          while (++v82 != v95)
          {
            v96 = *v82;
            if ((unint64_t)(*v82 + 1) > 1)
            {
              if (v82 != v95)
                goto LABEL_167;
              break;
            }
          }
        }
      }
LABEL_46:
      v56 = v54 + 40;
      goto LABEL_47;
    }
    v34 = (*(uint64_t (**)(const WebCore::Element *))(*(_QWORD *)a3 + 1312))(a3);
    v35 = *((_QWORD *)a3 + 26);
    v36 = *(_QWORD *)(v35 + 24);
    if (v36 && *(_DWORD *)(v36 - 12))
    {
      v62 = *(unsigned int *)(v36 - 4);
      if ((_DWORD)v62)
      {
        v63 = 8 * v62;
        v64 = *(uint64_t **)(v35 + 24);
        while ((unint64_t)(*v64 + 1) <= 1)
        {
          ++v64;
          v63 -= 8;
          if (!v63)
            goto LABEL_31;
        }
      }
      else
      {
        v64 = *(uint64_t **)(v35 + 24);
      }
      v83 = (uint64_t *)(v36 + 8 * v62);
      if (v64 != v83)
      {
        v84 = *v64;
LABEL_113:
        if (*(_QWORD *)(v84 + 8))
        {
          v37 = v35 + 48;
LABEL_32:
          if (v34 < 4)
          {
            v15 = *(float *)(*(_QWORD *)v37 + 28);
            v38 = (float *)((char *)v7 + 40 * v34);
            v39 = v38[19];
            v17 = v38 + 19;
            v19 = v39;
            goto LABEL_49;
          }
          goto LABEL_107;
        }
        while (++v64 != v83)
        {
          v84 = *v64;
          if ((unint64_t)(*v64 + 1) > 1)
          {
            if (v64 != v83)
              goto LABEL_113;
            break;
          }
        }
      }
    }
LABEL_31:
    v37 = v35 + 40;
    goto LABEL_32;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a4 + 10) <= 0x36Au)
  {
    if (v10 != 604)
    {
      if (v10 != 836)
        goto LABEL_55;
      v11 = (*(uint64_t (**)(const WebCore::Element *))(*(_QWORD *)a3 + 1312))(a3);
      v12 = *((_QWORD *)a3 + 24);
      v13 = *(_QWORD *)(v12 + 24);
      if (v13 && *(_DWORD *)(v13 - 12))
      {
        v71 = *(unsigned int *)(v13 - 4);
        if ((_DWORD)v71)
        {
          v72 = 8 * v71;
          v73 = *(uint64_t **)(v12 + 24);
          while ((unint64_t)(*v73 + 1) <= 1)
          {
            ++v73;
            v72 -= 8;
            if (!v72)
              goto LABEL_12;
          }
        }
        else
        {
          v73 = *(uint64_t **)(v12 + 24);
        }
        v89 = (uint64_t *)(v13 + 8 * v71);
        if (v73 != v89)
        {
          v90 = *v73;
LABEL_140:
          if (*(_QWORD *)(v90 + 8))
          {
            v14 = v12 + 48;
LABEL_13:
            if (v11 < 4)
            {
              v15 = *(float *)(*(_QWORD *)v14 + 28);
              v16 = (float *)((char *)v7 + 40 * v11);
              v18 = v16[17];
              v17 = v16 + 17;
              v19 = v18;
              goto LABEL_49;
            }
            goto LABEL_107;
          }
          while (++v73 != v89)
          {
            v90 = *v73;
            if ((unint64_t)(*v73 + 1) > 1)
            {
              if (v73 != v89)
                goto LABEL_140;
              break;
            }
          }
        }
      }
LABEL_12:
      v14 = v12 + 40;
      goto LABEL_13;
    }
    v40 = (*(uint64_t (**)(const WebCore::Element *))(*(_QWORD *)a3 + 1312))(a3);
    v41 = *((_QWORD *)a3 + 28);
    v42 = *(_QWORD *)(v41 + 24);
    if (v42 && *(_DWORD *)(v42 - 12))
    {
      v65 = *(unsigned int *)(v42 - 4);
      if ((_DWORD)v65)
      {
        v66 = 8 * v65;
        v67 = *(uint64_t **)(v41 + 24);
        while ((unint64_t)(*v67 + 1) <= 1)
        {
          ++v67;
          v66 -= 8;
          if (!v66)
            goto LABEL_35;
        }
      }
      else
      {
        v67 = *(uint64_t **)(v41 + 24);
      }
      v85 = (uint64_t *)(v42 + 8 * v65);
      if (v67 != v85)
      {
        v86 = *v67;
LABEL_122:
        if (*(_QWORD *)(v86 + 8))
        {
          v43 = v41 + 48;
LABEL_36:
          if (v40 < 4)
          {
            v15 = *(float *)(*(_QWORD *)v43 + 28);
            v44 = (float *)((char *)v7 + 40 * v40);
            v45 = v44[21];
            v17 = v44 + 21;
            v19 = v45;
            goto LABEL_49;
          }
          goto LABEL_107;
        }
        while (++v67 != v85)
        {
          v86 = *v67;
          if ((unint64_t)(*v67 + 1) > 1)
          {
            if (v67 != v85)
              goto LABEL_122;
            break;
          }
        }
      }
    }
LABEL_35:
    v43 = v41 + 40;
    goto LABEL_36;
  }
  if (v10 == 875)
  {
    v46 = (*(uint64_t (**)(const WebCore::Element *))(*(_QWORD *)a3 + 1312))(a3);
    v47 = (_QWORD *)*((_QWORD *)a3 + 23);
    v48 = v47[3];
    if (v48 && *(_DWORD *)(v48 - 12))
    {
      v68 = *(unsigned int *)(v48 - 4);
      if ((_DWORD)v68)
      {
        v69 = 8 * v68;
        v70 = (uint64_t *)v47[3];
        while ((unint64_t)(*v70 + 1) <= 1)
        {
          ++v70;
          v69 -= 8;
          if (!v69)
            goto LABEL_39;
        }
      }
      else
      {
        v70 = (uint64_t *)v47[3];
      }
      v87 = (uint64_t *)(v48 + 8 * v68);
      if (v70 != v87)
      {
        v88 = *v70;
LABEL_131:
        if (*(_QWORD *)(v88 + 8))
        {
          v49 = v47 + 6;
          goto LABEL_40;
        }
        while (++v70 != v87)
        {
          v88 = *v70;
          if ((unint64_t)(*v70 + 1) > 1)
          {
            if (v70 != v87)
              goto LABEL_131;
            break;
          }
        }
      }
    }
LABEL_39:
    v49 = v47 + 5;
LABEL_40:
    WebCore::SVGValuePropertyList<WebCore::SVGNumber>::operator WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(*v49, (uint64_t)&__s2);
    if (v46 >= 4)
      goto LABEL_107;
    v50 = (char *)v7 + 40 * v46;
    v4 = v50 + 88;
    v51 = *((unsigned int *)v50 + 25);
    v5 = v99;
    if ((_DWORD)v51 != v99)
      goto LABEL_108;
    v52 = *(WTF **)v4;
    v9 = (uint64_t)__s2;
    if (memcmp(*(const void **)v4, __s2, 4 * v51))
    {
      if (v52)
      {
LABEL_109:
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v52, a2);
        v5 = v99;
      }
LABEL_44:
      *(_QWORD *)v4 = __s2;
      *((_DWORD *)v4 + 2) = v98;
      *((_DWORD *)v4 + 3) = v5;
      goto LABEL_51;
    }
    if (!v9)
      goto LABEL_55;
    __s2 = 0;
    v98 = 0;
    WTF::fastFree((WTF *)v9, a2);
    goto LABEL_54;
  }
  if (v10 != 952)
    goto LABEL_55;
  v26 = (*(uint64_t (**)(const WebCore::Element *))(*(_QWORD *)a3 + 1312))(a3);
  v27 = (_QWORD *)*((_QWORD *)a3 + 22);
  v28 = v27[3];
  if (v28 && *(_DWORD *)(v28 - 12))
  {
    v77 = *(unsigned int *)(v28 - 4);
    if ((_DWORD)v77)
    {
      v78 = 8 * v77;
      v79 = (uint64_t *)v27[3];
      while ((unint64_t)(*v79 + 1) <= 1)
      {
        ++v79;
        v78 -= 8;
        if (!v78)
          goto LABEL_25;
      }
    }
    else
    {
      v79 = (uint64_t *)v27[3];
    }
    v93 = (uint64_t *)(v28 + 8 * v77);
    if (v79 != v93)
    {
      v94 = *v79;
LABEL_158:
      if (*(_QWORD *)(v94 + 8))
      {
        v29 = v27 + 6;
        goto LABEL_26;
      }
      while (++v79 != v93)
      {
        v94 = *v79;
        if ((unint64_t)(*v79 + 1) > 1)
        {
          if (v79 != v93)
            goto LABEL_158;
          break;
        }
      }
    }
  }
LABEL_25:
  v29 = v27 + 5;
LABEL_26:
  v30 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v29 + 32))(*v29);
  if (v26 >= 4)
    goto LABEL_107;
  v31 = (char *)v7 + 40 * v26;
  v33 = v31[64];
  v32 = (unsigned __int8 *)(v31 + 64);
  if (v33 != v30)
  {
    *v32 = v30;
LABEL_51:
    v9 = 1;
    goto LABEL_55;
  }
LABEL_54:
  v9 = 0;
LABEL_55:
  if (*((_DWORD *)a3 + 6) == 2)
  {
    v60 = *((_WORD *)a3 + 15);
    if ((v60 & 0x400) == 0)
    {
      v61 = *((_WORD *)a3 + 14);
      if ((v61 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef(a3, a2);
      }
      else
      {
        if ((v61 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)a3 + 20) + 16))(*((_QWORD *)a3 + 20));
          v60 = *((_WORD *)a3 + 15);
        }
        *((_WORD *)a3 + 15) = v60 | 0x400;
        (*(void (**)(const WebCore::Element *))(*(_QWORD *)a3 + 72))(a3);
      }
    }
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
  return v9;
}

void WebCore::SVGDescElement::~SVGDescElement(WebCore::SVGDescElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGElement::~SVGElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGDescElement::rendererIsNeeded(WebCore::SVGDescElement *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

uint64_t WebCore::SVGDescElement::supportsFocus(WebCore::SVGDescElement *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::SVGDescElement::~SVGDescElement(WebCore::SVGDescElement *this, void *a2)
{
  WebCore::SVGElement::~SVGElement((WebCore::SVGDescElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGElement::~SVGElement((WebCore::SVGDescElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGDocument::~SVGDocument(WebCore::SVGDocument *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::SVGDocument::~SVGDocument(WebCore::SVGDocument *this, void *a2)
{
  WebCore::Document::~Document((WebCore::SVGDocument *)((char *)this - 192), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::SVGDocument *)((char *)this - 192), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::Document::~Document((WebCore::SVGDocument *)((char *)this - 288), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::SVGDocument *)((char *)this - 288), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::Document::~Document((WebCore::SVGDocument *)((char *)this - 504), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::SVGDocument *)((char *)this - 504), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::Document::~Document((WebCore::SVGDocument *)((char *)this - 512), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::SVGDocument *)((char *)this - 512), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::Document::~Document((WebCore::SVGDocument *)((char *)this - 544), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::SVGDocument *)((char *)this - 544), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::Document::~Document((WebCore::SVGDocument *)((char *)this - 552), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::SVGDocument *)((char *)this - 552), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGEllipseElement::~SVGEllipseElement(WebCore::SVGEllipseElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGEllipseElement::~SVGEllipseElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  v3 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  *(_QWORD *)this = off_1E346AC90;
  *((_QWORD *)this + 14) = &unk_1E346B210;
  *((_QWORD *)this + 22) = &unk_1E346B248;
  v7 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement(this, a2);
}

uint64_t WebCore::SVGEllipseElement::isValid(WebCore::SVGEllipseElement *this, void *a2)
{
  return WebCore::SVGTests::isValid((WebCore::SVGEllipseElement *)((char *)this + 184), a2);
}

uint64_t WebCore::SVGEllipseElement::selfHasRelativeLengths(WebCore::SVGEllipseElement *this)
{
  return 1;
}

void `non-virtual thunk to'WebCore::SVGEllipseElement::~SVGEllipseElement(WebCore::SVGEllipseElement *this, void *a2)
{
  WebCore::SVGEllipseElement::~SVGEllipseElement((WebCore::SVGEllipseElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGEllipseElement::~SVGEllipseElement((WebCore::SVGEllipseElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::SVGEllipseElement::~SVGEllipseElement((WebCore::SVGEllipseElement *)((char *)this - 176), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGEllipseElement::~SVGEllipseElement((WebCore::SVGEllipseElement *)((char *)this - 176), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFEBlendElement::~SVGFEBlendElement(WebCore::SVGFEBlendElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::SVGFilterPrimitiveStandardAttributes::childShouldCreateRenderer(WebCore::SVGFilterPrimitiveStandardAttributes *this, const WebCore::Node *a2)
{
  return 0;
}

uint64_t WebCore::SVGFilterPrimitiveStandardAttributes::isFilterEffect(WebCore::SVGFilterPrimitiveStandardAttributes *this)
{
  return 1;
}

_QWORD *WebCore::SVGFEBlendElement::filterEffectInputsNames@<X0>(WebCore::SVGFEBlendElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _QWORD *result;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  v4 = *((_QWORD *)this + 28);
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v19 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v19)
  {
    v20 = 8 * v19;
    v21 = *(uint64_t **)(v4 + 24);
    while ((unint64_t)(*v21 + 1) <= 1)
    {
      ++v21;
      v20 -= 8;
      if (!v20)
        goto LABEL_2;
    }
  }
  else
  {
    v21 = *(uint64_t **)(v4 + 24);
  }
  v25 = (uint64_t *)(v5 + 8 * v19);
  if (v21 == v25)
    goto LABEL_2;
  v26 = *v21;
LABEL_44:
  if (!*(_QWORD *)(v26 + 8))
  {
    while (++v21 != v25)
    {
      v26 = *v21;
      if ((unint64_t)(*v21 + 1) > 1)
      {
        if (v21 != v25)
          goto LABEL_44;
        break;
      }
    }
LABEL_2:
    v6 = v4 + 40;
    goto LABEL_3;
  }
  v6 = v4 + 48;
LABEL_3:
  v7 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 32);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    if ((*((_BYTE *)v7 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v9 = v7;
      v7 = v29;
      v29 = 0;
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *((_QWORD *)this + 29);
  v11 = *(_QWORD *)(v10 + 24);
  if (v11 && *(_DWORD *)(v11 - 12))
  {
    v22 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v22)
    {
      v23 = 8 * v22;
      v24 = *(uint64_t **)(v10 + 24);
      while ((unint64_t)(*v24 + 1) <= 1)
      {
        ++v24;
        v23 -= 8;
        if (!v23)
          goto LABEL_7;
      }
    }
    else
    {
      v24 = *(uint64_t **)(v10 + 24);
    }
    v27 = (uint64_t *)(v11 + 8 * v22);
    if (v24 != v27)
    {
      v28 = *v24;
LABEL_53:
      if (*(_QWORD *)(v28 + 8))
      {
        v12 = v10 + 48;
        goto LABEL_8;
      }
      while (++v24 != v27)
      {
        v28 = *v24;
        if ((unint64_t)(*v24 + 1) > 1)
        {
          if (v24 != v27)
            goto LABEL_53;
          break;
        }
      }
    }
  }
LABEL_7:
  v12 = v10 + 40;
LABEL_8:
  v13 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 32);
  if (v13)
  {
    *(_DWORD *)v13 += 2;
    if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v15 = v13;
      v13 = v29;
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  *(_QWORD *)(a2 + 8) = 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)a2 = result;
  if (v7)
    *(_DWORD *)v7 += 2;
  *result = v7;
  if (v13)
  {
    v18 = *(_DWORD *)v13;
    *(_DWORD *)v13 += 2;
    result[1] = v13;
    *(_DWORD *)(a2 + 12) = 2;
    if (v18)
      *(_DWORD *)v13 = v18;
    else
      result = (_QWORD *)WTF::StringImpl::destroy(v13, v17);
  }
  else
  {
    result[1] = 0;
    *(_DWORD *)(a2 + 12) = 2;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return (_QWORD *)WTF::StringImpl::destroy(v7, v17);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

uint64_t WebCore::SVGFilterPrimitiveStandardAttributes::isIdentity(WebCore::SVGFilterPrimitiveStandardAttributes *this)
{
  return 0;
}

uint64_t WebCore::SVGFilterPrimitiveStandardAttributes::outsets()
{
  return 0;
}

uint64_t WebCore::SVGFilterPrimitiveStandardAttributes::setFilterEffectAttributeFromChild()
{
  return 0;
}

void `non-virtual thunk to'WebCore::SVGFEBlendElement::~SVGFEBlendElement(WebCore::SVGFEBlendElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEBlendElement *)((char *)this - 112), a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEBlendElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::SVGFEColorMatrixElement::~SVGFEColorMatrixElement(WebCore::SVGFEColorMatrixElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

_QWORD *WebCore::SVGFEColorMatrixElement::filterEffectInputsNames@<X0>(WebCore::SVGFEColorMatrixElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *result;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14[5];
  uint64_t *v15[5];

  v3 = *((_QWORD *)this + 28);
  v5 = (uint64_t *)(v3 + 24);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4
    && *(_DWORD *)(v4 - 12)
    && (v13 = *((_QWORD *)this + 28),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v5, v15),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v5, (uint64_t **)v14), v3 = v13, v15[1] != (uint64_t *)v14[1]))
  {
    v6 = v13 + 48;
  }
  else
  {
    v6 = v3 + 40;
  }
  v7 = *(uint64_t **)(*(_QWORD *)v6 + 32);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    v14[0] = (WTF::StringImpl *)v7;
    if ((v7[2] & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v12 = v14[0];
      v7 = v15[0];
      v15[0] = 0;
      v14[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
  }
  *(_QWORD *)(a2 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = result;
  if (v7)
  {
    v10 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    *result = v7;
    *(_DWORD *)(a2 + 12) = 1;
    if (v10)
      *(_DWORD *)v7 = v10;
    else
      return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, v9);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a2 + 12) = 1;
  }
  return result;
}

void `non-virtual thunk to'WebCore::SVGFEColorMatrixElement::~SVGFEColorMatrixElement(WebCore::SVGFEColorMatrixElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEColorMatrixElement *)((char *)this - 112), a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEColorMatrixElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::SVGFEComponentTransferElement::~SVGFEComponentTransferElement(WebCore::SVGFEComponentTransferElement *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

_QWORD *WebCore::SVGFEComponentTransferElement::filterEffectInputsNames@<X0>(WebCore::SVGFEComponentTransferElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *result;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v3 = *((_QWORD *)this + 28);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v12 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = *(uint64_t **)(v3 + 24);
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_2;
      }
    }
    else
    {
      v14 = *(uint64_t **)(v3 + 24);
    }
    v15 = (uint64_t *)(v4 + 8 * v12);
    if (v14 != v15)
    {
      v16 = *v14;
LABEL_23:
      if (*(_QWORD *)(v16 + 8))
      {
        v5 = v3 + 48;
        goto LABEL_3;
      }
      while (++v14 != v15)
      {
        v16 = *v14;
        if ((unint64_t)(*v14 + 1) > 1)
        {
          if (v14 != v15)
            goto LABEL_23;
          break;
        }
      }
    }
  }
LABEL_2:
  v5 = v3 + 40;
LABEL_3:
  v6 = *(WTF::StringImpl **)(*(_QWORD *)v5 + 32);
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    if ((*((_BYTE *)v6 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v8 = v6;
      v6 = v17;
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  *(_QWORD *)(a2 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = result;
  if (v6)
  {
    v11 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *result = v6;
    *(_DWORD *)(a2 + 12) = 1;
    if (v11)
      *(_DWORD *)v6 = v11;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v6, v10);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a2 + 12) = 1;
  }
  return result;
}

uint64_t WebCore::SVGFilterPrimitiveStandardAttributes::setFilterEffectAttribute()
{
  return 0;
}

void `non-virtual thunk to'WebCore::SVGFEComponentTransferElement::~SVGFEComponentTransferElement(WebCore::SVGFEComponentTransferElement *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEComponentTransferElement *)((char *)this - 112), a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEComponentTransferElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

BOOL WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>(WTF::Thread *a1)
{
  WebCore::QualifiedName::QualifiedNameImpl *v1;
  int v2;
  WebCore::QualifiedName::QualifiedNameImpl *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  v1 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::nullName;
  if (!WebCore::nullName)
  {
    v3 = *(WebCore::QualifiedName::QualifiedNameImpl **)a1;
    return v3 == v1;
  }
  v2 = (*(_DWORD *)WebCore::nullName)++;
  v3 = *(WebCore::QualifiedName::QualifiedNameImpl **)a1;
  if (v2)
  {
    *(_DWORD *)v1 = v2;
    return v3 == v1;
  }
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5)
  {
    v5 = WTF::Thread::initializeCurrentTLS(a1);
    v6 = *(_QWORD *)(v5 + 96);
    if (v6)
      goto LABEL_7;
LABEL_32:
    v6 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(v6 + 8) = 1;
    v14 = (unsigned int *)(v6 + 8);
    *(_QWORD *)v6 = off_1E31F4A70;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v15 = 0;
    *(_QWORD *)(v6 + 16) = v15;
    *(_QWORD *)v6 = off_1E3407108;
    *(_BYTE *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    v16 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v16 + 28) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)v16 = 0;
    *(_WORD *)(v16 + 24) = 0;
    if (WTF::isUIThread((WTF *)v16))
    {
      {
        WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
        qword_1ECE90CE8 = 0;
      }
      WebCore::ThreadTimers::setSharedTimer((uint64_t **)v16, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
    }
    *(_QWORD *)(v6 + 48) = v16;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_BYTE *)(v6 + 88) = 0;
    if (pthread_main_np())
    {
      WebCore::sharedMainThreadStaticData = v6;
      do
        v17 = __ldaxr(v14);
      while (__stlxr(v17 + 1, v14));
    }
    v18 = *(unsigned int **)(v5 + 96);
    *(_QWORD *)(v5 + 96) = v6;
    if (v18)
    {
      v19 = v18 + 2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v18 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
      }
    }
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(v5 + 96);
  if (!v6)
    goto LABEL_32;
LABEL_7:
  v7 = *(uint64_t **)(v6 + 56);
  if (!v7)
  {
    WebCore::ThreadGlobalData::initializeQualifiedNameCache((WTF **)v6);
    v7 = *(uint64_t **)(v6 + 56);
  }
  WebCore::QualifiedNameCache::remove(v7, v1);
  v9 = (WTF::StringImpl *)*((_QWORD *)v1 + 6);
  *((_QWORD *)v1 + 6) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)v1 + 5);
  *((_QWORD *)v1 + 5) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)v1 + 4);
  *((_QWORD *)v1 + 4) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)v1 + 3);
  *((_QWORD *)v1 + 3) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)v1 + 2);
  *((_QWORD *)v1 + 2) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v8);
    else
      *(_DWORD *)v13 -= 2;
  }
  WTF::fastFree(v1, v8);
  return v3 == v1;
}

uint64_t std::optional<WTF::String>::operator=[abi:sn180100](uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  if (*(unsigned __int8 *)(a1 + 8) == a2[8])
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v3 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v4 = *(WTF::StringImpl **)a1;
      *(_QWORD *)a1 = v3;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v4 -= 2;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v6;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

BOOL WebCore::SVGAnimatedProperty::isAnimating(WebCore::SVGAnimatedProperty *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6[5];
  uint64_t *v7[5];

  v3 = *((_QWORD *)this + 3);
  v1 = (uint64_t *)((char *)this + 24);
  v2 = v3;
  if (!v3)
    return 0;
  if (!*(_DWORD *)(v2 - 12))
    return 0;
  v5 = v1;
  WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v1, v7);
  WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v5, v6);
  return v7[1] != v6[1];
}

void WebCore::SVGElementRareData::~SVGElementRareData(WebCore::SVGElementRareData *this, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  WebCore::RenderStyle *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;

  v3 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    v4 = (_DWORD *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v4)
    {
      if (v4[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      else
        --v4[2];
    }
    v5 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v5)
    {
      if (v5[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      else
        --v5[2];
    }
    v6 = *(_DWORD **)v3;
    *(_QWORD *)v3 = 0;
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
    WTF::fastFree(v3, a2);
  }
  v7 = (WebCore::RenderStyle *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
  {
    WebCore::RenderStyle::~RenderStyle(v7, a2);
    if (*(_DWORD *)v8)
    {
      *((_OWORD *)v8 + 2) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *(_OWORD *)v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v8, a2);
    }
  }
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v18 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v18)
      {
        v19 = 16 * v18;
        v20 = (_DWORD **)(*(_QWORD *)(v9 + 16) + 8);
        do
        {
          v21 = *v20;
          *v20 = 0;
          if (v21)
          {
            if (*v21 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, (WTF::StringImpl *)a2);
            else
              *v21 -= 2;
          }
          v20 += 2;
          v19 -= 16;
        }
        while (v19);
      }
      v22 = *(WTF **)(v9 + 16);
      if ((WTF *)(v9 + 32) != v22 && v22 != 0)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        WTF::fastFree(v22, a2);
      }
      v24 = *(_QWORD *)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      WTF::fastFree((WTF *)v9, a2);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v32 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v32)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v32));
      v33 = *(WTF **)(v10 + 16);
      if (v33)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        WTF::fastFree(v33, a2);
      }
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 5, a2);
  v14 = *((_QWORD *)this + 3);
  if (v14)
  {
    v25 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v25)
    {
      for (i = 0; i != v25; ++i)
      {
        v27 = *(unsigned int **)(v14 + 8 * i);
        if (v27 != (unsigned int *)-1)
        {
          *(_QWORD *)(v14 + 8 * i) = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v27);
              v30 = v25;
              v31 = i;
              WTF::fastFree((WTF *)v27, v13);
              i = v31;
              v25 = v30;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v14 - 16), v13);
  }
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v15));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v15);
      v34 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v34)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v34));
      v35 = *(WTF **)(v15 + 16);
      if (v35)
      {
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        WTF::fastFree(v35, v13);
      }
      WTF::fastFree((WTF *)v15, v13);
    }
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this, v13);
}

unsigned int *WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::SVGResourceElementClient>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  unsigned int *result;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int **v27;
  unsigned int v29;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  WTF *v36;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v21 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_20:
      v22 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_21:
      v23 = v22;
LABEL_22:
      *(_DWORD *)(a1 + 12) = 2 * v23;
      goto LABEL_2;
    }
    v24 = *(unsigned int *)(v21 - 4);
    if (!(_DWORD)v24)
      goto LABEL_36;
    v25 = 0;
    v26 = v24 - 1;
    do
    {
      v27 = (unsigned int **)(v21 + 8 * v26);
      if ((unint64_t)*v27 + 1 >= 2 && !*((_QWORD *)*v27 + 1))
      {
        v35 = v25;
        v34 = v26;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v27, a2);
        v26 = v34;
        v25 = v35 + 1;
      }
    }
    while ((unint64_t)v26--);
    v21 = *(_QWORD *)a1;
    if (v25)
    {
      v31 = v25;
      *(_DWORD *)(v21 - 16) += v25;
      v32 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v33 = *(_DWORD *)(v32 - 12);
      else
        v33 = 0;
      *(_DWORD *)(v32 - 12) = v33 - v31;
      v21 = *(_QWORD *)a1;
    }
    if (!v21)
      goto LABEL_20;
    v29 = *(_DWORD *)(v21 - 4);
    if (v29 < 9 || 6 * *(_DWORD *)(v21 - 12) >= v29)
    {
LABEL_36:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v21 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v21)
      {
        v22 = 0;
        goto LABEL_21;
      }
    }
    v22 = *(_DWORD *)(v21 - 12);
    v23 = 0x7FFFFFFF;
    if (v22 >= 0x7FFFFFFF)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_2:
  v8 = a2[1];
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a2;
    v10 = (unsigned int *)a2[1];
    a2[1] = v8;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v9);
      }
      v8 = a2[1];
    }
  }
  do
    v13 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v13 + 1, (unsigned int *)v8));
  do
    v14 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v14 + 1, (unsigned int *)v8));
  v36 = (WTF *)v8;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v36, a3);
  result = (unsigned int *)v36;
  v36 = 0;
  if (result)
  {
    do
    {
      v19 = __ldaxr(result);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, result));
    if (!v20)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v15);
    }
  }
  if (v8)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v8);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v8));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v8);
      return (unsigned int *)WTF::fastFree((WTF *)v8, v15);
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGResourceElementClient>(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  WTF *v4;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v3;
  if (v3 > v2)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_6:
      v7 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_7:
      v8 = v7;
LABEL_8:
      *(_DWORD *)(a1 + 12) = 2 * v8;
      goto LABEL_2;
    }
    v9 = *(unsigned int *)(v6 - 4);
    if (!(_DWORD)v9)
      goto LABEL_22;
    v10 = 0;
    v11 = v9 - 1;
    do
    {
      v12 = v6 + 8 * v11;
      if ((unint64_t)(*(_QWORD *)v12 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v12 + 8))
      {
        v23 = a2;
        v25 = a1;
        v20 = v6;
        v21 = v10;
        v19 = v11;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket((unsigned int **)(v6 + 8 * v11), a2);
        v11 = v19;
        v6 = v20;
        a2 = v23;
        a1 = v25;
        v10 = v21 + 1;
      }
    }
    while ((unint64_t)v11--);
    v6 = *(_QWORD *)a1;
    if (v10)
    {
      v16 = v10;
      *(_DWORD *)(v6 - 16) += v10;
      v17 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v18 = *(_DWORD *)(v17 - 12);
      else
        v18 = 0;
      *(_DWORD *)(v17 - 12) = v18 - v16;
      v6 = *(_QWORD *)a1;
    }
    if (!v6)
      goto LABEL_6;
    v14 = *(_DWORD *)(v6 - 4);
    if (v14 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v14)
    {
LABEL_22:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      v22 = a2;
      v24 = a1;
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      a2 = v22;
      a1 = v24;
      v6 = *(_QWORD *)v24;
      *(_DWORD *)(v24 + 8) = 0;
      if (!v6)
      {
        v7 = 0;
        goto LABEL_7;
      }
    }
    v7 = *(_DWORD *)(v6 - 12);
    v8 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_2:
  v4 = (WTF *)a2[1];
  if (v4 && *((_QWORD *)v4 + 1))
    return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)a1, v4);
  else
    return 0;
}

uint64_t *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(WebCore::SVGPropertyAnimatorFactory *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  _OWORD *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  _QWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  uint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  uint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  uint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  uint64_t v253;
  _QWORD *v254;
  _QWORD *v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  uint64_t v262;
  _QWORD *v263;
  _QWORD *v264;
  uint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  uint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  _QWORD *v273;
  uint64_t v274;
  _QWORD *v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  _QWORD *v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  _QWORD *v285;
  uint64_t v286;
  _QWORD *v287;
  _QWORD *v288;
  uint64_t v289;
  _QWORD *v290;
  _QWORD *v291;
  uint64_t v292;
  _QWORD *v293;
  _QWORD *v294;
  uint64_t v295;
  _QWORD *v296;
  _QWORD *v297;
  uint64_t v298;
  _QWORD *v299;
  _QWORD *v300;
  uint64_t v301;
  _QWORD *v302;
  _QWORD *v303;
  uint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  uint64_t v307;
  _QWORD *v308;
  _QWORD *v309;
  uint64_t v310;
  _QWORD *v311;
  _QWORD *v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  _QWORD *v317;
  _QWORD *v318;
  uint64_t v319;
  _QWORD *v320;
  _QWORD *v321;
  _OWORD *v322;
  uint64_t v323[4];

  if ((byte_1ECE84F58 & 1) == 0)
  {
    v2 = WebCore::SVGNames::colorAttr;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E34595A8;
    v3[1] = WebCore::SVGValueProperty<WebCore::Color>::create;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E34595D0;
    v4[1] = WebCore::SVGPropertyAnimatorFactory::createColorAnimator;
    v319 = v2;
    v320 = v3;
    v321 = v4;
    v5 = WebCore::SVGNames::fillAttr;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E34595A8;
    v6[1] = WebCore::SVGValueProperty<WebCore::Color>::create;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E34595D0;
    v7[1] = WebCore::SVGPropertyAnimatorFactory::createColorAnimator;
    v316 = v5;
    v317 = v6;
    v318 = v7;
    v8 = WebCore::SVGNames::flood_colorAttr;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E34595A8;
    v9[1] = WebCore::SVGValueProperty<WebCore::Color>::create;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E34595D0;
    v10[1] = WebCore::SVGPropertyAnimatorFactory::createColorAnimator;
    v313 = v8;
    v314 = v9;
    v315 = v10;
    v11 = WebCore::SVGNames::lighting_colorAttr;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E34595A8;
    v12[1] = WebCore::SVGValueProperty<WebCore::Color>::create;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E34595D0;
    v13[1] = WebCore::SVGPropertyAnimatorFactory::createColorAnimator;
    v310 = v11;
    v311 = v12;
    v312 = v13;
    v14 = WebCore::SVGNames::stop_colorAttr;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E34595A8;
    v15[1] = WebCore::SVGValueProperty<WebCore::Color>::create;
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E34595D0;
    v16[1] = WebCore::SVGPropertyAnimatorFactory::createColorAnimator;
    v307 = v14;
    v308 = v15;
    v309 = v16;
    v17 = WebCore::SVGNames::strokeAttr;
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = off_1E34595A8;
    v18[1] = WebCore::SVGValueProperty<WebCore::Color>::create;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E34595D0;
    v19[1] = WebCore::SVGPropertyAnimatorFactory::createColorAnimator;
    v304 = v17;
    v305 = v18;
    v306 = v19;
    v20 = WebCore::SVGNames::font_sizeAttr;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E3459730;
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v22 = off_1E3459758;
    v22[1] = WebCore::SVGPropertyAnimatorFactory::createLengthAnimator;
    v301 = v20;
    v302 = v21;
    v303 = v22;
    v23 = WebCore::SVGNames::kerningAttr;
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v24 = off_1E3459780;
    v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v25 = off_1E3459758;
    v25[1] = WebCore::SVGPropertyAnimatorFactory::createLengthAnimator;
    v298 = v23;
    v299 = v24;
    v300 = v25;
    v26 = WebCore::SVGNames::letter_spacingAttr;
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v27 = off_1E34597A8;
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v28 = off_1E3459758;
    v28[1] = WebCore::SVGPropertyAnimatorFactory::createLengthAnimator;
    v295 = v26;
    v296 = v27;
    v297 = v28;
    v29 = WebCore::SVGNames::stroke_dashoffsetAttr;
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v30 = off_1E34597D0;
    v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v31 = off_1E3459758;
    v31[1] = WebCore::SVGPropertyAnimatorFactory::createLengthAnimator;
    v292 = v29;
    v293 = v30;
    v294 = v31;
    v32 = WebCore::SVGNames::stroke_widthAttr;
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v33 = off_1E34597F8;
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v34 = off_1E3459758;
    v34[1] = WebCore::SVGPropertyAnimatorFactory::createLengthAnimator;
    v289 = v32;
    v290 = v33;
    v291 = v34;
    v35 = WebCore::SVGNames::word_spacingAttr;
    v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v36 = off_1E3459820;
    v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v37 = off_1E3459758;
    v37[1] = WebCore::SVGPropertyAnimatorFactory::createLengthAnimator;
    v286 = v35;
    v287 = v36;
    v288 = v37;
    v38 = WebCore::SVGNames::stroke_dasharrayAttr;
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v39 = off_1E3459980;
    v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v40 = off_1E34599A8;
    v40[1] = WebCore::SVGPropertyAnimatorFactory::createLengthListAnimator;
    v283 = v38;
    v284 = v39;
    v285 = v40;
    v41 = WebCore::SVGNames::fill_opacityAttr;
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v42 = off_1E3459A70;
    v42[1] = WebCore::SVGValueProperty<float>::create;
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v43 = off_1E3459A98;
    v43[1] = WebCore::SVGPropertyAnimatorFactory::createNumberAnimator;
    v280 = v41;
    v281 = v42;
    v282 = v43;
    v44 = WebCore::SVGNames::flood_opacityAttr;
    v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v45 = off_1E3459A70;
    v45[1] = WebCore::SVGValueProperty<float>::create;
    v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v46 = off_1E3459A98;
    v46[1] = WebCore::SVGPropertyAnimatorFactory::createNumberAnimator;
    v277 = v44;
    v278 = v45;
    v279 = v46;
    v47 = WebCore::SVGNames::opacityAttr;
    v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v48 = off_1E3459A70;
    v48[1] = WebCore::SVGValueProperty<float>::create;
    v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v49 = off_1E3459A98;
    v49[1] = WebCore::SVGPropertyAnimatorFactory::createNumberAnimator;
    v274 = v47;
    v275 = v48;
    v276 = v49;
    v50 = WebCore::SVGNames::stop_opacityAttr;
    v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v51 = off_1E3459A70;
    v51[1] = WebCore::SVGValueProperty<float>::create;
    v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v52 = off_1E3459A98;
    v52[1] = WebCore::SVGPropertyAnimatorFactory::createNumberAnimator;
    v271 = v50;
    v272 = v51;
    v273 = v52;
    v53 = WebCore::SVGNames::stroke_miterlimitAttr;
    v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v54 = off_1E3459A70;
    v54[1] = WebCore::SVGValueProperty<float>::create;
    v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v55 = off_1E3459A98;
    v55[1] = WebCore::SVGPropertyAnimatorFactory::createNumberAnimator;
    v268 = v53;
    v269 = v54;
    v270 = v55;
    v56 = WebCore::SVGNames::stroke_opacityAttr;
    v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v57 = off_1E3459A70;
    v57[1] = WebCore::SVGValueProperty<float>::create;
    v58 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v58 = off_1E3459A98;
    v58[1] = WebCore::SVGPropertyAnimatorFactory::createNumberAnimator;
    v265 = v56;
    v266 = v57;
    v267 = v58;
    v59 = WebCore::SVGNames::alignment_baselineAttr;
    v60 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v60 = off_1E3459BC8;
    v60[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v61 = off_1E3459BF0;
    v61[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v262 = v59;
    v263 = v60;
    v264 = v61;
    v62 = WebCore::SVGNames::baseline_shiftAttr;
    v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v63 = off_1E3459BC8;
    v63[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v64 = off_1E3459BF0;
    v64[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v259 = v62;
    v260 = v63;
    v261 = v64;
    v65 = WebCore::SVGNames::buffered_renderingAttr;
    v66 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v66 = off_1E3459BC8;
    v66[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v67 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v67 = off_1E3459BF0;
    v67[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v256 = v65;
    v257 = v66;
    v258 = v67;
    v68 = WebCore::SVGNames::clip_pathAttr;
    v69 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v69 = off_1E3459BC8;
    v69[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v70 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v70 = off_1E3459BF0;
    v70[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v253 = v68;
    v254 = v69;
    v255 = v70;
    v71 = WebCore::SVGNames::clip_ruleAttr;
    v72 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v72 = off_1E3459BC8;
    v72[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v73 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v73 = off_1E3459BF0;
    v73[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v250 = v71;
    v251 = v72;
    v252 = v73;
    v74 = WebCore::SVGNames::color_interpolationAttr;
    v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v75 = off_1E3459BC8;
    v75[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v76 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v76 = off_1E3459BF0;
    v76[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v247 = v74;
    v248 = v75;
    v249 = v76;
    v77 = WebCore::SVGNames::color_interpolation_filtersAttr;
    v78 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v78 = off_1E3459BC8;
    v78[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v79 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v79 = off_1E3459BF0;
    v79[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v244 = v77;
    v245 = v78;
    v246 = v79;
    v80 = WebCore::SVGNames::cursorAttr;
    v81 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v81 = off_1E3459BC8;
    v81[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v82 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v82 = off_1E3459BF0;
    v82[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v241 = v80;
    v242 = v81;
    v243 = v82;
    v83 = WebCore::SVGNames::displayAttr;
    v84 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v84 = off_1E3459BC8;
    v84[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v85 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v85 = off_1E3459BF0;
    v85[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v238 = v83;
    v239 = v84;
    v240 = v85;
    v86 = WebCore::SVGNames::dominant_baselineAttr;
    v87 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v87 = off_1E3459BC8;
    v87[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v88 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v88 = off_1E3459BF0;
    v88[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v235 = v86;
    v236 = v87;
    v237 = v88;
    v89 = WebCore::SVGNames::fill_ruleAttr;
    v90 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v90 = off_1E3459BC8;
    v90[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v91 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v91 = off_1E3459BF0;
    v91[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v232 = v89;
    v233 = v90;
    v234 = v91;
    v92 = WebCore::SVGNames::filterAttr;
    v93 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v93 = off_1E3459BC8;
    v93[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v94 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v94 = off_1E3459BF0;
    v94[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v229 = v92;
    v230 = v93;
    v231 = v94;
    v95 = WebCore::SVGNames::font_familyAttr;
    v96 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v96 = off_1E3459BC8;
    v96[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v97 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v97 = off_1E3459BF0;
    v97[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v226 = v95;
    v227 = v96;
    v228 = v97;
    v98 = WebCore::SVGNames::font_stretchAttr;
    v99 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v99 = off_1E3459BC8;
    v99[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v100 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v100 = off_1E3459BF0;
    v100[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v223 = v98;
    v224 = v99;
    v225 = v100;
    v101 = WebCore::SVGNames::font_styleAttr;
    v102 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v102 = off_1E3459BC8;
    v102[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v103 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v103 = off_1E3459BF0;
    v103[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v220 = v101;
    v221 = v102;
    v222 = v103;
    v104 = WebCore::SVGNames::font_variantAttr;
    v105 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v105 = off_1E3459BC8;
    v105[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v106 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v106 = off_1E3459BF0;
    v106[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v217 = v104;
    v218 = v105;
    v219 = v106;
    v107 = WebCore::SVGNames::font_weightAttr;
    v108 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v108 = off_1E3459BC8;
    v108[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v109 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v109 = off_1E3459BF0;
    v109[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v214 = v107;
    v215 = v108;
    v216 = v109;
    v110 = WebCore::SVGNames::image_renderingAttr;
    v111 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v111 = off_1E3459BC8;
    v111[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v112 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v112 = off_1E3459BF0;
    v112[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v211 = v110;
    v212 = v111;
    v213 = v112;
    v113 = WebCore::SVGNames::marker_endAttr;
    v114 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v114 = off_1E3459BC8;
    v114[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v115 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v115 = off_1E3459BF0;
    v115[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v208 = v113;
    v209 = v114;
    v210 = v115;
    v116 = WebCore::SVGNames::marker_midAttr;
    v117 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v117 = off_1E3459BC8;
    v117[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v118 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v118 = off_1E3459BF0;
    v118[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v205 = v116;
    v206 = v117;
    v207 = v118;
    v119 = WebCore::SVGNames::marker_startAttr;
    v120 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v120 = off_1E3459BC8;
    v120[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v121 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v121 = off_1E3459BF0;
    v121[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v202 = v119;
    v203 = v120;
    v204 = v121;
    v122 = WebCore::SVGNames::maskAttr;
    v123 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v123 = off_1E3459BC8;
    v123[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v124 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v124 = off_1E3459BF0;
    v124[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v199 = v122;
    v200 = v123;
    v201 = v124;
    v125 = WebCore::SVGNames::mask_typeAttr;
    v126 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v126 = off_1E3459BC8;
    v126[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v127 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v127 = off_1E3459BF0;
    v127[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v196 = v125;
    v197 = v126;
    v198 = v127;
    v128 = WebCore::SVGNames::overflowAttr;
    v129 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v129 = off_1E3459BC8;
    v129[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v130 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v130 = off_1E3459BF0;
    v130[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v193 = v128;
    v194 = v129;
    v195 = v130;
    v131 = WebCore::SVGNames::paint_orderAttr;
    v132 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v132 = off_1E3459BC8;
    v132[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v133 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v133 = off_1E3459BF0;
    v133[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v190 = v131;
    v191 = v132;
    v192 = v133;
    v134 = WebCore::SVGNames::pointer_eventsAttr;
    v135 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v135 = off_1E3459BC8;
    v135[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v136 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v136 = off_1E3459BF0;
    v136[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v187 = v134;
    v188 = v135;
    v189 = v136;
    v137 = WebCore::SVGNames::shape_renderingAttr;
    v138 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v138 = off_1E3459BC8;
    v138[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v139 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v139 = off_1E3459BF0;
    v139[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v184 = v137;
    v185 = v138;
    v186 = v139;
    v140 = WebCore::SVGNames::stroke_linecapAttr;
    v141 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v141 = off_1E3459BC8;
    v141[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v142 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v142 = off_1E3459BF0;
    v142[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v181 = v140;
    v182 = v141;
    v183 = v142;
    v143 = WebCore::SVGNames::stroke_linejoinAttr;
    v144 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v144 = off_1E3459BC8;
    v144[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v145 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v145 = off_1E3459BF0;
    v145[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v178 = v143;
    v179 = v144;
    v180 = v145;
    v146 = WebCore::SVGNames::text_anchorAttr;
    v147 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v147 = off_1E3459BC8;
    v147[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v148 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v148 = off_1E3459BF0;
    v148[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v175 = v146;
    v176 = v147;
    v177 = v148;
    v149 = WebCore::SVGNames::text_decorationAttr;
    v150 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v150 = off_1E3459BC8;
    v150[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v151 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v151 = off_1E3459BF0;
    v151[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v172 = v149;
    v173 = v150;
    v174 = v151;
    v152 = WebCore::SVGNames::text_renderingAttr;
    v153 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v153 = off_1E3459BC8;
    v153[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v154 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v154 = off_1E3459BF0;
    v154[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v169 = v152;
    v170 = v153;
    v171 = v154;
    v155 = WebCore::SVGNames::vector_effectAttr;
    v156 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v156 = off_1E3459BC8;
    v156[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v157 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v157 = off_1E3459BF0;
    v157[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v166 = v155;
    v167 = v156;
    v168 = v157;
    v158 = WebCore::SVGNames::visibilityAttr;
    v159 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v159 = off_1E3459BC8;
    v159[1] = WebCore::SVGValueProperty<WTF::String>::create;
    v160 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v160 = off_1E3459BF0;
    v160[1] = WebCore::SVGPropertyAnimatorFactory::createStringAnimator;
    v163 = v158;
    v164 = v159;
    v165 = v160;
    v161 = (_OWORD *)WTF::fastMalloc((WTF *)0xC10);
    bzero(v161 + 1, 0xC00uLL);
    v322 = v161 + 1;
    *v161 = xmmword_1969FE660;
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v319, (uint64_t *)&v320);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v316, (uint64_t *)&v317);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v313, (uint64_t *)&v314);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v310, (uint64_t *)&v311);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v307, (uint64_t *)&v308);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v304, (uint64_t *)&v305);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v301, (uint64_t *)&v302);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v298, (uint64_t *)&v299);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v295, (uint64_t *)&v296);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v292, (uint64_t *)&v293);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v289, (uint64_t *)&v290);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v286, (uint64_t *)&v287);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v283, (uint64_t *)&v284);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v280, (uint64_t *)&v281);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v277, (uint64_t *)&v278);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v274, (uint64_t *)&v275);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v271, (uint64_t *)&v272);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v268, (uint64_t *)&v269);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v265, (uint64_t *)&v266);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v262, (uint64_t *)&v263);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v259, (uint64_t *)&v260);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v256, (uint64_t *)&v257);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v253, (uint64_t *)&v254);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v250, (uint64_t *)&v251);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v247, (uint64_t *)&v248);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v244, (uint64_t *)&v245);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v241, (uint64_t *)&v242);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v238, (uint64_t *)&v239);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v235, (uint64_t *)&v236);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v232, (uint64_t *)&v233);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v229, (uint64_t *)&v230);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v226, (uint64_t *)&v227);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v223, (uint64_t *)&v224);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v220, (uint64_t *)&v221);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v217, (uint64_t *)&v218);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v214, (uint64_t *)&v215);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v211, (uint64_t *)&v212);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v208, (uint64_t *)&v209);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v205, (uint64_t *)&v206);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v202, (uint64_t *)&v203);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v199, (uint64_t *)&v200);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v196, (uint64_t *)&v197);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v193, (uint64_t *)&v194);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v190, (uint64_t *)&v191);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v187, (uint64_t *)&v188);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v184, (uint64_t *)&v185);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v181, (uint64_t *)&v182);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v178, (uint64_t *)&v179);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v175, (uint64_t *)&v176);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v172, (uint64_t *)&v173);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v169, (uint64_t *)&v170);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v166, (uint64_t *)&v167);
    WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(v323, (uint64_t *)&v322, &v163, (uint64_t *)&v164);
    v162 = (uint64_t)v322;
    v322 = 0;
    _MergedGlobals_270 = v162;
    if (v165)
      (*(void (**)(_QWORD *))(*v165 + 8))(v165);
    if (v164)
      (*(void (**)(_QWORD *))(*v164 + 8))(v164);
    if (v168)
      (*(void (**)(_QWORD *))(*v168 + 8))(v168);
    if (v167)
      (*(void (**)(_QWORD *))(*v167 + 8))(v167);
    if (v171)
      (*(void (**)(_QWORD *))(*v171 + 8))(v171);
    if (v170)
      (*(void (**)(_QWORD *))(*v170 + 8))(v170);
    if (v174)
      (*(void (**)(_QWORD *))(*v174 + 8))(v174);
    if (v173)
      (*(void (**)(_QWORD *))(*v173 + 8))(v173);
    if (v177)
      (*(void (**)(_QWORD *))(*v177 + 8))(v177);
    if (v176)
      (*(void (**)(_QWORD *))(*v176 + 8))(v176);
    if (v180)
      (*(void (**)(_QWORD *))(*v180 + 8))(v180);
    if (v179)
      (*(void (**)(_QWORD *))(*v179 + 8))(v179);
    if (v183)
      (*(void (**)(_QWORD *))(*v183 + 8))(v183);
    if (v182)
      (*(void (**)(_QWORD *))(*v182 + 8))(v182);
    if (v186)
      (*(void (**)(_QWORD *))(*v186 + 8))(v186);
    if (v185)
      (*(void (**)(_QWORD *))(*v185 + 8))(v185);
    if (v189)
      (*(void (**)(_QWORD *))(*v189 + 8))(v189);
    if (v188)
      (*(void (**)(_QWORD *))(*v188 + 8))(v188);
    if (v192)
      (*(void (**)(_QWORD *))(*v192 + 8))(v192);
    if (v191)
      (*(void (**)(_QWORD *))(*v191 + 8))(v191);
    if (v195)
      (*(void (**)(_QWORD *))(*v195 + 8))(v195);
    if (v194)
      (*(void (**)(_QWORD *))(*v194 + 8))(v194);
    if (v198)
      (*(void (**)(_QWORD *))(*v198 + 8))(v198);
    if (v197)
      (*(void (**)(_QWORD *))(*v197 + 8))(v197);
    if (v201)
      (*(void (**)(_QWORD *))(*v201 + 8))(v201);
    if (v200)
      (*(void (**)(_QWORD *))(*v200 + 8))(v200);
    if (v204)
      (*(void (**)(_QWORD *))(*v204 + 8))(v204);
    if (v203)
      (*(void (**)(_QWORD *))(*v203 + 8))(v203);
    if (v207)
      (*(void (**)(_QWORD *))(*v207 + 8))(v207);
    if (v206)
      (*(void (**)(_QWORD *))(*v206 + 8))(v206);
    if (v210)
      (*(void (**)(_QWORD *))(*v210 + 8))(v210);
    if (v209)
      (*(void (**)(_QWORD *))(*v209 + 8))(v209);
    if (v213)
      (*(void (**)(_QWORD *))(*v213 + 8))(v213);
    if (v212)
      (*(void (**)(_QWORD *))(*v212 + 8))(v212);
    if (v216)
      (*(void (**)(_QWORD *))(*v216 + 8))(v216);
    if (v215)
      (*(void (**)(_QWORD *))(*v215 + 8))(v215);
    if (v219)
      (*(void (**)(_QWORD *))(*v219 + 8))(v219);
    if (v218)
      (*(void (**)(_QWORD *))(*v218 + 8))(v218);
    if (v222)
      (*(void (**)(_QWORD *))(*v222 + 8))(v222);
    if (v221)
      (*(void (**)(_QWORD *))(*v221 + 8))(v221);
    if (v225)
      (*(void (**)(_QWORD *))(*v225 + 8))(v225);
    if (v224)
      (*(void (**)(_QWORD *))(*v224 + 8))(v224);
    if (v228)
      (*(void (**)(_QWORD *))(*v228 + 8))(v228);
    if (v227)
      (*(void (**)(_QWORD *))(*v227 + 8))(v227);
    if (v231)
      (*(void (**)(_QWORD *))(*v231 + 8))(v231);
    if (v230)
      (*(void (**)(_QWORD *))(*v230 + 8))(v230);
    if (v234)
      (*(void (**)(_QWORD *))(*v234 + 8))(v234);
    if (v233)
      (*(void (**)(_QWORD *))(*v233 + 8))(v233);
    if (v237)
      (*(void (**)(_QWORD *))(*v237 + 8))(v237);
    if (v236)
      (*(void (**)(_QWORD *))(*v236 + 8))(v236);
    if (v240)
      (*(void (**)(_QWORD *))(*v240 + 8))(v240);
    if (v239)
      (*(void (**)(_QWORD *))(*v239 + 8))(v239);
    if (v243)
      (*(void (**)(_QWORD *))(*v243 + 8))(v243);
    if (v242)
      (*(void (**)(_QWORD *))(*v242 + 8))(v242);
    if (v246)
      (*(void (**)(_QWORD *))(*v246 + 8))(v246);
    if (v245)
      (*(void (**)(_QWORD *))(*v245 + 8))(v245);
    if (v249)
      (*(void (**)(_QWORD *))(*v249 + 8))(v249);
    if (v248)
      (*(void (**)(_QWORD *))(*v248 + 8))(v248);
    if (v252)
      (*(void (**)(_QWORD *))(*v252 + 8))(v252);
    if (v251)
      (*(void (**)(_QWORD *))(*v251 + 8))(v251);
    if (v255)
      (*(void (**)(_QWORD *))(*v255 + 8))(v255);
    if (v254)
      (*(void (**)(_QWORD *))(*v254 + 8))(v254);
    if (v258)
      (*(void (**)(_QWORD *))(*v258 + 8))(v258);
    if (v257)
      (*(void (**)(_QWORD *))(*v257 + 8))(v257);
    if (v261)
      (*(void (**)(_QWORD *))(*v261 + 8))(v261);
    if (v260)
      (*(void (**)(_QWORD *))(*v260 + 8))(v260);
    if (v264)
      (*(void (**)(_QWORD *))(*v264 + 8))(v264);
    if (v263)
      (*(void (**)(_QWORD *))(*v263 + 8))(v263);
    if (v267)
      (*(void (**)(_QWORD *))(*v267 + 8))(v267);
    if (v266)
      (*(void (**)(_QWORD *))(*v266 + 8))(v266);
    if (v270)
      (*(void (**)(_QWORD *))(*v270 + 8))(v270);
    if (v269)
      (*(void (**)(_QWORD *))(*v269 + 8))(v269);
    if (v273)
      (*(void (**)(_QWORD *))(*v273 + 8))(v273);
    if (v272)
      (*(void (**)(_QWORD *))(*v272 + 8))(v272);
    if (v276)
      (*(void (**)(_QWORD *))(*v276 + 8))(v276);
    if (v275)
      (*(void (**)(_QWORD *))(*v275 + 8))(v275);
    if (v279)
      (*(void (**)(_QWORD *))(*v279 + 8))(v279);
    if (v278)
      (*(void (**)(_QWORD *))(*v278 + 8))(v278);
    if (v282)
      (*(void (**)(_QWORD *))(*v282 + 8))(v282);
    if (v281)
      (*(void (**)(_QWORD *))(*v281 + 8))(v281);
    if (v285)
      (*(void (**)(_QWORD *))(*v285 + 8))(v285);
    if (v284)
      (*(void (**)(_QWORD *))(*v284 + 8))(v284);
    if (v288)
      (*(void (**)(_QWORD *))(*v288 + 8))(v288);
    if (v287)
      (*(void (**)(_QWORD *))(*v287 + 8))(v287);
    if (v291)
      (*(void (**)(_QWORD *))(*v291 + 8))(v291);
    if (v290)
      (*(void (**)(_QWORD *))(*v290 + 8))(v290);
    if (v294)
      (*(void (**)(_QWORD *))(*v294 + 8))(v294);
    if (v293)
      (*(void (**)(_QWORD *))(*v293 + 8))(v293);
    if (v297)
      (*(void (**)(_QWORD *))(*v297 + 8))(v297);
    if (v296)
      (*(void (**)(_QWORD *))(*v296 + 8))(v296);
    if (v300)
      (*(void (**)(_QWORD *))(*v300 + 8))(v300);
    if (v299)
      (*(void (**)(_QWORD *))(*v299 + 8))(v299);
    if (v303)
      (*(void (**)(_QWORD *))(*v303 + 8))(v303);
    if (v302)
      (*(void (**)(_QWORD *))(*v302 + 8))(v302);
    if (v306)
      (*(void (**)(_QWORD *))(*v306 + 8))(v306);
    if (v305)
      (*(void (**)(_QWORD *))(*v305 + 8))(v305);
    if (v309)
      (*(void (**)(_QWORD *))(*v309 + 8))(v309);
    if (v308)
      (*(void (**)(_QWORD *))(*v308 + 8))(v308);
    if (v312)
      (*(void (**)(_QWORD *))(*v312 + 8))(v312);
    if (v311)
      (*(void (**)(_QWORD *))(*v311 + 8))(v311);
    if (v315)
      (*(void (**)(_QWORD *))(*v315 + 8))(v315);
    if (v314)
      (*(void (**)(_QWORD *))(*v314 + 8))(v314);
    if (v318)
      (*(void (**)(_QWORD *))(*v318 + 8))(v318);
    if (v317)
      (*(void (**)(_QWORD *))(*v317 + 8))(v317);
    if (v321)
      (*(void (**)(_QWORD *))(*v321 + 8))(v321);
    if (v320)
      (*(void (**)(_QWORD *))(*v320 + 8))(v320);
    byte_1ECE84F58 = 1;
  }
  return &_MergedGlobals_270;
}

uint64_t WebCore::SVGValueProperty<WebCore::Color>::create@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = &off_1E34594A0;
  *(_QWORD *)(result + 32) = 0;
  *a1 = result;
  return result;
}

uint64_t WebCore::SVGPropertyAnimatorFactory::createColorAnimator@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t result;
  uint64_t v15;

  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a1;
  *(_BYTE *)(result + 40) = a3;
  *(_BYTE *)(result + 41) = a4;
  *(_BYTE *)(result + 42) = a5;
  *(_BYTE *)(result + 43) = a6;
  *(_BYTE *)(result + 72) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 32) = off_1E347BEC0;
  *(_QWORD *)result = off_1E34594D8;
  v15 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 80) = v15;
  *a7 = result;
  return result;
}

uint64_t WebCore::SVGPropertyAnimatorFactory::createLengthAnimator@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v14 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = a1;
  *(_QWORD *)v14 = off_1E34596C8;
  *(_BYTE *)(v14 + 40) = a3;
  *(_BYTE *)(v14 + 41) = a4;
  *(_BYTE *)(v14 + 42) = a5;
  *(_BYTE *)(v14 + 43) = a6;
  *(_QWORD *)(v14 + 32) = off_1E3456CB0;
  v17 = 0;
  WebCore::SVGLengthValue::SVGLengthValue(v14 + 44, 2, &v17);
  v17 = 0;
  result = WebCore::SVGLengthValue::SVGLengthValue(v14 + 52, 2, &v17);
  *(_BYTE *)(v14 + 60) = 0;
  *(_BYTE *)(v14 + 68) = 0;
  *(_QWORD *)(v14 + 32) = &off_1E3456C60;
  *(_BYTE *)(v14 + 72) = 2;
  v16 = *a2;
  *a2 = 0;
  *(_QWORD *)(v14 + 80) = v16;
  *(_QWORD *)v14 = off_1E34595F8;
  *a7 = v14;
  return result;
}

uint64_t WebCore::SVGPropertyAnimatorFactory::createLengthListAnimator@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v14 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = a1;
  *(_QWORD *)v14 = off_1E3459918;
  *(_BYTE *)(v14 + 40) = a3;
  *(_BYTE *)(v14 + 41) = a4;
  *(_BYTE *)(v14 + 42) = a5;
  *(_BYTE *)(v14 + 43) = a6;
  *(_QWORD *)(v14 + 32) = off_1E345A788;
  v15 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = 0;
  *(_WORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)v15 = off_1E346CDF0;
  *(_QWORD *)(v15 + 48) = &unk_1E346CE68;
  *(_BYTE *)(v15 + 56) = 2;
  *(_QWORD *)(v14 + 48) = v15;
  v16 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)v16 = off_1E346CDF0;
  *(_QWORD *)(v16 + 48) = &unk_1E346CE68;
  *(_BYTE *)(v16 + 56) = 2;
  *(_QWORD *)(v14 + 56) = v16;
  result = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)result = off_1E346CDF0;
  *(_QWORD *)(result + 48) = &unk_1E346CE68;
  *(_BYTE *)(result + 56) = 2;
  *(_QWORD *)(v14 + 64) = result;
  *(_QWORD *)(v14 + 32) = &off_1E345A738;
  v18 = *a2;
  *a2 = 0;
  *(_QWORD *)(v14 + 72) = v18;
  *(_QWORD *)v14 = off_1E3459848;
  *a7 = v14;
  return result;
}

uint64_t WebCore::SVGValueProperty<float>::create@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E34599D0;
  *a1 = result;
  return result;
}

uint64_t WebCore::SVGPropertyAnimatorFactory::createNumberAnimator@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t result;
  uint64_t v15;

  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a1;
  *(_BYTE *)(result + 40) = a3;
  *(_BYTE *)(result + 41) = a4;
  *(_BYTE *)(result + 42) = a5;
  *(_BYTE *)(result + 43) = a6;
  *(_BYTE *)(result + 52) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_QWORD *)(result + 32) = &off_1E3456850;
  *(_QWORD *)result = &off_1E3459A08;
  v15 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 64) = v15;
  *a7 = result;
  return result;
}

uint64_t WebCore::SVGValueProperty<WTF::String>::create@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = &off_1E3459AC0;
  *(_QWORD *)(result + 32) = 0;
  *a1 = result;
  return result;
}

uint64_t WebCore::SVGPropertyAnimatorFactory::createStringAnimator@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;

  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a1;
  *(_BYTE *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 32) = &off_1E3452D88;
  *(_QWORD *)result = &off_1E3459AF8;
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 64) = v9;
  *a4 = result;
  return result;
}

uint64_t *WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *><WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::add<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>>,WTF::KeyValuePairKeyExtractor<std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>,WTF::DefaultHash,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashMap<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v25 = 0;
        else
          v25 = *(_DWORD *)(v8 - 4);
        v31 = 0;
        v32 = v8 + 24 * v25;
        goto LABEL_37;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 24 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a4;
  *a4 = 0;
  v21 = v16[1];
  v16[1] = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = a4[1];
  a4[1] = 0;
  result = (uint64_t *)v16[2];
  v16[2] = v22;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
      goto LABEL_32;
  }
  else if (3 * v29 <= 4 * v28)
  {
    if (!(_DWORD)v29)
    {
      v30 = 8;
      goto LABEL_33;
    }
LABEL_32:
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_33:
    result = WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>>,WTF::KeyValuePairKeyExtractor<std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>,WTF::DefaultHash,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashMap<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a2, v30, v16);
    v16 = result;
    v26 = *a2;
    if (*a2)
      LODWORD(v29) = *(_DWORD *)(v26 - 4);
    else
      LODWORD(v29) = 0;
  }
  v32 = v26 + 24 * v29;
  v31 = 1;
LABEL_37:
  *v7 = (uint64_t)v16;
  v7[1] = v32;
  *((_BYTE *)v7 + 16) = v31;
  return result;
}

uint64_t *WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl *,std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>>,WTF::KeyValuePairKeyExtractor<std::pair<WTF::Function<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> ()(void)>,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl *,WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>,WTF::DefaultHash,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashMap<WTF::Function<WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WebCore::SVGAttributeAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGAttributeAnimator>> ()(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>&&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v4 + 24 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = (uint64_t *)(v18 + 24 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (*v26);
          v27 = v18 + 24 * v25;
          v30 = *(_QWORD *)(v27 + 16);
          v29 = (_QWORD *)(v27 + 16);
          v28 = v30;
          *v29 = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v31 = *(v29 - 1);
          *(v29 - 1) = 0;
          if (v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          *v26 = *v13;
          v32 = v4 + 24 * v11;
          v34 = *(_QWORD *)(v32 + 8);
          v33 = (uint64_t *)(v32 + 8);
          *v33 = 0;
          *(v29 - 1) = v34;
          v35 = v33[1];
          v33[1] = 0;
          *v29 = v35;
          v36 = v33[1];
          v33[1] = 0;
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          v37 = *v33;
          *v33 = 0;
          if (v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v4 + 24 * v11;
          v16 = *(_QWORD *)(v15 + 16);
          *(_QWORD *)(v15 + 16) = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          v17 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

_QWORD *WebCore::SVGValueProperty<WebCore::Color>::~SVGValueProperty(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  BOOL v7;

  v2 = a1;
  *a1 = &off_1E34594A0;
  v3 = a1[4];
  if ((v3 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = --v6 == 0;
    }
    while (__stlxr(v6, v5));
    v2 = a1;
    if (v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      return a1;
    }
  }
  return v2;
}

uint64_t WebCore::SVGValueProperty<WebCore::Color>::~SVGValueProperty(WTF *this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  BOOL v7;

  v2 = this;
  *(_QWORD *)this = &off_1E34594A0;
  v3 = *((_QWORD *)this + 4);
  if ((v3 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = --v6 == 0;
    }
    while (__stlxr(v6, v5));
    v2 = this;
    if (v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      v2 = this;
    }
  }
  return WTF::fastFree(v2, a2);
}

uint64_t WebCore::SVGPrimitivePropertyAnimator<WebCore::Color,WebCore::SVGAnimationColorFunction>::~SVGPrimitivePropertyAnimator(_QWORD *a1, void *a2)
{
  _DWORD *v3;

  *a1 = off_1E34594D8;
  v3 = (_DWORD *)a1[10];
  a1[10] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::~SVGPropertyAnimator((uint64_t)a1, a2);
}

{
  _DWORD *v3;
  WTF *v4;
  void *v5;

  *a1 = off_1E34594D8;
  v3 = (_DWORD *)a1[10];
  a1[10] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::~SVGPropertyAnimator((uint64_t)a1, a2);
  return WTF::fastFree(v4, v5);
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::isDiscrete()
{
  return 0;
}

WTF::StringImpl *WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::setFromAndToValues(uint64_t a1, uint64_t *a2, WTF **a3, WTF **a4)
{
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if ((byte_1ECE84F68 & 1) != 0)
  {
    v8 = (WTF::StringImpl *)qword_1ECE84F60;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v8 = v17;
    qword_1ECE84F60 = (uint64_t)v17;
    byte_1ECE84F68 = 1;
  }
  if (WTF::equal(*a3, v8, (const WTF::StringImpl *)a3))
  {
    WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeInheritedCSSPropertyValue((WebCore *)&v16, a1, a2[4]);
  }
  else
  {
    v10 = *a3;
    if (*a3)
      *(_DWORD *)v10 += 2;
    v16 = v10;
  }
  if ((byte_1ECE84F68 & 1) != 0)
  {
    v11 = (WTF::StringImpl *)qword_1ECE84F60;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v11 = v17;
    qword_1ECE84F60 = (uint64_t)v17;
    byte_1ECE84F68 = 1;
  }
  if (WTF::equal(*a4, v11, v9))
  {
    WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeInheritedCSSPropertyValue((WebCore *)&v17, a1, a2[4]);
  }
  else
  {
    v12 = *a4;
    if (*a4)
      *(_DWORD *)v12 += 2;
    v17 = v12;
  }
  WebCore::SVGAnimationColorFunction::setFromAndToValues((WebCore::SVGAnimationColorFunction *)(a1 + 32), (WebCore::SVGElement *)a2, &v16, &v17);
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::setFromAndByValues(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 24))(a1 + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, a2);
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::setToAtEndOfDurationValue(uint64_t a1, const WTF::String *a2)
{
  return WebCore::SVGAnimationColorFunction::setToAtEndOfDurationValue((WebCore::SVGAnimationColorFunction *)(a1 + 32), a2);
}

WTF::StringImpl *WebCore::SVGPrimitivePropertyAnimator<WebCore::Color,WebCore::SVGAnimationColorFunction>::start(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  WTF::StringImpl *result;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  __int128 v32;
  WTF::StringImpl *v33[2];

  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  v7 = WebCore::cssPropertyID(v5, (const char *)v6);
  WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeCSSPropertyValue((WebCore *)&v31, a2, v7);
  v8 = *(_QWORD *)(a1 + 80);
  WTF::String::trim();
  WebCore::CSSParser::parseColorWithoutContext((unsigned int **)v33, 0, (uint64_t *)&v30, v9, v10, v11, v12, v13, v14);
  v16 = v33[0];
  v33[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(_QWORD *)(v8 + 32);
  if ((v17 & 0x8000000000000) != 0)
  {
    if ((v30 & 0x8000000000000) != 0)
    {
      *(_OWORD *)v33 = *(_OWORD *)((v17 & 0xFFFFFFFFFFFFLL) + 4);
      v32 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFLL) + 4);
      v29 = WebCore::operator==<float,4ul>((float *)v33, (float *)&v32);
      v17 = *(_QWORD *)(v8 + 32);
      if (v29)
      {
        v19 = v30;
        if (HIBYTE(v17) == HIBYTE(v30) && BYTE6(v17) == BYTE6(v30))
          goto LABEL_13;
      }
    }
  }
  else
  {
    v18 = v17 == v30 && (v30 & 0x8000000000000) == 0;
    v19 = *(_QWORD *)(v8 + 32);
    if (v18)
      goto LABEL_13;
  }
  if ((v17 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v15);
    }
  }
  v19 = v30;
  *(_QWORD *)(v8 + 32) = v30;
  if ((v19 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    v19 = v30;
  }
LABEL_13:
  if ((v19 & 0x8000000000000) != 0)
  {
    v26 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v15);
    }
  }
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGPrimitivePropertyAnimator<WebCore::Color,WebCore::SVGAnimationColorFunction>::animate(uint64_t a1, float a2, uint64_t a3, unsigned int a4)
{
  unint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  void *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;

  v7 = (unint64_t *)(*(_QWORD *)(a1 + 80) + 32);
  v8 = WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>(v7, (uint64_t)&v50);
  v9 = v8;
  v10 = HIBYTE(v8);
  if (*(_BYTE *)(a1 + 40) == 3)
  {
    v11 = v8 >> 8;
    v12 = HIWORD(v8);
    v13 = v8;
  }
  else
  {
    v8 = WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>((unint64_t *)(a1 + 48), (uint64_t)&v51);
    v13 = v8;
    v11 = v8 >> 8;
    v12 = HIWORD(v8);
  }
  v14 = HIBYTE(v8);
  v15 = WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>((unint64_t *)(a1 + 56), (uint64_t)&v52);
  v16 = 64;
  if (!*(_BYTE *)(a1 + 72))
    v16 = 56;
  v17 = *(_QWORD *)(a1 + v16);
  v49 = v17;
  if ((v17 & 0x8000000000000) != 0)
  {
    v41 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
  }
  result = WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>(&v49, (uint64_t)&v53);
  if ((v49 & 0x8000000000000) != 0)
  {
    v48 = result;
    v45 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFLL);
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    result = result;
    if (!v47)
    {
      atomic_store(1u, v45);
      WTF::fastFree((WTF *)v45, v19);
      result = v48;
    }
  }
  if (a2 >= 0.5)
    v20 = (float)v15;
  else
    v20 = (float)v13;
  v21 = (float)v13 + (float)((float)((float)v15 - (float)v13) * a2);
  if (!*(_BYTE *)(a1 + 41))
    v21 = v20;
  v22 = (float)a4;
  if (a4 != 0 && *(_BYTE *)(a1 + 42) != 0)
    v21 = v21 + (float)((float)result * (float)a4);
  if (*(_BYTE *)(a1 + 43))
  {
    v23 = (float)v9;
    if (*(_BYTE *)(a1 + 40) == 3)
      v23 = -0.0;
    v21 = v21 + v23;
  }
  if (a2 >= 0.5)
    v24 = (float)BYTE1(v15);
  else
    v24 = (float)v11;
  if (*(_BYTE *)(a1 + 41))
    v24 = (float)v11 + (float)((float)((float)BYTE1(v15) - (float)v11) * a2);
  if (a4 != 0 && *(_BYTE *)(a1 + 42) != 0)
    v24 = v24 + (float)((float)BYTE1(result) * v22);
  if (*(_BYTE *)(a1 + 43))
  {
    v25 = (float)BYTE1(v9);
    if (*(_BYTE *)(a1 + 40) == 3)
      v25 = -0.0;
    v24 = v24 + v25;
  }
  if (a2 >= 0.5)
    v26 = (float)BYTE2(v15);
  else
    v26 = (float)v12;
  v27 = (float)v12 + (float)((float)((float)BYTE2(v15) - (float)v12) * a2);
  if (!*(_BYTE *)(a1 + 41))
    v27 = v26;
  if (a4 != 0 && *(_BYTE *)(a1 + 42) != 0)
    v27 = v27 + (float)((float)BYTE2(result) * v22);
  if (*(_BYTE *)(a1 + 43))
  {
    v28 = (float)BYTE2(v9);
    if (*(_BYTE *)(a1 + 40) == 3)
      v28 = -0.0;
    v27 = v27 + v28;
  }
  if (a2 >= 0.5)
    v29 = (float)HIBYTE(v15);
  else
    v29 = (float)v14;
  if (*(_BYTE *)(a1 + 41))
    v29 = (float)v14 + (float)((float)((float)HIBYTE(v15) - (float)v14) * a2);
  v30 = v29 + (float)((float)BYTE3(result) * v22);
  if (a4 == 0 || *(_BYTE *)(a1 + 42) == 0)
    v30 = v29;
  if (*(_BYTE *)(a1 + 43))
  {
    v31 = (float)v10;
    if (*(_BYTE *)(a1 + 40) == 3)
      v31 = -0.0;
    v30 = v30 + v31;
  }
  v32 = llroundf(v21);
  v33 = llroundf(v24);
  v34 = llroundf(v27);
  v35 = llroundf(v30);
  if (v32 >= 255)
    v32 = 255;
  v36 = v32 & ~(v32 >> 63);
  if (v33 >= 255)
    v33 = 255;
  v37 = v33 & ~(v33 >> 63);
  if (v34 >= 255)
    v34 = 255;
  v38 = v34 & ~(v34 >> 63);
  if (v35 >= 255)
    v35 = 255;
  v39 = bswap32(((v35 & ~(v35 >> 63)) << 24) | (v38 << 16) | (v37 << 8) | v36) | 0x1104000000000000;
  v40 = *v7;
  if ((*v7 & 0x8000000000000) != 0 || v40 != v39)
  {
    if ((v40 & 0x8000000000000) != 0)
    {
      result = v40 & 0xFFFFFFFFFFFFLL;
      do
      {
        v43 = __ldaxr((unsigned int *)result);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, (unsigned int *)result));
      if (!v44)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v19);
      }
    }
    *v7 = v39;
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPrimitivePropertyAnimator<WebCore::Color,WebCore::SVGAnimationColorFunction>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  WebCore::serializationForHTML((WebCore *)(*(_QWORD *)(a1 + 80) + 32), &v6);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::calculateDistance(uint64_t a1, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  return WebCore::SVGAnimationColorFunction::calculateDistance((WebCore::SVGAnimationColorFunction *)(a1 + 32), a2, a3, a4);
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::~SVGPropertyAnimator(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *(_QWORD *)a1 = off_1E3459540;
  *(_QWORD *)(a1 + 32) = off_1E345A7D8;
  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(_QWORD *)(a1 + 64);
    if ((v3 & 0x8000000000000) != 0)
    {
      v17 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, a2);
      }
    }
  }
  v4 = *(_QWORD *)(a1 + 56);
  if ((v4 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  v5 = *(_QWORD *)(a1 + 48);
  if ((v5 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimationColorFunction::setFromAndToValues(WebCore::SVGAnimationColorFunction *this, WebCore::SVGElement *a2, WTF **a3, WTF **a4)
{
  void *v7;
  const WTF::String *v8;
  unint64_t v9;
  uint64_t result;
  void *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _BOOL4 v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;

  WebCore::SVGAnimationColorFunction::colorFromString(a2, a3, (const WTF::String *)a3, (uint64_t *)&v25);
  v9 = *((_QWORD *)this + 2);
  if ((v9 & 0x8000000000000) != 0)
  {
    if ((v25 & 0x8000000000000) == 0
      || (v27 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4),
          v26 = *(_OWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4),
          v19 = WebCore::operator==<float,4ul>((float *)&v27, (float *)&v26),
          v9 = *((_QWORD *)this + 2),
          !v19)
      || HIBYTE(v9) != HIBYTE(v25)
      || BYTE6(v9) != BYTE6(v25))
    {
LABEL_6:
      if ((v9 & 0x8000000000000) != 0)
      {
        v14 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          WTF::fastFree((WTF *)v14, v7);
        }
      }
      *((_QWORD *)this + 2) = v25;
      goto LABEL_8;
    }
    v9 = v25;
  }
  else if (v9 != v25 || (v25 & 0x8000000000000) != 0)
  {
    goto LABEL_6;
  }
  if ((v9 & 0x8000000000000) != 0)
  {
    v20 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v7);
    }
  }
LABEL_8:
  result = WebCore::SVGAnimationColorFunction::colorFromString(a2, a4, v8, (uint64_t *)&v25);
  v13 = *((_QWORD *)this + 3);
  if ((v13 & 0x8000000000000) != 0)
  {
    if ((v25 & 0x8000000000000) == 0)
      goto LABEL_11;
    v27 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 4);
    v26 = *(_OWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
    result = WebCore::operator==<float,4ul>((float *)&v27, (float *)&v26);
    v13 = *((_QWORD *)this + 3);
    if (!(_DWORD)result || HIBYTE(v13) != HIBYTE(v25) || BYTE6(v13) != BYTE6(v25))
      goto LABEL_11;
    v13 = v25;
  }
  else if (v13 != v25 || (v25 & 0x8000000000000) != 0)
  {
LABEL_11:
    if ((v13 & 0x8000000000000) != 0)
    {
      result = v13 & 0xFFFFFFFFFFFFLL;
      do
      {
        v17 = __ldaxr((unsigned int *)result);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)result));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v12);
      }
    }
    *((_QWORD *)this + 3) = v25;
    return result;
  }
  if ((v13 & 0x8000000000000) != 0)
  {
    result = v13 & 0xFFFFFFFFFFFFLL;
    do
    {
      v23 = __ldaxr((unsigned int *)result);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)result));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v12);
    }
  }
  return result;
}

void WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeInheritedCSSPropertyValue(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  __int16 v11;
  __int16 v12;

  if (!a3 || (~*(unsigned __int16 *)(a3 + 28) & 0x28) != 0)
  {
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v10 += 2;
    *(_QWORD *)a1 = v10;
  }
  else
  {
    *(_DWORD *)(a3 + 24) += 2;
    v5 = *(_QWORD *)(**(_QWORD **)(a2 + 24) + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v6 = 0;
      v7 = 0x100000000;
    }
    v8 = WebCore::cssPropertyID(v6, (const char *)v7);
    WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeCSSPropertyValue(a1, a3, v8);
    if (*(_DWORD *)(a3 + 24) == 2)
    {
      v11 = *(_WORD *)(a3 + 30);
      if ((v11 & 0x400) == 0)
      {
        v12 = *(_WORD *)(a3 + 28);
        if ((v12 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)a3, v9);
        }
        else
        {
          if ((v12 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 160) + 16))(*(_QWORD *)(a3 + 160));
            v11 = *(_WORD *)(a3 + 30);
          }
          *(_WORD *)(a3 + 30) = v11 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3);
        }
      }
    }
    else
    {
      *(_DWORD *)(a3 + 24) -= 2;
    }
  }
}

void WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeCSSPropertyValue(WebCore *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringBuilder *v8;
  WTF::String *v9;
  __n128 v10;
  WTF::StringImpl *v11;
  WebCore::Document *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  WebCore::Document *v20;
  char v21;
  WTF::StringImpl *v22;
  char v23;
  char v24;
  WTF::StringImpl *v25;

  v5 = *(_DWORD *)(a2 + 24) + 2;
  *(_DWORD *)(a2 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 120);
  if (v6)
  {
    *(_BYTE *)(v6 + 64) |= 2u;
    v5 = *(_DWORD *)(a2 + 24);
  }
  *(_DWORD *)(a2 + 24) = v5 + 2;
  v20 = (WebCore::Document *)a2;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v20, a3, 1, 0, &v25);
  if (v23)
  {
    v11 = v22;
    v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  v12 = v20;
  v20 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      v16 = *((_WORD *)v12 + 15);
      if ((v16 & 0x400) == 0)
      {
        v17 = *((_WORD *)v12 + 14);
        if ((v17 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef(v12, v7);
        }
        else
        {
          if ((v17 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v12 + 20) + 16))(*((_QWORD *)v12 + 20));
            v16 = *((_WORD *)v12 + 15);
          }
          *((_WORD *)v12 + 15) = v16 | 0x400;
          (*(void (**)(WebCore::Document *))(*(_QWORD *)v12 + 72))(v12);
        }
      }
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  v13 = *(_QWORD *)(a2 + 120);
  if (v13)
    *(_BYTE *)(v13 + 64) &= ~2u;
  v14 = v25;
  if (v25)
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a1, (uint64_t)v25, v8, v9, v10);
    v15 = v25;
    v25 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  if (*(_DWORD *)(a2 + 24) == 2)
  {
    v18 = *(_WORD *)(a2 + 30);
    if ((v18 & 0x400) == 0)
    {
      v19 = *(_WORD *)(a2 + 28);
      if ((v19 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)a2, v14);
      }
      else
      {
        if ((v19 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 160) + 16))(*(_QWORD *)(a2 + 160));
          v18 = *(_WORD *)(a2 + 30);
        }
        *(_WORD *)(a2 + 30) = v18 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
      }
    }
  }
  else
  {
    *(_DWORD *)(a2 + 24) -= 2;
  }
}

uint64_t WebCore::SVGAnimationColorFunction::setToAtEndOfDurationValue(WebCore::SVGAnimationColorFunction *this, const WTF::String *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  WTF::StringImpl *v9;
  uint64_t result;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  __int128 v17;
  WTF::StringImpl *v18[2];

  WTF::String::trim();
  WebCore::CSSParser::parseColorWithoutContext((unsigned int **)v18, 0, (uint64_t *)&v16, v3, v4, v5, v6, v7, v8);
  result = (uint64_t)v18[0];
  v18[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  if (!*((_BYTE *)this + 40))
  {
    *((_QWORD *)this + 4) = v16;
    *((_BYTE *)this + 40) = 1;
    return result;
  }
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 0x8000000000000) != 0)
  {
    if ((v16 & 0x8000000000000) == 0)
      goto LABEL_8;
    *(_OWORD *)v18 = *(_OWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 4);
    v17 = *(_OWORD *)((v16 & 0xFFFFFFFFFFFFLL) + 4);
    result = WebCore::operator==<float,4ul>((float *)v18, (float *)&v17);
    v11 = *((_QWORD *)this + 4);
    if (!(_DWORD)result || HIBYTE(v11) != HIBYTE(v16) || BYTE6(v11) != BYTE6(v16))
      goto LABEL_8;
    v11 = v16;
  }
  else if (v11 != v16 || (v16 & 0x8000000000000) != 0)
  {
LABEL_8:
    if ((v11 & 0x8000000000000) != 0)
    {
      result = v11 & 0xFFFFFFFFFFFFLL;
      do
      {
        v12 = __ldaxr((unsigned int *)result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)result));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v9);
      }
    }
    *((_QWORD *)this + 4) = v16;
    return result;
  }
  if ((v11 & 0x8000000000000) != 0)
  {
    result = v11 & 0xFFFFFFFFFFFFLL;
    do
    {
      v14 = __ldaxr((unsigned int *)result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)result));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v9);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SVGValueProperty<WebCore::Color>,WTF::RawPtrTraits<WebCore::SVGValueProperty<WebCore::Color>>,WTF::DefaultRefDerefTraits<WebCore::SVGValueProperty<WebCore::Color>>> (*)(void),WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SVGPrimitivePropertyAnimator<WebCore::Color,WebCore::SVGAnimationColorFunction>,WTF::RawPtrTraits<WebCore::SVGPrimitivePropertyAnimator<WebCore::Color,WebCore::SVGAnimationColorFunction>>,WTF::DefaultRefDerefTraits<WebCore::SVGPrimitivePropertyAnimator<WebCore::Color,WebCore::SVGAnimationColorFunction>>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL),WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WTF::Ref<WebCore::SVGPrimitivePropertyAnimator<WebCore::Color,WebCore::SVGAnimationColorFunction>,WTF::RawPtrTraits<WebCore::SVGPrimitivePropertyAnimator<WebCore::Color,WebCore::SVGAnimationColorFunction>>,WTF::DefaultRefDerefTraits<WebCore::SVGPrimitivePropertyAnimator<WebCore::Color,WebCore::SVGAnimationColorFunction>>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::SVGPrimitivePropertyAnimator<WebCore::Color,WebCore::SVGAnimationColorFunction>,WTF::RawPtrTraits<WebCore::SVGPrimitivePropertyAnimator<WebCore::Color,WebCore::SVGAnimationColorFunction>>,WTF::DefaultRefDerefTraits<WebCore::SVGPrimitivePropertyAnimator<WebCore::Color,WebCore::SVGAnimationColorFunction>>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,BOOL,BOOL>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5, a6, a7);
}

void WebCore::SVGLengthAnimator::~SVGLengthAnimator(WebCore::SVGLengthAnimator *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E3459660;
  v3 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E3459660;
  v3 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationLengthFunction>::isDiscrete()
{
  return 0;
}

WTF::StringImpl *WebCore::SVGPropertyAnimator<WebCore::SVGAnimationLengthFunction>::setFromAndToValues(uint64_t a1, uint64_t a2, WTF **a3, WTF **a4)
{
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;

  if ((byte_1ECE84F78 & 1) != 0)
  {
    v8 = (const WTF::StringImpl *)qword_1ECE84F70;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v8 = (const WTF::StringImpl *)v18;
    qword_1ECE84F70 = v18;
    byte_1ECE84F78 = 1;
  }
  if (WTF::equal(*a3, v8, (const WTF::StringImpl *)a3))
  {
    WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeInheritedCSSPropertyValue((WebCore *)&v17, a1, *(_QWORD *)(a2 + 32));
  }
  else
  {
    v10 = *a3;
    if (*a3)
      *(_DWORD *)v10 += 2;
    v17 = v10;
  }
  if ((byte_1ECE84F78 & 1) != 0)
  {
    v11 = (const WTF::StringImpl *)qword_1ECE84F70;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v11 = (const WTF::StringImpl *)v18;
    qword_1ECE84F70 = v18;
    byte_1ECE84F78 = 1;
  }
  if (WTF::equal(*a4, v11, v9))
  {
    WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeInheritedCSSPropertyValue((WebCore *)&v16, a1, *(_QWORD *)(a2 + 32));
  }
  else
  {
    v12 = *a4;
    if (*a4)
      *(_DWORD *)v12 += 2;
    v16 = v12;
  }
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v18, *(_BYTE *)(a1 + 72), (uint64_t *)&v17);
  *(_DWORD *)(a1 + 44) = v18;
  *(_WORD *)(a1 + 48) = WORD2(v18);
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v18, *(_BYTE *)(a1 + 72), (uint64_t *)&v16);
  *(_DWORD *)(a1 + 52) = v18;
  *(_WORD *)(a1 + 56) = WORD2(v18);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationLengthFunction>::setFromAndByValues(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 24))(a1 + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, a2);
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationLengthFunction>::setToAtEndOfDurationValue(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v4, *(_BYTE *)(a1 + 72), a2);
  if (*(_BYTE *)(a1 + 68))
  {
    *(_DWORD *)(a1 + 60) = v4;
    *(_WORD *)(a1 + 64) = WORD2(v4);
  }
  else
  {
    *(_QWORD *)(a1 + 60) = v4;
    *(_BYTE *)(a1 + 68) = 1;
  }
  return result;
}

WTF::StringImpl *WebCore::SVGLengthAnimator::start(WebCore::SVGLengthAnimator *this, WebCore::SVGElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *result;
  uint64_t v14;
  WTF::StringImpl *v15;
  char v16;
  int v17;
  __int16 v18;
  WTF::StringImpl *v19;

  v4 = *(_QWORD *)(**((_QWORD **)this + 3) + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  v7 = WebCore::cssPropertyID(v5, (const char *)v6);
  WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeCSSPropertyValue((WebCore *)&v19, (uint64_t)a2, v7);
  v14 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v17, 2, &v14);
  if (v19)
  {
    v8 = (unsigned __int16 *)*((_QWORD *)v19 + 1);
    v9 = *((unsigned int *)v19 + 1) | ((unint64_t)((*((_DWORD *)v19 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebCore::SVGLengthValue::setValueAsString((uint64_t)&v17, v8, v9, &v14);
  if (v16)
  {
    v11 = v15;
    v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    v12 = *((_QWORD *)this + 10);
    *(_DWORD *)(v12 + 28) = v17;
    *(_WORD *)(v12 + 32) = v18;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGValuePropertyAnimator<WebCore::SVGLength,WebCore::SVGAnimationLengthFunction>::animate(uint64_t a1, WebCore::SVGElement *a2, unsigned int a3, float a4)
{
  return WebCore::SVGAnimationLengthFunction::animate((WebCore::SVGAnimationLengthFunction *)(a1 + 32), a2, a4, a3, (WTF::StringImpl **)(*(_QWORD *)(a1 + 80) + 28));
}

WTF::StringImpl *WebCore::SVGValuePropertyAnimator<WebCore::SVGLength,WebCore::SVGAnimationLengthFunction>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 80) + 32))(&v6);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationLengthFunction>::calculateDistance(uint64_t a1, const WebCore::SVGElement *a2, uint64_t *a3, uint64_t *a4)
{
  float v7;
  void *v8;
  float v9;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  _BYTE v18[8];
  _BYTE v19[8];
  WTF *v20[5];

  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v20, a2);
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)v19, *(_BYTE *)(a1 + 72), a3);
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)v18, *(_BYTE *)(a1 + 72), a4);
  v7 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)v18, (const WebCore::SVGLengthContext *)v20);
  v9 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)v19, (const WebCore::SVGLengthContext *)v20);
  v10 = v20[0];
  v20[0] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *((unsigned int *)v10 + 7);
      if ((_DWORD)v14)
      {
        v17 = v10;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v10 + 2), (WTF::StringImpl *)(*((_QWORD *)v10 + 2) + 32 * v14));
        v10 = v17;
      }
      v15 = (WTF *)*((_QWORD *)v10 + 2);
      if (v15)
      {
        *((_QWORD *)v10 + 2) = 0;
        *((_DWORD *)v10 + 6) = 0;
        v16 = v10;
        WTF::fastFree(v15, v8);
        v10 = v16;
      }
      WTF::fastFree(v10, v8);
    }
  }
  return COERCE_UNSIGNED_INT(fabs(v7 - v9)) | 0x100000000;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(void)::{lambda(void)#1},WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E32EE180;
  v4 = 0;
  result = WebCore::SVGLengthValue::SVGLengthValue(v2 + 28, 2, &v4);
  *(_QWORD *)v2 = off_1E32EE148;
  *a1 = v2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SVGLengthAnimator,WTF::RawPtrTraits<WebCore::SVGLengthAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGLengthAnimator>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL),WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WTF::Ref<WebCore::SVGLengthAnimator,WTF::RawPtrTraits<WebCore::SVGLengthAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGLengthAnimator>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::SVGLengthAnimator,WTF::RawPtrTraits<WebCore::SVGLengthAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGLengthAnimator>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,BOOL,BOOL>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5, a6, a7);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(void)::{lambda(void)#2},WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E32EE180;
  v4 = 0;
  result = WebCore::SVGLengthValue::SVGLengthValue(v2 + 28, 2, &v4);
  *(_QWORD *)v2 = off_1E32EE148;
  *a1 = v2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(void)::{lambda(void)#3},WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E32EE180;
  v4 = 0;
  result = WebCore::SVGLengthValue::SVGLengthValue(v2 + 28, 2, &v4);
  *(_QWORD *)v2 = off_1E32EE148;
  *a1 = v2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(void)::{lambda(void)#4},WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E32EE180;
  v4 = 0;
  result = WebCore::SVGLengthValue::SVGLengthValue(v2 + 28, 2, &v4);
  *(_QWORD *)v2 = off_1E32EE148;
  *a1 = v2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(void)::{lambda(void)#5},WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E32EE180;
  v4 = 0;
  result = WebCore::SVGLengthValue::SVGLengthValue(v2 + 28, 2, &v4);
  *(_QWORD *)v2 = off_1E32EE148;
  *a1 = v2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(void)::{lambda(void)#6},WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E32EE180;
  v4 = 0;
  result = WebCore::SVGLengthValue::SVGLengthValue(v2 + 28, 2, &v4);
  *(_QWORD *)v2 = off_1E32EE148;
  *a1 = v2;
  return result;
}

void WebCore::SVGLengthListAnimator::~SVGLengthListAnimator(WebCore::SVGLengthListAnimator *this, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WebCore::SVGValuePropertyListAnimator<WebCore::SVGLengthList,WebCore::SVGAnimationLengthListFunction>::~SVGValuePropertyListAnimator(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationLengthListFunction>::isDiscrete()
{
  return 0;
}

WTF::StringImpl *WebCore::SVGPropertyAnimator<WebCore::SVGAnimationLengthListFunction>::setFromAndToValues(uint64_t a1, uint64_t a2, WTF **a3, WTF **a4)
{
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned __int16 *v13;
  unint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  if ((byte_1ECE84F88 & 1) != 0)
  {
    v8 = (WTF::StringImpl *)qword_1ECE84F80;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v8 = v21;
    qword_1ECE84F80 = (uint64_t)v21;
    byte_1ECE84F88 = 1;
  }
  if (WTF::equal(*a3, v8, (const WTF::StringImpl *)a3))
  {
    WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeInheritedCSSPropertyValue((WebCore *)&v20, a1, *(_QWORD *)(a2 + 32));
  }
  else
  {
    v10 = *a3;
    if (*a3)
      *(_DWORD *)v10 += 2;
    v20 = v10;
  }
  if ((byte_1ECE84F88 & 1) != 0)
  {
    v11 = (WTF::StringImpl *)qword_1ECE84F80;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v11 = v21;
    qword_1ECE84F80 = (uint64_t)v21;
    byte_1ECE84F88 = 1;
  }
  if (WTF::equal(*a4, v11, v9))
  {
    WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeInheritedCSSPropertyValue((WebCore *)&v21, a1, *(_QWORD *)(a2 + 32));
  }
  else
  {
    v12 = *a4;
    if (*a4)
      *(_DWORD *)v12 += 2;
    v21 = v12;
  }
  if (v20)
  {
    v13 = (unsigned __int16 *)*((_QWORD *)v20 + 1);
    v14 = *((unsigned int *)v20 + 1) | ((unint64_t)((*((_DWORD *)v20 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v13 = 0;
    v14 = 0x100000000;
  }
  WebCore::SVGLengthList::parse(*(_QWORD *)(a1 + 48), v13, v14);
  if (v21)
  {
    v15 = (unsigned __int16 *)*((_QWORD *)v21 + 1);
    v16 = *((unsigned int *)v21 + 1) | ((unint64_t)((*((_DWORD *)v21 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v15 = 0;
    v16 = 0x100000000;
  }
  WebCore::SVGLengthList::parse(*(_QWORD *)(a1 + 56), v15, v16);
  v18 = v21;
  v21 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationLengthListFunction>::setFromAndByValues(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 24))(a1 + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, a2);
}

BOOL WebCore::SVGPropertyAnimator<WebCore::SVGAnimationLengthListFunction>::setToAtEndOfDurationValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *a2;
  if (*a2)
  {
    v4 = *(unsigned __int16 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  return WebCore::SVGLengthList::parse(v2, v4, v5);
}

WTF::StringImpl *WebCore::SVGLengthListAnimator::start(WebCore::SVGLengthListAnimator *this, WebCore::SVGElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl *result;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF *v17;
  WTF::StringImpl *v18;

  v4 = *(_QWORD *)(**((_QWORD **)this + 3) + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  v7 = WebCore::cssPropertyID(v5, (const char *)v6);
  WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeCSSPropertyValue((WebCore *)&v18, (uint64_t)a2, v7);
  if (v18)
  {
    v8 = (unsigned __int16 *)*((_QWORD *)v18 + 1);
    v9 = *((unsigned int *)v18 + 1) | ((unint64_t)((*((_DWORD *)v18 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  if (!WebCore::SVGLengthList::parse(*((_QWORD *)this + 9), v8, v9))
  {
    v11 = *((_QWORD *)this + 9);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    if (*(_DWORD *)(v11 + 40))
    {
      v13 = *(unsigned int *)(v11 + 44);
      if ((_DWORD)v13)
      {
        v14 = *(_DWORD ***)(v11 + 32);
        v15 = 8 * v13;
        do
        {
          v16 = *v14;
          *v14 = 0;
          if (v16)
          {
            if (v16[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
            else
              --v16[2];
          }
          ++v14;
          v15 -= 8;
        }
        while (v15);
        *(_DWORD *)(v11 + 44) = 0;
      }
      v17 = *(WTF **)(v11 + 32);
      if (v17)
      {
        *(_QWORD *)(v11 + 32) = 0;
        *(_DWORD *)(v11 + 40) = 0;
        WTF::fastFree(v17, v10);
      }
    }
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGValuePropertyListAnimator<WebCore::SVGLengthList,WebCore::SVGAnimationLengthListFunction>::animate(uint64_t a1, WebCore::SVGElement *a2, unsigned int a3, float a4)
{
  return WebCore::SVGAnimationLengthListFunction::animate(a1 + 32, a2, a3, (unsigned int **)(a1 + 72), a4);
}

WTF::StringImpl *WebCore::SVGValuePropertyListAnimator<WebCore::SVGLengthList,WebCore::SVGAnimationLengthListFunction>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  WebCore::SVGLengthList::valueAsString(*(WebCore::SVGLengthList **)(a1 + 72), &v6);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationLengthListFunction>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationLengthListFunction::~SVGAnimationLengthListFunction(WebCore::SVGAnimationLengthListFunction *this)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = off_1E345A788;
  v2 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
}

{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = off_1E345A788;
  v2 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::SVGAnimationLengthListFunction::setFromAndToValues(WebCore::SVGAnimationLengthListFunction *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;

  v6 = *((_QWORD *)this + 2);
  v7 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v8 = *(unsigned __int16 **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebCore::SVGLengthList::parse(v6, v8, v9);
  v10 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    v11 = *(unsigned __int16 **)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  return WebCore::SVGLengthList::parse(*((_QWORD *)this + 3), v11, v12);
}

BOOL WebCore::SVGAnimationLengthListFunction::setToAtEndOfDurationValue(WebCore::SVGAnimationLengthListFunction *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(unsigned __int16 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  return WebCore::SVGLengthList::parse(v2, v4, v5);
}

WTF *WebCore::SVGAnimationLengthListFunction::addFromAndToValues(WTF *this, WebCore::SVGElement *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unint64_t i;
  WebCore::SVGLengthValue *v7;
  unsigned __int8 *v8;
  float v9;
  float v10;
  const WebCore::SVGElement *v11;
  uint64_t v12;
  char v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21[5];
  int v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  char v25;

  v2 = *((_QWORD *)this + 2);
  v3 = *(_DWORD *)(v2 + 44);
  if (v3)
  {
    v4 = *((_QWORD *)this + 3);
    if (v3 == *(_DWORD *)(v4 + 44))
    {
      WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v21, a2);
      if (*(_DWORD *)(v2 + 44))
      {
        for (i = 0; i < *(unsigned int *)(v2 + 44); ++i)
        {
          if (i >= *(unsigned int *)(v4 + 44))
            goto LABEL_29;
          v7 = (WebCore::SVGLengthValue *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * i) + 28);
          v8 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 32) + 8 * i);
          v9 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(v8 + 28), (const WebCore::SVGLengthContext *)v21);
          v10 = v9 + WebCore::SVGLengthValue::value(v7, (const WebCore::SVGLengthContext *)v21);
          v11 = (const WebCore::SVGElement *)v8[32];
          if ((_DWORD)v11 == 2)
            v10 = v10 / 100.0;
          WebCore::SVGLengthContext::convertValueFromUserUnits((WebCore::SVGLengthContext *)v21, v11, v8[33], (uint64_t)&v22, v10);
          v12 = v24;
          if (v24)
          {
            if (v24 != 1)
            {
              std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
              __break(0xC471u);
              JUMPOUT(0x196602EB4);
            }
            v13 = 0;
            v14 = v23;
            v23 = 0;
          }
          else
          {
            v14 = 0;
            *((_DWORD *)v8 + 7) = v22;
            v13 = 1;
          }
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v12])(&v25, &v22);
          if ((v13 & 1) == 0 && v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v5);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      this = v21[0];
      v21[0] = 0;
      if (this)
      {
        do
        {
          v15 = __ldaxr((unsigned int *)this);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, (unsigned int *)this));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)this);
          v17 = *((unsigned int *)this + 7);
          if ((_DWORD)v17)
          {
            v20 = this;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)this + 2), (WTF::StringImpl *)(*((_QWORD *)this + 2) + 32 * v17));
            this = v20;
          }
          v18 = (WTF *)*((_QWORD *)this + 2);
          if (v18)
          {
            *((_QWORD *)this + 2) = 0;
            *((_DWORD *)this + 6) = 0;
            v19 = this;
            WTF::fastFree(v18, v5);
            this = v19;
          }
          return (WTF *)WTF::fastFree(this, v5);
        }
      }
    }
  }
  return this;
}

_QWORD *WebCore::SVGValuePropertyListAnimator<WebCore::SVGLengthList,WebCore::SVGAnimationLengthListFunction>::~SVGValuePropertyListAnimator(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *a1 = off_1E34598B0;
  v3 = (_DWORD *)a1[9];
  a1[9] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *a1 = off_1E3459918;
  a1[4] = off_1E345A788;
  v4 = (_DWORD *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)a1[7];
  a1[7] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)a1[6];
  a1[6] = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = a1[2];
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)a1[2];
    a1[2] = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    a1[2] = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimationLengthListFunction::animate(uint64_t result, WebCore::SVGElement *a2, unsigned int a3, unsigned int **a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v10;
  int v11;
  unsigned int **v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int **v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  unint64_t i;
  unint64_t v23;
  uint64_t v25;
  const WebCore::SVGElement *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  BOOL v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  char v36;
  WTF::StringImpl *v37;
  unsigned int *v38;
  WTF *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  WTF *v43;
  unsigned int *v44;
  unsigned int *v45;
  WTF *v47[5];
  int v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  char v51[9];

  v6 = *(_QWORD *)(result + 24);
  v7 = *(unsigned int *)(v6 + 44);
  if ((_DWORD)v7)
  {
    v10 = result;
    v11 = *(unsigned __int8 *)(result + 8);
    v12 = (unsigned int **)(result + 16);
    v13 = *(_QWORD *)(result + 16);
    v14 = *(_DWORD *)(v13 + 44);
    if (v14)
      v15 = v14 == (_DWORD)v7;
    else
      v15 = 1;
    if (v15)
    {
      v16 = *a4;
      if ((*a4)[11] < v7)
      {
        WebCore::SVGValuePropertyList<WebCore::SVGLength>::resize(*a4, v7);
        v11 = *(unsigned __int8 *)(v10 + 8);
        v6 = *(_QWORD *)(v10 + 24);
        v16 = *a4;
      }
      if (v11 == 3)
        v17 = a4;
      else
        v17 = v12;
      v45 = *v17;
      if (*(_DWORD *)(*(_QWORD *)(v10 + 32) + 44))
        v18 = *(_QWORD *)(v10 + 32);
      else
        v18 = v6;
      v19 = *((unsigned __int8 *)v16 + 56);
      result = WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v47, a2);
      v21 = *(unsigned int *)(v6 + 44);
      if ((_DWORD)v21)
      {
        for (i = 0; i < v21; ++i)
        {
          v23 = v45[11];
          if (i < v23 && a5 < 0.5)
            v25 = (uint64_t)(v45 + 8);
          else
            v25 = v6 + 32;
          if (i >= *(unsigned int *)(v25 + 12))
            goto LABEL_72;
          v26 = (const WebCore::SVGElement *)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v25 + 8 * i) + 32);
          v27 = 0.0;
          if (i < v23)
          {
            v27 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)(*((_QWORD *)v45 + 4) + 8 * i) + 28), (const WebCore::SVGLengthContext *)v47);
            v21 = *(unsigned int *)(v6 + 44);
          }
          if (i >= v21)
          {
            __break(0xC471u);
            JUMPOUT(0x1966033A0);
          }
          v28 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i) + 28), (const WebCore::SVGLengthContext *)v47);
          v29 = 0.0;
          if (i < *(unsigned int *)(v18 + 44))
            v29 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * i) + 28), (const WebCore::SVGLengthContext *)v47);
          if (i >= v16[11])
          {
            __break(0xC471u);
            JUMPOUT(0x1966033A8);
          }
          v30 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)(*((_QWORD *)v16 + 4) + 8 * i) + 28), (const WebCore::SVGLengthContext *)v47);
          if (a5 >= 0.5)
            v31 = v28;
          else
            v31 = v27;
          if (*(_BYTE *)(v10 + 9))
            v31 = v27 + (float)((float)(v28 - v27) * a5);
          if (*(_BYTE *)(v10 + 10))
            v32 = a3 == 0;
          else
            v32 = 1;
          if (!v32)
            v31 = v31 + (float)(v29 * (float)a3);
          if (*(_BYTE *)(v10 + 11))
          {
            if (*(_BYTE *)(v10 + 8) == 3)
              v30 = -0.0;
            v31 = v31 + v30;
          }
          if (i >= v16[11])
          {
            __break(0xC471u);
            JUMPOUT(0x1966033B0);
          }
          v33 = *(_QWORD *)(*((_QWORD *)v16 + 4) + 8 * i);
          *(_BYTE *)(v33 + 33) = v19;
          *(_BYTE *)(v33 + 32) = (_BYTE)v26;
          v34 = v31 / 100.0;
          if ((_DWORD)v26 != 2)
            v34 = v31;
          WebCore::SVGLengthContext::convertValueFromUserUnits((WebCore::SVGLengthContext *)v47, v26, v19, (uint64_t)&v48, v34);
          v35 = v50;
          if (v50)
          {
            if (v50 != 1)
            {
              std::__throw_bad_variant_access[abi:sn180100]();
LABEL_72:
              __break(0xC471u);
              JUMPOUT(0x196603398);
            }
            v36 = 0;
            v37 = v49;
            v49 = 0;
          }
          else
          {
            v37 = 0;
            *(_DWORD *)(v33 + 28) = v48;
            v36 = 1;
          }
          result = ((uint64_t (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v35])(v51, &v48);
          if ((v36 & 1) == 0 && v37)
          {
            if (*(_DWORD *)v37 == 2)
              result = WTF::StringImpl::destroy(v37, v20);
            else
              *(_DWORD *)v37 -= 2;
          }
          v21 = *(unsigned int *)(v6 + 44);
        }
      }
      v39 = v47[0];
      v47[0] = 0;
      if (v39)
      {
        do
        {
          v40 = __ldaxr((unsigned int *)v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, (unsigned int *)v39));
        if (!v41)
        {
          atomic_store(1u, (unsigned int *)v39);
          v42 = *((unsigned int *)v39 + 7);
          if ((_DWORD)v42)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v39 + 2), (WTF::StringImpl *)(*((_QWORD *)v39 + 2) + 32 * v42));
          v43 = (WTF *)*((_QWORD *)v39 + 2);
          if (v43)
          {
            *((_QWORD *)v39 + 2) = 0;
            *((_DWORD *)v39 + 6) = 0;
            WTF::fastFree(v43, v20);
          }
          return WTF::fastFree(v39, v20);
        }
      }
    }
    else if (a5 >= 0.5)
    {
      v44 = *a4;
      result = WebCore::SVGValuePropertyList<WebCore::SVGLength>::operator=((uint64_t)*a4, v6);
      *((_BYTE *)v44 + 56) = *(_BYTE *)(v6 + 56);
    }
    else if (v11 != 3)
    {
      v38 = *a4;
      result = WebCore::SVGValuePropertyList<WebCore::SVGLength>::operator=((uint64_t)*a4, v13);
      *((_BYTE *)v38 + 56) = *(_BYTE *)(v13 + 56);
    }
  }
  return result;
}

unsigned int *WebCore::SVGValuePropertyList<WebCore::SVGLength>::resize(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  unint64_t i;
  uint64_t v5;
  _DWORD *v6;
  unsigned int *v7;
  _DWORD *v8;
  unsigned int *v9;

  v3 = result;
  for (i = result[11]; i < a2; i = v3[11])
  {
    v5 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_DWORD *)(v5 + 8) = 1;
    *(_QWORD *)v5 = off_1E32EE180;
    v9 = 0;
    WebCore::SVGLengthValue::SVGLengthValue(v5 + 28, 2, (uint64_t *)&v9);
    *(_QWORD *)v5 = off_1E32EE148;
    v9 = (unsigned int *)v5;
    (*(void (**)(_DWORD **__return_ptr, unsigned int *, unsigned int **))(*(_QWORD *)v3 + 80))(&v8, v3, &v9);
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
    result = v9;
    v9 = 0;
    if (result)
    {
      if (result[2] == 1)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  if (i > a2)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, unsigned int *, _QWORD))(*(_QWORD *)v3 + 72))(&v7, v3, (i - 1));
      result = v7;
      v7 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      LODWORD(i) = v3[11];
    }
    while (i > a2);
  }
  return result;
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGLength>::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF *v17;
  _DWORD *v18;
  _DWORD *v19;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (*(_DWORD *)(a1 + 40))
  {
    v13 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v13)
    {
      v14 = *(_DWORD ***)(a1 + 32);
      v15 = 8 * v13;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
        {
          if (v16[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
          else
            --v16[2];
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
      *(_DWORD *)(a1 + 44) = 0;
    }
    v17 = *(WTF **)(a1 + 32);
    if (v17)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v17, v4);
    }
  }
  v5 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)(a2 + 32);
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      v9 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v9 + 8) = 1;
      *(_QWORD *)(v9 + 16) = 0;
      *(_WORD *)(v9 + 24) = 0;
      *(_QWORD *)v9 = off_1E32EE180;
      *(_QWORD *)(v9 + 28) = *(_QWORD *)(v8 + 28);
      *(_QWORD *)v9 = off_1E32EE148;
      v18 = (_DWORD *)v9;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, _DWORD **))(*(_QWORD *)a1 + 80))(&v19, a1, &v18);
      v10 = v19;
      v19 = 0;
      if (v10)
      {
        if (v10[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        else
          --v10[2];
      }
      v11 = v18;
      v18 = 0;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[2];
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(void)::{lambda(void)#7},WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)result = off_1E346CDF0;
  *(_QWORD *)(result + 48) = &unk_1E346CE68;
  *(_BYTE *)(result + 56) = 2;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SVGLengthListAnimator,WTF::RawPtrTraits<WebCore::SVGLengthListAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGLengthListAnimator>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL),WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WTF::Ref<WebCore::SVGLengthListAnimator,WTF::RawPtrTraits<WebCore::SVGLengthListAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGLengthListAnimator>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::SVGLengthListAnimator,WTF::RawPtrTraits<WebCore::SVGLengthListAnimator>,WTF::DefaultRefDerefTraits<WebCore::SVGLengthListAnimator>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,BOOL,BOOL>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5, a6, a7);
}

_QWORD *WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>::~SVGPrimitivePropertyAnimator(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E3459A08;
  v3 = (_DWORD *)a1[8];
  a1[8] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = a1[2];
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)a1[2];
    a1[2] = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    a1[2] = 0;
  }
  return a1;
}

uint64_t WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>::~SVGPrimitivePropertyAnimator(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3459A08;
  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationNumberFunction>::isDiscrete()
{
  return 0;
}

WTF::StringImpl *WebCore::SVGPropertyAnimator<WebCore::SVGAnimationNumberFunction>::setFromAndToValues(uint64_t a1, uint64_t a2, WTF **a3, WTF **a4)
{
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  float v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int16 *v28;
  uint64_t v29;

  if ((byte_1ECE84F98 & 1) != 0)
  {
    v8 = (const WTF::StringImpl *)qword_1ECE84F90;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v8 = (const WTF::StringImpl *)v28;
    qword_1ECE84F90 = (uint64_t)v28;
    byte_1ECE84F98 = 1;
  }
  if (WTF::equal(*a3, v8, (const WTF::StringImpl *)a3))
  {
    WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeInheritedCSSPropertyValue((WebCore *)&v27, a1, *(_QWORD *)(a2 + 32));
  }
  else
  {
    v10 = *a3;
    if (*a3)
      *(_DWORD *)v10 += 2;
    v27 = v10;
  }
  if ((byte_1ECE84F98 & 1) != 0)
  {
    v11 = (const WTF::StringImpl *)qword_1ECE84F90;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v11 = (const WTF::StringImpl *)v28;
    qword_1ECE84F90 = (uint64_t)v28;
    byte_1ECE84F98 = 1;
  }
  if (WTF::equal(*a4, v11, v9))
  {
    WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeInheritedCSSPropertyValue((WebCore *)&v26, a1, *(_QWORD *)(a2 + 32));
  }
  else
  {
    v12 = *a4;
    if (*a4)
      *(_DWORD *)v12 += 2;
    v26 = v12;
  }
  if (v27)
  {
    v13 = (unsigned __int16 *)*((_QWORD *)v27 + 1);
    v14 = *((unsigned int *)v27 + 1);
    if ((*((_BYTE *)v27 + 16) & 4) == 0)
    {
      v28 = (unsigned __int16 *)*((_QWORD *)v27 + 1);
      v29 = v14;
      v15 = WebCore::genericParseNumber<char16_t,float>(&v28, 1);
      goto LABEL_20;
    }
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  v28 = v13;
  v29 = v14;
  v15 = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v28, 1);
LABEL_20:
  if (v29)
    v16 = 0;
  else
    v16 = v15;
  v17 = *(float *)&v16;
  if ((v16 & 0xFF00000000) == 0)
    v17 = 0.0;
  *(float *)(a1 + 44) = v17;
  if (v26)
  {
    v18 = (unsigned __int16 *)*((_QWORD *)v26 + 1);
    v19 = *((unsigned int *)v26 + 1);
    if ((*((_BYTE *)v26 + 16) & 4) == 0)
    {
      v28 = (unsigned __int16 *)*((_QWORD *)v26 + 1);
      v29 = v19;
      v20 = WebCore::genericParseNumber<char16_t,float>(&v28, 1);
      goto LABEL_30;
    }
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  v28 = v18;
  v29 = v19;
  v20 = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v28, 1);
LABEL_30:
  if (v29)
    v22 = 0;
  else
    v22 = v20;
  v23 = *(float *)&v22;
  if ((v22 & 0xFF00000000) == 0)
    v23 = 0.0;
  *(float *)(a1 + 48) = v23;
  v24 = v26;
  v26 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationNumberFunction>::setFromAndByValues(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 24))(a1 + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, a2);
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationNumberFunction>::setToAtEndOfDurationValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  float v8;
  unsigned __int16 *v9;
  uint64_t v10;

  v3 = *a2;
  if (*a2)
  {
    v4 = *(unsigned __int16 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4);
    if ((*(_BYTE *)(v3 + 16) & 4) == 0)
    {
      v9 = *(unsigned __int16 **)(v3 + 8);
      v10 = v5;
      result = WebCore::genericParseNumber<char16_t,float>(&v9, 1);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v9 = v4;
  v10 = v5;
  result = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v9, 1);
LABEL_6:
  if (v10)
    v7 = 0;
  else
    v7 = result;
  v8 = *(float *)&v7;
  if ((v7 & 0xFF00000000) == 0)
    v8 = 0.0;
  *(float *)(a1 + 52) = v8;
  *(_BYTE *)(a1 + 56) = 1;
  return result;
}

WTF::StringImpl *WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>::start(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  float v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  unsigned __int16 *v17;
  uint64_t v18;

  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  v7 = WebCore::cssPropertyID(v5, (const char *)v6);
  WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeCSSPropertyValue((WebCore *)&v16, a2, v7);
  v8 = *(_QWORD *)(a1 + 64);
  if (v16)
  {
    v9 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
    v10 = *((unsigned int *)v16 + 1);
    if ((*((_BYTE *)v16 + 16) & 4) == 0)
    {
      v17 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
      v18 = v10;
      v11 = WebCore::genericParseNumber<char16_t,float>(&v17, 1);
      goto LABEL_9;
    }
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v17 = v9;
  v18 = v10;
  v11 = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v17, 1);
LABEL_9:
  if (v18)
    v13 = 0;
  else
    v13 = v11;
  v14 = *(float *)&v13;
  if ((v13 & 0xFF00000000) == 0)
    v14 = 0.0;
  *(float *)(v8 + 28) = v14;
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

float WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>::animate(uint64_t a1, float a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  int v5;
  float *v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  BOOL v14;
  BOOL v15;
  float result;

  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = (float *)(a1 + 44);
  v8 = *(float *)(v4 + 28);
  v7 = (float *)(v4 + 28);
  v9 = v8;
  if (v5 == 3)
    v6 = v7;
  v10 = *v6;
  v11 = 52;
  if (!*(_BYTE *)(a1 + 56))
    v11 = 48;
  if (a2 >= 0.5)
    v12 = *(float *)(a1 + 48);
  else
    v12 = v10;
  v13 = v10 + (float)((float)(*(float *)(a1 + 48) - v10) * a2);
  if (!*(_BYTE *)(a1 + 41))
    v13 = v12;
  if (*(_BYTE *)(a1 + 42))
    v14 = a4 == 0;
  else
    v14 = 1;
  if (!v14)
    v13 = v13 + (float)(*(float *)(a1 + v11) * (float)a4);
  if (*(_BYTE *)(a1 + 43))
    v15 = v5 == 3;
  else
    v15 = 1;
  if (v15)
    v9 = -0.0;
  result = v13 + v9;
  *v7 = result;
  return result;
}

WTF::StringImpl *WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>::apply(WTF::String *a1, WebCore::SVGElement *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  WTF::String::number(a1, *(float *)(*((_QWORD *)a1 + 8) + 28));
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange((uint64_t)a1, a2, (const WTF::String *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationNumberFunction>::calculateDistance(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  unsigned __int16 *v18;
  uint64_t v19;

  v5 = *a4;
  if (*a4)
  {
    v6 = *(unsigned __int16 **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4);
    if ((*(_BYTE *)(v5 + 16) & 4) == 0)
    {
      v18 = *(unsigned __int16 **)(v5 + 8);
      v19 = v7;
      v8 = WebCore::genericParseNumber<char16_t,float>(&v18, 1);
      goto LABEL_6;
    }
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v18 = v6;
  v19 = v7;
  v8 = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v18, 1);
LABEL_6:
  if (v19)
    v9 = 0;
  else
    v9 = v8;
  v10 = *a3;
  if (*a3)
  {
    v11 = *(unsigned __int16 **)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4);
    if ((*(_BYTE *)(v10 + 16) & 4) == 0)
    {
      v18 = *(unsigned __int16 **)(v10 + 8);
      v19 = v12;
      v13 = WebCore::genericParseNumber<char16_t,float>(&v18, 1);
      goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v18 = v11;
  v19 = v12;
  v13 = WebCore::genericParseNumber<unsigned char,float>((uint64_t *)&v18, 1);
LABEL_14:
  if (v19)
    v14 = 0;
  else
    v14 = v13;
  v15 = *(float *)&v9;
  v16 = 0.0;
  if ((v9 & 0xFF00000000) == 0)
    v15 = 0.0;
  if ((v14 & 0xFF00000000) != 0)
    v16 = *(float *)&v14;
  return COERCE_UNSIGNED_INT(fabs(v15 - v16)) | 0x100000000;
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SVGValueProperty<float>,WTF::RawPtrTraits<WebCore::SVGValueProperty<float>>,WTF::DefaultRefDerefTraits<WebCore::SVGValueProperty<float>>> (*)(void),WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>,WTF::RawPtrTraits<WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>>,WTF::DefaultRefDerefTraits<WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL),WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WTF::Ref<WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>,WTF::RawPtrTraits<WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>>,WTF::DefaultRefDerefTraits<WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>,WTF::RawPtrTraits<WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>>,WTF::DefaultRefDerefTraits<WebCore::SVGPrimitivePropertyAnimator<float,WebCore::SVGAnimationNumberFunction>>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,BOOL,BOOL>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5, a6, a7);
}

_QWORD *WebCore::SVGValueProperty<WTF::String>::~SVGValueProperty(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E3459AC0;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WebCore::SVGValueProperty<WTF::String>::~SVGValueProperty(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E3459AC0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>::~SVGPrimitivePropertyAnimator(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E3459AF8;
  v3 = (_DWORD *)a1[8];
  a1[8] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *a1 = off_1E3459B60;
  a1[4] = off_1E3452DD8;
  v4 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[2];
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)a1[2];
    a1[2] = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    a1[2] = 0;
  }
  return a1;
}

uint64_t WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>::~SVGPrimitivePropertyAnimator(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_1E3459AF8;
  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E3459B60;
  *((_QWORD *)this + 4) = off_1E3452DD8;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationStringFunction>::isDiscrete()
{
  return 1;
}

WTF::StringImpl *WebCore::SVGPropertyAnimator<WebCore::SVGAnimationStringFunction>::setFromAndToValues(uint64_t a1, uint64_t a2, WTF **a3, WTF **a4)
{
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  if ((byte_1ECE84FA8 & 1) != 0)
  {
    v8 = (WTF::StringImpl *)qword_1ECE84FA0;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v8 = v20;
    qword_1ECE84FA0 = (uint64_t)v20;
    byte_1ECE84FA8 = 1;
  }
  if (WTF::equal(*a3, v8, (const WTF::StringImpl *)a3))
  {
    WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeInheritedCSSPropertyValue((WebCore *)&v19, a1, *(_QWORD *)(a2 + 32));
  }
  else
  {
    v10 = *a3;
    if (*a3)
      *(_DWORD *)v10 += 2;
    v19 = v10;
  }
  if ((byte_1ECE84FA8 & 1) != 0)
  {
    v11 = (WTF::StringImpl *)qword_1ECE84FA0;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v11 = v20;
    qword_1ECE84FA0 = (uint64_t)v20;
    byte_1ECE84FA8 = 1;
  }
  if (WTF::equal(*a4, v11, v9))
  {
    WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeInheritedCSSPropertyValue((WebCore *)&v20, a1, *(_QWORD *)(a2 + 32));
  }
  else
  {
    v13 = *a4;
    if (*a4)
      *(_DWORD *)v13 += 2;
    v20 = v13;
  }
  v14 = v19;
  if (v19)
    *(_DWORD *)v19 += 2;
  v15 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v20;
  if (v20)
    *(_DWORD *)v20 += 2;
  v17 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v12);
      v16 = v20;
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>::start(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  v7 = WebCore::cssPropertyID(v5, (const char *)v6);
  WebCore::SVGPropertyAnimator<WebCore::SVGAnimationColorFunction>::computeCSSPropertyValue((WebCore *)&v13, a2, v7);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = v13;
  if (v13)
    *(_DWORD *)v13 += 4;
  v11 = *(WTF::StringImpl **)(v9 + 32);
  *(_QWORD *)(v9 + 32) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v8);
      if (!v10)
        goto LABEL_11;
      goto LABEL_9;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v10)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, v8);
  else
    *(_DWORD *)v10 -= 2;
LABEL_11:
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>::animate(uint64_t a1, WTF::StringImpl *a2, float a3)
{
  uint64_t v3;
  int v4;
  _DWORD *v8;
  WTF::StringImpl *result;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(unsigned __int8 *)(a1 + 40);
  if (a3 > 0.5 && v4 == 1 || a3 == 1.0 || v4 == 3)
  {
    v8 = *(_DWORD **)(a1 + 56);
    if (!v8)
      goto LABEL_14;
    goto LABEL_13;
  }
  v8 = *(_DWORD **)(a1 + 48);
  if (v8)
LABEL_13:
    *v8 += 2;
LABEL_14:
  result = *(WTF::StringImpl **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v8;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  v2 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 64) + 32);
  if (v2)
    *(_DWORD *)v2 += 2;
  v5 = v2;
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGPropertyAnimator<WebCore::SVGAnimationStringFunction>::calculateDistance()
{
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SVGValueProperty<WTF::String>,WTF::RawPtrTraits<WebCore::SVGValueProperty<WTF::String>>,WTF::DefaultRefDerefTraits<WebCore::SVGValueProperty<WTF::String>>> (*)(void),WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>,WTF::RawPtrTraits<WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>>,WTF::DefaultRefDerefTraits<WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL),WTF::Ref<WebCore::SVGAttributeAnimator,WTF::RawPtrTraits<WTF::Ref<WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>,WTF::RawPtrTraits<WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>>,WTF::DefaultRefDerefTraits<WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>,WTF::RawPtrTraits<WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>>,WTF::DefaultRefDerefTraits<WebCore::SVGPrimitivePropertyAnimator<WTF::String,WebCore::SVGAnimationStringFunction>>> (*)(WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,WebCore::CalcMode,BOOL,BOOL)>>,WebCore::QualifiedName const&,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>> &&,WebCore::AnimationMode,BOOL,BOOL>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5, a6, a7);
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Ref<WebCore::SVGProperty,WTF::RawPtrTraits<WebCore::SVGProperty>,WTF::DefaultRefDerefTraits<WebCore::SVGProperty>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(uint64_t *a1, unsigned int a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WTF::StringImpl **v17;
  WTF::StringImpl **v18;
  int v19;
  WTF::StringImpl ***v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl **v25;
  WebCore::QualifiedName::QualifiedNameImpl *v26;
  int v27;
  WTF::StringImpl **v28;
  int v29;
  int v30;
  WTF::StringImpl ***v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  BOOL v35;
  WTF *v36;
  void *v37;
  int v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl **v41;
  WebCore::QualifiedName::QualifiedNameImpl *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  _DWORD *v45;
  WebCore::QualifiedName::QualifiedNameImpl *v46;
  WTF *v47;
  void *v48;
  WTF *v49;
  void *v50;
  WTF *v51;
  void *v52;
  WTF *v53;
  void *v54;
  WTF::StringImpl ***result;
  uint64_t v56;
  uint64_t v57;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a2)
  {
    v10 = a2;
    v11 = (_QWORD *)(v7 + 24);
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v56 = v5;
    v57 = v4;
    do
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = (WTF::StringImpl **)*v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
        if (v18)
        {
          v19 = (*(_DWORD *)v18)++;
          if (v19)
          {
            *(_DWORD *)v18 = v19;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
            WTF::fastFree(v47, v48);
            v9 = &webThreadDelegateMessageScopeCount;
          }
        }
        if (v17 == v18)
        {
          v23 = v4 + 16 * v13;
          v24 = *(_DWORD **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            if (v24[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
              v9 = &webThreadDelegateMessageScopeCount;
            }
            else
            {
              --v24[2];
            }
          }
          v25 = (WTF::StringImpl **)*v16;
          *v16 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
              WTF::fastFree(v53, v54);
              v9 = &webThreadDelegateMessageScopeCount;
            }
            else
            {
              --*(_DWORD *)v25;
            }
          }
        }
        else
        {
          v20 = v14;
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v26 = *v16;
          v27 = *((_DWORD *)*v16 + 1);
          if (!v27)
          {
            v27 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*v16);
            v9 = &webThreadDelegateMessageScopeCount;
            *((_DWORD *)v26 + 1) = v27;
          }
          v28 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
          if (v28)
          {
            v29 = 0;
            do
            {
              v30 = v27 & v22;
              v31 = (WTF::StringImpl ***)(v21 + 16 * (v27 & v22));
              if (v28)
              {
                v32 = (*(_DWORD *)v28)++;
                v33 = *v31;
                if (v32)
                {
                  *(_DWORD *)v28 = v32;
                  v34 = (uint64_t)v28;
                }
                else
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
                  WTF::fastFree(v36, v37);
                  v9 = &webThreadDelegateMessageScopeCount;
                  v34 = WebCore::nullName;
                }
              }
              else
              {
                v34 = 0;
                v33 = *v31;
              }
              v27 = ++v29 + v30;
              v35 = v33 == v28;
              v28 = (WTF::StringImpl **)v34;
            }
            while (!v35);
          }
          else
          {
            v38 = 0;
            do
            {
              v39 = v27 & v22;
              v27 = ++v38 + v39;
            }
            while (*(_QWORD *)(v21 + 16 * v39));
            v31 = (WTF::StringImpl ***)(v21 + 16 * v39);
          }
          v40 = v31[1];
          v31[1] = 0;
          v14 = v20;
          v15 = v56;
          v4 = v57;
          if (v40)
          {
            if (*((_DWORD *)v40 + 2) == 1)
            {
              (*((void (**)(WTF::StringImpl **))*v40 + 1))(v40);
              v9 = &webThreadDelegateMessageScopeCount;
            }
            else
            {
              --*((_DWORD *)v40 + 2);
            }
          }
          v41 = *v31;
          *v31 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
              WTF::fastFree(v49, v50);
              v9 = &webThreadDelegateMessageScopeCount;
            }
            else
            {
              --*(_DWORD *)v41;
            }
          }
          v42 = *v16;
          *v16 = 0;
          *v31 = (WTF::StringImpl **)v42;
          v43 = v57 + 16 * v13;
          v44 = *(WTF::StringImpl ***)(v43 + 8);
          *(_QWORD *)(v43 + 8) = 0;
          v31[1] = v44;
          v45 = *(_DWORD **)(v43 + 8);
          *(_QWORD *)(v43 + 8) = 0;
          if (v45)
          {
            if (v45[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
              v9 = &webThreadDelegateMessageScopeCount;
            }
            else
            {
              --v45[2];
            }
          }
          v46 = *v16;
          *v16 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v46);
              WTF::fastFree(v51, v52);
              v9 = &webThreadDelegateMessageScopeCount;
            }
            else
            {
              --*(_DWORD *)v46;
            }
          }
          if (v16 == a3)
            v14 = v31;
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v14;
}

uint64_t *WebCore::SVGEllipseElement::SVGEllipseElement(uint64_t *a1, _DWORD **a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char v10;
  char **v11;
  char *v12;

  *a1 = (uint64_t)off_1E3457DC8;
  a1[14] = (uint64_t)&unk_1E3458348;
  a1[22] = (uint64_t)&unk_1E3458380;
  v6 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E3459EF8;
  *((_QWORD *)v6 + 1) = a1;
  v12 = v6;
  WebCore::SVGGeometryElement::SVGGeometryElement((uint64_t)a1, a2, a3, (uint64_t *)&v12);
  v7 = (uint64_t)v12;
  v12 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *a1 = (uint64_t)off_1E3457DC8;
  a1[14] = (uint64_t)&unk_1E3458348;
  a1[22] = (uint64_t)&unk_1E3458380;
  LOBYTE(v12) = 0;
  WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::create<WebCore::SVGLengthMode>((uint64_t)a1, &v12, a1 + 28);
  LOBYTE(v12) = 1;
  WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::create<WebCore::SVGLengthMode>((uint64_t)a1, &v12, a1 + 29);
  LOBYTE(v12) = 0;
  WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::create<WebCore::SVGLengthMode>((uint64_t)a1, &v12, a1 + 30);
  LOBYTE(v12) = 1;
  WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::create<WebCore::SVGLengthMode>((uint64_t)a1, &v12, a1 + 31);
  v8 = atomic_load(&WebCore::SVGEllipseElement::SVGEllipseElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v8 != -1)
  {
    v11 = &v12;
    v12 = &v10;
    std::__call_once(&WebCore::SVGEllipseElement::SVGEllipseElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGEllipseElement::SVGEllipseElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::create<WebCore::SVGLengthMode>@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)v6 = off_1E3456B10;
  LOBYTE(a2) = *a2;
  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = v6;
  *(_WORD *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(_BYTE *)(result + 32) = 1;
  *(_BYTE *)(result + 33) = (_BYTE)a2;
  *(_QWORD *)result = off_1E32EE148;
  *(_QWORD *)(v6 + 40) = result;
  *(_QWORD *)(v6 + 48) = 0;
  *a3 = v6;
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  uint64_t v33;
  WTF::StringImpl ***v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  WTF::StringImpl ***v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl **v56;
  int v57;
  WTF::StringImpl **v58;
  WTF *v60;
  void *v61;
  WTF::StringImpl ***v62;
  uint64_t v63;
  WTF::StringImpl ***v64;
  WTF::StringImpl **v65;
  uint64_t v66;
  int v67;
  WTF::StringImpl **v68;
  uint64_t v69;
  WTF *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl ***v75;
  WTF::StringImpl ***v76;
  WTF::StringImpl **v77;
  int v78;
  WTF::StringImpl **v79;
  WTF *v81;
  void *v82;
  WTF::StringImpl ***v83;
  WTF::StringImpl ***v84;
  uint64_t v85;
  WTF::StringImpl ***v86;
  WTF::StringImpl ***v87;
  WTF::StringImpl **v88;
  int v89;
  WTF::StringImpl **v90;
  WTF *v92;
  void *v93;
  WTF::StringImpl **v94;
  uint64_t v95;
  int v96;
  WTF::StringImpl **v97;
  uint64_t v98;
  WTF *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;

  v1 = result;
  if ((byte_1ECE84FB8 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE84FB0 = 0;
    byte_1ECE84FB8 = 1;
LABEL_22:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE84FB0;
  if (!qword_1ECE84FB0)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_22;
  }
  v3 = *(unsigned int *)(qword_1ECE84FB0 - 4);
  v4 = qword_1ECE84FB0 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE84FB0 - 12))
  {
    v13 = qword_1ECE84FB0 + 16 * v3;
    goto LABEL_22;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE84FB0;
    if (!qword_1ECE84FB0)
      goto LABEL_31;
    goto LABEL_30;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE84FB0;
    if (qword_1ECE84FB0)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84FB0 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE84FB0)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE84FB0 + v14;
    if (qword_1ECE84FB0)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v34 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_215;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v34 = 0;
    v23 = 0;
LABEL_215:
    v24 = &v22[2 * v23];
    goto LABEL_72;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v34 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_215;
  }
  if ((_DWORD)v23)
  {
    v25 = (WTF::StringImpl **)WebCore::nullName;
    v26 = 16 * v23;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v25)
        {
          v27 = (*(_DWORD *)v25)++;
          v28 = *v22;
          if (v27)
          {
            *(_DWORD *)v25 = v27;
            v29 = (uint64_t)v25;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
            result = WTF::fastFree(v31, v32);
            v29 = WebCore::nullName;
          }
        }
        else
        {
          v29 = 0;
          v28 = *v22;
        }
        if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
          break;
        v22 += 2;
        v25 = (WTF::StringImpl **)v29;
        v26 -= 16;
        if (!v26)
        {
          v22 = v24;
          break;
        }
      }
      v34 = v22;
      v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v33 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v33)
                               + 1) <= 1)
      {
        v33 += 16;
        if (v26 == v33)
        {
          v34 = v24;
          goto LABEL_72;
        }
      }
      v34 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v33);
    }
  }
  else
  {
    v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_72:
  if (v22)
    v22 += 2 * *((unsigned int *)v22 - 1);
  while (v34 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v34[1] + 2))(v34[1], *(_QWORD *)(v1 + 8));
    v35 = v34 + 2;
    v34 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_77:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_90;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_77;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_90:
            v34 = v24;
            goto LABEL_92;
          }
        }
      }
      v34 = v35;
    }
LABEL_92:
    ;
  }
  {
    v42 = 0;
    v54 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_217;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v54 = 0;
    v43 = 0;
LABEL_217:
    v44 = &v42[2 * v43];
    goto LABEL_115;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v54 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_217;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    v46 = 16 * v43;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v54 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v46 == v53)
        {
          v54 = v44;
          goto LABEL_115;
        }
      }
      v54 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v54 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_115:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v54 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v54[1] + 2))(v54[1], *(_QWORD *)(v1 + 8));
    v55 = v54 + 2;
    v54 = v44;
    if (v55 != v44)
    {
      v56 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_120:
        v57 = (*(_DWORD *)v56)++;
        v58 = *v55;
        if (v57)
        {
          *(_DWORD *)v56 = v57;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v56);
          result = WTF::fastFree(v60, v61);
        }
        while (v58 == v56 || (WTF::StringImpl **)((char *)*v55 + 1) == 0)
        {
          v55 += 2;
          if (v55 == v44)
            goto LABEL_133;
          v56 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_120;
          v58 = *v55;
        }
      }
      else
      {
        while ((unint64_t)*v55 + 1 <= 1)
        {
          v55 += 2;
          if (v55 == v44)
          {
LABEL_133:
            v54 = v44;
            goto LABEL_135;
          }
        }
      }
      v54 = v55;
    }
LABEL_135:
    ;
  }
  {
    v62 = 0;
    v75 = 0;
    v63 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_219;
  }
  v62 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v75 = 0;
    v63 = 0;
LABEL_219:
    v64 = &v62[2 * v63];
    goto LABEL_159;
  }
  v63 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v64 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v63);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v75 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v63);
    goto LABEL_219;
  }
  if ((_DWORD)v63)
  {
    v65 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v66 = 16 * v63;
      while (1)
      {
        if (v65)
        {
          v67 = (*(_DWORD *)v65)++;
          v68 = *v62;
          if (v67)
          {
            *(_DWORD *)v65 = v67;
            v69 = (uint64_t)v65;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v65);
            result = WTF::fastFree(v71, v72);
            v69 = WebCore::nullName;
          }
        }
        else
        {
          v69 = 0;
          v68 = *v62;
        }
        if (v68 != v65 && (WTF::StringImpl **)((char *)*v62 + 1) != 0)
          break;
        v62 += 2;
        v65 = (WTF::StringImpl **)v69;
        v66 -= 16;
        if (!v66)
        {
          v62 = v64;
          break;
        }
      }
      v75 = v62;
      v62 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v73 = 0;
      v74 = 16 * v63;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v73)
                               + 1) <= 1)
      {
        v73 += 16;
        if (v74 == v73)
        {
          v75 = v64;
          goto LABEL_159;
        }
      }
      v75 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v73);
    }
  }
  else
  {
    v75 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_159:
  if (v62)
    v62 += 2 * *((unsigned int *)v62 - 1);
  while (v75 != v62)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v75[1] + 2))(v75[1], *(_QWORD *)(v1 + 8));
    v76 = v75 + 2;
    v75 = v64;
    if (v76 != v64)
    {
      v77 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_164:
        v78 = (*(_DWORD *)v77)++;
        v79 = *v76;
        if (v78)
        {
          *(_DWORD *)v77 = v78;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v77);
          result = WTF::fastFree(v81, v82);
        }
        while (v79 == v77 || (WTF::StringImpl **)((char *)*v76 + 1) == 0)
        {
          v76 += 2;
          if (v76 == v64)
            goto LABEL_177;
          v77 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_164;
          v79 = *v76;
        }
      }
      else
      {
        while ((unint64_t)*v76 + 1 <= 1)
        {
          v76 += 2;
          if (v76 == v64)
          {
LABEL_177:
            v75 = v64;
            goto LABEL_179;
          }
        }
      }
      v75 = v76;
    }
LABEL_179:
    ;
  }
  {
    v83 = 0;
    v84 = 0;
    v85 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_183;
  }
  v83 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v84 = 0;
    v85 = 0;
LABEL_183:
    v86 = &v83[2 * v85];
    goto LABEL_184;
  }
  v85 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v86 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v85);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v84 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v85);
    goto LABEL_183;
  }
  if ((_DWORD)v85)
  {
    v94 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v95 = 16 * v85;
      while (1)
      {
        if (v94)
        {
          v96 = (*(_DWORD *)v94)++;
          v97 = *v83;
          if (v96)
          {
            *(_DWORD *)v94 = v96;
            v98 = (uint64_t)v94;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v94);
            result = WTF::fastFree(v100, v101);
            v98 = WebCore::nullName;
          }
        }
        else
        {
          v98 = 0;
          v97 = *v83;
        }
        if (v97 != v94 && (WTF::StringImpl **)((char *)*v83 + 1) != 0)
          break;
        v83 += 2;
        v94 = (WTF::StringImpl **)v98;
        v95 -= 16;
        if (!v95)
        {
          v83 = v86;
          break;
        }
      }
      v84 = v83;
      v83 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v102 = 0;
      v103 = 16 * v85;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v102)
                               + 1) <= 1)
      {
        v102 += 16;
        if (v103 == v102)
        {
          v84 = v86;
          goto LABEL_184;
        }
      }
      v84 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v102);
    }
  }
  else
  {
    v84 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_184:
  if (v83)
    v83 += 2 * *((unsigned int *)v83 - 1);
  while (v84 != v83)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t))*v84[1] + 2))(v84[1], *(_QWORD *)(v1 + 8) + 184);
    v87 = v84 + 2;
    v84 = v86;
    if (v87 != v86)
    {
      v88 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_189:
        v89 = (*(_DWORD *)v88)++;
        v90 = *v87;
        if (v89)
        {
          *(_DWORD *)v88 = v89;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v88);
          result = WTF::fastFree(v92, v93);
        }
        while (v90 == v88 || (WTF::StringImpl **)((char *)*v87 + 1) == 0)
        {
          v87 += 2;
          if (v87 == v86)
            goto LABEL_202;
          v88 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_189;
          v90 = *v87;
        }
      }
      else
      {
        while ((unint64_t)*v87 + 1 <= 1)
        {
          v87 += 2;
          if (v87 == v86)
          {
LABEL_202:
            v84 = v86;
            goto LABEL_204;
          }
        }
      }
      v84 = v87;
    }
LABEL_204:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  int v22;
  WTF::StringImpl **v23;
  WTF *v25;
  void *v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF *v36;
  void *v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl ***v65;
  uint64_t v66;
  WTF::StringImpl ***v67;
  WTF::StringImpl **v68;
  uint64_t v69;
  int v70;
  WTF::StringImpl **v71;
  uint64_t v72;
  WTF *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl ***v78;
  WTF::StringImpl **v79;
  int v80;
  WTF::StringImpl **v81;
  WTF *v83;
  void *v84;
  WTF::StringImpl ***v85;
  uint64_t v86;
  WTF::StringImpl ***v87;
  WTF::StringImpl ***v88;
  WTF::StringImpl **v89;
  int v90;
  WTF::StringImpl **v91;
  WTF *v93;
  void *v94;
  WTF::StringImpl **v95;
  WTF *v96;
  void *v97;
  WTF::StringImpl **v98;
  uint64_t v99;
  int v100;
  WTF::StringImpl **v101;
  uint64_t v102;
  WTF *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE84FB8 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE84FB0 = 0;
    byte_1ECE84FB8 = 1;
LABEL_25:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_34;
LABEL_33:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_34;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE84FB0;
  if (!qword_1ECE84FB0)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_25;
  }
  v8 = *(unsigned int *)(qword_1ECE84FB0 - 4);
  v9 = qword_1ECE84FB0 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE84FB0 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE84FB0 + 16 * v8);
    goto LABEL_25;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE84FB0;
    if (!qword_1ECE84FB0)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (v6)
  {
    v10 = 16 * v8;
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE84FB0;
    if (qword_1ECE84FB0)
      goto LABEL_33;
  }
  else
  {
    v18 = 0;
    v19 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84FB0 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v19 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE84FB0)
          goto LABEL_33;
        goto LABEL_34;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE84FB0 + v18);
    if (qword_1ECE84FB0)
      goto LABEL_33;
  }
LABEL_34:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_216;
    v20 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v20 != (WTF::StringImpl ***)v9)
    {
      v21 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_38:
        v22 = (*(_DWORD *)v21)++;
        v23 = *v20;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
          result = (WTF::StringImpl **)WTF::fastFree(v25, v26);
        }
        while (v23 == v21 || (WTF::StringImpl **)((char *)*v20 + 1) == 0)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
            goto LABEL_51;
          v21 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_38;
          v23 = *v20;
        }
      }
      else
      {
        while ((unint64_t)*v20 + 1 <= 1)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
          {
LABEL_51:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_53;
          }
        }
      }
      v17 = v20;
    }
LABEL_53:
    ;
  }
  {
    v27 = 0;
    v17 = 0;
    v28 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_230;
  }
  v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v28 = 0;
LABEL_230:
    v29 = &v27[2 * v28];
    goto LABEL_76;
  }
  v28 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v29 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v28);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v28);
    goto LABEL_230;
  }
  if ((_DWORD)v28)
  {
    v30 = (WTF::StringImpl **)WebCore::nullName;
    v31 = 16 * v28;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v30)
        {
          v32 = (*(_DWORD *)v30)++;
          v33 = *v27;
          if (v32)
          {
            *(_DWORD *)v30 = v32;
            v34 = (uint64_t)v30;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
            result = (WTF::StringImpl **)WTF::fastFree(v36, v37);
            v34 = WebCore::nullName;
          }
        }
        else
        {
          v34 = 0;
          v33 = *v27;
        }
        if (v33 != v30 && (WTF::StringImpl **)((char *)*v27 + 1) != 0)
          break;
        v27 += 2;
        v30 = (WTF::StringImpl **)v34;
        v31 -= 16;
        if (!v31)
        {
          v27 = v29;
          break;
        }
      }
      v17 = v27;
      v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v38 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v38)
                               + 1) <= 1)
      {
        v38 += 16;
        if (v31 == v38)
        {
          v17 = v29;
          goto LABEL_76;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v38);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_76:
  if (v27)
    v27 += 2 * *((unsigned int *)v27 - 1);
  while (v17 != v27)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_216;
    v39 = v17 + 2;
    v17 = v29;
    if (v39 != v29)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_82:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v29)
            goto LABEL_95;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_82;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v29)
          {
LABEL_95:
            v17 = v29;
            goto LABEL_97;
          }
        }
      }
      v17 = v39;
    }
LABEL_97:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_232;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_232:
    v48 = &v46[2 * v47];
    goto LABEL_121;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_232;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_121;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_121:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v17 != v46)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_216;
    v58 = v17 + 2;
    v17 = v48;
    if (v58 != v48)
    {
      v59 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v60 = (*(_DWORD *)v59)++;
        v61 = *v58;
        if (v60)
        {
          *(_DWORD *)v59 = v60;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
          result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
        }
        while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
        {
          v58 += 2;
          if (v58 == v48)
            goto LABEL_140;
          v59 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v61 = *v58;
        }
      }
      else
      {
        while ((unint64_t)*v58 + 1 <= 1)
        {
          v58 += 2;
          if (v58 == v48)
          {
LABEL_140:
            v17 = v48;
            goto LABEL_142;
          }
        }
      }
      v17 = v58;
    }
LABEL_142:
    ;
  }
  {
    v65 = 0;
    v17 = 0;
    v66 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_234;
  }
  v65 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v66 = 0;
LABEL_234:
    v67 = &v65[2 * v66];
    goto LABEL_167;
  }
  v66 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v67 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v66);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v66);
    goto LABEL_234;
  }
  if ((_DWORD)v66)
  {
    v68 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v69 = 16 * v66;
      while (1)
      {
        if (v68)
        {
          v70 = (*(_DWORD *)v68)++;
          v71 = *v65;
          if (v70)
          {
            *(_DWORD *)v68 = v70;
            v72 = (uint64_t)v68;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v68);
            result = (WTF::StringImpl **)WTF::fastFree(v74, v75);
            v72 = WebCore::nullName;
          }
        }
        else
        {
          v72 = 0;
          v71 = *v65;
        }
        if (v71 != v68 && (WTF::StringImpl **)((char *)*v65 + 1) != 0)
          break;
        v65 += 2;
        v68 = (WTF::StringImpl **)v72;
        v69 -= 16;
        if (!v69)
        {
          v65 = v67;
          break;
        }
      }
      v17 = v65;
      v65 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v76 = 0;
      v77 = 16 * v66;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v76)
                               + 1) <= 1)
      {
        v76 += 16;
        if (v77 == v76)
        {
          v17 = v67;
          goto LABEL_167;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v76);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_167:
  if (v65)
    v65 += 2 * *((unsigned int *)v65 - 1);
  while (v17 != v65)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_216;
    v78 = v17 + 2;
    v17 = v67;
    if (v78 != v67)
    {
      v79 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_173:
        v80 = (*(_DWORD *)v79)++;
        v81 = *v78;
        if (v80)
        {
          *(_DWORD *)v79 = v80;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v79);
          result = (WTF::StringImpl **)WTF::fastFree(v83, v84);
        }
        while (v81 == v79 || (WTF::StringImpl **)((char *)*v78 + 1) == 0)
        {
          v78 += 2;
          if (v78 == v67)
            goto LABEL_186;
          v79 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_173;
          v81 = *v78;
        }
      }
      else
      {
        while ((unint64_t)*v78 + 1 <= 1)
        {
          v78 += 2;
          if (v78 == v67)
          {
LABEL_186:
            v17 = v67;
            goto LABEL_188;
          }
        }
      }
      v17 = v78;
    }
LABEL_188:
    ;
  }
  {
    v85 = 0;
    v17 = 0;
    v86 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_192;
  }
  v85 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v86 = 0;
LABEL_192:
    v87 = &v85[2 * v86];
    goto LABEL_193;
  }
  v86 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v87 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v86);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v86);
    goto LABEL_192;
  }
  if ((_DWORD)v86)
  {
    v98 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v99 = 16 * v86;
      while (1)
      {
        if (v98)
        {
          v100 = (*(_DWORD *)v98)++;
          v101 = *v85;
          if (v100)
          {
            *(_DWORD *)v98 = v100;
            v102 = (uint64_t)v98;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v98);
            result = (WTF::StringImpl **)WTF::fastFree(v104, v105);
            v102 = WebCore::nullName;
          }
        }
        else
        {
          v102 = 0;
          v101 = *v85;
        }
        if (v101 != v98 && (WTF::StringImpl **)((char *)*v85 + 1) != 0)
          break;
        v85 += 2;
        v98 = (WTF::StringImpl **)v102;
        v99 -= 16;
        if (!v99)
        {
          v85 = v87;
          break;
        }
      }
      v17 = v85;
      v85 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v106 = 0;
      v107 = 16 * v86;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v106)
                               + 1) <= 1)
      {
        v106 += 16;
        if (v107 == v106)
        {
          v17 = v87;
          goto LABEL_193;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v106);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_193:
  if (v85)
    v85 += 2 * *((unsigned int *)v85 - 1);
  if (v85 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 5))(v17[1], (uint64_t)v4[1] + 184, a2);
      if ((_DWORD)result)
        break;
      v88 = v17 + 2;
      v17 = v87;
      if (v88 != v87)
      {
        v89 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_199:
          v90 = (*(_DWORD *)v89)++;
          v91 = *v88;
          if (v90)
          {
            *(_DWORD *)v89 = v90;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v89);
            result = (WTF::StringImpl **)WTF::fastFree(v93, v94);
          }
          while (v91 == v89 || (WTF::StringImpl **)((char *)*v88 + 1) == 0)
          {
            v88 += 2;
            if (v88 == v87)
              goto LABEL_212;
            v89 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_199;
            v91 = *v88;
          }
        }
        else
        {
          while ((unint64_t)*v88 + 1 <= 1)
          {
            v88 += 2;
            if (v88 == v87)
            {
LABEL_212:
              v17 = v87;
              goto LABEL_214;
            }
          }
        }
        v17 = v88;
      }
LABEL_214:
      if (v17 == v85)
        return result;
    }
LABEL_216:
    v95 = *v17;
    if (*v17)
      ++*(_DWORD *)v95;
    result = *a3;
    *a3 = v95;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v96, v97);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  int v22;
  WTF::StringImpl **v23;
  WTF *v25;
  void *v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF *v36;
  void *v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl ***v65;
  uint64_t v66;
  WTF::StringImpl ***v67;
  WTF::StringImpl **v68;
  uint64_t v69;
  int v70;
  WTF::StringImpl **v71;
  uint64_t v72;
  WTF *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl ***v78;
  WTF::StringImpl **v79;
  int v80;
  WTF::StringImpl **v81;
  WTF *v83;
  void *v84;
  WTF::StringImpl ***v85;
  uint64_t v86;
  WTF::StringImpl ***v87;
  WTF::StringImpl ***v88;
  WTF::StringImpl **v89;
  int v90;
  WTF::StringImpl **v91;
  WTF *v93;
  void *v94;
  WTF::StringImpl **v95;
  WTF *v96;
  void *v97;
  WTF::StringImpl **v98;
  uint64_t v99;
  int v100;
  WTF::StringImpl **v101;
  uint64_t v102;
  WTF *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE84FB8 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE84FB0 = 0;
    byte_1ECE84FB8 = 1;
LABEL_25:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_34;
LABEL_33:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_34;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE84FB0;
  if (!qword_1ECE84FB0)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_25;
  }
  v8 = *(unsigned int *)(qword_1ECE84FB0 - 4);
  v9 = qword_1ECE84FB0 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE84FB0 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE84FB0 + 16 * v8);
    goto LABEL_25;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE84FB0;
    if (!qword_1ECE84FB0)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (v6)
  {
    v10 = 16 * v8;
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE84FB0;
    if (qword_1ECE84FB0)
      goto LABEL_33;
  }
  else
  {
    v18 = 0;
    v19 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84FB0 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v19 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE84FB0)
          goto LABEL_33;
        goto LABEL_34;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE84FB0 + v18);
    if (qword_1ECE84FB0)
      goto LABEL_33;
  }
LABEL_34:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_216;
    v20 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v20 != (WTF::StringImpl ***)v9)
    {
      v21 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_38:
        v22 = (*(_DWORD *)v21)++;
        v23 = *v20;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
          result = (WTF::StringImpl **)WTF::fastFree(v25, v26);
        }
        while (v23 == v21 || (WTF::StringImpl **)((char *)*v20 + 1) == 0)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
            goto LABEL_51;
          v21 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_38;
          v23 = *v20;
        }
      }
      else
      {
        while ((unint64_t)*v20 + 1 <= 1)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
          {
LABEL_51:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_53;
          }
        }
      }
      v17 = v20;
    }
LABEL_53:
    ;
  }
  {
    v27 = 0;
    v17 = 0;
    v28 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_230;
  }
  v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v28 = 0;
LABEL_230:
    v29 = &v27[2 * v28];
    goto LABEL_76;
  }
  v28 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v29 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v28);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v28);
    goto LABEL_230;
  }
  if ((_DWORD)v28)
  {
    v30 = (WTF::StringImpl **)WebCore::nullName;
    v31 = 16 * v28;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v30)
        {
          v32 = (*(_DWORD *)v30)++;
          v33 = *v27;
          if (v32)
          {
            *(_DWORD *)v30 = v32;
            v34 = (uint64_t)v30;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
            result = (WTF::StringImpl **)WTF::fastFree(v36, v37);
            v34 = WebCore::nullName;
          }
        }
        else
        {
          v34 = 0;
          v33 = *v27;
        }
        if (v33 != v30 && (WTF::StringImpl **)((char *)*v27 + 1) != 0)
          break;
        v27 += 2;
        v30 = (WTF::StringImpl **)v34;
        v31 -= 16;
        if (!v31)
        {
          v27 = v29;
          break;
        }
      }
      v17 = v27;
      v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v38 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v38)
                               + 1) <= 1)
      {
        v38 += 16;
        if (v31 == v38)
        {
          v17 = v29;
          goto LABEL_76;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v38);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_76:
  if (v27)
    v27 += 2 * *((unsigned int *)v27 - 1);
  while (v17 != v27)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_216;
    v39 = v17 + 2;
    v17 = v29;
    if (v39 != v29)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_82:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v29)
            goto LABEL_95;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_82;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v29)
          {
LABEL_95:
            v17 = v29;
            goto LABEL_97;
          }
        }
      }
      v17 = v39;
    }
LABEL_97:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_232;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_232:
    v48 = &v46[2 * v47];
    goto LABEL_121;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_232;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_121;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_121:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v17 != v46)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_216;
    v58 = v17 + 2;
    v17 = v48;
    if (v58 != v48)
    {
      v59 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v60 = (*(_DWORD *)v59)++;
        v61 = *v58;
        if (v60)
        {
          *(_DWORD *)v59 = v60;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
          result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
        }
        while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
        {
          v58 += 2;
          if (v58 == v48)
            goto LABEL_140;
          v59 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v61 = *v58;
        }
      }
      else
      {
        while ((unint64_t)*v58 + 1 <= 1)
        {
          v58 += 2;
          if (v58 == v48)
          {
LABEL_140:
            v17 = v48;
            goto LABEL_142;
          }
        }
      }
      v17 = v58;
    }
LABEL_142:
    ;
  }
  {
    v65 = 0;
    v17 = 0;
    v66 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_234;
  }
  v65 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v66 = 0;
LABEL_234:
    v67 = &v65[2 * v66];
    goto LABEL_167;
  }
  v66 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v67 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v66);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v66);
    goto LABEL_234;
  }
  if ((_DWORD)v66)
  {
    v68 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v69 = 16 * v66;
      while (1)
      {
        if (v68)
        {
          v70 = (*(_DWORD *)v68)++;
          v71 = *v65;
          if (v70)
          {
            *(_DWORD *)v68 = v70;
            v72 = (uint64_t)v68;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v68);
            result = (WTF::StringImpl **)WTF::fastFree(v74, v75);
            v72 = WebCore::nullName;
          }
        }
        else
        {
          v72 = 0;
          v71 = *v65;
        }
        if (v71 != v68 && (WTF::StringImpl **)((char *)*v65 + 1) != 0)
          break;
        v65 += 2;
        v68 = (WTF::StringImpl **)v72;
        v69 -= 16;
        if (!v69)
        {
          v65 = v67;
          break;
        }
      }
      v17 = v65;
      v65 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v76 = 0;
      v77 = 16 * v66;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v76)
                               + 1) <= 1)
      {
        v76 += 16;
        if (v77 == v76)
        {
          v17 = v67;
          goto LABEL_167;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v76);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_167:
  if (v65)
    v65 += 2 * *((unsigned int *)v65 - 1);
  while (v17 != v65)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_216;
    v78 = v17 + 2;
    v17 = v67;
    if (v78 != v67)
    {
      v79 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_173:
        v80 = (*(_DWORD *)v79)++;
        v81 = *v78;
        if (v80)
        {
          *(_DWORD *)v79 = v80;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v79);
          result = (WTF::StringImpl **)WTF::fastFree(v83, v84);
        }
        while (v81 == v79 || (WTF::StringImpl **)((char *)*v78 + 1) == 0)
        {
          v78 += 2;
          if (v78 == v67)
            goto LABEL_186;
          v79 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_173;
          v81 = *v78;
        }
      }
      else
      {
        while ((unint64_t)*v78 + 1 <= 1)
        {
          v78 += 2;
          if (v78 == v67)
          {
LABEL_186:
            v17 = v67;
            goto LABEL_188;
          }
        }
      }
      v17 = v78;
    }
LABEL_188:
    ;
  }
  {
    v85 = 0;
    v17 = 0;
    v86 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_192;
  }
  v85 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v86 = 0;
LABEL_192:
    v87 = &v85[2 * v86];
    goto LABEL_193;
  }
  v86 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v87 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v86);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v86);
    goto LABEL_192;
  }
  if ((_DWORD)v86)
  {
    v98 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v99 = 16 * v86;
      while (1)
      {
        if (v98)
        {
          v100 = (*(_DWORD *)v98)++;
          v101 = *v85;
          if (v100)
          {
            *(_DWORD *)v98 = v100;
            v102 = (uint64_t)v98;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v98);
            result = (WTF::StringImpl **)WTF::fastFree(v104, v105);
            v102 = WebCore::nullName;
          }
        }
        else
        {
          v102 = 0;
          v101 = *v85;
        }
        if (v101 != v98 && (WTF::StringImpl **)((char *)*v85 + 1) != 0)
          break;
        v85 += 2;
        v98 = (WTF::StringImpl **)v102;
        v99 -= 16;
        if (!v99)
        {
          v85 = v87;
          break;
        }
      }
      v17 = v85;
      v85 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v106 = 0;
      v107 = 16 * v86;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v106)
                               + 1) <= 1)
      {
        v106 += 16;
        if (v107 == v106)
        {
          v17 = v87;
          goto LABEL_193;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v106);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_193:
  if (v85)
    v85 += 2 * *((unsigned int *)v85 - 1);
  if (v85 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 6))(v17[1], (uint64_t)v4[1] + 184, a2);
      if ((_DWORD)result)
        break;
      v88 = v17 + 2;
      v17 = v87;
      if (v88 != v87)
      {
        v89 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_199:
          v90 = (*(_DWORD *)v89)++;
          v91 = *v88;
          if (v90)
          {
            *(_DWORD *)v89 = v90;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v89);
            result = (WTF::StringImpl **)WTF::fastFree(v93, v94);
          }
          while (v91 == v89 || (WTF::StringImpl **)((char *)*v88 + 1) == 0)
          {
            v88 += 2;
            if (v88 == v87)
              goto LABEL_212;
            v89 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_199;
            v91 = *v88;
          }
        }
        else
        {
          while ((unint64_t)*v88 + 1 <= 1)
          {
            v88 += 2;
            if (v88 == v87)
            {
LABEL_212:
              v17 = v87;
              goto LABEL_214;
            }
          }
        }
        v17 = v88;
      }
LABEL_214:
      if (v17 == v85)
        return result;
    }
LABEL_216:
    v95 = *v17;
    if (*v17)
      ++*(_DWORD *)v95;
    result = *a3;
    *a3 = v95;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v96, v97);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::setAnimatedPropertyDirty(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl **result;
  uint64_t v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;

  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::findAccessor(a2);
  if (result
    || (result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::findAccessor((WTF::StringImpl ***)a2)) != 0
    || (result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a2)) != 0)
  {
LABEL_4:
    v7 = *(_QWORD *)(a1 + 8);
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v7, a3);
  }
  {
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_25;
    v9 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v9)
      goto LABEL_11;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_25:
      v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_11:
  {
    if (v8)
      v8 += 2 * *((unsigned int *)v8 - 1);
  }
  else
  {
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v8 != v9)
  {
    result = v9[1];
    if (result)
      goto LABEL_4;
  }
  {
    v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_17:
      result = 0;
      goto LABEL_18;
    }
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!result)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_17;
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    }
  }
  else
  {
    v10 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v7 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v7, a3);
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::synchronize@<X0>(uint64_t *a1@<X1>, _BYTE *a2@<X8>)
{
  WTF::StringImpl **result;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  char v9;

  *a2 = 0;
  a2[8] = 0;
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::findAccessor(a1);
  if (result
    || (result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::findAccessor((WTF::StringImpl ***)a1)) != 0
    || (result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a1)) != 0)
  {
LABEL_4:
    result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 8))(&v8);
    if (v9)
    {
      *(_QWORD *)a2 = v8;
      a2[8] = 1;
    }
    return result;
  }
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a1);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_12;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_27:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_12:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    result = v6[1];
    if (result)
      goto LABEL_4;
  }
  {
    v7 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_18:
      result = 0;
      goto LABEL_19;
    }
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v7 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!result)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_18;
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    }
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      goto LABEL_4;
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl ***v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  WTF::StringImpl ***v67;
  uint64_t v68;
  WTF::StringImpl ***v69;
  WTF::StringImpl **v70;
  uint64_t v71;
  int v72;
  WTF::StringImpl **v73;
  uint64_t v74;
  WTF *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl ***v80;
  WTF::StringImpl *v81;
  WTF::StringImpl ***v82;
  WTF::StringImpl **v83;
  int v84;
  WTF::StringImpl **v85;
  WTF *v87;
  void *v88;
  WTF::StringImpl ***v89;
  WTF::StringImpl ***v90;
  uint64_t v91;
  WTF::StringImpl ***v92;
  WTF::StringImpl *v93;
  WTF::StringImpl ***v94;
  WTF::StringImpl **v95;
  int v96;
  WTF::StringImpl **v97;
  WTF *v99;
  void *v100;
  WTF::StringImpl **v101;
  uint64_t v102;
  int v103;
  WTF::StringImpl **v104;
  uint64_t v105;
  WTF *v107;
  void *v108;
  uint64_t v109;
  _BYTE v110[24];
  WTF::StringImpl *v111;
  char v112;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE84FB8 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE84FB0 = 0;
    byte_1ECE84FB8 = 1;
LABEL_22:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE84FB0;
  if (!qword_1ECE84FB0)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_22;
  }
  v5 = *(unsigned int *)(qword_1ECE84FB0 - 4);
  v6 = qword_1ECE84FB0 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE84FB0 - 12))
  {
    v15 = qword_1ECE84FB0 + 16 * v5;
    goto LABEL_22;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE84FB0;
    if (!qword_1ECE84FB0)
      goto LABEL_31;
    goto LABEL_30;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE84FB0;
    if (qword_1ECE84FB0)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84FB0 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE84FB0)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE84FB0 + v16;
    if (qword_1ECE84FB0)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v111, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v112)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v111, (uint64_t)v110);
      if (v112)
      {
        result = v111;
        v111 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v37 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_250;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v37 = 0;
    v26 = 0;
LABEL_250:
    v27 = &v25[2 * v26];
    goto LABEL_79;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_250;
  }
  if ((_DWORD)v26)
  {
    v28 = (WTF::StringImpl **)WebCore::nullName;
    v29 = 16 * v26;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v28)
        {
          v30 = (*(_DWORD *)v28)++;
          v31 = *v25;
          if (v30)
          {
            *(_DWORD *)v28 = v30;
            v32 = (uint64_t)v28;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
            result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
            v32 = WebCore::nullName;
          }
        }
        else
        {
          v32 = 0;
          v31 = *v25;
        }
        if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
          break;
        v25 += 2;
        v28 = (WTF::StringImpl **)v32;
        v29 -= 16;
        if (!v29)
        {
          v25 = v27;
          break;
        }
      }
      v37 = v25;
      v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v36 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v36)
                               + 1) <= 1)
      {
        v36 += 16;
        if (v29 == v36)
        {
          v37 = v27;
          goto LABEL_79;
        }
      }
      v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v36);
    }
  }
  else
  {
    v37 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_79:
  if (v25)
    v25 += 2 * *((unsigned int *)v25 - 1);
  while (v37 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v37[1]
                                 + 8))(&v111, v37[1], *((_QWORD *)v2 + 1));
    if (v112)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v37, (WTF::StringImpl ***)&v111, (uint64_t)v110);
      if (v112)
      {
        result = v111;
        v111 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v37 + 2;
    v37 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_89:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_102;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_89;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_102:
            v37 = v27;
            goto LABEL_104;
          }
        }
      }
      v37 = v39;
    }
LABEL_104:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_252;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_252:
    v48 = &v46[2 * v47];
    goto LABEL_129;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_252;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_129;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_129:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v111, v58[1], *((_QWORD *)v2 + 1));
    if (v112)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v111, (uint64_t)v110);
      if (v112)
      {
        result = v111;
        v111 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_139:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_152;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_139;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_152:
            v58 = v48;
            goto LABEL_154;
          }
        }
      }
      v58 = v60;
    }
LABEL_154:
    ;
  }
  {
    v67 = 0;
    v80 = 0;
    v68 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_254;
  }
  v67 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v80 = 0;
    v68 = 0;
LABEL_254:
    v69 = &v67[2 * v68];
    goto LABEL_180;
  }
  v68 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v69 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v68);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v80 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v68);
    goto LABEL_254;
  }
  if ((_DWORD)v68)
  {
    v70 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v71 = 16 * v68;
      while (1)
      {
        if (v70)
        {
          v72 = (*(_DWORD *)v70)++;
          v73 = *v67;
          if (v72)
          {
            *(_DWORD *)v70 = v72;
            v74 = (uint64_t)v70;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v70);
            result = (WTF::StringImpl *)WTF::fastFree(v76, v77);
            v74 = WebCore::nullName;
          }
        }
        else
        {
          v74 = 0;
          v73 = *v67;
        }
        if (v73 != v70 && (WTF::StringImpl **)((char *)*v67 + 1) != 0)
          break;
        v67 += 2;
        v70 = (WTF::StringImpl **)v74;
        v71 -= 16;
        if (!v71)
        {
          v67 = v69;
          break;
        }
      }
      v80 = v67;
      v67 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v78 = 0;
      v79 = 16 * v68;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v78)
                               + 1) <= 1)
      {
        v78 += 16;
        if (v79 == v78)
        {
          v80 = v69;
          goto LABEL_180;
        }
      }
      v80 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v78);
    }
  }
  else
  {
    v80 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_180:
  if (v67)
    v67 += 2 * *((unsigned int *)v67 - 1);
  while (v80 != v67)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v80[1]
                                 + 8))(&v111, v80[1], *((_QWORD *)v2 + 1));
    if (v112)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v80, (WTF::StringImpl ***)&v111, (uint64_t)v110);
      if (v112)
      {
        result = v111;
        v111 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v81);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v82 = v80 + 2;
    v80 = v69;
    if (v82 != v69)
    {
      v83 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_190:
        v84 = (*(_DWORD *)v83)++;
        v85 = *v82;
        if (v84)
        {
          *(_DWORD *)v83 = v84;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v83);
          result = (WTF::StringImpl *)WTF::fastFree(v87, v88);
        }
        while (v85 == v83 || (WTF::StringImpl **)((char *)*v82 + 1) == 0)
        {
          v82 += 2;
          if (v82 == v69)
            goto LABEL_203;
          v83 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_190;
          v85 = *v82;
        }
      }
      else
      {
        while ((unint64_t)*v82 + 1 <= 1)
        {
          v82 += 2;
          if (v82 == v69)
          {
LABEL_203:
            v80 = v69;
            goto LABEL_205;
          }
        }
      }
      v80 = v82;
    }
LABEL_205:
    ;
  }
  {
    v89 = 0;
    v90 = 0;
    v91 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_211;
  }
  v89 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v90 = 0;
    v91 = 0;
LABEL_211:
    v92 = &v89[2 * v91];
    goto LABEL_212;
  }
  v91 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v92 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v91);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v90 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v91);
    goto LABEL_211;
  }
  if ((_DWORD)v91)
  {
    v101 = (WTF::StringImpl **)WebCore::nullName;
    v102 = 16 * v91;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v101)
        {
          v103 = (*(_DWORD *)v101)++;
          v104 = *v89;
          if (v103)
          {
            *(_DWORD *)v101 = v103;
            v105 = (uint64_t)v101;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v101);
            result = (WTF::StringImpl *)WTF::fastFree(v107, v108);
            v105 = WebCore::nullName;
          }
        }
        else
        {
          v105 = 0;
          v104 = *v89;
        }
        if (v104 != v101 && (WTF::StringImpl **)((char *)*v89 + 1) != 0)
          break;
        v89 += 2;
        v101 = (WTF::StringImpl **)v105;
        v102 -= 16;
        if (!v102)
        {
          v89 = v92;
          break;
        }
      }
      v90 = v89;
      v89 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v109 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v109)
                               + 1) <= 1)
      {
        v109 += 16;
        if (v102 == v109)
        {
          v90 = v92;
          goto LABEL_212;
        }
      }
      v90 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v109);
    }
  }
  else
  {
    v90 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_212:
  if (v89)
    v89 += 2 * *((unsigned int *)v89 - 1);
  while (v90 != v89)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v90[1]
                                 + 8))(&v111, v90[1], *((_QWORD *)v2 + 1) + 184);
    if (v112)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v90, (WTF::StringImpl ***)&v111, (uint64_t)v110);
      if (v112)
      {
        result = v111;
        v111 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v93);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v94 = v90 + 2;
    v90 = v92;
    if (v94 != v92)
    {
      v95 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_222:
        v96 = (*(_DWORD *)v95)++;
        v97 = *v94;
        if (v96)
        {
          *(_DWORD *)v95 = v96;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v95);
          result = (WTF::StringImpl *)WTF::fastFree(v99, v100);
        }
        while (v97 == v95 || (WTF::StringImpl **)((char *)*v94 + 1) == 0)
        {
          v94 += 2;
          if (v94 == v92)
            goto LABEL_235;
          v95 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_222;
          v97 = *v94;
        }
      }
      else
      {
        while ((unint64_t)*v94 + 1 <= 1)
        {
          v94 += 2;
          if (v94 == v92)
          {
LABEL_235:
            v90 = v92;
            goto LABEL_237;
          }
        }
      }
      v90 = v94;
    }
LABEL_237:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::isAnimatedPropertyAttribute(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::findAccessor(a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::findAccessor((WTF::StringImpl ***)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_24;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_24:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    Accessor = v6[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_16:
      v8 = 0;
      goto LABEL_17;
    }
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!v8)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_16;
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_17:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::isAnimatedStylePropertyAttribute(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **result;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE84FC8 & 1) == 0)
  {
    v12 = WebCore::SVGNames::cxAttr;
    v13 = WebCore::SVGNames::cyAttr;
    v14 = WebCore::SVGNames::rAttr;
    v15 = WebCore::SVGNames::rxAttr;
    v16 = WebCore::SVGNames::ryAttr;
    v17 = WebCore::SVGNames::heightAttr;
    v18 = WebCore::SVGNames::widthAttr;
    v19 = WebCore::SVGNames::xAttr;
    v20[0] = WebCore::SVGNames::yAttr;
    qword_1ECE84FC0 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84FC0, &v12, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84FC0, &v13, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84FC0, &v14, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84FC0, &v15, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84FC0, &v16, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84FC0, &v17, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84FC0, &v18, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84FC0, &v19, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE84FC0, v20, (uint64_t)v11);
    byte_1ECE84FC8 = 1;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::findAccessor(a2);
  if (result)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 4))(result);
    if ((_DWORD)result)
    {
      if (qword_1ECE84FC0)
      {
        v4 = *(_DWORD *)(qword_1ECE84FC0 - 8);
        v5 = ~(*a2 << 32) + *a2;
        v6 = 9
           * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
        v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
        v8 = v4 & ((v7 >> 31) ^ v7);
        v9 = *(_QWORD *)(qword_1ECE84FC0 + 8 * v8);
        if (v9 == *a2)
        {
          return (WTF::StringImpl **)1;
        }
        else
        {
          v10 = 1;
          do
          {
            result = (WTF::StringImpl **)(v9 != 0);
            if (!v9)
              break;
            v8 = (v8 + v10) & v4;
            v9 = *(_QWORD *)(qword_1ECE84FC0 + 8 * v8);
            ++v10;
          }
          while (v9 != *a2);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::createAnimator@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  WTF::StringImpl **result;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl **v7;
  uint64_t v8;

  *a2 = 0;
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::findAccessor(a1);
  if (result
    || (result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::findAccessor((WTF::StringImpl ***)a1)) != 0
    || (result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a1)) != 0)
  {
LABEL_4:
    result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 9))(&v8);
    *a2 = v8;
    return result;
  }
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_26;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a1);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_11;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_26:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_11:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    result = v6[1];
    if (result)
      goto LABEL_4;
  }
  {
    v7 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_17:
      result = 0;
      goto LABEL_18;
    }
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v7 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!result)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_17;
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    }
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      goto LABEL_4;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::appendAnimatedInstance(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl **result;
  uint64_t v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;

  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::findAccessor(a2);
  if (result
    || (result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGeometryElement,WebCore::SVGGraphicsElement>::findAccessor((WTF::StringImpl ***)a2)) != 0
    || (result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a2)) != 0)
  {
LABEL_4:
    v7 = *(_QWORD *)(a1 + 8);
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v7, a3);
  }
  {
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_25;
    v9 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v9)
      goto LABEL_11;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_25:
      v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_11:
  {
    if (v8)
      v8 += 2 * *((unsigned int *)v8 - 1);
  }
  else
  {
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v8 != v9)
  {
    result = v9[1];
    if (result)
      goto LABEL_4;
  }
  {
    v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_17:
      result = 0;
      goto LABEL_18;
    }
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!result)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_17;
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    }
  }
  else
  {
    v10 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v7 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v7, a3);
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::findAccessor(uint64_t *a1)
{
  WTF::StringImpl ***v1;
  uint64_t v2;

  if ((byte_1ECE84FB8 & 1) == 0)
  {
    qword_1ECE84FB0 = 0;
    byte_1ECE84FB8 = 1;
  }
  v1 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
  if ((byte_1ECE84FB8 & 1) != 0)
  {
    v2 = qword_1ECE84FB0;
    if (qword_1ECE84FB0)
      v2 = qword_1ECE84FB0 + 16 * *(unsigned int *)(qword_1ECE84FB0 - 4);
  }
  else
  {
    v2 = 0;
    qword_1ECE84FB0 = 0;
    byte_1ECE84FB8 = 1;
  }
  if ((WTF::StringImpl ***)v2 == v1)
    return 0;
  else
    return v1[1];
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1)
{
  WTF::StringImpl ***result;

  if (!qword_1ECE84FB0)
    return 0;
  result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
  if (result)
    return result;
  if (qword_1ECE84FB0)
    return (WTF::StringImpl ***)(qword_1ECE84FB0 + 16 * *(unsigned int *)(qword_1ECE84FB0 - 4));
  else
    return 0;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  int v5;
  WTF::StringImpl **i;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v14;
  void *v15;

  v1 = qword_1ECE84FB0;
  if (qword_1ECE84FB0)
  {
    v3 = *(_DWORD *)(qword_1ECE84FB0 - 8);
    v4 = WebCore::SVGAttributeHashTranslator::hash(a1);
    v5 = 0;
    for (i = (WTF::StringImpl **)WebCore::nullName; ; i = (WTF::StringImpl **)v11)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (i)
      {
        v9 = (*(_DWORD *)i)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)i = v9;
          v11 = (uint64_t)i;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(i);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == i)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *(WTF::StringImpl **)(v13 + 24) && v12[4] == *(WTF::StringImpl **)(v13 + 32))
        {
          return v8;
        }
      }
      v4 = ++v5 + v7;
    }
  }
  return 0;
}

WTF::Thread *WebCore::SVGEllipseElement::SVGEllipseElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1}::operator()()
{
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::cxAttr,&WebCore::SVGEllipseElement::m_cx>();
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::cyAttr,&WebCore::SVGEllipseElement::m_cy>();
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::rxAttr,&WebCore::SVGEllipseElement::m_rx>();
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::ryAttr,&WebCore::SVGEllipseElement::m_ry>();
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::cxAttr,&WebCore::SVGEllipseElement::m_cx>()
{
  if ((byte_1ECE84FD0 & 1) == 0)
  {
    qword_1ECE85090 = (uint64_t)off_1E3459F68;
    unk_1ECE85098 = 224;
    byte_1ECE84FD0 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::registerProperty(&WebCore::SVGNames::cxAttr, (uint64_t)&qword_1ECE85090);
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::cyAttr,&WebCore::SVGEllipseElement::m_cy>()
{
  if ((byte_1ECE84FD8 & 1) == 0)
  {
    qword_1ECE850A0 = (uint64_t)off_1E3459F68;
    unk_1ECE850A8 = 232;
    byte_1ECE84FD8 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::registerProperty(&WebCore::SVGNames::cyAttr, (uint64_t)&qword_1ECE850A0);
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::rxAttr,&WebCore::SVGEllipseElement::m_rx>()
{
  if ((byte_1ECE84FE0 & 1) == 0)
  {
    qword_1ECE850B0 = (uint64_t)off_1E3459F68;
    unk_1ECE850B8 = 240;
    byte_1ECE84FE0 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::registerProperty(&WebCore::SVGNames::rxAttr, (uint64_t)&qword_1ECE850B0);
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::registerProperty<WebCore::SVGNames::ryAttr,&WebCore::SVGEllipseElement::m_ry>()
{
  if ((byte_1ECE84FE8 & 1) == 0)
  {
    qword_1ECE850C0 = (uint64_t)off_1E3459F68;
    unk_1ECE850C8 = 248;
    byte_1ECE84FE8 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::registerProperty(&WebCore::SVGNames::ryAttr, (uint64_t)&qword_1ECE850C0);
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGEllipseElement,WebCore::SVGGeometryElement>::registerProperty(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((byte_1ECE84FB8 & 1) == 0)
  {
    qword_1ECE84FB0 = 0;
    byte_1ECE84FB8 = 1;
  }
  v4 = a2;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>((uint64_t)&v3, a1, &v4);
}

WTF::Thread *WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF::Thread *v9;
  WTF::Thread *result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = qword_1ECE84FB0;
  if (qword_1ECE84FB0
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(0),
        (v6 = qword_1ECE84FB0) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WebCore::SVGAttributeHashTranslator::hash(a2) & v7;
  v9 = (WTF::Thread *)(v6 + 16 * v8);
  result = (WTF::Thread *)WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>(v9);
  if ((result & 1) == 0)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      v20 = *(_QWORD *)v9;
      if (*(_QWORD *)v9 == -1)
      {
        v18 = (uint64_t *)v9;
      }
      else
      {
        v21 = *a2;
        if (v20 == *a2
          || *(_QWORD *)(v20 + 24) == *(_QWORD *)(v21 + 24) && *(_QWORD *)(v20 + 32) == *(_QWORD *)(v21 + 32))
        {
          if (qword_1ECE84FB0)
            v23 = *(unsigned int *)(qword_1ECE84FB0 - 4);
          else
            v23 = 0;
          v17 = 0;
          v16 = qword_1ECE84FB0 + 16 * v23;
          goto LABEL_11;
        }
      }
      v8 = (v8 + v19) & v7;
      v9 = (WTF::Thread *)(v6 + 16 * v8);
      result = (WTF::Thread *)WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>(v9);
      ++v19;
    }
    while (!(_DWORD)result);
    if (v18)
    {
      v22 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v18 = v22;
      v18[1] = 0;
      --*(_DWORD *)(qword_1ECE84FB0 - 16);
      v9 = (WTF::Thread *)v18;
    }
  }
  result = (WTF::Thread *)WTF::GenericHashTraits<WebCore::QualifiedName>::assignToEmpty<WebCore::QualifiedName,WebCore::QualifiedName const&>((WTF::StringImpl ***)v9, (WTF::StringImpl ***)a2);
  *((_QWORD *)v9 + 1) = *a3;
  if (qword_1ECE84FB0)
    v11 = *(_DWORD *)(qword_1ECE84FB0 - 12) + 1;
  else
    v11 = 1;
  *(_DWORD *)(qword_1ECE84FB0 - 12) = v11;
  v12 = qword_1ECE84FB0;
  if (qword_1ECE84FB0)
    v13 = *(_DWORD *)(qword_1ECE84FB0 - 12);
  else
    v13 = 0;
  v14 = (*(_DWORD *)(qword_1ECE84FB0 - 16) + v13);
  v15 = *(unsigned int *)(qword_1ECE84FB0 - 4);
  if (v15 > 0x400)
  {
    if (v15 > 2 * v14)
      goto LABEL_10;
LABEL_28:
    result = (WTF::Thread *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand((WTF::StringImpl ***)v9);
    v9 = result;
    v12 = qword_1ECE84FB0;
    if (qword_1ECE84FB0)
      v15 = *(unsigned int *)(qword_1ECE84FB0 - 4);
    else
      v15 = 0;
    goto LABEL_10;
  }
  if (3 * v15 <= 4 * v14)
    goto LABEL_28;
LABEL_10:
  v16 = v12 + 16 * v15;
  v17 = 1;
LABEL_11:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v17;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(WTF::StringImpl ***a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE84FB0 && (v2 = *(_DWORD *)(qword_1ECE84FB0 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE84FB0 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v3, a1);
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WTF::StringImpl ***a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t Table;
  void *v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;

  v4 = qword_1ECE84FB0;
  if (qword_1ECE84FB0)
  {
    LODWORD(v5) = *(_DWORD *)(qword_1ECE84FB0 - 4);
    v6 = *(_DWORD *)(qword_1ECE84FB0 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  Table = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::allocateTable(a1);
  qword_1ECE84FB0 = Table;
  *(_DWORD *)(Table - 8) = a1 - 1;
  *(_DWORD *)(Table - 4) = a1;
  *(_DWORD *)(Table - 16) = 0;
  *(_DWORD *)(qword_1ECE84FB0 - 12) = v6;
  v9 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v11 = (WTF::StringImpl ***)v4;
    do
    {
      if (*v11 != (WTF::StringImpl **)-1)
      {
        if (WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>((WTF::Thread *)v11))
        {
          WebCore::QualifiedName::~QualifiedName(v11);
        }
        else
        {
          v12 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert((uint64_t *)v11);
          WebCore::QualifiedName::~QualifiedName(v11);
          if (v11 == a2)
            v9 = v12;
        }
      }
      v11 += 2;
      --v5;
    }
    while (v5);
  }
  else
  {
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v9;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl **v6;
  int v7;
  int v8;
  WTF::StringImpl ***v9;
  int v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  BOOL v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl **v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  WTF *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;

  v2 = *a1;
  v3 = qword_1ECE84FB0;
  if (qword_1ECE84FB0)
    v4 = *(_DWORD *)(qword_1ECE84FB0 - 8);
  else
    v4 = 0;
  if (*(_QWORD *)(v2 + 16))
  {
    v23 = *(_QWORD *)(v2 + 24);
    v24 = *(_QWORD *)(v2 + 32);
    v25 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v26 = v25 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v27 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v26 + (v25 >> 11)) << 16) ^ (v26 + (v25 >> 11));
    v28 = (v23 >> 5) & 0x7FFF800 ^ ((v27 + (unsigned __int16)v23 + (v27 >> 11)) << 16) ^ (v27 + (unsigned __int16)v23 + (v27 >> 11));
    v29 = (v23 >> 37) & 0x7FFF800 ^ ((v28 + WORD2(v23) + (v28 >> 11)) << 16) ^ (v28 + WORD2(v23) + (v28 >> 11));
    v30 = (v24 >> 5) & 0x7FFF800 ^ ((v29 + (unsigned __int16)v24 + (v29 >> 11)) << 16) ^ (v29 + (unsigned __int16)v24 + (v29 >> 11));
    v31 = (v24 >> 37) & 0x7FFF800 ^ ((v30 + WORD2(v24) + (v30 >> 11)) << 16) ^ (v30 + WORD2(v24) + (v30 >> 11));
    v32 = (v31 + (v31 >> 11)) ^ (8 * (v31 + (v31 >> 11)));
    v33 = (v32 + (v32 >> 5)) ^ (4 * (v32 + (v32 >> 5)));
    v34 = (v33 + (v33 >> 15)) ^ ((v33 + (v33 >> 15)) << 10);
    if (v34)
      v5 = v34;
    else
      v5 = 0x800000;
  }
  else
  {
    v5 = *(_DWORD *)(v2 + 4);
    if (!v5)
    {
      v5 = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)v2);
      *(_DWORD *)(v2 + 4) = v5;
    }
  }
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v7 = 0;
    do
    {
      v8 = v5 & v4;
      v9 = (WTF::StringImpl ***)(v3 + 16 * (v5 & v4));
      if (v6)
      {
        v10 = (*(_DWORD *)v6)++;
        v11 = *v9;
        if (v10)
        {
          *(_DWORD *)v6 = v10;
          v12 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          WTF::fastFree(v14, v15);
          v12 = WebCore::nullName;
        }
      }
      else
      {
        v12 = 0;
        v11 = *v9;
      }
      v5 = ++v7 + v8;
      v13 = v11 == v6;
      v6 = (WTF::StringImpl **)v12;
    }
    while (!v13);
    v16 = *v9;
    *v9 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
        WTF::fastFree(v21, v22);
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = v5 & v4;
      v5 = ++v17 + v18;
    }
    while (*(_QWORD *)(v3 + 16 * v18));
    v9 = (WTF::StringImpl ***)(v3 + 16 * v18);
    *v9 = 0;
  }
  v19 = *(_OWORD *)a1;
  *a1 = 0;
  *(_OWORD *)v9 = v19;
  return v9;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGEllipseElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGEllipseElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedLengthAccessor<WebCore::SVGEllipseElement>::isAnimatedLength()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGEllipseElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGEllipseElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGEllipseElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedLengthAccessor<WebCore::SVGEllipseElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + v15) + 40) + 33);
  v17 = WTF::fastMalloc((WTF *)0x68);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = a3;
  *(_QWORD *)v17 = off_1E3456BF8;
  v18 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v18 + 8);
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = 0;
  *(_BYTE *)(v17 + 64) = a4;
  *(_BYTE *)(v17 + 65) = a5;
  *(_BYTE *)(v17 + 66) = a6;
  *(_BYTE *)(v17 + 67) = a7;
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 56) = off_1E3456CB0;
  v20 = 0;
  WebCore::SVGLengthValue::SVGLengthValue(v17 + 68, 2, &v20);
  v20 = 0;
  result = WebCore::SVGLengthValue::SVGLengthValue(v17 + 76, 2, &v20);
  *(_BYTE *)(v17 + 84) = 0;
  *(_BYTE *)(v17 + 92) = 0;
  *(_QWORD *)(v17 + 56) = &off_1E3456C60;
  *(_BYTE *)(v17 + 96) = v16;
  *(_QWORD *)v17 = off_1E3456B90;
  *a8 = v17;
  return result;
}

_QWORD *WebCore::SVGAnimatedLengthAccessor<WebCore::SVGEllipseElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEBlendElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE84FF8 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE84FF0;
  if (!qword_1ECE84FF0)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE84FF0 - 4);
  v4 = qword_1ECE84FF0 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE84FF0 - 12))
  {
    v13 = qword_1ECE84FF0 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE84FF0;
    if (!qword_1ECE84FF0)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE84FF0;
    if (qword_1ECE84FF0)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84FF0 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE84FF0)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE84FF0 + v14;
    if (qword_1ECE84FF0)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEBlendElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE84FF8 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE84FF0;
  if (!qword_1ECE84FF0)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE84FF0 - 4);
  v9 = qword_1ECE84FF0 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE84FF0 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE84FF0 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE84FF0;
    if (!qword_1ECE84FF0)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE84FF0;
    if (qword_1ECE84FF0)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84FF0 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE84FF0)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE84FF0 + v18);
    if (qword_1ECE84FF0)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEBlendElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE84FF8 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE84FF0;
  if (!qword_1ECE84FF0)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE84FF0 - 4);
  v9 = qword_1ECE84FF0 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE84FF0 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE84FF0 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE84FF0;
    if (!qword_1ECE84FF0)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE84FF0;
    if (qword_1ECE84FF0)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84FF0 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE84FF0)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE84FF0 + v18);
    if (qword_1ECE84FF0)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEBlendElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE84FF8 & 1) != 0)
  {
    v6 = qword_1ECE84FF0;
    if (!qword_1ECE84FF0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE84FF0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE84FF0)
      v7 = (WTF::StringImpl ***)(qword_1ECE84FF0 + 16 * *(unsigned int *)(qword_1ECE84FF0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
LABEL_7:
  if ((byte_1ECE84FF8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEBlendElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE84FF8 & 1) != 0)
  {
    v6 = qword_1ECE84FF0;
    if (!qword_1ECE84FF0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE84FF0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE84FF0)
      v7 = (WTF::StringImpl ***)(qword_1ECE84FF0 + 16 * *(unsigned int *)(qword_1ECE84FF0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
LABEL_7:
  if ((byte_1ECE84FF8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_29;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_29:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD))*result
                                    + 8))(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEBlendElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE84FF8 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE84FF0;
  if (!qword_1ECE84FF0)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE84FF0 - 4);
  v6 = qword_1ECE84FF0 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE84FF0 - 12))
  {
    v15 = qword_1ECE84FF0 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE84FF0;
    if (!qword_1ECE84FF0)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE84FF0;
    if (qword_1ECE84FF0)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE84FF0 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE84FF0)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE84FF0 + v16;
    if (qword_1ECE84FF0)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEBlendElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE84FF8 & 1) != 0)
  {
    v3 = qword_1ECE84FF0;
    if (!qword_1ECE84FF0)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE84FF0;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE84FF0)
      v4 = (WTF::StringImpl ***)(qword_1ECE84FF0 + 16 * *(unsigned int *)(qword_1ECE84FF0 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
LABEL_7:
  if ((byte_1ECE84FF8 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEBlendElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE85008 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE85000 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85000, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85000, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85000, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85000, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85000, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85000, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85000, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85000, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85000, v22, (uint64_t)v13);
    byte_1ECE85008 = 1;
  }
  if ((byte_1ECE84FF8 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE84FF0;
  if (!qword_1ECE84FF0)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE84FF0;
  if (!v4)
  {
    if (qword_1ECE84FF0)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE84FF0 + 16 * *(unsigned int *)(qword_1ECE84FF0 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE84FF8 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE85000)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE85000 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85000 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85000 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEBlendElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **result;
  WTF::StringImpl **v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE84FF8 & 1) != 0)
  {
    v14 = qword_1ECE84FF0;
    if (!qword_1ECE84FF0)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = qword_1ECE84FF0;
    if (v15)
      goto LABEL_7;
    if (qword_1ECE84FF0)
      v15 = (WTF::StringImpl ***)(qword_1ECE84FF0 + 16 * *(unsigned int *)(qword_1ECE84FF0 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
LABEL_7:
  if ((byte_1ECE84FF8 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = v15[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))*result
                                    + 9))(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEBlendElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE84FF8 & 1) != 0)
  {
    v6 = qword_1ECE84FF0;
    if (!qword_1ECE84FF0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE84FF0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE84FF0)
      v7 = (WTF::StringImpl ***)(qword_1ECE84FF0 + 16 * *(unsigned int *)(qword_1ECE84FF0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
LABEL_7:
  if ((byte_1ECE84FF8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE84FF0;
  if (!qword_1ECE84FF0)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE84FF0 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(uint64_t *a1)
{
  WTF::StringImpl ***v1;
  WTF::StringImpl ***v2;

  {
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  v1 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
  {
    v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v2 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
  }
  else
  {
    v2 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v2 == v1)
    return 0;
  else
    return v1[1];
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1, uint64_t *a2)
{
  WTF::StringImpl ***result;
  uint64_t v4;

  if (!*a1)
    return 0;
  result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1, a2);
  v4 = *a1;
  if (!result)
  {
    if (v4)
      return (WTF::StringImpl ***)(v4 + 16 * *(unsigned int *)(v4 - 4));
    else
      return 0;
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterPrimitiveStandardAttributes> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  WTF::StringImpl **v6;
  int v7;
  int v8;
  WTF::StringImpl ***v9;
  int v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  unsigned int v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  int v20;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WebCore::SVGAttributeHashTranslator::hash(a2);
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v7 = 0;
    while (1)
    {
      v8 = v5 & v4;
      v9 = (WTF::StringImpl ***)(v2 + 16 * (v5 & v4));
      if (v6)
      {
        v10 = (*(_DWORD *)v6)++;
        v11 = *v9;
        if (v10)
        {
          *(_DWORD *)v6 = v10;
          v12 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          WTF::fastFree(v15, v16);
          v12 = WebCore::nullName;
        }
      }
      else
      {
        v12 = 0;
        v11 = *v9;
      }
      if (v11 == v6)
        break;
      v13 = *v9;
      if (*v9 != (WTF::StringImpl **)-1)
      {
        v14 = *a2;
        if (v13 == (WTF::StringImpl **)*a2
          || v13[3] == *(WTF::StringImpl **)(v14 + 24) && v13[4] == *(WTF::StringImpl **)(v14 + 32))
        {
          return v9;
        }
      }
      v5 = ++v7 + v8;
      v6 = (WTF::StringImpl **)v12;
    }
    return 0;
  }
  v17 = v5 & v4;
  v9 = (WTF::StringImpl ***)(v2 + 16 * (v5 & v4));
  v18 = *v9;
  if (!*v9)
    return 0;
  v19 = *a2;
  v20 = 1;
  while (v18 == (WTF::StringImpl **)-1
       || v18 != (WTF::StringImpl **)v19
       && (v18[3] != *(WTF::StringImpl **)(v19 + 24) || v18[4] != *(WTF::StringImpl **)(v19 + 32)))
  {
    v17 = (v17 + v20) & v4;
    v9 = (WTF::StringImpl ***)(v2 + 16 * v17);
    v18 = *v9;
    ++v20;
    if (!*v9)
      return 0;
  }
  return v9;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::BlendMode>::setValueInternal(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(result + 12) = *a2;
  return result;
}

BOOL WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::BlendMode>::setValue(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 <= 0xF)
    *(_BYTE *)(a1 + 12) = *a2;
  return v2 < 0x10;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::BlendMode>::valueInternal(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::BlendMode>::value(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) <= 0x10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  else
    return 0;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::BlendMode>::valueAsString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  char *v4;
  _DWORD *v5;
  _DWORD *v6;

  v3 = *(unsigned __int8 *)(result + 12);
  if (v3 > 0x10)
  {
    v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
      goto LABEL_7;
LABEL_6:
    *v5 += 2;
    goto LABEL_7;
  }
  v4 = (&WebCore::blendOperatorNames)[2 * (v3 - 1) + 1];
  if (!v4)
  {
    *a2 = 0;
    return result;
  }
  if (v4 == (char *)1)
  {
    v5 = (_DWORD *)MEMORY[0x1E0CBEF70];
    goto LABEL_6;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v6;
LABEL_7:
  *a2 = v5;
  return result;
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::BlendMode>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = *(_BYTE *)(a1 + 12);
  *(_QWORD *)result = off_1E345A040;
  *a2 = result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEBlendElement::SVGFEBlendElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  _BYTE v1[24];
  WebCore::QualifiedName::QualifiedNameImpl *v2;

  if ((byte_1ECE85010 & 1) == 0)
  {
    qword_1ECE850D0 = (uint64_t)off_1E345A090;
    unk_1ECE850D8 = 240;
    byte_1ECE85010 = 1;
  }
  if ((byte_1ECE84FF8 & 1) == 0)
  {
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE850D0;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::modeAttr, &v2);
  if ((byte_1ECE85018 & 1) == 0)
  {
    qword_1ECE850E0 = (uint64_t)off_1E345A218;
    unk_1ECE850E8 = 224;
    byte_1ECE85018 = 1;
  }
  if ((byte_1ECE84FF8 & 1) == 0)
  {
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE850E0;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::inAttr, &v2);
  if ((byte_1ECE85020 & 1) == 0)
  {
    qword_1ECE850F0 = (uint64_t)off_1E345A218;
    unk_1ECE850F8 = 232;
    byte_1ECE85020 = 1;
  }
  if ((byte_1ECE84FF8 & 1) == 0)
  {
    qword_1ECE84FF0 = 0;
    byte_1ECE84FF8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE850F0;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>((uint64_t)v1, &WebCore::SVGNames::in2Attr, &v2);
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v5;
  int v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  uint64_t result;
  int *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  int i;
  unsigned int v13;
  WebCore::QualifiedName::QualifiedNameImpl **v14;
  int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  int v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;

  v5 = qword_1ECE84FF0;
  if (qword_1ECE84FF0
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0), (v5 = qword_1ECE84FF0) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    v40 = *((_QWORD *)v7 + 3);
    v41 = *((_QWORD *)v7 + 4);
    v42 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v43 = v42 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v44 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v43 + (v42 >> 11)) << 16) ^ (v43 + (v42 >> 11));
    v45 = (v40 >> 5) & 0x7FFF800 ^ ((v44 + (unsigned __int16)v40 + (v44 >> 11)) << 16) ^ (v44 + (unsigned __int16)v40 + (v44 >> 11));
    v46 = (v40 >> 37) & 0x7FFF800 ^ ((v45 + WORD2(v40) + (v45 >> 11)) << 16) ^ (v45 + WORD2(v40) + (v45 >> 11));
    v47 = (v41 >> 5) & 0x7FFF800 ^ ((v46 + (unsigned __int16)v41 + (v46 >> 11)) << 16) ^ (v46 + (unsigned __int16)v41 + (v46 >> 11));
    v48 = (v41 >> 37) & 0x7FFF800 ^ ((v47 + WORD2(v41) + (v47 >> 11)) << 16) ^ (v47 + WORD2(v41) + (v47 >> 11));
    v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
    v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
    v51 = (v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10);
    if (v51)
      result = v51;
    else
      result = 0x800000;
  }
  else
  {
    result = *((unsigned int *)v7 + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v7 + 1) = result;
    }
  }
  v9 = &webThreadDelegateMessageScopeCount;
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v53 = a1;
    v11 = 0;
    for (i = 1; ; ++i)
    {
      v13 = result & v6;
      v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
      if (v10)
      {
        v15 = (*(_DWORD *)v10)++;
        v16 = *v14;
        if (v15)
        {
          *(_DWORD *)v10 = v15;
          v17 = v10;
        }
        else
        {
          v20 = v9;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = WTF::fastFree(v21, v22);
          v9 = v20;
          v17 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v17 = 0;
        v16 = *v14;
      }
      if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)v10)
        break;
      v18 = *v14;
      if (*v14 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v13);
      }
      else
      {
        v19 = *a2;
        if (v18 == *a2 || *((_QWORD *)v18 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v18 + 4) == *((_QWORD *)v19 + 4))
          goto LABEL_42;
      }
      result = i + v13;
      v10 = v17;
    }
LABEL_31:
    a1 = v53;
    if (v11)
    {
      v27 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v9 + 254);
      if (v27)
        ++*(_DWORD *)v27;
      *v11 = v27;
      v11[1] = 0;
      --*(_DWORD *)(qword_1ECE84FF0 - 16);
      v14 = v11;
    }
LABEL_35:
    v28 = *a2;
    if (*a2)
      ++*(_DWORD *)v28;
    result = (uint64_t)*v14;
    *v14 = v28;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v14[1] = *a3;
    if (qword_1ECE84FF0)
      v29 = *(_DWORD *)(qword_1ECE84FF0 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(qword_1ECE84FF0 - 12) = v29;
    v33 = qword_1ECE84FF0;
    if (qword_1ECE84FF0)
      v34 = *(_DWORD *)(qword_1ECE84FF0 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(qword_1ECE84FF0 - 16) + v34);
    v36 = *(unsigned int *)(qword_1ECE84FF0 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_53;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_56:
        result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v37, v14);
        v14 = (WebCore::QualifiedName::QualifiedNameImpl **)result;
        v33 = qword_1ECE84FF0;
        if (qword_1ECE84FF0)
          v36 = *(unsigned int *)(qword_1ECE84FF0 - 4);
        else
          v36 = 0;
        goto LABEL_60;
      }
LABEL_53:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(qword_1ECE84FF0 - 12) >= (2 * v36));
      goto LABEL_56;
    }
LABEL_60:
    v32 = v33 + 16 * v36;
    v31 = 1;
    goto LABEL_61;
  }
  v23 = result & v6;
  v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
  v24 = *v14;
  if (!*v14)
    goto LABEL_35;
  v53 = a1;
  v11 = 0;
  v25 = *a2;
  v26 = 1;
  while (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
  {
    v11 = v14;
LABEL_30:
    v23 = (v23 + v26) & v6;
    v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v23);
    v24 = *v14;
    ++v26;
    if (!*v14)
      goto LABEL_31;
  }
  if (v24 != v25 && (*((_QWORD *)v24 + 3) != *((_QWORD *)v25 + 3) || *((_QWORD *)v24 + 4) != *((_QWORD *)v25 + 4)))
    goto LABEL_30;
LABEL_42:
  if (qword_1ECE84FF0)
    v30 = *(unsigned int *)(qword_1ECE84FF0 - 4);
  else
    v30 = 0;
  a1 = v53;
  v31 = 0;
  v32 = qword_1ECE84FF0 + 16 * v30;
LABEL_61:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  char *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***result;
  uint64_t v49;
  WTF::StringImpl ***v51;

  v3 = &InitWebCoreThreadSystemInterface::didInit;
  v4 = qword_1ECE84FF0;
  if (qword_1ECE84FF0)
  {
    v5 = *(_DWORD *)(qword_1ECE84FF0 - 4);
    v6 = *(_DWORD *)(qword_1ECE84FF0 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = v7 + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE84FF0 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE84FF0 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v49 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        goto LABEL_53;
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = *((_QWORD *)v3 + 510);
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v51 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v51;
        v15 = v49;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &InitWebCoreThreadSystemInterface::didInit;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &InitWebCoreThreadSystemInterface::didInit;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v51;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v49;
    goto LABEL_40;
  }
  v14 = 0;
  result = 0;
  if (v4)
  {
LABEL_53:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v14;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEBlendElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEBlendElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEBlendElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEBlendElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEBlendElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFEBlendElement,WebCore::BlendMode>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E345A1C8;
  *(_QWORD *)result = &off_1E345A0F8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFEBlendElement,WebCore::BlendMode>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::BlendMode>::~SVGAnimatedEnumerationAnimator(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)a1 = off_1E345A160;
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::BlendMode>::~SVGAnimatedEnumerationAnimator(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E345A160;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::BlendMode>>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::BlendMode>>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  char v7;
  char v8;

  v7 = 1;
  WebCore::parseBlendMode(a3, &v7);
  *(_BYTE *)(a1 + 65) = v7;
  v8 = 1;
  result = WebCore::parseBlendMode(a4, &v8);
  *(_BYTE *)(a1 + 66) = v8;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::BlendMode>>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::BlendMode>::animate(uint64_t a1, float a2)
{
  int v2;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v9;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v5 = a2 > 0.5 && v2 == 1 || a2 == 1.0 || v2 == 3;
  v6 = (unsigned __int8 *)(a1 + 65);
  if (v5)
    v6 = (unsigned __int8 *)(a1 + 66);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v9 = *v6;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 16))(v7, &v9);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::BlendMode>>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::BlendMode>>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::BlendMode>>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationEnumerationFunction<WebCore::BlendMode>::~SVGAnimationEnumerationFunction()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationDiscreteFunction<WebCore::BlendMode>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimationEnumerationFunction<WebCore::BlendMode>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  char v7;
  char v8;

  v7 = 1;
  WebCore::parseBlendMode(a3, &v7);
  *(_BYTE *)(a1 + 9) = v7;
  v8 = 1;
  result = WebCore::parseBlendMode(a4, &v8);
  *(_BYTE *)(a1 + 10) = v8;
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEBlendElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEBlendElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEBlendElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEBlendElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEBlendElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEBlendElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t *WebCore::SVGFEColorMatrixElement::SVGFEColorMatrixElement(uint64_t *a1, _DWORD **a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char v10;
  char **v11;
  char *v12;

  *a1 = (uint64_t)off_1E3458970;
  a1[14] = (uint64_t)&unk_1E3458ED0;
  v6 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E345A280;
  *((_QWORD *)v6 + 1) = a1;
  v12 = v6;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(a1, a2, a3, (uint64_t *)&v12);
  v7 = (uint64_t)v12;
  v12 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *a1 = (uint64_t)off_1E3458970;
  a1[14] = (uint64_t)&unk_1E3458ED0;
  WebCore::SVGAnimatedString::create((WebCore::SVGAnimatedString *)a1, a1 + 28);
  LOBYTE(v12) = 1;
  WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::create<WebCore::ColorMatrixType,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1 + 29, (uint64_t)a1, &v12);
  WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::create<>(a1 + 30, (uint64_t)a1);
  v8 = atomic_load(&WebCore::SVGFEColorMatrixElement::SVGFEColorMatrixElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v8 != -1)
  {
    v11 = &v12;
    v12 = &v10;
    std::__call_once(&WebCore::SVGFEColorMatrixElement::SVGFEColorMatrixElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEColorMatrixElement::SVGFEColorMatrixElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::create<WebCore::ColorMatrixType,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x40);
  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = *a3;
  *(_QWORD *)result = off_1E345A2F0;
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)v6 = &off_1E34568A0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = result;
  *(_QWORD *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *a1 = v6;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>::create<>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)v4 = off_1E3456920;
  result = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = v4;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)result = off_1E346F430;
  *(_QWORD *)(result + 48) = &unk_1E346F4A8;
  *(_QWORD *)(v4 + 40) = result;
  *(_QWORD *)(v4 + 48) = 0;
  *a1 = v4;
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE85030 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE85028 = 0;
    byte_1ECE85030 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE85028;
  if (!qword_1ECE85028)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE85028 - 4);
  v4 = qword_1ECE85028 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE85028 - 12))
  {
    v13 = qword_1ECE85028 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE85028;
    if (!qword_1ECE85028)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE85028;
    if (qword_1ECE85028)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85028 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE85028)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE85028 + v14;
    if (qword_1ECE85028)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  int v22;
  WTF::StringImpl **v23;
  WTF *v25;
  void *v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl ***v47;
  uint64_t v48;
  WTF::StringImpl ***v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  int v52;
  WTF::StringImpl **v53;
  uint64_t v54;
  WTF *v56;
  void *v57;
  uint64_t v58;
  WTF::StringImpl ***v59;
  WTF::StringImpl **v60;
  int v61;
  WTF::StringImpl **v62;
  WTF *v64;
  void *v65;
  WTF::StringImpl **v66;
  WTF *v67;
  void *v68;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85030 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85028 = 0;
    byte_1ECE85030 = 1;
LABEL_23:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_34;
    goto LABEL_33;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85028;
  if (!qword_1ECE85028)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_23;
  }
  v8 = *(unsigned int *)(qword_1ECE85028 - 4);
  v9 = qword_1ECE85028 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85028 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85028 + 16 * v8);
    goto LABEL_23;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85028;
    if (!qword_1ECE85028)
      goto LABEL_34;
LABEL_33:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_34;
  }
  if (v6)
  {
    v10 = 16 * v8;
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85028;
    if (qword_1ECE85028)
      goto LABEL_33;
  }
  else
  {
    v18 = 0;
    v19 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85028 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v19 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85028)
          goto LABEL_33;
        goto LABEL_34;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85028 + v18);
    if (qword_1ECE85028)
      goto LABEL_33;
  }
LABEL_34:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_150;
    v20 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v20 != (WTF::StringImpl ***)v9)
    {
      v21 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_38:
        v22 = (*(_DWORD *)v21)++;
        v23 = *v20;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
          result = (WTF::StringImpl **)WTF::fastFree(v25, v26);
        }
        while (v23 == v21 || (WTF::StringImpl **)((char *)*v20 + 1) == 0)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
            goto LABEL_51;
          v21 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_38;
          v23 = *v20;
        }
      }
      else
      {
        while ((unint64_t)*v20 + 1 <= 1)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
          {
LABEL_51:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_53;
          }
        }
      }
      v17 = v20;
    }
LABEL_53:
    ;
  }
  {
    v27 = 0;
    v17 = 0;
    v28 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_76:
    v29 = &v27[2 * v28];
    if (!v27)
      goto LABEL_85;
LABEL_84:
    v27 += 2 * *((unsigned int *)v27 - 1);
    goto LABEL_85;
  }
  v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v28 = 0;
    goto LABEL_76;
  }
  v28 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v29 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v28);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v28);
    goto LABEL_76;
  }
  if (!(_DWORD)v28)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_85;
    goto LABEL_84;
  }
  v30 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v31 = 16 * v28;
    while (1)
    {
      if (v30)
      {
        v32 = (*(_DWORD *)v30)++;
        v33 = *v27;
        if (v32)
        {
          *(_DWORD *)v30 = v32;
          v34 = (uint64_t)v30;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
          result = (WTF::StringImpl **)WTF::fastFree(v36, v37);
          v34 = WebCore::nullName;
        }
      }
      else
      {
        v34 = 0;
        v33 = *v27;
      }
      if (v33 != v30 && (WTF::StringImpl **)((char *)*v27 + 1) != 0)
        break;
      v27 += 2;
      v30 = (WTF::StringImpl **)v34;
      v31 -= 16;
      if (!v31)
      {
        v27 = v29;
        break;
      }
    }
    v17 = v27;
    v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
  }
  else
  {
    v38 = 0;
    v39 = 16 * v28;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v38)
                             + 1) <= 1)
    {
      v38 += 16;
      if (v39 == v38)
      {
        v17 = v29;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_84;
        goto LABEL_85;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v38);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
  }
LABEL_85:
  while (v17 != v27)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_150;
    v40 = v17 + 2;
    v17 = v29;
    if (v40 != v29)
    {
      v41 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_89:
        v42 = (*(_DWORD *)v41)++;
        v43 = *v40;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
          result = (WTF::StringImpl **)WTF::fastFree(v45, v46);
        }
        while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
        {
          v40 += 2;
          if (v40 == v29)
            goto LABEL_102;
          v41 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_89;
          v43 = *v40;
        }
      }
      else
      {
        while ((unint64_t)*v40 + 1 <= 1)
        {
          v40 += 2;
          if (v40 == v29)
          {
LABEL_102:
            v17 = v29;
            goto LABEL_104;
          }
        }
      }
      v17 = v40;
    }
LABEL_104:
    ;
  }
  {
    v47 = 0;
    v17 = 0;
    v48 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_164;
  }
  v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v48 = 0;
LABEL_164:
    v49 = &v47[2 * v48];
    goto LABEL_127;
  }
  v48 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v49 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v48);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v48);
    goto LABEL_164;
  }
  if ((_DWORD)v48)
  {
    v50 = (WTF::StringImpl **)WebCore::nullName;
    v51 = 16 * v48;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v50)
        {
          v52 = (*(_DWORD *)v50)++;
          v53 = *v47;
          if (v52)
          {
            *(_DWORD *)v50 = v52;
            v54 = (uint64_t)v50;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v50);
            result = (WTF::StringImpl **)WTF::fastFree(v56, v57);
            v54 = WebCore::nullName;
          }
        }
        else
        {
          v54 = 0;
          v53 = *v47;
        }
        if (v53 != v50 && (WTF::StringImpl **)((char *)*v47 + 1) != 0)
          break;
        v47 += 2;
        v50 = (WTF::StringImpl **)v54;
        v51 -= 16;
        if (!v51)
        {
          v47 = v49;
          break;
        }
      }
      v17 = v47;
      v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v58 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v58)
                               + 1) <= 1)
      {
        v58 += 16;
        if (v51 == v58)
        {
          v17 = v49;
          goto LABEL_127;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v58);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_127:
  if (v47)
    v47 += 2 * *((unsigned int *)v47 - 1);
  if (v47 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v59 = v17 + 2;
      v17 = v49;
      if (v59 != v49)
      {
        v60 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_133:
          v61 = (*(_DWORD *)v60)++;
          v62 = *v59;
          if (v61)
          {
            *(_DWORD *)v60 = v61;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v60);
            result = (WTF::StringImpl **)WTF::fastFree(v64, v65);
          }
          while (v62 == v60 || (WTF::StringImpl **)((char *)*v59 + 1) == 0)
          {
            v59 += 2;
            if (v59 == v49)
              goto LABEL_146;
            v60 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_133;
            v62 = *v59;
          }
        }
        else
        {
          while ((unint64_t)*v59 + 1 <= 1)
          {
            v59 += 2;
            if (v59 == v49)
            {
LABEL_146:
              v17 = v49;
              goto LABEL_148;
            }
          }
        }
        v17 = v59;
      }
LABEL_148:
      if (v17 == v47)
        return result;
    }
LABEL_150:
    v66 = *v17;
    if (*v17)
      ++*(_DWORD *)v66;
    result = *a3;
    *a3 = v66;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v67, v68);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  int v22;
  WTF::StringImpl **v23;
  WTF *v25;
  void *v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl ***v47;
  uint64_t v48;
  WTF::StringImpl ***v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  int v52;
  WTF::StringImpl **v53;
  uint64_t v54;
  WTF *v56;
  void *v57;
  uint64_t v58;
  WTF::StringImpl ***v59;
  WTF::StringImpl **v60;
  int v61;
  WTF::StringImpl **v62;
  WTF *v64;
  void *v65;
  WTF::StringImpl **v66;
  WTF *v67;
  void *v68;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85030 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85028 = 0;
    byte_1ECE85030 = 1;
LABEL_23:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_34;
    goto LABEL_33;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85028;
  if (!qword_1ECE85028)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_23;
  }
  v8 = *(unsigned int *)(qword_1ECE85028 - 4);
  v9 = qword_1ECE85028 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85028 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85028 + 16 * v8);
    goto LABEL_23;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85028;
    if (!qword_1ECE85028)
      goto LABEL_34;
LABEL_33:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_34;
  }
  if (v6)
  {
    v10 = 16 * v8;
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85028;
    if (qword_1ECE85028)
      goto LABEL_33;
  }
  else
  {
    v18 = 0;
    v19 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85028 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v19 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85028)
          goto LABEL_33;
        goto LABEL_34;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85028 + v18);
    if (qword_1ECE85028)
      goto LABEL_33;
  }
LABEL_34:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_150;
    v20 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v20 != (WTF::StringImpl ***)v9)
    {
      v21 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_38:
        v22 = (*(_DWORD *)v21)++;
        v23 = *v20;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
          result = (WTF::StringImpl **)WTF::fastFree(v25, v26);
        }
        while (v23 == v21 || (WTF::StringImpl **)((char *)*v20 + 1) == 0)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
            goto LABEL_51;
          v21 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_38;
          v23 = *v20;
        }
      }
      else
      {
        while ((unint64_t)*v20 + 1 <= 1)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
          {
LABEL_51:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_53;
          }
        }
      }
      v17 = v20;
    }
LABEL_53:
    ;
  }
  {
    v27 = 0;
    v17 = 0;
    v28 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_76:
    v29 = &v27[2 * v28];
    if (!v27)
      goto LABEL_85;
LABEL_84:
    v27 += 2 * *((unsigned int *)v27 - 1);
    goto LABEL_85;
  }
  v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v28 = 0;
    goto LABEL_76;
  }
  v28 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v29 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v28);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v28);
    goto LABEL_76;
  }
  if (!(_DWORD)v28)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_85;
    goto LABEL_84;
  }
  v30 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v31 = 16 * v28;
    while (1)
    {
      if (v30)
      {
        v32 = (*(_DWORD *)v30)++;
        v33 = *v27;
        if (v32)
        {
          *(_DWORD *)v30 = v32;
          v34 = (uint64_t)v30;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
          result = (WTF::StringImpl **)WTF::fastFree(v36, v37);
          v34 = WebCore::nullName;
        }
      }
      else
      {
        v34 = 0;
        v33 = *v27;
      }
      if (v33 != v30 && (WTF::StringImpl **)((char *)*v27 + 1) != 0)
        break;
      v27 += 2;
      v30 = (WTF::StringImpl **)v34;
      v31 -= 16;
      if (!v31)
      {
        v27 = v29;
        break;
      }
    }
    v17 = v27;
    v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
  }
  else
  {
    v38 = 0;
    v39 = 16 * v28;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v38)
                             + 1) <= 1)
    {
      v38 += 16;
      if (v39 == v38)
      {
        v17 = v29;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_84;
        goto LABEL_85;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v38);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
  }
LABEL_85:
  while (v17 != v27)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_150;
    v40 = v17 + 2;
    v17 = v29;
    if (v40 != v29)
    {
      v41 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_89:
        v42 = (*(_DWORD *)v41)++;
        v43 = *v40;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
          result = (WTF::StringImpl **)WTF::fastFree(v45, v46);
        }
        while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
        {
          v40 += 2;
          if (v40 == v29)
            goto LABEL_102;
          v41 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_89;
          v43 = *v40;
        }
      }
      else
      {
        while ((unint64_t)*v40 + 1 <= 1)
        {
          v40 += 2;
          if (v40 == v29)
          {
LABEL_102:
            v17 = v29;
            goto LABEL_104;
          }
        }
      }
      v17 = v40;
    }
LABEL_104:
    ;
  }
  {
    v47 = 0;
    v17 = 0;
    v48 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_164;
  }
  v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v48 = 0;
LABEL_164:
    v49 = &v47[2 * v48];
    goto LABEL_127;
  }
  v48 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v49 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v48);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v48);
    goto LABEL_164;
  }
  if ((_DWORD)v48)
  {
    v50 = (WTF::StringImpl **)WebCore::nullName;
    v51 = 16 * v48;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v50)
        {
          v52 = (*(_DWORD *)v50)++;
          v53 = *v47;
          if (v52)
          {
            *(_DWORD *)v50 = v52;
            v54 = (uint64_t)v50;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v50);
            result = (WTF::StringImpl **)WTF::fastFree(v56, v57);
            v54 = WebCore::nullName;
          }
        }
        else
        {
          v54 = 0;
          v53 = *v47;
        }
        if (v53 != v50 && (WTF::StringImpl **)((char *)*v47 + 1) != 0)
          break;
        v47 += 2;
        v50 = (WTF::StringImpl **)v54;
        v51 -= 16;
        if (!v51)
        {
          v47 = v49;
          break;
        }
      }
      v17 = v47;
      v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v58 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v58)
                               + 1) <= 1)
      {
        v58 += 16;
        if (v51 == v58)
        {
          v17 = v49;
          goto LABEL_127;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v58);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_127:
  if (v47)
    v47 += 2 * *((unsigned int *)v47 - 1);
  if (v47 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v59 = v17 + 2;
      v17 = v49;
      if (v59 != v49)
      {
        v60 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_133:
          v61 = (*(_DWORD *)v60)++;
          v62 = *v59;
          if (v61)
          {
            *(_DWORD *)v60 = v61;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v60);
            result = (WTF::StringImpl **)WTF::fastFree(v64, v65);
          }
          while (v62 == v60 || (WTF::StringImpl **)((char *)*v59 + 1) == 0)
          {
            v59 += 2;
            if (v59 == v49)
              goto LABEL_146;
            v60 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_133;
            v62 = *v59;
          }
        }
        else
        {
          while ((unint64_t)*v59 + 1 <= 1)
          {
            v59 += 2;
            if (v59 == v49)
            {
LABEL_146:
              v17 = v49;
              goto LABEL_148;
            }
          }
        }
        v17 = v59;
      }
LABEL_148:
      if (v17 == v47)
        return result;
    }
LABEL_150:
    v66 = *v17;
    if (*v17)
      ++*(_DWORD *)v66;
    result = *a3;
    *a3 = v66;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v67, v68);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *result;
  char *v7;

  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a1 + 8), a3);
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_15;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_9;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_15:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_9:
  {
    if (v7)
      v7 += 16 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
      return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4[2];

  *a3 = 0;
  a3[8] = 0;
  v4[0] = a1;
  v4[1] = (uint64_t)a3;
  return _ZN7WebCore24SVGPropertyOwnerRegistryINS_23SVGFEColorMatrixElementEJNS_36SVGFilterPrimitiveStandardAttributesEEE25lookupRecursivelyAndApplyIZNKS3_11synchronizeERKNS_13QualifiedNameEEUlRT_E_EEbS7_RKS8_(a2, v4);
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE85030 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE85028 = 0;
    byte_1ECE85030 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE85028;
  if (!qword_1ECE85028)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE85028 - 4);
  v6 = qword_1ECE85028 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE85028 - 12))
  {
    v15 = qword_1ECE85028 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE85028;
    if (!qword_1ECE85028)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE85028;
    if (qword_1ECE85028)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85028 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE85028)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE85028 + v16;
    if (qword_1ECE85028)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;

  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_16;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_9;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_16:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_9:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    Accessor = v6[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **result;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE85040 & 1) == 0)
  {
    v12 = WebCore::SVGNames::cxAttr;
    v13 = WebCore::SVGNames::cyAttr;
    v14 = WebCore::SVGNames::rAttr;
    v15 = WebCore::SVGNames::rxAttr;
    v16 = WebCore::SVGNames::ryAttr;
    v17 = WebCore::SVGNames::heightAttr;
    v18 = WebCore::SVGNames::widthAttr;
    v19 = WebCore::SVGNames::xAttr;
    v20[0] = WebCore::SVGNames::yAttr;
    qword_1ECE85038 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85038, &v12, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85038, &v13, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85038, &v14, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85038, &v15, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85038, &v16, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85038, &v17, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85038, &v18, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85038, &v19, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85038, v20, (uint64_t)v11);
    byte_1ECE85040 = 1;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (result)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 4))(result);
    if ((_DWORD)result)
    {
      if (qword_1ECE85038)
      {
        v4 = *(_DWORD *)(qword_1ECE85038 - 8);
        v5 = ~(*a2 << 32) + *a2;
        v6 = 9
           * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
        v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
        v8 = v4 & ((v7 >> 31) ^ v7);
        v9 = *(_QWORD *)(qword_1ECE85038 + 8 * v8);
        if (v9 == *a2)
        {
          return (WTF::StringImpl **)1;
        }
        else
        {
          v10 = 1;
          do
          {
            result = (WTF::StringImpl **)(v9 != 0);
            if (!v9)
              break;
            v8 = (v8 + v10) & v4;
            v9 = *(_QWORD *)(qword_1ECE85038 + 8 * v8);
            ++v10;
          }
          while (v9 != *a2);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  char *result;
  char *v15;
  uint64_t v16;

  *a7 = 0;
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (result
    || (result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2)) != 0)
  {
LABEL_3:
    result = (char *)(*(_QWORD *(**)(uint64_t *__return_ptr, char *, _QWORD, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 72))(&v16, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
    *a7 = v16;
    return result;
  }
  {
    v15 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_16;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v15 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_16:
      result = 0;
  }
  else
  {
    v15 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v15)
      v15 += 16 * *((unsigned int *)v15 - 1);
  }
  else
  {
    v15 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v15 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
      goto LABEL_3;
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *result;
  char *v7;

  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a1 + 8), a3);
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_15;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_9;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_15:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_9:
  {
    if (v7)
      v7 += 16 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
      return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(uint64_t *a1)
{
  WTF::StringImpl ***v1;
  uint64_t v2;

  if ((byte_1ECE85030 & 1) == 0)
  {
    qword_1ECE85028 = 0;
    byte_1ECE85030 = 1;
  }
  v1 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
  if ((byte_1ECE85030 & 1) != 0)
  {
    v2 = qword_1ECE85028;
    if (qword_1ECE85028)
      v2 = qword_1ECE85028 + 16 * *(unsigned int *)(qword_1ECE85028 - 4);
  }
  else
  {
    v2 = 0;
    qword_1ECE85028 = 0;
    byte_1ECE85030 = 1;
  }
  if ((WTF::StringImpl ***)v2 == v1)
    return 0;
  else
    return v1[1];
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1)
{
  WTF::StringImpl ***result;

  if (!qword_1ECE85028)
    return 0;
  result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
  if (result)
    return result;
  if (!qword_1ECE85028)
    return 0;
  return (WTF::StringImpl ***)(qword_1ECE85028 + 16 * *(unsigned int *)(qword_1ECE85028 - 4));
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  int v5;
  WTF::StringImpl **i;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;

  v1 = qword_1ECE85028;
  if (qword_1ECE85028)
  {
    v3 = *(_DWORD *)(qword_1ECE85028 - 8);
    v4 = WebCore::SVGAttributeHashTranslator::hash(a1);
    v5 = 0;
    for (i = (WTF::StringImpl **)WebCore::nullName; ; i = (WTF::StringImpl **)v11)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (i)
      {
        v9 = (*(_DWORD *)i)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)i = v9;
          v11 = (uint64_t)i;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(i);
          WTF::fastFree(v15, v16);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == i)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *(WTF::StringImpl **)(v13 + 24) && v12[4] == *(WTF::StringImpl **)(v13 + 32))
        {
          return v8;
        }
      }
      v4 = ++v5 + v7;
    }
  }
  return 0;
}

uint64_t _ZN7WebCore24SVGPropertyOwnerRegistryINS_23SVGFEColorMatrixElementEJNS_36SVGFilterPrimitiveStandardAttributesEEE25lookupRecursivelyAndApplyIZNKS3_11synchronizeERKNS_13QualifiedNameEEUlRT_E_EEbS7_RKS8_(uint64_t *a1, uint64_t *a2)
{
  WTF::StringImpl **Accessor;

  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a1);
  if (Accessor)
    return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize(WebCore::QualifiedName const&)const::{lambda(WebCore::SVGFEColorMatrixElement &)#1}::operator()<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const>(a2, (uint64_t)Accessor);
  else
    return _ZN7WebCore24SVGPropertyOwnerRegistryINS_36SVGFilterPrimitiveStandardAttributesEJNS_10SVGElementEEE25lookupRecursivelyAndApplyIZNKS0_INS_23SVGFEColorMatrixElementEJS1_EE11synchronizeERKNS_13QualifiedNameEEUlRT_E_EEbS9_RKSA_(a1, a2);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize(WebCore::QualifiedName const&)const::{lambda(WebCore::SVGFEColorMatrixElement &)#1}::operator()<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const>(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  _QWORD v5[2];

  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(v5, a2, *(_QWORD *)(*a1 + 8));
  std::optional<WTF::String>::operator=[abi:sn180100](a1[1], (unsigned __int8 *)v5);
  return std::optional<WTF::String>::~optional((uint64_t)v5, v3);
}

uint64_t _ZN7WebCore24SVGPropertyOwnerRegistryINS_36SVGFilterPrimitiveStandardAttributesEJNS_10SVGElementEEE25lookupRecursivelyAndApplyIZNKS0_INS_23SVGFEColorMatrixElementEJS1_EE11synchronizeERKNS_13QualifiedNameEEUlRT_E_EEbS9_RKSA_(uint64_t *a1, uint64_t *a2)
{
  WTF::StringImpl **Accessor;

  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a1);
  if (!Accessor)
    return _ZN7WebCore24SVGPropertyOwnerRegistryINS_36SVGFilterPrimitiveStandardAttributesEJNS_10SVGElementEEE34lookupRecursivelyAndApplyBaseTypesIZNKS0_INS_23SVGFEColorMatrixElementEJS1_EE11synchronizeERKNS_13QualifiedNameEEUlRT_E_Lm0EEENSt3__19enable_ifIXltT0_sZT0_EbE4typeES9_RKSA_((WebCore::QualifiedName::QualifiedNameImpl **)a1, a2);
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize(WebCore::QualifiedName const&)const::{lambda(WebCore::SVGFEColorMatrixElement &)#1}::operator()<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const>(a2, (uint64_t)Accessor);
  return 1;
}

uint64_t _ZN7WebCore24SVGPropertyOwnerRegistryINS_36SVGFilterPrimitiveStandardAttributesEJNS_10SVGElementEEE34lookupRecursivelyAndApplyBaseTypesIZNKS0_INS_23SVGFEColorMatrixElementEJS1_EE11synchronizeERKNS_13QualifiedNameEEUlRT_E_Lm0EEENSt3__19enable_ifIXltT0_sZT0_EbE4typeES9_RKSA_(WebCore::QualifiedName::QualifiedNameImpl **a1, _QWORD *a2)
{
  WTF::StringImpl ***v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned __int8 v14;

  {
    v3 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_32;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v3 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v4)
      goto LABEL_6;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_32:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_6:
  {
    if (v3)
      v3 += 2 * *((unsigned int *)v3 - 1);
  }
  else
  {
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (result)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)result + 64))(&v13, result, *(_QWORD *)(*a2 + 8));
    v7 = a2[1];
    if (*(unsigned __int8 *)(v7 + 8) == v14)
    {
      if (!*(_BYTE *)(v7 + 8))
        return 1;
      v8 = v13;
      v13 = 0;
      v9 = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = v8;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v6);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    else if (*(_BYTE *)(v7 + 8))
    {
      v10 = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v6);
        else
          *(_DWORD *)v10 -= 2;
      }
      *(_BYTE *)(v7 + 8) = 0;
    }
    else
    {
      v11 = v13;
      v13 = 0;
      *(_QWORD *)v7 = v11;
      *(_BYTE *)(v7 + 8) = 1;
    }
    if (v14)
    {
      v12 = v13;
      v13 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v6);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::ColorMatrixType>::setValueInternal(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(result + 12) = *a2;
  return result;
}

BOOL WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::ColorMatrixType>::setValue(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 <= 3)
    *(_BYTE *)(a1 + 12) = *a2;
  return v2 < 4;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::ColorMatrixType>::valueInternal(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::ColorMatrixType>::value(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) <= 4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  else
    return 0;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::ColorMatrixType>::valueAsString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  switch(*(_BYTE *)(result + 12))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      break;
    default:
      v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v2 += 2;
      *a2 = v2;
      break;
  }
  return result;
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::ColorMatrixType>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = *(_BYTE *)(a1 + 12);
  *(_QWORD *)result = off_1E345A2F0;
  *a2 = result;
  return result;
}

WTF::Thread *WebCore::SVGFEColorMatrixElement::SVGFEColorMatrixElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1}::operator()()
{
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::inAttr,&WebCore::SVGFEColorMatrixElement::m_in1>();
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::typeAttr,WebCore::ColorMatrixType,&WebCore::SVGFEColorMatrixElement::m_type>();
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::valuesAttr,&WebCore::SVGFEColorMatrixElement::m_values>();
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::inAttr,&WebCore::SVGFEColorMatrixElement::m_in1>()
{
  if ((byte_1ECE85048 & 1) == 0)
  {
    qword_1ECE85100 = (uint64_t)off_1E345A340;
    unk_1ECE85108 = 224;
    byte_1ECE85048 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty(&WebCore::SVGNames::inAttr, (uint64_t)&qword_1ECE85100);
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::typeAttr,WebCore::ColorMatrixType,&WebCore::SVGFEColorMatrixElement::m_type>()
{
  if ((byte_1ECE85050 & 1) == 0)
  {
    qword_1ECE85110 = (uint64_t)off_1E345A3A8;
    unk_1ECE85118 = 232;
    byte_1ECE85050 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty(&WebCore::SVGNames::typeAttr, (uint64_t)&qword_1ECE85110);
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::valuesAttr,&WebCore::SVGFEColorMatrixElement::m_values>()
{
  if ((byte_1ECE85058 & 1) == 0)
  {
    qword_1ECE85120 = (uint64_t)off_1E345A530;
    unk_1ECE85128 = 240;
    byte_1ECE85058 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty(&WebCore::SVGNames::valuesAttr, (uint64_t)&qword_1ECE85120);
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEColorMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((byte_1ECE85030 & 1) == 0)
  {
    qword_1ECE85028 = 0;
    byte_1ECE85030 = 1;
  }
  v4 = a2;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>((uint64_t)&v3, a1, &v4);
}

WTF::Thread *WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF::Thread *v9;
  WTF::Thread *result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = qword_1ECE85028;
  if (qword_1ECE85028
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(0),
        (v6 = qword_1ECE85028) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WebCore::SVGAttributeHashTranslator::hash(a2) & v7;
  v9 = (WTF::Thread *)(v6 + 16 * v8);
  result = (WTF::Thread *)WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>(v9);
  if ((result & 1) == 0)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      v20 = *(_QWORD *)v9;
      if (*(_QWORD *)v9 == -1)
      {
        v18 = (uint64_t *)v9;
      }
      else
      {
        v21 = *a2;
        if (v20 == *a2
          || *(_QWORD *)(v20 + 24) == *(_QWORD *)(v21 + 24) && *(_QWORD *)(v20 + 32) == *(_QWORD *)(v21 + 32))
        {
          if (qword_1ECE85028)
            v23 = *(unsigned int *)(qword_1ECE85028 - 4);
          else
            v23 = 0;
          v17 = 0;
          v16 = qword_1ECE85028 + 16 * v23;
          goto LABEL_12;
        }
      }
      v8 = (v8 + v19) & v7;
      v9 = (WTF::Thread *)(v6 + 16 * v8);
      result = (WTF::Thread *)WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>(v9);
      ++v19;
    }
    while (!(_DWORD)result);
    if (v18)
    {
      v22 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v18 = v22;
      v18[1] = 0;
      --*(_DWORD *)(qword_1ECE85028 - 16);
      v9 = (WTF::Thread *)v18;
    }
  }
  result = (WTF::Thread *)WTF::GenericHashTraits<WebCore::QualifiedName>::assignToEmpty<WebCore::QualifiedName,WebCore::QualifiedName const&>((WTF::StringImpl ***)v9, (WTF::StringImpl ***)a2);
  *((_QWORD *)v9 + 1) = *a3;
  if (qword_1ECE85028)
    v11 = *(_DWORD *)(qword_1ECE85028 - 12) + 1;
  else
    v11 = 1;
  *(_DWORD *)(qword_1ECE85028 - 12) = v11;
  v12 = qword_1ECE85028;
  if (qword_1ECE85028)
    v13 = *(_DWORD *)(qword_1ECE85028 - 12);
  else
    v13 = 0;
  v14 = (*(_DWORD *)(qword_1ECE85028 - 16) + v13);
  v15 = *(unsigned int *)(qword_1ECE85028 - 4);
  if (v15 > 0x400)
  {
    if (v15 > 2 * v14)
      goto LABEL_11;
LABEL_27:
    result = (WTF::Thread *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand((WTF::StringImpl ***)v9);
    v9 = result;
    v12 = qword_1ECE85028;
    if (qword_1ECE85028)
      v15 = *(unsigned int *)(qword_1ECE85028 - 4);
    else
      v15 = 0;
    goto LABEL_11;
  }
  if (3 * v15 <= 4 * v14)
    goto LABEL_27;
LABEL_11:
  v16 = v12 + 16 * v15;
  v17 = 1;
LABEL_12:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v17;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(WTF::StringImpl ***a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE85028 && (v2 = *(_DWORD *)(qword_1ECE85028 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE85028 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v3, a1);
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WTF::StringImpl ***a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t Table;
  void *v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;

  v4 = qword_1ECE85028;
  if (qword_1ECE85028)
  {
    LODWORD(v5) = *(_DWORD *)(qword_1ECE85028 - 4);
    v6 = *(_DWORD *)(qword_1ECE85028 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  Table = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::allocateTable(a1);
  qword_1ECE85028 = Table;
  *(_DWORD *)(Table - 8) = a1 - 1;
  *(_DWORD *)(Table - 4) = a1;
  *(_DWORD *)(Table - 16) = 0;
  *(_DWORD *)(qword_1ECE85028 - 12) = v6;
  v9 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v11 = (WTF::StringImpl ***)v4;
    do
    {
      if (*v11 != (WTF::StringImpl **)-1)
      {
        if (WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>((WTF::Thread *)v11))
        {
          WebCore::QualifiedName::~QualifiedName(v11);
        }
        else
        {
          v12 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert((uint64_t *)v11);
          WebCore::QualifiedName::~QualifiedName(v11);
          if (v11 == a2)
            v9 = v12;
        }
      }
      v11 += 2;
      --v5;
    }
    while (v5);
  }
  else
  {
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v9;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl **v6;
  int v7;
  int v8;
  WTF::StringImpl ***v9;
  int v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  BOOL v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl **v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  WTF *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;

  v2 = *a1;
  v3 = qword_1ECE85028;
  if (qword_1ECE85028)
    v4 = *(_DWORD *)(qword_1ECE85028 - 8);
  else
    v4 = 0;
  if (*(_QWORD *)(v2 + 16))
  {
    v23 = *(_QWORD *)(v2 + 24);
    v24 = *(_QWORD *)(v2 + 32);
    v25 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v26 = v25 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v27 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v26 + (v25 >> 11)) << 16) ^ (v26 + (v25 >> 11));
    v28 = (v23 >> 5) & 0x7FFF800 ^ ((v27 + (unsigned __int16)v23 + (v27 >> 11)) << 16) ^ (v27 + (unsigned __int16)v23 + (v27 >> 11));
    v29 = (v23 >> 37) & 0x7FFF800 ^ ((v28 + WORD2(v23) + (v28 >> 11)) << 16) ^ (v28 + WORD2(v23) + (v28 >> 11));
    v30 = (v24 >> 5) & 0x7FFF800 ^ ((v29 + (unsigned __int16)v24 + (v29 >> 11)) << 16) ^ (v29 + (unsigned __int16)v24 + (v29 >> 11));
    v31 = (v24 >> 37) & 0x7FFF800 ^ ((v30 + WORD2(v24) + (v30 >> 11)) << 16) ^ (v30 + WORD2(v24) + (v30 >> 11));
    v32 = (v31 + (v31 >> 11)) ^ (8 * (v31 + (v31 >> 11)));
    v33 = (v32 + (v32 >> 5)) ^ (4 * (v32 + (v32 >> 5)));
    v34 = (v33 + (v33 >> 15)) ^ ((v33 + (v33 >> 15)) << 10);
    if (v34)
      v5 = v34;
    else
      v5 = 0x800000;
  }
  else
  {
    v5 = *(_DWORD *)(v2 + 4);
    if (!v5)
    {
      v5 = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)v2);
      *(_DWORD *)(v2 + 4) = v5;
    }
  }
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v7 = 0;
    do
    {
      v8 = v5 & v4;
      v9 = (WTF::StringImpl ***)(v3 + 16 * (v5 & v4));
      if (v6)
      {
        v10 = (*(_DWORD *)v6)++;
        v11 = *v9;
        if (v10)
        {
          *(_DWORD *)v6 = v10;
          v12 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          WTF::fastFree(v14, v15);
          v12 = WebCore::nullName;
        }
      }
      else
      {
        v12 = 0;
        v11 = *v9;
      }
      v5 = ++v7 + v8;
      v13 = v11 == v6;
      v6 = (WTF::StringImpl **)v12;
    }
    while (!v13);
    v16 = *v9;
    *v9 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
        WTF::fastFree(v21, v22);
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = v5 & v4;
      v5 = ++v17 + v18;
    }
    while (*(_QWORD *)(v3 + 16 * v18));
    v9 = (WTF::StringImpl ***)(v3 + 16 * v18);
    *v9 = 0;
  }
  v19 = *(_OWORD *)a1;
  *a1 = 0;
  *(_OWORD *)v9 = v19;
  return v9;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEColorMatrixElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEColorMatrixElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEColorMatrixElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEColorMatrixElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEColorMatrixElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEColorMatrixElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEColorMatrixElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEColorMatrixElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEColorMatrixElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEColorMatrixElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEColorMatrixElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFEColorMatrixElement,WebCore::ColorMatrixType>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E345A4E0;
  *(_QWORD *)result = &off_1E345A410;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFEColorMatrixElement,WebCore::ColorMatrixType>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::ColorMatrixType>::~SVGAnimatedEnumerationAnimator(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)a1 = off_1E345A478;
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::ColorMatrixType>::~SVGAnimatedEnumerationAnimator(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E345A478;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ColorMatrixType>>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ColorMatrixType>>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  return WebCore::SVGAnimationEnumerationFunction<WebCore::ColorMatrixType>::setFromAndToValues(a1 + 56, a2, a3, a4);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ColorMatrixType>>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::ColorMatrixType>::animate(uint64_t a1, float a2)
{
  int v2;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v9;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v5 = a2 > 0.5 && v2 == 1 || a2 == 1.0 || v2 == 3;
  v6 = (unsigned __int8 *)(a1 + 65);
  if (v5)
    v6 = (unsigned __int8 *)(a1 + 66);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v9 = *v6;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 16))(v7, &v9);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ColorMatrixType>>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ColorMatrixType>>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ColorMatrixType>>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationEnumerationFunction<WebCore::ColorMatrixType>::~SVGAnimationEnumerationFunction()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationDiscreteFunction<WebCore::ColorMatrixType>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimationEnumerationFunction<WebCore::ColorMatrixType>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  char v7;
  uint64_t result;
  char v9;

  if ((MEMORY[0x19AEA53F4](*a3, "matrix", 6) & 1) != 0)
  {
    v7 = 1;
  }
  else if ((MEMORY[0x19AEA53F4](*a3, "saturate", 8) & 1) != 0)
  {
    v7 = 2;
  }
  else if ((MEMORY[0x19AEA53F4](*a3, "hueRotate", 9) & 1) != 0)
  {
    v7 = 3;
  }
  else if (MEMORY[0x19AEA53F4](*a3, "luminanceToAlpha", 16))
  {
    v7 = 4;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)(a1 + 9) = v7;
  result = MEMORY[0x19AEA53F4](*a4, "matrix", 6);
  if ((result & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*a4, "saturate", 8);
    if ((result & 1) != 0)
    {
      v9 = 2;
    }
    else
    {
      result = MEMORY[0x19AEA53F4](*a4, "hueRotate", 9);
      if ((result & 1) != 0)
      {
        v9 = 3;
      }
      else
      {
        result = MEMORY[0x19AEA53F4](*a4, "luminanceToAlpha", 16);
        if ((_DWORD)result)
          v9 = 4;
        else
          v9 = 0;
      }
    }
  }
  *(_BYTE *)(a1 + 10) = v9;
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEColorMatrixElement,WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEColorMatrixElement,WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEColorMatrixElement,WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEColorMatrixElement,WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

_QWORD *WebCore::SVGAnimatedNumberListAccessor<WebCore::SVGFEColorMatrixElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *result;

  v15 = *(_QWORD *)(a1 + 8);
  v16 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = a3;
  *(_QWORD *)v16 = off_1E3456A08;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = 0;
  *(_BYTE *)(v16 + 64) = a4;
  *(_BYTE *)(v16 + 65) = a5;
  *(_BYTE *)(v16 + 66) = a6;
  *(_BYTE *)(v16 + 67) = a7;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = off_1E3456AC0;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  v18[1] = 0;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = 0;
  *((_DWORD *)v18 + 2) = 1;
  *v18 = off_1E346F430;
  v18[5] = 0;
  v18[6] = &unk_1E346F4A8;
  *(_QWORD *)(v16 + 72) = v18;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  v19[1] = 0;
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = 0;
  *((_DWORD *)v19 + 2) = 1;
  v19[5] = 0;
  v19[6] = &unk_1E346F4A8;
  *v19 = off_1E346F430;
  *(_QWORD *)(v16 + 80) = v19;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  *((_DWORD *)result + 2) = 1;
  result[5] = 0;
  result[6] = &unk_1E346F4A8;
  *result = off_1E346F430;
  *(_QWORD *)(v16 + 88) = result;
  *(_QWORD *)(v16 + 56) = &off_1E3456A70;
  *(_QWORD *)v16 = off_1E34569A0;
  *a8 = v16;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberListAccessor<WebCore::SVGFEColorMatrixElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEComponentTransferElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE85068 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE85060;
  if (!qword_1ECE85060)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE85060 - 4);
  v4 = qword_1ECE85060 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE85060 - 12))
  {
    v13 = qword_1ECE85060 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE85060;
    if (!qword_1ECE85060)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE85060;
    if (qword_1ECE85060)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85060 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE85060)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE85060 + v14;
    if (qword_1ECE85060)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEComponentTransferElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85068 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85060;
  if (!qword_1ECE85060)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE85060 - 4);
  v9 = qword_1ECE85060 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85060 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85060 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85060;
    if (!qword_1ECE85060)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85060;
    if (qword_1ECE85060)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85060 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85060)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85060 + v18);
    if (qword_1ECE85060)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEComponentTransferElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85068 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85060;
  if (!qword_1ECE85060)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE85060 - 4);
  v9 = qword_1ECE85060 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85060 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85060 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85060;
    if (!qword_1ECE85060)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85060;
    if (qword_1ECE85060)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85060 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85060)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85060 + v18);
    if (qword_1ECE85060)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEComponentTransferElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85068 & 1) != 0)
  {
    v6 = qword_1ECE85060;
    if (!qword_1ECE85060)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85060;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85060)
      v7 = (WTF::StringImpl ***)(qword_1ECE85060 + 16 * *(unsigned int *)(qword_1ECE85060 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
  }
LABEL_7:
  if ((byte_1ECE85068 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEComponentTransferElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE85068 & 1) != 0)
  {
    v6 = qword_1ECE85060;
    if (!qword_1ECE85060)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85060;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85060)
      v7 = (WTF::StringImpl ***)(qword_1ECE85060 + 16 * *(unsigned int *)(qword_1ECE85060 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
  }
LABEL_7:
  if ((byte_1ECE85068 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_29;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_29:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD))*result
                                    + 8))(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEComponentTransferElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE85068 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE85060;
  if (!qword_1ECE85060)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE85060 - 4);
  v6 = qword_1ECE85060 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE85060 - 12))
  {
    v15 = qword_1ECE85060 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE85060;
    if (!qword_1ECE85060)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE85060;
    if (qword_1ECE85060)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85060 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE85060)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE85060 + v16;
    if (qword_1ECE85060)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEComponentTransferElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE85068 & 1) != 0)
  {
    v3 = qword_1ECE85060;
    if (!qword_1ECE85060)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE85060;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE85060)
      v4 = (WTF::StringImpl ***)(qword_1ECE85060 + 16 * *(unsigned int *)(qword_1ECE85060 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
  }
LABEL_7:
  if ((byte_1ECE85068 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEComponentTransferElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE85078 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE85070 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85070, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85070, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85070, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85070, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85070, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85070, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85070, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85070, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85070, v22, (uint64_t)v13);
    byte_1ECE85078 = 1;
  }
  if ((byte_1ECE85068 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE85060;
  if (!qword_1ECE85060)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE85060;
  if (!v4)
  {
    if (qword_1ECE85060)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE85060 + 16 * *(unsigned int *)(qword_1ECE85060 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE85068 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE85070)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE85070 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85070 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85070 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEComponentTransferElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **result;
  WTF::StringImpl **v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE85068 & 1) != 0)
  {
    v14 = qword_1ECE85060;
    if (!qword_1ECE85060)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = qword_1ECE85060;
    if (v15)
      goto LABEL_7;
    if (qword_1ECE85060)
      v15 = (WTF::StringImpl ***)(qword_1ECE85060 + 16 * *(unsigned int *)(qword_1ECE85060 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
  }
LABEL_7:
  if ((byte_1ECE85068 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = v15[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))*result
                                    + 9))(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEComponentTransferElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85068 & 1) != 0)
  {
    v6 = qword_1ECE85060;
    if (!qword_1ECE85060)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85060;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85060)
      v7 = (WTF::StringImpl ***)(qword_1ECE85060 + 16 * *(unsigned int *)(qword_1ECE85060 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
  }
LABEL_7:
  if ((byte_1ECE85068 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE85060;
  if (!qword_1ECE85060)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE85060 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEComponentTransferElement::SVGFEComponentTransferElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t result;
  WTF::StringImpl **v4;
  uint64_t *v5;
  int i;
  int v7;
  uint64_t *v8;
  int v9;
  WebCore::QualifiedName::QualifiedNameImpl *v10;
  uint64_t v11;
  WebCore::QualifiedName::QualifiedNameImpl *v12;
  WTF *v13;
  void *v14;
  unsigned int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  WTF *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  if ((byte_1ECE85080 & 1) == 0)
  {
    qword_1ECE85130 = (uint64_t)off_1E345A608;
    unk_1ECE85138 = 224;
    byte_1ECE85080 = 1;
  }
  if ((byte_1ECE85068 & 1) != 0)
  {
    v0 = qword_1ECE85060;
    if (qword_1ECE85060)
    {
LABEL_6:
      v1 = *(_DWORD *)(v0 - 8);
      goto LABEL_7;
    }
  }
  else
  {
    qword_1ECE85060 = 0;
    byte_1ECE85068 = 1;
  }
  WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0);
  v0 = qword_1ECE85060;
  if (qword_1ECE85060)
    goto LABEL_6;
  v1 = 0;
LABEL_7:
  v2 = WebCore::SVGNames::inAttr;
  if (*(_QWORD *)(WebCore::SVGNames::inAttr + 16))
  {
    v27 = *(_QWORD *)(WebCore::SVGNames::inAttr + 24);
    v28 = *(_QWORD *)(WebCore::SVGNames::inAttr + 32);
    v29 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v30 = v29 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v31 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v30 + (v29 >> 11)) << 16) ^ (v30 + (v29 >> 11));
    v32 = (v27 >> 5) & 0x7FFF800 ^ ((v31 + (unsigned __int16)v27 + (v31 >> 11)) << 16) ^ (v31 + (unsigned __int16)v27 + (v31 >> 11));
    v33 = (v27 >> 37) & 0x7FFF800 ^ ((v32 + WORD2(v27) + (v32 >> 11)) << 16) ^ (v32 + WORD2(v27) + (v32 >> 11));
    v34 = (v28 >> 5) & 0x7FFF800 ^ ((v33 + (unsigned __int16)v28 + (v33 >> 11)) << 16) ^ (v33 + (unsigned __int16)v28 + (v33 >> 11));
    v35 = (v28 >> 37) & 0x7FFF800 ^ ((v34 + WORD2(v28) + (v34 >> 11)) << 16) ^ (v34 + WORD2(v28) + (v34 >> 11));
    v36 = (v35 + (v35 >> 11)) ^ (8 * (v35 + (v35 >> 11)));
    v37 = (v36 + (v36 >> 5)) ^ (4 * (v36 + (v36 >> 5)));
    v38 = (v37 + (v37 >> 15)) ^ ((v37 + (v37 >> 15)) << 10);
    if (v38)
      result = v38;
    else
      result = 0x800000;
  }
  else
  {
    result = *(unsigned int *)(WebCore::SVGNames::inAttr + 4);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::inAttr);
      *(_DWORD *)(v2 + 4) = result;
    }
  }
  v4 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v5 = 0;
    for (i = 1; ; ++i)
    {
      v7 = result & v1;
      v8 = (uint64_t *)(v0 + 16 * (result & v1));
      if (v4)
      {
        v9 = (*(_DWORD *)v4)++;
        v10 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
        if (v9)
        {
          *(_DWORD *)v4 = v9;
          v11 = (uint64_t)v4;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v4);
          result = WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
      }
      if (v10 == (WebCore::QualifiedName::QualifiedNameImpl *)v4)
        break;
      v12 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
      if (*v8 != -1)
      {
        if (v12 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::inAttr)
          return result;
        if (*((_QWORD *)v12 + 3) == *(_QWORD *)(WebCore::SVGNames::inAttr + 24))
        {
          v8 = v5;
          if (*((_QWORD *)v12 + 4) == *(_QWORD *)(WebCore::SVGNames::inAttr + 32))
            return result;
        }
        else
        {
          v8 = v5;
        }
      }
      result = (i + v7);
      v4 = (WTF::StringImpl **)v11;
      v5 = v8;
    }
LABEL_35:
    if (v5)
    {
      v18 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v5 = v18;
      v5[1] = 0;
      --*(_DWORD *)(qword_1ECE85060 - 16);
      v8 = v5;
    }
  }
  else
  {
    v15 = result & v1;
    v8 = (uint64_t *)(v0 + 16 * (result & v1));
    v16 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
    if (*v8)
    {
      result = 0;
      v17 = 1;
      while (1)
      {
        v5 = v8;
        if (v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        {
          if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::inAttr)
            return result;
          if (*((_QWORD *)v16 + 3) == *(_QWORD *)(WebCore::SVGNames::inAttr + 24))
          {
            v5 = (uint64_t *)result;
            if (*((_QWORD *)v16 + 4) == *(_QWORD *)(WebCore::SVGNames::inAttr + 32))
              return result;
          }
          else
          {
            v5 = (uint64_t *)result;
          }
        }
        v15 = (v15 + v17) & v1;
        v8 = (uint64_t *)(v0 + 16 * v15);
        v16 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
        ++v17;
        result = (uint64_t)v5;
        if (!*v8)
          goto LABEL_35;
      }
    }
  }
  v19 = WebCore::SVGNames::inAttr;
  if (WebCore::SVGNames::inAttr)
    ++*(_DWORD *)WebCore::SVGNames::inAttr;
  result = *v8;
  *v8 = v19;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
      result = WTF::fastFree(v25, v26);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v8[1] = (uint64_t)&qword_1ECE85130;
  if (qword_1ECE85060)
    v20 = *(_DWORD *)(qword_1ECE85060 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(qword_1ECE85060 - 12) = v20;
  if (qword_1ECE85060)
    v21 = *(_DWORD *)(qword_1ECE85060 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(qword_1ECE85060 - 16) + v21);
  v23 = *(unsigned int *)(qword_1ECE85060 - 4);
  if (v23 <= 0x400)
  {
    if (3 * v23 > 4 * v22)
      return result;
    if (!(_DWORD)v23)
    {
      v24 = 8;
      return (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v24, (WebCore::QualifiedName::QualifiedNameImpl **)v8);
    }
LABEL_54:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(qword_1ECE85060 - 12) >= (2 * v23));
    return (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v24, (WebCore::QualifiedName::QualifiedNameImpl **)v8);
  }
  if (v23 <= 2 * v22)
    goto LABEL_54;
  return result;
}

_DWORD *WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *result;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  WTF::StringImpl ***v50;

  v3 = &qword_1ECE85000;
  v4 = qword_1ECE85060;
  if (qword_1ECE85060)
  {
    v5 = *(_DWORD *)(qword_1ECE85060 - 4);
    v6 = *(_DWORD *)(qword_1ECE85060 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = result + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE85060 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE85060 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v48 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        return (_DWORD *)WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = v3[12];
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v50 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v50;
        v15 = v48;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &qword_1ECE85000;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &qword_1ECE85000;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v50;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v48;
    goto LABEL_40;
  }
  if (v4)
    return (_DWORD *)WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEComponentTransferElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEComponentTransferElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEComponentTransferElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEComponentTransferElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEComponentTransferElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEComponentTransferElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEComponentTransferElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

void WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(WebCore::SVGFilterPrimitiveStandardAttributes *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;

  *(_QWORD *)this = off_1E3467D10;
  *((_QWORD *)this + 14) = &unk_1E3468270;
  v3 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_21;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_21:
    v11 = *(_QWORD *)(v9 + 8);
    v12 = v11 - 1;
    *(_QWORD *)(v9 + 8) = v11 - 1;
    if (v11 == 1)
    {
      v16 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 24) = 0;
      v14 = v16 != 0;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    v15 = __ldxr((unsigned __int8 *)v9);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
        if (v12)
          goto LABEL_33;
        goto LABEL_29;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      goto LABEL_33;
LABEL_29:
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (!v14)
      WTF::fastFree((WTF *)v9, a2);
  }
LABEL_33:
  WebCore::SVGElement::~SVGElement(this, a2);
}

uint64_t *WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>,WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>&&)#1},WTF::Vector<WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;

  v3 = *(uint64_t **)a2;
  if (!*(_QWORD *)a2)
  {
LABEL_2:
    a2[2] = 0;
LABEL_3:
    a2[3] = 0;
    return result;
  }
  v4 = result;
  v5 = *((unsigned int *)v3 - 1);
  if (!(_DWORD)v5)
    goto LABEL_18;
  v6 = 0;
  v7 = v5 - 1;
  do
  {
    result = &v3[v7];
    if ((unint64_t)(*result + 1) >= 2 && !*(_QWORD *)(*result + 8))
    {
      v32 = v3;
      v33 = v7;
      result = (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(result, a2);
      v3 = v32;
      v7 = v33;
      ++v6;
    }
  }
  while ((unint64_t)v7--);
  v3 = *(uint64_t **)a2;
  if (v6)
  {
    *((_DWORD *)v3 - 4) += v6;
    v29 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v30 = *(_DWORD *)(v29 - 12);
    else
      v30 = 0;
    *(_DWORD *)(v29 - 12) = v30 - v6;
    v3 = *(uint64_t **)a2;
  }
  if (!v3)
    goto LABEL_2;
  v9 = *((_DWORD *)v3 - 1);
  if (v9 < 9 || 6 * *((_DWORD *)v3 - 3) >= v9)
  {
LABEL_18:
    a2[2] = 0;
  }
  else
  {
    result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)a2);
    v3 = *(uint64_t **)a2;
    a2[2] = 0;
    if (!v3)
      goto LABEL_3;
  }
  v11 = *((_DWORD *)v3 - 3);
  if (v11 >= 0x7FFFFFFF)
    v12 = -2;
  else
    v12 = 2 * v11;
  a2[3] = v12;
  v13 = *((unsigned int *)v3 - 3);
  if (!(_DWORD)v13)
    goto LABEL_25;
  if (v13 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x196613DB8);
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v13));
  *((_DWORD *)v4 + 2) = v13;
  *v4 = (uint64_t)result;
  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)a2)
  {
LABEL_25:
    v14 = *((unsigned int *)v3 - 1);
    v15 = &v3[v14];
    v16 = v15;
    if (*((_DWORD *)v3 - 3))
    {
      if (!(_DWORD)v14)
      {
        v18 = 0;
        v16 = v3;
        goto LABEL_32;
      }
      v17 = 8 * v14;
      v16 = v3;
      while ((unint64_t)(*v16 + 1) <= 1)
      {
        ++v16;
        v17 -= 8;
        if (!v17)
        {
          v16 = v15;
          break;
        }
      }
    }
    v18 = *((unsigned int *)v3 - 1);
LABEL_32:
    v19 = &v3[v18];
    if (v19 != v16)
    {
      while (!*(_QWORD *)(*v16 + 8))
      {
        v31 = v16 + 1;
        v16 = v15;
        if (v31 != v15)
        {
          v16 = v31;
          while ((unint64_t)(*v16 + 1) <= 1)
          {
            if (++v16 == v15)
            {
              v16 = v15;
              break;
            }
          }
        }
        if (v16 == v19)
        {
          v16 = v19;
          break;
        }
      }
    }
    v20 = &v3[*((unsigned int *)v3 - 1)];
    if (v16 != v20)
    {
      v21 = *v4;
      v22 = *((_DWORD *)v4 + 3);
      v23 = a2[2];
      do
      {
        v25 = *v16;
        v24 = v16 + 1;
        v26 = *(_QWORD *)(v25 + 8);
        *(_DWORD *)(v26 + 24) += 2;
        *(_QWORD *)(v21 + 8 * v22) = v26;
        v27 = v15;
        if (v24 != v15)
        {
          v27 = v24;
          while ((unint64_t)(*v27 + 1) <= 1)
          {
            if (++v27 == v15)
            {
              v27 = v15;
              break;
            }
          }
        }
        v16 = v19;
        if (v27 != v19)
        {
          v16 = v27;
          if (!*(_QWORD *)(*v27 + 8))
          {
            while (1)
            {
              v28 = v16 + 1;
              v16 = v15;
              if (v28 != v15)
              {
                v16 = v28;
                while ((unint64_t)(*v16 + 1) <= 1)
                {
                  if (++v16 == v15)
                  {
                    v16 = v15;
                    break;
                  }
                }
              }
              if (v16 == v19)
                break;
              if (*(_QWORD *)(*v16 + 8))
                goto LABEL_41;
            }
            v16 = v19;
          }
        }
LABEL_41:
        ++v22;
        ++v23;
      }
      while (v16 != v20);
      *((_DWORD *)v4 + 3) = v22;
      a2[2] = v23;
    }
  }
  return result;
}

void *WTF::Vector<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t a1, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  void *result;
  __int16 v6;
  __int16 v7;

  v3 = (uint64_t *)(*(_QWORD *)a1 + 8 * (_QWORD)a2);
  v4 = *v3;
  *v3 = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v6 = *(_WORD *)(v4 + 30);
      if ((v6 & 0x400) == 0)
      {
        v7 = *(_WORD *)(v4 + 28);
        if ((v7 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v4, a2);
        }
        else
        {
          if ((v7 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v6 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v6 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  result = memmove(v3, v3 + 1, *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12) - (_QWORD)(v3 + 1));
  --*(_DWORD *)(a1 + 12);
  return result;
}

void *std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGElement::SVGElement(WebCore::QualifiedName const&,WebCore::Document &,WTF::UniqueRef<WebCore::SVGPropertyRegistry> &&,WTF::OptionSet<WebCore::Node::TypeFlag>)::$_0 &&>>()
{
  if ((byte_1ECE85088 & 1) == 0)
  {
    qword_1ECE85140 = (uint64_t)off_1E345A690;
    unk_1ECE85148 = 168;
    byte_1ECE85088 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::registerProperty();
}

void *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::registerProperty()
{
  uint64_t v1;
  uint64_t *v2;

  {
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  v2 = &qword_1ECE85140;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>((uint64_t)&v1, (uint64_t *)&v2);
}

void *WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>(uint64_t a1, uint64_t *a2)
{
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t *v7;
  void *result;
  int v9;
  char *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  int v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  uint64_t v20;

  v4 = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(0),
        (v4 = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap) != 0))
  {
    v5 = *(v4 - 2);
  }
  else
  {
    v5 = 0;
  }
  v6 = WebCore::SVGAttributeHashTranslator::hash(&WebCore::HTMLNames::classAttr) & v5;
  v7 = (uint64_t *)&v4[4 * v6];
  result = (void *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket((WTF::StringImpl **)*v7);
  if ((result & 1) == 0)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      v18 = (WTF::StringImpl **)*v7;
      if (*v7 == -1)
      {
        v16 = v7;
      }
      else if (v18 == (WTF::StringImpl **)WebCore::HTMLNames::classAttr
             || v18[3] == *(WTF::StringImpl **)(WebCore::HTMLNames::classAttr + 24)
             && v18[4] == *(WTF::StringImpl **)(WebCore::HTMLNames::classAttr + 32))
      {
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          v20 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                - 1);
        else
          v20 = 0;
        v15 = 0;
        v14 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
            + 16 * v20;
        goto LABEL_12;
      }
      v6 = (v6 + v17) & v5;
      v7 = (uint64_t *)&v4[4 * v6];
      result = (void *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket((WTF::StringImpl **)*v7);
      ++v17;
    }
    while (!(_DWORD)result);
    if (v16)
    {
      v19 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v16 = v19;
      v16[1] = 0;
      --*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 4);
      v7 = v16;
    }
  }
  result = WTF::GenericHashTraits<WebCore::QualifiedName>::assignToEmpty<WebCore::QualifiedName,WebCore::QualifiedName const&>((WTF::StringImpl ***)v7, (WTF::StringImpl ***)&WebCore::HTMLNames::classAttr);
  v7[1] = *a2;
  if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    v9 = *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
         - 3)
       + 1;
  else
    v9 = 1;
  *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
  - 3) = v9;
  v10 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    v11 = *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
          - 3);
  else
    v11 = 0;
  v12 = (*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                       - 4)
                     + v11);
  v13 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  if (v13 > 0x400)
  {
    if (v13 > 2 * v12)
      goto LABEL_11;
LABEL_25:
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand((WTF::StringImpl ***)v7);
    v7 = (uint64_t *)result;
    v10 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v13 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
            - 1);
    else
      v13 = 0;
    goto LABEL_11;
  }
  if (3 * v13 <= 4 * v12)
    goto LABEL_25;
LABEL_11:
  v14 = &v10[16 * v13];
  v15 = 1;
LABEL_12:
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v14;
  *(_BYTE *)(a1 + 16) = v15;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(WTF::StringImpl ***a1)
{
  int v2;
  unsigned int v3;

  if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
    && (v2 = *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             - 1)) != 0)
  {
    v3 = v2 << (6
              * *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                - 3) >= (2 * v2));
  }
  else
  {
    v3 = 8;
  }
  return WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v3, a1);
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WTF::StringImpl ***a2)
{
  WTF::StringImpl ***v4;
  uint64_t v5;
  int v6;
  void *v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;

  v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    LODWORD(v5) = *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                  - 1);
    v6 = *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
         - 3);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = (_UNKNOWN *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::allocateTable(a1);
  *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
  - 1) = a1;
  *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
  - 2) = a1 - 1;
  *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
  - 4) = 0;
  *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
  - 3) = v6;
  v8 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v10 = v4;
    do
    {
      if (*v10 != (WTF::StringImpl **)-1)
      {
        if (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(*v10))
        {
          WebCore::QualifiedName::~QualifiedName(v10);
        }
        else
        {
          v11 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert((WebCore::QualifiedName::QualifiedNameImpl **)v10);
          WebCore::QualifiedName::~QualifiedName(v10);
          if (v10 == a2)
            v8 = v11;
        }
      }
      v10 += 2;
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  result = 0;
  if (v4)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v4 - 2), v7);
    return v8;
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  WTF::StringImpl ***v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  _BOOL4 isEmptyBucket;
  WTF::StringImpl ***v8;
  WTF::StringImpl **v9;
  __int128 v10;
  WTF *v12;
  void *v13;

  v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    v3 = *((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
         - 2);
  else
    v3 = 0;
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    isEmptyBucket = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v2[2 * v6]);
    v4 = ++v5 + v6;
  }
  while (!isEmptyBucket);
  v8 = &v2[2 * v6];
  v9 = *v8;
  *v8 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v9);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = *(_OWORD *)a1;
  *a1 = 0;
  *(_OWORD *)v8 = v10;
  return v8;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

unsigned int **WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::SVGResourceElementClient&)#1},WTF::Vector<WTF::WeakPtr<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(unsigned int **result, _DWORD *a2)
{
  unsigned int **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v15;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = result;
  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
LABEL_2:
    a2[2] = 0;
LABEL_3:
    a2[3] = 0;
LABEL_4:
    v5 = 0;
    v6 = 0;
    v4 = 0;
    v7 = 0;
    v8 = 0;
    v31 = 0;
    v32 = 0;
    v30 = a2;
    v9 = 1;
    goto LABEL_5;
  }
  v11 = *(unsigned int *)(v4 - 4);
  if (!(_DWORD)v11)
    goto LABEL_23;
  v12 = 0;
  v13 = v11 - 1;
  do
  {
    result = (unsigned int **)(v4 + 8 * v13);
    if ((unint64_t)*result + 1 >= 2 && !*((_QWORD *)*result + 1))
    {
      v27 = v4;
      v28 = v13;
      result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(result, a2);
      v4 = v27;
      v13 = v28;
      ++v12;
    }
  }
  while ((unint64_t)v13--);
  v4 = *(_QWORD *)a2;
  if (v12)
  {
    *(_DWORD *)(v4 - 16) += v12;
    v24 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    *(_DWORD *)(v24 - 12) = v25 - v12;
    v4 = *(_QWORD *)a2;
  }
  if (!v4)
    goto LABEL_2;
  v15 = *(_DWORD *)(v4 - 4);
  if (v15 < 9 || 6 * *(_DWORD *)(v4 - 12) >= v15)
  {
LABEL_23:
    a2[2] = 0;
  }
  else
  {
    result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
    v4 = *(_QWORD *)a2;
    a2[2] = 0;
    if (!v4)
      goto LABEL_3;
  }
  v17 = *(_DWORD *)(v4 - 12);
  if (v17 >= 0x7FFFFFFF)
    v18 = -2;
  else
    v18 = 2 * v17;
  a2[3] = v18;
  v19 = *(unsigned int *)(v4 - 12);
  if ((_DWORD)v19)
  {
    if (v19 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x196614710);
    }
    result = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v19));
    *((_DWORD *)v3 + 2) = v19;
    *v3 = (unsigned int *)result;
    v4 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_4;
  }
  v20 = *(unsigned int *)(v4 - 4);
  v6 = v4 + 8 * v20;
  if (*(_DWORD *)(v4 - 12))
  {
    v5 = v4;
    if ((_DWORD)v20)
    {
      v21 = 8 * v20;
      v5 = v4;
      while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
      {
        v5 += 8;
        v21 -= 8;
        if (!v21)
        {
          v5 = v6;
          break;
        }
      }
    }
    v30 = a2;
    v31 = v5;
  }
  else
  {
    v30 = a2;
    v31 = v4 + 8 * v20;
    v5 = v31;
  }
  v9 = 0;
  v32 = v6;
  v8 = *(unsigned int *)(v4 - 4);
  v7 = v4 + 8 * v8;
LABEL_5:
  v33 = v7;
  v34 = v4 + 8 * v8;
  if (v5 != v7)
  {
    if (*(_QWORD *)(*(_QWORD *)v5 + 8))
    {
      v23 = v5;
    }
    else
    {
      do
      {
        v26 = v5 + 8;
        v5 = v6;
        if (v26 != v6)
        {
          v5 = v26;
          while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
          {
            v5 += 8;
            if (v5 == v6)
            {
              v5 = v6;
              break;
            }
          }
        }
        v23 = v7;
        if (v5 == v7)
          break;
        v23 = v5;
      }
      while (!*(_QWORD *)(*(_QWORD *)v5 + 8));
    }
    v31 = v23;
    v5 = v23;
  }
  if ((v9 & 1) != 0)
    v10 = 0;
  else
    v10 = v4 + 8 * *(unsigned int *)(v4 - 4);
  while (v5 != v10)
  {
    WTF::copyToVector<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::SVGResourceElementClient&)#1}::operator()<WebCore::SVGResourceElementClient>(&v29, *(_QWORD *)(*(_QWORD *)v5 + 8));
    v22 = *((unsigned int *)v3 + 3);
    *(_QWORD *)&(*v3)[2 * v22] = v29;
    *((_DWORD *)v3 + 3) = v22 + 1;
    result = (unsigned int **)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v30);
    v5 = v31;
  }
  return result;
}

uint64_t WTF::copyToVector<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::SVGResourceElementClient&)#1}::operator()<WebCore::SVGResourceElementClient>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  result = *(_QWORD *)(a2 + 8);
  if (result)
    goto LABEL_11;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v6 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = result;
  if (!v6)
    goto LABEL_11;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  result = *(_QWORD *)(a2 + 8);
  if (result)
  {
LABEL_11:
    do
      v9 = __ldaxr((unsigned int *)result);
    while (__stlxr(v9 + 1, (unsigned int *)result));
  }
  *a1 = result;
  return result;
}

unsigned int *WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  unsigned int **v3;

  if (result[2] > a2)
  {
    v2 = result;
    if (result[3] > a2)
      result[3] = a2;
    result = *(unsigned int **)result;
    if (a2)
    {
      v3 = (unsigned int **)v2;
      v2[2] = a2;
      result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(4 * a2));
      *v3 = result;
    }
    else if (result)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

void WebCore::SVGFECompositeElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char **v25;
  char *v26;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E345A828;
  v6[14] = (uint64_t)&unk_1E345AD88;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E345CF28;
  *((_QWORD *)v7 + 1) = v6;
  v26 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v26);
  v8 = (uint64_t)v26;
  v26 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *v6 = (uint64_t)off_1E345A828;
  v6[14] = (uint64_t)&unk_1E345AD88;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E3452E28;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E3452EA8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = off_1E347BDB8;
  v6[28] = v9;
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)v11 = &off_1E3452E28;
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_WORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = &off_1E3452EA8;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)v11 = off_1E347BDB8;
  v6[29] = v11;
  v13 = WTF::fastMalloc((WTF *)0x40);
  v14 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v14 + 8) = 1;
  *(_BYTE *)(v14 + 12) = 1;
  *(_QWORD *)v14 = off_1E345CF98;
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 16) = v6;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)v13 = &off_1E34568A0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = 0;
  *(_BYTE *)(v13 + 56) = 0;
  v6[30] = v13;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = v6;
  *(_QWORD *)v15 = &off_1E34566C8;
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(_QWORD *)v16 = off_1E3456748;
  *(_DWORD *)(v16 + 28) = 0;
  *(_QWORD *)(v15 + 40) = v16;
  *(_QWORD *)(v15 + 48) = 0;
  v6[31] = v15;
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = v6;
  *(_QWORD *)v17 = &off_1E34566C8;
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)(v18 + 16) = 0;
  *(_WORD *)(v18 + 24) = 0;
  *(_QWORD *)v18 = off_1E3456748;
  *(_DWORD *)(v18 + 28) = 0;
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = 0;
  v6[32] = v17;
  v19 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 16) = v6;
  *(_QWORD *)v19 = &off_1E34566C8;
  v20 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)(v20 + 16) = 0;
  *(_WORD *)(v20 + 24) = 0;
  *(_QWORD *)v20 = off_1E3456748;
  *(_DWORD *)(v20 + 28) = 0;
  *(_QWORD *)(v19 + 40) = v20;
  *(_QWORD *)(v19 + 48) = 0;
  v6[33] = v19;
  v21 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v21 + 8) = 1;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 16) = v6;
  *(_QWORD *)v21 = &off_1E34566C8;
  v22 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = 0;
  *(_WORD *)(v22 + 24) = 0;
  *(_QWORD *)v22 = off_1E3456748;
  *(_DWORD *)(v22 + 28) = 0;
  *(_QWORD *)(v21 + 40) = v22;
  *(_QWORD *)(v21 + 48) = 0;
  v6[34] = v21;
  v23 = atomic_load(&WebCore::SVGFECompositeElement::SVGFECompositeElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v23 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&WebCore::SVGFECompositeElement::SVGFECompositeElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFECompositeElement::SVGFECompositeElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

_QWORD *WebCore::SVGFECompositeElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::String *this, int a5)
{
  unsigned int v10;
  uint64_t v11;
  char **v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  int v22;
  int v23;

  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 > 0x210)
  {
    switch(*(_WORD *)(*(_QWORD *)a2 + 10))
    {
      case 0x211:
        v11 = a1[31];
        goto LABEL_15;
      case 0x212:
        v11 = a1[32];
        goto LABEL_15;
      case 0x213:
        v11 = a1[33];
        goto LABEL_15;
      case 0x214:
        v11 = a1[34];
LABEL_15:
        ++*(_DWORD *)(v11 + 8);
        WTF::String::toFloat(this, 0);
        *(_DWORD *)(*(_QWORD *)(v11 + 40) + 28) = v16;
        goto LABEL_16;
      default:
        if (v10 != 757)
          return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
        v12 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CompositeOperationType> [7]>::tryGet<WTF::String>(*(char ***)this);
        if (!v12)
          return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
        v13 = *(unsigned __int8 *)v12;
        if (!*(_BYTE *)v12)
          return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
        v11 = a1[30];
        ++*(_DWORD *)(v11 + 8);
        v14 = *(_QWORD *)(v11 + 40);
        v23 = v13;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 16))(v14, &v23);
        v15 = *(_QWORD *)(v11 + 48);
        if (v15)
        {
          v22 = v13;
          (*(void (**)(uint64_t, int *))(*(_QWORD *)v15 + 16))(v15, &v22);
        }
LABEL_16:
        v17 = *(_DWORD *)(v11 + 8) - 1;
        if (*(_DWORD *)(v11 + 8) != 1)
          goto LABEL_17;
        goto LABEL_26;
    }
  }
  if (v10 == 517)
  {
    v11 = a1[29];
LABEL_20:
    v17 = *(_DWORD *)(v11 + 8);
    *(_DWORD *)(v11 + 8) = v17 + 1;
    v19 = *(_QWORD *)(v11 + 40);
    v20 = *(_DWORD **)this;
    if (*(_QWORD *)this)
      *v20 += 2;
    v21 = *(WTF::StringImpl **)(v19 + 32);
    *(_QWORD *)(v19 + 32) = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, a2);
        v17 = *(_DWORD *)(v11 + 8) - 1;
        if (*(_DWORD *)(v11 + 8) == 1)
          goto LABEL_26;
LABEL_17:
        *(_DWORD *)(v11 + 8) = v17;
        return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
      }
      *(_DWORD *)v21 -= 2;
    }
    if (!v17)
    {
LABEL_26:
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
    }
    goto LABEL_17;
  }
  if (v10 == 518)
  {
    v11 = a1[28];
    goto LABEL_20;
  }
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
}

uint64_t WebCore::SVGFECompositeElement::setFilterEffectAttribute(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;

  if (*(_BYTE *)(a2 + 48) != 5)
  {
    __break(0xC471u);
    JUMPOUT(0x196614FA8);
  }
  switch(*(_WORD *)(*(_QWORD *)a3 + 10))
  {
    case 0x211:
      v4 = a1[31];
      v5 = *(_QWORD *)(v4 + 24);
      if (!v5 || !*(_DWORD *)(v5 - 12))
        goto LABEL_4;
      v31 = *(unsigned int *)(v5 - 4);
      if ((_DWORD)v31)
      {
        v32 = 8 * v31;
        v33 = *(uint64_t **)(v4 + 24);
        while ((unint64_t)(*v33 + 1) <= 1)
        {
          ++v33;
          v32 -= 8;
          if (!v32)
            goto LABEL_4;
        }
      }
      else
      {
        v33 = *(uint64_t **)(v4 + 24);
      }
      v44 = (uint64_t *)(v5 + 8 * v31);
      if (v33 == v44)
      {
LABEL_4:
        v6 = v4 + 40;
      }
      else
      {
        v45 = *v33;
        while (!*(_QWORD *)(v45 + 8))
        {
          do
          {
            if (++v33 == v44)
              goto LABEL_4;
            v45 = *v33;
          }
          while ((unint64_t)(*v33 + 1) <= 1);
          if (v33 == v44)
            goto LABEL_4;
        }
        v6 = v4 + 48;
      }
      v7 = *(float *)(*(_QWORD *)v6 + 28);
      if (*(float *)(a2 + 68) == v7)
        return 0;
      *(float *)(a2 + 68) = v7;
      return 1;
    case 0x212:
      v20 = a1[32];
      v21 = *(_QWORD *)(v20 + 24);
      if (!v21 || !*(_DWORD *)(v21 - 12))
        goto LABEL_21;
      v37 = *(unsigned int *)(v21 - 4);
      if ((_DWORD)v37)
      {
        v38 = 8 * v37;
        v39 = *(uint64_t **)(v20 + 24);
        while ((unint64_t)(*v39 + 1) <= 1)
        {
          ++v39;
          v38 -= 8;
          if (!v38)
            goto LABEL_21;
        }
      }
      else
      {
        v39 = *(uint64_t **)(v20 + 24);
      }
      v48 = (uint64_t *)(v21 + 8 * v37);
      if (v39 == v48)
      {
LABEL_21:
        v22 = v20 + 40;
        goto LABEL_22;
      }
      v49 = *v39;
      while (!*(_QWORD *)(v49 + 8))
      {
        do
        {
          if (++v39 == v48)
            goto LABEL_21;
          v49 = *v39;
        }
        while ((unint64_t)(*v39 + 1) <= 1);
        if (v39 == v48)
          goto LABEL_21;
      }
      v22 = v20 + 48;
LABEL_22:
      v23 = *(float *)(*(_QWORD *)v22 + 28);
      if (*(float *)(a2 + 72) == v23)
        return 0;
      *(float *)(a2 + 72) = v23;
      return 1;
    case 0x213:
      v12 = a1[33];
      v13 = *(_QWORD *)(v12 + 24);
      if (!v13 || !*(_DWORD *)(v13 - 12))
        goto LABEL_13;
      v28 = *(unsigned int *)(v13 - 4);
      if ((_DWORD)v28)
      {
        v29 = 8 * v28;
        v30 = *(uint64_t **)(v12 + 24);
        while ((unint64_t)(*v30 + 1) <= 1)
        {
          ++v30;
          v29 -= 8;
          if (!v29)
            goto LABEL_13;
        }
      }
      else
      {
        v30 = *(uint64_t **)(v12 + 24);
      }
      v42 = (uint64_t *)(v13 + 8 * v28);
      if (v30 == v42)
      {
LABEL_13:
        v14 = v12 + 40;
        goto LABEL_14;
      }
      v43 = *v30;
      while (!*(_QWORD *)(v43 + 8))
      {
        do
        {
          if (++v30 == v42)
            goto LABEL_13;
          v43 = *v30;
        }
        while ((unint64_t)(*v30 + 1) <= 1);
        if (v30 == v42)
          goto LABEL_13;
      }
      v14 = v12 + 48;
LABEL_14:
      v15 = *(float *)(*(_QWORD *)v14 + 28);
      if (*(float *)(a2 + 76) == v15)
        return 0;
      *(float *)(a2 + 76) = v15;
      return 1;
    case 0x214:
      v16 = a1[34];
      v17 = *(_QWORD *)(v16 + 24);
      if (!v17 || !*(_DWORD *)(v17 - 12))
        goto LABEL_17;
      v34 = *(unsigned int *)(v17 - 4);
      if ((_DWORD)v34)
      {
        v35 = 8 * v34;
        v36 = *(uint64_t **)(v16 + 24);
        while ((unint64_t)(*v36 + 1) <= 1)
        {
          ++v36;
          v35 -= 8;
          if (!v35)
            goto LABEL_17;
        }
      }
      else
      {
        v36 = *(uint64_t **)(v16 + 24);
      }
      v46 = (uint64_t *)(v17 + 8 * v34);
      if (v36 == v46)
      {
LABEL_17:
        v18 = v16 + 40;
        goto LABEL_18;
      }
      v47 = *v36;
      while (!*(_QWORD *)(v47 + 8))
      {
        do
        {
          if (++v36 == v46)
            goto LABEL_17;
          v47 = *v36;
        }
        while ((unint64_t)(*v36 + 1) <= 1);
        if (v36 == v46)
          goto LABEL_17;
      }
      v18 = v16 + 48;
LABEL_18:
      v19 = *(float *)(*(_QWORD *)v18 + 28);
      if (*(float *)(a2 + 80) == v19)
        return 0;
      *(float *)(a2 + 80) = v19;
      return 1;
    default:
      if (*(_WORD *)(*(_QWORD *)a3 + 10) != 757)
        return 0;
      v8 = (_QWORD *)a1[30];
      v9 = v8[3];
      if (!v9 || !*(_DWORD *)(v9 - 12))
        goto LABEL_9;
      v25 = *(unsigned int *)(v9 - 4);
      if ((_DWORD)v25)
      {
        v26 = 8 * v25;
        v27 = (uint64_t *)v8[3];
        while ((unint64_t)(*v27 + 1) <= 1)
        {
          ++v27;
          v26 -= 8;
          if (!v26)
            goto LABEL_9;
        }
      }
      else
      {
        v27 = (uint64_t *)v8[3];
      }
      v40 = (uint64_t *)(v9 + 8 * v25);
      if (v27 == v40)
      {
LABEL_9:
        v10 = v8 + 5;
        goto LABEL_10;
      }
      v41 = *v27;
      while (!*(_QWORD *)(v41 + 8))
      {
        do
        {
          if (++v27 == v40)
            goto LABEL_9;
          v41 = *v27;
        }
        while ((unint64_t)(*v27 + 1) <= 1);
        if (v27 == v40)
          goto LABEL_9;
      }
      v10 = v8 + 6;
LABEL_10:
      v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10);
      if (*(unsigned __int8 *)(a2 + 64) == v11)
        return 0;
      *(_BYTE *)(a2 + 64) = v11;
      return 1;
  }
}

void WebCore::SVGFECompositeElement::svgAttributeChanged(WebCore::SVGFECompositeElement *this, const WebCore::QualifiedName *a2)
{
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;

  v4 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if ((v4 - 529) < 4)
    goto LABEL_2;
  if ((v4 - 517) >= 2)
  {
    if (v4 != 757)
    {
      WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, a2);
      return;
    }
LABEL_2:
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v5 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v5 = 1;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 8) = this;
      *(_BYTE *)(v5 + 32) = 0;
      v7 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v7 & 0xFFFF000000000000 | v5;
      v8 = v7 & 0xFFFFFFFFFFFFLL;
      if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v9 = __ldaxr((unsigned int *)v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)v8));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)v8);
          v34 = *(unsigned int *)(v8 + 28);
          if ((_DWORD)v34)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v34));
          v35 = *(WTF **)(v8 + 16);
          if (v35)
          {
            *(_QWORD *)(v8 + 16) = 0;
            *(_DWORD *)(v8 + 24) = 0;
            WTF::fastFree(v35, v6);
          }
          WTF::fastFree((WTF *)v8, v6);
        }
      }
    }
    v11 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
    do
      v12 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v12 + 1, (unsigned int *)v11));
    WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(this, a2);
    WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v11 + 8), v13);
    do
    {
      v15 = __ldaxr((unsigned int *)v11);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v11));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v11);
      v17 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v17)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v17));
      v18 = *(WTF **)(v11 + 16);
      if (v18)
      {
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        WTF::fastFree(v18, v14);
      }
      v19 = (WTF *)v11;
LABEL_38:
      WTF::fastFree(v19, v14);
      return;
    }
    return;
  }
  if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v20 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 8) = this;
    *(_BYTE *)(v20 + 32) = 0;
    v22 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v22 & 0xFFFF000000000000 | v20;
    v23 = v22 & 0xFFFFFFFFFFFFLL;
    if ((v22 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v24 = __ldaxr((unsigned int *)v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unsigned int *)v23));
      if (!v25)
      {
        atomic_store(1u, (unsigned int *)v23);
        v36 = *(unsigned int *)(v23 + 28);
        if ((_DWORD)v36)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v36));
        v37 = *(WTF **)(v23 + 16);
        if (v37)
        {
          *(_QWORD *)(v23 + 16) = 0;
          *(_DWORD *)(v23 + 24) = 0;
          WTF::fastFree(v37, v21);
        }
        WTF::fastFree((WTF *)v23, v21);
      }
    }
  }
  v26 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
  do
    v27 = __ldaxr((unsigned int *)v26);
  while (__stlxr(v27 + 1, (unsigned int *)v26));
  v28 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v28 + 24) += 2;
  WebCore::Document::updateSVGRenderer((WebCore::Document *)v28, this);
  if (*(_DWORD *)(v28 + 24) == 2)
  {
    if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v28, v29);
  }
  else
  {
    *(_DWORD *)(v28 + 24) -= 2;
  }
  WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v26 + 8), v29);
  do
  {
    v30 = __ldaxr((unsigned int *)v26);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, (unsigned int *)v26));
  if (!v31)
  {
    atomic_store(1u, (unsigned int *)v26);
    v32 = *(unsigned int *)(v26 + 28);
    if ((_DWORD)v32)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v32));
    v33 = *(WTF **)(v26 + 16);
    if (v33)
    {
      *(_QWORD *)(v26 + 16) = 0;
      *(_DWORD *)(v26 + 24) = 0;
      WTF::fastFree(v33, v14);
    }
    v19 = (WTF *)v26;
    goto LABEL_38;
  }
}

void WebCore::SVGFECompositeElement::createFilterEffect(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char **v57;
  char *v58;

  v4 = (_QWORD *)a1[30];
  v5 = v4[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v29 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v29)
  {
    v30 = 8 * v29;
    v31 = (uint64_t *)v4[3];
    while ((unint64_t)(*v31 + 1) <= 1)
    {
      ++v31;
      v30 -= 8;
      if (!v30)
        goto LABEL_2;
    }
  }
  else
  {
    v31 = (uint64_t *)v4[3];
  }
  v44 = (uint64_t *)(v5 + 8 * v29);
  if (v31 == v44)
    goto LABEL_2;
  v45 = *v31;
LABEL_50:
  if (!*(_QWORD *)(v45 + 8))
  {
    while (++v31 != v44)
    {
      v45 = *v31;
      if ((unint64_t)(*v31 + 1) > 1)
      {
        if (v31 != v44)
          goto LABEL_50;
        break;
      }
    }
LABEL_2:
    v6 = v4 + 5;
    goto LABEL_3;
  }
  v6 = v4 + 6;
LABEL_3:
  v55 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  v7 = (_QWORD *)a1[31];
  v8 = v7[3];
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_4;
  v32 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v32)
  {
    v33 = 8 * v32;
    v34 = (uint64_t *)v7[3];
    while ((unint64_t)(*v34 + 1) <= 1)
    {
      ++v34;
      v33 -= 8;
      if (!v33)
        goto LABEL_4;
    }
  }
  else
  {
    v34 = (uint64_t *)v7[3];
  }
  v46 = (uint64_t *)(v8 + 8 * v32);
  if (v34 == v46)
    goto LABEL_4;
  v47 = *v34;
LABEL_59:
  if (!*(_QWORD *)(v47 + 8))
  {
    while (++v34 != v46)
    {
      v47 = *v34;
      if ((unint64_t)(*v34 + 1) > 1)
      {
        if (v34 != v46)
          goto LABEL_59;
        break;
      }
    }
LABEL_4:
    v9 = v7 + 5;
    goto LABEL_5;
  }
  v9 = v7 + 6;
LABEL_5:
  v10 = (_QWORD *)a1[32];
  v11 = v10[3];
  if (!v11 || !*(_DWORD *)(v11 - 12))
    goto LABEL_6;
  v35 = *(unsigned int *)(v11 - 4);
  if ((_DWORD)v35)
  {
    v36 = 8 * v35;
    v37 = (uint64_t *)v10[3];
    while ((unint64_t)(*v37 + 1) <= 1)
    {
      ++v37;
      v36 -= 8;
      if (!v36)
        goto LABEL_6;
    }
  }
  else
  {
    v37 = (uint64_t *)v10[3];
  }
  v48 = (uint64_t *)(v11 + 8 * v35);
  if (v37 == v48)
    goto LABEL_6;
  v49 = *v37;
LABEL_68:
  if (!*(_QWORD *)(v49 + 8))
  {
    while (++v37 != v48)
    {
      v49 = *v37;
      if ((unint64_t)(*v37 + 1) > 1)
      {
        if (v37 != v48)
          goto LABEL_68;
        break;
      }
    }
LABEL_6:
    v12 = v10 + 5;
    goto LABEL_7;
  }
  v12 = v10 + 6;
LABEL_7:
  v13 = (_QWORD *)a1[33];
  v14 = v13[3];
  if (!v14 || !*(_DWORD *)(v14 - 12))
    goto LABEL_8;
  v38 = *(unsigned int *)(v14 - 4);
  if ((_DWORD)v38)
  {
    v39 = 8 * v38;
    v40 = (uint64_t *)v13[3];
    while ((unint64_t)(*v40 + 1) <= 1)
    {
      ++v40;
      v39 -= 8;
      if (!v39)
        goto LABEL_8;
    }
  }
  else
  {
    v40 = (uint64_t *)v13[3];
  }
  v50 = (uint64_t *)(v14 + 8 * v38);
  if (v40 == v50)
    goto LABEL_8;
  v51 = *v40;
LABEL_77:
  if (!*(_QWORD *)(v51 + 8))
  {
    while (++v40 != v50)
    {
      v51 = *v40;
      if ((unint64_t)(*v40 + 1) > 1)
      {
        if (v40 != v50)
          goto LABEL_77;
        break;
      }
    }
LABEL_8:
    v15 = v13 + 5;
    goto LABEL_9;
  }
  v15 = v13 + 6;
LABEL_9:
  v16 = *v9;
  v17 = *v12;
  v18 = *v15;
  v19 = a1[34];
  v20 = *(_QWORD *)(v19 + 24);
  if (!v20 || !*(_DWORD *)(v20 - 12))
    goto LABEL_10;
  v41 = *(unsigned int *)(v20 - 4);
  if ((_DWORD)v41)
  {
    v42 = 8 * v41;
    v43 = *(uint64_t **)(v19 + 24);
    while ((unint64_t)(*v43 + 1) <= 1)
    {
      ++v43;
      v42 -= 8;
      if (!v42)
        goto LABEL_10;
    }
  }
  else
  {
    v43 = *(uint64_t **)(v19 + 24);
  }
  v52 = (uint64_t *)(v20 + 8 * v41);
  if (v43 == v52)
    goto LABEL_10;
  v53 = *v43;
LABEL_86:
  if (!*(_QWORD *)(v53 + 8))
  {
    while (++v43 != v52)
    {
      v53 = *v43;
      if ((unint64_t)(*v43 + 1) > 1)
      {
        if (v43 != v52)
          goto LABEL_86;
        break;
      }
    }
LABEL_10:
    v21 = v19 + 40;
    goto LABEL_11;
  }
  v21 = v19 + 48;
LABEL_11:
  v22 = *(float *)(v16 + 28);
  v23 = *(float *)(v17 + 28);
  v24 = *(float *)(v18 + 28);
  v25 = *(float *)(*(_QWORD *)v21 + 28);
  v26 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v26 != -1)
  {
    v58 = &v56;
    v57 = &v58;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v57, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v27 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  v54 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
  {
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    WebCore::FEComposite::create(&v55, (const void **)&v54, (uint64_t *)&v58, v22, v23, v24, v25);
    v28 = (uint64_t)v58;
    CFRelease(v27);
  }
  else
  {
    WebCore::FEComposite::create(&v55, (const void **)&v54, (uint64_t *)&v58, v22, v23, v24, v25);
    v28 = (uint64_t)v58;
  }
  *a2 = v28;
}

void WebCore::SVGFEConvolveMatrixElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char **v33;
  char *v34;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E345ADC0;
  v6[14] = (uint64_t)&unk_1E345B320;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E345D2E8;
  *((_QWORD *)v7 + 1) = v6;
  v34 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v34);
  v8 = (uint64_t)v34;
  v34 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *v6 = (uint64_t)off_1E345ADC0;
  v6[14] = (uint64_t)&unk_1E345B320;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E3452E28;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E3452EA8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = off_1E347BDB8;
  v6[28] = v9;
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)v11 = &off_1E345D358;
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_WORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = off_1E345D3D8;
  *(_DWORD *)(v12 + 28) = 0;
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = 0;
  v6[29] = v11;
  v13 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 16) = v6;
  *(_QWORD *)v13 = &off_1E345D358;
  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)(v14 + 16) = 0;
  *(_WORD *)(v14 + 24) = 0;
  *(_QWORD *)v14 = off_1E345D3D8;
  *(_DWORD *)(v14 + 28) = 0;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = 0;
  v6[30] = v13;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = v6;
  *(_QWORD *)v15 = off_1E3456920;
  v16 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = v15;
  *(_WORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)v16 = off_1E346F430;
  *(_QWORD *)(v16 + 48) = &unk_1E346F4A8;
  *(_QWORD *)(v15 + 40) = v16;
  *(_QWORD *)(v15 + 48) = 0;
  v6[31] = v15;
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = v6;
  *(_QWORD *)v17 = &off_1E34566C8;
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)(v18 + 16) = 0;
  *(_WORD *)(v18 + 24) = 0;
  *(_QWORD *)v18 = off_1E3456748;
  *(_DWORD *)(v18 + 28) = 0;
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = 0;
  v6[32] = v17;
  v19 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 16) = v6;
  *(_QWORD *)v19 = &off_1E34566C8;
  v20 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)(v20 + 16) = 0;
  *(_WORD *)(v20 + 24) = 0;
  *(_QWORD *)v20 = off_1E3456748;
  *(_DWORD *)(v20 + 28) = 0;
  *(_QWORD *)(v19 + 40) = v20;
  *(_QWORD *)(v19 + 48) = 0;
  v6[33] = v19;
  v21 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v21 + 8) = 1;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 16) = v6;
  *(_QWORD *)v21 = &off_1E345D358;
  v22 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = 0;
  *(_WORD *)(v22 + 24) = 0;
  *(_QWORD *)v22 = off_1E345D3D8;
  *(_DWORD *)(v22 + 28) = 0;
  *(_QWORD *)(v21 + 40) = v22;
  *(_QWORD *)(v21 + 48) = 0;
  v6[34] = v21;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = 1;
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 16) = v6;
  *(_QWORD *)v23 = &off_1E345D358;
  v24 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)(v24 + 16) = 0;
  *(_WORD *)(v24 + 24) = 0;
  *(_QWORD *)v24 = off_1E345D3D8;
  *(_DWORD *)(v24 + 28) = 0;
  *(_QWORD *)(v23 + 40) = v24;
  *(_QWORD *)(v23 + 48) = 0;
  v6[35] = v23;
  LOBYTE(v34) = 1;
  WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::create<WebCore::EdgeModeType,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>((uint64_t)v6, &v34, v6 + 36);
  v25 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v25 + 8) = 1;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 16) = v6;
  *(_QWORD *)v25 = &off_1E34566C8;
  v26 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v26 + 8) = 1;
  *(_QWORD *)(v26 + 16) = 0;
  *(_WORD *)(v26 + 24) = 0;
  *(_QWORD *)v26 = off_1E3456748;
  *(_DWORD *)(v26 + 28) = 0;
  *(_QWORD *)(v25 + 40) = v26;
  *(_QWORD *)(v25 + 48) = 0;
  v6[37] = v25;
  v27 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v27 + 8) = 1;
  *(_QWORD *)(v27 + 24) = 0;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)(v27 + 16) = v6;
  *(_QWORD *)v27 = &off_1E34566C8;
  v28 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v28 + 8) = 1;
  *(_QWORD *)(v28 + 16) = 0;
  *(_WORD *)(v28 + 24) = 0;
  *(_QWORD *)v28 = off_1E3456748;
  *(_DWORD *)(v28 + 28) = 0;
  *(_QWORD *)(v27 + 40) = v28;
  *(_QWORD *)(v27 + 48) = 0;
  v6[38] = v27;
  v29 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v29 + 8) = 1;
  *(_QWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 16) = v6;
  *(_QWORD *)v29 = &off_1E345D410;
  v30 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v30 + 8) = 1;
  *(_QWORD *)(v30 + 16) = 0;
  *(_WORD *)(v30 + 24) = 0;
  *(_QWORD *)v30 = off_1E345D490;
  *(_BYTE *)(v30 + 26) = 0;
  *(_QWORD *)(v29 + 40) = v30;
  *(_QWORD *)(v29 + 48) = 0;
  v6[39] = v29;
  v31 = atomic_load(&WebCore::SVGFEConvolveMatrixElement::SVGFEConvolveMatrixElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v31 != -1)
  {
    v33 = &v34;
    v34 = &v32;
    std::__call_once(&WebCore::SVGFEConvolveMatrixElement::SVGFEConvolveMatrixElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v33, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEConvolveMatrixElement::SVGFEConvolveMatrixElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

_QWORD *WebCore::SVGFEConvolveMatrixElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::String *this, int a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  int v44;
  _BOOL4 v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  _BOOL4 v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  int v64;
  int v65;
  _BOOL4 v66;
  WTF::StringImpl *v67;
  const WTF::StringImpl *v68;
  uint64_t v69;
  int v70;
  int v71;
  _BOOL4 v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  _BOOL4 v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v82;
  int *v83;

  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 > 0x216)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) > 0x311u)
    {
      if (v10 != 786)
      {
        if (v10 == 877)
        {
          v11 = a1[34];
        }
        else
        {
          if (v10 != 878)
            return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
          v11 = a1[35];
        }
        ++*(_DWORD *)(v11 + 8);
        v53 = *(_QWORD *)this;
        if (*(_QWORD *)this)
        {
          v54 = *(_QWORD *)(v53 + 8);
          v55 = *(unsigned int *)(v53 + 4);
          if ((*(_BYTE *)(v53 + 16) & 4) == 0)
          {
            v56 = WTF::parseInteger<unsigned int,char16_t>(v54, v55, 10, 0);
            goto LABEL_74;
          }
        }
        else
        {
          v54 = 0;
          v55 = 0;
        }
        v56 = WTF::parseInteger<unsigned int,unsigned char>(v54, v55, 10, 0);
LABEL_74:
        if ((v56 & 0xFF00000000) != 0)
          v57 = v56;
        else
          v57 = 0;
        *(_DWORD *)(*(_QWORD *)(v11 + 40) + 28) = v57;
        goto LABEL_137;
      }
      if (*(_QWORD *)this == WebCore::trueAtomData)
      {
        v16 = a1[39];
        v17 = *(_DWORD *)(v16 + 8);
        *(_DWORD *)(v16 + 8) = v17 + 1;
        *(_BYTE *)(*(_QWORD *)(v16 + 40) + 26) = 1;
        if (v17)
          goto LABEL_18;
        goto LABEL_31;
      }
      if (*(_QWORD *)this == WebCore::falseAtomData)
      {
        v16 = a1[39];
        v17 = *(_DWORD *)(v16 + 8);
        *(_DWORD *)(v16 + 8) = v17 + 1;
        *(_BYTE *)(*(_QWORD *)(v16 + 40) + 26) = 0;
        if (v17)
          goto LABEL_18;
        goto LABEL_31;
      }
      v39 = *(_QWORD *)(a1[5] + 8);
      *(_DWORD *)(v39 + 24) += 2;
      WebCore::Document::checkedSVGExtensions((WebCore::Document *)v39, &v83);
      v40 = v83;
      v41 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v42 = *(_DWORD *)(v41 + 4);
        *(_DWORD *)v41 += 2;
        if (v42 < 0)
          goto LABEL_197;
      }
      else
      {
        v42 = 0;
      }
      v43 = __OFADD__(v42, 42);
      v44 = v42 + 42;
      if (!v43 && !__OFADD__(v44, 53))
      {
        v45 = !v41 || (*(_BYTE *)(v41 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v44 + 53), v45, (int8x16_t *)"feConvolveMatrix: problem parsing preserveAlphaAttr=\"", 0x35u, v41, (int8x16_t *)"\". Filtered element will not be displayed.", 0x2Au, &v82);
        if (v82)
        {
          WebCore::SVGDocumentExtensions::reportWarning((uint64_t)v40, (const WTF::String *)&v82);
          v47 = v82;
          v82 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
            {
              WTF::StringImpl::destroy(v47, v46);
              if (v41)
              {
LABEL_58:
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v41, v46);
                else
                  *(_DWORD *)v41 -= 2;
              }
LABEL_60:
              if (!v40)
                goto LABEL_159;
              v48 = *v40;
              if (!*v40)
              {
                __break(0xC471u);
                JUMPOUT(0x196615FD8);
              }
              goto LABEL_158;
            }
            *(_DWORD *)v47 -= 2;
          }
          if (v41)
            goto LABEL_58;
          goto LABEL_60;
        }
LABEL_198:
        __break(0xC471u);
        JUMPOUT(0x1966166B0);
      }
LABEL_197:
      v82 = 0;
      goto LABEL_198;
    }
    if (v10 != 535)
    {
      if (v10 != 759)
        return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
      v18 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v19 = *(unsigned int *)(v18 + 16);
        v20 = *(_QWORD *)(v18 + 8);
        LODWORD(v18) = *(_DWORD *)(v18 + 4);
        v21 = (v19 >> 2) & 1;
      }
      else
      {
        v20 = 0;
        v21 = 1;
      }
      v22 = WebCore::parseNumberOptionalNumber(v20, v18 | (unint64_t)(v21 << 32));
      if (v23)
      {
        v24 = v22;
        if (*(float *)&v22 >= 1.0 && *((float *)&v22 + 1) >= 1.0)
        {
          v26 = a1[29];
          v27 = *(_DWORD *)(v26 + 8);
          *(_DWORD *)(v26 + 8) = v27 + 1;
          *(_DWORD *)(*(_QWORD *)(v26 + 40) + 28) = (int)*(float *)&v24;
          if (v27)
            *(_DWORD *)(v26 + 8) = v27;
          else
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          v16 = a1[30];
          v17 = *(_DWORD *)(v16 + 8);
          *(_DWORD *)(v16 + 8) = v17 + 1;
          *(_DWORD *)(*(_QWORD *)(v16 + 40) + 28) = (int)*((float *)&v24 + 1);
          if (v17)
            goto LABEL_18;
          goto LABEL_31;
        }
      }
      v39 = *(_QWORD *)(a1[5] + 8);
      *(_DWORD *)(v39 + 24) += 2;
      WebCore::Document::checkedSVGExtensions((WebCore::Document *)v39, &v83);
      v40 = v83;
      v58 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v59 = *(_DWORD *)(v58 + 4);
        *(_DWORD *)v58 += 2;
        if (v59 < 0)
          goto LABEL_193;
      }
      else
      {
        v59 = 0;
      }
      v43 = __OFADD__(v59, 42);
      v60 = v59 + 42;
      if (!v43 && !__OFADD__(v60, 41))
      {
        v61 = !v58 || (*(_BYTE *)(v58 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v60 + 41), v61, (int8x16_t *)"feConvolveMatrix: problem parsing order=\"", 0x29u, v58, (int8x16_t *)"\". Filtered element will not be displayed.", 0x2Au, &v82);
        if (v82)
        {
          WebCore::SVGDocumentExtensions::reportWarning((uint64_t)v40, (const WTF::String *)&v82);
          v62 = v82;
          v82 = 0;
          if (v62)
          {
            if (*(_DWORD *)v62 == 2)
            {
              WTF::StringImpl::destroy(v62, v46);
              if (v58)
              {
LABEL_90:
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v58, v46);
                else
                  *(_DWORD *)v58 -= 2;
              }
LABEL_92:
              if (!v40)
                goto LABEL_159;
              v48 = *v40;
              if (!*v40)
              {
                __break(0xC471u);
                JUMPOUT(0x19661616CLL);
              }
              goto LABEL_158;
            }
            *(_DWORD *)v62 -= 2;
          }
          if (v58)
            goto LABEL_90;
          goto LABEL_92;
        }
LABEL_194:
        __break(0xC471u);
        JUMPOUT(0x196616698);
      }
LABEL_193:
      v82 = 0;
      goto LABEL_194;
    }
    v29 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v30 = *(unsigned int *)(v29 + 16);
      v31 = *(_QWORD *)(v29 + 8);
      LODWORD(v29) = *(_DWORD *)(v29 + 4);
      v32 = (v30 >> 2) & 1;
    }
    else
    {
      v31 = 0;
      v32 = 1;
    }
    v33 = WebCore::parseNumberOptionalNumber(v31, v29 | (unint64_t)(v32 << 32));
    if (v34)
    {
      if (*(float *)&v33 > 0.0)
      {
        v35 = HIDWORD(v33);
        if (*((float *)&v33 + 1) > 0.0)
        {
          v36 = a1[37];
          v37 = *(_DWORD *)(v36 + 8);
          *(_DWORD *)(v36 + 8) = v37 + 1;
          *(_DWORD *)(*(_QWORD *)(v36 + 40) + 28) = v33;
          if (v37)
            *(_DWORD *)(v36 + 8) = v37;
          else
            (*(void (**)(uint64_t, float))(*(_QWORD *)v36 + 8))(v36, *((float *)&v33 + 1));
          v16 = a1[38];
          v17 = *(_DWORD *)(v16 + 8);
          *(_DWORD *)(v16 + 8) = v17 + 1;
          *(_DWORD *)(*(_QWORD *)(v16 + 40) + 28) = v35;
          if (v17)
            goto LABEL_18;
          goto LABEL_31;
        }
      }
    }
    v39 = *(_QWORD *)(a1[5] + 8);
    *(_DWORD *)(v39 + 24) += 2;
    WebCore::Document::checkedSVGExtensions((WebCore::Document *)v39, &v83);
    v40 = v83;
    v63 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v64 = *(_DWORD *)(v63 + 4);
      *(_DWORD *)v63 += 2;
      if (v64 < 0)
        goto LABEL_195;
    }
    else
    {
      v64 = 0;
    }
    v43 = __OFADD__(v64, 42);
    v65 = v64 + 42;
    if (!v43 && !__OFADD__(v65, 52))
    {
      v66 = !v63 || (*(_BYTE *)(v63 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v65 + 52), v66, (int8x16_t *)"feConvolveMatrix: problem parsing kernelUnitLength=\"", 0x34u, v63, (int8x16_t *)"\". Filtered element will not be displayed.", 0x2Au, &v82);
      if (v82)
      {
        WebCore::SVGDocumentExtensions::reportWarning((uint64_t)v40, (const WTF::String *)&v82);
        v67 = v82;
        v82 = 0;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2)
          {
            WTF::StringImpl::destroy(v67, v46);
            if (v63)
            {
LABEL_107:
              if (*(_DWORD *)v63 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v63, v46);
              else
                *(_DWORD *)v63 -= 2;
            }
LABEL_109:
            if (!v40)
              goto LABEL_159;
            v48 = *v40;
            if (!*v40)
            {
              __break(0xC471u);
              JUMPOUT(0x19661625CLL);
            }
            goto LABEL_158;
          }
          *(_DWORD *)v67 -= 2;
        }
        if (v63)
          goto LABEL_107;
        goto LABEL_109;
      }
LABEL_196:
      __break(0xC471u);
      JUMPOUT(0x1966166A4);
    }
LABEL_195:
    v82 = 0;
    goto LABEL_196;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x1BFu)
  {
    if (v10 == 374)
    {
      v11 = a1[33];
      ++*(_DWORD *)(v11 + 8);
      WTF::String::toFloat(this, 0);
      *(_DWORD *)(*(_QWORD *)(v11 + 40) + 28) = v28;
      goto LABEL_137;
    }
    if (v10 != 440)
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
    WTF::String::toFloat(this, 0);
    if (v15 != 0.0)
    {
      v16 = a1[32];
      v17 = *(_DWORD *)(v16 + 8);
      *(_DWORD *)(v16 + 8) = v17 + 1;
      *(float *)(*(_QWORD *)(v16 + 40) + 28) = v15;
      if (v17)
      {
LABEL_18:
        *(_DWORD *)(v16 + 8) = v17;
        return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
      }
LABEL_31:
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
    }
    v39 = *(_QWORD *)(a1[5] + 8);
    *(_DWORD *)(v39 + 24) += 2;
    WebCore::Document::checkedSVGExtensions((WebCore::Document *)v39, &v83);
    v40 = v83;
    v69 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v70 = *(_DWORD *)(v69 + 4);
      *(_DWORD *)v69 += 2;
      if (v70 < 0)
        goto LABEL_199;
    }
    else
    {
      v70 = 0;
    }
    v43 = __OFADD__(v70, 42);
    v71 = v70 + 42;
    if (!v43 && !__OFADD__(v71, 43))
    {
      v72 = !v69 || (*(_BYTE *)(v69 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v71 + 43), v72, (int8x16_t *)"feConvolveMatrix: problem parsing divisor=\"", 0x2Bu, v69, (int8x16_t *)"\". Filtered element will not be displayed.", 0x2Au, &v82);
      if (v82)
      {
        WebCore::SVGDocumentExtensions::reportWarning((uint64_t)v40, (const WTF::String *)&v82);
        v73 = v82;
        v82 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 2)
          {
            WTF::StringImpl::destroy(v73, v46);
            if (v69)
            {
LABEL_126:
              if (*(_DWORD *)v69 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v69, v46);
              else
                *(_DWORD *)v69 -= 2;
            }
LABEL_128:
            if (!v40)
              goto LABEL_159;
            v48 = *v40;
            if (!*v40)
            {
              __break(0xC471u);
              JUMPOUT(0x19661636CLL);
            }
            goto LABEL_158;
          }
          *(_DWORD *)v73 -= 2;
        }
        if (v69)
          goto LABEL_126;
        goto LABEL_128;
      }
LABEL_200:
      __break(0xC471u);
      JUMPOUT(0x1966166BCLL);
    }
LABEL_199:
    v82 = 0;
    goto LABEL_200;
  }
  switch(v10)
  {
    case 0x1C0u:
      if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "duplicate", 9) & 1) != 0)
      {
        v38 = 1;
        goto LABEL_135;
      }
      if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "wrap", 4) & 1) != 0)
      {
        v38 = 2;
        goto LABEL_135;
      }
      if (WTF::equal(*(WTF **)this, (const WTF::StringImpl *)WebCore::noneAtomData, v68))
      {
        v38 = 3;
LABEL_135:
        v11 = a1[36];
        ++*(_DWORD *)(v11 + 8);
        v74 = *(_QWORD *)(v11 + 40);
        LODWORD(v83) = v38;
        (*(void (**)(uint64_t, int **))(*(_QWORD *)v74 + 16))(v74, &v83);
        v75 = *(_QWORD *)(v11 + 48);
        if (v75)
        {
          LODWORD(v83) = v38;
          (*(void (**)(uint64_t, int **))(*(_QWORD *)v75 + 16))(v75, &v83);
        }
LABEL_137:
        v49 = *(_DWORD *)(v11 + 8) - 1;
        if (*(_DWORD *)(v11 + 8) != 1)
          goto LABEL_138;
        goto LABEL_69;
      }
      v39 = *(_QWORD *)(a1[5] + 8);
      *(_DWORD *)(v39 + 24) += 2;
      WebCore::Document::checkedSVGExtensions((WebCore::Document *)v39, &v83);
      v40 = v83;
      v76 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v77 = *(_DWORD *)(v76 + 4);
        *(_DWORD *)v76 += 2;
        if (v77 < 0)
          goto LABEL_204;
      }
      else
      {
        v77 = 0;
      }
      v43 = __OFADD__(v77, 42);
      v78 = v77 + 42;
      if (!v43 && !__OFADD__(v78, 44))
      {
        v79 = !v76 || (*(_BYTE *)(v76 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v78 + 44), v79, (int8x16_t *)"feConvolveMatrix: problem parsing edgeMode=\"", 0x2Cu, v76, (int8x16_t *)"\". Filtered element will not be displayed.", 0x2Au, &v82);
        if (v82)
        {
          WebCore::SVGDocumentExtensions::reportWarning((uint64_t)v40, (const WTF::String *)&v82);
          v80 = v82;
          v82 = 0;
          if (v80)
          {
            if (*(_DWORD *)v80 == 2)
            {
              WTF::StringImpl::destroy(v80, v46);
              if (v76)
              {
LABEL_154:
                if (*(_DWORD *)v76 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v76, v46);
                else
                  *(_DWORD *)v76 -= 2;
              }
LABEL_156:
              if (!v40)
                goto LABEL_159;
              v48 = *v40;
              if (!*v40)
              {
                __break(0xC471u);
                JUMPOUT(0x19661668CLL);
              }
LABEL_158:
              *v40 = v48 - 1;
LABEL_159:
              if (*(_DWORD *)(v39 + 24) == 2)
              {
                if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v39, v46);
              }
              else
              {
                *(_DWORD *)(v39 + 24) -= 2;
              }
              return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
            }
            *(_DWORD *)v80 -= 2;
          }
          if (v76)
            goto LABEL_154;
          goto LABEL_156;
        }
LABEL_205:
        __break(0xC471u);
        JUMPOUT(0x1966166E0);
      }
LABEL_204:
      v82 = 0;
      goto LABEL_205;
    case 0x206u:
      v11 = a1[28];
      v49 = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v11 + 8) = v49 + 1;
      v50 = *(_QWORD *)(v11 + 40);
      v51 = *(_DWORD **)this;
      if (*(_QWORD *)this)
        *v51 += 2;
      v52 = *(WTF::StringImpl **)(v50 + 32);
      *(_QWORD *)(v50 + 32) = v51;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::destroy(v52, a2);
          v49 = *(_DWORD *)(v11 + 8) - 1;
          if (*(_DWORD *)(v11 + 8) != 1)
            goto LABEL_138;
LABEL_69:
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
        }
        *(_DWORD *)v52 -= 2;
      }
      if (v49)
      {
LABEL_138:
        *(_DWORD *)(v11 + 8) = v49;
        return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
      }
      goto LABEL_69;
    case 0x216u:
      v11 = a1[31];
      ++*(_DWORD *)(v11 + 8);
      v12 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v13 = *(unsigned __int16 **)(v12 + 8);
        v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v14 = 0x100000000;
      }
      WebCore::SVGNumberList::parse(*(_QWORD *)(v11 + 40), v13, (unsigned __int16 *)v14);
      goto LABEL_137;
  }
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
}

uint64_t WebCore::SVGFEConvolveMatrixElement::setFilterEffectAttribute(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;

  if (*(_BYTE *)(a2 + 48) != 6)
  {
    __break(0xC471u);
    JUMPOUT(0x196616AB8);
  }
  v4 = 0;
  v5 = *(unsigned __int16 *)(*(_QWORD *)a3 + 10);
  if (v5 > 0x216)
  {
    if (v5 - 877 >= 2)
    {
      if (v5 != 535)
      {
        if (v5 != 786)
          return v4;
        v10 = a1[39];
        v11 = *(_QWORD *)(v10 + 24);
        if (v11 && *(_DWORD *)(v11 - 12))
        {
          v57 = *(unsigned int *)(v11 - 4);
          if ((_DWORD)v57)
          {
            v58 = 8 * v57;
            v59 = *(uint64_t **)(v10 + 24);
            while ((unint64_t)(*v59 + 1) <= 1)
            {
              ++v59;
              v58 -= 8;
              if (!v58)
                goto LABEL_14;
            }
          }
          else
          {
            v59 = *(uint64_t **)(v10 + 24);
          }
          v75 = (uint64_t *)(v11 + 8 * v57);
          if (v59 != v75)
          {
            v76 = *v59;
LABEL_144:
            if (*(_QWORD *)(v76 + 8))
            {
              v12 = v10 + 48;
LABEL_15:
              v13 = *(unsigned __int8 *)(*(_QWORD *)v12 + 26);
              if (*(unsigned __int8 *)(a2 + 100) != v13)
              {
                *(_BYTE *)(a2 + 100) = v13;
                return 1;
              }
              return 0;
            }
            while (++v59 != v75)
            {
              v76 = *v59;
              if ((unint64_t)(*v59 + 1) > 1)
              {
                if (v59 != v75)
                  goto LABEL_144;
                break;
              }
            }
          }
        }
LABEL_14:
        v12 = v10 + 40;
        goto LABEL_15;
      }
      v31 = a1[37];
      v32 = *(_QWORD *)(v31 + 24);
      if (v32 && *(_DWORD *)(v32 - 12))
      {
        v60 = *(unsigned int *)(v32 - 4);
        if ((_DWORD)v60)
        {
          v61 = 8 * v60;
          v62 = *(uint64_t **)(v31 + 24);
          while ((unint64_t)(*v62 + 1) <= 1)
          {
            ++v62;
            v61 -= 8;
            if (!v61)
              goto LABEL_35;
          }
        }
        else
        {
          v62 = *(uint64_t **)(v31 + 24);
        }
        v77 = (uint64_t *)(v32 + 8 * v60);
        if (v62 != v77)
        {
          v78 = *v62;
LABEL_153:
          if (*(_QWORD *)(v78 + 8))
          {
            v33 = v31 + 48;
LABEL_36:
            v34 = *(float *)(*(_QWORD *)v33 + 28);
            v35 = a1[38];
            v36 = *(_QWORD *)(v35 + 24);
            if (v36 && *(_DWORD *)(v36 - 12))
            {
              v63 = *(unsigned int *)(v36 - 4);
              if ((_DWORD)v63)
              {
                v64 = 8 * v63;
                v65 = *(uint64_t **)(v35 + 24);
                while ((unint64_t)(*v65 + 1) <= 1)
                {
                  ++v65;
                  v64 -= 8;
                  if (!v64)
                    goto LABEL_37;
                }
              }
              else
              {
                v65 = *(uint64_t **)(v35 + 24);
              }
              v79 = (uint64_t *)(v36 + 8 * v63);
              if (v65 != v79)
              {
                v80 = *v65;
LABEL_162:
                if (*(_QWORD *)(v80 + 8))
                {
                  v37 = v35 + 48;
LABEL_38:
                  v38 = *(float *)(*(_QWORD *)v37 + 28);
                  if (*(float *)(a2 + 92) != v34 || *(float *)(a2 + 96) != v38)
                  {
                    *(float *)(a2 + 92) = v34;
                    *(float *)(a2 + 96) = v38;
                    return 1;
                  }
                  return 0;
                }
                while (++v65 != v79)
                {
                  v80 = *v65;
                  if ((unint64_t)(*v65 + 1) > 1)
                  {
                    if (v65 != v79)
                      goto LABEL_162;
                    break;
                  }
                }
              }
            }
LABEL_37:
            v37 = v35 + 40;
            goto LABEL_38;
          }
          while (++v62 != v77)
          {
            v78 = *v62;
            if ((unint64_t)(*v62 + 1) > 1)
            {
              if (v62 != v77)
                goto LABEL_153;
              break;
            }
          }
        }
      }
LABEL_35:
      v33 = v31 + 40;
      goto LABEL_36;
    }
    v14 = a1[34];
    v15 = *(_QWORD *)(v14 + 24);
    if (v15 && *(_DWORD *)(v15 - 12))
    {
      v41 = *(unsigned int *)(v15 - 4);
      if ((_DWORD)v41)
      {
        v42 = 8 * v41;
        v43 = *(uint64_t **)(v14 + 24);
        while ((unint64_t)(*v43 + 1) <= 1)
        {
          ++v43;
          v42 -= 8;
          if (!v42)
            goto LABEL_18;
        }
      }
      else
      {
        v43 = *(uint64_t **)(v14 + 24);
      }
      v67 = (uint64_t *)(v15 + 8 * v41);
      if (v43 != v67)
      {
        v68 = *v43;
LABEL_108:
        if (*(_QWORD *)(v68 + 8))
        {
          v16 = v14 + 48;
LABEL_19:
          v17 = *(unsigned int *)(*(_QWORD *)v16 + 28);
          v18 = a1[35];
          v19 = *(_QWORD *)(v18 + 24);
          if (v19 && *(_DWORD *)(v19 - 12))
          {
            v44 = *(unsigned int *)(v19 - 4);
            if ((_DWORD)v44)
            {
              v45 = 8 * v44;
              v46 = *(uint64_t **)(v18 + 24);
              while ((unint64_t)(*v46 + 1) <= 1)
              {
                ++v46;
                v45 -= 8;
                if (!v45)
                  goto LABEL_20;
              }
            }
            else
            {
              v46 = *(uint64_t **)(v18 + 24);
            }
            v69 = (uint64_t *)(v19 + 8 * v44);
            if (v46 != v69)
            {
              v70 = *v46;
LABEL_117:
              if (*(_QWORD *)(v70 + 8))
              {
                v20 = v18 + 48;
LABEL_21:
                v21 = *(unsigned int *)(*(_QWORD *)v20 + 28);
                v22 = *(_DWORD *)(a2 + 80) == (_DWORD)v17 && *(_DWORD *)(a2 + 84) == (_DWORD)v21;
                if (!v22)
                {
                  *(_QWORD *)(a2 + 80) = v17 | (v21 << 32);
                  return 1;
                }
                return 0;
              }
              while (++v46 != v69)
              {
                v70 = *v46;
                if ((unint64_t)(*v46 + 1) > 1)
                {
                  if (v46 != v69)
                    goto LABEL_117;
                  break;
                }
              }
            }
          }
LABEL_20:
          v20 = v18 + 40;
          goto LABEL_21;
        }
        while (++v43 != v67)
        {
          v68 = *v43;
          if ((unint64_t)(*v43 + 1) > 1)
          {
            if (v43 != v67)
              goto LABEL_108;
            break;
          }
        }
      }
    }
LABEL_18:
    v16 = v14 + 40;
    goto LABEL_19;
  }
  switch(v5)
  {
    case 0x176u:
      v23 = a1[33];
      v24 = *(_QWORD *)(v23 + 24);
      if (v24 && *(_DWORD *)(v24 - 12))
      {
        v47 = *(unsigned int *)(v24 - 4);
        if ((_DWORD)v47)
        {
          v48 = 8 * v47;
          v49 = *(uint64_t **)(v23 + 24);
          while ((unint64_t)(*v49 + 1) <= 1)
          {
            ++v49;
            v48 -= 8;
            if (!v48)
              goto LABEL_27;
          }
        }
        else
        {
          v49 = *(uint64_t **)(v23 + 24);
        }
        v71 = (uint64_t *)(v24 + 8 * v47);
        if (v49 != v71)
        {
          v72 = *v49;
LABEL_126:
          if (*(_QWORD *)(v72 + 8))
          {
            v25 = v23 + 48;
LABEL_28:
            v26 = *(float *)(*(_QWORD *)v25 + 28);
            if (*(float *)(a2 + 76) != v26)
            {
              *(float *)(a2 + 76) = v26;
              return 1;
            }
            return 0;
          }
          while (++v49 != v71)
          {
            v72 = *v49;
            if ((unint64_t)(*v49 + 1) > 1)
            {
              if (v49 != v71)
                goto LABEL_126;
              break;
            }
          }
        }
      }
LABEL_27:
      v25 = v23 + 40;
      goto LABEL_28;
    case 0x1B8u:
      v27 = a1[32];
      v28 = *(_QWORD *)(v27 + 24);
      if (v28 && *(_DWORD *)(v28 - 12))
      {
        v54 = *(unsigned int *)(v28 - 4);
        if ((_DWORD)v54)
        {
          v55 = 8 * v54;
          v56 = *(uint64_t **)(v27 + 24);
          while ((unint64_t)(*v56 + 1) <= 1)
          {
            ++v56;
            v55 -= 8;
            if (!v55)
              goto LABEL_31;
          }
        }
        else
        {
          v56 = *(uint64_t **)(v27 + 24);
        }
        v73 = (uint64_t *)(v28 + 8 * v54);
        if (v56 != v73)
        {
          v74 = *v56;
LABEL_135:
          if (*(_QWORD *)(v74 + 8))
          {
            v29 = v27 + 48;
LABEL_32:
            v30 = *(float *)(*(_QWORD *)v29 + 28);
            if (*(float *)(a2 + 72) != v30)
            {
              *(float *)(a2 + 72) = v30;
              return 1;
            }
            return 0;
          }
          while (++v56 != v73)
          {
            v74 = *v56;
            if ((unint64_t)(*v56 + 1) > 1)
            {
              if (v56 != v73)
                goto LABEL_135;
              break;
            }
          }
        }
      }
LABEL_31:
      v29 = v27 + 40;
      goto LABEL_32;
    case 0x1C0u:
      v6 = a1[36];
      v7 = *(_QWORD **)(v6 + 24);
      if (!v7 || !*((_DWORD *)v7 - 3))
      {
        v8 = (_QWORD *)(v6 + 40);
        goto LABEL_8;
      }
      v50 = *((unsigned int *)v7 - 1);
      v51 = &v7[v50];
      if ((_DWORD)v50)
      {
        v52 = 8 * v50;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          ++v7;
          v52 -= 8;
          if (!v52)
            goto LABEL_69;
        }
      }
      if (v7 != v51)
      {
        v66 = *v7;
LABEL_100:
        if (*(_QWORD *)(v66 + 8))
          goto LABEL_70;
        while (++v7 != v51)
        {
          v66 = *v7;
          if ((unint64_t)(*v7 + 1) > 1)
          {
            if (v7 != v51)
              goto LABEL_100;
            break;
          }
        }
      }
LABEL_69:
      v7 = v51;
LABEL_70:
      v22 = v7 == v51;
      v53 = 40;
      if (!v22)
        v53 = 48;
      v8 = (_QWORD *)(v6 + v53);
LABEL_8:
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8);
      if (*(unsigned __int8 *)(a2 + 88) != v9)
      {
        *(_BYTE *)(a2 + 88) = v9;
        return 1;
      }
      return 0;
  }
  return v4;
}

BOOL WebCore::SVGFEConvolveMatrixElement::isValidTargetXOffset(WebCore::SVGFEConvolveMatrixElement *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v6;
  WTF::String *v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  if (WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::SVGNames::orderAttr, a4, a5, a2))
  {
    v9 = *((_QWORD *)this + 29);
    v10 = *(_QWORD *)(v9 + 24);
    if (v10 && *(_DWORD *)(v10 - 12))
    {
      v20 = *(unsigned int *)(v10 - 4);
      if ((_DWORD)v20)
      {
        v21 = 8 * v20;
        v22 = *(uint64_t **)(v9 + 24);
        while ((unint64_t)(*v22 + 1) <= 1)
        {
          ++v22;
          v21 -= 8;
          if (!v21)
            goto LABEL_3;
        }
      }
      else
      {
        v22 = *(uint64_t **)(v9 + 24);
      }
      v26 = (uint64_t *)(v10 + 8 * v20);
      if (v22 != v26)
      {
        v27 = *v22;
LABEL_35:
        if (*(_QWORD *)(v27 + 8))
        {
          v11 = v9 + 48;
          goto LABEL_4;
        }
        while (++v22 != v26)
        {
          v27 = *v22;
          if ((unint64_t)(*v22 + 1) > 1)
          {
            if (v22 != v26)
              goto LABEL_35;
            break;
          }
        }
      }
    }
LABEL_3:
    v11 = v9 + 40;
LABEL_4:
    v12 = *(_DWORD *)(*(_QWORD *)v11 + 28);
    goto LABEL_6;
  }
  v12 = 3;
LABEL_6:
  if (WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::SVGNames::targetXAttr, v6, v7, v8))
  {
    v13 = *((_QWORD *)this + 34);
    v14 = *(_QWORD *)(v13 + 24);
    if (v14 && *(_DWORD *)(v14 - 12))
    {
      v23 = *(unsigned int *)(v14 - 4);
      if ((_DWORD)v23)
      {
        v24 = 8 * v23;
        v25 = *(uint64_t **)(v13 + 24);
        while ((unint64_t)(*v25 + 1) <= 1)
        {
          ++v25;
          v24 -= 8;
          if (!v24)
            goto LABEL_8;
        }
      }
      else
      {
        v25 = *(uint64_t **)(v13 + 24);
      }
      v28 = (uint64_t *)(v14 + 8 * v23);
      if (v25 != v28)
      {
        v29 = *v25;
LABEL_44:
        if (*(_QWORD *)(v29 + 8))
        {
          v15 = v13 + 48;
          goto LABEL_9;
        }
        while (++v25 != v28)
        {
          v29 = *v25;
          if ((unint64_t)(*v25 + 1) > 1)
          {
            if (v25 != v28)
              goto LABEL_44;
            break;
          }
        }
      }
    }
LABEL_8:
    v15 = v13 + 40;
LABEL_9:
    v16 = *(_DWORD *)(*(_QWORD *)v15 + 28);
    return v16 >= 0 && v16 < v12;
  }
  if (v12 >= 0)
    v17 = v12;
  else
    v17 = v12 + 1;
  v16 = (int)(float)(v17 >> 1);
  return v16 >= 0 && v16 < v12;
}

BOOL WebCore::SVGFEConvolveMatrixElement::isValidTargetYOffset(WebCore::SVGFEConvolveMatrixElement *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v6;
  WTF::String *v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  if (WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::SVGNames::orderAttr, a4, a5, a2))
  {
    v9 = *((_QWORD *)this + 30);
    v10 = *(_QWORD *)(v9 + 24);
    if (v10 && *(_DWORD *)(v10 - 12))
    {
      v20 = *(unsigned int *)(v10 - 4);
      if ((_DWORD)v20)
      {
        v21 = 8 * v20;
        v22 = *(uint64_t **)(v9 + 24);
        while ((unint64_t)(*v22 + 1) <= 1)
        {
          ++v22;
          v21 -= 8;
          if (!v21)
            goto LABEL_3;
        }
      }
      else
      {
        v22 = *(uint64_t **)(v9 + 24);
      }
      v26 = (uint64_t *)(v10 + 8 * v20);
      if (v22 != v26)
      {
        v27 = *v22;
LABEL_35:
        if (*(_QWORD *)(v27 + 8))
        {
          v11 = v9 + 48;
          goto LABEL_4;
        }
        while (++v22 != v26)
        {
          v27 = *v22;
          if ((unint64_t)(*v22 + 1) > 1)
          {
            if (v22 != v26)
              goto LABEL_35;
            break;
          }
        }
      }
    }
LABEL_3:
    v11 = v9 + 40;
LABEL_4:
    v12 = *(_DWORD *)(*(_QWORD *)v11 + 28);
    goto LABEL_6;
  }
  v12 = 3;
LABEL_6:
  if (WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::SVGNames::targetYAttr, v6, v7, v8))
  {
    v13 = *((_QWORD *)this + 35);
    v14 = *(_QWORD *)(v13 + 24);
    if (v14 && *(_DWORD *)(v14 - 12))
    {
      v23 = *(unsigned int *)(v14 - 4);
      if ((_DWORD)v23)
      {
        v24 = 8 * v23;
        v25 = *(uint64_t **)(v13 + 24);
        while ((unint64_t)(*v25 + 1) <= 1)
        {
          ++v25;
          v24 -= 8;
          if (!v24)
            goto LABEL_8;
        }
      }
      else
      {
        v25 = *(uint64_t **)(v13 + 24);
      }
      v28 = (uint64_t *)(v14 + 8 * v23);
      if (v25 != v28)
      {
        v29 = *v25;
LABEL_44:
        if (*(_QWORD *)(v29 + 8))
        {
          v15 = v13 + 48;
          goto LABEL_9;
        }
        while (++v25 != v28)
        {
          v29 = *v25;
          if ((unint64_t)(*v25 + 1) > 1)
          {
            if (v25 != v28)
              goto LABEL_44;
            break;
          }
        }
      }
    }
LABEL_8:
    v15 = v13 + 40;
LABEL_9:
    v16 = *(_DWORD *)(*(_QWORD *)v15 + 28);
    return v16 >= 0 && v16 < v12;
  }
  if (v12 >= 0)
    v17 = v12;
  else
    v17 = v12 + 1;
  v16 = (int)(float)(v17 >> 1);
  return v16 >= 0 && v16 < v12;
}

void WebCore::SVGFEConvolveMatrixElement::svgAttributeChanged(WebCore::SVGFEConvolveMatrixElement *this, const WebCore::QualifiedName *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v8;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  void *v20;
  void *v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  void *v30;
  unsigned int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  unsigned int v41;
  uint64_t v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  void *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  WTF *v65;

  v7 = *(_QWORD *)a2;
  v8 = WebCore::SVGNames::orderAttr;
  if (*(_QWORD *)a2 == WebCore::SVGNames::targetXAttr || v7 == WebCore::SVGNames::orderAttr)
  {
    if (!WebCore::SVGFEConvolveMatrixElement::isValidTargetXOffset(this, a5, (uint64_t)a2, a3, a4))
    {
      if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v13 = WTF::fastCompactMalloc((WTF *)0x28);
        *(_DWORD *)v13 = 1;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 8) = this;
        *(_BYTE *)(v13 + 32) = 0;
        v14 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v14 & 0xFFFF000000000000 | v13;
        v15 = v14 & 0xFFFFFFFFFFFFLL;
        if ((v14 & 0xFFFFFFFFFFFFLL) != 0)
        {
          do
          {
            v16 = __ldaxr((unsigned int *)v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, (unsigned int *)v15));
          if (!v17)
          {
            atomic_store(1u, (unsigned int *)v15);
            v60 = *(unsigned int *)(v15 + 28);
            if ((_DWORD)v60)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v60));
            v61 = *(WTF **)(v15 + 16);
            if (v61)
            {
              *(_QWORD *)(v15 + 16) = 0;
              *(_DWORD *)(v15 + 24) = 0;
              WTF::fastFree(v61, a2);
            }
            WTF::fastFree((WTF *)v15, a2);
          }
        }
      }
      v18 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
      do
        v19 = __ldaxr((unsigned int *)v18);
      while (__stlxr(v19 + 1, (unsigned int *)v18));
      WebCore::SVGFilterPrimitiveStandardAttributes::markFilterEffectForRebuild(this, a2);
      WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v18 + 8), v20);
      do
      {
        v22 = __ldaxr((unsigned int *)v18);
        v23 = --v22 == 0;
      }
      while (__stlxr(v22, (unsigned int *)v18));
      goto LABEL_54;
    }
    v7 = *(_QWORD *)a2;
    v8 = WebCore::SVGNames::orderAttr;
  }
  if (v7 == WebCore::SVGNames::targetYAttr || v7 == v8)
  {
    if (!WebCore::SVGFEConvolveMatrixElement::isValidTargetYOffset(this, a5, (uint64_t)a2, a3, a4))
    {
      if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v24 = WTF::fastCompactMalloc((WTF *)0x28);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 16) = 0;
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)(v24 + 8) = this;
        *(_BYTE *)(v24 + 32) = 0;
        v25 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v25 & 0xFFFF000000000000 | v24;
        v26 = v25 & 0xFFFFFFFFFFFFLL;
        if ((v25 & 0xFFFFFFFFFFFFLL) != 0)
        {
          do
          {
            v27 = __ldaxr((unsigned int *)v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, (unsigned int *)v26));
          if (!v28)
          {
            atomic_store(1u, (unsigned int *)v26);
            v62 = *(unsigned int *)(v26 + 28);
            if ((_DWORD)v62)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v62));
            v63 = *(WTF **)(v26 + 16);
            if (v63)
            {
              *(_QWORD *)(v26 + 16) = 0;
              *(_DWORD *)(v26 + 24) = 0;
              WTF::fastFree(v63, v11);
            }
            WTF::fastFree((WTF *)v26, v11);
          }
        }
      }
      v18 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
      do
        v29 = __ldaxr((unsigned int *)v18);
      while (__stlxr(v29 + 1, (unsigned int *)v18));
      WebCore::SVGFilterPrimitiveStandardAttributes::markFilterEffectForRebuild(this, (WebCore::SVGElement *)v11);
      WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v18 + 8), v30);
      do
      {
        v31 = __ldaxr((unsigned int *)v18);
        v23 = --v31 == 0;
      }
      while (__stlxr(v31, (unsigned int *)v18));
      goto LABEL_54;
    }
    v7 = *(_QWORD *)a2;
  }
  v12 = *(unsigned __int16 *)(v7 + 10);
  if (v12 <= 534)
  {
    if (v12 <= 447)
    {
      if (v12 != 374 && v12 != 440)
        goto LABEL_63;
    }
    else if (v12 != 448)
    {
      if (v12 != 518 && v12 != 534)
        goto LABEL_63;
      goto LABEL_44;
    }
    goto LABEL_65;
  }
  if (v12 > 876)
  {
    if ((v12 - 877) < 2)
      goto LABEL_65;
LABEL_63:
    WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, a2);
    return;
  }
  if (v12 != 535)
  {
    if (v12 == 759)
    {
LABEL_44:
      if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v32 = WTF::fastCompactMalloc((WTF *)0x28);
        *(_DWORD *)v32 = 1;
        *(_QWORD *)(v32 + 16) = 0;
        *(_QWORD *)(v32 + 24) = 0;
        *(_QWORD *)(v32 + 8) = this;
        *(_BYTE *)(v32 + 32) = 0;
        v34 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v34 & 0xFFFF000000000000 | v32;
        v35 = v34 & 0xFFFFFFFFFFFFLL;
        if ((v34 & 0xFFFFFFFFFFFFLL) != 0)
        {
          do
          {
            v36 = __ldaxr((unsigned int *)v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, (unsigned int *)v35));
          if (!v37)
          {
            atomic_store(1u, (unsigned int *)v35);
            v64 = *(unsigned int *)(v35 + 28);
            if ((_DWORD)v64)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v35 + 16), (WTF::StringImpl *)(*(_QWORD *)(v35 + 16) + 32 * v64));
            v65 = *(WTF **)(v35 + 16);
            if (v65)
            {
              *(_QWORD *)(v35 + 16) = 0;
              *(_DWORD *)(v35 + 24) = 0;
              WTF::fastFree(v65, v33);
            }
            WTF::fastFree((WTF *)v35, v33);
          }
        }
      }
      v18 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
      do
        v38 = __ldaxr((unsigned int *)v18);
      while (__stlxr(v38 + 1, (unsigned int *)v18));
      v39 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      *(_DWORD *)(v39 + 24) += 2;
      WebCore::Document::updateSVGRenderer((WebCore::Document *)v39, this);
      if (*(_DWORD *)(v39 + 24) == 2)
      {
        if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v39, v40);
      }
      else
      {
        *(_DWORD *)(v39 + 24) -= 2;
      }
      WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v18 + 8), v40);
      do
      {
        v41 = __ldaxr((unsigned int *)v18);
        v23 = --v41 == 0;
      }
      while (__stlxr(v41, (unsigned int *)v18));
LABEL_54:
      if (!v23)
        return;
      atomic_store(1u, (unsigned int *)v18);
      v42 = *(unsigned int *)(v18 + 28);
      if ((_DWORD)v42)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v42));
      v43 = *(WTF **)(v18 + 16);
      if (v43)
      {
        *(_QWORD *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        WTF::fastFree(v43, v21);
      }
      v44 = (WTF *)v18;
LABEL_82:
      WTF::fastFree(v44, v21);
      return;
    }
    if (v12 != 786)
      goto LABEL_63;
  }
LABEL_65:
  if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v45 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v45 = 1;
    *(_QWORD *)(v45 + 16) = 0;
    *(_QWORD *)(v45 + 24) = 0;
    *(_QWORD *)(v45 + 8) = this;
    *(_BYTE *)(v45 + 32) = 0;
    v47 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v47 & 0xFFFF000000000000 | v45;
    v48 = v47 & 0xFFFFFFFFFFFFLL;
    if ((v47 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v49 = __ldaxr((unsigned int *)v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, (unsigned int *)v48));
      if (!v50)
      {
        atomic_store(1u, (unsigned int *)v48);
        v58 = *(unsigned int *)(v48 + 28);
        if ((_DWORD)v58)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v48 + 16), (WTF::StringImpl *)(*(_QWORD *)(v48 + 16) + 32 * v58));
        v59 = *(WTF **)(v48 + 16);
        if (v59)
        {
          *(_QWORD *)(v48 + 16) = 0;
          *(_DWORD *)(v48 + 24) = 0;
          WTF::fastFree(v59, v46);
        }
        WTF::fastFree((WTF *)v48, v46);
      }
    }
  }
  v51 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
  do
    v52 = __ldaxr((unsigned int *)v51);
  while (__stlxr(v52 + 1, (unsigned int *)v51));
  WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(this, a2);
  WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v51 + 8), v53);
  do
  {
    v54 = __ldaxr((unsigned int *)v51);
    v55 = v54 - 1;
  }
  while (__stlxr(v55, (unsigned int *)v51));
  if (!v55)
  {
    atomic_store(1u, (unsigned int *)v51);
    v56 = *(unsigned int *)(v51 + 28);
    if ((_DWORD)v56)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v51 + 16), (WTF::StringImpl *)(*(_QWORD *)(v51 + 16) + 32 * v56));
    v57 = *(WTF **)(v51 + 16);
    if (v57)
    {
      *(_QWORD *)(v51 + 16) = 0;
      *(_DWORD *)(v51 + 24) = 0;
      WTF::fastFree(v57, v21);
    }
    v44 = (WTF *)v51;
    goto LABEL_82;
  }
}

WTF *WebCore::SVGFEConvolveMatrixElement::createFilterEffect@<X0>(WebCore::Element *a1@<X0>, uint64_t a2@<X2>, WTF::String *a3@<X3>, uint64_t *a4@<X8>, __n128 a5@<Q0>)
{
  WTF *result;
  uint64_t v8;
  uint64_t v9;
  WTF::String *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::String *v27;
  __n128 v28;
  uint64_t v29;
  WTF::String *v30;
  __n128 v31;
  uint64_t v32;
  WTF::String *v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  WTF::String *v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  WTF::String *v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  WTF::String *v71;
  __n128 v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  char *v88;
  char v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  _BOOL8 v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  WTF *v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char v145;
  CFTypeRef *v146;
  char *v147;

  result = (WTF *)WebCore::Element::hasAttribute(a1, (const WebCore::QualifiedName *)&WebCore::SVGNames::orderAttr, a2, a3, a5);
  if (!(_DWORD)result)
  {
    v19 = 3;
    v15 = 3;
    goto LABEL_10;
  }
  v12 = *((_QWORD *)a1 + 29);
  v13 = *(_QWORD *)(v12 + 24);
  if (!v13 || !*(_DWORD *)(v13 - 12))
    goto LABEL_3;
  v42 = *(unsigned int *)(v13 - 4);
  if ((_DWORD)v42)
  {
    v43 = 8 * v42;
    v44 = *(uint64_t **)(v12 + 24);
    while ((unint64_t)(*v44 + 1) <= 1)
    {
      ++v44;
      v43 -= 8;
      if (!v43)
        goto LABEL_3;
    }
  }
  else
  {
    v44 = *(uint64_t **)(v12 + 24);
  }
  v121 = (uint64_t *)(v13 + 8 * v42);
  if (v44 == v121)
    goto LABEL_3;
  v122 = *v44;
LABEL_141:
  if (!*(_QWORD *)(v122 + 8))
  {
    while (++v44 != v121)
    {
      v122 = *v44;
      if ((unint64_t)(*v44 + 1) > 1)
      {
        if (v44 != v121)
          goto LABEL_141;
        break;
      }
    }
LABEL_3:
    v14 = v12 + 40;
    goto LABEL_4;
  }
  v14 = v12 + 48;
LABEL_4:
  v15 = *(_DWORD *)(*(_QWORD *)v14 + 28);
  v16 = *((_QWORD *)a1 + 30);
  v17 = *(_QWORD *)(v16 + 24);
  if (v17 && *(_DWORD *)(v17 - 12))
  {
    v45 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v45)
    {
      v46 = 8 * v45;
      v47 = *(uint64_t **)(v16 + 24);
      while ((unint64_t)(*v47 + 1) <= 1)
      {
        ++v47;
        v46 -= 8;
        if (!v46)
          goto LABEL_5;
      }
    }
    else
    {
      v47 = *(uint64_t **)(v16 + 24);
    }
    v123 = (uint64_t *)(v17 + 8 * v45);
    if (v47 != v123)
    {
      v124 = *v47;
LABEL_150:
      if (*(_QWORD *)(v124 + 8))
      {
        v18 = v16 + 48;
        goto LABEL_6;
      }
      while (++v47 != v123)
      {
        v124 = *v47;
        if ((unint64_t)(*v47 + 1) > 1)
        {
          if (v47 != v123)
            goto LABEL_150;
          break;
        }
      }
    }
  }
LABEL_5:
  v18 = v16 + 40;
LABEL_6:
  if (v15 < 1)
    goto LABEL_56;
  v19 = *(_DWORD *)(*(_QWORD *)v18 + 28);
  if (v19 <= 0)
    goto LABEL_56;
LABEL_10:
  v20 = (_QWORD *)*((_QWORD *)a1 + 31);
  v21 = v20[3];
  if (v21 && *(_DWORD *)(v21 - 12))
  {
    v39 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v39)
    {
      v40 = 8 * v39;
      v41 = (uint64_t *)v20[3];
      while ((unint64_t)(*v41 + 1) <= 1)
      {
        ++v41;
        v40 -= 8;
        if (!v40)
          goto LABEL_11;
      }
    }
    else
    {
      v41 = (uint64_t *)v20[3];
    }
    v119 = (uint64_t *)(v21 + 8 * v39);
    if (v41 != v119)
    {
      v120 = *v41;
LABEL_132:
      if (*(_QWORD *)(v120 + 8))
      {
        v22 = v20 + 6;
        goto LABEL_12;
      }
      while (++v41 != v119)
      {
        v120 = *v41;
        if ((unint64_t)(*v41 + 1) > 1)
        {
          if (v41 != v119)
            goto LABEL_132;
          break;
        }
      }
    }
  }
LABEL_11:
  v22 = v20 + 5;
LABEL_12:
  v23 = *v22;
  v24 = *(unsigned int *)(*v22 + 44);
  if (v24 != v15 * v19)
    goto LABEL_56;
  result = (WTF *)WebCore::SVGFEConvolveMatrixElement::isValidTargetXOffset(a1, v11, v8, v9, v10);
  if (!(_DWORD)result)
    goto LABEL_56;
  result = (WTF *)WebCore::SVGFEConvolveMatrixElement::isValidTargetYOffset(a1, v28, v25, v26, v27);
  if ((result & 1) == 0)
    goto LABEL_56;
  if (WebCore::Element::hasAttribute(a1, (const WebCore::QualifiedName *)&WebCore::SVGNames::targetXAttr, v29, v30, v31))
  {
    v35 = *((_QWORD *)a1 + 34);
    v36 = *(_QWORD *)(v35 + 24);
    if (v36 && *(_DWORD *)(v36 - 12))
    {
      v95 = *(unsigned int *)(v36 - 4);
      if ((_DWORD)v95)
      {
        v96 = 8 * v95;
        v97 = *(uint64_t **)(v35 + 24);
        while ((unint64_t)(*v97 + 1) <= 1)
        {
          ++v97;
          v96 -= 8;
          if (!v96)
            goto LABEL_17;
        }
      }
      else
      {
        v97 = *(uint64_t **)(v35 + 24);
      }
      v128 = (uint64_t *)(v36 + 8 * v95);
      if (v97 != v128)
      {
        v129 = *v97;
LABEL_175:
        if (*(_QWORD *)(v129 + 8))
        {
          v37 = v35 + 48;
          goto LABEL_18;
        }
        while (++v97 != v128)
        {
          v129 = *v97;
          if ((unint64_t)(*v97 + 1) > 1)
          {
            if (v97 != v128)
              goto LABEL_175;
            break;
          }
        }
      }
    }
LABEL_17:
    v37 = v35 + 40;
LABEL_18:
    v38 = *(_DWORD *)(*(_QWORD *)v37 + 28);
    goto LABEL_38;
  }
  v34.n128_f32[0] = (float)(v15 >> 1);
  v38 = (int)v34.n128_f32[0];
LABEL_38:
  if (WebCore::Element::hasAttribute(a1, (const WebCore::QualifiedName *)&WebCore::SVGNames::targetYAttr, v32, v33, v34))
  {
    v51 = *((_QWORD *)a1 + 35);
    v52 = *(_QWORD *)(v51 + 24);
    if (v52 && *(_DWORD *)(v52 - 12))
    {
      v98 = *(unsigned int *)(v52 - 4);
      if ((_DWORD)v98)
      {
        v99 = 8 * v98;
        v100 = *(uint64_t **)(v51 + 24);
        while ((unint64_t)(*v100 + 1) <= 1)
        {
          ++v100;
          v99 -= 8;
          if (!v99)
            goto LABEL_40;
        }
      }
      else
      {
        v100 = *(uint64_t **)(v51 + 24);
      }
      v130 = (uint64_t *)(v52 + 8 * v98);
      if (v100 != v130)
      {
        v131 = *v100;
LABEL_184:
        if (*(_QWORD *)(v131 + 8))
        {
          v53 = v51 + 48;
          goto LABEL_41;
        }
        while (++v100 != v130)
        {
          v131 = *v100;
          if ((unint64_t)(*v100 + 1) > 1)
          {
            if (v100 != v130)
              goto LABEL_184;
            break;
          }
        }
      }
    }
LABEL_40:
    v53 = v51 + 40;
LABEL_41:
    v54 = *(_DWORD *)(*(_QWORD *)v53 + 28);
    goto LABEL_43;
  }
  v50.n128_f32[0] = (float)(v19 >> 1);
  v54 = (int)v50.n128_f32[0];
LABEL_43:
  result = (WTF *)WebCore::Element::hasAttribute(a1, (const WebCore::QualifiedName *)&WebCore::SVGNames::kernelUnitLengthAttr, v48, v49, v50);
  if (!(_DWORD)result)
  {
    v61 = 1;
    v65 = 1;
    goto LABEL_52;
  }
  v58 = *((_QWORD *)a1 + 37);
  v59 = *(_QWORD *)(v58 + 24);
  if (!v59 || !*(_DWORD *)(v59 - 12))
    goto LABEL_45;
  v101 = *(unsigned int *)(v59 - 4);
  if ((_DWORD)v101)
  {
    v102 = 8 * v101;
    v103 = *(uint64_t **)(v58 + 24);
    while ((unint64_t)(*v103 + 1) <= 1)
    {
      ++v103;
      v102 -= 8;
      if (!v102)
        goto LABEL_45;
    }
  }
  else
  {
    v103 = *(uint64_t **)(v58 + 24);
  }
  v132 = (uint64_t *)(v59 + 8 * v101);
  if (v103 == v132)
    goto LABEL_45;
  v133 = *v103;
LABEL_193:
  if (!*(_QWORD *)(v133 + 8))
  {
    while (++v103 != v132)
    {
      v133 = *v103;
      if ((unint64_t)(*v103 + 1) > 1)
      {
        if (v103 != v132)
          goto LABEL_193;
        break;
      }
    }
LABEL_45:
    v60 = v58 + 40;
    goto LABEL_46;
  }
  v60 = v58 + 48;
LABEL_46:
  v61 = (int)*(float *)(*(_QWORD *)v60 + 28);
  v62 = *((_QWORD *)a1 + 38);
  v63 = *(_QWORD *)(v62 + 24);
  if (v63 && *(_DWORD *)(v63 - 12))
  {
    v104 = *(unsigned int *)(v63 - 4);
    if ((_DWORD)v104)
    {
      v105 = 8 * v104;
      v106 = *(uint64_t **)(v62 + 24);
      while ((unint64_t)(*v106 + 1) <= 1)
      {
        ++v106;
        v105 -= 8;
        if (!v105)
          goto LABEL_47;
      }
    }
    else
    {
      v106 = *(uint64_t **)(v62 + 24);
    }
    v134 = (uint64_t *)(v63 + 8 * v104);
    if (v106 != v134)
    {
      v135 = *v106;
LABEL_202:
      if (*(_QWORD *)(v135 + 8))
      {
        v64 = v62 + 48;
        goto LABEL_48;
      }
      while (++v106 != v134)
      {
        v135 = *v106;
        if ((unint64_t)(*v106 + 1) > 1)
        {
          if (v106 != v134)
            goto LABEL_202;
          break;
        }
      }
    }
  }
LABEL_47:
  v64 = v62 + 40;
LABEL_48:
  if (v61 < 1)
    goto LABEL_56;
  v57.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v64 + 28);
  v65 = (int)v57.n128_f32[0];
  if ((int)v57.n128_f32[0] <= 0)
    goto LABEL_56;
LABEL_52:
  v66 = *((_QWORD *)a1 + 32);
  v67 = *(_QWORD *)(v66 + 24);
  if (v67 && *(_DWORD *)(v67 - 12))
  {
    v92 = *(unsigned int *)(v67 - 4);
    if ((_DWORD)v92)
    {
      v93 = 8 * v92;
      v94 = *(uint64_t **)(v66 + 24);
      while ((unint64_t)(*v94 + 1) <= 1)
      {
        ++v94;
        v93 -= 8;
        if (!v93)
          goto LABEL_53;
      }
    }
    else
    {
      v94 = *(uint64_t **)(v66 + 24);
    }
    v126 = (uint64_t *)(v67 + 8 * v92);
    if (v94 != v126)
    {
      v127 = *v94;
LABEL_166:
      if (*(_QWORD *)(v127 + 8))
      {
        v68 = v66 + 48;
        goto LABEL_54;
      }
      while (++v94 != v126)
      {
        v127 = *v94;
        if ((unint64_t)(*v94 + 1) > 1)
        {
          if (v94 != v126)
            goto LABEL_166;
          break;
        }
      }
    }
  }
LABEL_53:
  v68 = v66 + 40;
LABEL_54:
  v69 = *(float *)(*(_QWORD *)v68 + 28);
  result = (WTF *)WebCore::Element::hasAttribute(a1, (const WebCore::QualifiedName *)&WebCore::SVGNames::divisorAttr, v55, v56, v57);
  if ((_DWORD)result && v69 == 0.0)
  {
LABEL_56:
    *a4 = 0;
    return result;
  }
  result = (WTF *)WebCore::Element::hasAttribute(a1, (const WebCore::QualifiedName *)&WebCore::SVGNames::divisorAttr, v70, v71, v72);
  if ((result & 1) == 0)
  {
    if ((_DWORD)v24)
    {
      if (v24 - 1 >= (unint64_t)*(unsigned int *)(v23 + 44))
      {
        __break(0xC471u);
        return result;
      }
      v73 = *(uint64_t **)(v23 + 32);
      do
      {
        v74 = *v73++;
        v69 = v69 + *(float *)(v74 + 28);
        --v24;
      }
      while (v24);
    }
    if (v69 == 0.0)
      v69 = 1.0;
  }
  v144 = __PAIR64__(v19, v15);
  v75 = *((_QWORD *)a1 + 33);
  v76 = *(_QWORD *)(v75 + 24);
  if (v76 && *(_DWORD *)(v76 - 12))
  {
    v107 = *(unsigned int *)(v76 - 4);
    if ((_DWORD)v107)
    {
      v108 = 8 * v107;
      v109 = *(uint64_t **)(v75 + 24);
      while ((unint64_t)(*v109 + 1) <= 1)
      {
        ++v109;
        v108 -= 8;
        if (!v108)
          goto LABEL_66;
      }
    }
    else
    {
      v109 = *(uint64_t **)(v75 + 24);
    }
    v136 = (uint64_t *)(v76 + 8 * v107);
    if (v109 != v136)
    {
      v137 = *v109;
LABEL_211:
      if (*(_QWORD *)(v137 + 8))
      {
        v77 = v75 + 48;
        goto LABEL_67;
      }
      while (++v109 != v136)
      {
        v137 = *v109;
        if ((unint64_t)(*v109 + 1) > 1)
        {
          if (v109 != v136)
            goto LABEL_211;
          break;
        }
      }
    }
  }
LABEL_66:
  v77 = v75 + 40;
LABEL_67:
  v78 = *(float *)(*(_QWORD *)v77 + 28);
  v143 = __PAIR64__(v54, v38);
  v79 = *((_QWORD *)a1 + 36);
  v80 = *(_QWORD **)(v79 + 24);
  if (v80 && *((_DWORD *)v80 - 3))
  {
    v110 = *((unsigned int *)v80 - 1);
    v111 = &v80[v110];
    if ((_DWORD)v110)
    {
      v112 = 8 * v110;
      while ((unint64_t)(*v80 + 1) <= 1)
      {
        ++v80;
        v112 -= 8;
        if (!v112)
          goto LABEL_118;
      }
    }
    if (v80 != v111)
    {
      v125 = *v80;
LABEL_158:
      if (*(_QWORD *)(v125 + 8))
        goto LABEL_119;
      while (++v80 != v111)
      {
        v125 = *v80;
        if ((unint64_t)(*v80 + 1) > 1)
        {
          if (v80 != v111)
            goto LABEL_158;
          break;
        }
      }
    }
LABEL_118:
    v80 = v111;
LABEL_119:
    v113 = v80 == v111;
    v114 = 40;
    if (!v113)
      v114 = 48;
    v81 = (_QWORD *)(v79 + v114);
    goto LABEL_69;
  }
  v81 = (_QWORD *)(v79 + 40);
LABEL_69:
  v82 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v81 + 32))(*v81);
  *(float *)&v142 = (float)v61;
  *((float *)&v142 + 1) = (float)v65;
  v83 = *((_QWORD *)a1 + 39);
  v84 = *(_QWORD *)(v83 + 24);
  if (v84 && *(_DWORD *)(v84 - 12))
  {
    v115 = *(unsigned int *)(v84 - 4);
    if ((_DWORD)v115)
    {
      v116 = 8 * v115;
      v117 = *(uint64_t **)(v83 + 24);
      while ((unint64_t)(*v117 + 1) <= 1)
      {
        ++v117;
        v116 -= 8;
        if (!v116)
          goto LABEL_70;
      }
    }
    else
    {
      v117 = *(uint64_t **)(v83 + 24);
    }
    v138 = (uint64_t *)(v84 + 8 * v115);
    if (v117 != v138)
    {
      v139 = *v117;
LABEL_220:
      if (*(_QWORD *)(v139 + 8))
      {
        v85 = v83 + 48;
        goto LABEL_71;
      }
      while (++v117 != v138)
      {
        v139 = *v117;
        if ((unint64_t)(*v117 + 1) > 1)
        {
          if (v117 != v138)
            goto LABEL_220;
          break;
        }
      }
    }
  }
LABEL_70:
  v85 = v83 + 40;
LABEL_71:
  v86 = *(unsigned __int8 *)(*(_QWORD *)v85 + 26);
  WebCore::SVGValuePropertyList<WebCore::SVGNumber>::operator WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(v23, (uint64_t)&v140);
  v87 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v87 != -1)
  {
    v147 = &v145;
    v146 = (CFTypeRef *)&v147;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v146, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v88 = (char *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
  {
    v89 = v86 != 0;
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    v90 = WTF::fastMalloc((WTF *)0x78);
    v147 = v88;
    CFRetain(v88);
    WebCore::FEConvolveMatrix::FEConvolveMatrix(v90, &v144, &v143, v82, &v142, v89, (uint64_t)&v140, (CFTypeRef *)&v147, v69, v78);
    CFRelease(v88);
    CFRelease(v88);
  }
  else
  {
    v118 = v86 != 0;
    v90 = WTF::fastMalloc((WTF *)0x78);
    v147 = 0;
    WebCore::FEConvolveMatrix::FEConvolveMatrix(v90, &v144, &v143, v82, &v142, v118, (uint64_t)&v140, (CFTypeRef *)&v147, v69, v78);
  }
  *a4 = v90;
  result = v140;
  if (v140)
  {
    v140 = 0;
    v141 = 0;
    return (WTF *)WTF::fastFree(result, v91);
  }
  return result;
}

void WebCore::SVGFEDiffuseLightingElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char **v21;
  char *v22;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E345B358;
  v6[14] = (uint64_t)&unk_1E345B8B8;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E345DAC8;
  *((_QWORD *)v7 + 1) = v6;
  v22 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v22);
  v8 = (uint64_t)v22;
  v22 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *v6 = (uint64_t)off_1E345B358;
  v6[14] = (uint64_t)&unk_1E345B8B8;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E3452E28;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E3452EA8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = off_1E347BDB8;
  v6[28] = v9;
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)v11 = &off_1E34566C8;
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_WORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = off_1E3456748;
  *(_DWORD *)(v12 + 28) = 1065353216;
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = 0;
  v6[29] = v11;
  v13 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 16) = v6;
  *(_QWORD *)v13 = &off_1E34566C8;
  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)(v14 + 16) = 0;
  *(_WORD *)(v14 + 24) = 0;
  *(_QWORD *)v14 = off_1E3456748;
  *(_DWORD *)(v14 + 28) = 1065353216;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = 0;
  v6[30] = v13;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = v6;
  *(_QWORD *)v15 = &off_1E34566C8;
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(_QWORD *)v16 = off_1E3456748;
  *(_DWORD *)(v16 + 28) = 0;
  *(_QWORD *)(v15 + 40) = v16;
  *(_QWORD *)(v15 + 48) = 0;
  v6[31] = v15;
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = v6;
  *(_QWORD *)v17 = &off_1E34566C8;
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)(v18 + 16) = 0;
  *(_WORD *)(v18 + 24) = 0;
  *(_QWORD *)v18 = off_1E3456748;
  *(_DWORD *)(v18 + 28) = 0;
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = 0;
  v6[32] = v17;
  v19 = atomic_load(&WebCore::SVGFEDiffuseLightingElement::SVGFEDiffuseLightingElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v19 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&WebCore::SVGFEDiffuseLightingElement::SVGFEDiffuseLightingElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEDiffuseLightingElement::SVGFEDiffuseLightingElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

_QWORD *WebCore::SVGFEDiffuseLightingElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::String *this, int a5)
{
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;

  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 > 0x216)
  {
    if (v10 == 535)
    {
      v18 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v19 = *(_QWORD *)(v18 + 8);
        v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v19 = 0;
        v20 = 0x100000000;
      }
      v21 = WebCore::parseNumberOptionalNumber(v19, v20);
      if (v22)
      {
        v23 = v21;
        v24 = HIDWORD(v21);
        v25 = a1[31];
        v26 = *(_DWORD *)(v25 + 8);
        *(_DWORD *)(v25 + 8) = v26 + 1;
        *(_DWORD *)(*(_QWORD *)(v25 + 40) + 28) = v23;
        if (v26)
          *(_DWORD *)(v25 + 8) = v26;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        v27 = a1[32];
        v28 = *(_DWORD *)(v27 + 8);
        *(_DWORD *)(v27 + 8) = v28 + 1;
        *(_DWORD *)(*(_QWORD *)(v27 + 40) + 28) = v24;
        if (v28)
          *(_DWORD *)(v27 + 8) = v28;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
    }
    if (v10 != 870)
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
    v11 = a1[30];
LABEL_16:
    ++*(_DWORD *)(v11 + 8);
    WTF::String::toFloat(this, 0);
    *(_DWORD *)(*(_QWORD *)(v11 + 40) + 28) = v16;
    v12 = *(_DWORD *)(v11 + 8) - 1;
    if (*(_DWORD *)(v11 + 8) == 1)
      goto LABEL_10;
    goto LABEL_17;
  }
  if (v10 == 431)
  {
    v11 = a1[29];
    goto LABEL_16;
  }
  if (v10 == 518)
  {
    v11 = a1[28];
    v12 = *(_DWORD *)(v11 + 8);
    *(_DWORD *)(v11 + 8) = v12 + 1;
    v13 = *(_QWORD *)(v11 + 40);
    v14 = *(_DWORD **)this;
    if (*(_QWORD *)this)
      *v14 += 2;
    v15 = *(WTF::StringImpl **)(v13 + 32);
    *(_QWORD *)(v13 + 32) = v14;
    if (!v15)
    {
LABEL_9:
      if (!v12)
      {
LABEL_10:
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
      }
      goto LABEL_17;
    }
    if (*(_DWORD *)v15 != 2)
    {
      *(_DWORD *)v15 -= 2;
      goto LABEL_9;
    }
    WTF::StringImpl::destroy(v15, a2);
    v12 = *(_DWORD *)(v11 + 8) - 1;
    if (*(_DWORD *)(v11 + 8) == 1)
      goto LABEL_10;
LABEL_17:
    *(_DWORD *)(v11 + 8) = v12;
  }
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
}

uint64_t WebCore::SVGFEDiffuseLightingElement::setFilterEffectAttribute(_QWORD *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t jj;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t m;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t mm;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t j;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t k;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t ii;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  uint64_t n;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  uint64_t kk;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  uint64_t nn;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;

  if (*(_BYTE *)(a2 + 48) != 7)
  {
    __break(0xC471u);
    JUMPOUT(0x196618ED8);
  }
  v5 = 0;
  v6 = *(unsigned __int16 *)(*(_QWORD *)a3 + 10);
  if (v6 > 0x309)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)a3 + 10) > 0x365u)
    {
      if (*(unsigned __int16 *)(*(_QWORD *)a3 + 10) <= 0x3AAu)
      {
        if (v6 != 870)
        {
          if (v6 != 929)
            return v5;
          v7 = *(_DWORD **)(a2 + 96);
          ++v7[2];
          v8 = (uint64_t)(a1 + 10);
          do
          {
            v9 = *(_QWORD *)v8;
            v10 = *(_WORD *)(*(_QWORD *)v8 + 28);
            v8 = *(_QWORD *)v8 + 56;
          }
          while ((v10 & 0x20) == 0);
          v11 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
          for (i = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24); i != v11; i = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24))
          {
            if (i == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
              || i == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
            {
              break;
            }
            do
              v9 = *(_QWORD *)(v9 + 56);
            while ((*(_WORD *)(v9 + 28) & 0x20) == 0);
          }
          v13 = *(_QWORD *)(v9 + 192);
          v14 = *(_QWORD *)(v13 + 24);
          if (v14 && *(_DWORD *)(v14 - 12))
          {
            v111 = *(unsigned int *)(v14 - 4);
            if ((_DWORD)v111)
            {
              v112 = 8 * v111;
              v113 = *(uint64_t **)(v13 + 24);
              while ((unint64_t)(*v113 + 1) <= 1)
              {
                ++v113;
                v112 -= 8;
                if (!v112)
                  goto LABEL_15;
              }
            }
            else
            {
              v113 = *(uint64_t **)(v13 + 24);
            }
            v144 = (uint64_t *)(v14 + 8 * v111);
            if (v113 != v144)
            {
              v145 = *v113;
LABEL_246:
              if (*(_QWORD *)(v145 + 8))
              {
                v15 = v13 + 48;
                goto LABEL_16;
              }
              while (++v113 != v144)
              {
                v145 = *v113;
                if ((unint64_t)(*v113 + 1) > 1)
                {
                  if (v113 != v144)
                    goto LABEL_246;
                  break;
                }
              }
            }
          }
LABEL_15:
          v15 = v13 + 40;
LABEL_16:
          a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v15 + 28);
          v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 64))(v7, a4);
          goto LABEL_137;
        }
        v49 = a1[30];
        v50 = *(_QWORD *)(v49 + 24);
        if (v50 && *(_DWORD *)(v50 - 12))
        {
          v102 = *(unsigned int *)(v50 - 4);
          if ((_DWORD)v102)
          {
            v103 = 8 * v102;
            v104 = *(uint64_t **)(v49 + 24);
            while ((unint64_t)(*v104 + 1) <= 1)
            {
              ++v104;
              v103 -= 8;
              if (!v103)
                goto LABEL_70;
            }
          }
          else
          {
            v104 = *(uint64_t **)(v49 + 24);
          }
          v138 = (uint64_t *)(v50 + 8 * v102);
          if (v104 != v138)
          {
            v139 = *v104;
LABEL_219:
            if (*(_QWORD *)(v139 + 8))
            {
              v51 = v49 + 48;
LABEL_71:
              v52 = *(float *)(*(_QWORD *)v51 + 28);
              if (*(float *)(a2 + 72) != v52)
              {
                *(float *)(a2 + 72) = v52;
                return 1;
              }
              return 0;
            }
            while (++v104 != v138)
            {
              v139 = *v104;
              if ((unint64_t)(*v104 + 1) > 1)
              {
                if (v104 != v138)
                  goto LABEL_219;
                break;
              }
            }
          }
        }
LABEL_70:
        v51 = v49 + 40;
        goto LABEL_71;
      }
      if (v6 != 939)
      {
        if (v6 != 941)
          return v5;
        v7 = *(_DWORD **)(a2 + 96);
        ++v7[2];
        v41 = (uint64_t)(a1 + 10);
        do
        {
          v42 = *(_QWORD *)v41;
          v43 = *(_WORD *)(*(_QWORD *)v41 + 28);
          v41 = *(_QWORD *)v41 + 56;
        }
        while ((v43 & 0x20) == 0);
        v44 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
        for (j = *(_QWORD *)(*(_QWORD *)(v42 + 96) + 24); j != v44; j = *(_QWORD *)(*(_QWORD *)(v42 + 96) + 24))
        {
          if (j == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
            || j == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
          {
            break;
          }
          do
            v42 = *(_QWORD *)(v42 + 56);
          while ((*(_WORD *)(v42 + 28) & 0x20) == 0);
        }
        v46 = *(_QWORD *)(v42 + 208);
        v47 = *(_QWORD *)(v46 + 24);
        if (v47 && *(_DWORD *)(v47 - 12))
        {
          v114 = *(unsigned int *)(v47 - 4);
          if ((_DWORD)v114)
          {
            v115 = 8 * v114;
            v116 = *(uint64_t **)(v46 + 24);
            while ((unint64_t)(*v116 + 1) <= 1)
            {
              ++v116;
              v115 -= 8;
              if (!v115)
                goto LABEL_67;
            }
          }
          else
          {
            v116 = *(uint64_t **)(v46 + 24);
          }
          v146 = (uint64_t *)(v47 + 8 * v114);
          if (v116 != v146)
          {
            v147 = *v116;
LABEL_255:
            if (*(_QWORD *)(v147 + 8))
            {
              v48 = v46 + 48;
              goto LABEL_68;
            }
            while (++v116 != v146)
            {
              v147 = *v116;
              if ((unint64_t)(*v116 + 1) > 1)
              {
                if (v116 != v146)
                  goto LABEL_255;
                break;
              }
            }
          }
        }
LABEL_67:
        v48 = v46 + 40;
LABEL_68:
        a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v48 + 28);
        v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 80))(v7, a4);
        goto LABEL_137;
      }
      v7 = *(_DWORD **)(a2 + 96);
      ++v7[2];
      v53 = (uint64_t)(a1 + 10);
      do
      {
        v54 = *(_QWORD *)v53;
        v55 = *(_WORD *)(*(_QWORD *)v53 + 28);
        v53 = *(_QWORD *)v53 + 56;
      }
      while ((v55 & 0x20) == 0);
      v56 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
      for (k = *(_QWORD *)(*(_QWORD *)(v54 + 96) + 24); k != v56; k = *(_QWORD *)(*(_QWORD *)(v54 + 96) + 24))
      {
        if (k == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
          || k == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
        {
          break;
        }
        do
          v54 = *(_QWORD *)(v54 + 56);
        while ((*(_WORD *)(v54 + 28) & 0x20) == 0);
      }
      v58 = *(_QWORD *)(v54 + 200);
      v59 = *(_QWORD *)(v58 + 24);
      if (v59 && *(_DWORD *)(v59 - 12))
      {
        v105 = *(unsigned int *)(v59 - 4);
        if ((_DWORD)v105)
        {
          v106 = 8 * v105;
          v107 = *(uint64_t **)(v58 + 24);
          while ((unint64_t)(*v107 + 1) <= 1)
          {
            ++v107;
            v106 -= 8;
            if (!v106)
              goto LABEL_81;
          }
        }
        else
        {
          v107 = *(uint64_t **)(v58 + 24);
        }
        v140 = (uint64_t *)(v59 + 8 * v105);
        if (v107 != v140)
        {
          v141 = *v107;
LABEL_228:
          if (*(_QWORD *)(v141 + 8))
          {
            v60 = v58 + 48;
            goto LABEL_82;
          }
          while (++v107 != v140)
          {
            v141 = *v107;
            if ((unint64_t)(*v107 + 1) > 1)
            {
              if (v107 != v140)
                goto LABEL_228;
              break;
            }
          }
        }
      }
LABEL_81:
      v60 = v58 + 40;
LABEL_82:
      a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v60 + 28);
      v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 72))(v7, a4);
      goto LABEL_137;
    }
    if (v6 != 778)
    {
      if (v6 != 779)
      {
        if (v6 != 841)
          return v5;
        v7 = *(_DWORD **)(a2 + 96);
        ++v7[2];
        v25 = (uint64_t)(a1 + 10);
        do
        {
          v26 = *(_QWORD *)v25;
          v27 = *(_WORD *)(*(_QWORD *)v25 + 28);
          v25 = *(_QWORD *)v25 + 56;
        }
        while ((v27 & 0x20) == 0);
        v28 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
        for (m = *(_QWORD *)(*(_QWORD *)(v26 + 96) + 24); m != v28; m = *(_QWORD *)(*(_QWORD *)(v26 + 96) + 24))
        {
          if (m == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
            || m == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
          {
            break;
          }
          do
            v26 = *(_QWORD *)(v26 + 56);
          while ((*(_WORD *)(v26 + 28) & 0x20) == 0);
        }
        v30 = *(_QWORD *)(v26 + 240);
        v31 = *(_QWORD *)(v30 + 24);
        if (v31 && *(_DWORD *)(v31 - 12))
        {
          v129 = *(unsigned int *)(v31 - 4);
          if ((_DWORD)v129)
          {
            v130 = 8 * v129;
            v131 = *(uint64_t **)(v30 + 24);
            while ((unint64_t)(*v131 + 1) <= 1)
            {
              ++v131;
              v130 -= 8;
              if (!v130)
                goto LABEL_42;
            }
          }
          else
          {
            v131 = *(uint64_t **)(v30 + 24);
          }
          v156 = (uint64_t *)(v31 + 8 * v129);
          if (v131 != v156)
          {
            v157 = *v131;
LABEL_300:
            if (*(_QWORD *)(v157 + 8))
            {
              v32 = v30 + 48;
              goto LABEL_43;
            }
            while (++v131 != v156)
            {
              v157 = *v131;
              if ((unint64_t)(*v131 + 1) > 1)
              {
                if (v131 != v156)
                  goto LABEL_300;
                break;
              }
            }
          }
        }
LABEL_42:
        v32 = v30 + 40;
LABEL_43:
        a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v32 + 28);
        v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 112))(v7, a4);
        goto LABEL_137;
      }
      v7 = *(_DWORD **)(a2 + 96);
      ++v7[2];
      v69 = (uint64_t)(a1 + 10);
      do
      {
        v70 = *(_QWORD *)v69;
        v71 = *(_WORD *)(*(_QWORD *)v69 + 28);
        v69 = *(_QWORD *)v69 + 56;
      }
      while ((v71 & 0x20) == 0);
      v72 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
      for (n = *(_QWORD *)(*(_QWORD *)(v70 + 96) + 24); n != v72; n = *(_QWORD *)(*(_QWORD *)(v70 + 96) + 24))
      {
        if (n == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
          || n == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
        {
          break;
        }
        do
          v70 = *(_QWORD *)(v70 + 56);
        while ((*(_WORD *)(v70 + 28) & 0x20) == 0);
      }
      v74 = *(_QWORD *)(v70 + 232);
      v75 = *(_QWORD *)(v74 + 24);
      if (v75 && *(_DWORD *)(v75 - 12))
      {
        v117 = *(unsigned int *)(v75 - 4);
        if ((_DWORD)v117)
        {
          v118 = 8 * v117;
          v119 = *(uint64_t **)(v74 + 24);
          while ((unint64_t)(*v119 + 1) <= 1)
          {
            ++v119;
            v118 -= 8;
            if (!v118)
              goto LABEL_101;
          }
        }
        else
        {
          v119 = *(uint64_t **)(v74 + 24);
        }
        v148 = (uint64_t *)(v75 + 8 * v117);
        if (v119 != v148)
        {
          v149 = *v119;
LABEL_264:
          if (*(_QWORD *)(v149 + 8))
          {
            v76 = v74 + 48;
            goto LABEL_102;
          }
          while (++v119 != v148)
          {
            v149 = *v119;
            if ((unint64_t)(*v119 + 1) > 1)
            {
              if (v119 != v148)
                goto LABEL_264;
              break;
            }
          }
        }
      }
LABEL_101:
      v76 = v74 + 40;
LABEL_102:
      a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v76 + 28);
      v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 104))(v7, a4);
      goto LABEL_137;
    }
    v7 = *(_DWORD **)(a2 + 96);
    ++v7[2];
    v61 = (uint64_t)(a1 + 10);
    do
    {
      v62 = *(_QWORD *)v61;
      v63 = *(_WORD *)(*(_QWORD *)v61 + 28);
      v61 = *(_QWORD *)v61 + 56;
    }
    while ((v63 & 0x20) == 0);
    v64 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
    for (ii = *(_QWORD *)(*(_QWORD *)(v62 + 96) + 24); ii != v64; ii = *(_QWORD *)(*(_QWORD *)(v62 + 96) + 24))
    {
      if (ii == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
        || ii == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
      {
        break;
      }
      do
        v62 = *(_QWORD *)(v62 + 56);
      while ((*(_WORD *)(v62 + 28) & 0x20) == 0);
    }
    v66 = *(_QWORD *)(v62 + 224);
    v67 = *(_QWORD *)(v66 + 24);
    if (v67 && *(_DWORD *)(v67 - 12))
    {
      v108 = *(unsigned int *)(v67 - 4);
      if ((_DWORD)v108)
      {
        v109 = 8 * v108;
        v110 = *(uint64_t **)(v66 + 24);
        while ((unint64_t)(*v110 + 1) <= 1)
        {
          ++v110;
          v109 -= 8;
          if (!v109)
            goto LABEL_91;
        }
      }
      else
      {
        v110 = *(uint64_t **)(v66 + 24);
      }
      v142 = (uint64_t *)(v67 + 8 * v108);
      if (v110 != v142)
      {
        v143 = *v110;
LABEL_237:
        if (*(_QWORD *)(v143 + 8))
        {
          v68 = v66 + 48;
          goto LABEL_92;
        }
        while (++v110 != v142)
        {
          v143 = *v110;
          if ((unint64_t)(*v110 + 1) > 1)
          {
            if (v110 != v142)
              goto LABEL_237;
            break;
          }
        }
      }
    }
LABEL_91:
    v68 = v66 + 40;
LABEL_92:
    a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v68 + 28);
    v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 96))(v7, a4);
    goto LABEL_137;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a3 + 10) <= 0x223u)
  {
    if (v6 != 366)
    {
      if (v6 != 431)
      {
        if (v6 != 449)
          return v5;
        v7 = *(_DWORD **)(a2 + 96);
        ++v7[2];
        v17 = (uint64_t)(a1 + 10);
        do
        {
          v18 = *(_QWORD *)v17;
          v19 = *(_WORD *)(*(_QWORD *)v17 + 28);
          v17 = *(_QWORD *)v17 + 56;
        }
        while ((v19 & 0x20) == 0);
        v20 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
        for (jj = *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24); jj != v20; jj = *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24))
        {
          if (jj == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
            || jj == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
          {
            break;
          }
          do
            v18 = *(_QWORD *)(v18 + 56);
          while ((*(_WORD *)(v18 + 28) & 0x20) == 0);
        }
        v22 = *(_QWORD *)(v18 + 184);
        v23 = *(_QWORD *)(v22 + 24);
        if (v23 && *(_DWORD *)(v23 - 12))
        {
          v132 = *(unsigned int *)(v23 - 4);
          if ((_DWORD)v132)
          {
            v133 = 8 * v132;
            v134 = *(uint64_t **)(v22 + 24);
            while ((unint64_t)(*v134 + 1) <= 1)
            {
              ++v134;
              v133 -= 8;
              if (!v133)
                goto LABEL_29;
            }
          }
          else
          {
            v134 = *(uint64_t **)(v22 + 24);
          }
          v158 = (uint64_t *)(v23 + 8 * v132);
          if (v134 != v158)
          {
            v159 = *v134;
LABEL_309:
            if (*(_QWORD *)(v159 + 8))
            {
              v24 = v22 + 48;
              goto LABEL_30;
            }
            while (++v134 != v158)
            {
              v159 = *v134;
              if ((unint64_t)(*v134 + 1) > 1)
              {
                if (v134 != v158)
                  goto LABEL_309;
                break;
              }
            }
          }
        }
LABEL_29:
        v24 = v22 + 40;
LABEL_30:
        a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v24 + 28);
        v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 56))(v7, a4);
        goto LABEL_137;
      }
      v89 = a1[29];
      v90 = *(_QWORD *)(v89 + 24);
      if (v90 && *(_DWORD *)(v90 - 12))
      {
        v123 = *(unsigned int *)(v90 - 4);
        if ((_DWORD)v123)
        {
          v124 = 8 * v123;
          v125 = *(uint64_t **)(v89 + 24);
          while ((unint64_t)(*v125 + 1) <= 1)
          {
            ++v125;
            v124 -= 8;
            if (!v124)
              goto LABEL_121;
          }
        }
        else
        {
          v125 = *(uint64_t **)(v89 + 24);
        }
        v152 = (uint64_t *)(v90 + 8 * v123);
        if (v125 != v152)
        {
          v153 = *v125;
LABEL_282:
          if (*(_QWORD *)(v153 + 8))
          {
            v91 = v89 + 48;
LABEL_122:
            v92 = *(float *)(*(_QWORD *)v91 + 28);
            if (v92 < 0.0)
              v92 = 0.0;
            if (*(float *)(a2 + 76) != v92)
            {
              *(float *)(a2 + 76) = v92;
              return 1;
            }
            return 0;
          }
          while (++v125 != v152)
          {
            v153 = *v125;
            if ((unint64_t)(*v125 + 1) > 1)
            {
              if (v125 != v152)
                goto LABEL_282;
              break;
            }
          }
        }
      }
LABEL_121:
      v91 = v89 + 40;
      goto LABEL_122;
    }
    v7 = *(_DWORD **)(a2 + 96);
    ++v7[2];
    v77 = (uint64_t)(a1 + 10);
    do
    {
      v78 = *(_QWORD *)v77;
      v79 = *(_WORD *)(*(_QWORD *)v77 + 28);
      v77 = *(_QWORD *)v77 + 56;
    }
    while ((v79 & 0x20) == 0);
    v80 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
    for (kk = *(_QWORD *)(*(_QWORD *)(v78 + 96) + 24); kk != v80; kk = *(_QWORD *)(*(_QWORD *)(v78 + 96) + 24))
    {
      if (kk == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
        || kk == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
      {
        break;
      }
      do
        v78 = *(_QWORD *)(v78 + 56);
      while ((*(_WORD *)(v78 + 28) & 0x20) == 0);
    }
    v82 = *(_QWORD *)(v78 + 176);
    v83 = *(_QWORD *)(v82 + 24);
    if (v83 && *(_DWORD *)(v83 - 12))
    {
      v120 = *(unsigned int *)(v83 - 4);
      if ((_DWORD)v120)
      {
        v121 = 8 * v120;
        v122 = *(uint64_t **)(v82 + 24);
        while ((unint64_t)(*v122 + 1) <= 1)
        {
          ++v122;
          v121 -= 8;
          if (!v121)
            goto LABEL_111;
        }
      }
      else
      {
        v122 = *(uint64_t **)(v82 + 24);
      }
      v150 = (uint64_t *)(v83 + 8 * v120);
      if (v122 != v150)
      {
        v151 = *v122;
LABEL_273:
        if (*(_QWORD *)(v151 + 8))
        {
          v84 = v82 + 48;
          goto LABEL_112;
        }
        while (++v122 != v150)
        {
          v151 = *v122;
          if ((unint64_t)(*v122 + 1) > 1)
          {
            if (v122 != v150)
              goto LABEL_273;
            break;
          }
        }
      }
    }
LABEL_111:
    v84 = v82 + 40;
LABEL_112:
    a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v84 + 28);
    v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 48))(v7, a4);
    goto LABEL_137;
  }
  if (v6 != 548)
  {
    if (v6 != 549)
    {
      if (v6 != 777)
        return v5;
      v7 = *(_DWORD **)(a2 + 96);
      ++v7[2];
      v33 = (uint64_t)(a1 + 10);
      do
      {
        v34 = *(_QWORD *)v33;
        v35 = *(_WORD *)(*(_QWORD *)v33 + 28);
        v33 = *(_QWORD *)v33 + 56;
      }
      while ((v35 & 0x20) == 0);
      v36 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
      for (mm = *(_QWORD *)(*(_QWORD *)(v34 + 96) + 24); mm != v36; mm = *(_QWORD *)(*(_QWORD *)(v34 + 96) + 24))
      {
        if (mm == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
          || mm == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
        {
          break;
        }
        do
          v34 = *(_QWORD *)(v34 + 56);
        while ((*(_WORD *)(v34 + 28) & 0x20) == 0);
      }
      v38 = *(_QWORD *)(v34 + 216);
      v39 = *(_QWORD *)(v38 + 24);
      if (v39 && *(_DWORD *)(v39 - 12))
      {
        v135 = *(unsigned int *)(v39 - 4);
        if ((_DWORD)v135)
        {
          v136 = 8 * v135;
          v137 = *(uint64_t **)(v38 + 24);
          while ((unint64_t)(*v137 + 1) <= 1)
          {
            ++v137;
            v136 -= 8;
            if (!v136)
              goto LABEL_55;
          }
        }
        else
        {
          v137 = *(uint64_t **)(v38 + 24);
        }
        v160 = (uint64_t *)(v39 + 8 * v135);
        if (v137 != v160)
        {
          v161 = *v137;
LABEL_318:
          if (*(_QWORD *)(v161 + 8))
          {
            v40 = v38 + 48;
            goto LABEL_56;
          }
          while (++v137 != v160)
          {
            v161 = *v137;
            if ((unint64_t)(*v137 + 1) > 1)
            {
              if (v137 != v160)
                goto LABEL_318;
              break;
            }
          }
        }
      }
LABEL_55:
      v40 = v38 + 40;
LABEL_56:
      a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v40 + 28);
      v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 88))(v7, a4);
      goto LABEL_137;
    }
    v7 = *(_DWORD **)(a2 + 96);
    ++v7[2];
    v93 = (uint64_t)(a1 + 10);
    do
    {
      v94 = *(_QWORD *)v93;
      v95 = *(_WORD *)(*(_QWORD *)v93 + 28);
      v93 = *(_QWORD *)v93 + 56;
    }
    while ((v95 & 0x20) == 0);
    v96 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
    for (nn = *(_QWORD *)(*(_QWORD *)(v94 + 96) + 24); nn != v96; nn = *(_QWORD *)(*(_QWORD *)(v94 + 96) + 24))
    {
      if (nn == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
        || nn == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
      {
        break;
      }
      do
        v94 = *(_QWORD *)(v94 + 56);
      while ((*(_WORD *)(v94 + 28) & 0x20) == 0);
    }
    v98 = *(_QWORD *)(v94 + 248);
    v99 = *(_QWORD *)(v98 + 24);
    if (v99 && *(_DWORD *)(v99 - 12))
    {
      v126 = *(unsigned int *)(v99 - 4);
      if ((_DWORD)v126)
      {
        v127 = 8 * v126;
        v128 = *(uint64_t **)(v98 + 24);
        while ((unint64_t)(*v128 + 1) <= 1)
        {
          ++v128;
          v127 -= 8;
          if (!v127)
            goto LABEL_135;
        }
      }
      else
      {
        v128 = *(uint64_t **)(v98 + 24);
      }
      v154 = (uint64_t *)(v99 + 8 * v126);
      if (v128 != v154)
      {
        v155 = *v128;
LABEL_291:
        if (*(_QWORD *)(v155 + 8))
        {
          v100 = v98 + 48;
          goto LABEL_136;
        }
        while (++v128 != v154)
        {
          v155 = *v128;
          if ((unint64_t)(*v128 + 1) > 1)
          {
            if (v128 != v154)
              goto LABEL_291;
            break;
          }
        }
      }
    }
LABEL_135:
    v100 = v98 + 40;
LABEL_136:
    a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v100 + 28);
    v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 120))(v7, a4);
LABEL_137:
    v5 = v16;
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
    return v5;
  }
  if ((a1[8] & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196618EF8);
  }
  WebCore::RenderStyle::colorWithColorFilter((WebCore::RenderStyle *)((a1[8] & 0xFFFFFFFFFFFFLL) + 80), (const WebCore::StyleColor *)(*(_QWORD *)(*(_QWORD *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x88) + 56) + 24), (WebCore::Color *)&v162);
  v5 = WebCore::FEFlood::setFloodColor((WebCore::FEFlood *)a2, (const WebCore::Color *)&v162);
  if ((v162 & 0x8000000000000) != 0)
  {
    v86 = (unsigned int *)(v162 & 0xFFFFFFFFFFFFLL);
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v86);
      WTF::fastFree((WTF *)v86, v85);
    }
  }
  return v5;
}

void WebCore::SVGFEDiffuseLightingElement::svgAttributeChanged(WebCore::SVGFEDiffuseLightingElement *this, const WebCore::QualifiedName *a2)
{
  unsigned int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;

  v4 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v4 > 0x216)
  {
    if (v4 != 535 && v4 != 870)
      goto LABEL_32;
  }
  else if (v4 != 431)
  {
    if (v4 == 518)
    {
      if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v5 = WTF::fastCompactMalloc((WTF *)0x28);
        *(_DWORD *)v5 = 1;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 8) = this;
        *(_BYTE *)(v5 + 32) = 0;
        v7 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v7 & 0xFFFF000000000000 | v5;
        v8 = v7 & 0xFFFFFFFFFFFFLL;
        if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            atomic_store(1u, (unsigned int *)v8);
            v36 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v36)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v36));
            v37 = *(WTF **)(v8 + 16);
            if (v37)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v37, v6);
            }
            WTF::fastFree((WTF *)v8, v6);
          }
        }
      }
      v11 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
      do
        v12 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v12 + 1, (unsigned int *)v11));
      v13 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      *(_DWORD *)(v13 + 24) += 2;
      WebCore::Document::updateSVGRenderer((WebCore::Document *)v13, this);
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
      WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v11 + 8), v14);
      do
      {
        v16 = __ldaxr((unsigned int *)v11);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v11));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v11);
        v18 = *(unsigned int *)(v11 + 28);
        if ((_DWORD)v18)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v18));
        v19 = *(WTF **)(v11 + 16);
        if (v19)
        {
          *(_QWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          WTF::fastFree(v19, v15);
        }
        v20 = (WTF *)v11;
LABEL_40:
        WTF::fastFree(v20, v15);
        return;
      }
      return;
    }
LABEL_32:
    WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, a2);
    return;
  }
  if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v21 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v21 = 1;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 8) = this;
    *(_BYTE *)(v21 + 32) = 0;
    v23 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v23 & 0xFFFF000000000000 | v21;
    v24 = v23 & 0xFFFFFFFFFFFFLL;
    if ((v23 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v25 = __ldaxr((unsigned int *)v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v24));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)v24);
        v34 = *(unsigned int *)(v24 + 28);
        if ((_DWORD)v34)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v24 + 16), (WTF::StringImpl *)(*(_QWORD *)(v24 + 16) + 32 * v34));
        v35 = *(WTF **)(v24 + 16);
        if (v35)
        {
          *(_QWORD *)(v24 + 16) = 0;
          *(_DWORD *)(v24 + 24) = 0;
          WTF::fastFree(v35, v22);
        }
        WTF::fastFree((WTF *)v24, v22);
      }
    }
  }
  v27 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
  do
    v28 = __ldaxr((unsigned int *)v27);
  while (__stlxr(v28 + 1, (unsigned int *)v27));
  WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(this, a2);
  WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v27 + 8), v29);
  do
  {
    v30 = __ldaxr((unsigned int *)v27);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, (unsigned int *)v27));
  if (!v31)
  {
    atomic_store(1u, (unsigned int *)v27);
    v32 = *(unsigned int *)(v27 + 28);
    if ((_DWORD)v32)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v32));
    v33 = *(WTF **)(v27 + 16);
    if (v33)
    {
      *(_QWORD *)(v27 + 16) = 0;
      *(_DWORD *)(v27 + 24) = 0;
      WTF::fastFree(v33, v15);
    }
    v20 = (WTF *)v27;
    goto LABEL_40;
  }
}

unsigned int *WebCore::SVGFEDiffuseLightingElement::createFilterEffect@<X0>(unsigned int *result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  _WORD *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unint64_t v29;
  const void *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  char v59;
  char **v60;
  char *v61;

  v4 = (_WORD *)*((_QWORD *)result + 10);
  if (!v4)
  {
LABEL_5:
    *a3 = 0;
    return result;
  }
  v5 = result;
  while ((v4[14] & 0x20) == 0)
  {
    v4 = (_WORD *)*((_QWORD *)v4 + 7);
    if (!v4)
      goto LABEL_5;
  }
  v6 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
  v7 = *(_QWORD *)(*((_QWORD *)v4 + 12) + 24);
  if (v7 != v6)
  {
LABEL_8:
    if (v7 != *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
      && v7 != *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
    {
      while (1)
      {
        v4 = (_WORD *)*((_QWORD *)v4 + 7);
        if (!v4)
          goto LABEL_5;
        if ((v4[14] & 0x20) != 0)
        {
          v7 = *(_QWORD *)(*((_QWORD *)v4 + 12) + 24);
          if (v7 != v6)
            goto LABEL_8;
          break;
        }
      }
    }
  }
  v8 = *((_DWORD *)v4 + 6);
  *((_DWORD *)v4 + 6) = v8 + 2;
  v9 = *((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    if ((*(_BYTE *)((*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1966198F8);
    }
    ++*(_DWORD *)((*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    (*(void (**)(unsigned int **__return_ptr, _WORD *))(*(_QWORD *)v4 + 1312))(&v58, v4);
    WebCore::RenderStyle::colorWithColorFilter((WebCore::RenderStyle *)(v9 + 80), (const WebCore::StyleColor *)(*(_QWORD *)(*(_QWORD *)(v9 + 136) + 56) + 24), (WebCore::Color *)&v57);
    v10 = (_QWORD *)*((_QWORD *)v5 + 30);
    v11 = v10[3];
    if (v11 && *(_DWORD *)(v11 - 12))
    {
      v33 = *(unsigned int *)(v11 - 4);
      if ((_DWORD)v33)
      {
        v34 = 8 * v33;
        v35 = (uint64_t *)v10[3];
        while ((unint64_t)(*v35 + 1) <= 1)
        {
          ++v35;
          v34 -= 8;
          if (!v34)
            goto LABEL_16;
        }
      }
      else
      {
        v35 = (uint64_t *)v10[3];
      }
      v45 = (uint64_t *)(v11 + 8 * v33);
      if (v35 != v45)
      {
        v46 = *v35;
LABEL_68:
        if (*(_QWORD *)(v46 + 8))
        {
          v12 = v10 + 6;
LABEL_17:
          v13 = (_QWORD *)*((_QWORD *)v5 + 29);
          v14 = v13[3];
          if (v14 && *(_DWORD *)(v14 - 12))
          {
            v36 = *(unsigned int *)(v14 - 4);
            if ((_DWORD)v36)
            {
              v37 = 8 * v36;
              v38 = (uint64_t *)v13[3];
              while ((unint64_t)(*v38 + 1) <= 1)
              {
                ++v38;
                v37 -= 8;
                if (!v37)
                  goto LABEL_18;
              }
            }
            else
            {
              v38 = (uint64_t *)v13[3];
            }
            v47 = (uint64_t *)(v14 + 8 * v36);
            if (v38 != v47)
            {
              v48 = *v38;
LABEL_77:
              if (*(_QWORD *)(v48 + 8))
              {
                v15 = v13 + 6;
LABEL_19:
                v16 = (_QWORD *)*((_QWORD *)v5 + 31);
                v17 = v16[3];
                if (v17 && *(_DWORD *)(v17 - 12))
                {
                  v39 = *(unsigned int *)(v17 - 4);
                  if ((_DWORD)v39)
                  {
                    v40 = 8 * v39;
                    v41 = (uint64_t *)v16[3];
                    while ((unint64_t)(*v41 + 1) <= 1)
                    {
                      ++v41;
                      v40 -= 8;
                      if (!v40)
                        goto LABEL_20;
                    }
                  }
                  else
                  {
                    v41 = (uint64_t *)v16[3];
                  }
                  v49 = (uint64_t *)(v17 + 8 * v39);
                  if (v41 != v49)
                  {
                    v50 = *v41;
LABEL_86:
                    if (*(_QWORD *)(v50 + 8))
                    {
                      v18 = v16 + 6;
LABEL_21:
                      v19 = *v12;
                      v20 = *v15;
                      v21 = *v18;
                      v22 = *((_QWORD *)v5 + 32);
                      v23 = *(_QWORD *)(v22 + 24);
                      if (v23 && *(_DWORD *)(v23 - 12))
                      {
                        v42 = *(unsigned int *)(v23 - 4);
                        if ((_DWORD)v42)
                        {
                          v43 = 8 * v42;
                          v44 = *(uint64_t **)(v22 + 24);
                          while ((unint64_t)(*v44 + 1) <= 1)
                          {
                            ++v44;
                            v43 -= 8;
                            if (!v43)
                              goto LABEL_22;
                          }
                        }
                        else
                        {
                          v44 = *(uint64_t **)(v22 + 24);
                        }
                        v51 = (uint64_t *)(v23 + 8 * v42);
                        if (v44 != v51)
                        {
                          v52 = *v44;
LABEL_95:
                          if (*(_QWORD *)(v52 + 8))
                          {
                            v24 = v22 + 48;
LABEL_23:
                            v25 = *(float *)(v19 + 28);
                            v26 = *(float *)(v20 + 28);
                            v27 = *(float *)(v21 + 28);
                            v28 = *(float *)(*(_QWORD *)v24 + 28);
                            v29 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
                            if (v29 != -1)
                            {
                              v61 = &v59;
                              v60 = &v61;
                              std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
                            }
                            v30 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
                            v56 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
                            if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
                            {
                              CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
                              WebCore::FEDiffuseLighting::create(&v57, (uint64_t *)&v58, (const void **)&v56, (uint64_t *)&v61, v25, v26, v27, v28);
                              v31 = (uint64_t)v61;
                              CFRelease(v30);
                            }
                            else
                            {
                              WebCore::FEDiffuseLighting::create(&v57, (uint64_t *)&v58, (const void **)&v56, (uint64_t *)&v61, v25, v26, v27, v28);
                              v31 = (uint64_t)v61;
                            }
                            *a3 = v31;
                            v56 = 0;
                            if ((v57 & 0x8000000000000) != 0)
                            {
                              v53 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFLL);
                              do
                              {
                                v54 = __ldaxr(v53);
                                v55 = v54 - 1;
                              }
                              while (__stlxr(v55, v53));
                              if (!v55)
                              {
                                atomic_store(1u, v53);
                                WTF::fastFree((WTF *)v53, a2);
                              }
                            }
                            result = v58;
                            v58 = 0;
                            if (result)
                            {
                              if (result[2] == 1)
                                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
                              else
                                --result[2];
                            }
                            v32 = *(_DWORD *)(v9 + 16);
                            if (!v32)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x196619918);
                            }
                            *(_DWORD *)(v9 + 16) = v32 - 1;
                            v8 = *((_DWORD *)v4 + 6) - 2;
                            if (*((_DWORD *)v4 + 6) != 2)
                              goto LABEL_33;
                            goto LABEL_35;
                          }
                          while (++v44 != v51)
                          {
                            v52 = *v44;
                            if ((unint64_t)(*v44 + 1) > 1)
                            {
                              if (v44 != v51)
                                goto LABEL_95;
                              break;
                            }
                          }
                        }
                      }
LABEL_22:
                      v24 = v22 + 40;
                      goto LABEL_23;
                    }
                    while (++v41 != v49)
                    {
                      v50 = *v41;
                      if ((unint64_t)(*v41 + 1) > 1)
                      {
                        if (v41 != v49)
                          goto LABEL_86;
                        break;
                      }
                    }
                  }
                }
LABEL_20:
                v18 = v16 + 5;
                goto LABEL_21;
              }
              while (++v38 != v47)
              {
                v48 = *v38;
                if ((unint64_t)(*v38 + 1) > 1)
                {
                  if (v38 != v47)
                    goto LABEL_77;
                  break;
                }
              }
            }
          }
LABEL_18:
          v15 = v13 + 5;
          goto LABEL_19;
        }
        while (++v35 != v45)
        {
          v46 = *v35;
          if ((unint64_t)(*v35 + 1) > 1)
          {
            if (v35 != v45)
              goto LABEL_68;
            break;
          }
        }
      }
    }
LABEL_16:
    v12 = v10 + 5;
    goto LABEL_17;
  }
  *a3 = 0;
  if (v8)
  {
LABEL_33:
    *((_DWORD *)v4 + 6) = v8;
    return result;
  }
LABEL_35:
  if ((v4[15] & 0x400) == 0)
    return WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  return result;
}

void WebCore::SVGFEDisplacementMapElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char **v21;
  char *v22;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E345B8F0;
  v6[14] = (uint64_t)&unk_1E345BE50;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E345DC70;
  *((_QWORD *)v7 + 1) = v6;
  v22 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v22);
  v8 = (uint64_t)v22;
  v22 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *v6 = (uint64_t)off_1E345B8F0;
  v6[14] = (uint64_t)&unk_1E345BE50;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E3452E28;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E3452EA8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = off_1E347BDB8;
  v6[28] = v9;
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)v11 = &off_1E3452E28;
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_WORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = &off_1E3452EA8;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)v11 = off_1E347BDB8;
  v6[29] = v11;
  v13 = WTF::fastMalloc((WTF *)0x40);
  v14 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v14 + 8) = 1;
  *(_BYTE *)(v14 + 12) = 4;
  *(_QWORD *)v14 = off_1E345DCE0;
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 16) = v6;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)v13 = &off_1E34568A0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = 0;
  *(_BYTE *)(v13 + 56) = 0;
  v6[30] = v13;
  v15 = WTF::fastMalloc((WTF *)0x40);
  v16 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v16 + 8) = 1;
  *(_BYTE *)(v16 + 12) = 4;
  *(_QWORD *)v16 = off_1E345DCE0;
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = v6;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)v15 = &off_1E34568A0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = v16;
  *(_QWORD *)(v15 + 48) = 0;
  *(_BYTE *)(v15 + 56) = 0;
  v6[31] = v15;
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = v6;
  *(_QWORD *)v17 = &off_1E34566C8;
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)(v18 + 16) = 0;
  *(_WORD *)(v18 + 24) = 0;
  *(_QWORD *)v18 = off_1E3456748;
  *(_DWORD *)(v18 + 28) = 0;
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = 0;
  v6[32] = v17;
  v19 = atomic_load(&WebCore::SVGFEDisplacementMapElement::SVGFEDisplacementMapElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v19 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&WebCore::SVGFEDisplacementMapElement::SVGFEDisplacementMapElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEDisplacementMapElement::SVGFEDisplacementMapElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

_QWORD *WebCore::SVGFEDisplacementMapElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::String *this, int a5)
{
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v21;

  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 <= 0x32F)
  {
    if (v10 == 517)
    {
      v12 = a1[29];
    }
    else
    {
      if (v10 != 518)
        return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
      v12 = a1[28];
    }
    v14 = *(_DWORD *)(v12 + 8);
    *(_DWORD *)(v12 + 8) = v14 + 1;
    v15 = *(_QWORD *)(v12 + 40);
    v16 = *(_DWORD **)this;
    if (*(_QWORD *)this)
      *v16 += 2;
    v17 = *(WTF::StringImpl **)(v15 + 32);
    *(_QWORD *)(v15 + 32) = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, a2);
        v14 = *(_DWORD *)(v12 + 8) - 1;
        if (*(_DWORD *)(v12 + 8) == 1)
          goto LABEL_22;
        goto LABEL_38;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (!v14)
    {
LABEL_22:
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
    }
LABEL_38:
    *(_DWORD *)(v12 + 8) = v14;
    return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
  }
  switch(v10)
  {
    case 0x330u:
      v12 = a1[32];
      ++*(_DWORD *)(v12 + 8);
      WTF::String::toFloat(this, 0);
      *(_DWORD *)(*(_QWORD *)(v12 + 40) + 28) = v13;
      goto LABEL_37;
    case 0x3ACu:
      v11 = 1;
      if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "R", 1) & 1) == 0)
      {
        if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "G", 1) & 1) != 0)
        {
          v11 = 2;
        }
        else if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "B", 1) & 1) != 0)
        {
          v11 = 3;
        }
        else
        {
          if (!MEMORY[0x19AEA53F4](*(_QWORD *)this, "A", 1))
            return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
          v11 = 4;
        }
      }
      v12 = a1[31];
      goto LABEL_35;
    case 0x3A2u:
      v11 = 1;
      if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "R", 1) & 1) == 0)
      {
        if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "G", 1) & 1) != 0)
        {
          v11 = 2;
        }
        else if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "B", 1) & 1) != 0)
        {
          v11 = 3;
        }
        else
        {
          if (!MEMORY[0x19AEA53F4](*(_QWORD *)this, "A", 1))
            return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
          v11 = 4;
        }
      }
      v12 = a1[30];
LABEL_35:
      ++*(_DWORD *)(v12 + 8);
      v18 = *(_QWORD *)(v12 + 40);
      v21 = v11;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v18 + 16))(v18, &v21);
      v19 = *(_QWORD *)(v12 + 48);
      if (v19)
      {
        v21 = v11;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v19 + 16))(v19, &v21);
      }
LABEL_37:
      v14 = *(_DWORD *)(v12 + 8) - 1;
      if (*(_DWORD *)(v12 + 8) != 1)
        goto LABEL_38;
      goto LABEL_22;
  }
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
}

