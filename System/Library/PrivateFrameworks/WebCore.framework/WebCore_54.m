uint64_t *WebCore::AXObjectCache::remove(uint64_t *this, WebCore::RenderObject *a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (a2)
  {
    v2 = this;
    v3 = WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::take<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(this + 8, a2);
    return WebCore::AXObjectCache::remove(v2, v3);
  }
  return this;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::take<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(uint64_t *a1, void *a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  WTF *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; v8 = (v8 + i++) & v4)
  {
    v10 = *(WTF **)(v2 + 16 * v8);
    if (v10 != (WTF *)-1)
    {
      if (!v10)
        return 0;
      if (*((void **)v10 + 1) == a2)
        break;
    }
  }
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v13 = (_QWORD *)(v2 + 16 * v8);
  v11 = v13[1];
  *v13 = 0;
  if (*(_DWORD *)v10 == 1)
    WTF::fastFree(v10, a2);
  else
    --*(_DWORD *)v10;
  *v13 = -1;
  ++*(_DWORD *)(*a1 - 16);
  v14 = *a1;
  if (*a1)
    v15 = *(_DWORD *)(v14 - 12) - 1;
  else
    v15 = -1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a1;
  if (*a1)
  {
    v17 = 6 * *(_DWORD *)(v16 - 12);
    v18 = *(_DWORD *)(v16 - 4);
    if (v17 < v18 && v18 >= 9)
      WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v18 >> 1);
  }
  return v11;
}

uint64_t *WebCore::AXObjectCache::remove(WebCore::AXObjectCache *this, WebCore::Node *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t *result;
  void *v15;
  uint64_t v16;
  __int16 v17;
  WebCore::Node *v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int j;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  WebCore::AXObjectCache::AttributeChange *v41;
  uint64_t v42;
  WebCore::AXObjectCache::AttributeChange *v43;
  int v44;
  WebCore::AXObjectCache::AttributeChange *v45;
  WebCore::AXObjectCache::AttributeChange *v46;
  WebCore::AXObjectCache::AttributeChange *v47;
  WebCore::AXObjectCache::AttributeChange *v48;
  WebCore::AXObjectCache::AttributeChange *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  WTF *v60;
  void *v61;
  uint64_t v62;
  WTF *v63;
  _QWORD *v64;
  WebCore::AXObjectCache::AttributeChange *v65;
  WebCore::AXObjectCache::AttributeChange *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl **v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  WTF *v77;
  void *v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WebCore::AXObjectCache::AttributeChange *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WebCore::AXObjectCache::AttributeChange *v94;
  BOOL v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  int v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  WebCore::Node *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  void *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  int v118;

  v5 = (uint64_t *)((char *)this + 80);
  v4 = *((_QWORD *)this + 10);
  if (!v4)
    goto LABEL_9;
  v6 = *(_DWORD *)(v4 - 8);
  v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  for (i = 1; ; v10 = (v10 + i++) & v6)
  {
    v12 = *(_QWORD *)(v4 + 16 * v10);
    if (v12 != -1)
    {
      if (!v12)
      {
        v13 = 0;
        goto LABEL_10;
      }
      if (*(WebCore::Node **)(v12 + 8) == a2)
        break;
    }
  }
  if (v10 != *(_DWORD *)(v4 - 4))
  {
    v32 = (_QWORD *)(v4 + 16 * v10);
    v13 = v32[1];
    *v32 = 0;
    do
    {
      v33 = __ldaxr((unsigned int *)v12);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, (unsigned int *)v12));
    if (!v34)
    {
      atomic_store(1u, (unsigned int *)v12);
      v116 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v116)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v116));
      v117 = *(WTF **)(v12 + 16);
      if (v117)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        WTF::fastFree(v117, a2);
      }
      WTF::fastFree((WTF *)v12, a2);
    }
    *v32 = -1;
    ++*(_DWORD *)(*v5 - 16);
    v35 = *v5;
    if (*v5)
      v36 = *(_DWORD *)(v35 - 12) - 1;
    else
      v36 = -1;
    *(_DWORD *)(v35 - 12) = v36;
    v37 = *v5;
    if (*v5)
    {
      v38 = 6 * *(_DWORD *)(v37 - 12);
      v39 = *(_DWORD *)(v37 - 4);
      if (v38 < v39 && v39 >= 9)
        WTF::HashTable<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(v5, v39 >> 1);
    }
  }
  else
  {
LABEL_9:
    v13 = 0;
  }
LABEL_10:
  result = WebCore::AXObjectCache::remove((uint64_t *)this, v13);
  v15 = (void *)(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL);
  if (v15)
  {
    v16 = WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::take<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)this + 8, v15);
    result = WebCore::AXObjectCache::remove((uint64_t *)this, v16);
  }
  if (!*((_BYTE *)this + 737))
  {
    v17 = *((_WORD *)a2 + 14);
    if ((v17 & 8) != 0)
      v18 = a2;
    else
      v18 = 0;
    if ((v17 & 8) != 0)
    {
      v19 = (uint64_t *)((char *)this + 664);
      v20 = *((_DWORD *)this + 168);
      *((_DWORD *)this + 168) = v20 + 1;
      if (v20 > *((_DWORD *)this + 169))
        WTF::WeakHashMap<WebCore::Element,WTF::String,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)this + 664, v15);
      v21 = *((_QWORD *)a2 + 2);
      v22 = v21 & 0xFFFFFFFFFFFFLL;
      if ((v21 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFLL) + 8))
        {
          v23 = *v19;
          if (*v19)
          {
            v24 = *(_DWORD *)(v23 - 8);
            v25 = (v22 + ~(v21 << 32)) ^ ((unint64_t)(v22 + ~(v21 << 32)) >> 22);
            v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
            v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
            v28 = v24 & ((v27 >> 31) ^ v27);
            for (j = 1; ; ++j)
            {
              v30 = v28;
              v31 = *(_QWORD *)(v23 + 16 * v28);
              if (v31 != -1)
              {
                if (!v31)
                  goto LABEL_42;
                if (v31 == v22)
                  break;
              }
              v28 = (v30 + j) & v24;
            }
            if ((_DWORD)v30 != *(_DWORD *)(v23 - 4))
              WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)this + 83, (_QWORD *)(v23 + 16 * v30));
          }
        }
      }
LABEL_42:
      v41 = (WebCore::AXObjectCache::AttributeChange *)*((_QWORD *)this + 85);
      v42 = *((unsigned int *)this + 173);
      v43 = (WebCore::AXObjectCache::AttributeChange *)((char *)v41 + 32 * v42);
      if ((_DWORD)v42)
      {
        v44 = 0;
        v45 = (WebCore::AXObjectCache::AttributeChange *)((char *)v41 + 32 * v42);
        v46 = v45;
        do
        {
          if (*(_QWORD *)v41 && *(WebCore::Node **)(*(_QWORD *)v41 + 8) == a2)
          {
            v47 = v41;
            if (v46 != (WebCore::AXObjectCache::AttributeChange *)(*((_QWORD *)this + 85)
                                                                  + 32 * *((unsigned int *)this + 173)))
            {
              if (v45 == v41)
              {
                v47 = v46;
              }
              else
              {
                v118 = v44;
                if (v45 <= v46)
                {
                  v64 = (_QWORD *)((char *)v46 + v41 - v45);
                  v65 = v41;
                  do
                  {
                    v66 = v65;
                    v67 = *((_QWORD *)v65 - 4);
                    v65 = (WebCore::AXObjectCache::AttributeChange *)((char *)v65 - 32);
                    *(_QWORD *)v65 = 0;
                    *(v64 - 4) = v67;
                    v64 -= 4;
                    v68 = *((_QWORD *)v65 + 1);
                    *((_QWORD *)v65 + 1) = 0;
                    v64[1] = v68;
                    v69 = *((_QWORD *)v65 + 2);
                    *((_QWORD *)v65 + 2) = 0;
                    v64[2] = v69;
                    v70 = *((_QWORD *)v65 + 3);
                    *((_QWORD *)v65 + 3) = 0;
                    v64[3] = v70;
                    v71 = (WTF::StringImpl *)*((_QWORD *)v65 + 3);
                    *((_QWORD *)v65 + 3) = 0;
                    if (v71)
                    {
                      if (*(_DWORD *)v71 == 2)
                        WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v71 -= 2;
                    }
                    v72 = (WTF::StringImpl *)*((_QWORD *)v66 - 2);
                    *((_QWORD *)v66 - 2) = 0;
                    if (v72)
                    {
                      if (*(_DWORD *)v72 == 2)
                        WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v72 -= 2;
                    }
                    v73 = (WTF::StringImpl **)*((_QWORD *)v66 - 3);
                    *((_QWORD *)v66 - 3) = 0;
                    if (v73)
                    {
                      if (*(_DWORD *)v73 == 1)
                      {
                        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v73);
                        WTF::fastFree(v77, v78);
                      }
                      else
                      {
                        --*(_DWORD *)v73;
                      }
                    }
                    v74 = *(_QWORD *)v65;
                    *(_QWORD *)v65 = 0;
                    if (v74)
                    {
                      do
                      {
                        v75 = __ldaxr((unsigned int *)v74);
                        v76 = v75 - 1;
                      }
                      while (__stlxr(v76, (unsigned int *)v74));
                      if (!v76)
                      {
                        atomic_store(1u, (unsigned int *)v74);
                        v79 = *(unsigned int *)(v74 + 28);
                        if ((_DWORD)v79)
                          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v74 + 16), (WTF::StringImpl *)(*(_QWORD *)(v74 + 16) + 32 * v79));
                        v80 = *(WTF **)(v74 + 16);
                        if (v80)
                        {
                          *(_QWORD *)(v74 + 16) = 0;
                          *(_DWORD *)(v74 + 24) = 0;
                          WTF::fastFree(v80, v15);
                        }
                        WTF::fastFree((WTF *)v74, v15);
                      }
                    }
                  }
                  while (v65 != v45);
                  v81 = (v41 - v45) >> 5;
                }
                else
                {
                  v48 = v46;
                  v49 = v45;
                  do
                  {
                    v50 = *(_QWORD *)v49;
                    *(_QWORD *)v49 = 0;
                    *(_QWORD *)v48 = v50;
                    v51 = *((_QWORD *)v49 + 1);
                    *((_QWORD *)v49 + 1) = 0;
                    *((_QWORD *)v48 + 1) = v51;
                    v52 = *((_QWORD *)v49 + 2);
                    *((_QWORD *)v49 + 2) = 0;
                    *((_QWORD *)v48 + 2) = v52;
                    v53 = *((_QWORD *)v49 + 3);
                    *((_QWORD *)v49 + 3) = 0;
                    *((_QWORD *)v48 + 3) = v53;
                    v54 = (WTF::StringImpl *)*((_QWORD *)v49 + 3);
                    *((_QWORD *)v49 + 3) = 0;
                    if (v54)
                    {
                      if (*(_DWORD *)v54 == 2)
                        WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v54 -= 2;
                    }
                    v55 = (WTF::StringImpl *)*((_QWORD *)v49 + 2);
                    *((_QWORD *)v49 + 2) = 0;
                    if (v55)
                    {
                      if (*(_DWORD *)v55 == 2)
                        WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v55 -= 2;
                    }
                    v56 = (WTF::StringImpl **)*((_QWORD *)v49 + 1);
                    *((_QWORD *)v49 + 1) = 0;
                    if (v56)
                    {
                      if (*(_DWORD *)v56 == 1)
                      {
                        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v56);
                        WTF::fastFree(v60, v61);
                      }
                      else
                      {
                        --*(_DWORD *)v56;
                      }
                    }
                    v57 = *(_QWORD *)v49;
                    *(_QWORD *)v49 = 0;
                    if (v57)
                    {
                      do
                      {
                        v58 = __ldaxr((unsigned int *)v57);
                        v59 = v58 - 1;
                      }
                      while (__stlxr(v59, (unsigned int *)v57));
                      if (!v59)
                      {
                        atomic_store(1u, (unsigned int *)v57);
                        v62 = *(unsigned int *)(v57 + 28);
                        if ((_DWORD)v62)
                          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v57 + 16), (WTF::StringImpl *)(*(_QWORD *)(v57 + 16) + 32 * v62));
                        v63 = *(WTF **)(v57 + 16);
                        if (v63)
                        {
                          *(_QWORD *)(v57 + 16) = 0;
                          *(_DWORD *)(v57 + 24) = 0;
                          WTF::fastFree(v63, v15);
                        }
                        WTF::fastFree((WTF *)v57, v15);
                      }
                    }
                    v48 = (WebCore::AXObjectCache::AttributeChange *)((char *)v48 + 32);
                    v49 = (WebCore::AXObjectCache::AttributeChange *)((char *)v49 + 32);
                  }
                  while (v49 != v41);
                  v81 = (v41 - v45) >> 5;
                }
                v47 = (WebCore::AXObjectCache::AttributeChange *)((char *)v46 + 32 * v81);
                v44 = v118;
              }
            }
            v45 = (WebCore::AXObjectCache::AttributeChange *)((char *)v41 + 32);
            WebCore::AXObjectCache::AttributeChange::~AttributeChange(v41, (WTF::StringImpl *)v15);
            ++v44;
            v46 = v47;
          }
          v41 = (WebCore::AXObjectCache::AttributeChange *)((char *)v41 + 32);
        }
        while (v41 < v43);
        v41 = (WebCore::AXObjectCache::AttributeChange *)*((_QWORD *)this + 85);
        v82 = *((unsigned int *)this + 173);
        v43 = v46;
      }
      else
      {
        v82 = 0;
        v44 = 0;
        v45 = v43;
      }
      v83 = (char *)v41 + 32 * v82;
      if (v45 != (WebCore::AXObjectCache::AttributeChange *)v83)
      {
        if (v45 <= v43)
        {
          v88 = (WebCore::AXObjectCache::AttributeChange *)((char *)v41 + 32 * v82 - 32);
          v89 = (_QWORD *)((char *)v43 + ((v83 - (char *)v45) & 0xFFFFFFFFFFFFFFE0) - 16);
          do
          {
            v90 = *(_QWORD *)v88;
            *(_QWORD *)v88 = 0;
            *(v89 - 2) = v90;
            v91 = *((_QWORD *)v88 + 1);
            *((_QWORD *)v88 + 1) = 0;
            *(v89 - 1) = v91;
            v92 = *((_QWORD *)v88 + 2);
            *((_QWORD *)v88 + 2) = 0;
            *v89 = v92;
            v93 = *((_QWORD *)v88 + 3);
            *((_QWORD *)v88 + 3) = 0;
            v89[1] = v93;
            WebCore::AXObjectCache::AttributeChange::~AttributeChange(v88, (WTF::StringImpl *)v15);
            v89 -= 4;
            v95 = v94 == v45;
            v88 = (WebCore::AXObjectCache::AttributeChange *)((char *)v94 - 32);
          }
          while (!v95);
        }
        else
        {
          do
          {
            v84 = *(_QWORD *)v45;
            *(_QWORD *)v45 = 0;
            *(_QWORD *)v43 = v84;
            v85 = *((_QWORD *)v45 + 1);
            *((_QWORD *)v45 + 1) = 0;
            *((_QWORD *)v43 + 1) = v85;
            v86 = *((_QWORD *)v45 + 2);
            *((_QWORD *)v45 + 2) = 0;
            *((_QWORD *)v43 + 2) = v86;
            v87 = *((_QWORD *)v45 + 3);
            *((_QWORD *)v45 + 3) = 0;
            *((_QWORD *)v43 + 3) = v87;
            WebCore::AXObjectCache::AttributeChange::~AttributeChange(v45, (WTF::StringImpl *)v15);
            v45 = (WebCore::AXObjectCache::AttributeChange *)((char *)v45 + 32);
            v43 = (WebCore::AXObjectCache::AttributeChange *)((char *)v43 + 32);
          }
          while (v45 != (WebCore::AXObjectCache::AttributeChange *)v83);
        }
      }
      *((_DWORD *)this + 173) -= v44;
      v96 = (uint64_t *)*((_QWORD *)this + 43);
      v97 = *((unsigned int *)this + 89);
      v98 = &v96[v97];
      v99 = 0;
      if ((_DWORD)v97)
      {
        v100 = &v96[v97];
        v101 = v100;
        do
        {
          v102 = *v96;
          if (*v96)
            v103 = *(WebCore::Node **)(v102 + 8);
          else
            v103 = 0;
          if (v103 == v18)
          {
            if (v101 == (uint64_t *)(*((_QWORD *)this + 43) + 8 * *((unsigned int *)this + 89)))
            {
              v101 = v96;
            }
            else if (v100 != v96)
            {
              WTF::VectorMover<false,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::moveOverlapping(v100, v96, v101);
              v101 = (uint64_t *)((char *)v101 + (char *)v96 - (char *)v100);
              v102 = *v96;
            }
            *v96 = 0;
            v100 = v96 + 1;
            if (v102)
            {
              do
              {
                v104 = __ldaxr((unsigned int *)v102);
                v105 = v104 - 1;
              }
              while (__stlxr(v105, (unsigned int *)v102));
              if (!v105)
              {
                atomic_store(1u, (unsigned int *)v102);
                v106 = *(unsigned int *)(v102 + 28);
                if ((_DWORD)v106)
                {
                  v109 = v102;
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v102 + 16), (WTF::StringImpl *)(*(_QWORD *)(v102 + 16) + 32 * v106));
                  v102 = v109;
                }
                v107 = *(WTF **)(v102 + 16);
                if (v107)
                {
                  *(_QWORD *)(v102 + 16) = 0;
                  *(_DWORD *)(v102 + 24) = 0;
                  v108 = v102;
                  WTF::fastFree(v107, v15);
                  v102 = v108;
                }
                WTF::fastFree((WTF *)v102, v15);
              }
            }
            ++v99;
          }
          ++v96;
        }
        while (v96 < v98);
        v96 = (uint64_t *)*((_QWORD *)this + 43);
        LODWORD(v97) = *((_DWORD *)this + 89);
        v98 = v101;
      }
      else
      {
        v100 = &v96[v97];
      }
      v110 = &v96[v97];
      if (v100 != v110)
      {
        WTF::VectorMover<false,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::moveOverlapping(v100, v110, v98);
        LODWORD(v97) = *((_DWORD *)this + 89);
      }
      *((_DWORD *)this + 89) = v97 - v99;
      WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>((uint64_t)this + 448, v18);
      v112 = *((_DWORD *)this + 118) + 1;
      *((_DWORD *)this + 118) = v112;
      if (v112 > *((_DWORD *)this + 119))
      {
        _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_16HTMLTableElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)this + 58, v111);
        v113 = 0;
        *((_DWORD *)this + 118) = 0;
        v114 = *((_QWORD *)this + 58);
        if (v114)
        {
          v113 = *(_DWORD *)(v114 - 12);
          if (v113 > 0x7FFFFFFE)
            v113 = 0x7FFFFFFF;
        }
        *((_DWORD *)this + 119) = 2 * v113;
      }
      v115 = *((_QWORD *)v18 + 2);
      if ((v115 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if (*(_QWORD *)((v115 & 0xFFFFFFFFFFFFLL) + 8))
          WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)this + 58, (WTF *)(v115 & 0xFFFFFFFFFFFFLL));
      }
      WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>((uint64_t)this + 544, v18);
      WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>((uint64_t)this + 616, v18);
      WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>((uint64_t)this + 632, v18);
    }
    WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Node>((uint64_t)this + 584, (uint64_t)a2);
    return (uint64_t *)WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Node>((uint64_t)this + 512, (uint64_t)a2);
  }
  return result;
}

uint64_t *WebCore::AXObjectCache::remove(uint64_t *this, WebCore::Widget *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  WebCore::Widget **v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v34;
  WTF *v35;

  if (a2)
  {
    v3 = (uint64_t)this;
    v5 = this + 9;
    v4 = this[9];
    if (!v4)
      goto LABEL_10;
    v6 = *(_DWORD *)(v4 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    for (i = 1; ; v10 = (v10 + i++) & v6)
    {
      v12 = *(WebCore::Widget ***)(v4 + 16 * v10);
      if (v12 != (WebCore::Widget **)-1)
      {
        if (!v12)
        {
          v13 = 0;
          goto LABEL_11;
        }
        if (v12[1] == a2)
          break;
      }
    }
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      v19 = (_QWORD *)(v4 + 16 * v10);
      v13 = v19[1];
      *v19 = 0;
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree((WTF *)v12, a2);
      else
        --*(_DWORD *)v12;
      *v19 = -1;
      ++*(_DWORD *)(*v5 - 16);
      v20 = *v5;
      if (*v5)
        v21 = *(_DWORD *)(v20 - 12) - 1;
      else
        v21 = -1;
      *(_DWORD *)(v20 - 12) = v21;
      v26 = *v5;
      if (*v5)
      {
        v27 = 6 * *(_DWORD *)(v26 - 12);
        v28 = *(_DWORD *)(v26 - 4);
        if (v27 < v28 && v28 >= 9)
          WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(v5, v28 >> 1);
      }
    }
    else
    {
LABEL_10:
      v13 = 0;
    }
LABEL_11:
    WebCore::AXObjectCache::remove((uint64_t *)v3, v13);
    this = (uint64_t *)(*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)a2 + 104))(a2);
    if ((_DWORD)this)
    {
      v15 = (uint64_t *)(v3 + 648);
      v16 = *(_DWORD *)(v3 + 656) + 1;
      *(_DWORD *)(v3 + 656) = v16;
      if (v16 <= *(_DWORD *)(v3 + 660))
        goto LABEL_53;
      v17 = *v15;
      if (!*v15)
        goto LABEL_14;
      v22 = *(_DWORD *)(v17 - 4);
      if (!v22)
        goto LABEL_48;
      v23 = 0;
      v24 = v22 - 1;
      do
      {
        v25 = v24;
        this = *(uint64_t **)(v17 + 8 * v24);
        if ((unint64_t)this + 1 >= 2 && !this[1])
        {
          *(_QWORD *)(v17 + 8 * v24) = 0;
          if (*(_DWORD *)this == 1)
            this = (uint64_t *)WTF::fastFree((WTF *)this, v14);
          else
            --*(_DWORD *)this;
          *(_QWORD *)(v17 + 8 * v24) = -1;
          ++v23;
        }
        --v24;
      }
      while (v25);
      v17 = *v15;
      if (v23)
      {
        *(_DWORD *)(v17 - 16) += v23;
        v30 = *v15;
        if (*v15)
          v31 = *(_DWORD *)(v30 - 12);
        else
          v31 = 0;
        *(_DWORD *)(v30 - 12) = v31 - v23;
        v17 = *v15;
      }
      if (!v17)
      {
LABEL_14:
        v18 = 0;
        *(_DWORD *)(v3 + 656) = 0;
        goto LABEL_51;
      }
      v32 = *(_DWORD *)(v17 - 4);
      if (v32 < 9 || 6 * *(_DWORD *)(v17 - 12) >= v32)
      {
LABEL_48:
        *(_DWORD *)(v3 + 656) = 0;
      }
      else
      {
        this = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v3 + 648));
        v17 = *(_QWORD *)(v3 + 648);
        *(_DWORD *)(v3 + 656) = 0;
        if (!v17)
        {
          v18 = 0;
          goto LABEL_51;
        }
      }
      v18 = *(_DWORD *)(v17 - 12);
      v34 = 0x7FFFFFFF;
      if (v18 >= 0x7FFFFFFF)
      {
LABEL_52:
        *(_DWORD *)(v3 + 660) = 2 * v34;
LABEL_53:
        v35 = (WTF *)*((_QWORD *)a2 + 2);
        if (v35)
        {
          if (*((_QWORD *)v35 + 1))
            return (uint64_t *)WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>((uint64_t *)(v3 + 648), v35);
        }
        return this;
      }
LABEL_51:
      v34 = v18;
      goto LABEL_52;
    }
  }
  return this;
}

void WebCore::AXObjectCache::handleTextChanged(WebCore::AXObjectCache *this, WebCore::AccessibilityObject *a2)
{
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  int v10;
  char v11;
  WebCore::AccessibilityObject *v12;
  WebCore::AccessibilityObject *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _BOOL4 IsEnabled;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  __n128 v24;
  void *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WebCore::AXObjectCache *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  WebCore::AXObjectCache *v46;
  void *v47;
  __n128 v48;
  int v49;
  int v50;
  int v51;
  int v52;
  WebCore::AccessibilityObject *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unsigned int v63;
  WTF::StringImpl *v64;

  if (!a2)
    return;
  v4 = *((_QWORD *)a2 + 1);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v7 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 1456))(a2);
  v8 = *((_QWORD *)a2 + 1);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_15:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
      goto LABEL_20;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_20:
  v11 = 0;
  v12 = a2;
  do
  {
    v13 = v12;
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)v12 + 2232))(&v64, v12);
    v15 = v64;
    if (v64)
    {
      if ((*((_BYTE *)v64 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v64 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v64, v14);
        v15 = v62;
      }
    }
    v62 = v15;
    IsEnabled = WebCore::AXCoreObject::liveRegionStatusIsEnabled((uint64_t *)&v62);
    v18 = v62;
    v62 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v64;
    v64 = 0;
    if (!v19)
      goto LABEL_30;
    if (*(_DWORD *)v19 != 2)
    {
      *(_DWORD *)v19 -= 2;
LABEL_30:
      if (!IsEnabled)
        goto LABEL_32;
LABEL_31:
      WebCore::AXObjectCache::postLiveRegionChangeNotification(this, v13);
      goto LABEL_32;
    }
    WTF::StringImpl::destroy(v19, v16);
    if (IsEnabled)
      goto LABEL_31;
LABEL_32:
    if ((v11 & 1) != 0)
      goto LABEL_37;
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v13 + 480))(v13))
    {
      v20 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v13 + 1712))(v13);
      if (v20)
      {
        v21 = v20;
        *(_DWORD *)(v20 + 24) += 2;
        WebCore::AXObjectCache::postNotification((WTF **)this, v13, v20, 57, 0);
        if (*(_DWORD *)(v21 + 24) == 2)
        {
          if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v21);
        }
        else
        {
          *(_DWORD *)(v21 + 24) -= 2;
        }
      }
      else
      {
        WebCore::AXObjectCache::postNotification((WTF **)this, v13, 0, 57, 0);
      }
LABEL_37:
      v11 = 1;
      goto LABEL_39;
    }
    v11 = 0;
LABEL_39:
    if (v7 == 107)
    {
      v22 = WebCore::AccessibilityObject::dependsOnTextUnderElement(v13);
      v23 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v13 + 1456))(v13);
      if ((v22 & 1) != 0 || v23 == 54)
        v24.n128_f64[0] = WebCore::AXObjectCache::postNotification((WTF **)this, v13, 0, 85, 0);
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *, uint64_t, __n128))(*(_QWORD *)v13 + 984))(&v62, v13, 16, v24);
      if (v63)
      {
        v26 = v62;
        v27 = 8 * v63;
        do
        {
          v28 = *(WebCore::AXObjectCache **)v26;
          if (*(_QWORD *)v26 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v28 + 48))(*(_QWORD *)v26) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1955D777CLL);
          }
          WebCore::AXObjectCache::postNotification((WTF **)this, v28, 0, 83, 0);
          v26 = (WTF::StringImpl *)((char *)v26 + 8);
          v27 -= 8;
        }
        while (v27);
      }
      WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v25);
    }
    v29 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v13 + 1232))(v13);
    v12 = (WebCore::AccessibilityObject *)v29;
    if (!v29)
      goto LABEL_59;
    v31 = *(_QWORD *)(v29 + 8);
    if (__ldaxr((unsigned __int8 *)v31))
    {
      __clrex();
LABEL_53:
      MEMORY[0x19AEA534C](v31);
      goto LABEL_54;
    }
    if (__stxr(1u, (unsigned __int8 *)v31))
      goto LABEL_53;
LABEL_54:
    ++*(_QWORD *)(v31 + 8);
    v33 = __ldxr((unsigned __int8 *)v31);
    if (v33 != 1)
    {
      __clrex();
LABEL_58:
      WTF::Lock::unlockSlow((WTF::Lock *)v31);
      goto LABEL_59;
    }
    if (__stlxr(0, (unsigned __int8 *)v31))
      goto LABEL_58;
LABEL_59:
    v34 = *((_QWORD *)v13 + 1);
    if (__ldaxr((unsigned __int8 *)v34))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v34))
    {
      goto LABEL_63;
    }
    MEMORY[0x19AEA534C](v34);
LABEL_63:
    v36 = *(_QWORD *)(v34 + 8);
    v37 = v36 - 1;
    *(_QWORD *)(v34 + 8) = v36 - 1;
    if (v36 == 1)
    {
      v41 = *(_QWORD *)(v34 + 16);
      v38 = *(_QWORD *)(v34 + 24);
      *(_QWORD *)(v34 + 24) = 0;
      v39 = v41 != 0;
    }
    else
    {
      v38 = 0;
      v39 = 1;
    }
    v40 = __ldxr((unsigned __int8 *)v34);
    if (v40 != 1)
    {
      __clrex();
LABEL_70:
      WTF::Lock::unlockSlow((WTF::Lock *)v34);
      if (v37)
        continue;
      goto LABEL_71;
    }
    if (__stlxr(0, (unsigned __int8 *)v34))
      goto LABEL_70;
    if (v37)
      continue;
LABEL_71:
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    if (!v39)
      WTF::fastFree((WTF *)v34, v30);
  }
  while (v12);
  v42 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 1712))(a2);
  if (v42)
  {
    v43 = v42;
    *(_DWORD *)(v42 + 24) += 2;
    v44.n128_f64[0] = WebCore::AXObjectCache::postNotification((WTF **)this, a2, v42, 83, 0);
    if (*(_DWORD *)(v43 + 24) == 2)
    {
      if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v43);
    }
    else
    {
      *(_DWORD *)(v43 + 24) -= 2;
    }
  }
  else
  {
    v44.n128_f64[0] = WebCore::AXObjectCache::postNotification((WTF **)this, a2, 0, 83, 0);
  }
  v45 = (*(uint64_t (**)(WebCore::AccessibilityObject *, __n128))(*(_QWORD *)a2 + 1488))(a2, v44);
  v46 = (WebCore::AXObjectCache *)v45;
  if (v45 && *(_BYTE *)(v45 + 361)
    || ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 2896))(a2) & 1) == 0)
  {
    v49 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 2872))(a2);
  }
  else
  {
    v49 = 1;
  }
  v50 = *((unsigned __int8 *)a2 + 59);
  *((_BYTE *)a2 + 59) = v49;
  if (v46)
  {
    v51 = v50 == 1 ? v49 : 1;
    v52 = v50 ? 0 : v49;
    if (v51 != 1 || v52)
    {
      v53 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 1232))(a2);
      v48.n128_f64[0] = WebCore::AXObjectCache::childrenChanged(v46, v53);
    }
  }
  v54 = *((_QWORD *)a2 + 1);
  if (__ldaxr((unsigned __int8 *)v54))
  {
    __clrex();
    goto LABEL_106;
  }
  if (__stxr(1u, (unsigned __int8 *)v54))
LABEL_106:
    MEMORY[0x19AEA534C](v54, v48);
  v56 = *(_QWORD *)(v54 + 8);
  v57 = v56 - 1;
  *(_QWORD *)(v54 + 8) = v56 - 1;
  if (v56 == 1)
  {
    v61 = *(_QWORD *)(v54 + 16);
    v58 = *(_QWORD *)(v54 + 24);
    *(_QWORD *)(v54 + 24) = 0;
    v59 = v61 != 0;
  }
  else
  {
    v58 = 0;
    v59 = 1;
  }
  v60 = __ldxr((unsigned __int8 *)v54);
  if (v60 != 1)
  {
    __clrex();
LABEL_114:
    WTF::Lock::unlockSlow((WTF::Lock *)v54);
    if (!v57)
      goto LABEL_115;
    return;
  }
  if (__stlxr(0, (unsigned __int8 *)v54))
    goto LABEL_114;
  if (!v57)
  {
LABEL_115:
    if (v58)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v58 + 8))(v58, v48);
    if (!v59)
      WTF::fastFree((WTF *)v54, v47);
  }
}

uint64_t WebCore::AXObjectCache::postLiveRegionChangeNotification(WebCore::AXObjectCache *this, WebCore::AccessibilityObject *a2)
{
  WebCore::AXObjectCache *v3;
  char *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  WebCore::AccessibilityObject **v15;
  double v16;
  uint64_t result;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  WebCore::AccessibilityObject *v28;

  v3 = this;
  v4 = (char *)this + 256;
  if ((*((_QWORD *)this + 36) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 36) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    this = (WebCore::AXObjectCache *)WebCore::TimerBase::stopSlowCase((WebCore::AXObjectCache *)((char *)this + 256));
  }
  v5 = *((_QWORD *)a2 + 1);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  this = (WebCore::AXObjectCache *)MEMORY[0x19AEA534C](v5);
LABEL_6:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_10:
    this = (WebCore::AXObjectCache *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v28 = a2;
  v8 = *((_QWORD *)v3 + 39);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    for (i = 1; ; ++i)
    {
      v15 = *(WebCore::AccessibilityObject ***)(v8 + 8 * v13);
      if (v15 != (WebCore::AccessibilityObject **)-1)
      {
        if (!v15)
          goto LABEL_17;
        if (*v15 == a2)
          break;
      }
      v13 = (v13 + i) & v9;
    }
  }
  else
  {
LABEL_17:
    this = (WebCore::AXObjectCache *)WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add(&v27, (uint64_t *)v3 + 39, &v28);
    a2 = v28;
  }
  *((_QWORD *)v3 + 35) = 0;
  WTF::MonotonicTime::now(this);
  result = WebCore::TimerBase::setNextFireTime((uint64_t)v4, v16 + 0.0);
  v28 = 0;
  if (a2)
  {
    v19 = *((_QWORD *)a2 + 1);
    if (__ldaxr((unsigned __int8 *)v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v19))
    {
      goto LABEL_23;
    }
    result = MEMORY[0x19AEA534C](v19);
LABEL_23:
    v21 = *(_QWORD *)(v19 + 8);
    v22 = v21 - 1;
    *(_QWORD *)(v19 + 8) = v21 - 1;
    if (v21 == 1)
    {
      v26 = *(_QWORD *)(v19 + 16);
      v23 = *(_QWORD *)(v19 + 24);
      *(_QWORD *)(v19 + 24) = 0;
      v24 = v26 != 0;
    }
    else
    {
      v23 = 0;
      v24 = 1;
    }
    v25 = __ldxr((unsigned __int8 *)v19);
    if (v25 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v19))
      {
        if (v22)
          return result;
LABEL_31:
        if (v23)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        if (!v24)
          return WTF::fastFree((WTF *)v19, v18);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v19);
    if (v22)
      return result;
    goto LABEL_31;
  }
  return result;
}

double WebCore::AXObjectCache::postNotification(WTF **this, WebCore::AXObjectCache *a2, uint64_t a3, int a4, int a5)
{
  WebCore::AXObjectCache *v8;
  WebCore::AXObjectCache *v9;
  WTF *v10;
  double result;
  WebCore::RenderObject *v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WebCore::AXObjectCache *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  double v30;
  uint64_t v31;
  WebCore::AXObjectCache *v32;
  int v33;

  v8 = a2;
  v9 = (WebCore::AXObjectCache *)this;
  v10 = this[11];
  this[11] = 0;
  if (v10)
  {
    if (*(_QWORD *)v10)
      WTF::fastFree((WTF *)(*(_QWORD *)v10 - 16), a2);
    this = (WTF **)WTF::fastFree(v10, a2);
  }
  if (v8 && a5 == 1)
  {
    this = (WTF **)(*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v8 + 2960))(v8);
    v8 = (WebCore::AXObjectCache *)this;
  }
  if (a3 && !v8)
  {
    v12 = *(WebCore::RenderObject **)(a3 + 1944);
    if (!v12)
      return result;
    this = (WTF **)WebCore::AXObjectCache::get(v9, v12);
    v8 = (WebCore::AXObjectCache *)this;
  }
  if (v8)
  {
    v13 = *((_QWORD *)v8 + 1);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_17;
    }
    this = (WTF **)MEMORY[0x19AEA534C](v13);
LABEL_17:
    ++*(_QWORD *)(v13 + 8);
    v15 = __ldxr((unsigned __int8 *)v13);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
LABEL_22:
        v32 = v8;
        v33 = a4;
        v16 = *((unsigned int *)v9 + 43);
        if ((_DWORD)v16 == *((_DWORD *)v9 + 42))
        {
          this = (WTF **)WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v9 + 20, v16 + 1, (unint64_t)&v32);
          v18 = *((unsigned int *)v9 + 43);
          v19 = *((_QWORD *)v9 + 20) + 16 * v18;
          v20 = *this;
          *this = 0;
          *(_QWORD *)v19 = v20;
          *(_DWORD *)(v19 + 8) = *((_DWORD *)this + 2);
          v21 = v32;
          *((_DWORD *)v9 + 43) = v18 + 1;
          v32 = 0;
          if (v21)
          {
            v22 = *((_QWORD *)v21 + 1);
            if (__ldaxr((unsigned __int8 *)v22))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v22))
            {
              goto LABEL_29;
            }
            this = (WTF **)MEMORY[0x19AEA534C](v22);
LABEL_29:
            v25 = *(_QWORD *)(v22 + 8);
            v26 = v25 - 1;
            *(_QWORD *)(v22 + 8) = v25 - 1;
            if (v25 == 1)
            {
              v31 = *(_QWORD *)(v22 + 16);
              v27 = *(_QWORD *)(v22 + 24);
              *(_QWORD *)(v22 + 24) = 0;
              v28 = v31 != 0;
            }
            else
            {
              v27 = 0;
              v28 = 1;
            }
            v29 = __ldxr((unsigned __int8 *)v22);
            if (v29 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v22))
              {
LABEL_36:
                if (!v26)
                {
                  if (v27)
                    this = (WTF **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
                  if (!v28)
                    this = (WTF **)WTF::fastFree((WTF *)v22, v17);
                }
                goto LABEL_41;
              }
            }
            else
            {
              __clrex();
            }
            this = (WTF **)WTF::Lock::unlockSlow((WTF::Lock *)v22);
            goto LABEL_36;
          }
        }
        else
        {
          v24 = *((_QWORD *)v9 + 20) + 16 * v16;
          *(_QWORD *)v24 = v8;
          *(_DWORD *)(v24 + 8) = a4;
          *((_DWORD *)v9 + 43) = v16 + 1;
        }
LABEL_41:
        if ((*((_QWORD *)v9 + 17) & 0xFFFFFFFFFFFFLL) == 0
          || (result = *(double *)((*((_QWORD *)v9 + 17) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
        {
          *((_QWORD *)v9 + 16) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          WebCore::TimerBase::setNextFireTime((uint64_t)v9 + 104, v30 + 0.0);
        }
        return result;
      }
    }
    else
    {
      __clrex();
    }
    this = (WTF **)WTF::Lock::unlockSlow((WTF::Lock *)v13);
    goto LABEL_22;
  }
  return result;
}

double WebCore::AXObjectCache::onRendererCreated(WebCore::AXObjectCache *this, WebCore::Element *a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  double v13;
  double result;
  uint64_t v15[3];
  uint64_t v16;

  if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1955D7D38);
    }
    v3 = *((_QWORD *)this + 10);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 - 8);
      v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      v8 = v4 & ((v7 >> 31) ^ v7);
      for (i = 1; ; ++i)
      {
        v10 = v8;
        v11 = *(_QWORD *)(v3 + 16 * v8);
        if (v11 != -1)
        {
          if (!v11)
            return result;
          if (*(WebCore::Element **)(v11 + 8) == a2)
            break;
        }
        v8 = (v10 + i) & v4;
      }
      v16 = *(_QWORD *)(v3 + 16 * v10 + 8);
      if ((unint64_t)(v16 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v15, (uint64_t *)this + 55, &v16);
        if ((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) == 0
          || (result = *(double *)((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
        {
          *((_QWORD *)this + 49) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
          WebCore::TimerBase::setNextFireTime((uint64_t)this + 368, v13 + 0.0);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::AXObjectCache::handleChildrenChanged(WebCore::AXObjectCache *this, WebCore::AccessibilityObject *a2)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  WebCore::AccessibilityObject *v7;
  _DWORD *v8;
  WebCore::AccessibilityObject *v9;
  uint64_t v10;
  unsigned int *v11;
  double v12;
  uint64_t v13;
  WebCore::AXObjectCache *v14;
  __n128 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  WebCore::AccessibilityObject *v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  char v25;
  WebCore::AccessibilityObject *v26;
  WebCore::AXObjectCache *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  _BOOL4 IsEnabled;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *v38;
  uint64_t v39;
  _BOOL4 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  int v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;

  v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 2800))(a2);
  v5 = *(_QWORD *)a2;
  if (v4)
  {
    result = (*(uint64_t (**)(WebCore::AccessibilityObject *, _QWORD))(v5 + 1896))(a2, 0);
    if (!*(_DWORD *)(result + 12))
      return result;
    v7 = **(WebCore::AccessibilityObject ***)result;
    if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v7 + 48))(v7) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1955D83A4);
    }
    WebCore::AXObjectCache::handleChildrenChanged(this, v7);
  }
  else
  {
    if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(v5 + 2808))(a2) & 1) != 0)
      return (uint64_t)WebCore::AccessibilityMenuListPopup::handleChildrenChanged(a2);
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 64))(a2))
    {
      v8 = (_DWORD *)((char *)this + 480);
      v9 = a2;
    }
    else
    {
      if (!(*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 400))(a2))
        goto LABEL_14;
      v10 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 3328))(a2);
      if (!v10)
        goto LABEL_14;
      v9 = (WebCore::AccessibilityObject *)v10;
      v8 = (_DWORD *)((char *)this + 480);
    }
    v11 = WTF::WeakHashSet<WebCore::AccessibilityTable,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::AccessibilityTable>((uint64_t)&v56, v8, (uint64_t)v9);
    if ((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *((_QWORD *)this + 49) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
      WebCore::TimerBase::setNextFireTime((uint64_t)this + 368, v12 + 0.0);
    }
  }
LABEL_14:
  if ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 840))(a2)
    || (result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 848))(a2)) != 0)
  {
    (*(void (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 3096))(a2);
    v13 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 1488))(a2);
    v14 = (WebCore::AXObjectCache *)v13;
    if (v13 && *(_BYTE *)(v13 + 361)
      || ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 2896))(a2) & 1) == 0)
    {
      v16 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 2872))(a2);
    }
    else
    {
      v16 = 1;
    }
    v17 = *((unsigned __int8 *)a2 + 59);
    *((_BYTE *)a2 + 59) = v16;
    if (v14)
    {
      v18 = v17 == 1 ? v16 : 1;
      v19 = v17 ? 0 : v16;
      if (v18 != 1 || v19)
      {
        v20 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 1232))(a2);
        v15.n128_f64[0] = WebCore::AXObjectCache::childrenChanged(v14, v20);
      }
    }
    v21 = *((_QWORD *)a2 + 1);
    if (__ldaxr((unsigned __int8 *)v21))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v21))
    {
      goto LABEL_35;
    }
    MEMORY[0x19AEA534C](v21, v15);
LABEL_35:
    ++*(_QWORD *)(v21 + 8);
    v23 = __ldxr((unsigned __int8 *)v21);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v21))
        goto LABEL_40;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
LABEL_40:
    v24 = 0;
    v25 = 1;
    v26 = a2;
    while (1)
    {
      v27 = v26;
      v28 = v24;
      if ((v25 & 1) != 0)
        (*(void (**)(WebCore::AccessibilityObject *, __n128))(*(_QWORD *)v26 + 3088))(v26, v15);
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *, __n128))(*(_QWORD *)v26 + 2232))(&v58, v26, v15);
      v30 = v58;
      if (v58)
      {
        if ((*((_BYTE *)v58 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v58 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v58, v29);
          v30 = v56;
        }
      }
      v56 = v30;
      IsEnabled = WebCore::AXCoreObject::liveRegionStatusIsEnabled((uint64_t *)&v56);
      v33 = v56;
      v56 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v31);
        else
          *(_DWORD *)v33 -= 2;
      }
      v34 = v58;
      v58 = 0;
      if (!v34)
        goto LABEL_52;
      if (*(_DWORD *)v34 != 2)
        break;
      WTF::StringImpl::destroy(v34, v31);
      if (IsEnabled)
        goto LABEL_53;
LABEL_54:
      if ((*(unsigned int (**)(WebCore::AXObjectCache *))(*(_QWORD *)v27 + 480))(v27))
      {
        v35 = (*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v27 + 1712))(v27);
        if (!v35)
        {
          WebCore::AXObjectCache::postNotification((WTF **)this, v27, 0, 57, 0);
LABEL_108:
          v25 = 0;
          goto LABEL_58;
        }
        v36 = v35;
        *(_DWORD *)(v35 + 24) += 2;
        WebCore::AXObjectCache::postNotification((WTF **)this, v27, v35, 57, 0);
        if (*(_DWORD *)(v36 + 24) == 2)
        {
          if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v36);
          goto LABEL_108;
        }
        v25 = 0;
        *(_DWORD *)(v36 + 24) -= 2;
      }
LABEL_58:
      if (((*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v27 + 2712))(v27) & 1) != 0
        || ((*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AXObjectCache *, uint64_t))(*(_QWORD *)v27 + 984))(&v56, v27, 16), v37 = v57, WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v38), v37))
      {
        WebCore::AXObjectCache::handleLabelChanged((uint64_t **)this, v27);
      }
      v39 = (*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v27 + 840))(v27);
      if (v39 && (*(_WORD *)(v39 + 28) & 8) != 0)
      {
        v41 = *(_DWORD *)(v39 + 24);
        *(_DWORD *)(v39 + 24) = v41 + 2;
        v42 = *(_QWORD *)(v39 + 96);
        if (v42 == WebCore::HTMLNames::captionTag)
          v40 = 1;
        else
          v40 = *(_QWORD *)(v42 + 24) == *(_QWORD *)(WebCore::HTMLNames::captionTag + 24)
             && *(_QWORD *)(v42 + 32) == *(_QWORD *)(WebCore::HTMLNames::captionTag + 32);
        if (v41)
        {
          *(_DWORD *)(v39 + 24) = v41;
        }
        else if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v39);
        }
      }
      else
      {
        v40 = 0;
      }
      v24 = v40 | v24;
      if (!v40 && ((v28 ^ 1) & 1) == 0)
      {
        v24 = v28;
        if ((*(unsigned int (**)(WebCore::AXObjectCache *))(*(_QWORD *)v27 + 176))(v27))
        {
          WebCore::AXObjectCache::postNotification((WTF **)this, v27, 0, 83, 0);
          v24 = 0;
        }
      }
      v43 = (*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v27 + 2944))(v27);
      v26 = (WebCore::AccessibilityObject *)v43;
      if (!v43)
        goto LABEL_83;
      v45 = *(_QWORD *)(v43 + 8);
      if (__ldaxr((unsigned __int8 *)v45))
      {
        __clrex();
LABEL_77:
        MEMORY[0x19AEA534C](v45);
        goto LABEL_78;
      }
      if (__stxr(1u, (unsigned __int8 *)v45))
        goto LABEL_77;
LABEL_78:
      ++*(_QWORD *)(v45 + 8);
      v47 = __ldxr((unsigned __int8 *)v45);
      if (v47 != 1)
      {
        __clrex();
LABEL_82:
        WTF::Lock::unlockSlow((WTF::Lock *)v45);
        goto LABEL_83;
      }
      if (__stlxr(0, (unsigned __int8 *)v45))
        goto LABEL_82;
LABEL_83:
      v48 = *((_QWORD *)v27 + 1);
      if (__ldaxr((unsigned __int8 *)v48))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v48))
      {
        goto LABEL_87;
      }
      MEMORY[0x19AEA534C](v48);
LABEL_87:
      v50 = *(_QWORD *)(v48 + 8);
      v51 = v50 - 1;
      *(_QWORD *)(v48 + 8) = v50 - 1;
      if (v50 == 1)
      {
        v55 = *(_QWORD *)(v48 + 16);
        v52 = *(_QWORD *)(v48 + 24);
        *(_QWORD *)(v48 + 24) = 0;
        v53 = v55 != 0;
      }
      else
      {
        v52 = 0;
        v53 = 1;
      }
      v54 = __ldxr((unsigned __int8 *)v48);
      if (v54 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v48))
        {
          if (!v51)
            goto LABEL_95;
          goto LABEL_99;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v48);
      if (!v51)
      {
LABEL_95:
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
        if (!v53)
          WTF::fastFree((WTF *)v48, v44);
      }
LABEL_99:
      if (!v26)
      {
        result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 160))(a2);
        if ((result & 1) != 0)
          return (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 3056))(a2);
        return result;
      }
    }
    *(_DWORD *)v34 -= 2;
LABEL_52:
    if (!IsEnabled)
      goto LABEL_54;
LABEL_53:
    WebCore::AXObjectCache::postLiveRegionChangeNotification(this, v27);
    goto LABEL_54;
  }
  return result;
}

void WebCore::AXObjectCache::handleLabelChanged(uint64_t **this, WebCore::AccessibilityObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WebCore::AXObjectCache **v7;
  uint64_t v8;
  WebCore::Node *v9;
  const WebCore::TreeScope **v10;
  WTF::String *v11;
  __n128 v12;
  WebCore::AXObjectCache *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::AXObjectCache **v16;
  unsigned int v17;

  if (a2)
  {
    v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 832))(a2);
    if (v4
      && (v5 = v4, (*(_WORD *)(v4 + 28) & 0x10) != 0)
      && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
    {
      *(_DWORD *)(v4 + 24) += 2;
      WebCore::AXObjectCache::removeRelation(this, (WebCore::Node *)v4, 16);
      WebCore::AXObjectCache::addLabelForRelation((uint64_t *)this, (WebCore::Element *)v5);
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(WebCore::AXObjectCache ***__return_ptr, WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)a2 + 984))(&v16, a2, 16);
      if (v17)
      {
        v7 = v16;
        v8 = 8 * v17;
        do
        {
          v9 = (WebCore::Node *)(*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)*v7 + 832))(*v7);
          if (v9)
          {
            v10 = (const WebCore::TreeScope **)v9;
            *((_DWORD *)v9 + 6) += 2;
            WebCore::AXObjectCache::removeRelation(this, v9, 15);
            WebCore::AXObjectCache::addRelation((WebCore::AXObjectCache *)this, v10, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelledbyAttr, v11, v12);
            if (*((_DWORD *)v10 + 6) == 2)
            {
              if ((*((_WORD *)v10 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v10);
            }
            else
            {
              *((_DWORD *)v10 + 6) -= 2;
            }
          }
          v13 = *v7;
          if (*v7 && ((*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v13 + 48))(*v7) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1955D85ECLL);
          }
          v14 = this[3][1];
          *(_DWORD *)(v14 + 24) += 2;
          WebCore::AXObjectCache::postNotification((WTF **)this, v13, v14, 57, 0);
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v6);
    }
    v15 = this[3][1];
    *(_DWORD *)(v15 + 24) += 2;
    WebCore::AXObjectCache::postNotification((WTF **)this, a2, v15, 32, 0);
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
}

uint64_t WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Node>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  void *v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;

  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v7;
  if (v7 > v6)
  {
    v28 = *(WTF **)(a1 + 8);
    if (v28)
    {
      do
      {
        v29 = (WTF *)*((_QWORD *)v28 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v28 + 8))
        {
          v33 = (WTF *)*((_QWORD *)v28 + 2);
          WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)a1, (void *)a1, v28);
          v29 = v33;
        }
        v28 = v29;
      }
      while (v29);
    }
    *(_DWORD *)(a1 + 24) = 0;
    v30 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      LODWORD(v30) = *(_DWORD *)(v30 - 12);
      if (v30 > 0x7FFFFFFE)
        LODWORD(v30) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 28) = 2 * v30;
  }
  if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v20 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 8) = a2;
    *(_BYTE *)(v20 + 32) = 0;
    v22 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v22 & 0xFFFF000000000000 | v20;
    v23 = v22 & 0xFFFFFFFFFFFFLL;
    if ((v22 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v24 = __ldaxr((unsigned int *)v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unsigned int *)v23));
      if (!v25)
      {
        atomic_store(1u, (unsigned int *)v23);
        v26 = *(unsigned int *)(v23 + 28);
        if ((_DWORD)v26)
        {
          v35 = v23;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v26));
          v23 = v35;
        }
        v27 = *(WTF **)(v23 + 16);
        if (v27)
        {
          *(_QWORD *)(v23 + 16) = 0;
          *(_DWORD *)(v23 + 24) = 0;
          v34 = v23;
          WTF::fastFree(v27, v21);
          v23 = v34;
        }
        WTF::fastFree((WTF *)v23, v21);
      }
    }
  }
  v8 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL;
  do
    v9 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v9 + 1, (unsigned int *)v8));
  do
    v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  v36 = (WTF *)v8;
  result = (uint64_t)WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::add((uint64_t *)a1, (uint64_t *)&v36, a3);
  v13 = v36;
  v36 = 0;
  if (v13)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v13);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v13));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *((unsigned int *)v13 + 7);
      if ((_DWORD)v18)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v13 + 2), (WTF::StringImpl *)(*((_QWORD *)v13 + 2) + 32 * v18));
      v19 = (WTF *)*((_QWORD *)v13 + 2);
      if (v19)
      {
        *((_QWORD *)v13 + 2) = 0;
        *((_DWORD *)v13 + 6) = 0;
        WTF::fastFree(v19, v12);
      }
      result = WTF::fastFree(v13, v12);
    }
  }
  if (v8)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v8);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v8));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v8);
      v31 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v31)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v31));
      v32 = *(WTF **)(v8 + 16);
      if (v32)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        WTF::fastFree(v32, v12);
      }
      return WTF::fastFree((WTF *)v8, v12);
    }
  }
  return result;
}

double WebCore::AXObjectCache::deferModalChange(WebCore::AXObjectCache *this, WebCore::Element *a2)
{
  WTF::MonotonicTime *v4;
  WebCore::Node *v5;
  WTF::MonotonicTime *v6;
  uint64_t v7;
  int v9;
  void *v10;
  WTF::MonotonicTime *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  double v19;
  double result;
  uint64_t v21;
  WTF::MonotonicTime *v22;
  uint64_t *v23[3];

  v4 = (WTF::MonotonicTime *)WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>((uint64_t)this + 616, a2, (uint64_t)v23);
  v5 = (WebCore::Node *)*((_QWORD *)a2 + 4);
  if (!v5)
    goto LABEL_29;
  v4 = (WTF::MonotonicTime *)WebCore::AXObjectCache::get(this, v5);
  if (!v4)
    goto LABEL_29;
  v6 = v4;
  v7 = *((_QWORD *)v4 + 1);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_7:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v22 = v6;
  v4 = (WTF::MonotonicTime *)WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add(v23, (uint64_t *)this + 70, &v22);
  v11 = v22;
  v22 = 0;
  if (!v11)
    goto LABEL_29;
  v12 = *((_QWORD *)v11 + 1);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_17;
  }
  v4 = (WTF::MonotonicTime *)MEMORY[0x19AEA534C](v12);
LABEL_17:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v21 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v21 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
    {
      if (v15)
        goto LABEL_29;
      goto LABEL_25;
    }
  }
  else
  {
    __clrex();
  }
  v4 = (WTF::MonotonicTime *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
  if (v15)
    goto LABEL_29;
LABEL_25:
  if (v16)
    v4 = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v17)
    v4 = (WTF::MonotonicTime *)WTF::fastFree((WTF *)v12, v10);
LABEL_29:
  if ((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    *((_QWORD *)this + 49) = 0;
    WTF::MonotonicTime::now(v4);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 368, v19 + 0.0);
  }
  return result;
}

double WebCore::AXObjectCache::childrenChanged(WebCore::AXObjectCache *this, WebCore::Node *a2, WebCore::Node *a3)
{
  double result;
  WTF::MonotonicTime *isModalElement;
  WebCore::Element *v7;
  double v8;
  _BYTE v9[24];

  if (a2)
    a2 = (WebCore::Node *)WebCore::AXObjectCache::get(this, a2);
  result = WebCore::AXObjectCache::childrenChanged(this, a2);
  if (a3)
  {
    isModalElement = (WTF::MonotonicTime *)WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Node>((uint64_t)this + 584, (uint64_t)a3, (uint64_t)v9);
    if ((*((_WORD *)a3 + 14) & 8) != 0)
    {
      isModalElement = (WTF::MonotonicTime *)WebCore::AXObjectCache::isModalElement(a3, v7);
      if ((_DWORD)isModalElement)
        WebCore::AXObjectCache::deferModalChange(this, a3);
    }
    if ((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) == 0
      || (result = *(double *)((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
    {
      *((_QWORD *)this + 49) = 0;
      WTF::MonotonicTime::now(isModalElement);
      WebCore::TimerBase::setNextFireTime((uint64_t)this + 368, v8 + 0.0);
    }
  }
  return result;
}

double WebCore::AXObjectCache::childrenChanged(WebCore::AXObjectCache *this, WebCore::RenderObject *a2, WebCore::RenderObject *a3)
{
  WebCore::AccessibilityObject *v5;
  double result;
  WebCore::AXObjectCache *v7;
  WTF::MonotonicTime *isModalElement;
  WebCore::Element *v9;
  double v10;
  _BYTE v11[24];

  if (a2)
  {
    v5 = (WebCore::AccessibilityObject *)WebCore::AXObjectCache::get(this, a2);
    result = WebCore::AXObjectCache::childrenChanged(this, v5);
    if (a3)
    {
      if ((*((_BYTE *)a3 + 45) & 1) == 0)
      {
        v7 = *(WebCore::AXObjectCache **)(*((_QWORD *)a3 + 3) + 8);
        if (v7)
        {
          isModalElement = (WTF::MonotonicTime *)WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Node>((uint64_t)this + 584, (uint64_t)v7, (uint64_t)v11);
          if ((*((_WORD *)v7 + 14) & 8) != 0)
          {
            isModalElement = (WTF::MonotonicTime *)WebCore::AXObjectCache::isModalElement(v7, v9);
            if ((_DWORD)isModalElement)
              WebCore::AXObjectCache::deferModalChange(this, v7);
          }
          if ((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) == 0
            || (result = *(double *)((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
          {
            *((_QWORD *)this + 49) = 0;
            WTF::MonotonicTime::now(isModalElement);
            WebCore::TimerBase::setNextFireTime((uint64_t)this + 368, v10 + 0.0);
          }
        }
      }
    }
  }
  return result;
}

void WebCore::AXObjectCache::valueChanged(WebCore::AXObjectCache *this, WebCore::Element *a2)
{
  WebCore::AXObjectCache::postNotification(this, a2, 57, 0);
}

void WebCore::AXObjectCache::postNotification(WebCore::AXObjectCache *this, WebCore::Node *a2, int a3, int a4)
{
  WebCore::Node *v6;
  WTF *v8;
  uint64_t v9;
  WebCore::AXObjectCache *v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  void *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;

  if (!a2)
    return;
  v6 = a2;
  v8 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
  {
    if (*(_QWORD *)v8)
      WTF::fastFree((WTF *)(*(_QWORD *)v8 - 16), a2);
    WTF::fastFree(v8, a2);
  }
  while (1)
  {
    v9 = WebCore::AXObjectCache::get(this, v6);
    if (v9)
      break;
    v6 = (WebCore::Node *)*((_QWORD *)v6 + 4);
    if (!v6)
      return;
  }
  v10 = (WebCore::AXObjectCache *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_13:
  ++*(_QWORD *)(v11 + 8);
  v13 = __ldxr((unsigned __int8 *)v11);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
  v14 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 8);
  *(_DWORD *)(v14 + 24) += 2;
  v16.n128_f64[0] = WebCore::AXObjectCache::postNotification((WTF **)this, v10, v14, a3, a4);
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v14);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
  v17 = *((_QWORD *)v10 + 1);
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEA534C](v17, v16);
LABEL_24:
  v19 = *(_QWORD *)(v17 + 8);
  v20 = v19 - 1;
  *(_QWORD *)(v17 + 8) = v19 - 1;
  if (v19 == 1)
  {
    v24 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v17 + 24) = 0;
    v22 = v24 != 0;
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  v23 = __ldxr((unsigned __int8 *)v17);
  if (v23 != 1)
  {
    __clrex();
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      return;
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
    goto LABEL_31;
  if (v20)
    return;
LABEL_32:
  if (v21)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v21 + 8))(v21, v16);
  if (!v22)
    WTF::fastFree((WTF *)v17, v15);
}

void WebCore::AXObjectCache::postNotification(WebCore::AXObjectCache *this, WebCore::RenderObject *a2, int a3, int a4)
{
  WebCore::RenderObject *v6;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::AXObjectCache *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  void *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;

  if (!a2)
    return;
  v6 = a2;
  v8 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
  {
    if (*(_QWORD *)v8)
      WTF::fastFree((WTF *)(*(_QWORD *)v8 - 16), a2);
    WTF::fastFree(v8, a2);
  }
  while (1)
  {
    v9 = WebCore::AXObjectCache::get(this, v6);
    if (v9)
      break;
    v10 = *((_QWORD *)v6 + 4);
    if (v10)
    {
      v6 = *(WebCore::RenderObject **)(v10 + 8);
      if (v6)
        continue;
    }
    return;
  }
  v11 = (WebCore::AXObjectCache *)v9;
  v12 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_14:
  ++*(_QWORD *)(v12 + 8);
  v14 = __ldxr((unsigned __int8 *)v12);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 8) + 40) + 8);
  *(_DWORD *)(v15 + 24) += 2;
  v17.n128_f64[0] = WebCore::AXObjectCache::postNotification((WTF **)this, v11, v15, a3, a4);
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  v18 = *((_QWORD *)v11 + 1);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_25;
  }
  MEMORY[0x19AEA534C](v18, v17);
LABEL_25:
  v20 = *(_QWORD *)(v18 + 8);
  v21 = v20 - 1;
  *(_QWORD *)(v18 + 8) = v20 - 1;
  if (v20 == 1)
  {
    v25 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v23 = v25 != 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = __ldxr((unsigned __int8 *)v18);
  if (v24 != 1)
  {
    __clrex();
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
    if (v21)
      return;
    goto LABEL_33;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
    goto LABEL_32;
  if (v21)
    return;
LABEL_33:
  if (v22)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v22 + 8))(v22, v17);
  if (!v23)
    WTF::fastFree((WTF *)v18, v16);
}

double WebCore::AXObjectCache::postNotification(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  double v24;
  double result;
  uint64_t v26;
  _QWORD *v27;
  int v28;

  v5 = a1;
  v6 = *(WTF **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
  {
    if (*(_QWORD *)v6)
      WTF::fastFree((WTF *)(*(_QWORD *)v6 - 16), a2);
    a1 = WTF::fastFree(v6, a2);
  }
  v7 = a2[1];
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_9;
  }
  a1 = MEMORY[0x19AEA534C](v7);
LABEL_9:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_13:
    a1 = WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v27 = a2;
  v28 = a3;
  v10 = *(unsigned int *)(v5 + 172);
  if ((_DWORD)v10 != *(_DWORD *)(v5 + 168))
  {
    v18 = *(_QWORD *)(v5 + 160) + 16 * v10;
    *(_QWORD *)v18 = a2;
    *(_DWORD *)(v18 + 8) = a3;
    *(_DWORD *)(v5 + 172) = v10 + 1;
    goto LABEL_33;
  }
  a1 = (uint64_t)WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 160), v10 + 1, (unint64_t)&v27);
  v12 = *(unsigned int *)(v5 + 172);
  v13 = *(_QWORD *)(v5 + 160) + 16 * v12;
  v14 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)v13 = v14;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(a1 + 8);
  v15 = v27;
  *(_DWORD *)(v5 + 172) = v12 + 1;
  v27 = 0;
  if (v15)
  {
    v16 = v15[1];
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_21;
    }
    a1 = MEMORY[0x19AEA534C](v16);
LABEL_21:
    v19 = *(_QWORD *)(v16 + 8);
    v20 = v19 - 1;
    *(_QWORD *)(v16 + 8) = v19 - 1;
    if (v19 == 1)
    {
      v26 = *(_QWORD *)(v16 + 16);
      v21 = *(_QWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 24) = 0;
      v22 = v26 != 0;
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
    v23 = __ldxr((unsigned __int8 *)v16);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
        if (v20)
          goto LABEL_33;
        goto LABEL_29;
      }
    }
    else
    {
      __clrex();
    }
    a1 = WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (v20)
      goto LABEL_33;
LABEL_29:
    if (v21)
      a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if (!v22)
      a1 = WTF::fastFree((WTF *)v16, v11);
  }
LABEL_33:
  if ((*(_QWORD *)(v5 + 136) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*(_QWORD *)(v5 + 136) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    *(_QWORD *)(v5 + 128) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    WebCore::TimerBase::setNextFireTime(v5 + 104, v24 + 0.0);
  }
  return result;
}

void WebCore::AXObjectCache::checkedStateChanged(WebCore::AXObjectCache *this, WebCore::Node *a2)
{
  WebCore::AXObjectCache::postNotification(this, a2, 10, 0);
}

void WebCore::AXObjectCache::handleMenuItemSelected(WebCore::AXObjectCache *this, WebCore::Node *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WebCore::AXObjectCache *v13;
  uint64_t v14;

  if (a2 && (*((_WORD *)a2 + 14) & 8) != 0)
  {
    *((_DWORD *)a2 + 6) += 2;
    if ((WebCore::nodeHasRole((uint64_t)a2, (int16x8_t *)"menuitem", 0x100000008) & 1) == 0
      && (WebCore::nodeHasRole((uint64_t)a2, (int16x8_t *)"menuitemradio", 0x10000000DLL) & 1) == 0
      && !WebCore::nodeHasRole((uint64_t)a2, (int16x8_t *)"menuitemcheckbox", 0x100000010))
    {
      goto LABEL_20;
    }
    if ((*((_BYTE *)a2 + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused(a2))
    {
LABEL_34:
      v13 = (WebCore::AXObjectCache *)WebCore::AXObjectCache::getOrCreate(this, a2, 0);
      v14 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      *(_DWORD *)(v14 + 24) += 2;
      WebCore::AXObjectCache::postNotification((WTF **)this, v13, v14, 65, 0);
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v14);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
      goto LABEL_20;
    }
    v4 = *((_QWORD *)a2 + 13);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 4);
      if ((v5 & 1) != 0)
      {
        v6 = *(_QWORD *)(v4 + 40);
        LODWORD(v7) = *(_DWORD *)(v4 + 52);
        if ((_DWORD)v7)
        {
LABEL_10:
          v7 = v7;
          v8 = (uint64_t *)(v6 + 8);
          while (1)
          {
            v9 = *(v8 - 1);
            if (v9 == WebCore::HTMLNames::aria_selectedAttr
              || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_selectedAttr + 24)
              && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_selectedAttr + 32))
            {
              break;
            }
            v8 += 2;
            if (!--v7)
            {
              v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_19:
          v10 = *v8;
          if (!*v8 || *(_DWORD *)(v10 + 4) != 4)
            goto LABEL_20;
          v11 = *(_QWORD *)(v10 + 8);
          if ((*(_BYTE *)(v10 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v11 & 0xDF) != 0x54
              || (*(_BYTE *)(v11 + 1) & 0xDF) != 0x52
              || (*(_BYTE *)(v11 + 2) & 0xDF) != 0x55)
            {
              goto LABEL_20;
            }
            v12 = *(unsigned __int8 *)(v11 + 3);
          }
          else
          {
            if ((*(_WORD *)v11 & 0xFFDF) != 0x54
              || (*(_WORD *)(v11 + 2) & 0xFFDF) != 0x52
              || (*(_WORD *)(v11 + 4) & 0xFFDF) != 0x55)
            {
              goto LABEL_20;
            }
            v12 = *(unsigned __int16 *)(v11 + 6);
          }
          if ((v12 & 0xFFFFFFDF) == 0x45)
            goto LABEL_34;
LABEL_20:
          if (*((_DWORD *)a2 + 6) == 2)
          {
            if ((*((_WORD *)a2 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(a2);
          }
          else
          {
            *((_DWORD *)a2 + 6) -= 2;
          }
          return;
        }
      }
      else
      {
        v6 = v4 + 32;
        LODWORD(v7) = v5 >> 5;
        if ((_DWORD)v7)
          goto LABEL_10;
      }
    }
    v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_19;
  }
}

WebCore::AXObjectCache *WebCore::AXObjectCache::handleTabPanelSelected(WebCore::AXObjectCache *this, WebCore::Node *a2, WebCore::Node *a3)
{
  WebCore::AXObjectCache *v4;
  WebCore::AXObjectCache *v6;
  uint64_t v7;
  WebCore::AXObjectCache *v9;
  char v10;
  int v11;
  uint64_t v12;
  int v14;
  void *v15;
  WebCore::AXObjectCache **v16;
  uint64_t v17;
  WebCore::AXObjectCache *v18;
  WebCore::AXObjectCache *v19;
  uint64_t v20;
  WebCore::AXObjectCache *v21;
  uint64_t v22;
  int v24;
  WebCore::AXObjectCache *v25;
  uint64_t v26;
  int v28;
  void *v29;
  WebCore::AXObjectCache **v30;
  uint64_t v31;
  WebCore::AXObjectCache *v32;
  WebCore::AXObjectCache *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WebCore::AXObjectCache **v67;
  unsigned int v68;

  v4 = this;
  if (!a2)
  {
    v6 = 0;
LABEL_6:
    v9 = 0;
    v10 = 1;
    if (!a3)
      goto LABEL_114;
LABEL_43:
    this = (WebCore::AXObjectCache *)WebCore::AXObjectCache::get(v4, a3);
    if (!this)
      goto LABEL_114;
    v21 = this;
    v22 = *((_QWORD *)this + 1);
    if (__ldaxr((unsigned __int8 *)v22))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v22))
    {
      goto LABEL_48;
    }
    MEMORY[0x19AEA534C](v22);
LABEL_48:
    ++*(_QWORD *)(v22 + 8);
    v24 = __ldxr((unsigned __int8 *)v22);
    if (v24 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v22))
      {
LABEL_53:
        this = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v21 + 1232))(v21);
        if (!this)
          goto LABEL_98;
        v25 = this;
        while (1)
        {
          this = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v25 + 1456))(v25);
          if ((_DWORD)this == 120)
            break;
          this = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v25 + 1232))(v25);
          v25 = this;
          if (!this)
            goto LABEL_98;
        }
        v26 = *((_QWORD *)v25 + 1);
        if (__ldaxr((unsigned __int8 *)v26))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v26))
        {
          goto LABEL_62;
        }
        this = (WebCore::AXObjectCache *)MEMORY[0x19AEA534C](v26);
LABEL_62:
        ++*(_QWORD *)(v26 + 8);
        v28 = __ldxr((unsigned __int8 *)v26);
        if (v28 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v26))
          {
LABEL_67:
            if (v9 != v25)
            {
              (*(void (**)(WebCore::AXObjectCache ***__return_ptr, WebCore::AXObjectCache *, uint64_t))(*(_QWORD *)v25 + 984))(&v67, v25, 3);
              if (v68)
              {
                v30 = v67;
                v31 = 8 * v68;
                do
                {
                  v32 = *v30;
                  if (*v30)
                  {
                    if ((*(unsigned int (**)(WebCore::AXObjectCache *))(*(_QWORD *)v32 + 48))(*v30))
                      v33 = v32;
                    else
                      v33 = 0;
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v34 = *(_QWORD *)(*((_QWORD *)a3 + 5) + 8);
                  *(_DWORD *)(v34 + 24) += 2;
                  WebCore::AXObjectCache::postNotification((WTF **)v4, v33, v34, 50, 0);
                  if (*(_DWORD *)(v34 + 24) == 2)
                  {
                    if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v34);
                  }
                  else
                  {
                    *(_DWORD *)(v34 + 24) -= 2;
                  }
                  ++v30;
                  v31 -= 8;
                }
                while (v31);
              }
              this = (WebCore::AXObjectCache *)WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v29);
            }
            v35 = *((_QWORD *)v25 + 1);
            if (__ldaxr((unsigned __int8 *)v35))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v35))
            {
              goto LABEL_86;
            }
            this = (WebCore::AXObjectCache *)MEMORY[0x19AEA534C](v35);
LABEL_86:
            v37 = *(_QWORD *)(v35 + 8);
            v38 = v37 - 1;
            *(_QWORD *)(v35 + 8) = v37 - 1;
            if (v37 == 1)
            {
              v66 = *(_QWORD *)(v35 + 16);
              v39 = *(_QWORD *)(v35 + 24);
              *(_QWORD *)(v35 + 24) = 0;
              v40 = v66 != 0;
            }
            else
            {
              v39 = 0;
              v40 = 1;
            }
            v41 = __ldxr((unsigned __int8 *)v35);
            if (v41 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v35))
              {
                if (v38)
                  goto LABEL_98;
LABEL_94:
                if (v39)
                  this = (WebCore::AXObjectCache *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
                if (!v40)
                  this = (WebCore::AXObjectCache *)WTF::fastFree((WTF *)v35, a2);
LABEL_98:
                v42 = *((_QWORD *)v21 + 1);
                if (__ldaxr((unsigned __int8 *)v42))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v42))
                {
                  goto LABEL_102;
                }
                this = (WebCore::AXObjectCache *)MEMORY[0x19AEA534C](v42);
LABEL_102:
                v44 = *(_QWORD *)(v42 + 8);
                v45 = v44 - 1;
                *(_QWORD *)(v42 + 8) = v44 - 1;
                if (v44 == 1)
                {
                  v65 = *(_QWORD *)(v42 + 16);
                  v46 = *(_QWORD *)(v42 + 24);
                  *(_QWORD *)(v42 + 24) = 0;
                  v47 = v65 != 0;
                }
                else
                {
                  v46 = 0;
                  v47 = 1;
                }
                v48 = __ldxr((unsigned __int8 *)v42);
                if (v48 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v42))
                  {
                    if (v45)
                      goto LABEL_114;
LABEL_110:
                    if (v46)
                      this = (WebCore::AXObjectCache *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
                    if (!v47)
                      this = (WebCore::AXObjectCache *)WTF::fastFree((WTF *)v42, a2);
                    goto LABEL_114;
                  }
                }
                else
                {
                  __clrex();
                }
                this = (WebCore::AXObjectCache *)WTF::Lock::unlockSlow((WTF::Lock *)v42);
                if (v45)
                  goto LABEL_114;
                goto LABEL_110;
              }
            }
            else
            {
              __clrex();
            }
            this = (WebCore::AXObjectCache *)WTF::Lock::unlockSlow((WTF::Lock *)v35);
            if (v38)
              goto LABEL_98;
            goto LABEL_94;
          }
        }
        else
        {
          __clrex();
        }
        this = (WebCore::AXObjectCache *)WTF::Lock::unlockSlow((WTF::Lock *)v26);
        goto LABEL_67;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    goto LABEL_53;
  }
  this = (WebCore::AXObjectCache *)WebCore::AXObjectCache::get(this, a2);
  v6 = this;
  if (!this)
    goto LABEL_6;
  v7 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_10:
  ++*(_QWORD *)(v7 + 8);
  v11 = __ldxr((unsigned __int8 *)v7);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_15:
  for (this = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v6 + 1232))(v6);
        ;
        this = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v9 + 1232))(v9))
  {
    v9 = this;
    if (!this)
      break;
    if ((*(unsigned int (**)(WebCore::AXObjectCache *))(*(_QWORD *)this + 1456))(this) == 120)
    {
      v12 = *((_QWORD *)v9 + 1);
      if (__ldaxr((unsigned __int8 *)v12))
      {
        __clrex();
        goto LABEL_22;
      }
      if (__stxr(1u, (unsigned __int8 *)v12))
LABEL_22:
        MEMORY[0x19AEA534C](v12);
      ++*(_QWORD *)(v12 + 8);
      v14 = __ldxr((unsigned __int8 *)v12);
      if (v14 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v12))
          goto LABEL_28;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_28:
      (*(void (**)(WebCore::AXObjectCache ***__return_ptr, WebCore::AXObjectCache *, uint64_t))(*(_QWORD *)v9 + 984))(&v67, v9, 3);
      if (v68)
      {
        v16 = v67;
        v17 = 8 * v68;
        do
        {
          v18 = *v16;
          if (*v16)
          {
            if ((*(unsigned int (**)(WebCore::AXObjectCache *))(*(_QWORD *)v18 + 48))(*v16))
              v19 = v18;
            else
              v19 = 0;
          }
          else
          {
            v19 = 0;
          }
          v20 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
          *(_DWORD *)(v20 + 24) += 2;
          WebCore::AXObjectCache::postNotification((WTF **)v4, v19, v20, 50, 0);
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
          ++v16;
          v17 -= 8;
        }
        while (v17);
      }
      this = (WebCore::AXObjectCache *)WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v15);
      break;
    }
  }
  v10 = 0;
  if (a3)
    goto LABEL_43;
LABEL_114:
  if (!v9)
    goto LABEL_131;
  v49 = *((_QWORD *)v9 + 1);
  if (__ldaxr((unsigned __int8 *)v49))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v49))
  {
    goto LABEL_119;
  }
  this = (WebCore::AXObjectCache *)MEMORY[0x19AEA534C](v49);
LABEL_119:
  v51 = *(_QWORD *)(v49 + 8);
  v52 = v51 - 1;
  *(_QWORD *)(v49 + 8) = v51 - 1;
  if (v51 == 1)
  {
    v63 = *(_QWORD *)(v49 + 16);
    v53 = *(_QWORD *)(v49 + 24);
    *(_QWORD *)(v49 + 24) = 0;
    v54 = v63 != 0;
  }
  else
  {
    v53 = 0;
    v54 = 1;
  }
  v55 = __ldxr((unsigned __int8 *)v49);
  if (v55 != 1)
  {
    __clrex();
LABEL_126:
    this = (WebCore::AXObjectCache *)WTF::Lock::unlockSlow((WTF::Lock *)v49);
    if (v52)
      goto LABEL_131;
    goto LABEL_127;
  }
  if (__stlxr(0, (unsigned __int8 *)v49))
    goto LABEL_126;
  if (v52)
    goto LABEL_131;
LABEL_127:
  if (v53)
    this = (WebCore::AXObjectCache *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  if (!v54)
    this = (WebCore::AXObjectCache *)WTF::fastFree((WTF *)v49, a2);
LABEL_131:
  if ((v10 & 1) != 0)
    return this;
  v56 = *((_QWORD *)v6 + 1);
  if (__ldaxr((unsigned __int8 *)v56))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v56))
  {
    goto LABEL_136;
  }
  this = (WebCore::AXObjectCache *)MEMORY[0x19AEA534C](v56);
LABEL_136:
  v58 = *(_QWORD *)(v56 + 8);
  v59 = v58 - 1;
  *(_QWORD *)(v56 + 8) = v58 - 1;
  if (v58 == 1)
  {
    v64 = *(_QWORD *)(v56 + 16);
    v60 = *(_QWORD *)(v56 + 24);
    *(_QWORD *)(v56 + 24) = 0;
    v61 = v64 != 0;
  }
  else
  {
    v60 = 0;
    v61 = 1;
  }
  v62 = __ldxr((unsigned __int8 *)v56);
  if (v62 != 1)
  {
    __clrex();
LABEL_143:
    this = (WebCore::AXObjectCache *)WTF::Lock::unlockSlow((WTF::Lock *)v56);
    if (v59)
      return this;
    goto LABEL_144;
  }
  if (__stlxr(0, (unsigned __int8 *)v56))
    goto LABEL_143;
  if (v59)
    return this;
LABEL_144:
  if (v60)
    this = (WebCore::AXObjectCache *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  if (!v61)
    return (WebCore::AXObjectCache *)WTF::fastFree((WTF *)v56, a2);
  return this;
}

uint64_t WebCore::AXObjectCache::onPageActivityStateChange(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 48) = a2;
  return result;
}

void WebCore::AXObjectCache::onFocusChange(WebCore::AXObjectCache *this, WebCore::Element *a2, WebCore::Element *a3)
{
  WebCore::Node *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  WebCore::Element *v12;
  uint64_t v13;
  WebCore::Node *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  WebCore::AXObjectCache *v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  void *v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;
  unsigned int *v36;
  int v37;
  int v38;
  int v39;
  WebCore::AccessibilityObject *v41;
  void *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  double v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  unsigned int *v54;
  unsigned int *v55;

  v4 = a2;
  if (!a3)
  {
LABEL_78:
    WebCore::AXObjectCache::updateCurrentModalNode(this, 0);
    WebCore::AXObjectCache::handleMenuItemSelected(this, a3);
    WebCore::AXObjectCache::handleTabPanelSelected(this, v4, a3);
    WebCore::AXObjectCache::postNotification(this, a3, 24, 0);
    return;
  }
  if ((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      goto LABEL_86;
    }
    if ((*(_BYTE *)((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 0xF8) == 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                     + 8);
      if (*(_BYTE *)(v6 + 3362)
        || !*(_BYTE *)(v6 + 3390)
        && (*(_BYTE *)(v6 + 70) & 8) == 0
        && !*(_QWORD *)(v6 + 1560)
        && (v7 = *(_QWORD *)(v6 + 1328), !*(_BYTE *)(v7 + 233))
        && !*(_BYTE *)(v7 + 234))
      {
        if (!*(_BYTE *)(v6 + 3392))
        {
          v8 = *(_QWORD *)(v6 + 528);
          if (!v8)
            goto LABEL_78;
          v9 = *(_QWORD *)(v8 + 8);
          if (!v9)
            goto LABEL_78;
          v10 = *(_QWORD *)(v9 + 288);
          if (!v10 || *(_BYTE *)(v10 + 480) != 2)
            goto LABEL_78;
        }
      }
    }
  }
  else if ((*((_QWORD *)a3 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((*((_QWORD *)a3 + 9) & 0xFFFFFFFFFFFFLL) + 0x30)
      || (a2 = *(WebCore::Element **)((*((_QWORD *)a3 + 9) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0
      && ((v48 = *((_QWORD *)a2 + 2) & 0x1FLL, v48 != 26) ? (v49 = v48 == 18) : (v49 = 1), v49))
    {
      if (!(*(unsigned int (**)(WebCore::Element *))(*(_QWORD *)a3 + 512))(a3))
        goto LABEL_78;
    }
  }
  v11 = (uint64_t *)((char *)this + 696);
  if (*((_BYTE *)this + 712))
  {
    v12 = (WebCore::Element *)*v11;
    if (*v11)
      v12 = (WebCore::Element *)*((_QWORD *)v12 + 1);
    if (v12 == a3)
    {
      std::pair<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~pair((uint64_t *)this + 87, a2);
      *((_BYTE *)this + 712) = 0;
      return;
    }
    v13 = *((_QWORD *)this + 88);
    if (v13)
    {
      v14 = *(WebCore::Node **)(v13 + 8);
      if (v14)
      {
        v15 = WebCore::AXObjectCache::get(this, v14);
        if (v15)
        {
          if ((v16 = (unsigned __int8 *)v15,
                v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 1488))(v15),
                (v18 = (WebCore::AXObjectCache *)v17) != 0)
            && *(_BYTE *)(v17 + 361)
            || ((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v16 + 2896))(v16) & 1) == 0)
          {
            v19 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v16 + 2872))(v16);
          }
          else
          {
            v19 = 1;
          }
          v37 = v16[59];
          v16[59] = v19;
          if (v18)
          {
            v38 = v37 == 1 ? v19 : 1;
            v39 = v37 ? 0 : v19;
            if (v38 != 1 || v39 != 0)
            {
              v41 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v16
                                                                                                 + 1232))(v16);
              WebCore::AXObjectCache::childrenChanged(v18, v41);
            }
          }
        }
      }
    }
    v36 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
    if (v36)
    {
      do
        v43 = __ldaxr(v36);
      while (__stlxr(v43 + 1, v36));
    }
    if (*((_BYTE *)this + 712))
    {
      v44 = *((_QWORD *)this + 88);
      *((_QWORD *)this + 88) = v36;
      if (v44)
      {
        do
        {
          v45 = __ldaxr((unsigned int *)v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, (unsigned int *)v44));
        if (!v46)
        {
          atomic_store(1u, (unsigned int *)v44);
          v50 = *(unsigned int *)(v44 + 28);
          if ((_DWORD)v50)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v44 + 16), (WTF::StringImpl *)(*(_QWORD *)(v44 + 16) + 32 * v50));
          v51 = *(WTF **)(v44 + 16);
          if (v51)
          {
            *(_QWORD *)(v44 + 16) = 0;
            *(_DWORD *)(v44 + 24) = 0;
            WTF::fastFree(v51, v42);
          }
          v36 = (unsigned int *)WTF::fastFree((WTF *)v44, v42);
        }
      }
      goto LABEL_70;
    }
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if (v4)
  {
    v20 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v4);
    if (v20)
    {
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
  }
  else
  {
    v20 = 0;
  }
  v54 = v20;
  v22 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
  if (v22)
  {
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 + 1, v22));
  }
  v25 = *((unsigned __int8 *)this + 712);
  v26 = (uint64_t)v54;
  v54 = 0;
  v55 = v22;
  if (v25)
  {
    v27 = (unsigned int *)*v11;
    *v11 = v26;
    if (v27)
    {
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        v52 = v27[7];
        if ((_DWORD)v52)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v27 + 2), (WTF::StringImpl *)(*((_QWORD *)v27 + 2) + 32 * v52));
        v53 = (WTF *)*((_QWORD *)v27 + 2);
        if (v53)
        {
          *((_QWORD *)v27 + 2) = 0;
          v27[6] = 0;
          WTF::fastFree(v53, v23);
        }
        WTF::fastFree((WTF *)v27, v23);
      }
    }
    v30 = v55;
    v55 = 0;
    v31 = *((_QWORD *)this + 88);
    *((_QWORD *)this + 88) = v30;
    if (v31)
    {
      do
      {
        v32 = __ldaxr((unsigned int *)v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, (unsigned int *)v31));
      if (!v33)
      {
        atomic_store(1u, (unsigned int *)v31);
        v34 = *(unsigned int *)(v31 + 28);
        if ((_DWORD)v34)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v31 + 16), (WTF::StringImpl *)(*(_QWORD *)(v31 + 16) + 32 * v34));
        v35 = *(WTF **)(v31 + 16);
        if (v35)
        {
          *(_QWORD *)(v31 + 16) = 0;
          *(_DWORD *)(v31 + 24) = 0;
          WTF::fastFree(v35, v23);
        }
        WTF::fastFree((WTF *)v31, v23);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 87) = v26;
    v55 = 0;
    *((_QWORD *)this + 88) = v22;
    *((_BYTE *)this + 712) = 1;
  }
  v36 = (unsigned int *)std::pair<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~pair((uint64_t *)&v54, v23);
LABEL_70:
  if ((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 0xF8) != 0)
        return;
      goto LABEL_73;
    }
LABEL_87:
    __break(0xC471u);
    JUMPOUT(0x1955D9E2CLL);
  }
LABEL_73:
  if ((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *((_QWORD *)this + 49) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v36);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 368, v47 + 0.0);
  }
}

_QWORD *WebCore::AXObjectCache::onPopoverToggle(WebCore::AXObjectCache *this, const WebCore::HTMLElement *a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v7;
  void *v8;
  WebCore::AXObjectCache **v9;
  uint64_t v10;
  WebCore::AXObjectCache *v11;
  WebCore::AXObjectCache *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  WebCore::AXObjectCache **v23;
  unsigned int v24;

  result = (_QWORD *)WebCore::AXObjectCache::get(this, a2);
  if (!result)
    return result;
  v4 = result;
  v5 = result[1];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  (*(void (**)(WebCore::AXObjectCache ***__return_ptr, _QWORD *, uint64_t))(*v4 + 984))(&v23, v4, 3);
  if (v24)
  {
    v9 = v23;
    v10 = 8 * v24;
    do
    {
      v11 = *v9;
      if (*v9)
      {
        if ((*(unsigned int (**)(WebCore::AXObjectCache *))(*(_QWORD *)v11 + 48))(*v9))
          v12 = v11;
        else
          v12 = 0;
      }
      else
      {
        v12 = 0;
      }
      v13 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      *(_DWORD *)(v13 + 24) += 2;
      WebCore::AXObjectCache::postNotification((WTF **)this, v12, v13, 75, 0);
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13, v8);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  result = (_QWORD *)WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v8);
  v15 = v4[1];
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_28;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v15);
LABEL_28:
  v17 = *(_QWORD *)(v15 + 8);
  v18 = v17 - 1;
  *(_QWORD *)(v15 + 8) = v17 - 1;
  if (v17 == 1)
  {
    v22 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v20 = v22 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v21 = __ldxr((unsigned __int8 *)v15);
  if (v21 != 1)
  {
    __clrex();
LABEL_35:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v18)
      return result;
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
    goto LABEL_35;
  if (v18)
    return result;
LABEL_36:
  if (v19)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (!v20)
    return (_QWORD *)WTF::fastFree((WTF *)v15, v14);
  return result;
}

uint64_t *WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *result;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  WTF *v44;
  unsigned int v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_7ElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v50);
    v45 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    if (*(_QWORD *)a1)
    {
      v45 = *(_DWORD *)(*(_QWORD *)a1 - 12);
      if (v45 > 0x7FFFFFFE)
        v45 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 12) = 2 * v45;
  }
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v32 = 1;
    *(_QWORD *)(v32 + 16) = 0;
    *(_QWORD *)(v32 + 24) = 0;
    *(_QWORD *)(v32 + 8) = a2;
    *(_BYTE *)(v32 + 32) = 0;
    v33 = a2[2];
    a2[2] = v33 & 0xFFFF000000000000 | v32;
    v34 = v33 & 0xFFFFFFFFFFFFLL;
    if ((v33 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v35 = __ldaxr((unsigned int *)v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, (unsigned int *)v34));
      if (!v36)
      {
        atomic_store(1u, (unsigned int *)v34);
        v37 = *(unsigned int *)(v34 + 28);
        if ((_DWORD)v37)
        {
          v49 = v34;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v34 + 16), (WTF::StringImpl *)(*(_QWORD *)(v34 + 16) + 32 * v37));
          v34 = v49;
        }
        v38 = *(WTF **)(v34 + 16);
        if (v38)
        {
          *(_QWORD *)(v34 + 16) = 0;
          *(_DWORD *)(v34 + 24) = 0;
          v48 = v34;
          WTF::fastFree(v38, a2);
          v34 = v48;
        }
        WTF::fastFree((WTF *)v34, a2);
      }
    }
  }
  v8 = a2[2];
  v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 + 1, v9));
  v12 = *(_QWORD *)a1;
  if (*(_QWORD *)a1
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, 8u, 0), (v12 = *(_QWORD *)a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = 0;
  v16 = ((unint64_t)v9 + ~(v8 << 32)) ^ (((unint64_t)v9 + ~(v8 << 32)) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = (v18 >> 31) ^ v18;
  for (i = 1; ; ++i)
  {
    v21 = v19 & v14;
    v22 = (uint64_t *)(v12 + 8 * v21);
    result = (uint64_t *)*v22;
    if (!*v22)
    {
      if (v15)
      {
        *v15 = 0;
        --*(_DWORD *)(*(_QWORD *)a1 - 16);
        *v15 = (uint64_t)v9;
        v22 = v15;
      }
      else
      {
        *v22 = (uint64_t)v9;
      }
      v24 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v25 = *(_DWORD *)(v24 - 12) + 1;
      else
        v25 = 1;
      *(_DWORD *)(v24 - 12) = v25;
      v26 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v27 = *(_DWORD *)(v26 - 12);
      else
        v27 = 0;
      v28 = (*(_DWORD *)(v26 - 16) + v27);
      v29 = *(unsigned int *)(v26 - 4);
      if (v29 > 0x400)
      {
        if (v29 > 2 * v28)
          goto LABEL_21;
      }
      else
      {
        if (3 * v29 > 4 * v28)
          goto LABEL_21;
        if (!(_DWORD)v29)
        {
          v39 = 8;
LABEL_42:
          result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, v39, v22);
          v22 = result;
          v26 = *(_QWORD *)a1;
          if (*(_QWORD *)a1)
            v29 = *(unsigned int *)(v26 - 4);
          else
            v29 = 0;
LABEL_21:
          *(_QWORD *)a3 = v22;
          *(_QWORD *)(a3 + 8) = v26 + 8 * v29;
          *(_BYTE *)(a3 + 16) = 1;
          if (!v9)
            return result;
          goto LABEL_22;
        }
      }
      v39 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
      goto LABEL_42;
    }
    if (result != (uint64_t *)-1)
      break;
    v15 = (uint64_t *)(v12 + 8 * v21);
LABEL_12:
    v19 = i + v21;
  }
  if (result != (uint64_t *)v9)
    goto LABEL_12;
  if ((v13 & 1) != 0)
    v40 = 0;
  else
    v40 = *(unsigned int *)(v12 - 4);
  *(_QWORD *)a3 = v22;
  *(_QWORD *)(a3 + 8) = v12 + 8 * v40;
  *(_BYTE *)(a3 + 16) = 0;
  if (!v9)
    return result;
  do
  {
    v41 = __ldaxr(v9);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v9));
  if (!v42)
  {
    atomic_store(1u, v9);
    v43 = *(unsigned int *)((v8 & 0xFFFFFFFFFFFFLL) + 0x1C);
    if ((_DWORD)v43)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v8 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v43));
    v44 = *(WTF **)((v8 & 0xFFFFFFFFFFFFLL) + 0x10);
    if (v44)
    {
      *(_QWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
      *(_DWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
      WTF::fastFree(v44, a2);
    }
    result = (uint64_t *)WTF::fastFree((WTF *)(v8 & 0xFFFFFFFFFFFFLL), a2);
  }
  do
  {
LABEL_22:
    v30 = __ldaxr(v9);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v9));
  if (!v31)
  {
    atomic_store(1u, v9);
    v46 = *(unsigned int *)((v8 & 0xFFFFFFFFFFFFLL) + 0x1C);
    if ((_DWORD)v46)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v8 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v46));
    v47 = *(WTF **)((v8 & 0xFFFFFFFFFFFFLL) + 0x10);
    if (v47)
    {
      *(_QWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
      *(_DWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
      WTF::fastFree(v47, a2);
    }
    return (uint64_t *)WTF::fastFree((WTF *)v9, a2);
  }
  return result;
}

WebCore::AXObjectCache *WebCore::AXObjectCache::onSelectedChanged(WebCore::AXObjectCache *this, WebCore::Node *a2)
{
  WebCore::AXObjectCache *v4;
  WebCore::Node *v5;
  int v6;
  uint64_t v8;
  WebCore::AXObjectCache *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WebCore::Node *v15;
  uint64_t v16;

  if ((WebCore::nodeHasRole((uint64_t)a2, (int16x8_t *)"gridcell", 0x100000008) & 1) != 0
    || (WebCore::nodeHasRole((uint64_t)a2, (int16x8_t *)"cell", 0x100000004) & 1) != 0
    || (WebCore::nodeHasRole((uint64_t)a2, (int16x8_t *)"columnheader", 0x10000000CLL) & 1) != 0
    || WebCore::nodeHasRole((uint64_t)a2, (int16x8_t *)"rowheader", 0x100000009))
  {
    v4 = this;
    v5 = a2;
    v6 = 49;
LABEL_6:
    WebCore::AXObjectCache::postNotification(v4, v5, v6, 0);
    goto LABEL_7;
  }
  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    v4 = this;
    v5 = a2;
    v6 = 50;
    goto LABEL_6;
  }
  v8 = WebCore::AXObjectCache::getOrCreate(this, a2, 0);
  if (v8)
  {
    v9 = (WebCore::AXObjectCache *)v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1232))(v8);
    if (v10)
    {
      v11 = v10;
      while (1)
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1456))(v11);
        if ((v12 - 19) <= 0x37 && ((1 << (v12 - 19)) & 0xC1800000800001) != 0)
          break;
        if ((v12 - 119) <= 0xB && ((1 << (v12 - 119)) & 0xC01) != 0)
          break;
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1232))(v11);
        if (!v11)
          goto LABEL_7;
      }
      v15 = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 840))(v11);
      WebCore::AXObjectCache::postNotification(this, v15, 48, 0);
      v16 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
      *(_DWORD *)(v16 + 24) += 2;
      WebCore::AXObjectCache::postNotification((WTF **)this, v9, v16, 50, 0);
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
  }
LABEL_7:
  WebCore::AXObjectCache::handleMenuItemSelected(this, a2);
  return WebCore::AXObjectCache::handleTabPanelSelected(this, 0, a2);
}

double WebCore::AXObjectCache::onTitleChange(WebCore::AXObjectCache *this, WebCore::Document *a2)
{
  _QWORD *v3;
  double result;

  v3 = (_QWORD *)WebCore::AXObjectCache::get(this, a2);
  if (v3)
    return WebCore::AXObjectCache::postNotification((uint64_t)this, v3, 83);
  return result;
}

double WebCore::AXObjectCache::onValidityChange(WebCore::AXObjectCache *this, WebCore::Element *a2)
{
  _QWORD *v3;
  double result;

  v3 = (_QWORD *)WebCore::AXObjectCache::get(this, a2);
  if (v3)
    return WebCore::AXObjectCache::postNotification((uint64_t)this, v3, 76);
  return result;
}

void WebCore::AXObjectCache::onTextCompositionChange(WTF **a1, WebCore::Text *a2, unsigned int a3, int a4, _DWORD **a5, uint64_t a6, int a7)
{
  WebCore::AXObjectCache *v14;
  WebCore::AXObjectCache *v15;
  uint64_t v16;
  WebCore::AXObjectCache *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;

  v14 = (WebCore::AXObjectCache *)WebCore::AXObjectCache::getOrCreate((uint64_t)a1, (uint64_t)a2, 0);
  if (v14)
  {
    v15 = v14;
    if (a4)
      WebCore::AccessibilityObject::setLastPresentedTextPrediction(v14, a2, a3, a5, a6, a7);
    v16 = (*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v15 + 2960))(v15);
    if (v16)
      v17 = (WebCore::AXObjectCache *)v16;
    else
      v17 = v15;
    if (!a3)
    {
      v18 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
      *(_DWORD *)(v18 + 24) += 2;
      WebCore::AXObjectCache::postNotification(a1, v17, v18, 54, 0);
      if (*(_DWORD *)(v18 + 24) == 2)
      {
        if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v18, v19);
      }
      else
      {
        *(_DWORD *)(v18 + 24) -= 2;
      }
    }
    if (a4)
    {
      v20 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
      *(_DWORD *)(v20 + 24) += 2;
      WebCore::AXObjectCache::postNotification(a1, v17, v20, 57, 0);
      if (*(_DWORD *)(v20 + 24) == 2)
      {
        if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v20, v21);
      }
      else
      {
        *(_DWORD *)(v20 + 24) -= 2;
      }
    }
    if (a3 == 2)
    {
      v22 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
      *(_DWORD *)(v22 + 24) += 2;
      WebCore::AXObjectCache::postNotification(a1, v17, v22, 55, 0);
      if (*(_DWORD *)(v22 + 24) == 2)
      {
        if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v22, v23);
      }
      else
      {
        *(_DWORD *)(v22 + 24) -= 2;
      }
    }
  }
}

void WebCore::AXObjectCache::postTextStateChangeNotification(WebCore::AXObjectCache *this, id *a2)
{
  id *v2;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Widget *v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef cf;
  _QWORD v12[2];

  v2 = a2;
  v4 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_QWORD *)v4)
      WTF::fastFree((WTF *)(*(_QWORD *)v4 - 16), a2);
    WTF::fastFree(v4, a2);
  }
  if (!v2)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 528);
    if (!v6)
      goto LABEL_19;
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7)
      goto LABEL_19;
    v8 = *(WebCore::Widget **)(v7 + 288);
    if (!v8)
      goto LABEL_19;
    v9 = WebCore::AXObjectCache::getOrCreate(this, v8);
    if (!v9)
      goto LABEL_19;
    v10 = v9;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 1456))(v9) != 99)
      goto LABEL_19;
    v2 = (id *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 3232))(v10);
    if (!v2)
      goto LABEL_19;
    goto LABEL_17;
  }
  if (((*((uint64_t (**)(id *))*v2 + 14))(v2) & 1) == 0
    && (WebCore::AccessibilityObject::isContainedBySecureField((WebCore::AccessibilityObject *)v2) & 1) == 0)
  {
    v5 = (*((uint64_t (**)(id *))*v2 + 370))(v2);
    if (v5)
      v2 = (id *)v5;
LABEL_17:
    v12[0] = "AXSelectedTextChanged";
    v12[1] = 22;
    WTF::ASCIILiteral::createNSString((WTF::ASCIILiteral *)v12);
    objc_msgSend(v2[3], "accessibilityOverrideProcessNotification:", cf);
    objc_msgSend(v2[3], "accessibilityPostedNotification:", cf);
    if (cf)
      CFRelease(cf);
LABEL_19:
    *((_BYTE *)this + 736) = 0;
    *((_QWORD *)this + 53) = 0;
    *((_QWORD *)this + 54) = 0;
  }
}

void sub_1955DAA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebCore::AXObjectCache::postTextStateChangeNotification(WebCore::AXObjectCache *a1, uint64_t *a2)
{
  uint64_t v2;
  WTF *v5;
  uint64_t v6;
  WebCore::AccessibilityObject *v7;
  const WebCore::Node *v8;
  WebCore::AccessibilityObject *SiblingUnignored;
  uint64_t v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *a2;
  if (*a2)
  {
    *(_DWORD *)(v2 + 24) += 2;
    v5 = (WTF *)*((_QWORD *)a1 + 11);
    *((_QWORD *)a1 + 11) = 0;
    if (v5)
    {
      if (*(_QWORD *)v5)
        WTF::fastFree((WTF *)(*(_QWORD *)v5 - 16), a2);
      WTF::fastFree(v5, a2);
    }
    v6 = WebCore::AXObjectCache::getOrCreate((uint64_t)a1, v2, 0);
    v7 = (WebCore::AccessibilityObject *)v6;
    if (!v6 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 856))(v6))
      goto LABEL_16;
    if (WebCore::Position::atLastEditingPositionForNode((WebCore::Position *)a2, v8))
    {
      SiblingUnignored = WebCore::AccessibilityObject::nextSiblingUnignored(v7, 1);
    }
    else
    {
      v10 = *a2;
      if (*a2)
      {
        if ((*((_BYTE *)a2 + 12) & 7) != 0)
        {
          switch(*((_BYTE *)a2 + 12) & 7)
          {
            case 1:
            case 3:
              goto LABEL_13;
            case 2:
            case 4:
              v11 = *(_DWORD *)(v10 + 24);
              *(_DWORD *)(v10 + 24) = v11 + 2;
              v12 = *(_WORD *)(v10 + 28);
              if ((v12 & 1) != 0)
              {
                v16 = v10;
                v17 = *(_QWORD *)(v10 + 80);
                if (v17)
                  v15 = *(_DWORD *)(v17 + 4);
                else
                  v15 = 0;
              }
              else if ((v12 & 4) != 0 && (v13 = *(_QWORD *)(v10 + 80)) != 0)
              {
                v16 = v10;
                v15 = 0;
                do
                {
                  ++v15;
                  v13 = *(_QWORD *)(v13 + 56);
                }
                while (v13);
              }
              else
              {
                v14 = v10;
                v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 208))(v10) ^ 1;
                v16 = v14;
                v11 = *(_DWORD *)(v14 + 24) - 2;
              }
              if (v11)
              {
                *(_DWORD *)(v16 + 24) = v11;
              }
              else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v16);
              }
              if (!v15)
                goto LABEL_13;
              break;
            default:
              goto LABEL_16;
          }
          goto LABEL_16;
        }
        if (*((_DWORD *)a2 + 2))
        {
LABEL_16:
          WebCore::AXObjectCache::postTextStateChangeNotification(a1, (id *)v7);
          if (*(_DWORD *)(v2 + 24) == 2)
          {
            if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v2);
          }
          else
          {
            *(_DWORD *)(v2 + 24) -= 2;
          }
          return;
        }
      }
LABEL_13:
      SiblingUnignored = WebCore::AccessibilityObject::previousSiblingUnignored(v7, 1);
    }
    if (SiblingUnignored)
      v7 = SiblingUnignored;
    goto LABEL_16;
  }
}

uint64_t WebCore::AXObjectCache::enqueuePasswordValueChangeNotification(WebCore::AXObjectCache *this, WebCore::AccessibilityObject *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  WTF::MonotonicTime *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  double v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 112))(a2) & 1) != 0
    || (result = WebCore::AccessibilityObject::isContainedBySecureField(a2), (_DWORD)result))
  {
    v5 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 2960))(a2);
    if (!v5)
      return 1;
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 8);
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v7);
LABEL_8:
    ++*(_QWORD *)(v7 + 8);
    v9 = __ldxr((unsigned __int8 *)v7);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
      {
LABEL_13:
        v23 = v6;
        v10 = (WTF::MonotonicTime *)WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add(&v22, (uint64_t *)this + 29, &v23);
        v12 = v23;
        v23 = 0;
        if (!v12)
          goto LABEL_30;
        v13 = *(_QWORD *)(v12 + 8);
        if (__ldaxr((unsigned __int8 *)v13))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v13))
        {
          goto LABEL_18;
        }
        v10 = (WTF::MonotonicTime *)MEMORY[0x19AEA534C](v13);
LABEL_18:
        v15 = *(_QWORD *)(v13 + 8);
        v16 = v15 - 1;
        *(_QWORD *)(v13 + 8) = v15 - 1;
        if (v15 == 1)
        {
          v21 = *(_QWORD *)(v13 + 16);
          v17 = *(_QWORD *)(v13 + 24);
          *(_QWORD *)(v13 + 24) = 0;
          v18 = v21 != 0;
        }
        else
        {
          v17 = 0;
          v18 = 1;
        }
        v19 = __ldxr((unsigned __int8 *)v13);
        if (v19 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v13))
          {
            if (!v16)
              goto LABEL_26;
            goto LABEL_30;
          }
        }
        else
        {
          __clrex();
        }
        v10 = (WTF::MonotonicTime *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
        if (!v16)
        {
LABEL_26:
          if (v17)
            v10 = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          if (!v18)
            v10 = (WTF::MonotonicTime *)WTF::fastFree((WTF *)v13, v11);
        }
LABEL_30:
        if ((*((_QWORD *)this + 26) & 0xFFFFFFFFFFFFLL) == 0
          || *(double *)((*((_QWORD *)this + 26) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          *((_QWORD *)this + 25) = 0;
          WTF::MonotonicTime::now(v10);
          WebCore::TimerBase::setNextFireTime((uint64_t)this + 176, v20 + 0.025);
        }
        return 1;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    goto LABEL_13;
  }
  return result;
}

WebCore::AXObjectCache *WebCore::AXObjectCache::frameLoadingEventNotification(WebCore::AXObjectCache *result, uint64_t a2, int a3)
{
  uint64_t v3;
  WebCore::RenderObject *v4;
  WebCore::AXObjectCache *v6;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 296);
    if (v3)
    {
      v4 = *(WebCore::RenderObject **)(v3 + 1944);
      if (v4)
      {
        result = (WebCore::AXObjectCache *)WebCore::AXObjectCache::getOrCreate(result, v4);
        if (a3 == 3)
        {
          v6 = result;
          if (result)
          {
            (*(void (**)(WebCore::AXObjectCache *))(*(_QWORD *)result + 1712))(result);
            result = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v6 + 1712))(v6);
            if (result)
              return (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v6 + 1712))(v6);
          }
        }
      }
    }
  }
  return result;
}

WebCore *WebCore::firstFocusableChild(WebCore *this, WebCore::AccessibilityObject *a2)
{
  uint64_t v3;
  int v5;
  const WebCore::AccessibilityObject *v6;
  WebCore::AccessibilityObject *v7;
  WebCore *v8;
  uint64_t FocusableChild;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v20;
  _QWORD v21[2];
  WebCore::AccessibilityObject *v22[2];

  v3 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v3, a2);
LABEL_5:
  ++*(_QWORD *)(v3 + 8);
  v5 = __ldxr((unsigned __int8 *)v3);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_10:
  v6 = (const WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore *, WebCore::AccessibilityObject *))(*(_QWORD *)this + 2912))(this, a2);
  WebCore::AccessibilityObject::iterator::iterator((WebCore::AccessibilityObject::iterator *)v22, v6, this);
  v21[0] = 0;
  v21[1] = 0;
  while (1)
  {
    v8 = v22[0];
    if (!v22[0]
      || ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v22[0] + 800))(v22[0]) & 1) != 0)
    {
      break;
    }
    FocusableChild = WebCore::firstFocusableChild(v8, v7);
    if (FocusableChild)
    {
      v8 = (WebCore *)FocusableChild;
      break;
    }
    WebCore::AccessibilityObject::iterator::operator++(v22);
  }
  WebCore::AccessibilityObject::iterator::~iterator((WebCore::AccessibilityObject::iterator *)v21, v7);
  WebCore::AccessibilityObject::iterator::~iterator((WebCore::AccessibilityObject::iterator *)v22, v10);
  v12 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_20:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v20 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v20 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
    {
      if (v15)
        return v8;
      goto LABEL_28;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v12);
  if (v15)
    return v8;
LABEL_28:
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v17)
    WTF::fastFree((WTF *)v12, v11);
  return v8;
}

double WebCore::AXObjectCache::onScrollbarUpdate(WebCore::AXObjectCache *this, WTF **a2)
{
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v17;
  WTF::MonotonicTime *v18;
  void *v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  double v23;
  double result;
  uint64_t v25;
  WTF::MonotonicTime *v26;

  v4 = (uint64_t *)((char *)this + 648);
  v5 = *((_DWORD *)this + 164) + 1;
  *((_DWORD *)this + 164) = v5;
  if (v5 > *((_DWORD *)this + 165))
  {
    v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      v7 = 0;
      *((_DWORD *)this + 164) = 0;
      goto LABEL_28;
    }
    v8 = *(_DWORD *)(v6 - 4);
    if (!v8)
      goto LABEL_25;
    v9 = 0;
    v10 = v8 - 1;
    do
    {
      v11 = v10;
      v12 = *(WTF **)(v6 + 8 * v10);
      if ((unint64_t)v12 + 1 >= 2 && !*((_QWORD *)v12 + 1))
      {
        *(_QWORD *)(v6 + 8 * v10) = 0;
        if (*(_DWORD *)v12 == 1)
          WTF::fastFree(v12, a2);
        else
          --*(_DWORD *)v12;
        *(_QWORD *)(v6 + 8 * v10) = -1;
        ++v9;
      }
      --v10;
    }
    while (v11);
    v6 = *v4;
    if (v9)
    {
      *(_DWORD *)(v6 - 16) += v9;
      v13 = *v4;
      if (*v4)
        v14 = *(_DWORD *)(v13 - 12);
      else
        v14 = 0;
      *(_DWORD *)(v13 - 12) = v14 - v9;
      v6 = *v4;
    }
    if (!v6)
      goto LABEL_3;
    v15 = *(_DWORD *)(v6 - 4);
    if (v15 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v15)
    {
LABEL_25:
      *((_DWORD *)this + 164) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(v4);
      v6 = *((_QWORD *)this + 81);
      *((_DWORD *)this + 164) = 0;
      if (!v6)
      {
        v7 = 0;
        goto LABEL_28;
      }
    }
    v7 = *(_DWORD *)(v6 - 12);
    v17 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
    {
LABEL_29:
      *((_DWORD *)this + 165) = 2 * v17;
      goto LABEL_30;
    }
LABEL_28:
    v17 = v7;
    goto LABEL_29;
  }
LABEL_30:
  v18 = a2[2];
  if (!v18)
  {
    v18 = (WTF::MonotonicTime *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v18 = 1;
    *((_QWORD *)v18 + 1) = a2;
    v20 = a2[2];
    a2[2] = v18;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        WTF::fastFree(v20, v19);
        v18 = a2[2];
      }
      else
      {
        --*(_DWORD *)v20;
      }
    }
  }
  *(_DWORD *)v18 += 2;
  v26 = v18;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add(v4, &v26, (uint64_t)&v25);
  v22 = v26;
  v26 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      v22 = (WTF *)WTF::fastFree(v22, v21);
    else
      --*(_DWORD *)v22;
  }
  if (*(_DWORD *)v18 == 1)
    v22 = (WTF *)WTF::fastFree(v18, v21);
  else
    --*(_DWORD *)v18;
  if ((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    *((_QWORD *)this + 49) = 0;
    WTF::MonotonicTime::now(v22);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 368, v23 + 0.0);
  }
  return result;
}

double WebCore::AXObjectCache::handleRoleChanged(WebCore::AXObjectCache *this, WebCore::AccessibilityObject *a2)
{
  WTF *v3;
  uint64_t v4;
  WebCore::AXObjectCache *v5;
  double result;
  int v7;
  int v8;
  int v9;
  int v10;
  WebCore::AccessibilityObject *v12;

  v3 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_QWORD *)v3)
      WTF::fastFree((WTF *)(*(_QWORD *)v3 - 16), a2);
    WTF::fastFree(v3, a2);
  }
  v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 1488))(a2);
  v5 = (WebCore::AXObjectCache *)v4;
  if (v4 && *(_BYTE *)(v4 + 361)
    || ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 2896))(a2) & 1) == 0)
  {
    v7 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 2872))(a2);
  }
  else
  {
    v7 = 1;
  }
  v8 = *((unsigned __int8 *)a2 + 59);
  *((_BYTE *)a2 + 59) = v7;
  if (v5)
  {
    if (v8 == 1)
      v9 = v7;
    else
      v9 = 1;
    if (v8)
      v10 = 0;
    else
      v10 = v7;
    if (v9 != 1 || v10 != 0)
    {
      v12 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 1232))(a2);
      return WebCore::AXObjectCache::childrenChanged(v5, v12);
    }
  }
  return result;
}

void WebCore::AXObjectCache::deferAttributeChangeIfNeeded(WebCore::AXObjectCache *this, WebCore::Element *a2, WebCore::QualifiedName::QualifiedNameImpl **a3, unsigned int **a4, const WTF::AtomString *a5, __n128 a6)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  unsigned int *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  unsigned int **v28;
  unsigned int *v29;
  unsigned int *v30;
  uint64_t v31;
  WTF::MonotonicTime *v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  WebCore::QualifiedName::QualifiedNameImpl *v38;
  unsigned int *v39;
  _DWORD *v40;

  if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_29;
  v11 = *(_DWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x14);
  if ((v11 & 4) != 0)
    goto LABEL_29;
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1955DB624);
  }
  if ((v11 & 0xF8) != 0
    || (v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x18) + 8)
                                    + 40)
                        + 8),
        !*(_BYTE *)(v12 + 3362))
    && (*(_BYTE *)(v12 + 3390)
     || (*(_BYTE *)(v12 + 70) & 8) != 0
     || *(_QWORD *)(v12 + 1560)
     || (v13 = *(_QWORD *)(v12 + 1328), *(_BYTE *)(v13 + 233))
     || *(_BYTE *)(v13 + 234))
    || *(_BYTE *)(v12 + 3392)
    || (v34 = *(_QWORD *)(v12 + 528)) != 0
    && (v35 = *(_QWORD *)(v34 + 8)) != 0
    && (v36 = *(_QWORD *)(v35 + 288)) != 0
    && *(_BYTE *)(v36 + 480) == 2)
  {
    v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
    if (v14)
    {
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 + 1, v14));
    }
    v37 = v14;
    v17 = *a3;
    if (*a3)
      ++*(_DWORD *)v17;
    v38 = v17;
    v18 = *a4;
    if (*a4)
      *v18 += 2;
    v39 = v18;
    v19 = *(_DWORD **)a5;
    if (*(_QWORD *)a5)
      *v19 += 2;
    v40 = v19;
    v20 = *((unsigned int *)this + 173);
    if ((_DWORD)v20 == *((_DWORD *)this + 172))
    {
      v21 = (uint64_t *)WTF::Vector<WebCore::AXObjectCache::AttributeChange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 680, v20 + 1, (unint64_t)&v37);
      v20 = *((unsigned int *)this + 173);
      v22 = (_QWORD *)(*((_QWORD *)this + 85) + 32 * v20);
      v23 = *v21;
      *v21 = 0;
      *v22 = v23;
      v24 = v21[1];
      v21[1] = 0;
      v22[1] = v24;
      v25 = v21[2];
      v21[2] = 0;
      v22[2] = v25;
      v26 = v22 + 3;
      v27 = v21 + 3;
    }
    else
    {
      v27 = (uint64_t *)&v40;
      v28 = (unsigned int **)(*((_QWORD *)this + 85) + 32 * v20);
      v37 = 0;
      *v28 = v14;
      v29 = (unsigned int *)v38;
      v38 = 0;
      v28[1] = v29;
      v30 = v39;
      v39 = 0;
      v28[2] = v30;
      v26 = v28 + 3;
    }
    v31 = *v27;
    *v27 = 0;
    *v26 = v31;
    *((_DWORD *)this + 173) = v20 + 1;
    WebCore::AXObjectCache::AttributeChange::~AttributeChange((WebCore::AXObjectCache::AttributeChange *)&v37, v15);
    if ((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *((_QWORD *)this + 49) = 0;
      WTF::MonotonicTime::now(v32);
      WebCore::TimerBase::setNextFireTime((uint64_t)this + 368, v33 + 0.0);
    }
  }
  else
  {
LABEL_29:
    *((_DWORD *)a2 + 6) += 2;
    WebCore::AXObjectCache::handleAttributeChange(this, a2, a3, (const WTF::AtomString *)a4, a5, a6);
    if (*a3 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::idAttr)
      *((_BYTE *)this + 768) = 1;
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
}

double WebCore::AXObjectCache::handleAttributeChange(WebCore::AXObjectCache *this, WebCore::Element *a2, WebCore::QualifiedName::QualifiedNameImpl **a3, const WTF::AtomString *a4, const WTF::AtomString *a5, __n128 a6)
{
  WebCore::AXObjectCache *v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  WebCore::AccessibilityObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::AccessibilityObject *v17;
  WebCore::AXObjectCache *v18;
  WebCore::AccessibilityObject *v19;
  WebCore::AXObjectCache *v20;
  WebCore::Node *v21;
  int v22;
  WebCore::Node *v23;
  uint64_t v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  WebCore::AXObjectCache *v26;
  WebCore::Node *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v39;
  WebCore::AccessibilityObject *v40;
  uint64_t v41;
  int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  double v54;
  const WebCore::TreeScope *v55;
  unsigned int *v56;
  WebCore::Node *v57;
  const WebCore::TreeScope *v58;
  unsigned int *v59;
  WebCore::Node *v60;
  uint64_t v61;
  WebCore::AccessibilityObject *v62;
  int v63;
  int v64;
  int v65;
  CFTypeRef v66;
  int v67;
  uint64_t v68;
  int v70;
  uint64_t v71;
  CFTypeRef v72;
  CFTypeRef v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  int v80;
  WebCore::Node *v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  WebCore::AXObjectCache *v85;
  int v86;
  WTF::MonotonicTime *v87;
  double v88;
  uint64_t v89;
  WebCore::Element *v90;
  char v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  WebCore::Node *v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  int v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  int v108;
  WebCore::AXObjectCache *v109;
  WebCore::Node *v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WebCore::AXObjectCache *v124;
  uint64_t v125;
  WebCore::Node *v127;
  uint64_t v128;
  WebCore::AccessibilityObject *v129;
  uint64_t v130;
  int v132;
  uint64_t v133;
  WebCore::AccessibilityTable *v134;
  int v135;
  BOOL v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  WTF **v141;
  WebCore::AXObjectCache *v142;
  uint64_t v143;
  WebCore::AXObjectCache *v144;
  WebCore::Element *v145;
  int v146;
  void *v147;
  uint64_t v148;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  int v154;
  uint64_t v155;
  __int16 v156;
  WebCore::Element *v157;
  uint64_t v159;
  WebCore::AccessibilityTable *v160;
  uint64_t v161;
  WebCore::Node *v163;
  uint64_t v164;
  CFTypeRef cf;

  if (!a2)
    return a6.n128_f64[0];
  v10 = this;
  if (*a3 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_modalAttr)
  {
    this = (WebCore::AXObjectCache *)WebCore::AXObjectCache::get(this, a2);
    if (!this)
    {
      v23 = (WebCore::Node *)*((_QWORD *)a2 + 4);
      if (!v23)
        return a6.n128_f64[0];
      this = (WebCore::AXObjectCache *)WebCore::AXObjectCache::get(v10, v23);
      if (!this)
        return a6.n128_f64[0];
    }
  }
  WebCore::AXObjectCache::relationAttributes(this);
  v11 = *a3;
  if (_MergedGlobals_151 == 1
    && (*(WebCore::QualifiedName::QualifiedNameImpl **)qword_1ECE82158 == v11
     || *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE82158 + 8) == v11
     || *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE82158 + 16) == v11
     || *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE82158 + 24) == v11
     || *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE82158 + 32) == v11
     || *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE82158 + 40) == v11
     || *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE82158 + 48) == v11
     || *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE82158 + 56) == v11
     || *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE82158 + 64) == v11
     || *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE82158 + 72) == v11
     || *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE82158 + 80) == v11))
  {
    WebCore::AXObjectCache::updateRelations((uint64_t **)v10, a2, a3);
    v11 = *a3;
  }
  if (v11 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::roleAttr)
  {
    v14 = WebCore::AXObjectCache::get(v10, a2);
    if (!v14)
      goto LABEL_68;
    v15 = v14;
    if (*(_QWORD *)a4
      && *(_DWORD *)(*(_QWORD *)a4 + 4)
      && (MEMORY[0x19AEA53F4]() & 1) == 0
      && (MEMORY[0x19AEA53F4](*(_QWORD *)a4, "grid", 4) & 1) == 0
      && (MEMORY[0x19AEA53F4](*(_QWORD *)a4, "treegrid", 8) & 1) == 0
      && (MEMORY[0x19AEA53F4](*(_QWORD *)a4, "row", 3) & 1) == 0
      && *(_QWORD *)a5
      && *(_DWORD *)(*(_QWORD *)a5 + 4)
      && (MEMORY[0x19AEA53F4]() & 1) == 0
      && (MEMORY[0x19AEA53F4](*(_QWORD *)a5, "grid", 4) & 1) == 0
      && (MEMORY[0x19AEA53F4](*(_QWORD *)a5, "treegrid", 8) & 1) == 0
      && !MEMORY[0x19AEA53F4](*(_QWORD *)a5, "row", 3)
      || (v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 1232))(v15)) == 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 3056))(v15);
      goto LABEL_68;
    }
    v17 = (WebCore::AccessibilityObject *)v16;
    WebCore::AXObjectCache::remove(v10, a2);
    v18 = v10;
    v19 = v17;
    goto LABEL_28;
  }
  if (v11 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::altAttr
    || v11 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::titleAttr)
  {
    v13 = (WebCore::AccessibilityObject *)WebCore::AXObjectCache::getOrCreate((uint64_t)v10, (uint64_t)a2, 0);
    WebCore::AXObjectCache::handleTextChanged(v10, v13);
    goto LABEL_68;
  }
  if (v11 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::contenteditableAttr)
  {
    v24 = WebCore::AXObjectCache::get(v10, a2);
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 3056))(v24);
    goto LABEL_68;
  }
  if (v11 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::disabledAttr)
  {
    v20 = v10;
    v21 = a2;
    v22 = 19;
    goto LABEL_67;
  }
  if (v11 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::forAttr)
  {
    if ((*((_WORD *)a2 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
    {
      *((_DWORD *)a2 + 6) += 2;
      WebCore::AXObjectCache::removeRelation((uint64_t **)v10, a2, 16);
      WebCore::AXObjectCache::addLabelForRelation((uint64_t *)v10, a2);
      if (*(_QWORD *)a4)
      {
        if (*(_DWORD *)(*(_QWORD *)a4 + 4))
        {
          v55 = (const WebCore::TreeScope *)*((_QWORD *)a2 + 5);
          v56 = (unsigned int *)*((_QWORD *)v55 + 3);
          if (v56)
          {
            WebCore::TreeScopeOrderedMap::getElementById(v56, a4, v55, (uint64_t *)&v163);
            v57 = v163;
            if (v163)
            {
              WebCore::AXObjectCache::postNotification(v10, v163, 83, 0);
              if (*((_DWORD *)v57 + 6) == 2)
              {
                if ((*((_WORD *)v57 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v57);
              }
              else
              {
                *((_DWORD *)v57 + 6) -= 2;
              }
            }
          }
        }
      }
      if (*(_QWORD *)a5)
      {
        if (*(_DWORD *)(*(_QWORD *)a5 + 4))
        {
          v58 = (const WebCore::TreeScope *)*((_QWORD *)a2 + 5);
          v59 = (unsigned int *)*((_QWORD *)v58 + 3);
          if (v59)
          {
            WebCore::TreeScopeOrderedMap::getElementById(v59, a5, v58, (uint64_t *)&v163);
            v60 = v163;
            if (v163)
            {
              WebCore::AXObjectCache::postNotification(v10, v163, 83, 0);
              if (*((_DWORD *)v60 + 6) == 2)
              {
                if ((*((_WORD *)v60 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v60);
              }
              else
              {
                *((_DWORD *)v60 + 6) -= 2;
              }
            }
          }
        }
      }
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a2);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
    }
    goto LABEL_68;
  }
  if (v11 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::requiredAttr)
  {
    v20 = v10;
    v21 = a2;
    v22 = 81;
    goto LABEL_67;
  }
  if (v11 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::tabindexAttr)
  {
    if (!*(_QWORD *)a4 || !*(_DWORD *)(*(_QWORD *)a4 + 4) || !*(_QWORD *)a5 || !*(_DWORD *)(*(_QWORD *)a5 + 4))
      a6.n128_f64[0] = WebCore::AXObjectCache::childrenChanged(v10, *((WebCore::Node **)a2 + 4), a2);
    goto LABEL_68;
  }
  if (v11 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::openAttr
    && (*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24))
  {
    a6.n128_f64[0] = WebCore::AXObjectCache::deferModalChange(v10, a2);
    v81 = (WebCore::Node *)*((_QWORD *)a2 + 4);
    if (!v81)
      goto LABEL_68;
    v82 = WebCore::AXObjectCache::get(v10, v81);
    if (!v82)
      goto LABEL_68;
    if ((v83 = (unsigned __int8 *)v82,
          v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 1488))(v82),
          (v85 = (WebCore::AXObjectCache *)v84) != 0)
      && *(_BYTE *)(v84 + 361)
      || ((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v83 + 2896))(v83) & 1) == 0)
    {
      v86 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v83 + 2872))(v83);
    }
    else
    {
      v86 = 1;
    }
    v112 = v83[59];
    v83[59] = v86;
    if (!v85)
      goto LABEL_68;
    v113 = v112 == 1 ? v86 : 1;
    v114 = v112 ? 0 : v86;
    if (v113 == 1 && !v114)
      goto LABEL_68;
    v19 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v83 + 1232))(v83);
    v18 = v85;
LABEL_28:
    a6.n128_f64[0] = WebCore::AXObjectCache::childrenChanged(v18, v19);
    goto LABEL_68;
  }
  if (v11 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::rowspanAttr)
  {
    WebCore::AXObjectCache::get(v10, a2);
LABEL_166:
    v50 = WebCore::AXObjectCache::getOrCreate((uint64_t)v10, (uint64_t)a2, 0);
    if (v50)
    {
      v51 = v50;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 296))(v50))
      {
        v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 3328))(v51);
        if (v52)
        {
          v53 = WTF::WeakHashSet<WebCore::AccessibilityTable,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::AccessibilityTable>((uint64_t)&v163, (_DWORD *)v10 + 120, v52);
          if ((*((_QWORD *)v10 + 50) & 0xFFFFFFFFFFFFLL) == 0
            || (a6.n128_u64[0] = *(_QWORD *)((*((_QWORD *)v10 + 50) & 0xFFFFFFFFFFFFLL) + 8), a6.n128_f64[0] == 0.0))
          {
            *((_QWORD *)v10 + 49) = 0;
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v53);
            WebCore::TimerBase::setNextFireTime((uint64_t)v10 + 368, v54 + 0.0);
          }
        }
      }
    }
    goto LABEL_68;
  }
  if (v11 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::colspanAttr)
  {
    WebCore::AXObjectCache::postNotification(v10, a2, 14, 0);
    goto LABEL_166;
  }
  if (v11 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::popovertargetAttr)
  {
    v20 = v10;
    v21 = a2;
    v22 = 41;
    goto LABEL_67;
  }
  if (v11 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::scopeAttr)
  {
    v20 = v10;
    v21 = a2;
    v22 = 47;
LABEL_67:
    WebCore::AXObjectCache::postNotification(v20, v21, v22, 0);
  }
LABEL_68:
  if (!*((_QWORD *)*a3 + 3) || !WTF::StringImpl::startsWith())
    return a6.n128_f64[0];
  v25 = *a3;
  if (*a3 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_activedescendantAttr)
  {
    v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528) + 8) + 296)
                    + 3064);
    if ((*(_WORD *)(v29 + 256) & 4) == 0)
      return a6.n128_f64[0];
    v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 32) + 8) + 528);
    if (!v30)
      return a6.n128_f64[0];
    v31 = *(_QWORD *)(v30 + 8);
    if (!v31)
      return a6.n128_f64[0];
    v32 = *(_QWORD *)(v31 + 24);
    if (!v32)
      return a6.n128_f64[0];
    v33 = *(_QWORD *)(v32 + 8);
    if (!v33)
      return a6.n128_f64[0];
    if ((*(_WORD *)(*(_QWORD *)(v33 + 72) + 26) & 1) == 0)
      return a6.n128_f64[0];
    v34 = WebCore::AXObjectCache::getOrCreate((uint64_t)v10, (uint64_t)a2, 0);
    if (!v34)
      return a6.n128_f64[0];
    v36 = (_QWORD *)v34;
    v37 = *(_QWORD *)(v34 + 8);
    if (__ldaxr((unsigned __int8 *)v37))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v37))
    {
      goto LABEL_141;
    }
    MEMORY[0x19AEA534C](v37);
LABEL_141:
    ++*(_QWORD *)(v37 + 8);
    v43 = __ldxr((unsigned __int8 *)v37);
    if (v43 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v37))
      {
LABEL_146:
        if (*(WebCore::Element **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 1248) == a2)
        {
          (*(void (**)(WebCore::Node **__return_ptr, _QWORD *, uint64_t))(*v36 + 984))(&v163, v36, 1);
          if (HIDWORD(v164))
          {
            v45 = *(_QWORD *)v163;
            WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v163, v44);
            if (v45 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 48))(v45))
            {
              v46 = *(_QWORD *)(v45 + 8);
              if (__ldaxr((unsigned __int8 *)v46))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v46))
              {
                goto LABEL_189;
              }
              MEMORY[0x19AEA534C](v46);
LABEL_189:
              ++*(_QWORD *)(v46 + 8);
              v64 = __ldxr((unsigned __int8 *)v46);
              if (v64 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v46))
                  goto LABEL_194;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v46);
LABEL_194:
              v65 = (*(uint64_t (**)(_QWORD *))(*v36 + 2976))(v36);
              if ((v65 - 42) <= 0x32 && ((1 << (v65 - 42)) & 0x4A48182000005) != 0
                || v65 == 133
                || v65 == 129)
              {
                v163 = (WebCore::Node *)"AXFocusChanged";
                v164 = 15;
                WTF::ASCIILiteral::createNSString((WTF::ASCIILiteral *)&v163);
                objc_msgSend(*(id *)(v45 + 24), "accessibilityOverrideProcessNotification:", cf);
                objc_msgSend(*(id *)(v45 + 24), "accessibilityPostedNotification:", cf);
                v66 = cf;
                cf = 0;
                if (v66)
                  CFRelease(v66);
              }
              v67 = (*(uint64_t (**)(_QWORD *))(*v36 + 1456))(v36);
              if ((v67 - 19) <= 0x30 && ((1 << (v67 - 19)) & 0x1800000800001) != 0
                || (v67 - 129) < 2)
              {
                v68 = v36[1];
                if (__ldaxr((unsigned __int8 *)v68))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v68))
                {
                  goto LABEL_211;
                }
                MEMORY[0x19AEA534C](v68);
LABEL_211:
                ++*(_QWORD *)(v68 + 8);
                v70 = __ldxr((unsigned __int8 *)v68);
                if (v70 == 1)
                {
                  v71 = (uint64_t)v36;
                  if (!__stlxr(0, (unsigned __int8 *)v68))
                  {
LABEL_216:
                    v163 = (WebCore::Node *)"AXFocusChanged";
                    v164 = 15;
                    WTF::ASCIILiteral::createNSString((WTF::ASCIILiteral *)&v163);
                    objc_msgSend(*(id *)(v71 + 24), "accessibilityOverrideProcessNotification:", cf);
                    objc_msgSend(*(id *)(v71 + 24), "accessibilityPostedNotification:", cf);
                    v72 = cf;
                    cf = 0;
                    if (v72)
                      CFRelease(v72);
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v71 + 176))(v71))
                    {
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 304))(v45))
                      {
                        v163 = (WebCore::Node *)"AXSelectedCellsChanged";
                        v164 = 23;
                        WTF::ASCIILiteral::createNSString((WTF::ASCIILiteral *)&v163);
                        objc_msgSend(*(id *)(v71 + 24), "accessibilityOverrideProcessNotification:", cf);
                        objc_msgSend(*(id *)(v71 + 24), "accessibilityPostedNotification:", cf);
                        v73 = cf;
                        cf = 0;
                        if (v73)
                          CFRelease(v73);
                      }
                    }
                    v74 = *(_QWORD *)(v71 + 8);
                    if (__ldaxr((unsigned __int8 *)v74))
                    {
                      __clrex();
                    }
                    else if (!__stxr(1u, (unsigned __int8 *)v74))
                    {
                      goto LABEL_226;
                    }
                    MEMORY[0x19AEA534C](v74);
LABEL_226:
                    v76 = *(_QWORD *)(v74 + 8);
                    v77 = v76 - 1;
                    *(_QWORD *)(v74 + 8) = v76 - 1;
                    if (v76 == 1)
                    {
                      v120 = *(_QWORD *)(v74 + 16);
                      v78 = *(_QWORD *)(v74 + 24);
                      *(_QWORD *)(v74 + 24) = 0;
                      v79 = v120 != 0;
                    }
                    else
                    {
                      v78 = 0;
                      v79 = 1;
                    }
                    v80 = __ldxr((unsigned __int8 *)v74);
                    if (v80 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v74))
                      {
LABEL_233:
                        if (!v77)
                        {
                          if (v78)
                            (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
                          if (!v79)
                            WTF::fastFree((WTF *)v74, v35);
                        }
LABEL_261:
                        v96 = *(_QWORD *)(v45 + 8);
                        if (__ldaxr((unsigned __int8 *)v96))
                        {
                          __clrex();
                        }
                        else if (!__stxr(1u, (unsigned __int8 *)v96))
                        {
                          goto LABEL_265;
                        }
                        MEMORY[0x19AEA534C](v96);
LABEL_265:
                        v98 = *(_QWORD *)(v96 + 8);
                        v99 = v98 - 1;
                        *(_QWORD *)(v96 + 8) = v98 - 1;
                        if (v98 == 1)
                        {
                          v119 = *(_QWORD *)(v96 + 16);
                          v100 = *(_QWORD *)(v96 + 24);
                          *(_QWORD *)(v96 + 24) = 0;
                          v101 = v119 != 0;
                        }
                        else
                        {
                          v100 = 0;
                          v101 = 1;
                        }
                        v102 = __ldxr((unsigned __int8 *)v96);
                        if (v102 == 1)
                        {
                          if (!__stlxr(0, (unsigned __int8 *)v96))
                          {
LABEL_272:
                            if (!v99)
                            {
                              if (v100)
                                (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
                              if (!v101)
                                WTF::fastFree((WTF *)v96, v35);
                            }
                            goto LABEL_277;
                          }
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::Lock::unlockSlow((WTF::Lock *)v96);
                        goto LABEL_272;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v74);
                    goto LABEL_233;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v68);
                v71 = (uint64_t)v36;
                goto LABEL_216;
              }
              (*(void (**)(WebCore::Node **__return_ptr, _QWORD *, uint64_t))(*v36 + 984))(&v163, v36, 4);
              if (!HIDWORD(v164) || (v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 1232))(v45)) == 0)
              {
LABEL_260:
                WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v163, v92);
                goto LABEL_261;
              }
              v71 = v93;
              while (1)
              {
                v94 = HIDWORD(v164);
                if (HIDWORD(v164))
                  break;
LABEL_259:
                v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 1232))(v71);
                if (!v71)
                  goto LABEL_260;
              }
              v95 = v163;
              while (*(_QWORD *)v95 != v71)
              {
                v95 = (WebCore::Node *)((char *)v95 + 8);
                if (!--v94)
                  goto LABEL_259;
              }
              v115 = *(_QWORD *)(v71 + 8);
              if (__ldaxr((unsigned __int8 *)v115))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v115))
              {
                goto LABEL_318;
              }
              MEMORY[0x19AEA534C](v115);
LABEL_318:
              ++*(_QWORD *)(v115 + 8);
              v117 = __ldxr((unsigned __int8 *)v115);
              if (v117 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v115))
                  goto LABEL_323;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v115);
LABEL_323:
              WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v163, v92);
              goto LABEL_216;
            }
          }
          else
          {
            WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v163, v44);
          }
        }
LABEL_277:
        v49 = v36[1];
        goto LABEL_278;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v37);
    goto LABEL_146;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_atomicAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 30;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_busyAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 87;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_controlsAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 16;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_valuenowAttr
    || v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_valuetextAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 57;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_labelAttr)
  {
    if ((*((_WORD *)a2 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v61 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
      *(_DWORD *)(v61 + 24) += 2;
      v62 = (WebCore::AccessibilityObject *)WebCore::AXObjectCache::get(v10, (WebCore::Node *)v61);
      WebCore::AXObjectCache::handleTextChanged(v10, v62);
      v63 = *(_DWORD *)(v61 + 24) - 2;
      if (*(_DWORD *)(v61 + 24) == 2)
      {
LABEL_445:
        if ((*(_WORD *)(v61 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v61);
        return a6.n128_f64[0];
      }
LABEL_186:
      *(_DWORD *)(v61 + 24) = v63;
      return a6.n128_f64[0];
    }
LABEL_136:
    v39 = WebCore::AXObjectCache::get(v10, a2);
    if (!v39)
      return a6.n128_f64[0];
    v40 = (WebCore::AccessibilityObject *)v39;
    v41 = *(_QWORD *)(v39 + 8);
    if (__ldaxr((unsigned __int8 *)v41))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v41))
    {
      goto LABEL_155;
    }
    MEMORY[0x19AEA534C](v41);
LABEL_155:
    ++*(_QWORD *)(v41 + 8);
    v48 = __ldxr((unsigned __int8 *)v41);
    if (v48 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v41))
        goto LABEL_160;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v41);
LABEL_160:
    if (((WebCore::nodeHasRole((uint64_t)a2, (int16x8_t *)"form", 0x100000004) & 1) != 0
       || WebCore::nodeHasRole((uint64_t)a2, (int16x8_t *)"region", 0x100000006))
      && (!*(_QWORD *)a4 || !*(_DWORD *)(*(_QWORD *)a4 + 4) || !*(_QWORD *)a5 || !*(_DWORD *)(*(_QWORD *)a5 + 4)))
    {
      (*(void (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v40 + 3056))(v40);
    }
    WebCore::AXObjectCache::handleTextChanged(v10, v40);
    v49 = *((_QWORD *)v40 + 1);
    goto LABEL_278;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_labeledbyAttr
    || v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_labelledbyAttr)
  {
    goto LABEL_136;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_checkedAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 10;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_colcountAttr)
  {
    WebCore::AXObjectCache::postNotification(v10, a2, 12, 0);
    if ((*((_WORD *)a2 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
    {
      v87 = (WTF::MonotonicTime *)WTF::WeakHashSet<WebCore::HTMLTableElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLTableElement>((uint64_t)&v163, (uint64_t)v10 + 464, (uint64_t)a2);
      if ((*((_QWORD *)v10 + 50) & 0xFFFFFFFFFFFFLL) == 0
        || (a6.n128_u64[0] = *(_QWORD *)((*((_QWORD *)v10 + 50) & 0xFFFFFFFFFFFFLL) + 8), a6.n128_f64[0] == 0.0))
      {
        *((_QWORD *)v10 + 49) = 0;
        WTF::MonotonicTime::now(v87);
        WebCore::TimerBase::setNextFireTime((uint64_t)v10 + 368, v88 + 0.0);
      }
    }
    return a6.n128_f64[0];
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_colindexAttr)
  {
    WebCore::AXObjectCache::postNotification(v10, a2, 5, 0);
    v89 = (uint64_t)v10;
    v90 = a2;
    v91 = 1;
LABEL_297:
    a6.n128_f64[0] = WebCore::AXObjectCache::handleAttributeChange(WebCore::Element *,WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_0::operator()(v89, (uint64_t)v90, v91);
    return a6.n128_f64[0];
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_colspanAttr)
  {
    v109 = v10;
    v110 = a2;
    v111 = 14;
LABEL_295:
    WebCore::AXObjectCache::postNotification(v109, v110, v111, 0);
LABEL_296:
    v89 = (uint64_t)v10;
    v90 = a2;
    v91 = 3;
    goto LABEL_297;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_describedbyAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 18;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_descriptionAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 21;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_dropeffectAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 20;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_flowtoAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 22;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_grabbedAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 26;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_keyshortcutsAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 31;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_levelAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 35;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_liveAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 63;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_placeholderAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 40;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_rowindexAttr)
  {
    v109 = v10;
    v110 = a2;
    v111 = 6;
    goto LABEL_295;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_valuemaxAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 64;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_valueminAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 69;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_multilineAttr)
  {
    v121 = WebCore::AXObjectCache::get(v10, a2);
    if (v121)
    {
      v122 = v121;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v121 + 1456))(v121) == 125
        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v122 + 1456))(v122) == 126)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v122 + 3056))(v122);
      }
    }
    return a6.n128_f64[0];
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_multiselectableAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 70;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_orientationAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 71;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_posinsetAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 42;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_relevantAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 62;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_selectedAttr)
  {
    WebCore::AXObjectCache::onSelectedChanged(v10, a2);
    return a6.n128_f64[0];
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_setsizeAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 52;
    goto LABEL_130;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_expandedAttr)
  {
    v123 = WebCore::AXObjectCache::get(v10, a2);
    if (!v123)
      return a6.n128_f64[0];
    v124 = (WebCore::AXObjectCache *)v123;
    v125 = *(_QWORD *)(v123 + 8);
    if (__ldaxr((unsigned __int8 *)v125))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v125))
    {
      goto LABEL_361;
    }
    MEMORY[0x19AEA534C](v125);
LABEL_361:
    ++*(_QWORD *)(v125 + 8);
    v132 = __ldxr((unsigned __int8 *)v125);
    if (v132 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v125))
        goto LABEL_366;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v125);
LABEL_366:
    v133 = (*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v124 + 1232))(v124);
    if (v133)
    {
      v134 = (WebCore::AccessibilityTable *)v133;
      while (1)
      {
        v135 = (*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)v134 + 1456))(v134);
        v136 = (v135 - 122) > 8 || ((1 << (v135 - 122)) & 0x181) == 0;
        if (!v136 || v135 == 42)
          break;
        v134 = (WebCore::AccessibilityTable *)(*(uint64_t (**)(WebCore::AccessibilityTable *))(*(_QWORD *)v134 + 1232))(v134);
        if (!v134)
          goto LABEL_380;
      }
      v137 = *(_QWORD *)(*((_QWORD *)v10 + 3) + 8);
      *(_DWORD *)(v137 + 24) += 2;
      if ((*(unsigned int (**)(WebCore::AccessibilityTable *))(*(_QWORD *)v134 + 64))(v134))
        WebCore::AccessibilityTable::recomputeIsExposable(v134);
      WebCore::AXObjectCache::postNotification((WTF **)v10, v134, v137, 72, 0);
      if (*(_DWORD *)(v137 + 24) == 2)
      {
        if ((*(_WORD *)(v137 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v137);
      }
      else
      {
        *(_DWORD *)(v137 + 24) -= 2;
      }
    }
LABEL_380:
    v138 = (*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v124 + 1456))(v124);
    if (v138 == 131 || v138 == 92)
    {
      v139 = *(_QWORD *)(*((_QWORD *)v10 + 3) + 8);
      *(_DWORD *)(v139 + 24) += 2;
      if ((*(unsigned int (**)(WebCore::AXObjectCache *))(*(_QWORD *)v124 + 632))(v124))
        v140 = 74;
      else
        v140 = 73;
      v141 = (WTF **)v10;
      v142 = v124;
      v143 = v139;
    }
    else
    {
      v139 = *(_QWORD *)(*((_QWORD *)v10 + 3) + 8);
      *(_DWORD *)(v139 + 24) += 2;
      v141 = (WTF **)v10;
      v142 = v124;
      v143 = v139;
      v140 = 75;
    }
    a6.n128_f64[0] = WebCore::AXObjectCache::postNotification(v141, v142, v143, v140, 0);
    if (*(_DWORD *)(v139 + 24) == 2)
    {
      if ((*(_WORD *)(v139 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v139);
    }
    else
    {
      *(_DWORD *)(v139 + 24) -= 2;
    }
    v49 = *((_QWORD *)v124 + 1);
LABEL_278:
    if (__ldaxr((unsigned __int8 *)v49))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v49))
    {
      goto LABEL_282;
    }
    MEMORY[0x19AEA534C](v49);
LABEL_282:
    v104 = *(_QWORD *)(v49 + 8);
    v105 = v104 - 1;
    *(_QWORD *)(v49 + 8) = v104 - 1;
    if (v104 == 1)
    {
      v118 = *(_QWORD *)(v49 + 16);
      v106 = *(_QWORD *)(v49 + 24);
      *(_QWORD *)(v49 + 24) = 0;
      v107 = v118 != 0;
    }
    else
    {
      v106 = 0;
      v107 = 1;
    }
    v108 = __ldxr((unsigned __int8 *)v49);
    if (v108 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v49))
      {
LABEL_289:
        if (!v105)
        {
          if (v106)
            (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
          if (!v107)
            WTF::fastFree((WTF *)v49, v35);
        }
        return a6.n128_f64[0];
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v49);
    goto LABEL_289;
  }
  if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_haspopupAttr)
  {
    v26 = v10;
    v27 = a2;
    v28 = 27;
    goto LABEL_130;
  }
  if (v25 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_hiddenAttr)
  {
    if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_invalidAttr)
    {
      v26 = v10;
      v27 = a2;
      v28 = 76;
      goto LABEL_130;
    }
    if (v25 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_modalAttr)
    {
      if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_currentAttr)
      {
        v26 = v10;
        v27 = a2;
        v28 = 17;
        goto LABEL_130;
      }
      if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_disabledAttr)
      {
        v26 = v10;
        v27 = a2;
        v28 = 19;
        goto LABEL_130;
      }
      if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_pressedAttr)
      {
        v26 = v10;
        v27 = a2;
        v28 = 79;
        goto LABEL_130;
      }
      if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_readonlyAttr)
      {
        v26 = v10;
        v27 = a2;
        v28 = 80;
        goto LABEL_130;
      }
      if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_requiredAttr)
      {
        v26 = v10;
        v27 = a2;
        v28 = 81;
        goto LABEL_130;
      }
      if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_roledescriptionAttr)
      {
        WebCore::AXObjectCache::get(v10, a2);
        return a6.n128_f64[0];
      }
      if (v25 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_rowcountAttr)
      {
        if (v25 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_rowspanAttr)
        {
          if (v25 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_sortAttr)
            return a6.n128_f64[0];
          v26 = v10;
          v27 = a2;
          v28 = 82;
LABEL_130:
          WebCore::AXObjectCache::postNotification(v26, v27, v28, 0);
          return a6.n128_f64[0];
        }
        WebCore::AXObjectCache::get(v10, a2);
        goto LABEL_296;
      }
      v159 = WebCore::AXObjectCache::get(v10, a2);
      v61 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
      v63 = *(_DWORD *)(v61 + 24);
      *(_DWORD *)(v61 + 24) = v63 + 2;
      if (v159)
      {
        v160 = (WebCore::AccessibilityTable *)v159;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v159 + 64))(v159))
          WebCore::AccessibilityTable::recomputeIsExposable(v160);
        a6.n128_f64[0] = WebCore::AXObjectCache::postNotification((WTF **)v10, v160, v61, 72, 0);
        v63 = *(_DWORD *)(v61 + 24) - 2;
      }
      if (!v63)
        goto LABEL_445;
      goto LABEL_186;
    }
    v144 = v10;
    v145 = a2;
LABEL_429:
    a6.n128_f64[0] = WebCore::AXObjectCache::deferModalChange(v144, v145);
    return a6.n128_f64[0];
  }
  v127 = (WebCore::Node *)*((_QWORD *)a2 + 4);
  if (!v127)
    goto LABEL_415;
  v128 = WebCore::AXObjectCache::get(v10, v127);
  if (!v128)
    goto LABEL_415;
  v129 = (WebCore::AccessibilityObject *)v128;
  v130 = *(_QWORD *)(v128 + 8);
  if (__ldaxr((unsigned __int8 *)v130))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v130))
  {
    goto LABEL_394;
  }
  MEMORY[0x19AEA534C](v130);
LABEL_394:
  ++*(_QWORD *)(v130 + 8);
  v146 = __ldxr((unsigned __int8 *)v130);
  if (v146 != 1)
  {
    __clrex();
    goto LABEL_398;
  }
  if (__stlxr(0, (unsigned __int8 *)v130))
LABEL_398:
    WTF::Lock::unlockSlow((WTF::Lock *)v130);
  a6.n128_f64[0] = WebCore::AXObjectCache::childrenChanged(v10, v129);
  v148 = *((_QWORD *)v129 + 1);
  if (__ldaxr((unsigned __int8 *)v148))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v148))
  {
    goto LABEL_403;
  }
  MEMORY[0x19AEA534C](v148, a6);
LABEL_403:
  v150 = *(_QWORD *)(v148 + 8);
  v151 = v150 - 1;
  *(_QWORD *)(v148 + 8) = v150 - 1;
  if (v150 == 1)
  {
    v161 = *(_QWORD *)(v148 + 16);
    v152 = *(_QWORD *)(v148 + 24);
    *(_QWORD *)(v148 + 24) = 0;
    v153 = v161 != 0;
  }
  else
  {
    v152 = 0;
    v153 = 1;
  }
  v154 = __ldxr((unsigned __int8 *)v148);
  if (v154 != 1)
  {
    __clrex();
    goto LABEL_409;
  }
  if (__stlxr(0, (unsigned __int8 *)v148))
LABEL_409:
    WTF::Lock::unlockSlow((WTF::Lock *)v148);
  if (!v151)
  {
    if (v152)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v152 + 8))(v152, a6);
    if (!v153)
      WTF::fastFree((WTF *)v148, v147);
  }
LABEL_415:
  v155 = *((_QWORD *)v10 + 42);
  if (!v155)
    return a6.n128_f64[0];
  v145 = *(WebCore::Element **)(v155 + 8);
  if (!v145)
    return a6.n128_f64[0];
  v156 = *((_WORD *)a2 + 14);
  if ((v156 & 0xF000) == 0x9000)
  {
    if (**((WebCore::Element ***)v145 + 5) != a2
      || (*((_WORD *)v145 + 14) & 0xF000) == 0x9000
      || (*((_BYTE *)v145 + 22) & 8) == 0)
    {
      return a6.n128_f64[0];
    }
    goto LABEL_428;
  }
  if ((v156 & 4) != 0
    && *((_QWORD *)a2 + 10)
    && ((*((unsigned __int8 *)v145 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) == 0)
  {
    v157 = v145;
    do
      v157 = (WebCore::Element *)*((_QWORD *)v157 + 4);
    while (v157 != a2 && v157 != 0);
    if (v157)
    {
LABEL_428:
      *((_BYTE *)v10 + 360) = 0;
      v144 = v10;
      goto LABEL_429;
    }
  }
  return a6.n128_f64[0];
}

void sub_1955DCFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebCore::AXObjectCache::relationAttributes(WebCore::AXObjectCache *this)
{
  WTF::StringImpl **v1;
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  _QWORD *v10;
  int v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  void *v33;
  WTF::StringImpl **v34;
  WTF::StringImpl **v35;

  if ((byte_1ECE82151 & 1) != 0)
    return;
  v35 = (WTF::StringImpl **)WebCore::HTMLNames::aria_activedescendantAttr;
  if (WebCore::HTMLNames::aria_activedescendantAttr)
    ++*(_DWORD *)WebCore::HTMLNames::aria_activedescendantAttr;
  v34 = (WTF::StringImpl **)WebCore::HTMLNames::aria_controlsAttr;
  if (WebCore::HTMLNames::aria_controlsAttr)
    ++*(_DWORD *)WebCore::HTMLNames::aria_controlsAttr;
  v1 = (WTF::StringImpl **)WebCore::HTMLNames::aria_describedbyAttr;
  if (WebCore::HTMLNames::aria_describedbyAttr)
    ++*(_DWORD *)WebCore::HTMLNames::aria_describedbyAttr;
  v2 = (WTF::StringImpl **)WebCore::HTMLNames::aria_detailsAttr;
  if (WebCore::HTMLNames::aria_detailsAttr)
    ++*(_DWORD *)WebCore::HTMLNames::aria_detailsAttr;
  v3 = (WTF::StringImpl **)WebCore::HTMLNames::aria_errormessageAttr;
  if (WebCore::HTMLNames::aria_errormessageAttr)
    ++*(_DWORD *)WebCore::HTMLNames::aria_errormessageAttr;
  v4 = (WTF::StringImpl **)WebCore::HTMLNames::aria_flowtoAttr;
  if (WebCore::HTMLNames::aria_flowtoAttr)
    ++*(_DWORD *)WebCore::HTMLNames::aria_flowtoAttr;
  v5 = (WTF::StringImpl **)WebCore::HTMLNames::aria_labelledbyAttr;
  if (WebCore::HTMLNames::aria_labelledbyAttr)
    ++*(_DWORD *)WebCore::HTMLNames::aria_labelledbyAttr;
  v6 = (WTF::StringImpl **)WebCore::HTMLNames::aria_labeledbyAttr;
  if (WebCore::HTMLNames::aria_labeledbyAttr)
    ++*(_DWORD *)WebCore::HTMLNames::aria_labeledbyAttr;
  v7 = (WTF::StringImpl **)WebCore::HTMLNames::aria_ownsAttr;
  if (WebCore::HTMLNames::aria_ownsAttr)
    ++*(_DWORD *)WebCore::HTMLNames::aria_ownsAttr;
  v8 = (WTF::StringImpl **)WebCore::HTMLNames::headersAttr;
  if (WebCore::HTMLNames::headersAttr)
    ++*(_DWORD *)WebCore::HTMLNames::headersAttr;
  v9 = (WTF::StringImpl **)WebCore::HTMLNames::popovertargetAttr;
  if (WebCore::HTMLNames::popovertargetAttr)
    ++*(_DWORD *)WebCore::HTMLNames::popovertargetAttr;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  if (v35)
    ++*(_DWORD *)v35;
  *v10 = v35;
  if (v34)
    ++*(_DWORD *)v34;
  v10[1] = v34;
  if (v1)
    ++*(_DWORD *)v1;
  v10[2] = v1;
  if (v2)
    ++*(_DWORD *)v2;
  v10[3] = v2;
  if (v3)
    ++*(_DWORD *)v3;
  v10[4] = v3;
  if (v4)
    ++*(_DWORD *)v4;
  v10[5] = v4;
  if (v5)
    ++*(_DWORD *)v5;
  v10[6] = v5;
  if (v6)
    ++*(_DWORD *)v6;
  v10[7] = v6;
  if (v7)
    ++*(_DWORD *)v7;
  v10[8] = v7;
  if (v8)
    ++*(_DWORD *)v8;
  v10[9] = v8;
  if (v9)
  {
    v11 = (*(_DWORD *)v9)++;
    v10[10] = v9;
    qword_1ECE82158 = (uint64_t)v10;
    _MergedGlobals_151 = 1;
    if (v11)
    {
      *(_DWORD *)v9 = v11;
    }
    else
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v9);
      WTF::fastFree(v12, v13);
    }
  }
  else
  {
    v10[10] = 0;
    qword_1ECE82158 = (uint64_t)v10;
    _MergedGlobals_151 = 1;
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v8);
      WTF::fastFree(v14, v15);
      if (!v7)
        goto LABEL_53;
      goto LABEL_51;
    }
    --*(_DWORD *)v8;
  }
  if (!v7)
    goto LABEL_53;
LABEL_51:
  if (*(_DWORD *)v7 == 1)
  {
    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
    WTF::fastFree(v16, v17);
  }
  else
  {
    --*(_DWORD *)v7;
  }
LABEL_53:
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
      WTF::fastFree(v18, v19);
      if (!v5)
        goto LABEL_59;
      goto LABEL_57;
    }
    --*(_DWORD *)v6;
  }
  if (!v5)
    goto LABEL_59;
LABEL_57:
  if (*(_DWORD *)v5 == 1)
  {
    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
    WTF::fastFree(v20, v21);
  }
  else
  {
    --*(_DWORD *)v5;
  }
LABEL_59:
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v4);
      WTF::fastFree(v22, v23);
      if (!v3)
        goto LABEL_65;
      goto LABEL_63;
    }
    --*(_DWORD *)v4;
  }
  if (!v3)
    goto LABEL_65;
LABEL_63:
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v3);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
LABEL_65:
  if (!v2)
    goto LABEL_68;
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
LABEL_68:
    if (v1)
      goto LABEL_69;
    goto LABEL_71;
  }
  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v2);
  WTF::fastFree(v26, v27);
  if (v1)
  {
LABEL_69:
    if (*(_DWORD *)v1 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v1);
      WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)v1;
    }
  }
LABEL_71:
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v34);
      WTF::fastFree(v30, v31);
    }
    else
    {
      --*(_DWORD *)v34;
    }
  }
  if (v35)
  {
    if (*(_DWORD *)v35 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
      WTF::fastFree(v32, v33);
    }
    else
    {
      --*(_DWORD *)v35;
    }
  }
  byte_1ECE82151 = 1;
}

uint64_t **WebCore::AXObjectCache::updateRelations(uint64_t **this, WebCore::Element *a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  WebCore::AXObjectCache *v5;
  __int16 v6;
  uint64_t v7;
  WebCore::QualifiedName::QualifiedNameImpl *v8;
  int v10;
  WTF::String *v11;
  __n128 v12;
  uint64_t v13;

  v5 = (WebCore::AXObjectCache *)this;
  v6 = *((_WORD *)a2 + 14);
  if ((v6 & 0x10) == 0
    || (v7 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24), v7 != *(_QWORD *)(WebCore::HTMLNames::metaTag + 24))
    && v7 != *(_QWORD *)(WebCore::HTMLNames::headTag + 24)
    && v7 != *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24)
    && v7 != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24)
    && v7 != *(_QWORD *)(WebCore::HTMLNames::styleTag + 24))
  {
    v8 = *a3;
    if (*a3 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_activedescendantAttr)
    {
      v10 = 1;
    }
    else if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_controlsAttr
           || v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::popovertargetAttr)
    {
      v10 = 4;
    }
    else if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_describedbyAttr)
    {
      v10 = 5;
    }
    else if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_detailsAttr)
    {
      v10 = 7;
    }
    else if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_errormessageAttr)
    {
      v10 = 9;
    }
    else if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_flowtoAttr)
    {
      v10 = 12;
    }
    else
    {
      v10 = 15;
      if (v8 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_labelledbyAttr
        && v8 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_labeledbyAttr)
      {
        if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_ownsAttr)
        {
          v10 = 18;
        }
        else
        {
          if (v8 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::headersAttr)
            return this;
          v10 = 13;
        }
      }
    }
    if (v8 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::popovertargetAttr
      || (v6 & 0x10) != 0
      && ((v13 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24), v13 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
       || v13 == *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24)))
    {
      WebCore::AXObjectCache::removeRelation(this, a2, v10);
      return (uint64_t **)WebCore::AXObjectCache::addRelation(v5, (const WebCore::TreeScope **)a2, a3, v11, v12);
    }
  }
  return this;
}

double WebCore::AXObjectCache::handleAttributeChange(WebCore::Element *,WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_0::operator()(uint64_t a1, uint64_t a2, char a3)
{
  double result;
  WebCore::Node *v7;
  WTF::MonotonicTime *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::MonotonicTime *v15;
  double v16;
  unsigned int *v17;
  double v18;
  WebCore::Node *v19;
  _BYTE v20[24];

  if ((a3 & 2) != 0)
  {
    v10 = WebCore::AXObjectCache::getOrCreate(a1, a2, 0);
    if (v10)
    {
      v11 = v10;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 296))(v10))
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 3328))(v11);
        if (v12)
        {
          v13 = v12;
          if ((a3 & 1) != 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 3328))(v12) & 1) == 0)
          {
            v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 832))(v13);
            if (v14)
            {
              if ((*(_WORD *)(v14 + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
              {
                v15 = (WTF::MonotonicTime *)WTF::WeakHashSet<WebCore::HTMLTableElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLTableElement>((uint64_t)v20, a1 + 464, v14);
                if ((*(_QWORD *)(a1 + 400) & 0xFFFFFFFFFFFFLL) == 0
                  || *(double *)((*(_QWORD *)(a1 + 400) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                {
                  *(_QWORD *)(a1 + 392) = 0;
                  WTF::MonotonicTime::now(v15);
                  WebCore::TimerBase::setNextFireTime(a1 + 368, v16 + 0.0);
                }
              }
            }
          }
          v17 = WTF::WeakHashSet<WebCore::AccessibilityTable,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::AccessibilityTable>((uint64_t)v20, (_DWORD *)(a1 + 480), v13);
          if ((*(_QWORD *)(a1 + 400) & 0xFFFFFFFFFFFFLL) == 0
            || (result = *(double *)((*(_QWORD *)(a1 + 400) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
          {
            *(_QWORD *)(a1 + 392) = 0;
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v17);
            WebCore::TimerBase::setNextFireTime(a1 + 368, v18 + 0.0);
          }
        }
      }
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 952))(a2))
  {
    WebCore::HTMLTablePartElement::findParentTable(a2, &v19);
    v7 = v19;
    if (v19)
    {
      if ((*((_WORD *)v19 + 14) & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)v19 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
      {
        v8 = (WTF::MonotonicTime *)WTF::WeakHashSet<WebCore::HTMLTableElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLTableElement>((uint64_t)v20, a1 + 464, (uint64_t)v19);
        if ((*(_QWORD *)(a1 + 400) & 0xFFFFFFFFFFFFLL) == 0
          || (result = *(double *)((*(_QWORD *)(a1 + 400) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
        {
          *(_QWORD *)(a1 + 392) = 0;
          WTF::MonotonicTime::now(v8);
          WebCore::TimerBase::setNextFireTime(a1 + 368, v9 + 0.0);
        }
      }
      if (*((_DWORD *)v7 + 6) == 2)
      {
        if ((*((_WORD *)v7 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v7);
      }
      else
      {
        *((_DWORD *)v7 + 6) -= 2;
      }
    }
  }
  return result;
}

BOOL WebCore::AXObjectCache::removeRelation(uint64_t **a1, WebCore::Node *a2, int a3)
{
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL8 v17;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  char v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  WTF *v42;
  char v43;
  WTF *v44;

  v5 = WebCore::AXObjectCache::get((WebCore::AXObjectCache *)a1, a2);
  if (!v5)
    return 0;
  v7 = a1[95];
  if (!v7)
    return 0;
  v8 = (uint64_t *)v5;
  v9 = *(_QWORD *)(v5 + 16);
  v10 = *((_DWORD *)v7 - 2);
  v11 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = v7[2 * v14];
  if (v15 != v9)
  {
    v16 = 1;
    while (v15)
    {
      v14 = ((_DWORD)v14 + v16) & v10;
      v15 = v7[2 * v14];
      ++v16;
      if (v15 == v9)
        goto LABEL_9;
    }
    v14 = *((unsigned int *)v7 - 1);
  }
LABEL_9:
  if (v14 == *((_DWORD *)v7 - 1))
    return 0;
  v19 = &v7[2 * v14];
  v22 = v19[1];
  v20 = v19 + 1;
  v21 = v22;
  if (!v22)
    goto LABEL_20;
  v23 = *(_DWORD *)(v21 - 8);
  v24 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v25 = (v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11);
  v26 = v23 & (v25 ^ HIWORD(v25));
  v27 = *(unsigned __int8 *)(v21 + 32 * v26);
  if (v27 != a3)
  {
    v28 = 1;
    while (v27 != 255)
    {
      v26 = ((_DWORD)v26 + v28) & v23;
      v27 = *(unsigned __int8 *)(v21 + 32 * v26);
      ++v28;
      if (v27 == a3)
        goto LABEL_19;
    }
    v26 = *(unsigned int *)(v21 - 4);
  }
LABEL_19:
  if (v26 == *(_DWORD *)(v21 - 4))
  {
LABEL_20:
    v29 = 0;
    v30 = 0;
LABEL_21:
    v31 = 1;
    v32 = 1;
    goto LABEL_22;
  }
  v34 = v21 + 32 * v26;
  v29 = *(_QWORD *)(v34 + 8);
  v30 = *(WTF **)(v34 + 16);
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  *(_QWORD *)(v34 + 24) = 0;
  v35 = *v20;
  if (!*v20 || (v35 += 32 * *(unsigned int *)(v35 - 4), v35 != v34))
  {
    if (v35 != v34)
    {
      *(_BYTE *)v34 = -2;
      ++*(_DWORD *)(*v20 - 16);
      v36 = *v20;
      v37 = *v20 ? *(_DWORD *)(v36 - 12) - 1 : -1;
      *(_DWORD *)(v36 - 12) = v37;
      v38 = *v20;
      if (*v20)
      {
        v39 = 6 * *(_DWORD *)(v38 - 12);
        v40 = *(_DWORD *)(v38 - 4);
        if (v39 < v40 && v40 >= 9)
          WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::rehash(v20, v40 >> 1, 0);
      }
    }
  }
  if (!v29)
    goto LABEL_21;
  v31 = 0;
  v32 = *(_DWORD *)(v29 - 12) == 0;
LABEL_22:
  v33 = 2;
  switch(a3)
  {
    case 0:
      goto LABEL_63;
    case 1:
      goto LABEL_55;
    case 2:
      v33 = 1;
      goto LABEL_55;
    case 3:
      v33 = 4;
      goto LABEL_55;
    case 4:
      v33 = 3;
      goto LABEL_55;
    case 5:
      v33 = 6;
      goto LABEL_55;
    case 6:
      v33 = 5;
      goto LABEL_55;
    case 7:
      v33 = 8;
      goto LABEL_55;
    case 8:
      v33 = 7;
      goto LABEL_55;
    case 9:
      v33 = 10;
      goto LABEL_55;
    case 10:
      v33 = 9;
      goto LABEL_55;
    case 11:
      v33 = 12;
      goto LABEL_55;
    case 12:
      v33 = 11;
      goto LABEL_55;
    case 13:
      v33 = 14;
      goto LABEL_55;
    case 14:
      v33 = 13;
      goto LABEL_55;
    case 15:
      v33 = 16;
      goto LABEL_55;
    case 16:
      v33 = 15;
      goto LABEL_55;
    case 17:
      v33 = 18;
      goto LABEL_55;
    case 18:
      v33 = 17;
LABEL_55:
      if (v30)
      {
        v42 = v30;
        do
        {
          WebCore::AXObjectCache::removeRelationByID(a1[95], *(void **)v42, v8[2], v33);
          v42 = (WTF *)*((_QWORD *)v42 + 2);
        }
        while (v42);
      }
      v43 = a3 != 18 || v32;
      if ((v43 & 1) == 0)
        WebCore::AXObjectCache::childrenChanged((WebCore::AXObjectCache *)a1, (WebCore::AccessibilityObject *)v8);
LABEL_63:
      v17 = !v32;
      if (v30)
      {
        do
        {
          v44 = (WTF *)*((_QWORD *)v30 + 2);
          WTF::fastFree(v30, v6);
          v30 = v44;
        }
        while (v44);
      }
      if ((v31 & 1) == 0)
        WTF::fastFree((WTF *)(v29 - 16), v6);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1955DDC20);
  }
  return v17;
}

uint64_t *WebCore::AXObjectCache::addLabelForRelation(uint64_t *this, WebCore::Element *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::AccessibilityObject *v9;
  uint64_t v10;
  int v12;
  void *v13;
  WebCore::AccessibilityObject *v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if ((*((_WORD *)a2 + 14) & 0x10) == 0)
    return this;
  v3 = this;
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
  if (v4 == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
  {
    *((_DWORD *)a2 + 6) += 2;
    this = (uint64_t *)WebCore::HTMLLabelElement::control((uint64_t)a2, &v34);
    v5 = v34;
    if (v34)
    {
      if ((*(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_8;
      if ((*(_BYTE *)((*(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1955DE02CLL);
      }
      v6 = *(_QWORD *)((*(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
      if (v6 && *(_QWORD *)(v6 + 8))
LABEL_8:
        this = (uint64_t *)WebCore::AXObjectCache::addRelation(v3, (uint64_t)a2, v34, 16);
      else
        v34 = 0;
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          this = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        return (uint64_t *)WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
    return this;
  }
  if (v4 != *(_QWORD *)(WebCore::HTMLNames::figcaptionTag + 24))
    return this;
  v7 = *((_QWORD *)a2 + 4);
  if (!v7)
    return this;
  *(_DWORD *)(v7 + 24) += 2;
  if ((*(_WORD *)(v7 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::figureTag + 24))
  {
    goto LABEL_71;
  }
  v8 = WebCore::AXObjectCache::getOrCreate(this, a2, 0);
  v9 = (WebCore::AccessibilityObject *)v8;
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_23;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_23:
    ++*(_QWORD *)(v10 + 8);
    v12 = __ldxr((unsigned __int8 *)v10);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
        goto LABEL_28;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
LABEL_28:
  this = (uint64_t *)WebCore::AXObjectCache::getOrCreate(v3, v7, 0);
  if (!this)
    goto LABEL_54;
  v14 = (WebCore::AccessibilityObject *)this;
  v15 = this[1];
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_33;
  }
  MEMORY[0x19AEA534C](v15);
LABEL_33:
  ++*(_QWORD *)(v15 + 8);
  v17 = __ldxr((unsigned __int8 *)v15);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_37;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
LABEL_37:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  this = (uint64_t *)WebCore::AXObjectCache::addRelation(v3, v9, v14, 16, 1);
  v18 = *((_QWORD *)v14 + 1);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_42;
  }
  this = (uint64_t *)MEMORY[0x19AEA534C](v18);
LABEL_42:
  v20 = *(_QWORD *)(v18 + 8);
  v21 = v20 - 1;
  *(_QWORD *)(v18 + 8) = v20 - 1;
  if (v20 == 1)
  {
    v32 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v23 = v32 != 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = __ldxr((unsigned __int8 *)v18);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
LABEL_48:
    this = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v18);
  if (!v21)
  {
    if (v22)
      this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if (!v23)
      this = (uint64_t *)WTF::fastFree((WTF *)v18, v13);
  }
LABEL_54:
  if (v9)
  {
    v25 = *((_QWORD *)v9 + 1);
    if (__ldaxr((unsigned __int8 *)v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v25))
    {
      goto LABEL_59;
    }
    this = (uint64_t *)MEMORY[0x19AEA534C](v25);
LABEL_59:
    v27 = *(_QWORD *)(v25 + 8);
    v28 = v27 - 1;
    *(_QWORD *)(v25 + 8) = v27 - 1;
    if (v27 == 1)
    {
      v33 = *(_QWORD *)(v25 + 16);
      v29 = *(_QWORD *)(v25 + 24);
      *(_QWORD *)(v25 + 24) = 0;
      v30 = v33 != 0;
    }
    else
    {
      v29 = 0;
      v30 = 1;
    }
    v31 = __ldxr((unsigned __int8 *)v25);
    if (v31 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v25))
      {
LABEL_66:
        if (!v28)
        {
          if (v29)
            this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          if (!v30)
            this = (uint64_t *)WTF::fastFree((WTF *)v25, v13);
        }
        goto LABEL_71;
      }
    }
    else
    {
      __clrex();
    }
    this = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v25);
    goto LABEL_66;
  }
LABEL_71:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v7);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::AXObjectCache::addRelation(WebCore::AXObjectCache *this, const WebCore::TreeScope **a2, WebCore::QualifiedName::QualifiedNameImpl **a3, WTF::String *a4, __n128 a5)
{
  WebCore::QualifiedName::QualifiedNameImpl **v5;
  WebCore::QualifiedName::QualifiedNameImpl *v8;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _BOOL4 v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  const WebCore::TreeScope *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WTF::StringImpl **v25;
  WebCore::QualifiedName::QualifiedNameImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  uint64_t v31;
  const WTF::AtomString *v32;
  uint64_t v33;
  const WebCore::TreeScope *v34;
  unsigned int *v35;
  WTF::StringImpl *v36;
  const WebCore::TreeScope *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF **v57;
  WebCore::Element *v58;
  WTF **v59;
  WTF **v60;
  WebCore::Element *v61;
  WTF::StringImpl **v62;

  v5 = a3;
  v8 = *a3;
  if (*a3 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_labeledbyAttr)
  {
    if (WebCore::Element::hasAttribute((WebCore::Element *)a2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_labelledbyAttr, (uint64_t)a3, a4, a5))
    {
      goto LABEL_101;
    }
    v8 = *v5;
  }
  if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_activedescendantAttr)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 680);
    v12 = (_DWORD *)(v11 + 228);
    v13 = *(_DWORD *)(v11 + 228);
    *(_DWORD *)(v11 + 228) = v13 + 1;
    v10 = 1;
    goto LABEL_12;
  }
  if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_controlsAttr
    || v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::popovertargetAttr)
  {
    v10 = 4;
  }
  else if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_describedbyAttr)
  {
    v10 = 5;
  }
  else if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_detailsAttr)
  {
    v10 = 7;
  }
  else if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_errormessageAttr)
  {
    v10 = 9;
  }
  else if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_flowtoAttr)
  {
    v10 = 12;
  }
  else
  {
    v10 = 15;
    if (v8 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_labelledbyAttr
      && v8 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_labeledbyAttr)
    {
      if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_ownsAttr)
      {
        v10 = 18;
      }
      else if (v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::headersAttr)
      {
        v10 = 13;
      }
      else
      {
        v10 = 0;
      }
    }
  }
  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 680);
  v12 = (_DWORD *)(v11 + 228);
  v13 = *(_DWORD *)(v11 + 228);
  *(_DWORD *)(v11 + 228) = v13 + 1;
  if ((*(_QWORD *)(v11 + 688) & 0x20000000) != 0
    && v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::popovertargetAttr)
  {
LABEL_12:
    v14 = 1;
    if (v13)
      goto LABEL_33;
    goto LABEL_41;
  }
  if ((*(_QWORD *)(v11 + 680) & 0x80000000) != 0)
  {
    v14 = v8 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::invoketargetAttr;
    if (v13)
    {
LABEL_33:
      *v12 = v13;
      if (v14)
        goto LABEL_34;
      goto LABEL_42;
    }
  }
  else
  {
    v14 = 0;
    if (v13)
      goto LABEL_33;
  }
LABEL_41:
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  if (v14)
  {
LABEL_34:
    WebCore::Element::getElementAttribute((WebCore::Element *)a2, v5, (uint64_t *)&v56);
    if (v56)
    {
      LOBYTE(v5) = WebCore::AXObjectCache::addRelation((uint64_t *)this, (uint64_t)a2, (uint64_t)v56, v10);
      v15 = v56;
      v56 = 0;
      if (v15)
      {
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v15);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
      return v5 & 1;
    }
    goto LABEL_47;
  }
LABEL_42:
  v16 = *((unsigned __int16 *)*v5 + 5) - 307;
  v17 = v16 > 0x19;
  v18 = (1 << v16) & 0x2040295;
  if (!v17 && v18 != 0)
  {
    WebCore::Element::getElementsArrayAttribute((WebCore::Element *)a2, v5, (uint64_t)a3, a4, (uint64_t)&v56, a5);
    if ((_BYTE)v58)
    {
      v43 = v56;
      if (HIDWORD(v57))
      {
        v49 = 0;
        v50 = 8 * HIDWORD(v57);
        do
        {
          v51 = *(_QWORD *)v43;
          *(_DWORD *)(v51 + 24) = *(_DWORD *)(*(_QWORD *)v43 + 24) + 2;
          if (WebCore::AXObjectCache::addRelation((uint64_t *)this, (uint64_t)a2, v51, v10))
            v49 = 1;
          if (*(_DWORD *)(v51 + 24) == 2)
          {
            if ((*(_WORD *)(v51 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v51);
          }
          else
          {
            *(_DWORD *)(v51 + 24) -= 2;
          }
          v43 = (WTF::StringImpl *)((char *)v43 + 8);
          v50 -= 8;
        }
        while (v50);
        LOBYTE(v5) = v49;
        if (!(_BYTE)v58)
          return v5 & 1;
        v43 = v56;
        if (HIDWORD(v57))
        {
          v52 = 8 * HIDWORD(v57);
          do
          {
            v53 = *(_QWORD *)v43;
            *(_QWORD *)v43 = 0;
            if (v53)
            {
              if (*(_DWORD *)(v53 + 24) == 2)
              {
                if ((*(_WORD *)(v53 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v53);
              }
              else
              {
                *(_DWORD *)(v53 + 24) -= 2;
              }
            }
            v43 = (WTF::StringImpl *)((char *)v43 + 8);
            v52 -= 8;
          }
          while (v52);
LABEL_140:
          v43 = v56;
          if (!v56)
            return v5 & 1;
LABEL_132:
          v56 = 0;
          LODWORD(v57) = 0;
          goto LABEL_106;
        }
      }
      else
      {
        LOBYTE(v5) = 0;
      }
      if (!v43)
        return v5 & 1;
      goto LABEL_132;
    }
  }
LABEL_47:
  v20 = a2[13];
  if (!v20)
    goto LABEL_58;
  v21 = *((_DWORD *)v20 + 1);
  if ((v21 & 1) == 0)
  {
    v22 = (uint64_t)v20 + 32;
    LODWORD(v23) = v21 >> 5;
    if ((_DWORD)v23)
      goto LABEL_50;
LABEL_58:
    v25 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_59;
  }
  v22 = *((_QWORD *)v20 + 5);
  LODWORD(v23) = *((_DWORD *)v20 + 13);
  if (!(_DWORD)v23)
    goto LABEL_58;
LABEL_50:
  v24 = *v5;
  v23 = v23;
  v25 = (WTF::StringImpl **)(v22 + 8);
  while (1)
  {
    v26 = *(v25 - 1);
    if (v26 == v24 || *((_QWORD *)v26 + 3) == *((_QWORD *)v24 + 3) && *((_QWORD *)v26 + 4) == *((_QWORD *)v24 + 4))
      break;
    v25 += 2;
    if (!--v23)
    {
      v25 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_59:
  v27 = *v25;
  if (v27)
  {
    if (*((_DWORD *)v27 + 1))
    {
      *(_DWORD *)v27 += 2;
      v56 = v27;
      WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v56, (const WTF::AtomString *)a2, &v54);
      v29 = v56;
      v56 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v28);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = v54;
      if (v54)
      {
        v31 = *((unsigned int *)v54 + 3);
        if ((_DWORD)v31)
        {
          LODWORD(v5) = 0;
          v32 = (WTF *)((char *)v54 + 16);
          v33 = 8 * v31;
          do
          {
            if (*(_QWORD *)v32)
            {
              if (*(_DWORD *)(*(_QWORD *)v32 + 4))
              {
                v34 = a2[5];
                v35 = (unsigned int *)*((_QWORD *)v34 + 3);
                if (v35)
                {
                  WebCore::TreeScopeOrderedMap::getElementById(v35, v32, v34, (uint64_t *)&v56);
                  v36 = v56;
                  if (v56)
                  {
                    if (v56 == (WTF::StringImpl *)a2)
                      v36 = (WTF::StringImpl *)a2;
                    else
                      LODWORD(v5) = WebCore::AXObjectCache::addRelation((uint64_t *)this, (uint64_t)a2, (uint64_t)v56, v10) | v5;
                    if (*((_DWORD *)v36 + 6) == 2)
                    {
                      if ((*((_WORD *)v36 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v36);
                    }
                    else
                    {
                      *((_DWORD *)v36 + 6) -= 2;
                    }
                  }
                }
              }
            }
            v32 = (const WTF::AtomString *)((char *)v32 + 8);
            v33 -= 8;
          }
          while (v33);
          v30 = v54;
          v54 = 0;
          if (!v30)
            return v5 & 1;
        }
        else
        {
          LOBYTE(v5) = 0;
          v54 = 0;
        }
        if (*((_DWORD *)v30 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v30, v28);
        else
          --*((_DWORD *)v30 + 2);
        return v5 & 1;
      }
    }
LABEL_101:
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  v37 = a2[9];
  if (((unint64_t)v37 & 0x3000000000000000) != 0x2000000000000000
    && (((unint64_t)v37 & 0x3000000000000000) != 0x3000000000000000 || (*((_WORD *)a2 + 14) & 0x100) != 0))
  {
    goto LABEL_101;
  }
  v38 = (unint64_t)v37 & 0xFFFFFFFFFFFFLL;
  if (!v38)
    goto LABEL_101;
  v39 = *(_QWORD *)(v38 + 104);
  if (!v39)
    goto LABEL_101;
  v54 = 0;
  v55 = 0;
  v40 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v39 + 8), v5);
  v41 = *(_QWORD *)(v39 + 8);
  if (v41)
    v41 += 32 * *(unsigned int *)(v41 - 4);
  if (v41 == v40)
    goto LABEL_101;
  v56 = (WTF::StringImpl *)a2;
  v57 = &v54;
  v58 = (WebCore::Element *)a2;
  v59 = &v54;
  v60 = &v54;
  v61 = (WebCore::Element *)a2;
  v42 = *(unsigned int *)(v40 + 24);
  if ((_DWORD)v42 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_140;
  }
  v62 = &v56;
  ((void (*)(WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore24CustomElementDefaultARIA20elementsForAttributeERKNS8_7ElementERKNS8_13QualifiedNameEE3__0JZNKS9_20elementsForAttributeESC_SF_E3__1ZNKS9_20elementsForAttributeESC_SF_E3__2EEEEEJRKNS0_6__implIJNS6_10AtomStringENS6_7WeakPtrISA_NS8_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISO_EEEENS6_6VectorISR_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v42])(&v62, v40 + 8);
  v43 = v54;
  if (!HIDWORD(v55))
  {
    LOBYTE(v5) = 0;
    goto LABEL_104;
  }
  LODWORD(v5) = 0;
  v44 = 8 * HIDWORD(v55);
  do
  {
    v45 = *(_QWORD *)v43;
    v43 = (WTF::StringImpl *)((char *)v43 + 8);
    LODWORD(v5) = WebCore::AXObjectCache::addRelation((uint64_t *)this, (uint64_t)a2, v45, v10) | v5;
    v44 -= 8;
  }
  while (v44);
  v43 = v54;
  if (!HIDWORD(v55))
  {
LABEL_104:
    if (!v43)
      return v5 & 1;
    goto LABEL_105;
  }
  v46 = 8 * HIDWORD(v55);
  do
  {
    v47 = *(_QWORD *)v43;
    *(_QWORD *)v43 = 0;
    if (v47)
    {
      if (*(_DWORD *)(v47 + 24) == 2)
      {
        if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v47);
      }
      else
      {
        *(_DWORD *)(v47 + 24) -= 2;
      }
    }
    v43 = (WTF::StringImpl *)((char *)v43 + 8);
    v46 -= 8;
  }
  while (v46);
  v43 = v54;
  if (v54)
  {
LABEL_105:
    v54 = 0;
    LODWORD(v55) = 0;
LABEL_106:
    WTF::fastFree(v43, a2);
  }
  return v5 & 1;
}

unsigned int *WebCore::AXObjectCache::visiblePositionForTextMarkerData@<X0>(unsigned int *this@<X0>, const TextMarkerData *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t objectID;
  uint64_t v5;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  int v15;
  void *v16;
  unsigned int offset;
  char anchorType;
  _BOOL4 affinity;
  const WebCore::VisiblePosition *v20;
  WebCore::Node *v21;
  unsigned __int8 v22;
  WebCore::Node *v23;
  char v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  uint64_t v28;
  BOOL v29;
  WebCore::AXObjectCache **v30;
  WebCore::AXObjectCache *v31;
  WebCore::AXObjectCache *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  WebCore::AXObjectCache *v42;
  unsigned int v43;
  char v44;
  WebCore::Node *v45;
  int v46;
  char v47;
  char v48;
  WebCore::Node *v49;
  int v50;
  char v51;
  char v52;

  objectID = a2->objectID;
  if ((unint64_t)(objectID - 1) > 0xFFFFFFFFFFFFFFFDLL)
    goto LABEL_12;
  v5 = *((_QWORD *)this + 7);
  if (!v5)
    goto LABEL_12;
  v7 = *(_DWORD *)(v5 - 8);
  v8 = (~(objectID << 32) + objectID) ^ ((unint64_t)(~(objectID << 32) + objectID) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(_QWORD *)(v5 + 16 * v11);
  if (v12 != objectID)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(_QWORD *)(v5 + 16 * v11);
      ++v13;
      if (v12 == objectID)
        goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_7:
  this = *(unsigned int **)(v5 + 16 * v11 + 8);
  if (!this
    || (this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 840))(this)) == 0)
  {
LABEL_12:
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return this;
  }
  v14 = this;
  v15 = this[6] + 2;
  this[6] = v15;
  if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0)
  {
LABEL_15:
    v14[6] = v15 + 2;
    offset = a2->offset;
    anchorType = a2->anchorType;
    v42 = (WebCore::AXObjectCache *)v14;
    v43 = offset;
    v44 = anchorType & 7;
    affinity = a2->affinity;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v42, (uint64_t)&v45);
    v48 = 1;
    if (!affinity)
    {
      v25 = v45;
      if (v45)
      {
        *((_DWORD *)v45 + 6) += 2;
        v49 = v25;
        v50 = v46;
        v51 = v47;
        v52 = 0;
        if (!WebCore::inSameLine((WebCore *)&v45, (const WebCore::VisiblePosition *)&v49, v20))
          v48 = 0;
        v26 = v49;
        v49 = 0;
        if (v26)
        {
          if (*((_DWORD *)v26 + 6) == 2)
          {
            if ((*((_WORD *)v26 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v26, v16);
          }
          else
          {
            *((_DWORD *)v26 + 6) -= 2;
          }
        }
      }
    }
    if (v14[6] == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v16);
    }
    else
    {
      v14[6] -= 2;
    }
    v21 = v45;
    if (!v45)
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 1;
LABEL_26:
      this = (unsigned int *)v45;
      v45 = 0;
      if (this)
      {
        if (this[6] == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)this, v16);
        }
        else
        {
          this[6] -= 2;
        }
      }
      goto LABEL_29;
    }
    *((_DWORD *)v45 + 6) += 2;
    if ((*((_QWORD *)v21 + 8) & 0xFFFFFFFFFFFFLL) == 0)
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      v24 = 1;
      goto LABEL_23;
    }
    v22 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
    if ((v22 & 1) != 0)
    {
      v27 = v21;
      v28 = WebCore::Document::topDocument(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)v21 + 8) & 0xFFFFFFFFFFFFLL)
                                                                                         + 0x18)
                                                                             + 8)
                                                                 + 40)
                                                     + 8));
      *(_DWORD *)(v28 + 24) += 2;
      v49 = (WebCore::Node *)v28;
      if (*(_QWORD *)(v28 + 1944))
        v29 = *(_BYTE *)(v28 + 3405) == 0;
      else
        v29 = 0;
      if (v29)
      {
        v30 = (WebCore::AXObjectCache **)v28;
        v31 = *(WebCore::AXObjectCache **)(v28 + 1488);
        if (v31)
        {
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v49);
        }
        else
        {
          v32 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
          v42 = WebCore::AXObjectCache::AXObjectCache(v32, (WebCore::Document *)v30);
          std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v30 + 186, &v42);
          std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v42);
          WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
          v31 = v30[186];
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v49);
          v21 = v27;
          if (!v31)
            goto LABEL_21;
        }
        v33 = *((_QWORD *)v31 + 12);
        if (v33)
        {
          v34 = a2->objectID;
          v35 = *(_DWORD *)(v33 - 8);
          v36 = (~(v34 << 32) + v34) ^ ((unint64_t)(~(v34 << 32) + v34) >> 22);
          v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
          v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
          v39 = v35 & ((v38 >> 31) ^ v38);
          v40 = *(_QWORD *)(v33 + 8 * v39);
          v21 = v27;
          if (v40 == v34)
            goto LABEL_21;
          v41 = 1;
          while (v40)
          {
            v39 = (v39 + v41) & v35;
            v40 = *(_QWORD *)(v33 + 8 * v39);
            ++v41;
            v21 = v27;
            if (v40 == v34)
              goto LABEL_21;
          }
        }
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 1;
        v21 = v27;
LABEL_24:
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v21, v16);
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
        goto LABEL_26;
      }
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v49);
      v21 = v27;
    }
LABEL_21:
    v23 = v45;
    v45 = 0;
    *(_QWORD *)a3 = v23;
    *(_DWORD *)(a3 + 8) = v46;
    *(_BYTE *)(a3 + 12) = v47;
    v24 = v48;
LABEL_23:
    *(_BYTE *)(a3 + 16) = v24;
    goto LABEL_24;
  }
  this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 368))(this);
  if (!(_DWORD)this)
  {
    v15 = v14[6];
    goto LABEL_15;
  }
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_29:
  if (v14[6] == 2)
  {
    if ((*((_WORD *)v14 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v14, v16);
  }
  else
  {
    v14[6] -= 2;
  }
  return this;
}

unsigned int *WebCore::AXObjectCache::characterOffsetForTextMarkerData@<X0>(unsigned int *this@<X0>, const TextMarkerData *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t objectID;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  unsigned int *v16;
  int v17;
  uint64_t v18;
  int v19;
  CharacterOffset v20;

  if (a2->ignored)
    goto LABEL_12;
  objectID = a2->objectID;
  if ((unint64_t)(objectID - 1) > 0xFFFFFFFFFFFFFFFDLL)
    goto LABEL_12;
  v6 = this;
  v7 = *((_QWORD *)this + 7);
  if (!v7)
    goto LABEL_12;
  v8 = *(_DWORD *)(v7 - 8);
  v9 = (~(objectID << 32) + objectID) ^ ((unint64_t)(~(objectID << 32) + objectID) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = *(_QWORD *)(v7 + 16 * v12);
  if (v13 != objectID)
  {
    v14 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v14) & v8;
      v13 = *(_QWORD *)(v7 + 16 * v12);
      ++v14;
      if (v13 == objectID)
        goto LABEL_8;
    }
    goto LABEL_12;
  }
LABEL_8:
  this = *(unsigned int **)(v7 + 16 * v12 + 8);
  if (!this
    || (this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 840))(this)) == 0)
  {
LABEL_12:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
    return this;
  }
  v16 = this;
  v17 = this[6] + 4;
  this[6] = v17;
  v20.var0.var0 = (Node *)this;
  *(_QWORD *)&v20.var1 = *(_QWORD *)&a2->characterStart;
  v20.var3 = 0;
  if (a2->affinity)
  {
    v18 = *(_QWORD *)&v20.var1;
    *(_QWORD *)a3 = this;
    *(_QWORD *)(a3 + 8) = v18;
    *(_DWORD *)(a3 + 16) = v20.var3;
    goto LABEL_16;
  }
  this = WebCore::AXObjectCache::previousCharacterOffset(v6, &v20, 0, a3);
  v17 = v16[6] - 2;
  if (v16[6] != 2)
  {
    v16[6] = v17;
    goto LABEL_16;
  }
  if ((*((_WORD *)v16 + 15) & 0x400) == 0)
  {
    this = WebCore::Node::removedLastRef((WebCore::Node *)v16, v15);
    v17 = v16[6];
LABEL_16:
    v19 = v17 - 2;
    if (v19)
    {
      v16[6] = v19;
      return this;
    }
  }
  if ((*((_WORD *)v16 + 15) & 0x400) == 0)
    return WebCore::Node::removedLastRef((WebCore::Node *)v16, v15);
  return this;
}

unsigned int *WebCore::AXObjectCache::previousCharacterOffset@<X0>(unsigned int *this@<X0>, const CharacterOffset *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  Node *var0;
  unsigned int *v6;
  uint64_t var2;
  WebCore::AXObjectCache *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v4 = a4;
  var0 = a2->var0.var0;
  if (a2->var0.var0)
  {
    v6 = this;
    var2 = a2->var2;
    *((_DWORD *)var0 + 6) += 2;
    if ((a3 & 1) != 0 || (_DWORD)var2)
    {
      v11 = *((_QWORD *)var0 + 8) & 0xFFFFFFFFFFFFLL;
      if (v11)
        v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 544))(v11, var2);
      else
        v9 = (var2 - 1);
      a4 = v4;
      this = v6;
      v8 = (WebCore::AXObjectCache *)var0;
      v10 = 4;
    }
    else
    {
      v8 = (WebCore::AXObjectCache *)var0;
      v9 = 0;
      v10 = 1;
    }
    this = WebCore::AXObjectCache::characterOffsetForNodeAndOffset(this, v8, v9, v10, a4);
    if (*((_DWORD *)var0 + 6) == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)var0, v12);
    }
    else
    {
      *((_DWORD *)var0 + 6) -= 2;
    }
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return this;
}

void WebCore::AXObjectCache::traverseToOffsetInRange(uint64_t a1, uint64_t a2, WebCore::Node **a3, uint64_t a4, uint64_t a5, char a6)
{
  WebCore::Node *v6;
  int v7;
  char *v12;
  WebCore::Node *v13;
  _QWORD *v14;
  WTF *v15;
  WebCore::Node *v16;
  __int32 v17;
  int v18;
  int v19;
  WebCore::Node *v20;
  uint64_t v21;
  unsigned int i;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  WebCore::Node *v28;
  char v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  __int16 v39;
  WebCore::Node *v40;
  WebCore::Node *v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  BOOL v46;
  WebCore::Node *v47;
  uint64_t v48;
  unsigned int k;
  uint64_t v50;
  WebCore::Node *v51;
  int v52;
  int v53;
  int v54;
  WebCore::Node *v55;
  uint64_t v56;
  unsigned int j;
  uint64_t v58;
  WebCore::Node *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  __int32 v65;
  char v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  WebCore::AXObjectCache *v70;
  WebCore::Node *v71;
  WebCore::Node *v72;
  WebCore::Node **v73;
  char v74;
  WebCore::Node *v76[2];
  WebCore::Node *v77;
  int32x2_t v78[12];
  WebCore::Node *v79;
  WebCore::Node *v80;
  int32x2_t v81;
  unsigned __int8 *v82;
  uint64_t v83;

  LOBYTE(v7) = a6;
  WebCore::TextIterator::TextIterator((uint64_t)v78, a3, ~(unsigned __int16)(a5 >> 3) & 2);
  if (a2)
  {
    if (*(_QWORD *)(a2 + 88))
    {
      LOBYTE(v13) = 0;
      goto LABEL_9;
    }
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v14 = 0;
    v15 = *(WTF **)(a2 + 88);
    *(_QWORD *)(a2 + 88) = v14;
    if (v15)
    {
      if (*(_QWORD *)v15)
        WTF::fastFree((WTF *)(*(_QWORD *)v15 - 16), v12);
      WTF::fastFree(v15, v12);
    }
  }
  LOBYTE(v13) = 1;
LABEL_9:
  v16 = v79;
  v74 = (char)v13;
  v73 = a3;
  if (v79)
  {
    v17 = 0;
    v18 = 0;
LABEL_17:
    v13 = 0;
    v19 = v18;
    while (1)
    {
      v7 = v83;
      v20 = v80;
      if (v80)
      {
        v21 = *((_QWORD *)v80 + 6);
        for (i = 0; ; ++i)
        {
          v23 = v21 & 0xFFFFFFFFFFFFLL;
          if (!v23)
            break;
          v21 = *(_QWORD *)(v23 + 48);
        }
        v81 = vadd_s32(v81, vdup_n_s32(i));
        v80 = 0;
        if (*((_DWORD *)v20 + 6) == 2)
        {
          if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v20, v12);
            v16 = v79;
          }
        }
        else
        {
          *((_DWORD *)v20 + 6) -= 2;
        }
      }
      v24 = *((_DWORD *)v16 + 6);
      *((_DWORD *)v16 + 6) = v24 + 4;
      v25 = v24 + 2;
      if (v25)
      {
        *((_DWORD *)v16 + 6) = v25;
      }
      else
      {
        if ((*((_WORD *)v16 + 15) & 0x400) != 0)
          goto LABEL_111;
        WebCore::Node::removedLastRef(v16, v12);
        v25 = *((_DWORD *)v16 + 6);
      }
      v26 = v25 - 2;
      if (v26)
      {
        *((_DWORD *)v16 + 6) = v26;
        goto LABEL_28;
      }
LABEL_111:
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16, v12);
LABEL_28:
      if (v7 != 1)
      {
        if (v7)
        {
          v29 = 0;
          goto LABEL_79;
        }
        v27 = WebCore::TextIterator::node(v78);
        if ((WebCore::AccessibilityObject::replacedNodeNeedsCharacter(v27, v28) & 1) != 0)
        {
          v7 = 1;
          v16 = (WebCore::Node *)v27;
          goto LABEL_32;
        }
        goto LABEL_107;
      }
      v30 = (uint64_t)v82;
      if ((v83 & 0xFF00000000) != 0)
      {
        if (!(_DWORD)v83)
          goto LABEL_185;
        v31 = *v82;
      }
      else
      {
        if (!(_DWORD)v83)
        {
LABEL_185:
          while (1)
          {
            __break(1u);
LABEL_186:
            if ((*(_BYTE *)(v30 + 52) & 7) != 2 || (*(_BYTE *)(v30 + 53) & 1) == 0)
              break;
LABEL_159:
            v18 = 0;
            if ((a5 & 2) == 0 || (v7 & 1) != 0)
              goto LABEL_16;
            v68 = *((_QWORD *)v6 + 4);
            if (!v68 || (v30 = *(_QWORD *)(v68 + 64) & 0xFFFFFFFFFFFFLL) == 0)
            {
LABEL_169:
              while (1)
              {
                v70 = (WebCore::AXObjectCache *)(*((_QWORD *)v6 + 6) & 0xFFFFFFFFFFFFLL);
                if (v70)
                  break;
                v6 = (WebCore::Node *)*((_QWORD *)v6 + 4);
                if (!v6)
                  goto LABEL_171;
              }
              WebCore::AXObjectCache::rangeForNodeContents(v70, (WebCore::Node *)v12, (uint64_t)v76);
              WebCore::AXObjectCache::traverseToOffsetInRange(a1, a2, v76, a4, a5, 0);
              v71 = v77;
              v77 = 0;
              if (v71)
              {
                if (*((_DWORD *)v71 + 6) == 2)
                {
                  if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v71, v12);
                }
                else
                {
                  *((_DWORD *)v71 + 6) -= 2;
                }
              }
              v72 = v76[0];
              v76[0] = 0;
              if (v72)
              {
                if (*((_DWORD *)v72 + 6) == 2)
                {
                  if ((*((_WORD *)v72 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v72, v12);
                }
                else
                {
                  *((_DWORD *)v72 + 6) -= 2;
                }
              }
              goto LABEL_149;
            }
            if ((*(_BYTE *)(v30 + 45) & 2) == 0)
            {
              if ((*(_BYTE *)(v30 + 45) & 1) != 0)
                goto LABEL_169;
              v69 = *(_QWORD *)(*(_QWORD *)(v30 + 24) + 8);
              if (!v69
                || (*(_WORD *)(v69 + 28) & 0x10) == 0
                || *(_QWORD *)(*(_QWORD *)(v69 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24)
                || (*((_QWORD *)v6 + 6) & 0xFFFFFFFFFFFFLL) != 0)
              {
                goto LABEL_169;
              }
LABEL_171:
              *(_QWORD *)a1 = 0;
              *(_QWORD *)(a1 + 8) = 0;
              *(_DWORD *)(a1 + 16) = 0;
              goto LABEL_149;
            }
            v12 = "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents"
                  "/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/TypeCasts.h";
            __break(0xC471u);
          }
LABEL_15:
          v18 = 1;
          goto LABEL_16;
        }
        v31 = *(unsigned __int16 *)v82;
      }
      v32 = v31 > 0x20;
      v33 = (1 << v31) & 0x100003600;
      if (v32 || v33 == 0)
        goto LABEL_78;
      v35 = WebCore::TextIterator::node(v78);
      if (v35
        && (*(_QWORD *)(v35 + 64) & 0xFFFFFFFFFFFFLL) != 0
        && *(_BYTE *)((*(_QWORD *)(v35 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 17
        && ((*(_BYTE *)((*(_QWORD *)(v35 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 2
         || (*(_BYTE *)((*(_QWORD *)(v35 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) == 0))
      {
        v7 = 1;
        v16 = (WebCore::Node *)v35;
LABEL_32:
        v29 = 1;
LABEL_79:
        v18 += v7;
        if (v16 != v13)
        {
          if ((v29 & 1) != 0)
          {
            v17 = 0;
            goto LABEL_102;
          }
          v55 = v80;
          if (v80)
          {
            v56 = *((_QWORD *)v80 + 6);
            for (j = 0; ; ++j)
            {
              v58 = v56 & 0xFFFFFFFFFFFFLL;
              if (!v58)
                break;
              v56 = *(_QWORD *)(v58 + 48);
            }
            v81 = vadd_s32(v81, vdup_n_s32(j));
            v80 = 0;
            if (*((_DWORD *)v55 + 6) == 2)
            {
              if ((*((_WORD *)v55 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v55, v12);
            }
            else
            {
              *((_DWORD *)v55 + 6) -= 2;
            }
          }
          v59 = v79;
          v60 = *((_DWORD *)v79 + 6);
          v17 = v81.i32[0];
          *((_DWORD *)v79 + 6) = v60 + 4;
          v61 = v60 + 2;
          if (v61)
          {
            *((_DWORD *)v59 + 6) = v61;
            goto LABEL_100;
          }
          if ((*((_WORD *)v59 + 15) & 0x400) != 0)
            goto LABEL_124;
          WebCore::Node::removedLastRef(v59, v12);
          v61 = *((_DWORD *)v59 + 6);
LABEL_100:
          v62 = v61 - 2;
          if (!v62)
          {
LABEL_124:
            if ((*((_WORD *)v59 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v59, v12);
          }
          else
          {
            *((_DWORD *)v59 + 6) = v62;
          }
LABEL_102:
          v13 = v16;
LABEL_103:
          if ((a5 & 2) == 0 && (v17 & ((int)((_DWORD)a5 << 28) >> 31)) + v18 >= (int)a4)
          {
            v63 = 0;
            if ((a5 & 8) != 0)
              v19 = (a4 - v17) & ~(((int)a4 - v17) >> 31);
            else
              v19 = a4 - v18 + v7;
            goto LABEL_145;
          }
          v19 = v7;
LABEL_106:
          v16 = v13;
          goto LABEL_107;
        }
LABEL_82:
        v47 = v80;
        if (v80)
        {
          v48 = *((_QWORD *)v80 + 6);
          for (k = 0; ; ++k)
          {
            v50 = v48 & 0xFFFFFFFFFFFFLL;
            if (!v50)
              break;
            v48 = *(_QWORD *)(v50 + 48);
          }
          v81 = vadd_s32(v81, vdup_n_s32(k));
          v80 = 0;
          if (*((_DWORD *)v47 + 6) == 2)
          {
            if ((*((_WORD *)v47 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v47, v12);
          }
          else
          {
            *((_DWORD *)v47 + 6) -= 2;
          }
        }
        v7 += v19;
        v51 = v79;
        v52 = *((_DWORD *)v79 + 6);
        *((_DWORD *)v79 + 6) = v52 + 4;
        v17 = v81.i32[1] - v7;
        v53 = v52 + 2;
        if (v53)
        {
          *((_DWORD *)v51 + 6) = v53;
LABEL_90:
          v54 = v53 - 2;
          if (v54)
          {
            *((_DWORD *)v51 + 6) = v54;
            goto LABEL_103;
          }
        }
        else if ((*((_WORD *)v51 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v51, v12);
          v53 = *((_DWORD *)v51 + 6);
          goto LABEL_90;
        }
        if ((*((_WORD *)v51 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v51, v12);
        goto LABEL_103;
      }
      v36 = **((_QWORD **)v16 + 5);
      if (v36)
      {
        if ((*(_WORD *)(v36 + 28) & 0x80) != 0)
        {
          v37 = *(_QWORD *)(v36 + 200);
          if (v37)
          {
            v42 = *(WebCore::Node **)(v37 + 8);
            if (v42)
            {
              v43 = WebCore::AXObjectCache::getOrCreate(a2, *(_QWORD *)(v37 + 8), 0);
              if (v43)
              {
                v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 1456))(v43);
                v45 = (v44 - 101) > 0x19 || ((1 << (v44 - 101)) & 0x3000001) == 0;
                v46 = !v45 || v44 == 19;
                if (v46 && (*((_WORD *)v16 + 14) & 0x80) != 0)
                {
                  v16 = v42;
                  goto LABEL_107;
                }
              }
LABEL_78:
              v29 = 0;
              v7 = 1;
              goto LABEL_79;
            }
          }
        }
      }
      if (v13)
      {
        v38 = *((_WORD *)v13 + 14);
        if ((v38 & 2) != 0)
        {
          v39 = *((_WORD *)v16 + 14);
          if ((v39 & 0xF000) == 0x9000)
          {
            if (**((WebCore::Node ***)v13 + 5) == v16 && (v38 & 0xF000) != 0x9000 && (*((_BYTE *)v13 + 22) & 8) != 0)
              goto LABEL_62;
          }
          else if ((v39 & 4) != 0
                 && *((_QWORD *)v16 + 10)
                 && ((*((unsigned __int8 *)v13 + 22) ^ *((unsigned __int8 *)v16 + 22)) & 8) == 0)
          {
            v40 = v13;
            do
              v40 = (WebCore::Node *)*((_QWORD *)v40 + 4);
            while (v40 != v16 && v40 != 0);
            if (v40)
            {
LABEL_62:
              if ((v39 & 0x10) != 0
                && *(_QWORD *)(*((_QWORD *)v16 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::pTag + 24))
              {
                goto LABEL_106;
              }
            }
          }
        }
      }
      if (v16 == v13)
      {
        ++v18;
        v7 = 1;
        goto LABEL_82;
      }
      v19 = 0;
      v17 = 1;
LABEL_107:
      v6 = v16;
      WebCore::TextIterator::advance((WebCore::TextIterator *)v78, (WTF::StringImpl *)v12);
      v16 = v79;
      if (!v79)
        goto LABEL_135;
    }
  }
  v6 = *a3;
  v17 = *((_DWORD *)a3 + 2);
  if ((int)a4 > 0 || (a5 & 2) != 0)
  {
    if ((WebCore::AccessibilityObject::replacedNodeNeedsCharacter((uint64_t)*a3, (WebCore::Node *)v12) & 1) == 0)
    {
      v30 = *((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL;
      if (v30 && *(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 17)
        goto LABEL_186;
      goto LABEL_159;
    }
    goto LABEL_15;
  }
  v18 = 0;
LABEL_16:
  v16 = v79;
  v19 = v18;
  if (v79)
    goto LABEL_17;
LABEL_135:
  if ((a5 & 2) != 0)
  {
    v63 = 0;
    if ((*((_WORD *)v6 + 14) & 2) != 0)
    {
      LOBYTE(v13) = v74;
      v64 = a1;
      if (v6 == v73[2])
      {
        v63 = 0;
        v65 = *((_DWORD *)v73 + 6);
        if (v65 < v17 + v19)
          v19 = v65 - v17;
      }
    }
    else
    {
      LOBYTE(v13) = v74;
      v64 = a1;
    }
  }
  else
  {
    v63 = a4 - v18;
    v13 = v6;
LABEL_145:
    v64 = a1;
    if (!v13)
    {
      v6 = 0;
      LOBYTE(v13) = v74;
      goto LABEL_148;
    }
    v6 = v13;
    LOBYTE(v13) = v74;
  }
  *((_DWORD *)v6 + 6) += 2;
LABEL_148:
  *(_QWORD *)v64 = v6;
  *(_DWORD *)(v64 + 8) = v17;
  *(_DWORD *)(v64 + 12) = v19;
  *(_DWORD *)(v64 + 16) = v63;
LABEL_149:
  v66 = v13 ^ 1;
  if (!a2)
    v66 = 1;
  if ((v66 & 1) == 0)
  {
    v67 = *(WTF **)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;
    if (v67)
    {
      if (*(_QWORD *)v67)
        WTF::fastFree((WTF *)(*(_QWORD *)v67 - 16), v12);
      WTF::fastFree(v67, v12);
    }
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v78, v12);
}

unsigned int *WebCore::AXObjectCache::rangeForNodeContents@<X0>(WebCore::AXObjectCache *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *result;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int i;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  result = (unsigned int *)WebCore::AccessibilityObject::replacedNodeNeedsCharacter((uint64_t)this, a2);
  if ((_DWORD)result && (v7 = *((_QWORD *)this + 4)) != 0)
  {
    v8 = *(_DWORD *)(v7 + 24);
    v9 = *((_QWORD *)this + 6);
    for (i = 0; ; ++i)
    {
      v11 = v9 & 0xFFFFFFFFFFFFLL;
      if (!v11)
        break;
      v9 = *(_QWORD *)(v11 + 48);
    }
    *(_DWORD *)(v7 + 24) = v8 + 6;
    v15 = v8 + 4;
    if (!v15)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) != 0)
      {
        v15 = 2;
      }
      else
      {
        result = WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
        v15 = *(_DWORD *)(v7 + 24);
      }
    }
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(a3 + 8) = i;
    *(_DWORD *)(v7 + 24) = v15 + 4;
    *(_QWORD *)(a3 + 16) = v7;
    *(_DWORD *)(a3 + 24) = i + 1;
    if (v15 == -2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      {
        result = WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
        v15 = *(_DWORD *)(v7 + 24) - 2;
        if (*(_DWORD *)(v7 + 24) != 2)
          goto LABEL_13;
      }
    }
    else
    {
      *(_DWORD *)(v7 + 24) = v15 + 2;
      if (v15)
      {
LABEL_13:
        *(_DWORD *)(v7 + 24) = v15;
        return result;
      }
    }
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
  }
  else
  {
    *((_DWORD *)this + 6) += 4;
    v12 = *((_WORD *)this + 14);
    if ((v12 & 1) != 0)
    {
      v14 = *((_QWORD *)this + 10);
      if (v14)
        LODWORD(v14) = *(_DWORD *)(v14 + 4);
    }
    else if ((v12 & 4) != 0 && (v13 = *((_QWORD *)this + 10)) != 0)
    {
      LODWORD(v14) = 0;
      do
      {
        LODWORD(v14) = v14 + 1;
        v13 = *(_QWORD *)(v13 + 56);
      }
      while (v13);
    }
    else
    {
      LODWORD(v14) = 0;
    }
    *(_QWORD *)a3 = this;
    *(_DWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = this;
    *(_DWORD *)(a3 + 24) = v14;
  }
  return result;
}

unsigned int *WebCore::AXObjectCache::rangeMatchesTextNearRange@<X0>(const WebCore::SimpleRange *a1@<X1>, const WTF::String *a2@<X2>, uint64_t a3@<X8>)
{
  int v7;
  uint64_t v8;
  int v9;
  void *v10;
  int v11;
  void *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  void *v22;
  int v23;
  WebCore::Node *v24;
  int v25;
  BOOL v26;
  WebCore::Node *v27;
  void *v28;
  uint64_t v29;
  WebCore::Node *v30;
  unsigned int *result;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  int v37;
  WebCore::Node *v38;
  int v39;
  WebCore::Node *v40;
  int v41;
  char v42;
  WebCore::Node *v43;
  int v44;
  unsigned __int8 v45;
  WebCore::Node *v46;
  int v47;
  char v48;
  char v49;
  WebCore::Node *v50;
  int v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;

  if (*(_QWORD *)a2)
    v7 = *(_DWORD *)(*(_QWORD *)a2 + 4);
  else
    v7 = 0;
  v8 = *(_QWORD *)a1;
  *(_DWORD *)(v8 + 24) = *(_DWORD *)(*(_QWORD *)a1 + 24) + 2;
  v9 = *((_DWORD *)a1 + 2);
  v40 = (WebCore::Node *)v8;
  v41 = v9;
  v42 = 0;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v40, (uint64_t)&v50);
  v53 = 1;
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v10);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (v7)
  {
    v11 = v7;
    do
    {
      WebCore::previousVisuallyDistinctCandidate(&v50, (uint64_t)&v36);
      if (WebCore::Position::atStartOfTree((WebCore::Position *)&v36))
      {
        v13 = 0;
        BYTE4(v46) = 0;
        LODWORD(v46) = 0;
      }
      else
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v36, (uint64_t)&v40);
        v13 = v40;
        LODWORD(v46) = v41;
        BYTE4(v46) = v42;
      }
      v14 = v36;
      v36 = 0;
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v14, v12);
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
      if (!v13)
        break;
      *((_DWORD *)v13 + 6) += 2;
      v15 = v50;
      v50 = v13;
      if (v15)
      {
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v15, v12);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
      v51 = (int)v46;
      v52 = BYTE4(v46);
      v53 = 1;
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v13, v12);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
      --v11;
    }
    while (v11);
  }
  v16 = *((_QWORD *)a1 + 2);
  *(_DWORD *)(v16 + 24) += 2;
  v17 = *((_DWORD *)a1 + 6);
  v40 = (WebCore::Node *)v16;
  v41 = v17;
  v42 = 0;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v40, (uint64_t)&v46);
  v49 = 1;
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v16, v18);
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
  if (v7)
  {
    while (1)
    {
      WebCore::VisiblePosition::next((unsigned __int8 *)&v46, 0, 0, (uint64_t)&v40);
      v20 = v40;
      if (!v40)
        goto LABEL_44;
      *((_DWORD *)v40 + 6) += 2;
      v21 = v46;
      v46 = v20;
      if (!v21)
        goto LABEL_34;
      if (*((_DWORD *)v21 + 6) != 2)
        break;
      if ((*((_WORD *)v21 + 15) & 0x400) != 0)
        goto LABEL_34;
      WebCore::Node::removedLastRef(v21, v19);
      v20 = v40;
      v47 = v41;
      v48 = v42;
      v49 = (char)v43;
      v40 = 0;
      if (v20)
        goto LABEL_35;
LABEL_37:
      if (!--v7)
        goto LABEL_44;
    }
    *((_DWORD *)v21 + 6) -= 2;
LABEL_34:
    v47 = v41;
    v48 = v42;
    v49 = (char)v43;
    v40 = 0;
LABEL_35:
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20, v19);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
    goto LABEL_37;
  }
LABEL_44:
  WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v50, (uint64_t)&v46, (uint64_t)&v40);
  v23 = v45;
  if (!v45 || ((v24 = v40, v25 = v41, v40 == v43) ? (v26 = v41 == v44) : (v26 = 0), v26))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    if (!v23)
      goto LABEL_65;
LABEL_59:
    v33 = v43;
    v43 = 0;
    if (v33)
    {
      if (*((_DWORD *)v33 + 6) == 2)
      {
        if ((*((_WORD *)v33 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v33, v22);
      }
      else
      {
        *((_DWORD *)v33 + 6) -= 2;
      }
    }
    v34 = v40;
    v40 = 0;
    if (v34)
    {
      if (*((_DWORD *)v34 + 6) == 2)
      {
        if ((*((_WORD *)v34 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v34, v22);
      }
      else
      {
        *((_DWORD *)v34 + 6) -= 2;
      }
    }
    goto LABEL_65;
  }
  *((_DWORD *)v40 + 6) += 2;
  v36 = v24;
  v37 = v25;
  v27 = *(WebCore::Node **)a1;
  *((_DWORD *)v27 + 6) = *(_DWORD *)(*(_QWORD *)a1 + 24) + 2;
  v38 = v27;
  v39 = *((_DWORD *)a1 + 2);
  v29 = WebCore::characterCount((int *)&v36, 1);
  v30 = v38;
  v38 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 2)
    {
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30, v28);
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
  }
  result = (unsigned int *)v36;
  v36 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v28);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (!v45)
  {
    __break(1u);
    return result;
  }
  v58 = 0;
  v56 = 0;
  v57 = v29;
  v55 = 0;
  v54 = -1;
  v32 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v32 = off_1E33ADF90;
  *((_QWORD *)v32 + 1) = &v57;
  *((_QWORD *)v32 + 2) = &v54;
  *((_QWORD *)v32 + 3) = &v58;
  *((_QWORD *)v32 + 4) = &v55;
  v36 = v32;
  WebCore::forEachMatch(&v40, a2, 0, &v36);
  (*(void (**)(WebCore::Node *))(*(_QWORD *)v32 + 8))(v32);
  WebCore::rangeForMatch((uint64_t)&v36, &v40, v58, v55, v56);
  *(_QWORD *)a3 = v36;
  *(_DWORD *)(a3 + 8) = v37;
  *(_QWORD *)(a3 + 16) = v38;
  *(_DWORD *)(a3 + 24) = v39;
  *(_BYTE *)(a3 + 32) = 1;
  if (v45)
    goto LABEL_59;
LABEL_65:
  v35 = v46;
  v46 = 0;
  if (v35)
  {
    if (*((_DWORD *)v35 + 6) == 2)
    {
      if ((*((_WORD *)v35 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v35, v22);
    }
    else
    {
      *((_DWORD *)v35 + 6) -= 2;
    }
  }
  result = (unsigned int *)v50;
  v50 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v22);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::AXObjectCache::rangeForUnorderedCharacterOffsets@<X0>(CharacterOffset *a1@<X1>, CharacterOffset *a2@<X2>, uint64_t a3@<X8>)
{
  CharacterOffset *v5;
  Node *var0;
  Node *v8;
  __int16 v9;
  Node *v10;
  int var2;
  int v12;
  BOOL v13;
  char v14;
  __int16 v15;
  Node *v16;
  int v17;
  int v18;
  char v19;
  WebCore::Node *v20;
  unsigned __int8 v21;
  BOOL v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  unsigned int *result;
  void *v29;
  int v30;
  int v31;
  WebCore::Node *v32;
  int v33;
  int v34;
  WebCore::Node *v35;
  int v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  int v39;
  WebCore::Node *v40;

  v5 = a1;
  var0 = a1->var0.var0;
  if (!a1->var0.var0)
    goto LABEL_77;
  v8 = a2->var0.var0;
  if (!a2->var0.var0)
    goto LABEL_77;
  if (var0 != v8)
  {
    *((_DWORD *)var0 + 6) += 2;
    *((_DWORD *)v8 + 6) += 2;
    if ((*((_WORD *)var0 + 14) & 1) != 0
      || (WebCore::AccessibilityObject::replacedNodeNeedsCharacter((uint64_t)var0, (WebCore::Node *)a1) & 1) != 0)
    {
      goto LABEL_25;
    }
    v9 = *((_WORD *)var0 + 14);
    if ((v9 & 0x10) != 0)
    {
      if ((v9 & 4) == 0 || *(_QWORD *)(*((_QWORD *)var0 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
        goto LABEL_25;
    }
    else if ((v9 & 4) == 0)
    {
      goto LABEL_25;
    }
    v10 = (Node *)*((_QWORD *)var0 + 10);
    if (v10)
    {
      var2 = v5->var2;
      if (!var2)
        goto LABEL_22;
      v12 = var2 - 1;
      do
      {
        v10 = (Node *)*((_QWORD *)v10 + 7);
        v13 = v12-- != 0;
        v14 = v13;
      }
      while (v10 && (v14 & 1) != 0);
      if (v10)
LABEL_22:
        *((_DWORD *)v10 + 6) += 2;
      if (*((_DWORD *)var0 + 6) == 2)
      {
        if ((*((_WORD *)var0 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)var0, a1);
      }
      else
      {
        *((_DWORD *)var0 + 6) -= 2;
      }
LABEL_26:
      if ((*((_WORD *)v8 + 14) & 1) != 0
        || (WebCore::AccessibilityObject::replacedNodeNeedsCharacter((uint64_t)v8, (WebCore::Node *)a1) & 1) != 0)
      {
        goto LABEL_45;
      }
      v15 = *((_WORD *)v8 + 14);
      if ((v15 & 0x10) != 0)
      {
        if ((v15 & 4) == 0 || *(_QWORD *)(*((_QWORD *)v8 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
          goto LABEL_45;
      }
      else if ((v15 & 4) == 0)
      {
        goto LABEL_45;
      }
      v16 = (Node *)*((_QWORD *)v8 + 10);
      if (v16)
      {
        v17 = a2->var2;
        if (!v17)
          goto LABEL_42;
        v18 = v17 - 1;
        do
        {
          v16 = (Node *)*((_QWORD *)v16 + 7);
          v13 = v18-- != 0;
          v19 = v13;
        }
        while (v16 && (v19 & 1) != 0);
        if (v16)
LABEL_42:
          *((_DWORD *)v16 + 6) += 2;
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, a1);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
LABEL_46:
        if (v10)
        {
          if (!v16)
          {
            v23 = 0;
            goto LABEL_73;
          }
          WebCore::AXObjectCache::rangeForNodeContents((WebCore::AXObjectCache *)v10, (WebCore::Node *)a1, (uint64_t)&v38);
          WebCore::AXObjectCache::rangeForNodeContents((WebCore::AXObjectCache *)v16, v20, (uint64_t)&v35);
          v21 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v38, (uint64_t)&v35);
          v23 = v21 != 129 && (char)v21 < 1;
          v24 = v37;
          v37 = 0;
          if (v24)
          {
            if (*((_DWORD *)v24 + 6) == 2)
            {
              if ((*((_WORD *)v24 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v24, a1);
            }
            else
            {
              *((_DWORD *)v24 + 6) -= 2;
            }
          }
          v25 = v35;
          v35 = 0;
          if (v25)
          {
            if (*((_DWORD *)v25 + 6) == 2)
            {
              if ((*((_WORD *)v25 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v25, a1);
            }
            else
            {
              *((_DWORD *)v25 + 6) -= 2;
            }
          }
          v26 = v40;
          v40 = 0;
          if (v26)
          {
            if (*((_DWORD *)v26 + 6) == 2)
            {
              if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v26, a1);
            }
            else
            {
              *((_DWORD *)v26 + 6) -= 2;
            }
          }
          v27 = v38;
          v38 = 0;
          if (v27)
          {
            if (*((_DWORD *)v27 + 6) == 2)
            {
              if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v27, a1);
            }
            else
            {
              *((_DWORD *)v27 + 6) -= 2;
            }
          }
        }
        else
        {
          if (!v16)
            goto LABEL_77;
          v23 = 0;
        }
        if (*((_DWORD *)v16 + 6) == 2)
        {
          if ((*((_WORD *)v16 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v16, a1);
        }
        else
        {
          *((_DWORD *)v16 + 6) -= 2;
        }
        if (!v10)
        {
LABEL_75:
          if (v23)
            goto LABEL_76;
LABEL_77:
          WebCore::boundaryPoint((uint64_t)&v38, a2);
          goto LABEL_78;
        }
LABEL_73:
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10, a1);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
        goto LABEL_75;
      }
LABEL_45:
      v16 = v8;
      goto LABEL_46;
    }
LABEL_25:
    v10 = var0;
    goto LABEL_26;
  }
  if (a1->var2 > a2->var2)
    goto LABEL_77;
LABEL_76:
  WebCore::boundaryPoint((uint64_t)&v38, v5);
  v5 = a2;
LABEL_78:
  result = (unsigned int *)WebCore::boundaryPoint((uint64_t)&v35, v5);
  v30 = v40;
  v31 = v37;
  if ((_BYTE)v40 && (_BYTE)v37)
  {
    v32 = v38;
    *((_DWORD *)v38 + 6) += 2;
    v33 = v39;
    result = (unsigned int *)v35;
    *((_DWORD *)v35 + 6) += 2;
    v34 = v36;
    *(_QWORD *)a3 = v32;
    *(_DWORD *)(a3 + 8) = v33;
    *(_QWORD *)(a3 + 16) = result;
    *(_DWORD *)(a3 + 24) = v34;
    *(_BYTE *)(a3 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    if (!v31)
      goto LABEL_85;
    result = (unsigned int *)v35;
    if (!v35)
      goto LABEL_85;
  }
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)result, v29);
  }
  else
  {
    result[6] -= 2;
  }
LABEL_85:
  if (v30)
  {
    result = (unsigned int *)v38;
    if (v38)
    {
      if (*((_DWORD *)v38 + 6) == 2)
      {
        if ((*((_WORD *)v38 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v38, v29);
      }
      else
      {
        *((_DWORD *)v38 + 6) -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::boundaryPoint(uint64_t this, CharacterOffset *a2)
{
  uint64_t v2;
  Node *var0;
  int var1;
  int var2;
  WebCore::Node *v7;
  int v8;
  Node *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int i;
  uint64_t v14;
  WebCore::Node *v15;
  int v16;
  WebCore::Node *v17[2];
  WebCore::Node *v18;

  v2 = this;
  var0 = a2->var0.var0;
  if (!a2->var0.var0)
    goto LABEL_25;
  var1 = a2->var1;
  var2 = a2->var2;
  *((_DWORD *)var0 + 6) += 2;
  this = WebCore::AccessibilityObject::replacedNodeNeedsCharacter((uint64_t)var0, (WebCore::Node *)a2);
  if ((this & 1) != 0
    || (v8 = var2 + var1, (*((_WORD *)var0 + 14) & 0x10) != 0)
    && *(_QWORD *)(*((_QWORD *)var0 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
  {
    v10 = a2->var2;
    WebCore::AXObjectCache::rangeForNodeContents((WebCore::AXObjectCache *)var0, v7, (uint64_t)v17);
    v11 = WebCore::characterCount((int *)v17, 0);
    v12 = *((_QWORD *)var0 + 6);
    for (i = 0; ; ++i)
    {
      v14 = v12 & 0xFFFFFFFFFFFFLL;
      if (!v14)
        break;
      v12 = *(_QWORD *)(v14 + 48);
    }
    if (v11 >= v10)
      v8 = i;
    else
      v8 = i + 1;
    v9 = (Node *)*((_QWORD *)var0 + 4);
    v15 = v18;
    v18 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v7);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    this = (uint64_t)v17[0];
    v17[0] = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v7);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
    }
    if (v9)
      *((_DWORD *)v9 + 6) += 2;
    if (*((_DWORD *)var0 + 6) == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)var0, v7);
    }
    else
    {
      *((_DWORD *)var0 + 6) -= 2;
    }
    if (v9)
      goto LABEL_23;
LABEL_25:
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 16) = 0;
    return this;
  }
  v9 = var0;
LABEL_23:
  v16 = *((_DWORD *)v9 + 6);
  *((_DWORD *)v9 + 6) = v16 + 2;
  *(_QWORD *)v2 = v9;
  *(_DWORD *)(v2 + 8) = v8;
  *(_BYTE *)(v2 + 16) = 1;
  if (v16)
  {
    *((_DWORD *)v9 + 6) = v16;
  }
  else if ((*((_WORD *)v9 + 15) & 0x400) == 0)
  {
    return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
  }
  return this;
}

WebCore::AXObjectCache *WebCore::AXObjectCache::textMarkerDataForCharacterOffset@<X0>(WebCore::AXObjectCache *this@<X0>, CharacterOffset *a2@<X1>, WebCore::TextMarkerData *a3@<X8>)
{
  Node *var0;
  WebCore::AXObjectCache *v6;
  int v7;
  int v8;
  CharacterOffset v9;

  var0 = a2->var0.var0;
  if (a2->var0.var0)
  {
    v6 = this;
    if ((*((_WORD *)var0 + 14) & 0x10) == 0
      || *(_QWORD *)(*((_QWORD *)var0 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      return WebCore::TextMarkerData::TextMarkerData(a3, v6, a2, 0);
    }
    v7 = *((_DWORD *)var0 + 6);
    *((_DWORD *)var0 + 6) = v7 + 2;
    if (*(_DWORD *)(*((_QWORD *)var0 + 30) + 12) == 2048 || (*((_WORD *)var0 + 115) & 0x400) != 0)
    {
      memset(&v9, 0, 20);
      this = WebCore::TextMarkerData::TextMarkerData(a3, this, &v9, 1);
      v8 = 0;
      v7 = *((_DWORD *)var0 + 6) - 2;
    }
    else
    {
      v8 = 1;
    }
    if (v7)
    {
      *((_DWORD *)var0 + 6) = v7;
    }
    else if ((*((_WORD *)var0 + 15) & 0x400) == 0)
    {
      this = (WebCore::AXObjectCache *)WebCore::Node::removedLastRef((WebCore::Node *)var0, a2);
    }
    if (v8)
      return WebCore::TextMarkerData::TextMarkerData(a3, v6, a2, 0);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return this;
}

unsigned int *WebCore::AXObjectCache::startOrEndCharacterOffsetForRange@<X0>(WebCore::AXObjectCache *this@<X0>, const WebCore::SimpleRange *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v10;
  uint64_t v11;
  unsigned int *result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  WebCore::Node *v22[2];
  WebCore::Node *v23;
  WebCore::Node *v24;
  int v25;
  uint64_t v26;
  int v27;

  v10 = *((_DWORD *)a2 + 6);
  v11 = *((_QWORD *)a2 + 2);
  if ((a3 & 1) == 0 && !v10)
    return WebCore::AXObjectCache::characterOffsetForNodeAndOffset((unsigned int *)this, *((WebCore::AXObjectCache **)a2 + 2), 0, 4, a5);
  if ((*(_WORD *)(v11 + 28) & 1) != 0 && (a3 & 1) == 0)
  {
    WebCore::AXObjectCache::rangeForNodeContents(*((WebCore::AXObjectCache **)a2 + 2), a2, (uint64_t)&v24);
    WebCore::AXObjectCache::traverseToOffsetInRange(a5, (uint64_t)this, &v24, *((unsigned int *)a2 + 6), 8, 0);
    v14 = v26;
    v26 = 0;
    if (!v14)
      goto LABEL_31;
    if (*(_DWORD *)(v14 + 24) != 2)
    {
      *(_DWORD *)(v14 + 24) -= 2;
      goto LABEL_31;
    }
    if ((*(_WORD *)(v14 + 30) & 0x400) != 0)
      goto LABEL_31;
LABEL_41:
    WebCore::Node::removedLastRef((WebCore::Node *)v14, v13);
    goto LABEL_31;
  }
  v15 = *(_QWORD *)a2;
  *(_DWORD *)(v15 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  v24 = (WebCore::Node *)v15;
  v25 = *((_DWORD *)a2 + 2);
  *(_DWORD *)(v11 + 24) += 2;
  v26 = v11;
  v27 = v10;
  if ((*(_BYTE *)(v15 + 28) & 1) != 0)
  {
    WebCore::AXObjectCache::rangeForNodeContents((WebCore::AXObjectCache *)v15, a2, (uint64_t)v22);
    WebCore::AXObjectCache::traverseToOffsetInRange(a5, (uint64_t)this, v22, *((unsigned int *)a2 + 2), 8, 0);
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v13);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
    v18 = v22[0];
    v22[0] = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18, v13);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
    if (a3)
    {
      v26 = 0;
      goto LABEL_29;
    }
    v25 = 0;
    v16 = *(unsigned int *)(a5 + 12);
    v19 = *(_QWORD *)a5;
    *(_QWORD *)a5 = 0;
    if (v19)
    {
      if (*(_DWORD *)(v19 + 24) == 2)
      {
        if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v19, v13);
      }
      else
      {
        *(_DWORD *)(v19 + 24) -= 2;
      }
    }
  }
  else
  {
    v16 = 0;
  }
  if (a3)
    v20 = 1;
  else
    v20 = 2;
  if (a4)
    v21 = v20;
  else
    v21 = v20 | 0x10;
  WebCore::AXObjectCache::traverseToOffsetInRange(a5, (uint64_t)this, &v24, v16, v21, a3 ^ 1);
  v11 = v26;
  v26 = 0;
  if (!v11)
    goto LABEL_31;
LABEL_29:
  if (*(_DWORD *)(v11 + 24) != 2)
  {
    *(_DWORD *)(v11 + 24) -= 2;
    goto LABEL_31;
  }
  if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
  {
    v14 = v11;
    goto LABEL_41;
  }
LABEL_31:
  result = (unsigned int *)v24;
  v24 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v13);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::AXObjectCache::characterOffsetForNodeAndOffset@<X0>(unsigned int *result@<X0>, WebCore::AXObjectCache *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *v10;
  WebCore::Node *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WebCore::Node *v15;
  uint64_t v16;
  WebCore::Node *v17;
  int v18;
  int v19;
  WebCore::Node *v20;
  uint64_t v21;
  void *v22;
  WebCore::Node *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Node *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Node *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  WebCore::Node *v38;
  uint64_t v39;
  unsigned int v40;
  WebCore::Node *v41;
  int v42;
  _BYTE v43[12];
  int v44;

  v7 = (uint64_t)a2;
  v8 = (uint64_t)result;
  if ((a4 & 2) != 0 || (a3 & 0x80000000) == 0 && a4 & 4 | a3)
  {
    WebCore::AXObjectCache::rangeForNodeContents(a2, a2, (uint64_t)&v41);
    WebCore::AXObjectCache::traverseToOffsetInRange((uint64_t)&v38, v8, &v41, a3, a4, 0);
    v11 = v38;
    if (v38)
    {
      if ((a4 & 2) == 0)
      {
        v12 = v40;
        if (v40)
        {
          do
          {
            while (1)
            {
              v13 = *(_QWORD *)(v7 + 56);
              if (!v13)
                break;
              WebCore::AXObjectCache::rangeForNodeContents(*(WebCore::AXObjectCache **)(v7 + 56), v10, (uint64_t)&v34);
              v15 = v41;
              v41 = v34;
              if (v15)
              {
                if (*((_DWORD *)v15 + 6) == 2)
                {
                  if ((*((_WORD *)v15 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v15, v14);
                }
                else
                {
                  *((_DWORD *)v15 + 6) -= 2;
                }
              }
              v42 = v35;
              v16 = *(_QWORD *)&v43[4];
              *(_QWORD *)&v43[4] = v36;
              if (v16)
              {
                if (*(_DWORD *)(v16 + 24) == 2)
                {
                  if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v16, v14);
                }
                else
                {
                  *(_DWORD *)(v16 + 24) -= 2;
                }
              }
              v44 = v37;
              WebCore::AXObjectCache::traverseToOffsetInRange((uint64_t)&v34, v8, &v41, v12, a4, 0);
              v17 = v34;
              if (*((_DWORD *)v11 + 6) == 2)
              {
                if ((*((_WORD *)v11 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v11, v10);
              }
              else
              {
                *((_DWORD *)v11 + 6) -= 2;
              }
              v39 = v35;
              v40 = v36;
              if (v17)
              {
                v12 = v40;
                v11 = v17;
                v7 = v13;
                if (v40)
                  continue;
              }
              goto LABEL_38;
            }
            v7 = *(_QWORD *)(v7 + 32);
          }
          while (v7);
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_DWORD *)(a5 + 16) = 0;
          if (*((_DWORD *)v11 + 6) == 2)
          {
            if ((*((_WORD *)v11 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v11, v10);
          }
          else
          {
            *((_DWORD *)v11 + 6) -= 2;
          }
          goto LABEL_41;
        }
      }
      v17 = v38;
    }
    else
    {
      v17 = 0;
    }
LABEL_38:
    v26 = v39;
    *(_QWORD *)a5 = v17;
    *(_QWORD *)(a5 + 8) = v26;
    *(_DWORD *)(a5 + 16) = v40;
LABEL_41:
    v27 = *(_QWORD *)&v43[4];
    *(_QWORD *)&v43[4] = 0;
    if (v27)
    {
      if (*(_DWORD *)(v27 + 24) == 2)
      {
        if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v27, v10);
      }
      else
      {
        *(_DWORD *)(v27 + 24) -= 2;
      }
    }
    result = (unsigned int *)v41;
    v41 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v10);
      }
      else
      {
        result[6] -= 2;
      }
    }
    return result;
  }
  v18 = -(int)a3;
  if ((int)a3 > 0)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
LABEL_30:
    if (v18 < 1)
      goto LABEL_36;
    *((_DWORD *)v20 + 6) += 2;
    result = (unsigned int *)WebCore::AXObjectCache::characterOffsetForNodeAndOffset(&v41, v8, v20, (v21 - v18), 4);
    v23 = v41;
    v24 = *((_DWORD *)v20 + 6) - 2;
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) != 0)
      {
        v19 = v42;
        v21 = *(_QWORD *)v43;
        goto LABEL_85;
      }
      result = WebCore::Node::removedLastRef(v20, v22);
      v24 = *((_DWORD *)v20 + 6);
    }
    else
    {
      *((_DWORD *)v20 + 6) = v24;
    }
    v19 = v42;
    v21 = *(_QWORD *)v43;
    v25 = v24 - 2;
    if (v25)
    {
      *((_DWORD *)v20 + 6) = v25;
LABEL_35:
      v20 = v23;
LABEL_36:
      *(_QWORD *)a5 = v20;
      *(_DWORD *)(a5 + 8) = v19;
      *(_QWORD *)(a5 + 12) = v21;
      return result;
    }
LABEL_85:
    v33 = v21;
    if ((*((_WORD *)v20 + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef(v20, v22);
    v21 = v33;
    goto LABEL_35;
  }
  v28 = 0;
  v29 = 0;
  while (1)
  {
    v30 = *(_QWORD *)(v7 + 32);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 64) & 0xFFFFFFFFFFFFLL;
      if (v31)
      {
        if ((*(_BYTE *)(v31 + 45) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1955E0998);
        }
        if ((*(_BYTE *)(v31 + 45) & 1) == 0)
        {
          v32 = *(_QWORD *)(*(_QWORD *)(v31 + 24) + 8);
          if (v32)
          {
            if ((*(_WORD *)(v32 + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v32 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24)
              && (*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL) == 0)
            {
              break;
            }
          }
        }
      }
    }
    while ((*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v7 = *(_QWORD *)(v7 + 32);
      if (!v7)
        goto LABEL_69;
    }
    v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
    result = (unsigned int *)WebCore::AXObjectCache::characterOffsetForNodeAndOffset(&v41, v8, v7, 0, 2);
    v20 = v41;
    if (v28)
    {
      if (*((_DWORD *)v28 + 6) == 2)
      {
        if ((*((_WORD *)v28 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(v28, a2);
      }
      else
      {
        *((_DWORD *)v28 + 6) -= 2;
      }
    }
    v18 -= v29;
    v19 = v42;
    v21 = *(_QWORD *)v43;
    v29 = *(_DWORD *)v43;
    if (*(_DWORD *)v43 == v18)
    {
      LODWORD(v21) = v18;
      goto LABEL_30;
    }
    if ((v18 & 0x80000000) == 0)
    {
      v28 = v20;
      if (*(int *)v43 <= v18)
        continue;
    }
    goto LABEL_30;
  }
LABEL_69:
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 16) = 0;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v28, a2);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::AXObjectCache::textMarkerDataForNextCharacterOffset@<X0>(unsigned int *this@<X0>, const CharacterOffset *a2@<X1>, uint64_t a3@<X8>)
{
  Node *var0;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  Node *v9;
  void *v10;
  int var1;
  int var2;
  Node *v13;
  uint64_t v14;
  _BOOL4 v16;
  Node *v17;
  int v18;
  void *v19;
  int v20;
  int v21;
  uint64_t v22;
  WebCore::Node *v23;
  char v24;
  uint64_t v25;
  Node *v26;
  char v27;
  VisiblePosition v28;
  char v29;
  CharacterOffset v30;
  CharacterOffset v31;
  __int16 v32;
  char v33;
  _OWORD v34[2];
  WebCore::Node *v35;
  int v36;
  int v37;
  _BYTE v38[28];
  unsigned __int8 v39;
  uint64_t v40;
  int v41;

  var0 = a2->var0.var0;
  if (!a2->var0.var0)
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return this;
  }
  v5 = this;
  memset(v34, 0, 28);
  v32 = 0;
  v33 = 0;
  v6 = *((_DWORD *)var0 + 6);
  *((_DWORD *)var0 + 6) = v6 + 2;
  v7 = *(_QWORD *)&a2->var1;
  v31.var0.var0 = var0;
  *(_QWORD *)&v31.var1 = v7;
  v31.var3 = a2->var3;
  *((_DWORD *)var0 + 6) = v6 + 4;
  v8 = *(_QWORD *)&a2->var1;
  v30.var0.var0 = var0;
  *(_QWORD *)&v30.var1 = v8;
  v30.var3 = a2->var3;
  while (1)
  {
    v9 = var0;
    WebCore::AXObjectCache::nextCharacterOffset((unint64_t)v5, &v31, 0, (uint64_t)v38);
    var0 = *(Node **)v38;
    *(_QWORD *)v38 = 0;
    v31.var0.var0 = var0;
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
    *(_QWORD *)&v31.var1 = *(_QWORD *)&v38[8];
    v31.var3 = *(_DWORD *)&v38[16];
    if (!var0)
      break;
    var1 = v31.var1;
    if (v9 == var0)
      goto LABEL_35;
    if (v31.var1 <= 0)
    {
      var2 = v31.var2;
      if (v31.var2 <= 0)
      {
        if (!v31.var0.var0)
          goto LABEL_30;
        WebCore::AXObjectCache::visiblePositionFromCharacterOffset(&v31, (uint64_t)v38);
        WebCore::startOfLine((uint64_t)&v28, (WebCore::VisiblePosition *)v38, (WebCore::Node *)1, 0);
        WebCore::AXObjectCache::characterOffsetFromVisiblePosition(v5, &v28, (uint64_t)&v35);
        v13 = v28.var0.var0.var0;
        v28.var0.var0.var0 = 0;
        if (v13)
        {
          if (*((_DWORD *)v13 + 6) == 2)
          {
            if ((*((_WORD *)v13 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13, v10);
          }
          else
          {
            *((_DWORD *)v13 + 6) -= 2;
          }
        }
        v14 = *(_QWORD *)v38;
        *(_QWORD *)v38 = 0;
        if (v14)
        {
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14, v10);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
        }
        if (!v35 || var0 != (Node *)v35)
        {
          if (v35)
          {
            if (*((_DWORD *)v35 + 6) == 2)
            {
              if ((*((_WORD *)v35 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v35, v10);
            }
            else
            {
              *((_DWORD *)v35 + 6) -= 2;
            }
          }
LABEL_30:
          WebCore::AXObjectCache::nextCharacterOffset((unint64_t)v5, &v31, 0, (uint64_t)v38);
          v17 = *(Node **)v38;
          v31.var0.var0 = *(Node **)v38;
          if (*((_DWORD *)var0 + 6) == 2)
          {
            if ((*((_WORD *)var0 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)var0, v10);
          }
          else
          {
            *((_DWORD *)var0 + 6) -= 2;
          }
          *(_QWORD *)&v31.var1 = *(_QWORD *)&v38[8];
          v31.var3 = *(_DWORD *)&v38[16];
          var0 = v17;
          if (!v17)
            break;
          goto LABEL_33;
        }
        v16 = var1 != v36 || var2 != v37;
        if (*((_DWORD *)var0 + 6) == 2)
        {
          if ((*((_WORD *)var0 + 15) & 0x400) != 0)
          {
            if (v16)
              goto LABEL_30;
          }
          else
          {
            WebCore::Node::removedLastRef((WebCore::Node *)var0, v10);
            if (v16)
              goto LABEL_30;
          }
        }
        else
        {
          *((_DWORD *)var0 + 6) -= 2;
          if (v16)
            goto LABEL_30;
        }
      }
    }
LABEL_33:
    if (var0 != v9)
      goto LABEL_37;
    var1 = v31.var1;
LABEL_35:
    var0 = v9;
    if (var1 == v30.var1)
    {
      var0 = v9;
      if (v31.var2 == v30.var2)
        break;
    }
LABEL_37:
    WebCore::AXObjectCache::textMarkerDataForCharacterOffset((WebCore::AXObjectCache *)v5, &v31, (WebCore::TextMarkerData *)v38);
    v34[0] = *(_OWORD *)v38;
    *(_OWORD *)((char *)v34 + 12) = *(_OWORD *)&v38[12];
    v18 = v39;
    WebCore::AXObjectCache::rangeForUnorderedCharacterOffsets(&v30, &v31, (uint64_t)&v28);
    if (!v29)
      goto LABEL_46;
    WebCore::TextIterator::TextIterator((uint64_t)v38, &v28, 0);
    if (!v40)
    {
      WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v38, v19);
LABEL_46:
      v24 = 1;
      goto LABEL_47;
    }
    v20 = 0;
    do
    {
      v21 = v41;
      if (!v41)
      {
        v22 = WebCore::TextIterator::node((int32x2_t *)v38);
        v21 = WebCore::AccessibilityObject::replacedNodeNeedsCharacter(v22, v23);
      }
      v20 += v21;
      WebCore::TextIterator::advance((WebCore::TextIterator *)v38, (WTF::StringImpl *)v19);
    }
    while (v40);
    WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v38, v19);
    if (!v20)
      goto LABEL_46;
    v24 = 0;
LABEL_47:
    *((_DWORD *)var0 + 6) += 2;
    v30.var0.var0 = var0;
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
    *(_QWORD *)&v30.var1 = *(_QWORD *)&v31.var1;
    v30.var3 = v31.var3;
    if (v29)
    {
      v25 = *(_QWORD *)&v28.var1;
      *(_QWORD *)&v28.var1 = 0;
      if (v25)
      {
        if (*(_DWORD *)(v25 + 24) == 2)
        {
          if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v25, v10);
        }
        else
        {
          *(_DWORD *)(v25 + 24) -= 2;
        }
      }
      v26 = v28.var0.var0.var0;
      v28.var0.var0.var0 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 6) == 2)
        {
          if ((*((_WORD *)v26 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v26, v10);
        }
        else
        {
          *((_DWORD *)v26 + 6) -= 2;
        }
      }
    }
    if (v18)
      v27 = 1;
    else
      v27 = v24;
    if ((v27 & 1) == 0)
    {
      *(_OWORD *)a3 = v34[0];
      *(_OWORD *)(a3 + 12) = *(_OWORD *)((char *)v34 + 12);
      *(_BYTE *)(a3 + 28) = 0;
      *(_WORD *)(a3 + 29) = v32;
      *(_BYTE *)(a3 + 31) = v33;
      goto LABEL_84;
    }
  }
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
LABEL_84:
  if (v30.var0.var0)
  {
    if (*((_DWORD *)v30.var0.var0 + 6) == 2)
    {
      if ((*((_WORD *)v30.var0.var0 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v30.var0.var0, v10);
    }
    else
    {
      *((_DWORD *)v30.var0.var0 + 6) -= 2;
    }
  }
  this = (unsigned int *)v31.var0.var0;
  if (v31.var0.var0)
  {
    if (*((_DWORD *)v31.var0.var0 + 6) == 2)
    {
      if ((*((_WORD *)v31.var0.var0 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v31.var0.var0, v10);
    }
    else
    {
      *((_DWORD *)v31.var0.var0 + 6) -= 2;
    }
  }
  return this;
}

unint64_t WebCore::AXObjectCache::nextCharacterOffset@<X0>(unint64_t this@<X0>, CharacterOffset *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  Node *var0;
  unsigned int *v8;
  uint64_t var2;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WebCore::Node *v14;
  _QWORD v15[2];
  int v16;
  WebCore::Node *v17[2];
  WebCore::Node *v18;
  char v19;

  var0 = a2->var0.var0;
  if (!a2->var0.var0)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
  v8 = (unsigned int *)this;
  *((_DWORD *)var0 + 6) += 2;
  var2 = a2->var2;
  v10 = *((_QWORD *)var0 + 8) & 0xFFFFFFFFFFFFLL;
  if (v10)
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 560))(v10, var2);
  else
    v11 = (var2 + 1);
  this = (unint64_t)WebCore::AXObjectCache::characterOffsetForNodeAndOffset(v8, (WebCore::AXObjectCache *)var0, v11, 1, a4);
  v13 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    *(_DWORD *)(v13 + 24) += 2;
    if ((a3 & 1) != 0
      || (this = WebCore::AccessibilityObject::replacedNodeNeedsCharacter(v13, (WebCore::Node *)v12), (this & 1) != 0))
    {
LABEL_9:
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          this = (unint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v13, v12);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
      goto LABEL_11;
    }
    if ((*(_WORD *)(v13 + 28) & 0x10) != 0)
    {
      if ((Node *)v13 == var0
        || *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
      {
        goto LABEL_9;
      }
    }
    else if ((Node *)v13 == var0)
    {
      goto LABEL_9;
    }
    this = (unint64_t)WebCore::AXObjectCache::rangeForUnorderedCharacterOffsets(a2, (CharacterOffset *)a4, (uint64_t)v17);
    if (v19)
    {
      this = WebCore::characterCount((int *)v17, 0);
      if (this > (v11 - a2->var2))
      {
        this = (unint64_t)WebCore::AXObjectCache::characterOffsetForNodeAndOffset(v8, (WebCore::AXObjectCache *)v13, 0, 4, (uint64_t)v15);
        *(_QWORD *)a4 = v15[0];
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
            this = (unint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v13, v12);
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
        *(_QWORD *)(a4 + 8) = v15[1];
        *(_DWORD *)(a4 + 16) = v16;
      }
      if (v19)
      {
        v14 = v18;
        v18 = 0;
        if (v14)
        {
          if (*((_DWORD *)v14 + 6) == 2)
          {
            if ((*((_WORD *)v14 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v14, v12);
          }
          else
          {
            *((_DWORD *)v14 + 6) -= 2;
          }
        }
        this = (unint64_t)v17[0];
        v17[0] = 0;
        if (this)
        {
          if (*(_DWORD *)(this + 24) == 2)
          {
            if ((*(_WORD *)(this + 30) & 0x400) == 0)
              this = (unint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v12);
          }
          else
          {
            *(_DWORD *)(this + 24) -= 2;
          }
        }
      }
    }
    goto LABEL_9;
  }
LABEL_11:
  if (*((_DWORD *)var0 + 6) == 2)
  {
    if ((*((_WORD *)var0 + 15) & 0x400) == 0)
      return (unint64_t)WebCore::Node::removedLastRef((WebCore::Node *)var0, v12);
  }
  else
  {
    *((_DWORD *)var0 + 6) -= 2;
  }
  return this;
}

void WebCore::AXObjectCache::textMarkerDataForPreviousCharacterOffset(WebCore::AXObjectCache *this@<X0>, const CharacterOffset *a2@<X1>, uint64_t a3@<X8>)
{
  Node *var0;
  int v6;
  uint64_t v7;
  uint64_t v8;
  Node *v9;
  void *v10;
  BOOL v11;
  int v12;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  WebCore::Node *v17;
  char v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  char v21;
  WebCore::Node *v22[2];
  WebCore::Node *v23;
  char v24;
  CharacterOffset v25;
  CharacterOffset v26;
  _OWORD v27[2];
  _BYTE v28[28];
  unsigned __int8 v29;
  uint64_t v30;
  int v31;

  var0 = a2->var0.var0;
  if (!a2->var0.var0)
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  memset(v27, 0, 28);
  v6 = *((_DWORD *)var0 + 6);
  *((_DWORD *)var0 + 6) = v6 + 2;
  v7 = *(_QWORD *)&a2->var1;
  v26.var0.var0 = var0;
  *(_QWORD *)&v26.var1 = v7;
  v26.var3 = a2->var3;
  *((_DWORD *)var0 + 6) = v6 + 4;
  v8 = *(_QWORD *)&a2->var1;
  v25.var0.var0 = var0;
  *(_QWORD *)&v25.var1 = v8;
  v25.var3 = a2->var3;
  while (1)
  {
    v9 = var0;
    WebCore::AXObjectCache::previousCharacterOffset((unsigned int *)this, &v26, 0, (uint64_t)v28);
    var0 = *(Node **)v28;
    v26.var0.var0 = *(Node **)v28;
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
    *(_QWORD *)&v26.var1 = *(_QWORD *)&v28[8];
    v26.var3 = *(_DWORD *)&v28[16];
    v11 = var0 == 0;
    if (!var0)
      break;
    if (var0 == v9 && v26.var1 == v25.var1 && v26.var2 == v25.var2)
    {
      var0 = v9;
      break;
    }
    WebCore::AXObjectCache::textMarkerDataForCharacterOffset(this, &v26, (WebCore::TextMarkerData *)v28);
    v27[0] = *(_OWORD *)v28;
    *(_OWORD *)((char *)v27 + 12) = *(_OWORD *)&v28[12];
    v12 = v29;
    WebCore::AXObjectCache::rangeForUnorderedCharacterOffsets(&v26, &v25, (uint64_t)v22);
    if (!v24)
      goto LABEL_18;
    WebCore::TextIterator::TextIterator((uint64_t)v28, v22, 0);
    if (!v30)
    {
      WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v28, v13);
LABEL_18:
      v18 = 1;
      goto LABEL_19;
    }
    v14 = 0;
    do
    {
      v15 = v31;
      if (!v31)
      {
        v16 = WebCore::TextIterator::node((int32x2_t *)v28);
        v15 = WebCore::AccessibilityObject::replacedNodeNeedsCharacter(v16, v17);
      }
      v14 += v15;
      WebCore::TextIterator::advance((WebCore::TextIterator *)v28, (WTF::StringImpl *)v13);
    }
    while (v30);
    WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v28, v13);
    if (!v14)
      goto LABEL_18;
    v18 = 0;
LABEL_19:
    *((_DWORD *)var0 + 6) += 2;
    v25.var0.var0 = var0;
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
    *(_QWORD *)&v25.var1 = *(_QWORD *)&v26.var1;
    v25.var3 = v26.var3;
    if (v24)
    {
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        if (*((_DWORD *)v19 + 6) == 2)
        {
          if ((*((_WORD *)v19 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v19, v10);
        }
        else
        {
          *((_DWORD *)v19 + 6) -= 2;
        }
      }
      v20 = v22[0];
      v22[0] = 0;
      if (v20)
      {
        if (*((_DWORD *)v20 + 6) == 2)
        {
          if ((*((_WORD *)v20 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v20, v10);
        }
        else
        {
          *((_DWORD *)v20 + 6) -= 2;
        }
      }
    }
    if (v12)
      v21 = 1;
    else
      v21 = v18;
    if ((v21 & 1) == 0)
    {
      v11 = 0;
      *(_OWORD *)a3 = v27[0];
      *(_OWORD *)(a3 + 12) = *(_OWORD *)((char *)v27 + 12);
      *(_DWORD *)(a3 + 28) = 0;
      v9 = var0;
      goto LABEL_44;
    }
  }
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
LABEL_44:
  v25.var0.var0 = 0;
  if (*((_DWORD *)v9 + 6) == 2)
  {
    if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
  }
  else
  {
    *((_DWORD *)v9 + 6) -= 2;
  }
  v26.var0.var0 = 0;
  if (!v11)
  {
    if (*((_DWORD *)var0 + 6) == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)var0, v10);
    }
    else
    {
      *((_DWORD *)var0 + 6) -= 2;
    }
  }
}

void WebCore::AXObjectCache::visiblePositionFromCharacterOffset(CharacterOffset *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  int v10;
  WebCore::Node *v11;
  char v12;

  if (a1->var0.var0 && (WebCore::AXObjectCache::rangeForUnorderedCharacterOffsets(a1, a1, (uint64_t)&v9), v12))
  {
    v4 = v9;
    *(_DWORD *)(v9 + 24) += 2;
    v6 = v4;
    v7 = v10;
    v8 = 0;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v6, a2);
    *(_BYTE *)(a2 + 16) = 1;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v5);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 1;
  }
}

unsigned int *WebCore::AXObjectCache::characterOffsetFromVisiblePosition@<X0>(unsigned int *this@<X0>, VisiblePosition *a2@<X1>, uint64_t a3@<X8>)
{
  Node *var0;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v12;
  int v13;
  BOOL v14;
  unsigned int *v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  int v22;
  void *v23;
  WebCore::Node *v24;
  int v25;
  WebCore::Node *v26;
  int v27;
  uint64_t v28;
  WebCore::Node *v29;
  int v30;
  int v31;
  void *v32;
  const WebCore::VisiblePosition *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  uint64_t v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  char v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  int v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  int v51;
  WebCore::Node *v52;
  WebCore::Node *v53;
  WebCore::Node *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WebCore::Node *v65;
  int v66;
  char v67;
  WebCore::Node *v68;
  int v69;
  char v70;
  WebCore::Node *v71;
  int v72;
  char v73;
  WebCore::Node *v74;
  int v75;
  char v76;
  WebCore::Node *v77;
  int v78;
  char v79;
  WebCore::Node *v80;
  WebCore::Node *v81;
  WebCore::Node *v82;
  int v83;
  char v84;
  unsigned __int8 v85;
  unsigned int *v86;
  unsigned int var1;
  char v88;
  WebCore::Node *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[3];

  var0 = a2->var0.var0.var0;
  if (!a2->var0.var0.var0)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
    return this;
  }
  v5 = this;
  v6 = *((_DWORD *)var0 + 6);
  *((_DWORD *)var0 + 6) = v6 + 2;
  v86 = (unsigned int *)var0;
  var1 = a2->var0.var1;
  v88 = *((_BYTE *)&a2->var0 + 12);
  *((_DWORD *)var0 + 6) = v6 + 4;
  if ((*((_BYTE *)var0 + 28) & 1) != 0)
  {
    WebCore::AXObjectCache::rangeForNodeContents((WebCore::AXObjectCache *)var0, (WebCore::Node *)a2, (uint64_t)&v77);
    if ((v88 & 8) == 0 && ((v13 = v88 & 7, v13 != 4) ? (v14 = v13 == 2) : (v14 = 1), v14))
    {
      v15 = v86;
      if (v86)
      {
        v16 = v86[6];
        v86[6] = v16 + 2;
        v17 = *((_WORD *)v15 + 14);
        if ((v17 & 1) != 0)
        {
          v63 = *((_QWORD *)v15 + 10);
          if (v63)
            v19 = *(unsigned int *)(v63 + 4);
          else
            v19 = 0;
        }
        else if ((v17 & 4) != 0 && (v18 = *((_QWORD *)v15 + 10)) != 0)
        {
          LODWORD(v19) = 0;
          do
          {
            v19 = (v19 + 1);
            v18 = *(_QWORD *)(v18 + 56);
          }
          while (v18);
        }
        else
        {
          v19 = (*(unsigned int (**)(unsigned int *))(*(_QWORD *)v15 + 208))(v15) ^ 1;
          v16 = v15[6] - 2;
        }
        if (v16)
        {
          v15[6] = v16;
        }
        else if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v12);
        }
      }
      else
      {
        v19 = 0;
      }
    }
    else
    {
      v19 = var1;
    }
    WebCore::AXObjectCache::traverseToOffsetInRange(a3, (uint64_t)v5, &v77, v19, 8, 0);
    v20 = v80;
    v80 = 0;
    if (v20)
    {
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v20, v8);
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
    }
    v21 = v77;
    v77 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21, v8);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    goto LABEL_148;
  }
  v7 = WebCore::AXObjectCache::getOrCreate((uint64_t)this, (uint64_t)var0, 0);
  if (!v7)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_148;
  }
  v9 = (_QWORD *)v7;
  v10 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_29;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_29:
  ++*(_QWORD *)(v10 + 8);
  v22 = __ldxr((unsigned __int8 *)v10);
  v64 = (uint64_t)v5;
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_33:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  (*(void (**)(WebCore::Node **__return_ptr, _QWORD *))(*v9 + 1968))(&v77, v9);
  v82 = v77;
  v83 = v78;
  v84 = v79;
  v85 = v80;
  v24 = v81;
  v77 = 0;
  v81 = 0;
  if (v24)
  {
    v25 = *((_DWORD *)v24 + 6) - 2;
    if (*((_DWORD *)v24 + 6) != 2)
    {
LABEL_36:
      *((_DWORD *)v24 + 6) = v25;
      goto LABEL_37;
    }
    if ((*((_WORD *)v24 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v24, v23);
      v24 = v77;
      v77 = 0;
      if (v24)
      {
        v25 = *((_DWORD *)v24 + 6) - 2;
        if (*((_DWORD *)v24 + 6) == 2)
        {
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v24, v23);
          goto LABEL_37;
        }
        goto LABEL_36;
      }
    }
  }
LABEL_37:
  v26 = v82;
  if (v82)
  {
    v27 = *((_DWORD *)v82 + 6);
    v75 = v83;
    v76 = v84;
    *((_DWORD *)v82 + 6) = v27 + 4;
  }
  else
  {
    v75 = v83;
    v76 = v84;
  }
  v28 = 0;
  v74 = v26;
  v71 = v26;
  v72 = v75;
  v73 = v76;
  while (v74 && !WebCore::Position::equals((WebCore::Position *)&v86, (const WebCore::Position *)&v74))
  {
    v29 = v82;
    if (v82)
    {
      v30 = *((_DWORD *)v82 + 6);
      v69 = v83;
      v70 = v84;
      *((_DWORD *)v82 + 6) = v30 + 4;
    }
    else
    {
      v69 = v83;
      v70 = v84;
    }
    v68 = v29;
    v65 = v29;
    v66 = v83;
    v67 = v84;
    WebCore::nextVisuallyDistinctCandidate((uint64_t)&v65, 0, (uint64_t)v92);
    v31 = v85;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v92, (uint64_t)&v89);
    LOBYTE(v91) = 1;
    v34 = v89;
    if (!v31 && v89)
    {
      *((_DWORD *)v89 + 6) += 2;
      v77 = v34;
      v78 = v90;
      v79 = BYTE4(v90);
      LOBYTE(v80) = 0;
      if (!WebCore::inSameLine((WebCore *)&v89, (const WebCore::VisiblePosition *)&v77, v33))
        LOBYTE(v91) = 0;
      v48 = v77;
      v77 = 0;
      if (v48)
      {
        if (*((_DWORD *)v48 + 6) == 2)
        {
          if ((*((_WORD *)v48 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v48, v32);
        }
        else
        {
          *((_DWORD *)v48 + 6) -= 2;
        }
      }
      v34 = v89;
    }
    v89 = 0;
    v35 = v82;
    v82 = v34;
    if (!v35)
      goto LABEL_48;
    if (*((_DWORD *)v35 + 6) != 2)
    {
      *((_DWORD *)v35 + 6) -= 2;
LABEL_48:
      v83 = v90;
      v84 = BYTE4(v90);
      v85 = v91;
      v89 = 0;
      goto LABEL_49;
    }
    if ((*((_WORD *)v35 + 15) & 0x400) != 0)
      goto LABEL_48;
    WebCore::Node::removedLastRef(v35, v32);
    v47 = v89;
    v83 = v90;
    v84 = BYTE4(v90);
    v85 = v91;
    v89 = 0;
    if (v47)
    {
      if (*((_DWORD *)v47 + 6) == 2)
      {
        if ((*((_WORD *)v47 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v47, v32);
      }
      else
      {
        *((_DWORD *)v47 + 6) -= 2;
      }
    }
LABEL_49:
    v36 = v92[0];
    v92[0] = 0;
    if (v36)
    {
      if (*(_DWORD *)(v36 + 24) == 2)
      {
        if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v36, v32);
      }
      else
      {
        *(_DWORD *)(v36 + 24) -= 2;
      }
    }
    v37 = v65;
    v65 = 0;
    if (v37)
    {
      if (*((_DWORD *)v37 + 6) == 2)
      {
        if ((*((_WORD *)v37 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v37, v32);
      }
      else
      {
        *((_DWORD *)v37 + 6) -= 2;
      }
    }
    v38 = v82;
    if (v82)
      *((_DWORD *)v82 + 6) += 2;
    LODWORD(v77) = v83;
    BYTE4(v77) = v84;
    v39 = v74;
    v74 = v38;
    if (v39)
    {
      if (*((_DWORD *)v39 + 6) == 2)
      {
        if ((*((_WORD *)v39 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v39, v32);
      }
      else
      {
        *((_DWORD *)v39 + 6) -= 2;
      }
    }
    v75 = (int)v77;
    v76 = BYTE4(v77);
    if (WebCore::Position::equals((WebCore::Position *)&v74, (const WebCore::Position *)&v68)
      || WebCore::Position::equals((WebCore::Position *)&v71, (const WebCore::Position *)&v74))
    {
      v40 = 0;
    }
    else
    {
      v41 = v28 + 1;
      if (v74 != v68)
      {
        WebCore::previousVisuallyDistinctCandidate(&v82, (uint64_t)v92);
        if (WebCore::Position::atStartOfTree((WebCore::Position *)v92))
        {
          v90 = 0;
          v91 = 0;
          v89 = 0;
        }
        else
        {
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v92, (uint64_t)&v77);
          v89 = v77;
          LODWORD(v90) = v78;
          BYTE4(v90) = v79;
        }
        LOBYTE(v91) = 1;
        v43 = v92[0];
        v92[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)(v43 + 24) == 2)
          {
            if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v43, v42);
          }
          else
          {
            *(_DWORD *)(v43 + 24) -= 2;
          }
        }
        v44 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v89);
        v45 = v89;
        v89 = 0;
        if (v45)
        {
          if (*((_DWORD *)v45 + 6) == 2)
          {
            if ((*((_WORD *)v45 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v45, v23);
          }
          else
          {
            *((_DWORD *)v45 + 6) -= 2;
          }
        }
        if (v44 == 10)
          v28 = v28;
        else
          v28 = v41;
        goto LABEL_79;
      }
      if ((*((_WORD *)v74 + 14) & 1) != 0)
      {
        v28 = v75 + v41 + ~v69;
LABEL_79:
        v40 = 1;
        goto LABEL_80;
      }
      v40 = 1;
      v28 = (v28 + 1);
    }
LABEL_80:
    v46 = v68;
    v68 = 0;
    if (v46)
    {
      if (*((_DWORD *)v46 + 6) == 2)
      {
        if ((*((_WORD *)v46 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v46, v23);
      }
      else
      {
        *((_DWORD *)v46 + 6) -= 2;
      }
    }
    if ((v40 & 1) == 0)
      break;
  }
  WebCore::AXObjectCache::rangeForNodeContents((WebCore::AXObjectCache *)var0, (WebCore::Node *)v23, (uint64_t)&v77);
  WebCore::AXObjectCache::traverseToOffsetInRange(a3, v64, &v77, v28, 1, 0);
  v49 = v80;
  v80 = 0;
  if (v49)
  {
    if (*((_DWORD *)v49 + 6) == 2)
    {
      if ((*((_WORD *)v49 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v49, v8);
    }
    else
    {
      *((_DWORD *)v49 + 6) -= 2;
    }
  }
  v50 = v77;
  v77 = 0;
  if (v50)
  {
    if (*((_DWORD *)v50 + 6) == 2)
    {
      if ((*((_WORD *)v50 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v50, v8);
    }
    else
    {
      *((_DWORD *)v50 + 6) -= 2;
    }
  }
  v51 = *(_DWORD *)(a3 + 16);
  if (v51 >= 1
    && *(_QWORD *)a3
    && WebCore::isRendererReplacedElement(*(_QWORD *)(*(_QWORD *)a3 + 64) & 0xFFFFFFFFFFFFLL))
  {
    *(_DWORD *)(a3 + 12) += v51;
  }
  v52 = v71;
  v71 = 0;
  if (v52)
  {
    if (*((_DWORD *)v52 + 6) == 2)
    {
      if ((*((_WORD *)v52 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v52, v8);
    }
    else
    {
      *((_DWORD *)v52 + 6) -= 2;
    }
  }
  v53 = v74;
  v74 = 0;
  if (v53)
  {
    if (*((_DWORD *)v53 + 6) == 2)
    {
      if ((*((_WORD *)v53 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v53, v8);
    }
    else
    {
      *((_DWORD *)v53 + 6) -= 2;
    }
  }
  v54 = v82;
  v82 = 0;
  if (v54)
  {
    if (*((_DWORD *)v54 + 6) == 2)
    {
      if ((*((_WORD *)v54 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v54, v8);
    }
    else
    {
      *((_DWORD *)v54 + 6) -= 2;
    }
  }
  v55 = v9[1];
  if (__ldaxr((unsigned __int8 *)v55))
  {
    __clrex();
    goto LABEL_135;
  }
  if (__stxr(1u, (unsigned __int8 *)v55))
LABEL_135:
    MEMORY[0x19AEA534C](v55);
  v57 = *(_QWORD *)(v55 + 8);
  v58 = v57 - 1;
  *(_QWORD *)(v55 + 8) = v57 - 1;
  if (v57 == 1)
  {
    v62 = *(_QWORD *)(v55 + 16);
    v59 = *(_QWORD *)(v55 + 24);
    *(_QWORD *)(v55 + 24) = 0;
    v60 = v62 != 0;
  }
  else
  {
    v59 = 0;
    v60 = 1;
  }
  v61 = __ldxr((unsigned __int8 *)v55);
  if (v61 != 1)
  {
    __clrex();
LABEL_143:
    WTF::Lock::unlockSlow((WTF::Lock *)v55);
    if (!v58)
      goto LABEL_144;
    goto LABEL_148;
  }
  if (__stlxr(0, (unsigned __int8 *)v55))
    goto LABEL_143;
  if (!v58)
  {
LABEL_144:
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    if (!v60)
      WTF::fastFree((WTF *)v55, v8);
  }
LABEL_148:
  if (*((_DWORD *)var0 + 6) == 2)
  {
    if ((*((_WORD *)var0 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)var0, v8);
  }
  else
  {
    *((_DWORD *)var0 + 6) -= 2;
  }
  this = v86;
  v86 = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this, v8);
    }
    else
    {
      this[6] -= 2;
    }
  }
  return this;
}

uint64_t WebCore::AXObjectCache::objectForTextMarkerData(WebCore::AXObjectCache *this, const TextMarkerData *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t objectID;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;

  if (a2->ignored)
    return 0;
  v5 = *((_QWORD *)this + 7);
  if (!v5)
    return 0;
  objectID = a2->objectID;
  v7 = *(_DWORD *)(v5 - 8);
  v8 = (~(objectID << 32) + objectID) ^ ((unint64_t)(~(objectID << 32) + objectID) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(_QWORD *)(v5 + 16 * v11);
  if (v12 != objectID)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(_QWORD *)(v5 + 16 * v11);
      ++v13;
      if (v12 == objectID)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  v14 = *(_QWORD **)(v5 + 16 * v11 + 8);
  if (!v14)
    return 0;
  v15 = v14[1];
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v15);
LABEL_14:
  ++*(_QWORD *)(v15 + 8);
  v17 = __ldxr((unsigned __int8 *)v15);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v18 = (*(uint64_t (**)(_QWORD *))(*v14 + 840))(v14);
  if (v18)
    v2 = WebCore::AXObjectCache::getOrCreate((uint64_t)this, v18, 0);
  else
    v2 = 0;
  v20 = v14[1];
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v20))
  {
    goto LABEL_26;
  }
  MEMORY[0x19AEA534C](v20);
LABEL_26:
  v22 = *(_QWORD *)(v20 + 8);
  v23 = v22 - 1;
  *(_QWORD *)(v20 + 8) = v22 - 1;
  if (v22 == 1)
  {
    v27 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 24) = 0;
    v25 = v27 != 0;
  }
  else
  {
    v24 = 0;
    v25 = 1;
  }
  v26 = __ldxr((unsigned __int8 *)v20);
  if (v26 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v20))
    {
      if (v23)
        return v2;
      goto LABEL_34;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v20);
  if (v23)
    return v2;
LABEL_34:
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (!v25)
    WTF::fastFree((WTF *)v20, v19);
  return v2;
}

unsigned int *WebCore::AXObjectCache::textMarkerDataForVisiblePosition@<X0>(unsigned int *this@<X0>, VisiblePosition *a2@<X1>, uint64_t a3@<X8>)
{
  Node *var0;
  WebCore::AXObjectCache *v6;
  int v7;
  char v8;
  int v9;
  unsigned __int8 v11;
  int v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  BOOL v16;
  WebCore::AXObjectCache **v17;
  WebCore::AXObjectCache *v18;
  WebCore::Node *v19;
  WebCore::AXObjectCache *v20;
  int32x2_t v21;
  Node *v22;
  int var1;
  char v24;
  Node *v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  CharacterOffset v31;
  WebCore::AXObjectCache *v32;
  uint64_t v33;

  var0 = a2->var0.var0.var0;
  if (!a2->var0.var0.var0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return this;
  }
  v6 = (WebCore::AXObjectCache *)this;
  v7 = *((_DWORD *)var0 + 6);
  *((_DWORD *)var0 + 6) = v7 + 2;
  v8 = *((_BYTE *)&a2->var0 + 12);
  v9 = v7 + 4;
  *((_DWORD *)var0 + 6) = v9;
  if ((*((_WORD *)var0 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)var0 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
    && (*(_DWORD *)(*((_QWORD *)var0 + 30) + 12) == 2048 || (*((_WORD *)var0 + 115) & 0x400) != 0))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    goto LABEL_20;
  }
  WebCore::AXObjectCache::characterOffsetFromVisiblePosition(this, a2, (uint64_t)&v31);
  if ((v8 & 7) != 4 && (v8 & 7) != 2)
  {
    v11 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
    if ((v11 & 1) != 0)
    {
      v15 = WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)var0 + 5) + 8));
      *(_DWORD *)(v15 + 24) += 2;
      v33 = v15;
      if (*(_QWORD *)(v15 + 1944))
        v16 = *(_BYTE *)(v15 + 3405) == 0;
      else
        v16 = 0;
      if (v16)
      {
        v17 = (WebCore::AXObjectCache **)v15;
        v18 = *(WebCore::AXObjectCache **)(v15 + 1488);
        if (v18)
        {
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v33);
        }
        else
        {
          v20 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
          v32 = WebCore::AXObjectCache::AXObjectCache(v20, (WebCore::Document *)v17);
          std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v17 + 186, &v32);
          std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v32);
          WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
          v18 = v17[186];
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v33);
          if (!v18)
            goto LABEL_15;
        }
        ++*((_DWORD *)v18 + 2);
        v21 = *(int32x2_t *)&v31.var1;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_DWORD *)a3 = *((_QWORD *)v18 + 2);
        v22 = a2->var0.var0.var0;
        if (a2->var0.var0.var0)
          *((_DWORD *)v22 + 6) += 2;
        var1 = a2->var0.var1;
        v24 = *((_BYTE *)&a2->var0 + 12);
        *(_DWORD *)(a3 + 4) = WebCore::nodeID(v18, (WebCore::AXObjectCache *)v22, v19);
        v25 = a2->var0.var0.var0;
        if (a2->var0.var0.var0)
        {
          if ((v24 & 8) == 0 && ((v24 & 7) == 4 || (v24 & 7) == 2))
          {
            if (v22)
            {
              v26 = *((_DWORD *)v22 + 6);
              *((_DWORD *)v22 + 6) = v26 + 2;
              v27 = *((_WORD *)v22 + 14);
              if ((v27 & 1) != 0)
              {
                v30 = *((_QWORD *)v22 + 10);
                if (v30)
                  var1 = *(_DWORD *)(v30 + 4);
                else
                  var1 = 0;
              }
              else if ((v27 & 4) != 0 && (v28 = *((_QWORD *)v22 + 10)) != 0)
              {
                var1 = 0;
                do
                {
                  ++var1;
                  v28 = *(_QWORD *)(v28 + 56);
                }
                while (v28);
              }
              else
              {
                var1 = (*(uint64_t (**)(Node *))(*(_QWORD *)v22 + 208))(v22) ^ 1;
                v26 = *((_DWORD *)v22 + 6) - 2;
              }
              if (v26)
              {
                *((_DWORD *)v22 + 6) = v26;
              }
              else if ((*((_WORD *)v22 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v22, a2);
              }
            }
            else
            {
              var1 = 0;
            }
          }
          LODWORD(v25) = var1 & ~(var1 >> 31);
        }
        *(_DWORD *)(a3 + 8) = (_DWORD)v25;
        *(_DWORD *)(a3 + 12) = v24 & 7;
        *(_BYTE *)(a3 + 16) = a2->var1;
        *(int32x2_t *)(a3 + 20) = vmax_s32(v21, 0);
        *(_BYTE *)(a3 + 28) = 0;
        if (v22)
        {
          if (*((_DWORD *)v22 + 6) == 2)
          {
            if ((*((_WORD *)v22 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v22, a2);
          }
          else
          {
            *((_DWORD *)v22 + 6) -= 2;
          }
        }
        *(_BYTE *)(a3 + 32) = 1;
        v29 = *((_DWORD *)v18 + 2);
        if (!v29)
        {
          __break(0xC471u);
          JUMPOUT(0x1955E2344);
        }
        *((_DWORD *)v18 + 2) = v29 - 1;
        goto LABEL_16;
      }
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v33);
    }
LABEL_15:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    goto LABEL_16;
  }
  WebCore::AXObjectCache::textMarkerDataForCharacterOffset(v6, &v31, (WebCore::TextMarkerData *)a3);
  *(_BYTE *)(a3 + 32) = 1;
LABEL_16:
  this = (unsigned int *)v31.var0.var0;
  if (v31.var0.var0)
  {
    if (*((_DWORD *)v31.var0.var0 + 6) == 2)
    {
      if ((*((_WORD *)v31.var0.var0 + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v31.var0.var0, a2);
    }
    else
    {
      *((_DWORD *)v31.var0.var0 + 6) -= 2;
    }
  }
  v9 = *((_DWORD *)var0 + 6);
LABEL_20:
  v12 = v9 - 2;
  if (v12)
  {
    *((_DWORD *)var0 + 6) = v12;
  }
  else
  {
    v14 = *((_WORD *)var0 + 15);
    if ((v14 & 0x400) != 0)
      goto LABEL_28;
    this = WebCore::Node::removedLastRef((WebCore::Node *)var0, a2);
    v12 = *((_DWORD *)var0 + 6);
  }
  v13 = v12 - 2;
  if (v13)
  {
    *((_DWORD *)var0 + 6) = v13;
    return this;
  }
  v14 = *((_WORD *)var0 + 15);
LABEL_28:
  if ((v14 & 0x400) == 0)
    return WebCore::Node::removedLastRef((WebCore::Node *)var0, a2);
  return this;
}

_BYTE *WTF::append<char16_t,1024ul>(_BYTE *result, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  void *v11;
  void *v12;
  _QWORD v13[2];

  v3 = result;
  v13[0] = a2;
  v13[1] = a3;
  v4 = *((unsigned int *)result + 2);
  v5 = *((unsigned int *)result + 3);
  v6 = v5 + a3;
  if (v6 <= v4)
  {
LABEL_17:
    *((_DWORD *)v3 + 3) = v6;
    return WTF::StringView::getCharacters<char16_t>(v13, (char *)(*(_QWORD *)v3 + 2 * v5));
  }
  v7 = v4 + (v4 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= v6)
    v9 = v5 + a3;
  else
    v9 = v8;
  v10 = *(_BYTE **)result;
  if (v9 < 0x401)
  {
    v11 = result + 16;
    *(_QWORD *)v3 = v3 + 16;
    *((_DWORD *)v3 + 2) = 1024;
    goto LABEL_12;
  }
  if (!(v9 >> 31))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(2 * v9));
    *((_DWORD *)v3 + 2) = v9;
    *(_QWORD *)v3 = v11;
LABEL_12:
    memcpy(v11, v10, 2 * v5);
    if (v3 + 16 != v10 && v10)
    {
      if (*(_BYTE **)v3 == v10)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      WTF::fastFree((WTF *)v10, v12);
    }
    goto LABEL_17;
  }
  __break(0xC471u);
  return result;
}

unint64_t WebCore::AXObjectCache::localCaretRectForCharacterOffset(WebCore::AXObjectCache *this, WebCore::RenderObject **a2, CharacterOffset *a3)
{
  WebCore::RenderObject *v4;
  WebCore::Node *v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  WebCore::Node *v9;
  WebCore::RenderObject *v10;
  WebCore::RenderObject *v11;
  unsigned int v12;
  unint64_t v13;
  WebCore::LayoutIntegration::LineLayout *v14;
  int v15;
  void *v16;
  _BOOL4 v17;
  int v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  WebCore::Node *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  int v27;
  WebCore::Node *v28;
  int v29;
  WebCore::Node *v30;
  char v31;
  char v32;
  char *v33;

  if (!a3->var0.var0)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    return v12 | (v13 << 32);
  }
  v4 = (WebCore::RenderObject *)(*((_QWORD *)a3->var0.var0 + 8) & 0xFFFFFFFFFFFFLL);
  *a2 = v4;
  if (!v4)
  {
    v12 = 0;
    v13 = 0;
    return v12 | (v13 << 32);
  }
  WebCore::AXObjectCache::rangeForUnorderedCharacterOffsets(a3, a3, (uint64_t)&v28);
  if (!v31)
  {
    v13 = 0;
    v12 = 0;
    return v12 | (v13 << 32);
  }
  v5 = v28;
  *((_DWORD *)v28 + 6) += 2;
  v23 = v5;
  LODWORD(v24) = v29;
  BYTE4(v24) &= 0xF0u;
  v6 = *((_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 52) & 7) == 1)
    {
LABEL_6:
      v7 = (*(unsigned __int8 *)(v6 + 123) >> 2) & 1;
      goto LABEL_7;
    }
    v21 = *(_QWORD *)(v6 + 32);
    if (v21)
    {
      v6 = *(_QWORD *)(v21 + 8);
      if (v6)
      {
        while ((*(_BYTE *)(v6 + 52) & 7) != 1)
        {
          v22 = *(_QWORD *)(v6 + 32);
          if (!v22)
            goto LABEL_60;
          v7 = 0;
          v6 = *(_QWORD *)(v22 + 8);
          if (!v6)
            goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
  }
LABEL_60:
  v7 = 0;
LABEL_7:
  WebCore::Position::inlineBoxAndOffset((WebCore::Position *)&v23, (const WebCore::Node *)1, v7, (uint64_t)v26);
  v9 = v23;
  v23 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v8);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v26) & 1) != 0)
  {
    v11 = *a2;
  }
  else
  {
    if (v27 == -1)
      goto LABEL_20;
    v23 = (WebCore::Node *)&v33;
    v11 = (WebCore::RenderObject *)((uint64_t (*)(WebCore::Node **, _BYTE *))off_1E3370A98[v27])(&v23, v26);
    *a2 = v11;
  }
  if (*((_BYTE *)v11 + 46) != 17)
    goto LABEL_36;
  v14 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(v11, v10);
  if (!v14)
    goto LABEL_21;
  WebCore::LayoutIntegration::LineLayout::boxFor(v14, v11, (uint64_t)&v23);
  v15 = v25;
  if ((_DWORD)v25 != -1)
    goto LABEL_22;
LABEL_20:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_21:
  v24 = 0;
  v23 = 0;
  v15 = 1;
  v25 = 1;
LABEL_22:
  v33 = &v32;
  if (((unsigned int (*)(char **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v33, &v23)&& (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v26) & 1) != 0)
  {
    v18 = 1;
  }
  else
  {
    v17 = v27 != -1 && v27 == v25;
    if ((_DWORD)v25 == -1)
      v18 = v27 == -1;
    else
      v18 = v17;
    if ((_DWORD)v25 != -1 && v17)
    {
      v33 = &v32;
      v18 = ((uint64_t (*)(char **, WebCore::Node **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v25])(&v33, &v23, v26);
    }
  }
  if ((_DWORD)v25 != -1)
    ((void (*)(char **, WebCore::Node **))off_1E3370AA8[v25])(&v33, &v23);
  if (!v18)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_38;
  }
  v11 = *a2;
LABEL_36:
  v19 = WebCore::computeLocalCaretRect(v11, (WebCore::InlineIterator::BoxIterator *)v26, 0);
  v12 = v19;
  v13 = HIDWORD(v19);
LABEL_38:
  if (v27 != -1)
    ((void (*)(WebCore::Node **, _BYTE *))off_1E3370AA8[v27])(&v23, v26);
  if (v31)
  {
    if (v30)
    {
      if (*((_DWORD *)v30 + 6) == 2)
      {
        if ((*((_WORD *)v30 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v30, v16);
      }
      else
      {
        *((_DWORD *)v30 + 6) -= 2;
      }
    }
    if (v28)
    {
      if (*((_DWORD *)v28 + 6) == 2)
      {
        if ((*((_WORD *)v28 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v28, v16);
      }
      else
      {
        *((_DWORD *)v28 + 6) -= 2;
      }
    }
  }
  return v12 | (v13 << 32);
}

unint64_t WebCore::AXObjectCache::absoluteCaretBoundsForCharacterOffset(WebCore::AXObjectCache *this, CharacterOffset *a2)
{
  void *v3;
  WebCore::RenderBlock **v4;
  Node *var0;
  void *v6;
  BOOL *v7;
  void *v9;
  unint64_t v10;
  void *v11;
  WebCore::RenderObject *v12;
  WebCore *v13;

  v12 = 0;
  v13 = 0;
  v10 = WebCore::AXObjectCache::localCaretRectForCharacterOffset(this, &v12, a2);
  v11 = v3;
  var0 = a2->var0.var0;
  if (var0)
  {
    *((_DWORD *)var0 + 6) += 2;
    v10 = (unint64_t)WebCore::localCaretRectInRendererForRect((WebCore *)&v10, (WebCore::LayoutRect *)var0, v12, (WebCore::RenderObject *)&v13, v4);
    v11 = v6;
    if (*((_DWORD *)var0 + 6) == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)var0, v6);
    }
    else
    {
      *((_DWORD *)var0 + 6) -= 2;
    }
  }
  else
  {
    v10 = (unint64_t)WebCore::localCaretRectInRendererForRect((WebCore *)&v10, 0, v12, (WebCore::RenderObject *)&v13, v4);
    v11 = v9;
  }
  return WebCore::absoluteBoundsForLocalCaretRect(v13, (WebCore::RenderBlock *)&v10, 0, v7);
}

unsigned int *WebCore::AXObjectCache::characterOffsetForPoint@<X0>(unsigned int *this@<X0>, const WebCore::IntPoint *a2@<X1>, WebCore::AXCoreObject *a3@<X2>, uint64_t a4@<X8>)
{
  WebCore::AXObjectCache *v5;
  WebCore::Node *v6;
  void *v7;
  int v8;
  char v9;
  void *v10;
  WebCore::Node *v11;
  int v12;
  char v13;
  WebCore::Node *v14;
  int v15;
  char v16;
  WebCore::Node *v17;
  int v18;
  char v19;
  WebCore::Node *v20;
  int v21;
  unsigned __int8 v22;

  if (!a3)
    goto LABEL_18;
  v5 = (WebCore::AXObjectCache *)this;
  (*(void (**)(WebCore::Node **__return_ptr, WebCore::AXCoreObject *, const WebCore::IntPoint *))(*(_QWORD *)a3 + 2072))(&v11, a3, a2);
  v6 = v11;
  if (v11)
  {
    *((_DWORD *)v11 + 6) += 2;
    v14 = v6;
    v15 = v12;
    v16 = v13;
    WebCore::makeBoundaryPoint((uint64_t *)&v14, (uint64_t)&v20);
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v7);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  else
  {
    v14 = 0;
    v15 = v12;
    v16 = v13;
    WebCore::makeBoundaryPoint((uint64_t *)&v14, (uint64_t)&v20);
  }
  v8 = v22;
  if (v22)
  {
    v6 = v20;
    *((_DWORD *)v20 + 6) += 2;
    v14 = v6;
    v15 = v21;
    v17 = v6;
    v18 = v21;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    LOBYTE(v14) = 0;
  }
  v19 = v9;
  this = (unsigned int *)v11;
  v11 = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this, v7);
    }
    else
    {
      this[6] -= 2;
    }
  }
  if (v8)
  {
    WebCore::AXObjectCache::startOrEndCharacterOffsetForRange(v5, (const WebCore::SimpleRange *)&v14, 1, 0, a4);
    if (v6)
    {
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v6, v10);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
    }
    this = (unsigned int *)v14;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v14, v10);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
  }
  else
  {
LABEL_18:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return this;
}

unsigned int *WebCore::AXObjectCache::endCharacterOffsetOfLine@<X0>(unsigned int *this@<X0>, CharacterOffset *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  void *v5;
  Node *var0;
  VisiblePosition v7;
  WebCore::Node *v8[3];

  if (a2->var0.var0)
  {
    v4 = this;
    WebCore::AXObjectCache::visiblePositionFromCharacterOffset(a2, (uint64_t)v8);
    WebCore::endOfLine((uint64_t *)&v7, (uint64_t)v8, 1, 0);
    WebCore::AXObjectCache::characterOffsetFromVisiblePosition(v4, &v7, a3);
    var0 = v7.var0.var0.var0;
    v7.var0.var0.var0 = 0;
    if (var0)
    {
      if (*((_DWORD *)var0 + 6) == 2)
      {
        if ((*((_WORD *)var0 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)var0, v5);
      }
      else
      {
        *((_DWORD *)var0 + 6) -= 2;
      }
    }
    this = (unsigned int *)v8[0];
    v8[0] = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)this, v5);
      }
      else
      {
        this[6] -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return this;
}

unsigned int *WebCore::AXObjectCache::characterOffsetForIndex@<X0>(unsigned int *this@<X0>, const WebCore::AXCoreObject *a2@<X2>, WebCore::Node *a3@<X1>, WebCore::Node **a4@<X8>)
{
  Node *v4;
  uint64_t v5;
  unsigned int *v9;
  int v10;
  BOOL v12;
  void *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int *v21;
  WebCore::Node *v22;
  BOOL v27;
  int v28;
  WebCore::Node *v29;
  BOOL v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t j;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  BOOL v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  int var2;
  int var1;
  Node *var0;
  char v62;
  uint64_t *v63;
  WebCore::Node *v64;
  uint64_t v65;
  int v66;
  WebCore::Node *v67;
  int v68;
  int v69;
  WebCore::Node *v70[2];
  int v71;
  WebCore::Node *v72[2];
  WebCore::Node *v73;
  char v74;
  CharacterOffset v75;
  VisiblePosition v76;

  if (!a2)
  {
    *a4 = 0;
    a4[1] = 0;
    *((_DWORD *)a4 + 4) = 0;
    return this;
  }
  v9 = this;
  (*(void (**)(VisiblePosition *__return_ptr, const WebCore::AXCoreObject *))(*(_QWORD *)a2 + 2104))(&v76, a2);
  WebCore::AXObjectCache::characterOffsetFromVisiblePosition(v9, &v76, (uint64_t)&v75);
  v10 = (*(uint64_t (**)(const WebCore::AXCoreObject *))(*(_QWORD *)a2 + 1456))(a2);
  v12 = (v10 - 101) <= 0x19 && ((1 << (v10 - 101)) & 0x3000001) != 0 || v10 == 19;
  if (v12
    && v75.var0.var0
    && (*((_WORD *)v75.var0.var0 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)v75.var0.var0 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
  {
    v75.var2 = 1;
  }
  (*(void (**)(WebCore::Node **__return_ptr, const WebCore::AXCoreObject *))(*(_QWORD *)a2 + 1960))(v72, a2);
  if (v74)
  {
    WebCore::AXObjectCache::startOrEndCharacterOffsetForRange((WebCore::AXObjectCache *)v9, (const WebCore::SimpleRange *)v72, 1, 1, (uint64_t)v70);
    if (v74)
    {
      WebCore::AXObjectCache::startOrEndCharacterOffsetForRange((WebCore::AXObjectCache *)v9, (const WebCore::SimpleRange *)v72, 0, 1, (uint64_t)&v67);
      v14 = v70[0];
      if (v70[0])
        *((_DWORD *)v70[0] + 6) += 2;
      *a4 = v14;
      a4[1] = v70[1];
      v63 = (uint64_t *)(a4 + 1);
      *((_DWORD *)a4 + 4) = v71;
      v15 = v67;
      if ((int)a3 < 1)
        goto LABEL_155;
      v16 = v68;
      v17 = v69;
      if (!v75.var0.var0)
      {
        v28 = 1;
        do
        {
          WebCore::AXObjectCache::nextCharacterOffset((unint64_t)v9, (CharacterOffset *)a4, 0, (uint64_t)&v64);
          v29 = v64;
          *a4 = v64;
          if (v14)
          {
            if (*((_DWORD *)v14 + 6) == 2)
            {
              if ((*((_WORD *)v14 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v14, v13);
            }
            else
            {
              *((_DWORD *)v14 + 6) -= 2;
            }
          }
          *v63 = v65;
          *((_DWORD *)a4 + 4) = v66;
          v34 = (*((_DWORD *)a4 + 3) != v17 || *((_DWORD *)a4 + 2) != v16 || v29 != v15 || v15 == 0 || v29 == 0)
             && v28++ < (int)a3;
          v14 = v29;
        }
        while (v34);
        goto LABEL_155;
      }
      var0 = v75.var0.var0;
      var2 = v75.var2;
      var1 = v75.var1;
      v18 = 1;
      v20 = *((_DWORD *)a4 + 2);
      v19 = *((_DWORD *)a4 + 3);
      while (!v14 || v14 != (WebCore::Node *)var0 || v20 != var1 || v19 != var2)
      {
        v21 = v9;
        WebCore::AXObjectCache::nextCharacterOffset((unint64_t)v9, (CharacterOffset *)a4, 0, (uint64_t)&v64);
        v22 = v64;
        *a4 = v64;
        if (v14)
        {
          if (*((_DWORD *)v14 + 6) == 2)
          {
            if ((*((_WORD *)v14 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v14, v13);
          }
          else
          {
            *((_DWORD *)v14 + 6) -= 2;
          }
        }
        *v63 = v65;
        *((_DWORD *)a4 + 4) = v66;
        v20 = *((_DWORD *)a4 + 2);
        v19 = *((_DWORD *)a4 + 3);
        v27 = (v19 != v17 || v20 != v16 || v22 != v15 || v15 == 0 || v22 == 0) && v18++ < (int)a3;
        v14 = v22;
        v9 = v21;
        if (!v27)
          goto LABEL_155;
      }
      v4 = var0;
      v35 = *((_WORD *)var0 + 14);
      if ((v35 & 2) == 0
        && ((v35 & 0x10) == 0
         || *(_QWORD *)(*((_QWORD *)var0 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::brTag + 24)))
      {
        goto LABEL_155;
      }
      WebCore::AXObjectCache::nextCharacterOffset((unint64_t)v9, &v75, 0, (uint64_t)&v64);
      a3 = v64;
      if (!v64 || HIDWORD(v65))
      {
LABEL_151:
        if (v64)
        {
          if (*((_DWORD *)v64 + 6) == 2)
          {
            if ((*((_WORD *)v64 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v64, v13);
          }
          else
          {
            *((_DWORD *)v64 + 6) -= 2;
          }
        }
        v15 = v67;
LABEL_155:
        if (v15)
        {
          if (*((_DWORD *)v15 + 6) == 2)
          {
            if ((*((_WORD *)v15 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v15, v13);
          }
          else
          {
            *((_DWORD *)v15 + 6) -= 2;
          }
        }
        if (v70[0])
        {
          if (*((_DWORD *)v70[0] + 6) == 2)
          {
            if ((*((_WORD *)v70[0] + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v70[0], v13);
          }
          else
          {
            *((_DWORD *)v70[0] + 6) -= 2;
          }
        }
        if (v74)
        {
          v57 = v73;
          v73 = 0;
          if (v57)
          {
            if (*((_DWORD *)v57 + 6) == 2)
            {
              if ((*((_WORD *)v57 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v57, v13);
            }
            else
            {
              *((_DWORD *)v57 + 6) -= 2;
            }
          }
          v58 = v72[0];
          v72[0] = 0;
          if (v58)
          {
            if (*((_DWORD *)v58 + 6) == 2)
            {
              if ((*((_WORD *)v58 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v58, v13);
            }
            else
            {
              *((_DWORD *)v58 + 6) -= 2;
            }
          }
        }
        goto LABEL_168;
      }
      v36 = 0;
      *((_DWORD *)v64 + 6) += 2;
      v37 = (uint64_t)a3;
      do
      {
        if (!WebCore::Node::hasEditableStyle(v37, 0))
          break;
        if ((*(_WORD *)(v37 + 28) & 8) != 0)
          v36 = v37;
        i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 8) + 1272);
        if (i)
        {
          if ((*(_WORD *)(i + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
          {
            for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
            {
              if ((*(_WORD *)(i + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
              {
                break;
              }
            }
          }
          else
          {
            i = 0;
          }
        }
        if (i == v37)
          break;
        v37 = *(_QWORD *)(v37 + 32);
      }
      while (v37);
      v39 = (uint64_t)a3;
      if ((*((_WORD *)a3 + 14) & 8) == 0)
      {
        v39 = *((_QWORD *)a3 + 4);
        if (!v39 || (*(_WORD *)(v39 + 28) & 8) == 0)
        {
          v5 = v36;
          goto LABEL_108;
        }
      }
      do
      {
        v40 = WebCore::AXObjectCache::getOrCreate((uint64_t)v9, v39, 0);
        if (!v40
          || ((v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 1456))(v40),
               (v41 - 101) <= 0x19)
            ? (v42 = ((1 << (v41 - 101)) & 0x3000001) == 0)
            : (v42 = 1),
              v42 ? (v43 = v41 == 19) : (v43 = 1),
              v5 = v39,
              !v43))
        {
          v5 = v36;
        }
        v39 = *(_QWORD *)(v39 + 32);
        if (!v39)
          break;
        v36 = v5;
      }
      while ((*(_WORD *)(v39 + 28) & 8) != 0);
      v4 = v75.var0.var0;
      if (v75.var0.var0)
      {
LABEL_108:
        v44 = 0;
        *((_DWORD *)v4 + 6) += 2;
        v45 = (uint64_t)v4;
        do
        {
          if (!WebCore::Node::hasEditableStyle(v45, 0))
            break;
          if ((*(_WORD *)(v45 + 28) & 8) != 0)
            v44 = v45;
          j = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 5) + 8) + 1272);
          if (j)
          {
            if ((*(_WORD *)(j + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
            {
              for (j = *(_QWORD *)(j + 80); j; j = *(_QWORD *)(j + 56))
              {
                if ((*(_WORD *)(j + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                {
                  break;
                }
              }
            }
            else
            {
              j = 0;
            }
          }
          if (j == v45)
            break;
          v45 = *(_QWORD *)(v45 + 32);
        }
        while (v45);
        v47 = 0;
        v48 = (uint64_t)v4;
        if ((*((_WORD *)v4 + 14) & 8) != 0)
          goto LABEL_126;
        goto LABEL_124;
      }
    }
    else
    {
      __break(1u);
    }
    v44 = 0;
    v47 = 1;
LABEL_124:
    v48 = *((_QWORD *)v4 + 4);
    if (!v48 || (*(_WORD *)(v48 + 28) & 8) == 0)
    {
LABEL_139:
      if ((v47 & 1) == 0)
      {
        if (*((_DWORD *)v4 + 6) == 2)
        {
          if ((*((_WORD *)v4 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v4, v13);
        }
        else
        {
          *((_DWORD *)v4 + 6) -= 2;
        }
      }
      if (*((_DWORD *)a3 + 6) == 2)
      {
        if ((*((_WORD *)a3 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a3, v13);
      }
      else
      {
        *((_DWORD *)a3 + 6) -= 2;
      }
      if (v5 == v44)
      {
        v55 = v64;
        if (v64)
          *((_DWORD *)v64 + 6) += 2;
        v56 = *a4;
        *a4 = v55;
        if (v56)
        {
          if (*((_DWORD *)v56 + 6) == 2)
          {
            if ((*((_WORD *)v56 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v56, v13);
          }
          else
          {
            *((_DWORD *)v56 + 6) -= 2;
          }
        }
        *v63 = v65;
        *((_DWORD *)v63 + 2) = v66;
      }
      goto LABEL_151;
    }
LABEL_126:
    v62 = v47;
    v49 = (uint64_t)v9;
    v50 = v44;
    do
    {
      v51 = WebCore::AXObjectCache::getOrCreate(v49, v48, 0);
      if (!v51
        || ((v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 1456))(v51), (v52 - 101) <= 0x19)
          ? (v53 = ((1 << (v52 - 101)) & 0x3000001) == 0)
          : (v53 = 1),
            v53 ? (v54 = v52 == 19) : (v54 = 1),
            v44 = v48,
            !v54))
      {
        v44 = v50;
      }
      v48 = *(_QWORD *)(v48 + 32);
      if (!v48)
        break;
      v50 = v44;
    }
    while ((*(_WORD *)(v48 + 28) & 8) != 0);
    v47 = v62;
    goto LABEL_139;
  }
  *a4 = 0;
  a4[1] = 0;
  *((_DWORD *)a4 + 4) = 0;
LABEL_168:
  if (v75.var0.var0)
  {
    if (*((_DWORD *)v75.var0.var0 + 6) == 2)
    {
      if ((*((_WORD *)v75.var0.var0 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v75.var0.var0, v13);
    }
    else
    {
      *((_DWORD *)v75.var0.var0 + 6) -= 2;
    }
  }
  this = (unsigned int *)v76.var0.var0.var0;
  v76.var0.var0.var0 = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this, v13);
    }
    else
    {
      this[6] -= 2;
    }
  }
  return this;
}

const WebCore::Node *WebCore::AXObjectCache::rootAXEditableElement(WebCore::AXObjectCache *this, const WebCore::Node *a2)
{
  const WebCore::Node *v2;
  const WebCore::Node *v4;
  const WebCore::Node *v5;
  uint64_t i;
  const WebCore::Node *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  BOOL v11;

  v2 = a2;
  v4 = 0;
  if (a2)
  {
    v5 = a2;
    do
    {
      if (!WebCore::Node::hasEditableStyle((uint64_t)v5, 0))
        break;
      if ((*((_WORD *)v5 + 14) & 8) != 0)
        v4 = v5;
      i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 5) + 8) + 1272);
      if (i)
      {
        if ((*(_WORD *)(i + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          i = 0;
        }
      }
      if ((const WebCore::Node *)i == v5)
        break;
      v5 = (const WebCore::Node *)*((_QWORD *)v5 + 4);
    }
    while (v5);
    if ((*((_WORD *)v2 + 14) & 8) != 0)
      goto LABEL_20;
  }
  v2 = (const WebCore::Node *)*((_QWORD *)v2 + 4);
  if (v2)
  {
    if ((*((_WORD *)v2 + 14) & 8) != 0)
    {
LABEL_20:
      v7 = v4;
      do
      {
        v8 = WebCore::AXObjectCache::getOrCreate((uint64_t)this, (uint64_t)v2, 0);
        if (!v8
          || ((v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1456))(v8), (v9 - 101) <= 0x19)
            ? (v10 = ((1 << (v9 - 101)) & 0x3000001) == 0)
            : (v10 = 1),
              v10 ? (v11 = v9 == 19) : (v11 = 1),
              v4 = v2,
              !v11))
        {
          v4 = v7;
        }
        v2 = (const WebCore::Node *)*((_QWORD *)v2 + 4);
        if (!v2)
          break;
        v7 = v4;
      }
      while ((*((_WORD *)v2 + 14) & 8) != 0);
    }
  }
  return v4;
}

WebCore::Node *WebCore::AXObjectCache::prepareForDocumentDestruction(WebCore::AXObjectCache *this, const WebCore::Document *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  WebCore::Node *result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::Node **v32;
  WebCore::Node **v33;
  uint64_t v34;
  WebCore::Node **v35;
  WebCore::Node **v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  WebCore::Node **v40;
  _QWORD v41[3];
  WebCore::Node *v42;

  v40 = 0;
  WebCore::filterWeakListHashSetForRemoval<WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((WebCore::AXObjectCache *)((char *)this + 512), (uint64_t)a2, (uint64_t *)&v40);
  WebCore::filterWeakListHashSetForRemoval<WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((WebCore::AXObjectCache *)((char *)this + 584), (uint64_t)a2, (uint64_t *)&v40);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E3370B38;
  v4[1] = a2;
  v4[2] = &v40;
  v41[0] = v4;
  WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 56, v41);
  (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = off_1E3370B60;
  v5[1] = a2;
  v5[2] = &v40;
  v41[0] = v5;
  WTF::WeakHashSet<WebCore::HTMLTableElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 58, v41);
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E3370B38;
  v6[1] = a2;
  v6[2] = &v40;
  v41[0] = v6;
  WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 68, v41);
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = off_1E3370B38;
  v7[1] = a2;
  v7[2] = &v40;
  v41[0] = v7;
  WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 77, v41);
  (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E3370B38;
  v8[1] = a2;
  v8[2] = &v40;
  v41[0] = v8;
  WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 79, v41);
  result = (WebCore::Node *)(*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  v11 = *((_QWORD *)this + 83);
  if (!v11)
  {
    v13 = 0;
    v12 = 0;
LABEL_10:
    v15 = v13;
    v13 = v11 + 16 * v12;
    if (!v11)
    {
      v16 = 0;
      goto LABEL_14;
    }
    goto LABEL_8;
  }
  v12 = *(unsigned int *)(v11 - 4);
  v13 = v11 + 16 * v12;
  if (!*(_DWORD *)(v11 - 12))
    goto LABEL_10;
  if (!(_DWORD)v12)
  {
    v15 = *((_QWORD *)this + 83);
    goto LABEL_13;
  }
  v14 = 16 * v12;
  v15 = *((_QWORD *)this + 83);
  while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
  {
    v15 += 16;
    v14 -= 16;
    if (!v14)
    {
      v15 = v13;
      break;
    }
  }
LABEL_8:
  LODWORD(v12) = *(_DWORD *)(v11 - 4);
LABEL_13:
  v16 = v11 + 16 * v12;
LABEL_14:
  if (v16 != v15)
  {
    while (!*(_QWORD *)(*(_QWORD *)v15 + 8))
    {
      v17 = v15 + 16;
      v15 = v13;
      if (v17 != v13)
      {
        v15 = v17;
        while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
        {
          v15 += 16;
          if (v15 == v13)
          {
            v15 = v13;
            break;
          }
        }
      }
      if (v15 == v16)
      {
        v15 = v16;
        break;
      }
    }
  }
  if (v11)
    v18 = v11 + 16 * *(unsigned int *)(v11 - 4);
  else
    v18 = 0;
  while (v15 != v18)
  {
    v19 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if (v19 && ((*(_BYTE *)(v19 + 22) & 8) == 0 || *(const WebCore::Document **)(*(_QWORD *)(v19 + 40) + 8) == a2))
    {
      *(_DWORD *)(v19 + 24) += 2;
      v42 = (WebCore::Node *)v19;
      WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v40, (uint64_t *)&v42, (uint64_t)v41);
      result = v42;
      v42 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
    }
    v20 = v13;
    if (v15 + 16 != v13)
    {
      v20 = v15 + 16;
      while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
      {
        v20 += 16;
        if (v20 == v13)
        {
          v20 = v13;
          break;
        }
      }
    }
    v15 = v16;
    if (v20 != v16)
    {
      v15 = v20;
      if (!*(_QWORD *)(*(_QWORD *)v20 + 8))
      {
        while (1)
        {
          v21 = v15 + 16;
          v15 = v13;
          if (v21 != v13)
          {
            v15 = v21;
            while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
            {
              v15 += 16;
              if (v15 == v13)
              {
                v15 = v13;
                break;
              }
            }
          }
          if (v15 == v16)
            break;
          if (*(_QWORD *)(*(_QWORD *)v15 + 8))
            goto LABEL_49;
        }
        v15 = v16;
      }
    }
LABEL_49:
    ++*((_DWORD *)this + 168);
  }
  if (*((_BYTE *)this + 712))
  {
    result = (WebCore::Node *)std::pair<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~pair((uint64_t *)this + 87, v10);
    *((_BYTE *)this + 712) = 0;
  }
  v22 = *((unsigned int *)this + 173);
  if ((_DWORD)v22)
  {
    v23 = *((_QWORD *)this + 85);
    v24 = 32 * v22;
    do
    {
      if (*(_QWORD *)v23)
      {
        v25 = *(_QWORD *)(*(_QWORD *)v23 + 8);
        if (v25)
        {
          if ((*(_BYTE *)(v25 + 22) & 8) == 0 || *(const WebCore::Document **)(*(_QWORD *)(v25 + 40) + 8) == a2)
          {
            *(_DWORD *)(v25 + 24) += 2;
            v42 = (WebCore::Node *)v25;
            WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v40, (uint64_t *)&v42, (uint64_t)v41);
            result = v42;
            v42 = 0;
            if (result)
            {
              if (*((_DWORD *)result + 6) == 2)
              {
                if ((*((_WORD *)result + 15) & 0x400) == 0)
                  result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
              }
              else
              {
                *((_DWORD *)result + 6) -= 2;
              }
            }
          }
        }
      }
      v23 += 32;
      v24 -= 32;
    }
    while (v24);
  }
  v26 = *((unsigned int *)this + 89);
  if ((_DWORD)v26)
  {
    v27 = *((_QWORD *)this + 43);
    v28 = 8 * v26;
    do
    {
      if (*(_QWORD *)v27)
      {
        v29 = *(_QWORD *)(*(_QWORD *)v27 + 8);
        if (v29)
        {
          if ((*(_BYTE *)(v29 + 22) & 8) == 0 || *(const WebCore::Document **)(*(_QWORD *)(v29 + 40) + 8) == a2)
          {
            *(_DWORD *)(v29 + 24) += 2;
            v42 = (WebCore::Node *)v29;
            WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v40, (uint64_t *)&v42, (uint64_t)v41);
            result = v42;
            v42 = 0;
            if (result)
            {
              if (*((_DWORD *)result + 6) == 2)
              {
                if ((*((_WORD *)result + 15) & 0x400) == 0)
                  result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
              }
              else
              {
                *((_DWORD *)result + 6) -= 2;
              }
            }
          }
        }
      }
      v27 += 8;
      v28 -= 8;
    }
    while (v28);
  }
  v30 = (uint64_t)v40;
  if (v40)
  {
    v31 = *((unsigned int *)v40 - 1);
    v32 = &v40[v31];
    if (*((_DWORD *)v40 - 3))
    {
      v33 = v40;
      if ((_DWORD)v31)
      {
        v34 = 8 * v31;
        v33 = v40;
        while ((unint64_t)*v33 + 1 <= 1)
        {
          ++v33;
          v34 -= 8;
          if (!v34)
          {
            v33 = v32;
            goto LABEL_87;
          }
        }
      }
      goto LABEL_87;
    }
    v33 = &v40[v31];
  }
  else
  {
    v33 = 0;
    v31 = 0;
  }
  v32 = &v40[v31];
  if (v40)
  {
LABEL_87:
    v35 = &v40[*((unsigned int *)v40 - 1)];
    goto LABEL_92;
  }
  v35 = 0;
LABEL_92:
  if (v35 != v33)
  {
    do
    {
      v36 = v33 + 1;
      result = (WebCore::Node *)WebCore::AXObjectCache::remove(this, *v33);
      v33 = v32;
      if (v36 != v32)
      {
        v33 = v36;
        while ((unint64_t)*v33 + 1 <= 1)
        {
          if (++v33 == v32)
          {
            v33 = v32;
            break;
          }
        }
      }
    }
    while (v33 != v35);
    v30 = (uint64_t)v40;
  }
  if (v30)
  {
    v37 = *(unsigned int *)(v30 - 4);
    if ((_DWORD)v37)
    {
      v38 = (uint64_t *)v30;
      do
      {
        v39 = *v38;
        if (*v38 != -1)
        {
          *v38 = 0;
          if (v39)
          {
            if (*(_DWORD *)(v39 + 24) == 2)
            {
              if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v39);
            }
            else
            {
              *(_DWORD *)(v39 + 24) -= 2;
            }
          }
        }
        ++v38;
        --v37;
      }
      while (v37);
    }
    return (WebCore::Node *)WTF::fastFree((WTF *)(v30 - 16), v10);
  }
  return result;
}

WebCore::Node *WebCore::filterWeakListHashSetForRemoval<WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WebCore::Node *result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  WebCore::Node *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *v9;

  v3 = (_QWORD *)*((_QWORD *)result + 1);
  if (v3)
  {
    v6 = result;
    while (1)
    {
      v7 = *(_QWORD *)(*v3 + 8);
      if (v7)
        break;
      v3 = (_QWORD *)v3[2];
      if (!v3)
        return result;
    }
LABEL_6:
    if ((*(_BYTE *)(v7 + 22) & 8) == 0 || *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) == a2)
    {
      *(_DWORD *)(v7 + 24) += 2;
      v9 = (WebCore::Node *)v7;
      WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add(a3, (uint64_t *)&v9, (uint64_t)&v8);
      result = v9;
      v9 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
    }
    while (1)
    {
      v3 = (_QWORD *)v3[2];
      if (!v3)
        break;
      v7 = *(_QWORD *)(*v3 + 8);
      if (v7)
      {
        ++*((_DWORD *)v6 + 6);
        goto LABEL_6;
      }
    }
    ++*((_DWORD *)v6 + 6);
  }
  return result;
}

WebCore::Node *WebCore::AXObjectCache::performDeferredCacheUpdate(WebCore::Node *result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  int v59;
  WebCore::Node *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  const WTF::String *v64;
  WTF *v65;
  WebCore::Node **v66;
  WebCore::AXObjectCache *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  WebCore::AccessibilityObject *v79;
  uint64_t v80;
  WebCore::AXObjectCache *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WebCore::AccessibilityObject *v84;
  unsigned int v85;
  WTF::StringImpl *v86;
  int v87;
  WebCore::Node *v88;
  WTF::StringImpl *v89;
  void *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  void *v94;
  uint64_t *v95;
  _BOOL4 v96;
  uint64_t (***v97)();
  uint64_t (**v98)();
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  WebCore::AccessibilityObject *v107;
  WebCore::Node *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  WebCore::Node *v112;
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  WTF *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl **v129;
  uint64_t v130;
  WebCore::Node *v131;
  WTF::StringImpl *v132;
  WTF *v133;
  WebCore::AccessibilityObject *v134;
  WebCore::AccessibilityObject *v135;
  uint64_t v136;
  uint64_t v137;
  CFTypeRef v138;
  uint64_t v139;
  uint64_t v140;
  WebCore::Node *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WebCore::Element *v145;
  uint64_t v146;
  uint64_t v148;
  WebCore::AXObjectCache::AttributeChange *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  WebCore::Node *v154;
  uint64_t v155;
  WebCore::Node *v156;
  uint64_t v157;
  unsigned __int8 *v158;
  uint64_t v159;
  WebCore::AXObjectCache *v160;
  int v161;
  _BOOL4 v162;
  int v163;
  int v164;
  int v165;
  WebCore::AccessibilityObject *v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  uint64_t v170;
  WebCore::AXObjectCache *v171;
  int v172;
  int v173;
  int v174;
  int v175;
  WebCore::AccessibilityObject *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  void *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  int v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  WTF *v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  BOOL v208;
  WebCore::AXObjectCache *v209;
  uint64_t v210;
  uint64_t v211;
  WebCore::Node *v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t (***v216)();
  uint64_t (**v217)();
  uint64_t v218;
  uint64_t v219;
  void *v220;
  WTF *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  void *v226;
  WTF **v227;
  uint64_t v228;
  WTF::StringImpl *v229;
  WTF *v230;
  unsigned int *v231;
  unsigned int v232;
  unsigned int v233;
  WTF::StringImpl *v234;
  uint64_t v235;
  unsigned int v236;
  unsigned int v237;
  uint64_t v238;
  WTF *v239;
  WTF *v240;
  uint64_t v241;
  unsigned int v242;
  unsigned int v243;
  uint64_t v244;
  WTF *v245;
  uint64_t v246;
  WTF **v247;
  WTF *v248;
  uint64_t v249;
  uint64_t j;
  unsigned int *v251;
  unsigned int v252;
  unsigned int v253;
  WebCore::Node *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  unsigned int v258;
  uint64_t v259;
  int v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  WTF *v265;
  WTF *v266;
  WTF *v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unsigned int v274;
  int jj;
  uint64_t v276;
  uint64_t v278;
  WTF **v279;
  WTF *v280;
  uint64_t *v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int *v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  _QWORD *v291;
  WTF *v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unsigned int v299;
  int i;
  uint64_t v301;
  unsigned int **v302;
  unsigned int *v303;
  unsigned int v304;
  unsigned int v305;
  WebCore::Node *v306;
  uint64_t v307;
  __int16 v308;
  WebCore *v310;
  WebCore::AccessibilityObject *v311;
  WebCore *FocusableChild;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  unsigned int v316;
  uint64_t v317;
  WTF *v318;
  uint64_t v319;
  uint64_t k;
  uint64_t v321;
  unsigned int v322;
  unsigned int v323;
  uint64_t v324;
  WTF *v325;
  uint64_t v326;
  uint64_t m;
  uint64_t v328;
  unsigned int v329;
  unsigned int v330;
  uint64_t v331;
  WTF *v332;
  _BOOL4 v333;
  uint64_t v334;
  uint64_t n;
  uint64_t v336;
  unsigned int v337;
  unsigned int v338;
  uint64_t v339;
  WTF *v340;
  uint64_t v341;
  uint64_t ii;
  uint64_t v343;
  unsigned int v344;
  unsigned int v345;
  uint64_t v346;
  WTF *v347;
  uint64_t v348;
  _BOOL4 v349;
  uint64_t v350;
  WTF *v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  WTF::StringImpl *v355;
  WTF::StringImpl *v356;
  uint64_t v357;
  WTF *v358;
  uint64_t v359;
  CFTypeRef cf;
  WebCore::Node *v361[2];

  if (!*((_BYTE *)result + 737))
  {
    v4 = (uint64_t)result;
    *((_BYTE *)result + 737) = 1;
    v5 = *(_QWORD *)(*((_QWORD *)result + 3) + 8);
    v6 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v6 + 2;
    v7 = *(_QWORD *)(v5 + 528);
    if (!v7)
      goto LABEL_484;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      goto LABEL_484;
    v9 = *(_QWORD *)(v8 + 288);
    if (!v9)
      goto LABEL_484;
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 344) + 8) + 328) + 296);
    if (v10)
      v10 = *(_QWORD *)(v10 + 1944);
    if ((*(_QWORD *)(v9 + 384) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(v9 + 384) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
      || v10 && (*(_BYTE *)(v10 + 20) & 0xF8) != 0
      || (v11 = *(_QWORD *)(v9 + 464)) != 0 && *(_QWORD *)(v11 + 8)
      || *(_DWORD *)(v9 + 488) && *(_BYTE *)(v9 + 478))
    {
      v33 = *((_DWORD *)result + 188);
      if (v33 <= 2 && !(_DWORD)a2
        || *(unsigned __int8 *)(v5 + 3391) | *(unsigned __int8 *)(v5 + 3392)
        || *(_BYTE *)(v9 + 480) == 2)
      {
        *((_DWORD *)result + 188) = v33 + 1;
        goto LABEL_484;
      }
      *((_DWORD *)result + 188) = 0;
      WebCore::Document::updateLayout(v5, 2, 0);
      v7 = *(_QWORD *)(v5 + 528);
      if (!v7)
      {
LABEL_62:
        v12 = 0;
        goto LABEL_63;
      }
    }
    v12 = *(unsigned int **)(v7 + 8);
    if (!v12)
      goto LABEL_63;
    v13 = v12 + 2;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    if (*(unsigned int **)(*((_QWORD *)v12 + 16) + 8) != v12)
    {
LABEL_63:
      v34 = *(_QWORD *)(v4 + 440);
      if (v34)
      {
        v35 = *(unsigned int *)(v34 - 4);
        v36 = (uint64_t *)(v34 + 8 * v35);
        if (*(_DWORD *)(v34 - 12))
        {
          v37 = *(uint64_t **)(v4 + 440);
          if ((_DWORD)v35)
          {
            v38 = 8 * v35;
            v37 = *(uint64_t **)(v4 + 440);
            while ((unint64_t)(*v37 + 1) <= 1)
            {
              ++v37;
              v38 -= 8;
              if (!v38)
              {
                v37 = v36;
                break;
              }
            }
          }
LABEL_73:
          if (v34)
            v39 = v34 + 8 * *(unsigned int *)(v34 - 4);
          else
            v39 = 0;
          if ((uint64_t *)v39 != v37)
          {
            v40 = 0;
            v2 = -1;
            while (1)
            {
              v41 = *v37;
              v42 = *(_QWORD *)(v4 + 760);
              if (v42)
              {
                v43 = *(_DWORD *)(v42 - 8);
                v44 = (v41 + ~(v41 << 32)) ^ ((unint64_t)(v41 + ~(v41 << 32)) >> 22);
                v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
                v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
                v47 = v43 & ((v46 >> 31) ^ v46);
                v48 = *(_QWORD *)(v42 + 16 * v47);
                if (v48 == v41)
                  goto LABEL_89;
                v49 = 1;
                while (v48)
                {
                  v47 = (v47 + v49) & v43;
                  v48 = *(_QWORD *)(v42 + 16 * v47);
                  ++v49;
                  if (v48 == v41)
                    goto LABEL_89;
                }
              }
              v50 = *(_QWORD *)(v4 + 784);
              if (v50)
              {
                v51 = *(_DWORD *)(v50 - 8);
                v52 = (v41 + ~(v41 << 32)) ^ ((unint64_t)(v41 + ~(v41 << 32)) >> 22);
                v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
                v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
                v55 = v51 & ((v54 >> 31) ^ v54);
                v56 = *(_QWORD *)(v50 + 16 * v55);
                if (v56 != v41)
                {
                  v57 = 1;
                  while (v56)
                  {
                    v55 = (v55 + v57) & v51;
                    v56 = *(_QWORD *)(v50 + 16 * v55);
                    ++v57;
                    if (v56 == v41)
                      goto LABEL_89;
                  }
                  goto LABEL_90;
                }
LABEL_89:
                v40 = 1;
              }
LABEL_90:
              WebCore::AXObjectCache::remove((uint64_t *)v4, v41);
              v58 = v37 + 1;
              v37 = v36;
              if (v58 != v36)
              {
                v37 = v58;
                while ((unint64_t)(*v37 + 1) <= 1)
                {
                  if (++v37 == v36)
                  {
                    v37 = v36;
                    break;
                  }
                }
              }
              if (v37 == (uint64_t *)v39)
              {
                v34 = *(_QWORD *)(v4 + 440);
                if (v34)
                  goto LABEL_97;
                goto LABEL_98;
              }
            }
          }
          v40 = 0;
          if (v34)
          {
LABEL_97:
            *(_QWORD *)(v4 + 440) = 0;
            WTF::fastFree((WTF *)(v34 - 16), a2);
          }
LABEL_98:
          v350 = v5;
          if ((v40 & 1) != 0)
          {
            v59 = 1;
            *(_BYTE *)(v4 + 768) = 1;
          }
          else
          {
            v59 = 0;
          }
          v60 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v60 = off_1E3370B88;
          *((_QWORD *)v60 + 1) = v4;
          v361[0] = v60;
          WTF::WeakHashSet<WebCore::HTMLTableElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v4 + 464), v361);
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v60 + 8))(v60);
          v62 = *(_QWORD *)(v4 + 464);
          v351 = (WTF *)v12;
          if (v62)
          {
            *(_QWORD *)(v4 + 464) = 0;
            v313 = *(unsigned int *)(v62 - 4);
            if ((_DWORD)v313)
            {
              v39 = 0;
              v2 = 1;
              do
              {
                v314 = *(_QWORD *)(v62 + 8 * v39);
                if (v314 != -1)
                {
                  *(_QWORD *)(v62 + 8 * v39) = 0;
                  if (v314)
                  {
                    do
                    {
                      v315 = __ldaxr((unsigned int *)v314);
                      v316 = v315 - 1;
                    }
                    while (__stlxr(v316, (unsigned int *)v314));
                    if (!v316)
                    {
                      atomic_store(1u, (unsigned int *)v314);
                      v317 = *(unsigned int *)(v314 + 28);
                      if ((_DWORD)v317)
                        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v314 + 16), (WTF::StringImpl *)(*(_QWORD *)(v314 + 16) + 32 * v317));
                      v318 = *(WTF **)(v314 + 16);
                      if (v318)
                      {
                        *(_QWORD *)(v314 + 16) = 0;
                        *(_DWORD *)(v314 + 24) = 0;
                        WTF::fastFree(v318, v61);
                      }
                      WTF::fastFree((WTF *)v314, v61);
                    }
                  }
                }
                ++v39;
              }
              while (v39 != v313);
            }
            WTF::fastFree((WTF *)(v62 - 16), v61);
            v63 = *(_QWORD *)(v4 + 464);
            *(_DWORD *)(v4 + 472) = 0;
            if (v63)
            {
              LODWORD(v63) = *(_DWORD *)(v63 - 12);
              if (v63 > 0x7FFFFFFE)
                LODWORD(v63) = 0x7FFFFFFF;
            }
          }
          else
          {
            LODWORD(v63) = 0;
            *(_DWORD *)(v4 + 472) = 0;
          }
          *(_DWORD *)(v4 + 476) = 2 * v63;
          v358 = 0;
          v359 = 0;
          WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>(WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::Node&)#1},WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v358, v4 + 584);
          if (HIDWORD(v359))
          {
            v65 = v358;
            v3 = (WTF *)((char *)v358 + 8 * HIDWORD(v359));
            v66 = (WebCore::Node **)MEMORY[0x1E0CBF2F8];
            while (1)
            {
              if (*(_QWORD *)v65)
              {
                v39 = *(_QWORD *)(*(_QWORD *)v65 + 8);
                if (v39)
                  break;
              }
LABEL_160:
              v65 = (WTF *)((char *)v65 + 8);
              if (v65 == v3)
                goto LABEL_193;
            }
            *(_DWORD *)(v39 + 24) += 2;
            if ((*(_QWORD *)(v39 + 64) & 0xFFFFFFFFFFFFLL) != 0
              && WebCore::nodeHasRole(v39, (int16x8_t *)"menu", 0x100000004))
            {
              v67 = (WebCore::AXObjectCache *)WebCore::AXObjectCache::getOrCreate(v4, v39, 0);
              v68 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
              *(_DWORD *)(v68 + 24) += 2;
              WebCore::AXObjectCache::postNotification((WTF **)v4, v67, v68, 68, 0);
              if (*(_DWORD *)(v68 + 24) == 2)
              {
                if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v68);
              }
              else
              {
                *(_DWORD *)(v68 + 24) -= 2;
              }
            }
            if ((*(_WORD *)(v39 + 28) & 8) == 0)
            {
LABEL_154:
              if ((*(_WORD *)(v39 + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(v39 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
              {
                *(_DWORD *)(v39 + 24) += 2;
                v84 = (WebCore::AccessibilityObject *)WebCore::AXObjectCache::getOrCreate(v4, v39, 0);
                WebCore::AXObjectCache::handleLabelChanged((uint64_t **)v4, v84);
                if (*(_DWORD *)(v39 + 24) == 2)
                {
                  if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v39);
                }
                else
                {
                  *(_DWORD *)(v39 + 24) -= 2;
                }
              }
              if (*(_DWORD *)(v39 + 24) == 2)
              {
                if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v39);
              }
              else
              {
                *(_DWORD *)(v39 + 24) -= 2;
              }
              goto LABEL_160;
            }
            v69 = *(_DWORD *)(v39 + 24);
            *(_DWORD *)(v39 + 24) = v69 + 2;
            if ((*(_QWORD *)(v39 + 64) & 0xFFFFFFFFFFFFLL) == 0)
            {
LABEL_152:
              if (v69)
              {
                *(_DWORD *)(v39 + 24) = v69;
              }
              else if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v39);
              }
              goto LABEL_154;
            }
            v70 = *(_QWORD *)(v39 + 104);
            if (!v70)
              goto LABEL_125;
            v71 = *(unsigned int *)(v70 + 4);
            if ((v71 & 1) != 0)
            {
              v72 = *(_QWORD *)(v70 + 40);
              v73 = *(unsigned int *)(v70 + 52);
              if (!*(_DWORD *)(v70 + 52))
              {
LABEL_125:
                v74 = (uint64_t *)v66;
                goto LABEL_126;
              }
            }
            else
            {
              v72 = v70 + 32;
              v73 = v71 >> 5;
              if (!v73)
                goto LABEL_125;
            }
            v74 = (uint64_t *)(v72 + 8);
            while (1)
            {
              v75 = *(v74 - 1);
              if (v75 == WebCore::HTMLNames::aria_liveAttr
                || *(_QWORD *)(v75 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_liveAttr + 24)
                && *(_QWORD *)(v75 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_liveAttr + 32))
              {
                break;
              }
              v74 += 2;
              if (!--v73)
                goto LABEL_125;
            }
LABEL_126:
            v2 = *v74;
            if (*v74)
            {
              *(_DWORD *)v2 += 2;
              v356 = (WTF::StringImpl *)v2;
              if (*(_DWORD *)(v2 + 4))
                goto LABEL_145;
              if (!v70)
                goto LABEL_143;
            }
            else
            {
              v356 = 0;
              if (!v70)
                goto LABEL_143;
            }
            v76 = *(unsigned int *)(v70 + 4);
            if ((v76 & 1) == 0)
            {
              v77 = v70 + 32;
              v78 = v76 >> 5;
              if (!(v76 >> 5))
                goto LABEL_143;
LABEL_133:
              v79 = (WebCore::AccessibilityObject *)(v77 + 8);
              while (1)
              {
                v80 = *((_QWORD *)v79 - 1);
                if (v80 == WebCore::HTMLNames::roleAttr
                  || *(_QWORD *)(v80 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
                  && *(_QWORD *)(v80 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
                {
                  break;
                }
                v79 = (WebCore::AccessibilityObject *)((char *)v79 + 16);
                if (!--v78)
                  goto LABEL_143;
              }
LABEL_144:
              if (*(_QWORD *)v79 && *(_DWORD *)(*(_QWORD *)v79 + 4))
              {
                v85 = WebCore::AccessibilityObject::ariaRoleToWebCoreRole(v79, v64);
                if (v85 <= 7 && ((v87 = 1 << v85, ((1 << v85) & 6) != 0) || (v87 & 0x50) != 0 || (v87 & 0xA0) != 0))
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v88 = (WebCore::Node *)cf;
                  if (!cf)
                  {
LABEL_180:
                    v356 = v88;
                    if (v2)
                    {
                      if (*(_DWORD *)v2 == 2)
                        WTF::StringImpl::destroy((WTF::StringImpl *)v2, v86);
                      else
                        *(_DWORD *)v2 -= 2;
                    }
                    v89 = (WTF::StringImpl *)cf;
                    cf = 0;
                    if (v89)
                    {
                      if (*(_DWORD *)v89 == 2)
                        WTF::StringImpl::destroy(v89, v86);
                      else
                        *(_DWORD *)v89 -= 2;
                    }
                    goto LABEL_145;
                  }
                }
                else
                {
                  v88 = *v66;
                  if (*v66)
                    *(_DWORD *)v88 += 2;
                  cf = v88;
                  if (!v88)
                    goto LABEL_180;
                }
                if ((*((_BYTE *)v88 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v88 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(v88, v86);
                  v88 = v361[0];
                }
                goto LABEL_180;
              }
LABEL_145:
              if (WebCore::AXCoreObject::liveRegionStatusIsEnabled((uint64_t *)&v356))
              {
                v81 = (WebCore::AXObjectCache *)WebCore::AXObjectCache::getOrCreate(v4, v39, 0);
                v82 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
                *(_DWORD *)(v82 + 24) += 2;
                WebCore::AXObjectCache::postNotification((WTF **)v4, v81, v82, 60, 0);
                if (*(_DWORD *)(v82 + 24) == 2)
                {
                  if ((*(_WORD *)(v82 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v82);
                }
                else
                {
                  *(_DWORD *)(v82 + 24) -= 2;
                }
              }
              v83 = v356;
              v356 = 0;
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                  WTF::StringImpl::destroy(v83, v64);
                else
                  *(_DWORD *)v83 -= 2;
              }
              v69 = *(_DWORD *)(v39 + 24) - 2;
              goto LABEL_152;
            }
            v77 = *(_QWORD *)(v70 + 40);
            v78 = *(unsigned int *)(v70 + 52);
            if (v78)
              goto LABEL_133;
LABEL_143:
            v79 = (WebCore::AccessibilityObject *)v66;
            goto LABEL_144;
          }
LABEL_193:
          WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(v4 + 584, v64);
          v91 = *(_QWORD *)(v4 + 560);
          if (v91)
          {
            v92 = (uint64_t *)(v4 + 560);
            do
            {
              if (!*(_DWORD *)(v91 - 12))
                break;
              v93 = *(_QWORD *)(v4 + 568);
              *v92 = 0;
              *(_QWORD *)(v4 + 568) = 0;
              *(_QWORD *)(v4 + 576) = 0;
              v39 = v93;
              if (!v93)
                goto LABEL_199;
              do
              {
                WebCore::AXObjectCache::handleChildrenChanged((WebCore::AXObjectCache *)v4, *(WebCore::AccessibilityObject **)v39);
                v39 = *(_QWORD *)(v39 + 16);
              }
              while (v39);
              WTF::ListHashSet<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>>::deleteAllNodes(v93, v94);
              if (v91)
LABEL_199:
                WTF::fastFree((WTF *)(v91 - 16), v90);
              v91 = *v92;
            }
            while (*v92);
          }
          v97 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
          v98 = off_1E3370BB0;
          *v97 = off_1E3370BB0;
          v97[1] = (uint64_t (**)())v4;
          v99 = *(_QWORD *)(v4 + 480);
          if (v99)
          {
            v120 = *(unsigned int *)(v99 - 12);
            if ((_DWORD)v120)
            {
              if (v120 >> 29)
              {
                __break(0xC471u);
                goto LABEL_745;
              }
              v122 = (WTF *)WTF::fastMalloc((WTF *)(8 * v120));
              v123 = *(_QWORD *)(v4 + 480);
              if (v123 && *(_DWORD *)(v123 - 12))
              {
                v124 = *(unsigned int *)(v123 - 4);
                if ((_DWORD)v124)
                {
                  v125 = 8 * v124;
                  v126 = *(uint64_t **)(v4 + 480);
                  while ((unint64_t)(*v126 + 1) <= 1)
                  {
                    ++v126;
                    v125 -= 8;
                    if (!v125)
                      goto LABEL_239;
                  }
                }
                else
                {
                  v126 = *(uint64_t **)(v4 + 480);
                }
                v281 = (uint64_t *)(v123 + 8 * v124);
                if (v126 != v281)
                {
                  v282 = 0;
                  v283 = *v126;
LABEL_588:
                  v284 = *(_QWORD *)(v283 + 8);
                  if (v284)
                  {
                    v285 = *(_QWORD *)(v284 + 32);
                    if (v285)
                      goto LABEL_755;
                    v285 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v285 = 1;
                    *(_QWORD *)(v285 + 8) = v284;
                    v286 = *(unsigned int **)(v284 + 32);
                    *(_QWORD *)(v284 + 32) = v285;
                    if (!v286)
                      goto LABEL_755;
                    do
                    {
                      v287 = __ldaxr(v286);
                      v288 = v287 - 1;
                    }
                    while (__stlxr(v288, v286));
                    if (!v288)
                    {
                      atomic_store(1u, v286);
                      WTF::fastFree((WTF *)v286, v121);
                    }
                    v285 = *(_QWORD *)(v284 + 32);
                    if (v285)
                    {
LABEL_755:
                      do
                        v289 = __ldaxr((unsigned int *)v285);
                      while (__stlxr(v289 + 1, (unsigned int *)v285));
                    }
                  }
                  else
                  {
                    v285 = 0;
                  }
                  v290 = v282 + 1;
                  *((_QWORD *)v122 + v282) = v285;
                  while (++v126 != v281)
                  {
                    v283 = *v126;
                    if ((unint64_t)(*v126 + 1) > 1)
                    {
                      ++v282;
                      if (v126 != v281)
                        goto LABEL_588;
                      break;
                    }
                  }
                  if (v290)
                  {
                    v291 = (_QWORD *)((char *)v122 + 8 * v290);
                    v292 = v122;
                    do
                    {
                      v293 = *(_QWORD *)v292;
                      if (*(_QWORD *)v292)
                      {
                        v121 = *(void **)(v293 + 8);
                        if (v121)
                        {
                          v294 = *(_QWORD *)(v4 + 480);
                          if (v294)
                          {
                            v295 = *(_DWORD *)(v294 - 8);
                            v296 = (~(v293 << 32) + v293) ^ ((unint64_t)(~(v293 << 32) + v293) >> 22);
                            v297 = 9 * ((v296 + ~(v296 << 13)) ^ ((v296 + ~(v296 << 13)) >> 8));
                            v298 = (v297 ^ (v297 >> 15)) + ~((v297 ^ (v297 >> 15)) << 27);
                            v299 = v295 & ((v298 >> 31) ^ v298);
                            for (i = 1; ; ++i)
                            {
                              v301 = *(_QWORD *)(v294 + 8 * v299);
                              if (v301 != -1)
                              {
                                if (!v301)
                                  goto LABEL_613;
                                if (v301 == v293)
                                  break;
                              }
                              v299 = (v299 + i) & v295;
                            }
                            ((void (*)(uint64_t (***)()))(*v97)[2])(v97);
                          }
                        }
                      }
LABEL_613:
                      v292 = (WTF *)((char *)v292 + 8);
                    }
                    while (v292 != (WTF *)v291);
                    v302 = (unsigned int **)v122;
                    do
                    {
                      v303 = *v302;
                      *v302 = 0;
                      if (v303)
                      {
                        do
                        {
                          v304 = __ldaxr(v303);
                          v305 = v304 - 1;
                        }
                        while (__stlxr(v305, v303));
                        if (!v305)
                        {
                          atomic_store(1u, v303);
                          WTF::fastFree((WTF *)v303, v121);
                        }
                      }
                      ++v302;
                    }
                    while (v302 != v291);
                  }
                }
              }
LABEL_239:
              WTF::fastFree(v122, v121);
              v98 = *v97;
            }
            else
            {
              v98 = off_1E3370BB0;
            }
          }
          ((void (*)(uint64_t (***)()))v98[1])(v97);
          v101 = *(_QWORD *)(v4 + 480);
          if (v101)
          {
            *(_QWORD *)(v4 + 480) = 0;
            v249 = *(unsigned int *)(v101 - 4);
            if ((_DWORD)v249)
            {
              for (j = 0; j != v249; ++j)
              {
                v251 = *(unsigned int **)(v101 + 8 * j);
                if (v251 != (unsigned int *)-1)
                {
                  *(_QWORD *)(v101 + 8 * j) = 0;
                  if (v251)
                  {
                    do
                    {
                      v252 = __ldaxr(v251);
                      v253 = v252 - 1;
                    }
                    while (__stlxr(v253, v251));
                    if (!v253)
                    {
                      atomic_store(1u, v251);
                      WTF::fastFree((WTF *)v251, v100);
                    }
                  }
                }
              }
            }
            WTF::fastFree((WTF *)(v101 - 16), v100);
            v102 = *(_QWORD *)(v4 + 480);
            *(_DWORD *)(v4 + 488) = 0;
            v3 = v351;
            if (v102)
            {
              LODWORD(v102) = *(_DWORD *)(v102 - 12);
              if (v102 > 0x7FFFFFFE)
                LODWORD(v102) = 0x7FFFFFFF;
            }
          }
          else
          {
            LODWORD(v102) = 0;
            *(_DWORD *)(v4 + 488) = 0;
            v3 = v351;
          }
          *(_DWORD *)(v4 + 492) = 2 * v102;
          v356 = 0;
          v357 = 0;
          WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>(WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::Node&)#1},WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v356, v4 + 512);
          if (HIDWORD(v357))
          {
            v104 = v356;
            v105 = 8 * HIDWORD(v357);
            do
            {
              if (*(_QWORD *)v104)
              {
                v106 = *(_QWORD *)(*(_QWORD *)v104 + 8);
                if (v106)
                {
                  *(_DWORD *)(v106 + 24) += 2;
                  v107 = (WebCore::AccessibilityObject *)WebCore::AXObjectCache::getOrCreate(v4, v106, 0);
                  WebCore::AXObjectCache::handleTextChanged((WebCore::AXObjectCache *)v4, v107);
                  if (*(_DWORD *)(v106 + 24) == 2)
                  {
                    if ((*(_WORD *)(v106 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v106);
                  }
                  else
                  {
                    *(_DWORD *)(v106 + 24) -= 2;
                  }
                }
              }
              v104 = (WTF::StringImpl *)((char *)v104 + 8);
              v105 -= 8;
            }
            while (v105);
          }
          WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(v4 + 512, v103);
          v108 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v108 = off_1E3370BD8;
          *((_QWORD *)v108 + 1) = v4;
          v361[0] = v108;
          WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v4 + 448), v361);
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v108 + 8))(v108);
          v110 = *(_QWORD *)(v4 + 448);
          if (v110)
          {
            *(_QWORD *)(v4 + 448) = 0;
            v319 = *(unsigned int *)(v110 - 4);
            if ((_DWORD)v319)
            {
              for (k = 0; k != v319; ++k)
              {
                v321 = *(_QWORD *)(v110 + 8 * k);
                if (v321 != -1)
                {
                  *(_QWORD *)(v110 + 8 * k) = 0;
                  if (v321)
                  {
                    do
                    {
                      v322 = __ldaxr((unsigned int *)v321);
                      v323 = v322 - 1;
                    }
                    while (__stlxr(v323, (unsigned int *)v321));
                    if (!v323)
                    {
                      atomic_store(1u, (unsigned int *)v321);
                      v324 = *(unsigned int *)(v321 + 28);
                      if ((_DWORD)v324)
                        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v321 + 16), (WTF::StringImpl *)(*(_QWORD *)(v321 + 16) + 32 * v324));
                      v325 = *(WTF **)(v321 + 16);
                      if (v325)
                      {
                        *(_QWORD *)(v321 + 16) = 0;
                        *(_DWORD *)(v321 + 24) = 0;
                        WTF::fastFree(v325, v109);
                      }
                      WTF::fastFree((WTF *)v321, v109);
                    }
                  }
                }
              }
            }
            WTF::fastFree((WTF *)(v110 - 16), v109);
            v111 = *(_QWORD *)(v4 + 448);
            *(_DWORD *)(v4 + 456) = 0;
            if (v111)
            {
              LODWORD(v111) = *(_DWORD *)(v111 - 12);
              v3 = v351;
              if (v111 > 0x7FFFFFFE)
                LODWORD(v111) = 0x7FFFFFFF;
            }
            else
            {
              v3 = v351;
            }
          }
          else
          {
            LODWORD(v111) = 0;
            *(_DWORD *)(v4 + 456) = 0;
          }
          *(_DWORD *)(v4 + 460) = 2 * v111;
          v112 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v112 = off_1E3370C00;
          *((_QWORD *)v112 + 1) = v4;
          v361[0] = v112;
          WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v4 + 544), v361);
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v112 + 8))(v112);
          v114 = *(_QWORD *)(v4 + 544);
          if (v114)
          {
            *(_QWORD *)(v4 + 544) = 0;
            v326 = *(unsigned int *)(v114 - 4);
            if ((_DWORD)v326)
            {
              for (m = 0; m != v326; ++m)
              {
                v328 = *(_QWORD *)(v114 + 8 * m);
                if (v328 != -1)
                {
                  *(_QWORD *)(v114 + 8 * m) = 0;
                  if (v328)
                  {
                    do
                    {
                      v329 = __ldaxr((unsigned int *)v328);
                      v330 = v329 - 1;
                    }
                    while (__stlxr(v330, (unsigned int *)v328));
                    if (!v330)
                    {
                      atomic_store(1u, (unsigned int *)v328);
                      v331 = *(unsigned int *)(v328 + 28);
                      if ((_DWORD)v331)
                        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v328 + 16), (WTF::StringImpl *)(*(_QWORD *)(v328 + 16) + 32 * v331));
                      v332 = *(WTF **)(v328 + 16);
                      if (v332)
                      {
                        *(_QWORD *)(v328 + 16) = 0;
                        *(_DWORD *)(v328 + 24) = 0;
                        WTF::fastFree(v332, v95);
                      }
                      WTF::fastFree((WTF *)v328, v95);
                    }
                  }
                }
              }
            }
            WTF::fastFree((WTF *)(v114 - 16), v95);
            v115 = *(_QWORD *)(v4 + 544);
            *(_DWORD *)(v4 + 552) = 0;
            if (v115)
            {
              LODWORD(v115) = *(_DWORD *)(v115 - 12);
              v3 = v351;
              if (v115 > 0x7FFFFFFE)
                LODWORD(v115) = 0x7FFFFFFF;
            }
            else
            {
              v3 = v351;
            }
          }
          else
          {
            LODWORD(v115) = 0;
            *(_DWORD *)(v4 + 552) = 0;
          }
          *(_DWORD *)(v4 + 556) = 2 * v115;
          v116 = *(_QWORD *)(v4 + 664);
          if (v116)
          {
            v117 = *(unsigned int *)(v116 - 4);
            v118 = v116 + 16 * v117;
            if (*(_DWORD *)(v116 - 12))
            {
              if (!(_DWORD)v117)
              {
                v39 = *(_QWORD *)(v4 + 664);
                goto LABEL_241;
              }
              v119 = 16 * v117;
              v39 = *(_QWORD *)(v4 + 664);
              while ((unint64_t)(*(_QWORD *)v39 + 1) <= 1)
              {
                v39 += 16;
                v119 -= 16;
                if (!v119)
                {
                  v39 = v118;
                  break;
                }
              }
LABEL_225:
              LODWORD(v117) = *(_DWORD *)(v116 - 4);
LABEL_241:
              v2 = v116 + 16 * v117;
              goto LABEL_242;
            }
          }
          else
          {
            v118 = 0;
            v117 = 0;
          }
          v39 = v118;
          v118 = v116 + 16 * v117;
          if (!v116)
          {
            v2 = 0;
LABEL_242:
            if (v2 != v39)
            {
              while (!*(_QWORD *)(*(_QWORD *)v39 + 8))
              {
                v127 = v39 + 16;
                v39 = v118;
                if (v127 != v118)
                {
                  v39 = v127;
                  while ((unint64_t)(*(_QWORD *)v39 + 1) <= 1)
                  {
                    v39 += 16;
                    if (v39 == v118)
                    {
                      v39 = v118;
                      break;
                    }
                  }
                }
                if (v39 == v2)
                {
                  v39 = v2;
                  break;
                }
              }
            }
            if (v116)
              v128 = v116 + 16 * *(unsigned int *)(v116 - 4);
            else
              v128 = 0;
            if (v39 != v128)
            {
              v129 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
              do
              {
                v130 = *(_QWORD *)(*(_QWORD *)v39 + 8);
                if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 872))(v130) & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1955E580CLL);
                }
                (*(void (**)(WebCore::Node **__return_ptr, uint64_t))(*(_QWORD *)v130 + 1408))(v361, v130);
                v131 = v361[0];
                if (v361[0])
                {
                  WebCore::innerTextValueFrom((WebCore *)&v355, (unint64_t)v361[0]);
                  v141 = v361[0];
                  v361[0] = 0;
                  if (v141)
                  {
                    if (*((_DWORD *)v141 + 6) == 2)
                    {
                      if ((*((_WORD *)v141 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v141);
                    }
                    else
                    {
                      *((_DWORD *)v141 + 6) -= 2;
                    }
                  }
                }
                else
                {
                  v132 = *v129;
                  if (*v129)
                    *(_DWORD *)v132 += 2;
                  v355 = v132;
                }
                v133 = *(WTF **)(v4 + 88);
                *(_QWORD *)(v4 + 88) = 0;
                if (v133)
                {
                  if (*(_QWORD *)v133)
                    WTF::fastFree((WTF *)(*(_QWORD *)v133 - 16), v131);
                  WTF::fastFree(v133, v131);
                }
                v134 = (WebCore::AccessibilityObject *)WebCore::AXObjectCache::getOrCreate(v4, v130, 0);
                if (v134)
                {
                  v135 = v134;
                  if ((WebCore::AXObjectCache::enqueuePasswordValueChangeNotification((WebCore::AXObjectCache *)v4, v134) & 1) == 0)
                  {
                    v136 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v135 + 2960))(v135);
                    if (v136)
                    {
                      v137 = v136;
                      v361[0] = (WebCore::Node *)"AXValueChanged";
                      v361[1] = (WebCore::Node *)15;
                      WTF::ASCIILiteral::createNSString((WTF::ASCIILiteral *)v361);
                      objc_msgSend(*(id *)(v137 + 24), "accessibilityOverrideProcessNotification:", cf);
                      objc_msgSend(*(id *)(v137 + 24), "accessibilityPostedNotification:", cf);
                      v138 = cf;
                      cf = 0;
                      if (v138)
                        CFRelease(v138);
                    }
                  }
                }
                if (v355)
                {
                  if (*(_DWORD *)v355 == 2)
                    WTF::StringImpl::destroy(v355, (WTF::StringImpl *)v95);
                  else
                    *(_DWORD *)v355 -= 2;
                }
                v139 = v118;
                if (v39 + 16 != v118)
                {
                  v139 = v39 + 16;
                  while ((unint64_t)(*(_QWORD *)v139 + 1) <= 1)
                  {
                    v139 += 16;
                    if (v139 == v118)
                    {
                      v139 = v118;
                      break;
                    }
                  }
                }
                v39 = v2;
                if (v139 != v2)
                {
                  v39 = v139;
                  if (!*(_QWORD *)(*(_QWORD *)v139 + 8))
                  {
                    while (1)
                    {
                      v140 = v39 + 16;
                      v39 = v118;
                      if (v140 != v118)
                      {
                        v39 = v140;
                        while ((unint64_t)(*(_QWORD *)v39 + 1) <= 1)
                        {
                          v39 += 16;
                          if (v39 == v118)
                          {
                            v39 = v118;
                            break;
                          }
                        }
                      }
                      if (v39 == v2)
                        break;
                      if (*(_QWORD *)(*(_QWORD *)v39 + 8))
                        goto LABEL_289;
                    }
                    v39 = v2;
                  }
                }
LABEL_289:
                ++*(_DWORD *)(v4 + 672);
              }
              while (v39 != v128);
              v116 = *(_QWORD *)(v4 + 664);
              v3 = v351;
            }
            if (v116)
            {
              *(_QWORD *)(v4 + 664) = 0;
              WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v116, (WTF::StringImpl *)v95);
              v142 = *(_QWORD *)(v4 + 664);
              *(_DWORD *)(v4 + 672) = 0;
              if (v142)
              {
                LODWORD(v142) = *(_DWORD *)(v142 - 12);
                if (v142 > 0x7FFFFFFE)
                  LODWORD(v142) = 0x7FFFFFFF;
              }
            }
            else
            {
              LODWORD(v142) = 0;
              *(_DWORD *)(v4 + 672) = 0;
            }
            *(_DWORD *)(v4 + 676) = 2 * v142;
            v143 = *(unsigned int *)(v4 + 692);
            if ((_DWORD)v143)
            {
              v39 = *(_QWORD *)(v4 + 680);
              v144 = v39 + 32 * v143;
              do
              {
                if (*(_QWORD *)v39)
                  v145 = *(WebCore::Element **)(*(_QWORD *)v39 + 8);
                else
                  v145 = 0;
                v146 = v39 + 24;
                v113.n128_f64[0] = WebCore::AXObjectCache::handleAttributeChange((WebCore::AXObjectCache *)v4, v145, (WebCore::QualifiedName::QualifiedNameImpl **)(v39 + 8), (const WTF::AtomString *)(v39 + 16), (const WTF::AtomString *)(v39 + 24), v113);
                if (*(_QWORD *)(v39 + 8) == WebCore::HTMLNames::idAttr && v59 == 0)
                {
                  v59 = 1;
                  *(_BYTE *)(v4 + 768) = 1;
                }
                v39 += 32;
              }
              while (v146 + 8 != v144);
            }
            if (*(_DWORD *)(v4 + 688))
            {
              v148 = *(unsigned int *)(v4 + 692);
              v149 = *(WebCore::AXObjectCache::AttributeChange **)(v4 + 680);
              if ((_DWORD)v148)
              {
                v150 = 32 * v148;
                do
                {
                  WebCore::AXObjectCache::AttributeChange::~AttributeChange(v149, (WTF::StringImpl *)v95);
                  v149 = (WebCore::AXObjectCache::AttributeChange *)(v151 + 32);
                  v150 -= 32;
                }
                while (v150);
                *(_DWORD *)(v4 + 692) = 0;
                v149 = *(WebCore::AXObjectCache::AttributeChange **)(v4 + 680);
              }
              if (v149)
              {
                *(_QWORD *)(v4 + 680) = 0;
                *(_DWORD *)(v4 + 688) = 0;
                WTF::fastFree(v149, v95);
              }
            }
            if (!*(_BYTE *)(v4 + 712))
            {
              v162 = 0;
LABEL_367:
              v2 = *(_QWORD *)(v4 + 616);
              if (!v2)
              {
                v39 = 0;
                v120 = 0;
                goto LABEL_369;
              }
              v96 = v162;
              v120 = *(unsigned int *)(v2 - 4);
              v39 = v2 + 8 * v120;
              if (*(_DWORD *)(v2 - 12))
              {
                if (!(_DWORD)v120)
                {
                  v177 = *(_QWORD *)(v4 + 616);
                  goto LABEL_378;
                }
                v179 = 8 * v120;
                v177 = *(_QWORD *)(v4 + 616);
                while ((unint64_t)(*(_QWORD *)v177 + 1) <= 1)
                {
                  v177 += 8;
                  v179 -= 8;
                  if (!v179)
                  {
                    v177 = v39;
                    break;
                  }
                }
LABEL_377:
                LODWORD(v120) = *(_DWORD *)(v2 - 4);
LABEL_378:
                v178 = v2 + 8 * v120;
LABEL_379:
                v354 = v178;
                if (v178 != v177 && !*(_QWORD *)(*(_QWORD *)v177 + 8))
                {
                  v3 = v351;
                  while (1)
                  {
                    v348 = v177 + 8;
                    v177 = v39;
                    if (v348 != v39)
                    {
                      v177 = v348;
                      while ((unint64_t)(*(_QWORD *)v177 + 1) <= 1)
                      {
                        v177 += 8;
                        if (v177 == v39)
                        {
                          v177 = v39;
                          break;
                        }
                      }
                    }
                    if (v177 == v178)
                      break;
                    if (*(_QWORD *)(*(_QWORD *)v177 + 8))
                      goto LABEL_381;
                  }
                  v177 = v178;
                  v3 = v351;
                }
LABEL_381:
                if (v2)
                  v180 = v2 + 8 * *(unsigned int *)(v2 - 4);
                else
                  v180 = 0;
                v181 = v162;
                if (v177 != v180)
                {
                  v352 = (uint64_t *)(v4 + 344);
                  v353 = v180;
                  v349 = v162;
                  v181 = v162;
                  do
                  {
                    v182 = *(_QWORD *)(*(_QWORD *)v177 + 8);
                    if ((*(_WORD *)(v182 + 28) & 0x10) != 0
                      && *(_QWORD *)(*(_QWORD *)(v182 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24)
                      || (WebCore::nodeHasRole(*(_QWORD *)(*(_QWORD *)v177 + 8), (int16x8_t *)"dialog", 0x100000006) & 1) != 0
                      || WebCore::nodeHasRole(v182, (int16x8_t *)"alertdialog", 0x10000000BLL))
                    {
                      if (!*(_BYTE *)(v4 + 360))
                        WebCore::AXObjectCache::findModalNodes(v4, (WebCore::Element *)v95);
                      if (WebCore::AXObjectCache::isModalElement((WebCore::AXObjectCache *)v182, (WebCore::Element *)v95))
                      {
                        v184 = *(unsigned int *)(v4 + 356);
                        if ((_DWORD)v184 == *(_DWORD *)(v4 + 352))
                        {
                          v185 = v184 + (v184 >> 2);
                          if (v185 >= 0x10)
                            v186 = v185 + 1;
                          else
                            v186 = 16;
                          if (v186 <= v184 + 1)
                            v187 = v184 + 1;
                          else
                            v187 = v186;
                          WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v352, v187);
                          v184 = *(unsigned int *)(v4 + 356);
                          v188 = *(_QWORD *)(v4 + 344);
                          v189 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v182);
                          if (v189)
                          {
                            do
                              v190 = __ldaxr(v189);
                            while (__stlxr(v190 + 1, v189));
                          }
                        }
                        else
                        {
                          v188 = *v352;
                          v189 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v182);
                          if (v189)
                          {
                            do
                              v204 = __ldaxr(v189);
                            while (__stlxr(v204 + 1, v189));
                          }
                        }
                        *(_QWORD *)(v188 + 8 * v184) = v189;
                        v203 = *(_DWORD *)(v4 + 356) + 1;
                      }
                      else
                      {
                        v191 = *(uint64_t **)(v4 + 344);
                        v192 = *(unsigned int *)(v4 + 356);
                        v193 = &v191[v192];
                        v194 = 0;
                        v195 = v193;
                        if ((_DWORD)v192)
                        {
                          v196 = &v191[v192];
                          do
                          {
                            v197 = *v191;
                            if (*v191)
                              v198 = *(_QWORD *)(v197 + 8);
                            else
                              v198 = 0;
                            if (v198 == v182)
                            {
                              if (v196 == (uint64_t *)(*(_QWORD *)(v4 + 344) + 8 * *(unsigned int *)(v4 + 356)))
                              {
                                v196 = v191;
                              }
                              else if (v195 != v191)
                              {
                                WTF::VectorMover<false,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::moveOverlapping(v195, v191, v196);
                                v196 = (uint64_t *)((char *)v196 + (char *)v191 - (char *)v195);
                                v197 = *v191;
                              }
                              *v191 = 0;
                              v195 = v191 + 1;
                              if (v197)
                              {
                                do
                                {
                                  v199 = __ldaxr((unsigned int *)v197);
                                  v200 = v199 - 1;
                                }
                                while (__stlxr(v200, (unsigned int *)v197));
                                if (!v200)
                                {
                                  atomic_store(1u, (unsigned int *)v197);
                                  v201 = *(unsigned int *)(v197 + 28);
                                  if ((_DWORD)v201)
                                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v197 + 16), (WTF::StringImpl *)(*(_QWORD *)(v197 + 16) + 32 * v201));
                                  v202 = *(WTF **)(v197 + 16);
                                  if (v202)
                                  {
                                    *(_QWORD *)(v197 + 16) = 0;
                                    *(_DWORD *)(v197 + 24) = 0;
                                    WTF::fastFree(v202, v183);
                                  }
                                  WTF::fastFree((WTF *)v197, v183);
                                }
                              }
                              ++v194;
                            }
                            ++v191;
                          }
                          while (v191 < v193);
                          v191 = *(uint64_t **)(v4 + 344);
                          LODWORD(v192) = *(_DWORD *)(v4 + 356);
                          v193 = v196;
                          v3 = v351;
                        }
                        v95 = &v191[v192];
                        if (v195 != v95)
                        {
                          WTF::VectorMover<false,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::moveOverlapping(v195, v95, v193);
                          LODWORD(v192) = *(_DWORD *)(v4 + 356);
                        }
                        v203 = v192 - v194;
                        v180 = v353;
                        v178 = v354;
                      }
                      *(_DWORD *)(v4 + 356) = v203;
                      v181 = 1;
                    }
                    v205 = v39;
                    if (v177 + 8 != v39)
                    {
                      v205 = v177 + 8;
                      while ((unint64_t)(*(_QWORD *)v205 + 1) <= 1)
                      {
                        v205 += 8;
                        if (v205 == v39)
                        {
                          v205 = v39;
                          break;
                        }
                      }
                    }
                    v177 = v178;
                    if (v205 != v178)
                    {
                      v177 = v205;
                      if (!*(_QWORD *)(*(_QWORD *)v205 + 8))
                      {
                        while (1)
                        {
                          v206 = v177 + 8;
                          v177 = v39;
                          if (v206 != v39)
                          {
                            v177 = v206;
                            while ((unint64_t)(*(_QWORD *)v177 + 1) <= 1)
                            {
                              v177 += 8;
                              if (v177 == v39)
                              {
                                v177 = v39;
                                break;
                              }
                            }
                          }
                          if (v177 == v354)
                            break;
                          v3 = v351;
                          v180 = v353;
                          v178 = v354;
                          if (*(_QWORD *)(*(_QWORD *)v177 + 8))
                            goto LABEL_438;
                        }
                        v180 = v353;
                        v178 = v354;
                        v177 = v354;
                        v3 = v351;
                      }
                    }
LABEL_438:
                    ++*(_DWORD *)(v4 + 624);
                  }
                  while (v177 != v180);
                  v2 = *(_QWORD *)(v4 + 616);
                  v162 = v349;
                }
                if (v2)
                {
                  v333 = v162;
                  *(_QWORD *)(v4 + 616) = 0;
                  v334 = *(unsigned int *)(v2 - 4);
                  if ((_DWORD)v334)
                  {
                    for (n = 0; n != v334; ++n)
                    {
                      v336 = *(_QWORD *)(v2 + 8 * n);
                      if (v336 != -1)
                      {
                        *(_QWORD *)(v2 + 8 * n) = 0;
                        if (v336)
                        {
                          do
                          {
                            v337 = __ldaxr((unsigned int *)v336);
                            v338 = v337 - 1;
                          }
                          while (__stlxr(v338, (unsigned int *)v336));
                          if (!v338)
                          {
                            atomic_store(1u, (unsigned int *)v336);
                            v339 = *(unsigned int *)(v336 + 28);
                            if ((_DWORD)v339)
                              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v336 + 16), (WTF::StringImpl *)(*(_QWORD *)(v336 + 16) + 32 * v339));
                            v340 = *(WTF **)(v336 + 16);
                            if (v340)
                            {
                              *(_QWORD *)(v336 + 16) = 0;
                              *(_DWORD *)(v336 + 24) = 0;
                              WTF::fastFree(v340, v95);
                            }
                            WTF::fastFree((WTF *)v336, v95);
                          }
                        }
                      }
                    }
                  }
                  WTF::fastFree((WTF *)(v2 - 16), v95);
                  v207 = *(_QWORD *)(v4 + 616);
                  *(_DWORD *)(v4 + 624) = 0;
                  if (v207)
                  {
                    LODWORD(v207) = *(_DWORD *)(v207 - 12);
                    v3 = v351;
                    v162 = v333;
                    if (v207 > 0x7FFFFFFE)
                      LODWORD(v207) = 0x7FFFFFFF;
                  }
                  else
                  {
                    v3 = v351;
                    v162 = v333;
                  }
                }
                else
                {
                  LODWORD(v207) = 0;
                  *(_DWORD *)(v4 + 624) = 0;
                }
                *(_DWORD *)(v4 + 628) = 2 * v207;
                if ((v181 & 1) == 0
                  || (v208 = v162,
                      WebCore::AXObjectCache::updateCurrentModalNode((WebCore::AXObjectCache *)v4, (WebCore::Element *)!v162), v208))
                {
LABEL_458:
                  v212 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v212 = off_1E3370C28;
                  *((_QWORD *)v212 + 1) = v4;
                  v361[0] = v212;
                  WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v4 + 632), v361);
                  (*(void (**)(WebCore::Node *))(*(_QWORD *)v212 + 8))(v212);
                  v214 = *(_QWORD *)(v4 + 632);
                  if (v214)
                  {
                    *(_QWORD *)(v4 + 632) = 0;
                    v341 = *(unsigned int *)(v214 - 4);
                    if ((_DWORD)v341)
                    {
                      for (ii = 0; ii != v341; ++ii)
                      {
                        v343 = *(_QWORD *)(v214 + 8 * ii);
                        if (v343 != -1)
                        {
                          *(_QWORD *)(v214 + 8 * ii) = 0;
                          if (v343)
                          {
                            do
                            {
                              v344 = __ldaxr((unsigned int *)v343);
                              v345 = v344 - 1;
                            }
                            while (__stlxr(v345, (unsigned int *)v343));
                            if (!v345)
                            {
                              atomic_store(1u, (unsigned int *)v343);
                              v346 = *(unsigned int *)(v343 + 28);
                              if ((_DWORD)v346)
                                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v343 + 16), (WTF::StringImpl *)(*(_QWORD *)(v343 + 16) + 32 * v346));
                              v347 = *(WTF **)(v343 + 16);
                              if (v347)
                              {
                                *(_QWORD *)(v343 + 16) = 0;
                                *(_DWORD *)(v343 + 24) = 0;
                                WTF::fastFree(v347, v213);
                              }
                              WTF::fastFree((WTF *)v343, v213);
                            }
                          }
                        }
                      }
                    }
                    WTF::fastFree((WTF *)(v214 - 16), v213);
                    v215 = *(_QWORD *)(v4 + 632);
                    *(_DWORD *)(v4 + 640) = 0;
                    if (v215)
                    {
                      LODWORD(v215) = *(_DWORD *)(v215 - 12);
                      v5 = v350;
                      v3 = v351;
                      if (v215 > 0x7FFFFFFE)
                        LODWORD(v215) = 0x7FFFFFFF;
                    }
                    else
                    {
                      v5 = v350;
                      v3 = v351;
                    }
                  }
                  else
                  {
                    LODWORD(v215) = 0;
                    *(_DWORD *)(v4 + 640) = 0;
                    v5 = v350;
                  }
                  *(_DWORD *)(v4 + 644) = 2 * v215;
                  v216 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
                  v217 = off_1E3370C50;
                  *v216 = off_1E3370C50;
                  v216[1] = (uint64_t (**)())v4;
                  v218 = *(_QWORD *)(v4 + 648);
                  if (v218)
                  {
                    v219 = *(unsigned int *)(v218 - 12);
                    if ((_DWORD)v219)
                    {
                      if (v219 >> 29)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1955E5D6CLL);
                      }
                      v221 = (WTF *)WTF::fastMalloc((WTF *)(8 * v219));
                      v222 = *(_QWORD *)(v4 + 648);
                      if (!v222 || !*(_DWORD *)(v222 - 12))
                        goto LABEL_469;
                      v223 = *(unsigned int *)(v222 - 4);
                      if ((_DWORD)v223)
                      {
                        v224 = 8 * v223;
                        v225 = *(uint64_t **)(v4 + 648);
                        while ((unint64_t)(*v225 + 1) <= 1)
                        {
                          ++v225;
                          v224 -= 8;
                          if (!v224)
                            goto LABEL_469;
                        }
                      }
                      else
                      {
                        v225 = *(uint64_t **)(v4 + 648);
                      }
                      v257 = (uint64_t *)(v222 + 8 * v223);
                      if (v225 == v257)
                        goto LABEL_469;
                      v258 = 0;
                      v259 = *v225;
                      v260 = 1;
LABEL_549:
                      v261 = v260;
                      v262 = *(_QWORD *)(v259 + 8);
                      if (!v262)
                      {
                        v263 = 0;
                        goto LABEL_551;
                      }
                      v263 = *(_QWORD *)(v262 + 16);
                      if (!v263)
                      {
                        v263 = WTF::fastCompactMalloc((WTF *)0x10);
                        *(_DWORD *)v263 = 1;
                        *(_QWORD *)(v263 + 8) = v262;
                        v265 = *(WTF **)(v262 + 16);
                        *(_QWORD *)(v262 + 16) = v263;
                        if (v265)
                        {
                          if (*(_DWORD *)v265 == 1)
                          {
                            WTF::fastFree(v265, v220);
                            v263 = *(_QWORD *)(v262 + 16);
                            if (!v263)
                              goto LABEL_561;
                          }
                          else
                          {
                            --*(_DWORD *)v265;
                          }
                        }
                      }
                      ++*(_DWORD *)v263;
LABEL_561:
                      v3 = v351;
LABEL_551:
                      v264 = v258 + 1;
                      *((_QWORD *)v221 + v258) = v263;
                      while (++v225 != v257)
                      {
                        v259 = *v225;
                        if ((unint64_t)(*v225 + 1) > 1)
                        {
                          v260 = v261 + 1;
                          ++v258;
                          if (v225 != v257)
                            goto LABEL_549;
                          break;
                        }
                      }
                      v5 = v350;
                      if (v264)
                      {
                        v266 = (WTF *)((char *)v221 + 8 * v264);
                        v267 = v221;
                        do
                        {
                          v268 = *(_QWORD *)v267;
                          if (*(_QWORD *)v267)
                          {
                            v220 = *(void **)(v268 + 8);
                            if (v220)
                            {
                              v269 = *(_QWORD *)(v4 + 648);
                              if (v269)
                              {
                                v270 = *(_DWORD *)(v269 - 8);
                                v271 = (~(v268 << 32) + v268) ^ ((unint64_t)(~(v268 << 32) + v268) >> 22);
                                v272 = 9 * ((v271 + ~(v271 << 13)) ^ ((v271 + ~(v271 << 13)) >> 8));
                                v273 = (v272 ^ (v272 >> 15)) + ~((v272 ^ (v272 >> 15)) << 27);
                                v274 = v270 & ((v273 >> 31) ^ v273);
                                for (jj = 1; ; ++jj)
                                {
                                  v276 = *(_QWORD *)(v269 + 8 * v274);
                                  if (!v276)
                                    break;
                                  if (v276 != -1 && v276 == v268)
                                  {
                                    ((void (*)(uint64_t (***)()))(*v216)[2])(v216);
                                    break;
                                  }
                                  v274 = (v274 + jj) & v270;
                                }
                              }
                            }
                          }
                          v267 = (WTF *)((char *)v267 + 8);
                        }
                        while (v267 != v266);
                        v278 = 8 * v261;
                        v279 = (WTF **)v221;
                        v5 = v350;
                        do
                        {
                          v280 = *v279;
                          *v279 = 0;
                          if (v280)
                          {
                            if (*(_DWORD *)v280 == 1)
                              WTF::fastFree(v280, v220);
                            else
                              --*(_DWORD *)v280;
                          }
                          ++v279;
                          v278 -= 8;
                        }
                        while (v278);
                      }
LABEL_469:
                      WTF::fastFree(v221, v220);
                      v217 = *v216;
                      goto LABEL_470;
                    }
                    v217 = off_1E3370C50;
                  }
LABEL_470:
                  result = (WebCore::Node *)((uint64_t (*)(uint64_t (***)()))v217[1])(v216);
                  v227 = *(WTF ***)(v4 + 648);
                  if (v227)
                  {
                    *(_QWORD *)(v4 + 648) = 0;
                    v246 = *((unsigned int *)v227 - 1);
                    if ((_DWORD)v246)
                    {
                      v247 = v227;
                      do
                      {
                        v248 = *v247;
                        if (*v247 != (WTF *)-1)
                        {
                          *v247 = 0;
                          if (v248)
                          {
                            if (*(_DWORD *)v248 == 1)
                              WTF::fastFree(v248, v226);
                            else
                              --*(_DWORD *)v248;
                          }
                        }
                        ++v247;
                        --v246;
                      }
                      while (v246);
                    }
                    result = (WebCore::Node *)WTF::fastFree((WTF *)(v227 - 2), v226);
                    v228 = *(_QWORD *)(v4 + 648);
                    *(_DWORD *)(v4 + 656) = 0;
                    if (v228)
                    {
                      LODWORD(v228) = *(_DWORD *)(v228 - 12);
                      if (v228 > 0x7FFFFFFE)
                        LODWORD(v228) = 0x7FFFFFFF;
                    }
                  }
                  else
                  {
                    LODWORD(v228) = 0;
                    *(_DWORD *)(v4 + 656) = 0;
                  }
                  *(_DWORD *)(v4 + 660) = 2 * v228;
                  v229 = v356;
                  if (HIDWORD(v357))
                  {
                    v234 = (WTF::StringImpl *)((char *)v356 + 8 * HIDWORD(v357));
                    do
                    {
                      v235 = *(_QWORD *)v229;
                      *(_QWORD *)v229 = 0;
                      if (v235)
                      {
                        do
                        {
                          v236 = __ldaxr((unsigned int *)v235);
                          v237 = v236 - 1;
                        }
                        while (__stlxr(v237, (unsigned int *)v235));
                        if (!v237)
                        {
                          atomic_store(1u, (unsigned int *)v235);
                          v238 = *(unsigned int *)(v235 + 28);
                          if ((_DWORD)v238)
                            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v235 + 16), (WTF::StringImpl *)(*(_QWORD *)(v235 + 16) + 32 * v238));
                          v239 = *(WTF **)(v235 + 16);
                          if (v239)
                          {
                            *(_QWORD *)(v235 + 16) = 0;
                            *(_DWORD *)(v235 + 24) = 0;
                            WTF::fastFree(v239, v226);
                          }
                          result = (WebCore::Node *)WTF::fastFree((WTF *)v235, v226);
                          v5 = v350;
                          v3 = v351;
                        }
                      }
                      v229 = (WTF::StringImpl *)((char *)v229 + 8);
                    }
                    while (v229 != v234);
                    v229 = v356;
                    if (!v356)
                    {
LABEL_475:
                      v230 = v358;
                      if (HIDWORD(v359))
                      {
                        v240 = (WTF *)((char *)v358 + 8 * HIDWORD(v359));
                        do
                        {
                          v241 = *(_QWORD *)v230;
                          *(_QWORD *)v230 = 0;
                          if (v241)
                          {
                            do
                            {
                              v242 = __ldaxr((unsigned int *)v241);
                              v243 = v242 - 1;
                            }
                            while (__stlxr(v243, (unsigned int *)v241));
                            if (!v243)
                            {
                              atomic_store(1u, (unsigned int *)v241);
                              v244 = *(unsigned int *)(v241 + 28);
                              if ((_DWORD)v244)
                                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v241 + 16), (WTF::StringImpl *)(*(_QWORD *)(v241 + 16) + 32 * v244));
                              v245 = *(WTF **)(v241 + 16);
                              if (v245)
                              {
                                *(_QWORD *)(v241 + 16) = 0;
                                *(_DWORD *)(v241 + 24) = 0;
                                WTF::fastFree(v245, v226);
                              }
                              result = (WebCore::Node *)WTF::fastFree((WTF *)v241, v226);
                              v5 = v350;
                              v3 = v351;
                            }
                          }
                          v230 = (WTF *)((char *)v230 + 8);
                        }
                        while (v230 != v240);
                        v230 = v358;
                        if (!v358)
                          goto LABEL_478;
                      }
                      else if (!v358)
                      {
                        goto LABEL_478;
                      }
                      result = (WebCore::Node *)WTF::fastFree(v230, v226);
LABEL_478:
                      if (v3)
                      {
                        v231 = (unsigned int *)((char *)v3 + 8);
                        do
                        {
                          v232 = __ldaxr(v231);
                          v233 = v232 - 1;
                        }
                        while (__stlxr(v233, v231));
                        if (!v233)
                        {
                          atomic_store(1u, v231);
                          v306 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                          *(_QWORD *)v306 = off_1E31FE290;
                          *((_QWORD *)v306 + 1) = v231;
                          v361[0] = v306;
                          WTF::ensureOnMainThread();
                          result = v361[0];
                          v361[0] = 0;
                          if (result)
                            result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result
                                                                                                 + 8))(result);
                        }
                      }
                      if (!v5)
                        goto LABEL_486;
                      v6 = *(_DWORD *)(v5 + 24) - 2;
LABEL_484:
                      if (v6)
                      {
                        *(_DWORD *)(v5 + 24) = v6;
                      }
                      else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
                      {
                        result = (WebCore::Node *)WebCore::Node::removedLastRef((WebCore::Node *)v5);
                      }
LABEL_486:
                      *(_BYTE *)(v4 + 737) = 0;
                      return result;
                    }
                  }
                  else if (!v356)
                  {
                    goto LABEL_475;
                  }
                  result = (WebCore::Node *)WTF::fastFree(v229, v226);
                  goto LABEL_475;
                }
                v210 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
                *(_DWORD *)(v210 + 24) += 2;
                if (*(_QWORD *)(v210 + 1944))
                {
                  if (!*(_BYTE *)(v210 + 3405))
                  {
                    v211 = *(_QWORD *)(v4 + 336);
                    if (v211)
                    {
                      v254 = *(WebCore::Node **)(v211 + 8);
                      if (v254)
                      {
                        if ((*((_QWORD *)v254 + 8) & 0xFFFFFFFFFFFFLL) != 0
                          && (*(_BYTE *)((*((_QWORD *)v254 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 4) == 0
                          && WebCore::AXObjectCache::isNodeVisible(v209, v254)
                          && !*(_BYTE *)(v4 + 712))
                        {
                          v255 = *(_QWORD *)(v4 + 336);
                          if (v255)
                            v256 = *(_QWORD *)(v255 + 8);
                          else
                            v256 = 0;
                          v307 = *(_QWORD *)(v210 + 1248);
                          if (!v307)
                            goto LABEL_641;
                          if (v256 != v307)
                          {
                            v308 = *(_WORD *)(v256 + 28);
                            if ((v308 & 0xF000) == 0x9000)
                            {
                              if (**(_QWORD **)(v307 + 40) != v256
                                || (*(_WORD *)(v307 + 28) & 0xF000) == 0x9000
                                || (*(_BYTE *)(v307 + 22) & 8) == 0)
                              {
                                goto LABEL_641;
                              }
                            }
                            else
                            {
                              if ((v308 & 4) == 0
                                || !*(_QWORD *)(v256 + 80)
                                || ((*(unsigned __int8 *)(v307 + 22) ^ *(unsigned __int8 *)(v256 + 22)) & 8) != 0)
                              {
                                goto LABEL_641;
                              }
                              do
                                v307 = *(_QWORD *)(v307 + 32);
                              while (v307 != v256 && v307 != 0);
                              if (!v307)
                              {
LABEL_641:
                                v310 = (WebCore *)WebCore::AXObjectCache::getOrCreate(v4, *(_QWORD *)(v255 + 8), 0);
                                if (v310)
                                {
                                  FocusableChild = WebCore::firstFocusableChild(v310, v311);
                                  if (FocusableChild)
                                    (*(void (**)(WebCore *, uint64_t))(*(_QWORD *)FocusableChild + 1760))(FocusableChild, 1);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (*(_DWORD *)(v210 + 24) == 2)
                {
                  if ((*(_WORD *)(v210 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v210);
                }
                else
                {
                  *(_DWORD *)(v210 + 24) -= 2;
                }
                goto LABEL_458;
              }
LABEL_746:
              v162 = v96;
LABEL_369:
              v177 = v39;
              v39 = v2 + 8 * v120;
              if (!v2)
              {
                v178 = 0;
                goto LABEL_379;
              }
              goto LABEL_377;
            }
            v152 = v4 + 696;
            v153 = *(_QWORD *)(v4 + 696);
            if (v153)
              v154 = *(WebCore::Node **)(v153 + 8);
            else
              v154 = 0;
            v155 = *(_QWORD *)(v4 + 704);
            if (v155)
              v156 = *(WebCore::Node **)(v155 + 8);
            else
              v156 = 0;
            WebCore::AXObjectCache::handleMenuItemSelected((WebCore::AXObjectCache *)v4, v156);
            WebCore::AXObjectCache::handleTabPanelSelected((WebCore::AXObjectCache *)v4, v154, v156);
            WebCore::AXObjectCache::postNotification((WebCore::AXObjectCache *)v4, v156, 24, 0);
            v120 = *(unsigned __int8 *)(v4 + 712);
            if (*(_BYTE *)(v4 + 712))
            {
              if (!*(_QWORD *)v152)
                goto LABEL_347;
              v95 = *(uint64_t **)(*(_QWORD *)v152 + 8);
              if (!v95)
                goto LABEL_347;
              v157 = WebCore::AXObjectCache::get((WebCore::AXObjectCache *)v4, (WebCore::Node *)v95);
              if (!v157)
                goto LABEL_347;
              v158 = (unsigned __int8 *)v157;
              v159 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 1488))(v157);
              v160 = (WebCore::AXObjectCache *)v159;
              if (v159 && *(_BYTE *)(v159 + 361)
                || ((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v158 + 2896))(v158) & 1) == 0)
              {
                v161 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v158 + 2872))(v158);
              }
              else
              {
                v161 = 1;
              }
              v163 = v158[59];
              v158[59] = v161;
              if (v160)
              {
                v164 = v163 == 1 ? v161 : 1;
                v165 = v163 ? 0 : v161;
                if (v164 != 1 || v165)
                {
                  v166 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v158 + 1232))(v158);
                  WebCore::AXObjectCache::childrenChanged(v160, v166);
                }
              }
              v120 = *(unsigned __int8 *)(v4 + 712);
              if (*(_BYTE *)(v4 + 712))
              {
LABEL_347:
                v167 = *(_QWORD *)(v4 + 704);
                if (!v167)
                  goto LABEL_366;
                v95 = *(uint64_t **)(v167 + 8);
                if (!v95)
                  goto LABEL_366;
                v168 = WebCore::AXObjectCache::get((WebCore::AXObjectCache *)v4, (WebCore::Node *)v95);
                if (!v168)
                  goto LABEL_366;
                v169 = (unsigned __int8 *)v168;
                v170 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 1488))(v168);
                v171 = (WebCore::AXObjectCache *)v170;
                if (v170 && *(_BYTE *)(v170 + 361)
                  || ((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v169 + 2896))(v169) & 1) == 0)
                {
                  v172 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v169 + 2872))(v169);
                }
                else
                {
                  v172 = 1;
                }
                v173 = v169[59];
                v169[59] = v172;
                if (v171)
                {
                  v174 = v173 == 1 ? v172 : 1;
                  v175 = v173 ? 0 : v172;
                  if (v174 != 1 || v175)
                  {
                    v176 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v169 + 1232))(v169);
                    WebCore::AXObjectCache::childrenChanged(v171, v176);
                  }
                }
                v162 = *(_BYTE *)(v4 + 712) != 0;
                if (*(_BYTE *)(v4 + 712))
                {
LABEL_366:
                  std::pair<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~pair((uint64_t *)(v4 + 696), v95);
                  *(_BYTE *)(v4 + 712) = 0;
                  v162 = 1;
                }
                goto LABEL_367;
              }
            }
LABEL_745:
            __break(1u);
            goto LABEL_746;
          }
          goto LABEL_225;
        }
        v37 = (uint64_t *)(v34 + 8 * v35);
      }
      else
      {
        v37 = 0;
        v35 = 0;
      }
      v36 = (uint64_t *)(v34 + 8 * v35);
      goto LABEL_73;
    }
    while (1)
    {
      if (!*((_BYTE *)v12 + 144))
      {
        v15 = *((_QWORD *)v12 + 37);
        if (v15)
        {
          v16 = *(_DWORD *)(v15 + 24) + 2;
          *(_DWORD *)(v15 + 24) = v16;
          v17 = *(_QWORD *)(v15 + 528);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 8);
            if (v18)
            {
              v19 = *(_QWORD *)(v18 + 288);
              if (v19)
              {
                v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 344) + 8) + 328) + 296);
                if (v20)
                  v20 = *(_QWORD *)(v20 + 1944);
                if ((*(_QWORD *)(v19 + 384) & 0xFFFFFFFFFFFFLL) != 0
                  && *(double *)((*(_QWORD *)(v19 + 384) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
                  || v20 && (*(_BYTE *)(v20 + 20) & 0xF8) != 0
                  || (v21 = *(_QWORD *)(v19 + 464)) != 0 && *(_QWORD *)(v21 + 8)
                  || *(_DWORD *)(v19 + 488) && *(_BYTE *)(v19 + 478))
                {
                  WebCore::Document::updateLayout(v15, 2, 0);
                  v16 = *(_DWORD *)(v15 + 24);
                }
              }
            }
          }
          v22 = v16 - 2;
          if (v22)
          {
            *(_DWORD *)(v15 + 24) = v22;
          }
          else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v15);
          }
        }
      }
      v23 = (unsigned int *)*((_QWORD *)v12 + 11);
      if (v23)
        break;
      v24 = *(_QWORD *)(*((_QWORD *)v12 + 6) + 8);
      if (v24)
      {
        v23 = (unsigned int *)*((_QWORD *)v12 + 9);
        if (v23)
          break;
        while (1)
        {
          v25 = *(_QWORD *)(v24 + 56);
          if (!v25)
            break;
          v24 = *(_QWORD *)(v25 + 8);
          if (!v24)
            break;
          v23 = *(unsigned int **)(v24 + 72);
          if (v23)
            goto LABEL_38;
        }
      }
      v23 = 0;
      v28 = 1;
LABEL_42:
      v2 = (uint64_t)(v12 + 2);
      do
      {
        v29 = __ldaxr((unsigned int *)v2);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unsigned int *)v2));
      if (!v30)
      {
        atomic_store(1u, (unsigned int *)v2);
        v31 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v31 = off_1E31FE290;
        *((_QWORD *)v31 + 1) = v2;
        v361[0] = v31;
        WTF::ensureOnMainThread();
        v32 = v361[0];
        v361[0] = 0;
        if (v32)
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v32 + 8))(v32);
      }
      v12 = v23;
      if (v28)
        goto LABEL_62;
    }
LABEL_38:
    v26 = v23 + 2;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    v28 = 0;
    goto LABEL_42;
  }
  return result;
}

void sub_1955E5DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t **WTF::WeakHashSet<WebCore::HTMLTableElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t **result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t **v4;
  void *v5;
  WTF *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int j;
  uint64_t v27;
  WTF *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;

  if (*result)
  {
    v2 = *((unsigned int *)*result - 3);
    if ((_DWORD)v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v4 = result;
        v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
        v7 = *v4;
        if (*v4 && *((_DWORD *)v7 - 3))
        {
          v8 = *((unsigned int *)v7 - 1);
          if ((_DWORD)v8)
          {
            v9 = 8 * v8;
            for (i = *v4; (unint64_t)(*i + 1) <= 1; ++i)
            {
              v9 -= 8;
              if (!v9)
                return (uint64_t **)WTF::fastFree(v6, v5);
            }
          }
          else
          {
            i = *v4;
          }
          v11 = &v7[v8];
          if (i != v11)
          {
            v12 = 0;
            v13 = *i;
LABEL_15:
            v14 = *(unsigned int **)(v13 + 8);
            if (v14)
            {
              v14 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)v14);
              if (v14)
              {
                do
                  v15 = __ldaxr(v14);
                while (__stlxr(v15 + 1, v14));
              }
            }
            v16 = v12 + 1;
            *((_QWORD *)v6 + v12) = v14;
            while (++i != v11)
            {
              v13 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                ++v12;
                if (i != v11)
                  goto LABEL_15;
                break;
              }
            }
            if (v16)
            {
              v17 = (WTF *)((char *)v6 + 8 * v16);
              v18 = v6;
              do
              {
                v19 = *(_QWORD *)v18;
                if (*(_QWORD *)v18)
                {
                  v5 = *(void **)(v19 + 8);
                  if (v5)
                  {
                    v20 = *v4;
                    if (*v4)
                    {
                      v21 = *((_DWORD *)v20 - 2);
                      v22 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
                      v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
                      v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
                      v25 = v21 & ((v24 >> 31) ^ v24);
                      for (j = 1; ; ++j)
                      {
                        v27 = v20[v25];
                        if (!v27)
                          break;
                        if (v27 != -1 && v27 == v19)
                        {
                          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
                          break;
                        }
                        v25 = (v25 + j) & v21;
                      }
                    }
                  }
                }
                v18 = (WTF *)((char *)v18 + 8);
              }
              while (v18 != v17);
              v29 = v6;
              do
              {
                v30 = *(_QWORD *)v29;
                *(_QWORD *)v29 = 0;
                if (v30)
                {
                  do
                  {
                    v31 = __ldaxr((unsigned int *)v30);
                    v32 = v31 - 1;
                  }
                  while (__stlxr(v32, (unsigned int *)v30));
                  if (!v32)
                  {
                    atomic_store(1u, (unsigned int *)v30);
                    v33 = *(unsigned int *)(v30 + 28);
                    if ((_DWORD)v33)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v30 + 16), (WTF::StringImpl *)(*(_QWORD *)(v30 + 16) + 32 * v33));
                    v34 = *(WTF **)(v30 + 16);
                    if (v34)
                    {
                      *(_QWORD *)(v30 + 16) = 0;
                      *(_DWORD *)(v30 + 24) = 0;
                      WTF::fastFree(v34, v5);
                    }
                    WTF::fastFree((WTF *)v30, v5);
                  }
                }
                v29 = (WTF *)((char *)v29 + 8);
              }
              while (v29 != v17);
            }
          }
        }
        return (uint64_t **)WTF::fastFree(v6, v5);
      }
    }
  }
  return result;
}

uint64_t WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *i;
  uint64_t v5;
  WTF *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;

  v2 = result;
  v3 = result + 8;
  for (i = *(WTF **)(result + 8); i; result = WTF::fastFree(v6, a2))
  {
    v6 = i;
    i = (WTF *)*((_QWORD *)i + 2);
    v7 = *(unsigned int **)v6;
    *(_QWORD *)v6 = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v12 = v6;
        v13 = (WTF *)v7;
        atomic_store(1u, v7);
        v10 = v7[7];
        if ((_DWORD)v10)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v13 + 2), (WTF::StringImpl *)(*((_QWORD *)v13 + 2) + 32 * v10));
        v11 = (WTF *)*((_QWORD *)v13 + 2);
        if (v11)
        {
          *((_QWORD *)v13 + 2) = 0;
          *((_DWORD *)v13 + 6) = 0;
          WTF::fastFree(v11, a2);
        }
        WTF::fastFree(v13, a2);
        v6 = v12;
      }
    }
  }
  v5 = *(_QWORD *)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    result = WTF::fastFree((WTF *)(v5 - 16), a2);
    v5 = *(_QWORD *)v2;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 16) = 0;
    if (v5)
    {
      LODWORD(v5) = *(_DWORD *)(v5 - 12);
      if (v5 > 0x7FFFFFFE)
        LODWORD(v5) = 0x7FFFFFFF;
    }
  }
  else
  {
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 16) = 0;
  }
  *(_DWORD *)(v2 + 28) = 2 * v5;
  return result;
}

uint64_t **WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t **result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t **v4;
  void *v5;
  WTF *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t *v16;
  unsigned int v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int j;
  uint64_t v28;
  WTF *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;

  if (*result)
  {
    v2 = *((unsigned int *)*result - 3);
    if ((_DWORD)v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v4 = result;
        v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
        v7 = *v4;
        if (*v4 && *((_DWORD *)v7 - 3))
        {
          v8 = *((unsigned int *)v7 - 1);
          if ((_DWORD)v8)
          {
            v9 = 8 * v8;
            for (i = *v4; (unint64_t)(*i + 1) <= 1; ++i)
            {
              v9 -= 8;
              if (!v9)
                return (uint64_t **)WTF::fastFree(v6, v5);
            }
          }
          else
          {
            i = *v4;
          }
          v11 = &v7[v8];
          if (i != v11)
          {
            v12 = 0;
            v13 = *i;
LABEL_15:
            v14 = *(unsigned int **)(v13 + 8);
            if (v14)
            {
              v16 = v11;
              v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v14);
              if (v14)
              {
                do
                  v17 = __ldaxr(v14);
                while (__stlxr(v17 + 1, v14));
              }
              v11 = v16;
            }
            v15 = v12 + 1;
            *((_QWORD *)v6 + v12) = v14;
            while (++i != v11)
            {
              v13 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                ++v12;
                if (i != v11)
                  goto LABEL_15;
                break;
              }
            }
            if (v15)
            {
              v18 = (WTF *)((char *)v6 + 8 * v15);
              v19 = v6;
              do
              {
                v20 = *(_QWORD *)v19;
                if (*(_QWORD *)v19)
                {
                  v5 = *(void **)(v20 + 8);
                  if (v5)
                  {
                    v21 = *v4;
                    if (*v4)
                    {
                      v22 = *((_DWORD *)v21 - 2);
                      v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
                      v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
                      v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
                      v26 = v22 & ((v25 >> 31) ^ v25);
                      for (j = 1; ; ++j)
                      {
                        v28 = v21[v26];
                        if (!v28)
                          break;
                        if (v28 != -1 && v28 == v20)
                        {
                          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
                          break;
                        }
                        v26 = (v26 + j) & v22;
                      }
                    }
                  }
                }
                v19 = (WTF *)((char *)v19 + 8);
              }
              while (v19 != v18);
              v30 = v6;
              do
              {
                v31 = *(_QWORD *)v30;
                *(_QWORD *)v30 = 0;
                if (v31)
                {
                  do
                  {
                    v32 = __ldaxr((unsigned int *)v31);
                    v33 = v32 - 1;
                  }
                  while (__stlxr(v33, (unsigned int *)v31));
                  if (!v33)
                  {
                    atomic_store(1u, (unsigned int *)v31);
                    v34 = *(unsigned int *)(v31 + 28);
                    if ((_DWORD)v34)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v31 + 16), (WTF::StringImpl *)(*(_QWORD *)(v31 + 16) + 32 * v34));
                    v35 = *(WTF **)(v31 + 16);
                    if (v35)
                    {
                      *(_QWORD *)(v31 + 16) = 0;
                      *(_DWORD *)(v31 + 24) = 0;
                      WTF::fastFree(v35, v5);
                    }
                    WTF::fastFree((WTF *)v31, v5);
                  }
                }
                v30 = (WTF *)((char *)v30 + 8);
              }
              while (v30 != v18);
            }
          }
        }
        return (uint64_t **)WTF::fastFree(v6, v5);
      }
    }
  }
  return result;
}

void WebCore::AXObjectCache::deferRecomputeIsIgnoredIfNeeded(WebCore::AXObjectCache *this, WebCore::Element *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  WebCore::AXObjectCache *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  WebCore::AccessibilityObject *v16;
  _BYTE v17[24];

  if (a2)
  {
    if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v2 = *(_DWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x14);
      if ((v2 & 4) == 0)
      {
        if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
        }
        else if ((v2 & 0xF8) != 0
               || (v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x18)
                                                          + 8)
                                              + 40)
                                  + 8),
                   !*(_BYTE *)(v3 + 3362))
               && (*(_BYTE *)(v3 + 3390)
                || (*(_BYTE *)(v3 + 70) & 8) != 0
                || *(_QWORD *)(v3 + 1560)
                || (v4 = *(_QWORD *)(v3 + 1328), *(_BYTE *)(v4 + 233))
                || *(_BYTE *)(v4 + 234))
               || *(_BYTE *)(v3 + 3392)
               || (v5 = *(_QWORD *)(v3 + 528)) != 0
               && (v6 = *(_QWORD *)(v5 + 8)) != 0
               && (v7 = *(_QWORD *)(v6 + 288)) != 0
               && *(_BYTE *)(v7 + 480) == 2)
        {
          WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>((uint64_t)this + 448, a2, (uint64_t)v17);
        }
        else
        {
          v8 = WebCore::AXObjectCache::get(this, (WebCore::RenderObject *)(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL));
          if (v8)
          {
            v9 = (unsigned __int8 *)v8;
            v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1488))(v8);
            v11 = (WebCore::AXObjectCache *)v10;
            if (v10 && *(_BYTE *)(v10 + 361)
              || ((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 2896))(v9) & 1) == 0)
            {
              v12 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 2872))(v9);
            }
            else
            {
              v12 = 1;
            }
            v13 = v9[59];
            v9[59] = v12;
            if (v11)
            {
              if (v13 == 1)
                v14 = v12;
              else
                v14 = 1;
              if (v13)
                v15 = 0;
              else
                v15 = v12;
              if (v14 != 1 || v15)
              {
                v16 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 1232))(v9);
                WebCore::AXObjectCache::childrenChanged(v11, v16);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t *WebCore::AXObjectCache::deferRecomputeIsIgnored(uint64_t *this, WebCore::Element *a2)
{
  _BYTE v2[24];

  if (a2
    && (*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 4) == 0)
  {
    return WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>((uint64_t)(this + 56), a2, (uint64_t)v2);
  }
  return this;
}

uint64_t WTF::WeakHashSet<WebCore::HTMLTableElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLTableElement>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  void *v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;

  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_16HTMLTableElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a2, (void *)a2);
    v8 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    if (*(_QWORD *)a2)
    {
      v8 = *(_DWORD *)(*(_QWORD *)a2 - 12);
      if (v8 > 0x7FFFFFFE)
        v8 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a2 + 12) = 2 * v8;
  }
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 8) = a3;
    *(_BYTE *)(v9 + 32) = 0;
    v11 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v11 & 0xFFFF000000000000 | v9;
    v12 = v11 & 0xFFFFFFFFFFFFLL;
    if ((v11 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v27 = *(unsigned int *)(v12 + 28);
        if ((_DWORD)v27)
        {
          v32 = v12;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v27));
          v12 = v32;
        }
        v28 = *(WTF **)(v12 + 16);
        if (v28)
        {
          *(_QWORD *)(v12 + 16) = 0;
          *(_DWORD *)(v12 + 24) = 0;
          v31 = v12;
          WTF::fastFree(v28, v10);
          v12 = v31;
        }
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  v15 = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL;
  do
    v16 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v16 + 1, (unsigned int *)v15));
  do
    v17 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v17 + 1, (unsigned int *)v15));
  v33 = (WTF *)v15;
  result = (uint64_t)WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)a2, (uint64_t *)&v33, a1);
  v20 = v33;
  v33 = 0;
  if (!v20)
    goto LABEL_14;
  do
  {
    v21 = __ldaxr((unsigned int *)v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v20));
  if (v22)
  {
LABEL_14:
    if (!v15)
      return result;
    goto LABEL_15;
  }
  atomic_store(1u, (unsigned int *)v20);
  v29 = *((unsigned int *)v20 + 7);
  if ((_DWORD)v29)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v20 + 2), (WTF::StringImpl *)(*((_QWORD *)v20 + 2) + 32 * v29));
  v30 = (WTF *)*((_QWORD *)v20 + 2);
  if (v30)
  {
    *((_QWORD *)v20 + 2) = 0;
    *((_DWORD *)v20 + 6) = 0;
    WTF::fastFree(v30, v19);
  }
  result = WTF::fastFree(v20, v19);
  if (v15)
  {
    do
    {
LABEL_15:
      v23 = __ldaxr((unsigned int *)v15);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)v15));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)v15);
      v25 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v25)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v25));
      v26 = *(WTF **)(v15 + 16);
      if (v26)
      {
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        WTF::fastFree(v26, v19);
      }
      return WTF::fastFree((WTF *)v15, v19);
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebCore::AccessibilityTable,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::AccessibilityTable>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF *v37;

  v6 = a2[3];
  v7 = a2[2] + 1;
  a2[2] = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
    {
LABEL_3:
      v9 = 0;
      a2[2] = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      a2[3] = 2 * v10;
      goto LABEL_6;
    }
    v24 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v24)
      goto LABEL_43;
    v25 = 0;
    do
    {
      while (1)
      {
        v26 = --v24;
        v27 = *(_QWORD *)(v8 + 8 * v24);
        if ((unint64_t)(v27 + 1) >= 2 && !*(_QWORD *)(v27 + 8))
          break;
        if (!(_DWORD)v24)
          goto LABEL_33;
      }
      *(_QWORD *)(v8 + 8 * v24) = 0;
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v35 = v25;
        v34 = v24;
        v36 = v24;
        WTF::fastFree((WTF *)v27, a2);
        v26 = v36;
        v24 = v34;
        v25 = v35;
      }
      *(_QWORD *)(v8 + 8 * v26) = -1;
      ++v25;
    }
    while (v26);
LABEL_33:
    v8 = *(_QWORD *)a2;
    if (v25)
    {
      *(_DWORD *)(v8 - 16) += v25;
      v30 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      *(_DWORD *)(v30 - 12) = v31 - v25;
      v8 = *(_QWORD *)a2;
    }
    if (!v8)
      goto LABEL_3;
    v32 = *(_DWORD *)(v8 - 4);
    if (v32 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v32)
    {
LABEL_43:
      a2[2] = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
      v8 = *(_QWORD *)a2;
      a2[2] = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = *(_QWORD *)(a3 + 32);
  if (!v11)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a3;
    v13 = *(unsigned int **)(a3 + 32);
    *(_QWORD *)(a3 + 32) = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = *(_QWORD *)(a3 + 32);
    }
  }
  do
    v16 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v16 + 1, (unsigned int *)v11));
  do
    v17 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v17 + 1, (unsigned int *)v11));
  v37 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a2, &v37, a1);
  result = (unsigned int *)v37;
  v37 = 0;
  if (!result)
    goto LABEL_17;
  do
  {
    v20 = __ldaxr(result);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, result));
  if (!v21)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
    if (!v11)
      return result;
  }
  else
  {
LABEL_17:
    if (!v11)
      return result;
  }
  do
  {
    v22 = __ldaxr((unsigned int *)v11);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, (unsigned int *)v11));
  if (!v23)
  {
    atomic_store(1u, (unsigned int *)v11);
    return (unsigned int *)WTF::fastFree((WTF *)v11, v18);
  }
  return result;
}

void WebCore::AXObjectCache::deferTextChangedIfNeeded(WebCore::AXObjectCache *this, WebCore::Node *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::AccessibilityObject *v9;
  _BYTE v10[24];

  if (a2)
  {
    if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v2 = *(_DWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x14);
      if ((v2 & 4) == 0)
      {
        if ((v2 & 0xF8) != 0
          || (v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x18) + 8)
                                         + 40)
                             + 8),
              !*(_BYTE *)(v4 + 3362))
          && (*(_BYTE *)(v4 + 3390)
           || (*(_BYTE *)(v4 + 70) & 8) != 0
           || *(_QWORD *)(v4 + 1560)
           || (v5 = *(_QWORD *)(v4 + 1328), *(_BYTE *)(v5 + 233))
           || *(_BYTE *)(v5 + 234))
          || *(_BYTE *)(v4 + 3392)
          || (v6 = *(_QWORD *)(v4 + 528)) != 0
          && (v7 = *(_QWORD *)(v6 + 8)) != 0
          && (v8 = *(_QWORD *)(v7 + 288)) != 0
          && *(_BYTE *)(v8 + 480) == 2)
        {
          WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Node>((uint64_t)this + 512, (uint64_t)a2, (uint64_t)v10);
        }
        else
        {
          v9 = (WebCore::AccessibilityObject *)WebCore::AXObjectCache::getOrCreate((uint64_t)this, (uint64_t)a2, 0);
          WebCore::AXObjectCache::handleTextChanged(this, v9);
        }
      }
    }
  }
}

void WebCore::AXObjectCache::deferSelectedChildrenChangedIfNeeded(WebCore::AXObjectCache *this, WebCore::Element *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v2 = *(_DWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x14);
    if ((v2 & 4) == 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1955E6BC4);
      }
      if ((v2 & 0xF8) != 0
        || (v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x18) + 8)
                                       + 40)
                           + 8),
            !*(_BYTE *)(v4 + 3362))
        && (*(_BYTE *)(v4 + 3390)
         || (*(_BYTE *)(v4 + 70) & 8) != 0
         || *(_QWORD *)(v4 + 1560)
         || (v5 = *(_QWORD *)(v4 + 1328), *(_BYTE *)(v5 + 233))
         || *(_BYTE *)(v5 + 234))
        || *(_BYTE *)(v4 + 3392)
        || (v8 = *(_QWORD *)(v4 + 528)) != 0
        && (v9 = *(_QWORD *)(v8 + 8)) != 0
        && (v10 = *(_QWORD *)(v9 + 288)) != 0
        && *(_BYTE *)(v10 + 480) == 2)
      {
        v6 = WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>((uint64_t)this + 544, a2, (uint64_t)v11);
        if ((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) == 0
          || *(double *)((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          *((_QWORD *)this + 49) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
          WebCore::TimerBase::setNextFireTime((uint64_t)this + 368, v7 + 0.0);
        }
      }
      else
      {
        WebCore::AXObjectCache::postNotification(this, a2, 48, 0);
      }
    }
  }
}

uint64_t WebCore::AXObjectCache::deferTextReplacementNotificationForTextControl(uint64_t this, WebCore::HTMLTextFormControlElement *a2, const WTF::String *a3)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int i;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  WTF *v43;

  if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return this;
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1955E6ED8);
  }
  v5 = (uint64_t *)(this + 664);
  v6 = *(_DWORD *)(this + 672);
  *(_DWORD *)(this + 672) = v6 + 1;
  if (v6 > *(_DWORD *)(this + 676))
    this = WTF::WeakHashMap<WebCore::Element,WTF::String,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(this + 664, a2);
  if ((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    this = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)this = 1;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
    *(_QWORD *)(this + 8) = a2;
    *(_BYTE *)(this + 32) = 0;
    v7 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v7 & 0xFFFF000000000000 | this;
    v8 = v7 & 0xFFFFFFFFFFFFLL;
    if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)v8);
        v42 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v42)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v42));
        v43 = *(WTF **)(v8 + 16);
        if (v43)
        {
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = 0;
          WTF::fastFree(v43, a2);
        }
        this = WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  v11 = *((_QWORD *)a2 + 2);
  v12 = v11 & 0xFFFFFFFFFFFFLL;
  do
    v13 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v13 + 1, (unsigned int *)v12));
  do
    v14 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v14 + 1, (unsigned int *)v12));
  if (v12)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v12);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v12));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v12);
      v40 = *(unsigned int *)((v11 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v40)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v11 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v40));
      v41 = *(WTF **)((v11 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v41)
      {
        *(_QWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v41, a2);
      }
      this = WTF::fastFree((WTF *)(v11 & 0xFFFFFFFFFFFFLL), a2);
    }
  }
  v17 = *v5;
  if (*v5
    || (this = (uint64_t)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v5, 8u, 0), (v17 = *v5) != 0))
  {
    v18 = *(_DWORD *)(v17 - 8);
  }
  else
  {
    v18 = 0;
  }
  v19 = 0;
  v20 = (v12 + ~(v11 << 32)) ^ ((unint64_t)(v12 + ~(v11 << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = (v22 >> 31) ^ v22;
  for (i = 1; ; ++i)
  {
    v25 = v23 & v18;
    v26 = (uint64_t *)(v17 + 16 * (v23 & v18));
    v27 = *v26;
    if (*v26 != -1)
      break;
    v19 = (uint64_t *)(v17 + 16 * v25);
LABEL_24:
    v23 = i + v25;
  }
  if (!v27)
  {
    if (v19)
    {
      *v19 = 0;
      v19[1] = 0;
      --*(_DWORD *)(*v5 - 16);
      *v19 = v12;
      v26 = v19;
    }
    else
    {
      *v26 = v12;
    }
    v32 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      *v32 += 2;
    this = v26[1];
    v26[1] = (uint64_t)v32;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
      else
        *(_DWORD *)this -= 2;
    }
    v33 = *v5;
    if (*v5)
      v34 = *(_DWORD *)(v33 - 12) + 1;
    else
      v34 = 1;
    *(_DWORD *)(v33 - 12) = v34;
    v35 = *v5;
    if (*v5)
      v36 = *(_DWORD *)(v35 - 12);
    else
      v36 = 0;
    v37 = (*(_DWORD *)(v35 - 16) + v36);
    v38 = *(unsigned int *)(v35 - 4);
    if (v38 > 0x400)
    {
      if (v38 > 2 * v37)
        return this;
    }
    else
    {
      if (3 * v38 > 4 * v37)
        return this;
      if (!(_DWORD)v38)
      {
        v39 = 8;
        return (uint64_t)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v5, v39, v26);
      }
    }
    v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
    return (uint64_t)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v5, v39, v26);
  }
  if (v27 != v12)
    goto LABEL_24;
  if (v12)
  {
    do
    {
      v28 = __ldaxr((unsigned int *)v12);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, (unsigned int *)v12));
    if (!v29)
    {
      atomic_store(1u, (unsigned int *)v12);
      v30 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v30)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v30));
      v31 = *(WTF **)(v12 + 16);
      if (v31)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        WTF::fastFree(v31, a2);
      }
      return WTF::fastFree((WTF *)v12, a2);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::AXObjectCache::treeData@<X0>(WebCore::AXObjectCache *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::Widget *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  char v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  char v32;
  int v33;
  __int16 v34;
  int v35;

  *a2 = 0;
  a2[1] = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 1;
  v33 = 0;
  v34 = 256;
  v35 = 0;
  WTF::TextStream::operator<<();
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 528);
  if (!v4
    || (v5 = *(_QWORD *)(v4 + 8)) == 0
    || (v6 = *(WebCore::Widget **)(v5 + 288)) == 0
    || (v7 = WebCore::AXObjectCache::get(this, v6)) == 0)
  {
    WTF::TextStream::operator<<();
    v11 = 0;
    goto LABEL_32;
  }
  v8 = (WTF::StringImpl *)v7;
  v28 = 31;
  v9 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_10:
  ++*(_QWORD *)(v9 + 8);
  v12 = __ldxr((unsigned __int8 *)v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  v27 = v8;
  WebCore::streamSubtree((WTF::TextStream *)&v29, (WTF::StringImpl ***)&v27, &v28);
  v27 = 0;
  v14 = *((_QWORD *)v8 + 1);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_19:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v26 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v26 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v14))
    {
      if (!v17)
        goto LABEL_27;
      goto LABEL_31;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
  if (!v17)
  {
LABEL_27:
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (!v19)
      WTF::fastFree((WTF *)v14, v13);
  }
LABEL_31:
  v11 = *a2;
LABEL_32:
  WTF::TextStream::release((WTF::TextStream *)&v29);
  v22 = v27;
  v27 = 0;
  *a2 = v22;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v21);
      v25 = v27;
      v27 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v21);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v23 = v30;
  v30 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::AXObjectCache::addRelation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::AccessibilityObject *v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  void *v24;
  WebCore::AccessibilityObject *v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  uint64_t v44;
  uint64_t v45;

  v4 = a4;
  if (!(_DWORD)a4)
    return v4;
  if (a2 == a3 && (_DWORD)a4 != 15)
    return 0;
  if ((_DWORD)a4 == 16)
  {
    v7 = *(_QWORD *)(a3 + 104);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      LODWORD(v9) = v8 >> 5;
      if ((v8 & 1) != 0)
      {
        v10 = *(uint64_t **)(v7 + 40);
        LODWORD(v11) = *(_DWORD *)(v7 + 52);
        if (!(_DWORD)v11)
          goto LABEL_18;
      }
      else
      {
        v10 = (uint64_t *)(v7 + 32);
        LODWORD(v11) = v8 >> 5;
        if (!(_DWORD)v9)
        {
LABEL_18:
          if ((v8 & 1) != 0)
          {
            v13 = *(uint64_t **)(v7 + 40);
            LODWORD(v14) = *(_DWORD *)(v7 + 52);
            if (!(_DWORD)v14)
              goto LABEL_29;
          }
          else
          {
            v13 = (uint64_t *)(v7 + 32);
            LODWORD(v14) = v8 >> 5;
            if (!(_DWORD)v9)
            {
LABEL_29:
              if ((v8 & 1) != 0)
              {
                v16 = *(uint64_t **)(v7 + 40);
                LODWORD(v9) = *(_DWORD *)(v7 + 52);
                if (!(_DWORD)v9)
                  goto LABEL_40;
              }
              else
              {
                v16 = (uint64_t *)(v7 + 32);
                if (!(_DWORD)v9)
                  goto LABEL_40;
              }
              v9 = v9;
              while (1)
              {
                v17 = *v16;
                if (*v16 == WebCore::HTMLNames::aria_labeledbyAttr
                  || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labeledbyAttr + 24)
                  && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labeledbyAttr + 32))
                {
                  return 0;
                }
                v16 += 2;
                if (!--v9)
                  goto LABEL_40;
              }
            }
          }
          v14 = v14;
          while (1)
          {
            v15 = *v13;
            if (*v13 == WebCore::HTMLNames::aria_labelledbyAttr
              || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelledbyAttr + 24)
              && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelledbyAttr + 32))
            {
              return 0;
            }
            v13 += 2;
            if (!--v14)
              goto LABEL_29;
          }
        }
      }
      v11 = v11;
      while (1)
      {
        v12 = *v10;
        if (*v10 == WebCore::HTMLNames::aria_labelAttr
          || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
          && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
        {
          return 0;
        }
        v10 += 2;
        if (!--v11)
          goto LABEL_18;
      }
    }
  }
LABEL_40:
  v18 = WebCore::AXObjectCache::getOrCreate(a1, a2, 1);
  v19 = (WebCore::AccessibilityObject *)v18;
  if (!v18)
    goto LABEL_50;
  v20 = *(_QWORD *)(v18 + 8);
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v20))
  {
    goto LABEL_45;
  }
  MEMORY[0x19AEA534C](v20);
LABEL_45:
  ++*(_QWORD *)(v20 + 8);
  v22 = __ldxr((unsigned __int8 *)v20);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_49;
  }
  if (__stlxr(0, (unsigned __int8 *)v20))
LABEL_49:
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
LABEL_50:
  v23 = WebCore::AXObjectCache::getOrCreate(a1, a3, 1);
  if (!v23)
  {
    v4 = 0;
    if (!v19)
      return v4;
    goto LABEL_77;
  }
  v25 = (WebCore::AccessibilityObject *)v23;
  v26 = *(_QWORD *)(v23 + 8);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_55;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_55:
  ++*(_QWORD *)(v26 + 8);
  v28 = __ldxr((unsigned __int8 *)v26);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_59;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_59:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
  v4 = WebCore::AXObjectCache::addRelation(a1, v19, v25, v4, 1);
  v29 = *((_QWORD *)v25 + 1);
  if (__ldaxr((unsigned __int8 *)v29))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v29))
  {
    goto LABEL_64;
  }
  MEMORY[0x19AEA534C](v29);
LABEL_64:
  v31 = *(_QWORD *)(v29 + 8);
  v32 = v31 - 1;
  *(_QWORD *)(v29 + 8) = v31 - 1;
  if (v31 == 1)
  {
    v44 = *(_QWORD *)(v29 + 16);
    v33 = *(_QWORD *)(v29 + 24);
    *(_QWORD *)(v29 + 24) = 0;
    v34 = v44 != 0;
  }
  else
  {
    v33 = 0;
    v34 = 1;
  }
  v35 = __ldxr((unsigned __int8 *)v29);
  if (v35 != 1)
  {
    __clrex();
LABEL_71:
    WTF::Lock::unlockSlow((WTF::Lock *)v29);
    if (v32)
      goto LABEL_76;
    goto LABEL_72;
  }
  if (__stlxr(0, (unsigned __int8 *)v29))
    goto LABEL_71;
  if (v32)
    goto LABEL_76;
LABEL_72:
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  if (!v34)
    WTF::fastFree((WTF *)v29, v24);
LABEL_76:
  if (!v19)
    return v4;
LABEL_77:
  v36 = *((_QWORD *)v19 + 1);
  if (__ldaxr((unsigned __int8 *)v36))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v36))
  {
    goto LABEL_81;
  }
  MEMORY[0x19AEA534C](v36);
LABEL_81:
  v38 = *(_QWORD *)(v36 + 8);
  v39 = v38 - 1;
  *(_QWORD *)(v36 + 8) = v38 - 1;
  if (v38 == 1)
  {
    v45 = *(_QWORD *)(v36 + 16);
    v40 = *(_QWORD *)(v36 + 24);
    *(_QWORD *)(v36 + 24) = 0;
    v41 = v45 != 0;
  }
  else
  {
    v40 = 0;
    v41 = 1;
  }
  v42 = __ldxr((unsigned __int8 *)v36);
  if (v42 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v36))
    {
      if (v39)
        return v4;
      goto LABEL_89;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v36);
  if (v39)
    return v4;
LABEL_89:
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  if (!v41)
    WTF::fastFree((WTF *)v36, v24);
  return v4;
}

uint64_t WebCore::AXObjectCache::addRelation(uint64_t *a1, WebCore::AccessibilityObject *a2, WebCore::AccessibilityObject *a3, int a4, int a5)
{
  WebCore::AccessibilityObject *v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  WebCore::AccessibilityObject *v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  __int128 v48;
  WTF *v49;
  WTF *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int v60;
  WTF *v61;
  __int128 v62;
  WTF *v63;
  WTF *v64;
  int v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t j;
  uint64_t v84;
  WTF *v85;
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  WebCore::AccessibilityObject *v91;
  uint64_t v92;
  uint64_t i;
  uint64_t v94;
  WTF *v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  unsigned int v102;
  WTF *v103;
  uint64_t *v104;
  int v105;
  WTF *v106;
  WTF *v107;
  WTF *v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  unsigned __int8 *v113;
  int v114;
  unsigned __int8 *v115;
  int v116;
  WebCore::AccessibilityObject *v117;
  WebCore::AccessibilityObject *v118;
  uint64_t v119;
  WTF *v120;
  _QWORD *v121;
  WTF *v122;
  uint64_t *v123;
  WTF *v124;
  uint64_t v125;
  WTF *v126;
  __int128 v127;
  WTF *v128;
  uint64_t v129;
  WTF *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  unsigned int v137;
  WTF *v138;
  WTF *v139;
  __n128 v140;
  uint64_t *v141;
  uint64_t v142;
  void **v143;
  void **v144;
  uint64_t v145;
  uint64_t v146;
  WebCore::AccessibilityObject *v147;
  WebCore::AXObjectCache *v148;
  uint64_t v149;
  void **k;
  void **v151;
  uint64_t v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unsigned int v157;
  uint64_t v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  WebCore::AccessibilityObject *v167;
  uint64_t v168;
  uint64_t *v169;
  int v170;
  int v171;
  WebCore::AccessibilityObject *v172;
  uint64_t v173;
  uint64_t v174;
  WTF *v175[3];
  uint64_t *v176[3];
  uint64_t v177;
  WTF *v178;
  WTF *v179;
  uint64_t v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v8 = a2;
  if (a2 == a3 && a4 != 15)
    return 0;
  if (a4 == 18)
  {
    v12 = (uint64_t)a2;
    do
    {
      if ((WebCore::AccessibilityObject *)v12 == a3)
        return 0;
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 1232))(v12);
    }
    while (v12);
LABEL_14:
    v171 = a5;
    if (a4 != 18)
      goto LABEL_19;
    v13 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a3 + 1232))(a3);
    if (!v13)
    {
      v170 = 1;
      goto LABEL_46;
    }
    v15 = (WebCore::AccessibilityObject *)v13;
    v16 = *(_QWORD *)(v13 + 8);
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_22;
    }
    MEMORY[0x19AEA534C](v16);
LABEL_22:
    ++*(_QWORD *)(v16 + 8);
    v18 = __ldxr((unsigned __int8 *)v16);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
LABEL_27:
        if (v15 != v8)
          v14.n128_f64[0] = WebCore::AXObjectCache::childrenChanged((WebCore::AXObjectCache *)a1, v15);
        v19 = *((_QWORD *)v15 + 1);
        if (__ldaxr((unsigned __int8 *)v19))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v19))
        {
          goto LABEL_33;
        }
        MEMORY[0x19AEA534C](v19, v14);
LABEL_33:
        v21 = a1;
        v22 = *(_QWORD *)(v19 + 8);
        v23 = v22 - 1;
        *(_QWORD *)(v19 + 8) = v22 - 1;
        if (v22 == 1)
        {
          v166 = *(_QWORD *)(v19 + 16);
          v24 = *(_QWORD *)(v19 + 24);
          *(_QWORD *)(v19 + 24) = 0;
          v25 = v166 != 0;
        }
        else
        {
          v24 = 0;
          v25 = 1;
        }
        v26 = __ldxr((unsigned __int8 *)v19);
        if (v26 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v19))
            goto LABEL_40;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v19);
LABEL_40:
        if (!v23)
        {
          if (v24)
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v24 + 8))(v24, v14);
          if (!v25)
            WTF::fastFree((WTF *)v19, a2);
        }
        v170 = 1;
        a1 = v21;
        goto LABEL_46;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    goto LABEL_27;
  }
  if (a4 == 17)
  {
    v11 = (uint64_t)a3;
    while ((WebCore::AccessibilityObject *)v11 != v8)
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1232))(v11);
      if (!v11)
        goto LABEL_14;
    }
    return 0;
  }
  v171 = a5;
LABEL_19:
  v170 = 0;
LABEL_46:
  v27 = *((_QWORD *)v8 + 2);
  v172 = a3;
  v28 = *((_QWORD *)a3 + 2);
  v174 = v28;
  v29 = a1 + 95;
  v30 = a1[95];
  if (!v30)
    goto LABEL_54;
  v31 = *(_DWORD *)(v30 - 8);
  v32 = (v27 + ~(v27 << 32)) ^ ((unint64_t)(v27 + ~(v27 << 32)) >> 22);
  v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
  v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
  v35 = v31 & ((v34 >> 31) ^ v34);
  v36 = *(_QWORD *)(v30 + 16 * v35);
  if (v36 != v27)
  {
    v37 = 1;
    while (v36)
    {
      v35 = ((_DWORD)v35 + v37) & v31;
      v36 = *(_QWORD *)(v30 + 16 * v35);
      ++v37;
      if (v36 == v27)
        goto LABEL_53;
    }
    v35 = *(unsigned int *)(v30 - 4);
  }
LABEL_53:
  if (v35 == *(_DWORD *)(v30 - 4))
  {
LABEL_54:
    v169 = a1;
    v177 = v28;
    v178 = 0;
    v179 = 0;
    v180 = 0;
    WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v176, (uint64_t *)&v178, &v177);
    v38 = v179;
    v168 = (uint64_t)v178;
    v179 = 0;
    v180 = 0;
    v178 = 0;
    v39 = WTF::fastMalloc((WTF *)0x110);
    *(_BYTE *)(v39 + 16) = -1;
    v41 = v39 + 16;
    *(_QWORD *)(v39 + 32) = 0;
    *(_QWORD *)(v39 + 40) = 0;
    *(_QWORD *)(v39 + 24) = 0;
    *(_BYTE *)(v39 + 48) = -1;
    *(_QWORD *)(v39 + 64) = 0;
    *(_QWORD *)(v39 + 72) = 0;
    *(_QWORD *)(v39 + 56) = 0;
    *(_BYTE *)(v39 + 80) = -1;
    *(_QWORD *)(v39 + 96) = 0;
    *(_QWORD *)(v39 + 104) = 0;
    *(_QWORD *)(v39 + 88) = 0;
    *(_BYTE *)(v39 + 112) = -1;
    *(_QWORD *)(v39 + 128) = 0;
    *(_QWORD *)(v39 + 136) = 0;
    *(_QWORD *)(v39 + 120) = 0;
    *(_BYTE *)(v39 + 144) = -1;
    *(_QWORD *)(v39 + 160) = 0;
    *(_QWORD *)(v39 + 168) = 0;
    *(_QWORD *)(v39 + 152) = 0;
    *(_BYTE *)(v39 + 176) = -1;
    *(_QWORD *)(v39 + 192) = 0;
    *(_QWORD *)(v39 + 200) = 0;
    *(_QWORD *)(v39 + 184) = 0;
    *(_BYTE *)(v39 + 208) = -1;
    *(_QWORD *)(v39 + 224) = 0;
    *(_QWORD *)(v39 + 232) = 0;
    *(_QWORD *)(v39 + 216) = 0;
    *(_BYTE *)(v39 + 240) = -1;
    *(_QWORD *)(v39 + 256) = 0;
    *(_QWORD *)(v39 + 264) = 0;
    *(_QWORD *)(v39 + 248) = 0;
    v173 = v39 + 16;
    *(_OWORD *)v39 = xmmword_1968A5190;
    v42 = 9 * ((~(a4 << 15) + a4) ^ ((~(a4 << 15) + a4) >> 10));
    v43 = (((v42 ^ (v42 >> 6)) + ~((v42 ^ (v42 >> 6)) << 11)) ^ (((v42 ^ (v42 >> 6)) + ~((v42 ^ (v42 >> 6)) << 11)) >> 16)) & 7;
    v44 = (unsigned __int8 *)(v39 + 16 + 32 * v43);
    v45 = *v44;
    if (v45 != 255)
    {
      v46 = 0;
      v47 = 1;
      while (a4 != v45)
      {
        if (v45 == 254)
          v46 = v44;
        v43 = ((_BYTE)v43 + (_BYTE)v47) & 7;
        v44 = (unsigned __int8 *)(v41 + 32 * v43);
        v45 = *v44;
        ++v47;
        if (v45 == 255)
        {
          if (v46)
          {
            *v46 = -1;
            *((_QWORD *)v46 + 2) = 0;
            *((_QWORD *)v46 + 3) = 0;
            *((_QWORD *)v46 + 1) = 0;
            --*(_DWORD *)v39;
            v44 = v46;
          }
          goto LABEL_62;
        }
      }
LABEL_84:
      v70 = *v29;
      if (*v29
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v29, 8u, 0), (v70 = *v29) != 0))
      {
        v71 = *(_DWORD *)(v70 - 8);
      }
      else
      {
        v71 = 0;
      }
      v72 = (v27 + ~(v27 << 32)) ^ ((unint64_t)(v27 + ~(v27 << 32)) >> 22);
      v73 = 9 * ((v72 + ~(v72 << 13)) ^ ((v72 + ~(v72 << 13)) >> 8));
      v74 = (v73 ^ (v73 >> 15)) + ~((v73 ^ (v73 >> 15)) << 27);
      v75 = v71 & ((v74 >> 31) ^ v74);
      v76 = (uint64_t *)(v70 + 16 * v75);
      v77 = *v76;
      if (*v76)
      {
        v78 = 0;
        v79 = 1;
        while (v77 != v27)
        {
          if (v77 == -1)
            v78 = v76;
          v75 = (v75 + v79) & v71;
          v76 = (uint64_t *)(v70 + 16 * v75);
          v77 = *v76;
          ++v79;
          if (!*v76)
          {
            if (v78)
            {
              *v78 = 0;
              v78[1] = 0;
              --*(_DWORD *)(*v29 - 16);
              v76 = v78;
            }
            goto LABEL_95;
          }
        }
        v90 = v173;
        if (v173)
        {
          v91 = v8;
          v92 = *(unsigned int *)(v173 - 4);
          if ((_DWORD)v92)
          {
            for (i = 0; i != v92; ++i)
            {
              if (*(unsigned __int8 *)(v90 + 32 * i) != 254)
              {
                v94 = v90 + 32 * i;
                v95 = *(WTF **)(v94 + 16);
                if (v95)
                {
                  do
                  {
                    v96 = (WTF *)*((_QWORD *)v95 + 2);
                    WTF::fastFree(v95, v40);
                    v95 = v96;
                  }
                  while (v96);
                }
                v97 = *(_QWORD *)(v94 + 8);
                if (v97)
                  WTF::fastFree((WTF *)(v97 - 16), v40);
              }
            }
          }
          WTF::fastFree((WTF *)(v90 - 16), v40);
          v8 = v91;
        }
LABEL_128:
        if (v38)
        {
          do
          {
            v103 = (WTF *)*((_QWORD *)v38 + 2);
            WTF::fastFree(v38, v40);
            v38 = v103;
          }
          while (v103);
        }
        v104 = v169;
        v105 = v170;
        if (v168)
          WTF::fastFree((WTF *)(v168 - 16), v40);
        v106 = v179;
        if (v179)
        {
          do
          {
            v107 = (WTF *)*((_QWORD *)v106 + 2);
            WTF::fastFree(v106, v40);
            v106 = v107;
          }
          while (v107);
        }
        v108 = v178;
        if (!v178)
          goto LABEL_182;
LABEL_181:
        WTF::fastFree((WTF *)((char *)v108 - 16), v40);
        goto LABEL_182;
      }
LABEL_95:
      *v76 = v27;
      v80 = v173;
      v173 = 0;
      v81 = v76[1];
      v76[1] = v80;
      if (v81)
      {
        v167 = v8;
        v82 = *(unsigned int *)(v81 - 4);
        if ((_DWORD)v82)
        {
          for (j = 0; j != v82; ++j)
          {
            if (*(unsigned __int8 *)(v81 + 32 * j) != 254)
            {
              v84 = v81 + 32 * j;
              v85 = *(WTF **)(v84 + 16);
              if (v85)
              {
                do
                {
                  v86 = (WTF *)*((_QWORD *)v85 + 2);
                  WTF::fastFree(v85, v40);
                  v85 = v86;
                }
                while (v86);
              }
              v87 = *(_QWORD *)(v84 + 8);
              if (v87)
                WTF::fastFree((WTF *)(v87 - 16), v40);
            }
          }
        }
        WTF::fastFree((WTF *)(v81 - 16), v40);
        v8 = v167;
      }
      v88 = *v29;
      if (*v29)
        v89 = *(_DWORD *)(v88 - 12) + 1;
      else
        v89 = 1;
      *(_DWORD *)(v88 - 12) = v89;
      v98 = *v29;
      if (*v29)
        v99 = *(_DWORD *)(v98 - 12);
      else
        v99 = 0;
      v100 = (*(_DWORD *)(v98 - 16) + v99);
      v101 = *(unsigned int *)(v98 - 4);
      if (v101 > 0x400)
      {
        if (v101 > 2 * v100)
          goto LABEL_128;
      }
      else
      {
        if (3 * v101 > 4 * v100)
          goto LABEL_128;
        if (!(_DWORD)v101)
        {
          v102 = 8;
          goto LABEL_127;
        }
      }
      v102 = (_DWORD)v101 << (6 * *(_DWORD *)(v98 - 12) >= (2 * v101));
LABEL_127:
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v29, v102, v76);
      goto LABEL_128;
    }
LABEL_62:
    *v44 = a4;
    v48 = 0uLL;
    memset(v175, 0, sizeof(v175));
    if (v38)
    {
      v49 = v38;
      do
      {
        WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v176, (uint64_t *)v175, v49);
        v49 = (WTF *)*((_QWORD *)v49 + 2);
      }
      while (v49);
      v48 = *(_OWORD *)v175;
      v50 = v175[2];
    }
    else
    {
      v50 = 0;
    }
    v61 = (WTF *)*((_QWORD *)v44 + 1);
    v175[0] = v61;
    v62 = *((_OWORD *)v44 + 1);
    *(_OWORD *)(v44 + 8) = v48;
    *((_QWORD *)v44 + 3) = v50;
    *(_OWORD *)&v175[1] = v62;
    v63 = (WTF *)v62;
    if ((_QWORD)v62)
    {
      do
      {
        v64 = (WTF *)*((_QWORD *)v63 + 2);
        WTF::fastFree(v63, v40);
        v63 = v64;
      }
      while (v64);
      v61 = v175[0];
    }
    if (v61)
    {
      WTF::fastFree((WTF *)((char *)v61 - 16), v40);
      v41 = v173;
    }
    v65 = *(_DWORD *)(v41 - 16);
    v66 = *(_DWORD *)(v41 - 12) + 1;
    *(_DWORD *)(v41 - 12) = v66;
    v67 = (v65 + v66);
    v68 = *(unsigned int *)(v41 - 4);
    if (v68 > 0x400)
    {
      if (v68 > 2 * v67)
        goto LABEL_84;
    }
    else
    {
      if (3 * v68 > 4 * v67)
        goto LABEL_84;
      if (!(_DWORD)v68)
      {
        v69 = 8;
        goto LABEL_83;
      }
    }
    v69 = (_DWORD)v68 << (6 * v66 >= (2 * v68));
LABEL_83:
    WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::rehash(&v173, v69, v44);
    goto LABEL_84;
  }
  v51 = a1;
  v52 = v30 + 16 * v35;
  v55 = *(_QWORD *)(v52 + 8);
  v54 = (uint64_t *)(v52 + 8);
  v53 = v55;
  if (v55)
  {
    v56 = *(_DWORD *)(v53 - 8);
    v57 = 9 * ((~(a4 << 15) + a4) ^ ((~(a4 << 15) + a4) >> 10));
    v58 = v56 & (((v57 ^ (v57 >> 6)) + ~((v57 ^ (v57 >> 6)) << 11)) ^ (((v57 ^ (v57 >> 6)) + ~((v57 ^ (v57 >> 6)) << 11)) >> 16));
    v59 = *(unsigned __int8 *)(v53 + 32 * v58);
    if (v59 != a4)
    {
      v60 = 1;
      while ((_BYTE)v59 != 0xFF)
      {
        v58 = ((_DWORD)v58 + v60) & v56;
        v59 = *(unsigned __int8 *)(v53 + 32 * v58);
        ++v60;
        if (v59 == a4)
          goto LABEL_141;
      }
      v58 = *(unsigned int *)(v53 - 4);
    }
LABEL_141:
    if (v58 != *(_DWORD *)(v53 - 4))
    {
      if ((a4 & 0xFFFFFFEF) == 1)
      {
        v118 = v8;
        v119 = v53 + 32 * v58;
        v122 = *(WTF **)(v119 + 16);
        v121 = (_QWORD *)(v119 + 16);
        v120 = v122;
        v123 = v121 - 1;
        if (v122)
        {
          do
          {
            v124 = (WTF *)*((_QWORD *)v120 + 2);
            WTF::fastFree(v120, a2);
            v120 = v124;
          }
          while (v124);
        }
        v125 = *v123;
        if (*v123)
        {
          *v123 = 0;
          WTF::fastFree((WTF *)(v125 - 16), a2);
        }
        *v121 = 0;
        v121[1] = 0;
        v8 = v118;
      }
      WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v176, (uint64_t *)(v53 + 32 * v58 + 8), &v174);
      v104 = v51;
      v105 = v170;
      goto LABEL_182;
    }
  }
  v178 = (WTF *)v28;
  memset(v175, 0, sizeof(v175));
  WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v176, (uint64_t *)v175, &v178);
  v109 = *v54;
  if (*v54
    || (WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::rehash(v54, 8u, 0), (v109 = *v54) != 0))
  {
    v110 = *(_DWORD *)(v109 - 8);
  }
  else
  {
    v110 = 0;
  }
  v105 = v170;
  v111 = 9 * ((~(a4 << 15) + a4) ^ ((~(a4 << 15) + a4) >> 10));
  v112 = v110 & (((v111 ^ (v111 >> 6)) + ~((v111 ^ (v111 >> 6)) << 11)) ^ (((v111 ^ (v111 >> 6))
                                                                          + ~((v111 ^ (v111 >> 6)) << 11)) >> 16));
  v113 = (unsigned __int8 *)(v109 + 32 * v112);
  v114 = *v113;
  if (v114 == 255)
  {
    v117 = v8;
LABEL_161:
    *v113 = a4;
    v126 = v175[2];
    v127 = *(_OWORD *)v175;
    memset(v175, 0, sizeof(v175));
    v129 = *((_QWORD *)v113 + 1);
    v128 = (WTF *)*((_QWORD *)v113 + 2);
    *(_OWORD *)(v113 + 8) = v127;
    *((_QWORD *)v113 + 3) = v126;
    if (v128)
    {
      do
      {
        v130 = (WTF *)*((_QWORD *)v128 + 2);
        WTF::fastFree(v128, v40);
        v128 = v130;
      }
      while (v130);
    }
    if (v129)
      WTF::fastFree((WTF *)(v129 - 16), v40);
    v131 = *v54;
    if (*v54)
      v132 = *(_DWORD *)(v131 - 12) + 1;
    else
      v132 = 1;
    v8 = v117;
    *(_DWORD *)(v131 - 12) = v132;
    v133 = *v54;
    if (*v54)
      v134 = *(_DWORD *)(v133 - 12);
    else
      v134 = 0;
    v135 = (*(_DWORD *)(v133 - 16) + v134);
    v136 = *(unsigned int *)(v133 - 4);
    if (v136 > 0x400)
    {
      if (v136 > 2 * v135)
        goto LABEL_178;
    }
    else
    {
      if (3 * v136 > 4 * v135)
        goto LABEL_178;
      if (!(_DWORD)v136)
      {
        v137 = 8;
        goto LABEL_177;
      }
    }
    v137 = (_DWORD)v136 << (6 * *(_DWORD *)(v133 - 12) >= (2 * v136));
LABEL_177:
    WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::rehash(v54, v137, v113);
    goto LABEL_178;
  }
  v115 = 0;
  v116 = 1;
  while (a4 != v114)
  {
    if (v114 == 254)
      v115 = v113;
    v112 = ((_DWORD)v112 + v116) & v110;
    v113 = (unsigned __int8 *)(v109 + 32 * v112);
    v114 = *v113;
    ++v116;
    if (v114 == 255)
    {
      v117 = v8;
      if (v115)
      {
        *v115 = -1;
        *((_QWORD *)v115 + 2) = 0;
        *((_QWORD *)v115 + 3) = 0;
        *((_QWORD *)v115 + 1) = 0;
        --*(_DWORD *)(*v54 - 16);
        v113 = v115;
      }
      goto LABEL_161;
    }
  }
LABEL_178:
  v138 = v175[1];
  if (v175[1])
  {
    do
    {
      v139 = (WTF *)*((_QWORD *)v138 + 2);
      WTF::fastFree(v138, v40);
      v138 = v139;
    }
    while (v139);
  }
  v108 = v175[0];
  v104 = v51;
  if (v175[0])
    goto LABEL_181;
LABEL_182:
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add((uint64_t *)v176, v104 + 97, &v174);
  if (v105)
  {
    v141 = (uint64_t *)*v29;
    if (*v29)
    {
      v142 = *((unsigned int *)v141 - 1);
      v143 = (void **)&v141[2 * v142];
      if (*((_DWORD *)v141 - 3))
      {
        v144 = (void **)*v29;
        if ((_DWORD)v142)
        {
          v145 = 16 * v142;
          v144 = (void **)*v29;
          while ((unint64_t)*v144 + 1 <= 1)
          {
            v144 += 2;
            v145 -= 16;
            if (!v145)
            {
              v144 = v143;
              goto LABEL_196;
            }
          }
        }
        goto LABEL_196;
      }
      v144 = (void **)&v141[2 * v142];
    }
    else
    {
      v144 = 0;
      v142 = 0;
    }
    v143 = (void **)&v141[2 * v142];
LABEL_196:
    v149 = v174;
    if (!v141)
      goto LABEL_198;
LABEL_197:
    for (k = (void **)&v141[2 * *((unsigned int *)v141 - 1)]; v144 != k; k = 0)
    {
      if (*v144 != (void *)v27)
        WebCore::AXObjectCache::removeRelationByID(v141, *v144, v149, 18);
      v151 = v144 + 2;
      v144 = v143;
      if (v151 != v143)
      {
        v144 = v151;
        while ((unint64_t)*v144 + 1 <= 1)
        {
          v144 += 2;
          if (v144 == v143)
          {
            v144 = v143;
            break;
          }
        }
      }
      v141 = (uint64_t *)*v29;
      if (*v29)
        goto LABEL_197;
LABEL_198:
      ;
    }
    v148 = (WebCore::AXObjectCache *)v104;
    v147 = v8;
    goto LABEL_210;
  }
  if (a4 == 17)
  {
    v146 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v8 + 1240))(v8);
    if (v146)
    {
      v147 = (WebCore::AccessibilityObject *)v146;
      v148 = (WebCore::AXObjectCache *)v104;
LABEL_210:
      v140.n128_f64[0] = WebCore::AXObjectCache::childrenChanged(v148, v147);
    }
  }
  if (!v171)
    return 1;
  v152 = v104[7];
  if (!v152)
    return 1;
  v153 = *(_DWORD *)(v152 - 8);
  v154 = (v27 + ~(v27 << 32)) ^ ((unint64_t)(v27 + ~(v27 << 32)) >> 22);
  v155 = 9 * ((v154 + ~(v154 << 13)) ^ ((v154 + ~(v154 << 13)) >> 8));
  v156 = (v155 ^ (v155 >> 15)) + ~((v155 ^ (v155 >> 15)) << 27);
  v157 = v153 & ((v156 >> 31) ^ v156);
  v158 = *(_QWORD *)(v152 + 16 * v157);
  if (v158 != v27)
  {
    v159 = 1;
    while (v158)
    {
      v157 = (v157 + v159) & v153;
      v158 = *(_QWORD *)(v152 + 16 * v157);
      ++v159;
      if (v158 == v27)
        goto LABEL_217;
    }
    return 1;
  }
LABEL_217:
  v160 = (v174 + ~(v174 << 32)) ^ ((unint64_t)(v174 + ~(v174 << 32)) >> 22);
  v161 = 9 * ((v160 + ~(v160 << 13)) ^ ((v160 + ~(v160 << 13)) >> 8));
  v162 = (v161 ^ (v161 >> 15)) + ~((v161 ^ (v161 >> 15)) << 27);
  v163 = v153 & ((v162 >> 31) ^ v162);
  v164 = *(_QWORD *)(v152 + 16 * v163);
  if (v164 != v174)
  {
    v165 = 1;
    while (v164)
    {
      v163 = (v163 + v165) & v153;
      v164 = *(_QWORD *)(v152 + 16 * v163);
      ++v165;
      if (v164 == v174)
        goto LABEL_221;
    }
    return 1;
  }
LABEL_221:
  if ((a4 - 1) < 0x12)
  {
    WebCore::AXObjectCache::addRelation(v104, v172, v8, byte_1968DF718[(char)(a4 - 1)], 0, v140);
    return 1;
  }
  result = 4803;
  __break(0xC471u);
  return result;
}

uint64_t **WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(uint64_t **result, uint64_t *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t v6;
  int v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t ***v26;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *,WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = *a3 + ~(*a3 << 32);
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v7;
    v15 = (uint64_t **)(v6 + 8 * (v12 & v7));
    v16 = *v15;
    if (*v15 == (uint64_t *)-1)
    {
      v8 = (uint64_t **)(v6 + 8 * v14);
      goto LABEL_10;
    }
    if (!v16)
      break;
    if (*v16 == *a3)
    {
      v19 = 0;
      goto LABEL_31;
    }
LABEL_10:
    v12 = i + v14;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*a2 - 16);
    v15 = v8;
  }
  result = (uint64_t **)WTF::fastMalloc((WTF *)0x18);
  *result = (uint64_t *)*a3;
  result[1] = 0;
  result[2] = 0;
  *v15 = (uint64_t *)result;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
      goto LABEL_25;
  }
  else if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v24 = 8;
      goto LABEL_26;
    }
LABEL_25:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
LABEL_26:
    v15 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *,WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *>>::rehash(a2, v24, v15);
    result = (uint64_t **)*v15;
  }
  v25 = a2[2];
  result[1] = (uint64_t *)v25;
  result[2] = 0;
  if (v25)
    v26 = (uint64_t ***)(v25 + 16);
  else
    v26 = (uint64_t ***)(a2 + 1);
  *v26 = result;
  a2[2] = (uint64_t)result;
  v16 = *v15;
  v19 = 1;
LABEL_31:
  *v5 = a2;
  v5[1] = v16;
  *((_BYTE *)v5 + 16) = v19;
  return result;
}

uint64_t *WebCore::AXObjectCache::removeRelationByID(uint64_t *result, void *a2, uint64_t a3, int a4)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int i;
  WTF *v28;
  int v29;
  int j;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  if (result)
  {
    v4 = *((_DWORD *)result - 2);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = (void *)result[2 * v8];
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = (void *)result[2 * v8];
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = *((unsigned int *)result - 1);
    }
LABEL_8:
    if (v8 != *((_DWORD *)result - 1))
    {
      v11 = result[2 * v8 + 1];
      if (v11)
      {
        v12 = *(_DWORD *)(v11 - 8);
        v13 = 9 * ((~(a4 << 15) + a4) ^ ((~(a4 << 15) + a4) >> 10));
        v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
        v15 = v12 & (v14 ^ HIWORD(v14));
        v16 = *(unsigned __int8 *)(v11 + 32 * v15);
        if (v16 != a4)
        {
          v17 = 1;
          while (v16 != 255)
          {
            v15 = ((_DWORD)v15 + v17) & v12;
            v16 = *(unsigned __int8 *)(v11 + 32 * v15);
            ++v17;
            if (v16 == a4)
              goto LABEL_16;
          }
          v15 = *(unsigned int *)(v11 - 4);
        }
LABEL_16:
        if (v15 != *(_DWORD *)(v11 - 4))
        {
          v18 = v11 + 32 * v15;
          v20 = *(_QWORD *)(v18 + 8);
          result = (uint64_t *)(v18 + 8);
          v19 = v20;
          if (v20)
          {
            v21 = *(_DWORD *)(v19 - 8);
            v22 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
            v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
            v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
            v25 = v21 & ((v24 >> 31) ^ v24);
            v26 = 1;
            for (i = v25; ; i = (i + v26++) & v21)
            {
              v28 = *(WTF **)(v19 + 8 * i);
              if (v28 != (WTF *)-1)
              {
                if (!v28)
                  return result;
                if (*(_QWORD *)v28 == a3)
                  break;
              }
            }
            v29 = *(_DWORD *)(v19 - 4);
            if (i != v29)
            {
              for (j = 1; ; ++j)
              {
                v31 = v25;
                v32 = *(_QWORD **)(v19 + 8 * v25);
                if (v32 != (_QWORD *)-1)
                {
                  if (!v32)
                    goto LABEL_41;
                  if (*v32 == a3)
                    break;
                }
                v25 = (v31 + j) & v21;
              }
              if (v29 != (_DWORD)v31)
              {
                *(_QWORD *)(v19 + 8 * v31) = -1;
                ++*(_DWORD *)(*result - 16);
                v33 = *result;
                v34 = *result ? *(_DWORD *)(v33 - 12) - 1 : -1;
                *(_DWORD *)(v33 - 12) = v34;
                v35 = *result;
                if (*result)
                {
                  v36 = 6 * *(_DWORD *)(v35 - 12);
                  v37 = *(_DWORD *)(v35 - 4);
                  if (v36 < v37 && v37 >= 9)
                    WTF::HashTable<WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *,WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *>>::rehash(result, v37 >> 1, 0);
                }
              }
LABEL_41:
              v39 = *((_QWORD *)v28 + 1);
              v40 = *((_QWORD *)v28 + 2);
              if (v39)
              {
                *(_QWORD *)(v39 + 16) = v40;
                v40 = *((_QWORD *)v28 + 2);
              }
              else
              {
                *(_QWORD *)(v11 + 32 * v15 + 16) = v40;
              }
              if (v40)
                v41 = (_QWORD *)(v40 + 8);
              else
                v41 = (_QWORD *)(v11 + 32 * v15 + 24);
              *v41 = v39;
              return (uint64_t *)WTF::fastFree(v28, a2);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *WebCore::AXObjectCache::updateRelationsForTree(uint64_t *this, WebCore::ContainerNode *a2)
{
  WebCore::ContainerNode *v2;
  WebCore::AXObjectCache *v4;
  uint64_t v5;
  WebCore::AXObjectCache *updated;
  WebCore::ContainerNode *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::String *v11;
  __n128 v12;
  WebCore::QualifiedName::QualifiedNameImpl **v13;
  uint64_t v14;
  WebCore::ContainerNode *v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  int v20;

  v2 = (WebCore::ContainerNode *)*((_QWORD *)a2 + 10);
  if (v2)
  {
    v4 = (WebCore::AXObjectCache *)this;
    while ((*((_WORD *)v2 + 14) & 8) == 0)
    {
      v2 = (WebCore::ContainerNode *)*((_QWORD *)v2 + 7);
      if (!v2)
        return this;
    }
    do
    {
LABEL_6:
      if ((*((_WORD *)v2 + 14) & 0x10) == 0
        || (v5 = *(_QWORD *)(*((_QWORD *)v2 + 12) + 24), v5 != *(_QWORD *)(WebCore::HTMLNames::metaTag + 24))
        && v5 != *(_QWORD *)(WebCore::HTMLNames::headTag + 24)
        && v5 != *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24)
        && v5 != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24)
        && v5 != *(_QWORD *)(WebCore::HTMLNames::styleTag + 24))
      {
        if ((*((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v18 = *(_QWORD *)((*((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
          if (v18)
          {
            v19 = *(_DWORD *)(v18 + 24) + 2;
            *(_DWORD *)(v18 + 24) = v19;
            if (*(_BYTE *)(v18 + 193))
            {
              WebCore::AXObjectCache::updateRelationsForTree(v4, (WebCore::ContainerNode *)v18);
              v19 = *(_DWORD *)(v18 + 24);
            }
            v20 = v19 - 2;
            if (v20)
            {
              *(_DWORD *)(v18 + 24) = v20;
            }
            else if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v18);
            }
          }
        }
        updated = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::ContainerNode *))(*(_QWORD *)v2 + 192))(v2);
        if ((_DWORD)updated)
          v7 = v2;
        else
          v7 = 0;
        if (v7)
          *((_DWORD *)v7 + 6) += 2;
        if ((_DWORD)updated)
        {
          v8 = *((_QWORD *)v2 + 14);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              if (!*(_BYTE *)(v9 + 144))
              {
                v10 = *(_QWORD *)(v9 + 296);
                if (v10)
                {
                  *(_DWORD *)(v10 + 24) += 2;
                  updated = (WebCore::AXObjectCache *)WebCore::AXObjectCache::updateRelationsForTree(v4, (WebCore::ContainerNode *)v10);
                  if (*(_DWORD *)(v10 + 24) == 2)
                  {
                    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                      updated = (WebCore::AXObjectCache *)WebCore::Node::removedLastRef((WebCore::Node *)v10);
                  }
                  else
                  {
                    *(_DWORD *)(v10 + 24) -= 2;
                  }
                }
              }
            }
          }
        }
        if (v7)
        {
          if (*((_DWORD *)v7 + 6) == 2)
          {
            if ((*((_WORD *)v7 + 15) & 0x400) == 0)
              updated = (WebCore::AXObjectCache *)WebCore::Node::removedLastRef(v7);
          }
          else
          {
            *((_DWORD *)v7 + 6) -= 2;
          }
        }
        WebCore::AXObjectCache::relationAttributes(updated);
        if (_MergedGlobals_151)
        {
          v13 = (WebCore::QualifiedName::QualifiedNameImpl **)qword_1ECE82158;
          v14 = 88;
          do
          {
            WebCore::AXObjectCache::addRelation(v4, (const WebCore::TreeScope **)v2, v13++, v11, v12);
            v14 -= 8;
          }
          while (v14);
        }
        this = WebCore::AXObjectCache::addLabelForRelation((uint64_t *)v4, v2);
      }
      v15 = (WebCore::ContainerNode *)*((_QWORD *)v2 + 10);
      if (!v15)
      {
        if (v2 == a2)
          return this;
        while (1)
        {
          v15 = (WebCore::ContainerNode *)*((_QWORD *)v2 + 7);
          if (v15)
            break;
          v2 = (WebCore::ContainerNode *)*((_QWORD *)v2 + 4);
          if (v2)
            v17 = v2 == a2;
          else
            v17 = 1;
          if (v17)
            return this;
        }
      }
      v2 = v15;
    }
    while ((*((_WORD *)v15 + 14) & 8) != 0);
    while (v15 != a2)
    {
      while (1)
      {
        v2 = (WebCore::ContainerNode *)*((_QWORD *)v15 + 7);
        if (v2)
          break;
        v15 = (WebCore::ContainerNode *)*((_QWORD *)v15 + 4);
        if (v15)
          v16 = v15 == a2;
        else
          v16 = 1;
        if (v16)
          return this;
      }
      v15 = (WebCore::ContainerNode *)*((_QWORD *)v15 + 7);
      if ((*((_WORD *)v2 + 14) & 8) != 0)
        goto LABEL_6;
    }
  }
  return this;
}

uint64_t *WebCore::AXObjectCache::relatedObjectIDsFor@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  _QWORD *i;
  uint64_t *v30;

  v7 = this;
  if (a4 && *((_BYTE *)this + 768))
  {
    *((_BYTE *)this + 768) = 0;
    v9 = this[95];
    if (v9)
    {
      v7[95] = 0;
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v9, a2);
    }
    v10 = v7[98];
    if (v10)
    {
      v7[98] = 0;
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v10, a2);
    }
    v11 = v7[97];
    if (v11)
    {
      v7[97] = 0;
      WTF::fastFree((WTF *)(v11 - 16), a2);
    }
    this = WebCore::AXObjectCache::updateRelationsForTree(v7, *(WebCore::ContainerNode **)(*(_QWORD *)(v7[3] + 8) + 96));
  }
  v12 = v7[95];
  if (!v12)
    goto LABEL_26;
  v13 = a2[2];
  v14 = *(_DWORD *)(v12 - 8);
  v15 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = *(_QWORD *)(v12 + 16 * v18);
  if (v19 != v13)
  {
    v20 = 1;
    while (v19)
    {
      v18 = ((_DWORD)v18 + v20) & v14;
      v19 = *(_QWORD *)(v12 + 16 * v18);
      ++v20;
      if (v19 == v13)
        goto LABEL_17;
    }
    v18 = *(unsigned int *)(v12 - 4);
  }
  if (v18 == *(_DWORD *)(v12 - 4))
    goto LABEL_26;
  v21 = *(_QWORD *)(v12 + 16 * v18 + 8);
  if (!v21)
    goto LABEL_26;
LABEL_17:
  v22 = *(_DWORD *)(v21 - 8);
  v23 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v24 = (v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11);
  v25 = v22 & (v24 ^ HIWORD(v24));
  v26 = *(unsigned __int8 *)(v21 + 32 * v25);
  if (v26 != a3)
  {
    v27 = 1;
    while (v26 != 255)
    {
      v25 = ((_DWORD)v25 + v27) & v22;
      v26 = *(unsigned __int8 *)(v21 + 32 * v25);
      ++v27;
      if (v26 == a3)
        goto LABEL_25;
    }
    v25 = *(unsigned int *)(v21 - 4);
  }
LABEL_25:
  if (v25 != *(_DWORD *)(v21 - 4))
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    for (i = *(_QWORD **)(v21 + 32 * v25 + 16); i; i = (_QWORD *)i[2])
      this = (uint64_t *)WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(&v30, (uint64_t *)a5, i);
    v28 = 1;
  }
  else
  {
LABEL_26:
    v28 = 0;
    *(_BYTE *)a5 = 0;
  }
  *(_BYTE *)(a5 + 24) = v28;
  return this;
}

uint64_t WebCore::AXRemoteFrame::elementRect(WebCore::AXRemoteFrame *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 30);
  if (!v1)
    return 0;
  result = *(_QWORD *)(v1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1512))(result);
  return result;
}

uint64_t WebCore::AccessibilityMockObject::parentObject(WebCore::AccessibilityMockObject *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 30);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::AXSearchManager::matchForSearchKeyAtIndex(uint64_t *a1, WebCore::AXCoreObject **a2, uint64_t a3, unint64_t a4)
{
  uint64_t IsEnabled;
  int v8;
  int v9;
  uint64_t (*v10)(void);
  int v11;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int (*v19)(void);
  unsigned int (*v20)(void);
  uint64_t (*v21)(void);
  int v23;
  int v24;
  unsigned int (*v25)(void);
  WebCore::AXCoreObject *v26;
  uint64_t v27;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  const WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  int v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  int v65;
  int v66;
  WTF::StringImpl *v67;

  if (*(unsigned int *)(a3 + 52) <= a4)
  {
    __break(0xC471u);
    JUMPOUT(0x1955E95ACLL);
  }
  IsEnabled = 1;
  switch(*(_DWORD *)(*(_QWORD *)(a3 + 40) + 4 * a4))
  {
    case 1:
      return IsEnabled;
    case 2:
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2) == 29;
    case 3:
      if (!*(_QWORD *)(a3 + 8)
        || (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2) != 9)
      {
        return 0;
      }
      v8 = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 864))(*a2);
      v21 = *(uint64_t (**)(void))(**(_QWORD **)(a3 + 8) + 864);
      goto LABEL_74;
    case 4:
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2) == 9;
    case 5:
      v10 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 672);
      return v10();
    case 6:
      v23 = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2);
      if (v23 == 10 || v23 == 84 || v23 == 132)
        return IsEnabled;
      return 0;
    case 7:
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2) == 14;
    case 8:
      if (((*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 144))(*a2) & 1) != 0)
        return IsEnabled;
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2) == 111;
    case 9:
      if (!*(_QWORD *)(a3 + 8))
        return 0;
      v24 = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2);
      return v24 != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a3 + 8) + 1456))(*(_QWORD *)(a3 + 8));
    case 0xA:
      if (!*(_QWORD *)(a3 + 8))
        return 0;
      v19 = *(unsigned int (**)(void))(*(_QWORD *)*a2 + 720);
      return v19() ^ 1;
    case 0xB:
      if (!*(_QWORD *)(a3 + 8))
        return 0;
      v19 = *(unsigned int (**)(void))(*(_QWORD *)*a2 + 728);
      return v19() ^ 1;
    case 0xC:
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2) == 138;
    case 0xD:
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2) == 49;
    case 0xE:
      v25 = *(unsigned int (**)(void))(*(_QWORD *)*a2 + 872);
      return v25() == 1;
    case 0xF:
      v20 = *(unsigned int (**)(void))(*(_QWORD *)*a2 + 872);
      return v20() == 2;
    case 0x10:
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 872))(*a2) == 3;
    case 0x11:
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 872))(*a2) == 4;
    case 0x12:
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 872))(*a2) == 5;
    case 0x13:
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 872))(*a2) == 6;
    case 0x14:
      if (!*(_QWORD *)(a3 + 8)
        || (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2) != 45)
      {
        return 0;
      }
      v8 = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 872))(*a2);
      v21 = *(uint64_t (**)(void))(**(_QWORD **)(a3 + 8) + 872);
      goto LABEL_74;
    case 0x15:
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2) == 45;
    case 0x16:
      v10 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 752);
      return v10();
    case 0x17:
      v10 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 680);
      return v10();
    case 0x18:
      v10 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 520);
      return v10();
    case 0x19:
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2) - 55 < 8;
    case 0x1A:
      if (((*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 104))(*a2) & 1) != 0)
        return IsEnabled;
      return (*(uint64_t (**)(WebCore::AXCoreObject *, uint64_t))(*(_QWORD *)*a2 + 1256))(*a2, 139);
    case 0x1B:
      v10 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 160);
      return v10();
    case 0x1C:
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)*a2 + 2232))(&v67);
      v15 = v67;
      if (v67)
      {
        if ((*((_BYTE *)v67 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v67 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v67, v14);
          v15 = v64;
        }
      }
      v64 = v15;
      IsEnabled = WebCore::AXCoreObject::liveRegionStatusIsEnabled((uint64_t *)&v64);
      v17 = v64;
      v64 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v67;
      v67 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v16);
        else
          *(_DWORD *)v18 -= 2;
      }
      return IsEnabled;
    case 0x1D:
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)*a2 + 688))(&v64);
      v30 = *((_QWORD *)*a2 + 2);
      v31 = *a1;
      if (*a1
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, 8u), (v31 = *a1) != 0))
      {
        v32 = *(_DWORD *)(v31 - 8);
      }
      else
      {
        v32 = 0;
      }
      v33 = (v30 + ~(v30 << 32)) ^ ((unint64_t)(v30 + ~(v30 << 32)) >> 22);
      v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
      v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
      v36 = v32 & ((v35 >> 31) ^ v35);
      v37 = (_QWORD *)(v31 + 24 * v36);
      v38 = *v37;
      if (!*v37)
        goto LABEL_90;
      v39 = 0;
      v40 = 1;
      break;
    case 0x1E:
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2) == 129;
    case 0x1F:
      v10 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 712);
      return v10();
    case 0x20:
      if ((*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2) == 89)
        return IsEnabled;
      v26 = *a2;
      if (!*a2)
        return 0;
      v27 = *((_QWORD *)v26 + 1);
      if (__ldaxr((unsigned __int8 *)v27))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v27))
      {
        goto LABEL_113;
      }
      MEMORY[0x19AEA534C](v27);
LABEL_113:
      ++*(_QWORD *)(v27 + 8);
      v49 = __ldxr((unsigned __int8 *)v27);
      if (v49 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
          goto LABEL_118;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_118:
      v50 = *(_QWORD *)(a3 + 8);
      if ((*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)v26 + 1456))(v26) == 88)
      {
        if (v50 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 1456))(v50) == 88)
        {
          (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AXCoreObject *))(*(_QWORD *)v26 + 1952))(&v64, v26);
          (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v50 + 1952))(&v67, v50);
          v52 = WTF::equal(v64, v67, v51);
          v53 = v67;
          v67 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v41);
            else
              *(_DWORD *)v53 -= 2;
          }
          IsEnabled = v52 ^ 1u;
          v54 = v64;
          v64 = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v41);
            else
              *(_DWORD *)v54 -= 2;
          }
        }
        else
        {
          IsEnabled = 1;
        }
      }
      else
      {
        IsEnabled = 0;
      }
      v55 = *((_QWORD *)v26 + 1);
      if (__ldaxr((unsigned __int8 *)v55))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v55))
      {
        goto LABEL_133;
      }
      MEMORY[0x19AEA534C](v55);
LABEL_133:
      v57 = *(_QWORD *)(v55 + 8);
      v58 = v57 - 1;
      *(_QWORD *)(v55 + 8) = v57 - 1;
      if (v57 == 1)
      {
        v63 = *(_QWORD *)(v55 + 16);
        v59 = *(_QWORD *)(v55 + 24);
        *(_QWORD *)(v55 + 24) = 0;
        v60 = v63 != 0;
      }
      else
      {
        v59 = 0;
        v60 = 1;
      }
      v61 = __ldxr((unsigned __int8 *)v55);
      if (v61 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v55))
          goto LABEL_140;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v55);
LABEL_140:
      if (v58)
        return IsEnabled;
      if (v59)
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
      if (v60)
        return IsEnabled;
      v62 = (WTF::StringImpl *)v55;
      goto LABEL_150;
    case 0x21:
      if (!*(_QWORD *)(a3 + 8))
        return 0;
      v8 = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2);
      v21 = *(uint64_t (**)(void))(**(_QWORD **)(a3 + 8) + 1456);
LABEL_74:
      v9 = v21();
      return v8 == v9;
    case 0x22:
      return (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2) == 107;
    case 0x23:
      if (!*(_QWORD *)(a3 + 8))
        return 0;
      v19 = *(unsigned int (**)(void))(*(_QWORD *)*a2 + 736);
      return v19() ^ 1;
    case 0x24:
      if (!*(_QWORD *)(a3 + 8)
        || !(*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 176))(*a2)
        || !(*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 184))(*a2))
      {
        return 0;
      }
      v8 = WebCore::AXCoreObject::tableLevel(*a2);
      v9 = WebCore::AXCoreObject::tableLevel(*(WebCore::AXCoreObject **)(a3 + 8));
      return v8 == v9;
    case 0x25:
      if (!(*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 176))(*a2))
        return 0;
      v10 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 184);
      return v10();
    case 0x26:
      v11 = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1456))(*a2);
      if (((v11 - 101) > 0x19 || ((1 << (v11 - 101)) & 0x3000001) == 0) && v11 != 19)
        return 0;
      return IsEnabled;
    case 0x27:
      v10 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 744);
      return v10();
    case 0x28:
      v25 = *(unsigned int (**)(void))(*(_QWORD *)*a2 + 608);
      return v25() == 1;
    case 0x29:
      v20 = *(unsigned int (**)(void))(*(_QWORD *)*a2 + 608);
      return v20() == 2;
    default:
      return 0;
  }
  do
  {
    if (v38 == v30)
    {
      WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(v37 + 1), (WTF *)&v64);
      goto LABEL_148;
    }
    if (v38 == -1)
      v39 = v37;
    v36 = (v36 + v40) & v32;
    v37 = (_QWORD *)(v31 + 24 * v36);
    v38 = *v37;
    ++v40;
  }
  while (*v37);
  if (v39)
  {
    *v39 = 0;
    v39[1] = 0;
    v39[2] = 0;
    --*(_DWORD *)(*a1 - 16);
    v37 = v39;
  }
LABEL_90:
  *v37 = v30;
  WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(v37 + 1), (WTF *)&v64);
  v42 = *a1;
  if (*a1)
    v43 = *(_DWORD *)(v42 - 12) + 1;
  else
    v43 = 1;
  *(_DWORD *)(v42 - 12) = v43;
  v44 = *a1;
  if (*a1)
    v45 = *(_DWORD *)(v44 - 12);
  else
    v45 = 0;
  v46 = (*(_DWORD *)(v44 - 16) + v45);
  v47 = *(unsigned int *)(v44 - 4);
  if (v47 <= 0x400)
  {
    if (3 * v47 > 4 * v46)
      goto LABEL_148;
    if (!(_DWORD)v47)
    {
      v48 = 8;
      goto LABEL_147;
    }
LABEL_110:
    v48 = (_DWORD)v47 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v47));
LABEL_147:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v48);
    goto LABEL_148;
  }
  if (v47 <= 2 * v46)
    goto LABEL_110;
LABEL_148:
  IsEnabled = v66 != 0;
  v62 = v64;
  if (v64)
  {
    v64 = 0;
    v65 = 0;
LABEL_150:
    WTF::fastFree(v62, v41);
  }
  return IsEnabled;
}

uint64_t WebCore::AXSearchManager::matchText(uint64_t *a1, WebCore *a2)
{
  uint64_t v3;
  unint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v3 = *a1;
  if (!v3)
    return 0;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 1;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v3 + 1360))(&v13);
  v5 = 1;
  if ((WebCore::containsPlainText((uint64_t *)&v13, a2, 1) & 1) == 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)*a1 + 1368))(&v12);
    v5 = 1;
    if ((WebCore::containsPlainText((uint64_t *)&v12, a2, 1) & 1) == 0)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)*a1 + 1384))(&v11);
      v5 = WebCore::containsPlainText((uint64_t *)&v11, a2, 1);
      v7 = v11;
      v11 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
    v8 = v12;
    v12 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v5;
}

BOOL WebCore::AXSearchManager::matchWithResultsLimit(uint64_t *a1, WebCore::AXCoreObject **a2, uint64_t a3, uint64_t a4)
{
  WebCore::AXCoreObject *v4;
  uint64_t *v7;
  uint64_t v9;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  int matched;
  uint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  unsigned int v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  WebCore::AXCoreObject *v58;

  v4 = *a2;
  if (!*a2)
    return 0;
  v7 = (uint64_t *)a2;
  v9 = *((_QWORD *)v4 + 1);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_6:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v9))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_11:
  if (!*(_DWORD *)(a3 + 52))
    goto LABEL_45;
  v55 = v7;
  v56 = a4;
  v12 = 0;
  while (1)
  {
    v13 = *((_QWORD *)v4 + 1);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_17;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_17:
    ++*(_QWORD *)(v13 + 8);
    v15 = __ldxr((unsigned __int8 *)v13);
    if (v15 != 1)
    {
      __clrex();
LABEL_21:
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      goto LABEL_22;
    }
    if (__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_21;
LABEL_22:
    v58 = v4;
    v16 = WebCore::AXSearchManager::matchForSearchKeyAtIndex(a1, &v58, a3, v12);
    v58 = 0;
    v17 = *((_QWORD *)v4 + 1);
    if (__ldaxr((unsigned __int8 *)v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v17))
    {
      goto LABEL_26;
    }
    MEMORY[0x19AEA534C](v17);
LABEL_26:
    v19 = *(_QWORD *)(v17 + 8);
    v20 = v19 - 1;
    *(_QWORD *)(v17 + 8) = v19 - 1;
    if (v19 == 1)
    {
      v24 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 24) = 0;
      v22 = v24 != 0;
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
    v23 = __ldxr((unsigned __int8 *)v17);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
        if (v20)
          goto LABEL_37;
        goto LABEL_34;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      goto LABEL_37;
LABEL_34:
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if (!v22)
      break;
LABEL_37:
    if (v16)
      goto LABEL_43;
LABEL_38:
    if (++v12 >= *(unsigned int *)(a3 + 52))
    {
      matched = 0;
      v7 = v55;
      a4 = v56;
      goto LABEL_73;
    }
  }
  WTF::fastFree((WTF *)v17, a2);
  if ((v16 & 1) == 0)
    goto LABEL_38;
LABEL_43:
  if (*(_BYTE *)(a3 + 68))
  {
    v7 = v55;
    a4 = v56;
    if (!(*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)v4 + 584))(v4))
    {
LABEL_45:
      matched = 0;
      goto LABEL_73;
    }
  }
  else
  {
    v7 = v55;
    a4 = v56;
  }
  v26 = *v7;
  if (!*v7)
  {
    v57 = 0;
    matched = WebCore::AXSearchManager::matchText(&v57, (WebCore *)(a3 + 56));
    v57 = 0;
    goto LABEL_73;
  }
  v27 = *(_QWORD *)(v26 + 8);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
    goto LABEL_51;
  }
  if (__stxr(1u, (unsigned __int8 *)v27))
LABEL_51:
    MEMORY[0x19AEA534C](v27);
  ++*(_QWORD *)(v27 + 8);
  v29 = __ldxr((unsigned __int8 *)v27);
  if (v29 != 1)
  {
    __clrex();
    goto LABEL_56;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_56:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
  v57 = v26;
  matched = WebCore::AXSearchManager::matchText(&v57, (WebCore *)(a3 + 56));
  v57 = 0;
  v30 = *(_QWORD *)(v26 + 8);
  if (__ldaxr((unsigned __int8 *)v30))
  {
    __clrex();
    goto LABEL_60;
  }
  if (__stxr(1u, (unsigned __int8 *)v30))
LABEL_60:
    MEMORY[0x19AEA534C](v30);
  v32 = *(_QWORD *)(v30 + 8);
  v33 = v32 - 1;
  *(_QWORD *)(v30 + 8) = v32 - 1;
  if (v32 == 1)
  {
    v54 = *(_QWORD *)(v30 + 16);
    v34 = *(_QWORD *)(v30 + 24);
    *(_QWORD *)(v30 + 24) = 0;
    v35 = v54 != 0;
  }
  else
  {
    v34 = 0;
    v35 = 1;
  }
  v36 = __ldxr((unsigned __int8 *)v30);
  if (v36 != 1)
  {
    __clrex();
LABEL_68:
    WTF::Lock::unlockSlow((WTF::Lock *)v30);
    if (!v33)
      goto LABEL_69;
    goto LABEL_73;
  }
  if (__stlxr(0, (unsigned __int8 *)v30))
    goto LABEL_68;
  if (!v33)
  {
LABEL_69:
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    if (!v35)
      WTF::fastFree((WTF *)v30, a2);
  }
LABEL_73:
  v37 = *((_QWORD *)v4 + 1);
  if (__ldaxr((unsigned __int8 *)v37))
  {
    __clrex();
    goto LABEL_76;
  }
  if (__stxr(1u, (unsigned __int8 *)v37))
LABEL_76:
    MEMORY[0x19AEA534C](v37);
  v39 = *(_QWORD *)(v37 + 8);
  v40 = v39 - 1;
  *(_QWORD *)(v37 + 8) = v39 - 1;
  if (v39 == 1)
  {
    v53 = *(_QWORD *)(v37 + 16);
    v41 = *(_QWORD *)(v37 + 24);
    *(_QWORD *)(v37 + 24) = 0;
    v42 = v53 != 0;
  }
  else
  {
    v41 = 0;
    v42 = 1;
  }
  v43 = __ldxr((unsigned __int8 *)v37);
  if (v43 != 1)
  {
    __clrex();
LABEL_84:
    WTF::Lock::unlockSlow((WTF::Lock *)v37);
    if (!v40)
      goto LABEL_85;
    goto LABEL_88;
  }
  if (__stlxr(0, (unsigned __int8 *)v37))
    goto LABEL_84;
  if (v40)
    goto LABEL_88;
LABEL_85:
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  if (!v42)
  {
    WTF::fastFree((WTF *)v37, a2);
    if ((matched & 1) == 0)
      return 0;
LABEL_89:
    v44 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v44 == *(_DWORD *)(a4 + 8))
    {
      v45 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a4, v44 + 1, (unint64_t)v7);
      v44 = *(unsigned int *)(a4 + 12);
      v46 = *(char **)a4;
      v47 = *(_QWORD *)v45;
      if (!*(_QWORD *)v45)
        goto LABEL_104;
    }
    else
    {
      v46 = *(char **)a4;
      v47 = *v7;
      if (!*v7)
        goto LABEL_104;
    }
    v48 = *(_QWORD *)(v47 + 8);
    if (__ldaxr((unsigned __int8 *)v48))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v48))
    {
LABEL_99:
      ++*(_QWORD *)(v48 + 8);
      v50 = __ldxr((unsigned __int8 *)v48);
      if (v50 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v48))
          goto LABEL_104;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v48);
LABEL_104:
      *(_QWORD *)&v46[8 * v44] = v47;
      v51 = *(_DWORD *)(a4 + 12) + 1;
      *(_DWORD *)(a4 + 12) = v51;
      return v51 >= *(_DWORD *)(a3 + 64);
    }
    MEMORY[0x19AEA534C](v48);
    goto LABEL_99;
  }
LABEL_88:
  if (matched)
    goto LABEL_89;
  return 0;
}

uint64_t WebCore::AXSearchManager::findMatchingObjectsInternal@<X0>(uint64_t *a1@<X0>, WebCore::AXCoreObject **a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::AXCoreObject *v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  WebCore::AXCoreObject *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t result;
  void *v27;
  BOOL v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  WebCore::AXCoreObject *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  WebCore::AXCoreObject *v51;
  uint64_t v52;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  int v66;
  int v67;
  WebCore::AXCoreObject *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  int v75;
  char v76;
  uint64_t v77;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  int v87;
  WebCore::AXCoreObject *v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  int v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WebCore::AXCoreObject *v108;
  char v109;
  uint64_t v110;
  int v112;
  BOOL v113;
  WebCore::AXCoreObject *v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  int v121;
  uint64_t v122;
  int v124;
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  int v131;
  uint64_t v132;
  int v134;
  uint64_t v135;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  int v141;
  WebCore::AXCoreObject *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  int v154;
  uint64_t v155;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  WebCore::AXCoreObject *v166;
  WebCore::AXCoreObject *v167;
  unsigned int v168;
  WebCore::AXCoreObject *v169;
  uint64_t v170;
  WebCore::AXCoreObject *v171;
  WebCore::AXCoreObject *v172;
  WebCore::AXCoreObject *v173;
  WebCore::AXCoreObject *v174;
  uint64_t v175;
  uint64_t v176;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = a2[1];
  if (!v6)
  {
    v6 = *a2;
    if (!*a2)
    {
      v12 = 0;
      v168 = *((_DWORD *)a2 + 8) == 1;
      goto LABEL_50;
    }
  }
  v7 = *((_QWORD *)v6 + 1);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_6:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_11:
  v168 = *((_DWORD *)a2 + 8) == 1;
  if (*((_DWORD *)a2 + 8) != 1 && v6 != *a2)
  {
    v10 = *((_QWORD *)v6 + 1);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_18;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_18:
    ++*(_QWORD *)(v10 + 8);
    v13 = __ldxr((unsigned __int8 *)v10);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
LABEL_23:
        v14 = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)v6 + 1240))(v6);
        v12 = (WebCore::AXCoreObject *)v14;
        if (!v14)
          goto LABEL_33;
        v16 = *(_QWORD *)(v14 + 8);
        if (__ldaxr((unsigned __int8 *)v16))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v16))
        {
          goto LABEL_28;
        }
        MEMORY[0x19AEA534C](v16);
LABEL_28:
        ++*(_QWORD *)(v16 + 8);
        v18 = __ldxr((unsigned __int8 *)v16);
        if (v18 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v16))
          {
LABEL_33:
            v19 = *((_QWORD *)v6 + 1);
            if (__ldaxr((unsigned __int8 *)v19))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v19))
            {
              goto LABEL_37;
            }
            MEMORY[0x19AEA534C](v19);
LABEL_37:
            v21 = *(_QWORD *)(v19 + 8);
            v22 = v21 - 1;
            *(_QWORD *)(v19 + 8) = v21 - 1;
            if (v21 == 1)
            {
              v164 = *(_QWORD *)(v19 + 16);
              v23 = *(_QWORD *)(v19 + 24);
              *(_QWORD *)(v19 + 24) = 0;
              v24 = v164 != 0;
            }
            else
            {
              v23 = 0;
              v24 = 1;
            }
            v25 = __ldxr((unsigned __int8 *)v19);
            if (v25 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v19))
              {
                if (!v22)
                  goto LABEL_45;
                goto LABEL_49;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v19);
            if (!v22)
            {
LABEL_45:
              if (v23)
                (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
              if (!v24)
                WTF::fastFree((WTF *)v19, v15);
            }
LABEL_49:
            v168 = 0;
            goto LABEL_50;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v16);
        goto LABEL_33;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    goto LABEL_23;
  }
  v12 = v6;
  v6 = 0;
LABEL_50:
  result = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)*a2 + 1240))(*a2);
  if (!v12 || v12 == (WebCore::AXCoreObject *)result)
  {
    v108 = v12;
LABEL_332:
    v12 = v108;
    v142 = v6;
    if (v6)
      goto LABEL_333;
    goto LABEL_349;
  }
  v165 = result;
  while (2)
  {
    v166 = v6;
    v167 = v12;
    v175 = 0;
    v176 = 0;
    if (*((_BYTE *)a2 + 69))
      v28 = v12 == *a2;
    else
      v28 = 1;
    if (!v28)
      goto LABEL_111;
    v29 = *((_QWORD *)v12 + 1);
    if (__ldaxr((unsigned __int8 *)v29))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v29))
    {
      goto LABEL_62;
    }
    MEMORY[0x19AEA534C](v29);
LABEL_62:
    ++*(_QWORD *)(v29 + 8);
    v31 = __ldxr((unsigned __int8 *)v29);
    if (v31 != 1)
    {
      __clrex();
      goto LABEL_66;
    }
    if (__stlxr(0, (unsigned __int8 *)v29))
LABEL_66:
      WTF::Lock::unlockSlow((WTF::Lock *)v29);
    v174 = v167;
    if (!v6)
      goto LABEL_77;
    v32 = *((_QWORD *)v6 + 1);
    if (__ldaxr((unsigned __int8 *)v32))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v32))
    {
      goto LABEL_72;
    }
    MEMORY[0x19AEA534C](v32);
LABEL_72:
    ++*(_QWORD *)(v32 + 8);
    v34 = __ldxr((unsigned __int8 *)v32);
    if (v34 != 1)
    {
      __clrex();
      goto LABEL_76;
    }
    if (__stlxr(0, (unsigned __int8 *)v32))
LABEL_76:
      WTF::Lock::unlockSlow((WTF::Lock *)v32);
LABEL_77:
    v173 = v6;
    result = WebCore::appendChildrenToArray(&v174, v168, (uint64_t *)&v173, (uint64_t)&v175);
    v35 = (uint64_t)v173;
    v173 = 0;
    if (!v35)
      goto LABEL_94;
    v36 = *(_QWORD *)(v35 + 8);
    if (__ldaxr((unsigned __int8 *)v36))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v36))
    {
      goto LABEL_82;
    }
    result = MEMORY[0x19AEA534C](v36);
LABEL_82:
    v38 = *(_QWORD *)(v36 + 8);
    v39 = v38 - 1;
    *(_QWORD *)(v36 + 8) = v38 - 1;
    if (v38 == 1)
    {
      v145 = *(_QWORD *)(v36 + 16);
      v40 = *(_QWORD *)(v36 + 24);
      *(_QWORD *)(v36 + 24) = 0;
      v41 = v145 != 0;
    }
    else
    {
      v40 = 0;
      v41 = 1;
    }
    v42 = __ldxr((unsigned __int8 *)v36);
    if (v42 != 1)
    {
      __clrex();
LABEL_89:
      result = WTF::Lock::unlockSlow((WTF::Lock *)v36);
      if (v39)
        goto LABEL_94;
      goto LABEL_90;
    }
    if (__stlxr(0, (unsigned __int8 *)v36))
      goto LABEL_89;
    if (v39)
      goto LABEL_94;
LABEL_90:
    if (v40)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    if (!v41)
      result = WTF::fastFree((WTF *)v36, v27);
LABEL_94:
    v43 = v174;
    v174 = 0;
    if (!v43)
      goto LABEL_111;
    v44 = *((_QWORD *)v43 + 1);
    if (__ldaxr((unsigned __int8 *)v44))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v44))
    {
      goto LABEL_99;
    }
    result = MEMORY[0x19AEA534C](v44);
LABEL_99:
    v46 = *(_QWORD *)(v44 + 8);
    v47 = v46 - 1;
    *(_QWORD *)(v44 + 8) = v46 - 1;
    if (v46 == 1)
    {
      v146 = *(_QWORD *)(v44 + 16);
      v48 = *(_QWORD *)(v44 + 24);
      *(_QWORD *)(v44 + 24) = 0;
      v49 = v146 != 0;
    }
    else
    {
      v48 = 0;
      v49 = 1;
    }
    v50 = __ldxr((unsigned __int8 *)v44);
    if (v50 != 1)
    {
      __clrex();
LABEL_106:
      result = WTF::Lock::unlockSlow((WTF::Lock *)v44);
      if (v47)
        goto LABEL_111;
      goto LABEL_107;
    }
    if (__stlxr(0, (unsigned __int8 *)v44))
      goto LABEL_106;
    if (v47)
      goto LABEL_111;
LABEL_107:
    if (v48)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    if (!v49)
      result = WTF::fastFree((WTF *)v44, v27);
LABEL_111:
    while (HIDWORD(v176))
    {
      v51 = *(WebCore::AXCoreObject **)(v175 + 8 * HIDWORD(v176) - 8);
      if (!v51)
        goto LABEL_122;
      v52 = *((_QWORD *)v51 + 1);
      if (__ldaxr((unsigned __int8 *)v52))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v52))
      {
        goto LABEL_117;
      }
      result = MEMORY[0x19AEA534C](v52);
LABEL_117:
      ++*(_QWORD *)(v52 + 8);
      v54 = __ldxr((unsigned __int8 *)v52);
      if (v54 != 1)
      {
        __clrex();
LABEL_121:
        result = WTF::Lock::unlockSlow((WTF::Lock *)v52);
        goto LABEL_122;
      }
      if (__stlxr(0, (unsigned __int8 *)v52))
        goto LABEL_121;
LABEL_122:
      if (!HIDWORD(v176))
      {
        __break(0xC471u);
        return result;
      }
      v55 = HIDWORD(v176) - 1;
      v56 = *(_QWORD *)(v175 + 8 * v55);
      *(_QWORD *)(v175 + 8 * v55) = 0;
      if (v56)
      {
        v57 = *(_QWORD *)(v56 + 8);
        if (__ldaxr((unsigned __int8 *)v57))
        {
          __clrex();
          goto LABEL_127;
        }
        if (__stxr(1u, (unsigned __int8 *)v57))
LABEL_127:
          MEMORY[0x19AEA534C](v57);
        v59 = *(_QWORD *)(v57 + 8);
        v60 = v59 - 1;
        *(_QWORD *)(v57 + 8) = v59 - 1;
        if (v59 == 1)
        {
          v103 = *(_QWORD *)(v57 + 16);
          v61 = *(_QWORD *)(v57 + 24);
          *(_QWORD *)(v57 + 24) = 0;
          v62 = v103 != 0;
        }
        else
        {
          v61 = 0;
          v62 = 1;
        }
        v63 = __ldxr((unsigned __int8 *)v57);
        if (v63 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v57))
          {
            if (v60)
              goto LABEL_140;
LABEL_136:
            if (v61)
              (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
            if (!v62)
              WTF::fastFree((WTF *)v57, v27);
            goto LABEL_140;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v57);
        if (v60)
          goto LABEL_140;
        goto LABEL_136;
      }
LABEL_140:
      HIDWORD(v176) = v55;
      if (!v51)
        goto LABEL_150;
      v64 = *((_QWORD *)v51 + 1);
      if (__ldaxr((unsigned __int8 *)v64))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v64))
      {
        goto LABEL_145;
      }
      MEMORY[0x19AEA534C](v64);
LABEL_145:
      ++*(_QWORD *)(v64 + 8);
      v66 = __ldxr((unsigned __int8 *)v64);
      if (v66 != 1)
      {
        __clrex();
LABEL_149:
        WTF::Lock::unlockSlow((WTF::Lock *)v64);
        goto LABEL_150;
      }
      if (__stlxr(0, (unsigned __int8 *)v64))
        goto LABEL_149;
LABEL_150:
      v172 = v51;
      result = WebCore::AXSearchManager::matchWithResultsLimit(a1, &v172, (uint64_t)a2, a3);
      v67 = result;
      v68 = v172;
      v172 = 0;
      if (!v68)
        goto LABEL_167;
      v69 = *((_QWORD *)v68 + 1);
      if (__ldaxr((unsigned __int8 *)v69))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v69))
      {
        goto LABEL_155;
      }
      result = MEMORY[0x19AEA534C](v69);
LABEL_155:
      v71 = *(_QWORD *)(v69 + 8);
      v72 = v71 - 1;
      *(_QWORD *)(v69 + 8) = v71 - 1;
      if (v71 == 1)
      {
        v104 = *(_QWORD *)(v69 + 16);
        v73 = *(_QWORD *)(v69 + 24);
        *(_QWORD *)(v69 + 24) = 0;
        v74 = v104 != 0;
      }
      else
      {
        v73 = 0;
        v74 = 1;
      }
      v75 = __ldxr((unsigned __int8 *)v69);
      if (v75 != 1)
      {
        __clrex();
LABEL_162:
        result = WTF::Lock::unlockSlow((WTF::Lock *)v69);
        if (v72)
          goto LABEL_167;
        goto LABEL_163;
      }
      if (__stlxr(0, (unsigned __int8 *)v69))
        goto LABEL_162;
      if (v72)
        goto LABEL_167;
LABEL_163:
      if (v73)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
      if (!v74)
        result = WTF::fastFree((WTF *)v69, v27);
LABEL_167:
      if (*((_BYTE *)a2 + 69))
        v76 = 1;
      else
        v76 = v67;
      if ((v76 & 1) != 0)
        goto LABEL_215;
      if (!v51)
        goto LABEL_181;
      v77 = *((_QWORD *)v51 + 1);
      if (__ldaxr((unsigned __int8 *)v77))
      {
        __clrex();
LABEL_175:
        MEMORY[0x19AEA534C](v77);
        goto LABEL_176;
      }
      if (__stxr(1u, (unsigned __int8 *)v77))
        goto LABEL_175;
LABEL_176:
      ++*(_QWORD *)(v77 + 8);
      v79 = __ldxr((unsigned __int8 *)v77);
      if (v79 != 1)
      {
        __clrex();
LABEL_180:
        WTF::Lock::unlockSlow((WTF::Lock *)v77);
        goto LABEL_181;
      }
      if (__stlxr(0, (unsigned __int8 *)v77))
        goto LABEL_180;
LABEL_181:
      v170 = 0;
      v171 = v51;
      result = WebCore::appendChildrenToArray(&v171, v168, &v170, (uint64_t)&v175);
      v80 = v170;
      v170 = 0;
      if (!v80)
        goto LABEL_198;
      v81 = *(_QWORD *)(v80 + 8);
      if (__ldaxr((unsigned __int8 *)v81))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v81))
      {
        goto LABEL_186;
      }
      result = MEMORY[0x19AEA534C](v81);
LABEL_186:
      v83 = *(_QWORD *)(v81 + 8);
      v84 = v83 - 1;
      *(_QWORD *)(v81 + 8) = v83 - 1;
      if (v83 == 1)
      {
        v106 = *(_QWORD *)(v81 + 16);
        v85 = *(_QWORD *)(v81 + 24);
        *(_QWORD *)(v81 + 24) = 0;
        v86 = v106 != 0;
      }
      else
      {
        v85 = 0;
        v86 = 1;
      }
      v87 = __ldxr((unsigned __int8 *)v81);
      if (v87 != 1)
      {
        __clrex();
LABEL_193:
        result = WTF::Lock::unlockSlow((WTF::Lock *)v81);
        if (v84)
          goto LABEL_198;
        goto LABEL_194;
      }
      if (__stlxr(0, (unsigned __int8 *)v81))
        goto LABEL_193;
      if (v84)
        goto LABEL_198;
LABEL_194:
      if (v85)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
      if (!v86)
        result = WTF::fastFree((WTF *)v81, v27);
LABEL_198:
      v88 = v171;
      v171 = 0;
      if (!v88)
        goto LABEL_215;
      v89 = *((_QWORD *)v88 + 1);
      if (__ldaxr((unsigned __int8 *)v89))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v89))
      {
        goto LABEL_203;
      }
      result = MEMORY[0x19AEA534C](v89);
LABEL_203:
      v91 = *(_QWORD *)(v89 + 8);
      v92 = v91 - 1;
      *(_QWORD *)(v89 + 8) = v91 - 1;
      if (v91 == 1)
      {
        v107 = *(_QWORD *)(v89 + 16);
        v93 = *(_QWORD *)(v89 + 24);
        *(_QWORD *)(v89 + 24) = 0;
        v94 = v107 != 0;
      }
      else
      {
        v93 = 0;
        v94 = 1;
      }
      v95 = __ldxr((unsigned __int8 *)v89);
      if (v95 != 1)
      {
        __clrex();
LABEL_210:
        result = WTF::Lock::unlockSlow((WTF::Lock *)v89);
        if (v92)
          goto LABEL_215;
        goto LABEL_211;
      }
      if (__stlxr(0, (unsigned __int8 *)v89))
        goto LABEL_210;
      if (v92)
        goto LABEL_215;
LABEL_211:
      if (v93)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
      if (!v94)
        result = WTF::fastFree((WTF *)v89, v27);
LABEL_215:
      if (!v51)
        goto LABEL_232;
      v96 = *((_QWORD *)v51 + 1);
      if (__ldaxr((unsigned __int8 *)v96))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v96))
      {
        goto LABEL_220;
      }
      result = MEMORY[0x19AEA534C](v96);
LABEL_220:
      v98 = *(_QWORD *)(v96 + 8);
      v99 = v98 - 1;
      *(_QWORD *)(v96 + 8) = v98 - 1;
      if (v98 == 1)
      {
        v105 = *(_QWORD *)(v96 + 16);
        v100 = *(_QWORD *)(v96 + 24);
        *(_QWORD *)(v96 + 24) = 0;
        v101 = v105 != 0;
      }
      else
      {
        v100 = 0;
        v101 = 1;
      }
      v102 = __ldxr((unsigned __int8 *)v96);
      if (v102 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v96))
        {
          if (!v99)
            goto LABEL_228;
          goto LABEL_232;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v96);
      if (!v99)
      {
LABEL_228:
        if (v100)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
        if (!v101)
          result = WTF::fastFree((WTF *)v96, v27);
      }
LABEL_232:
      if (v67)
        break;
    }
    v6 = v166;
    v108 = v167;
    if (*(_DWORD *)(a3 + 12) >= *((_DWORD *)a2 + 16))
    {
LABEL_331:
      result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v175, v27);
      goto LABEL_332;
    }
    v109 = v168;
    if (v167 == *a2)
      v109 = 1;
    if ((v109 & 1) != 0)
      goto LABEL_270;
    v110 = *((_QWORD *)v167 + 1);
    if (__ldaxr((unsigned __int8 *)v110))
    {
      __clrex();
      goto LABEL_246;
    }
    if (__stxr(1u, (unsigned __int8 *)v110))
LABEL_246:
      MEMORY[0x19AEA534C](v110);
    ++*(_QWORD *)(v110 + 8);
    v112 = __ldxr((unsigned __int8 *)v110);
    if (v112 != 1)
    {
      __clrex();
      goto LABEL_251;
    }
    if (__stlxr(0, (unsigned __int8 *)v110))
LABEL_251:
      WTF::Lock::unlockSlow((WTF::Lock *)v110);
    v169 = v167;
    v113 = WebCore::AXSearchManager::matchWithResultsLimit(a1, &v169, (uint64_t)a2, a3);
    v114 = v169;
    v169 = 0;
    if (!v114)
      goto LABEL_269;
    v115 = *((_QWORD *)v114 + 1);
    if (__ldaxr((unsigned __int8 *)v115))
    {
      __clrex();
      goto LABEL_256;
    }
    if (__stxr(1u, (unsigned __int8 *)v115))
LABEL_256:
      MEMORY[0x19AEA534C](v115);
    v117 = *(_QWORD *)(v115 + 8);
    v118 = v117 - 1;
    *(_QWORD *)(v115 + 8) = v117 - 1;
    if (v117 == 1)
    {
      v147 = *(_QWORD *)(v115 + 16);
      v119 = *(_QWORD *)(v115 + 24);
      *(_QWORD *)(v115 + 24) = 0;
      v120 = v147 != 0;
    }
    else
    {
      v119 = 0;
      v120 = 1;
    }
    v121 = __ldxr((unsigned __int8 *)v115);
    if (v121 != 1)
    {
      __clrex();
LABEL_264:
      WTF::Lock::unlockSlow((WTF::Lock *)v115);
      if (!v118)
        goto LABEL_265;
      goto LABEL_269;
    }
    if (__stlxr(0, (unsigned __int8 *)v115))
      goto LABEL_264;
    if (!v118)
    {
LABEL_265:
      if (v119)
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
      if (!v120)
        WTF::fastFree((WTF *)v115, v27);
    }
LABEL_269:
    v6 = v166;
    v108 = v167;
    if (v113)
      goto LABEL_331;
LABEL_270:
    v122 = *((_QWORD *)v108 + 1);
    if (__ldaxr((unsigned __int8 *)v122))
    {
      __clrex();
      goto LABEL_273;
    }
    if (__stxr(1u, (unsigned __int8 *)v122))
LABEL_273:
      MEMORY[0x19AEA534C](v122);
    ++*(_QWORD *)(v122 + 8);
    v124 = __ldxr((unsigned __int8 *)v122);
    if (v124 != 1)
    {
      __clrex();
      goto LABEL_278;
    }
    if (__stlxr(0, (unsigned __int8 *)v122))
LABEL_278:
      WTF::Lock::unlockSlow((WTF::Lock *)v122);
    if (!v6)
      goto LABEL_296;
    v125 = *((_QWORD *)v6 + 1);
    if (__ldaxr((unsigned __int8 *)v125))
    {
      __clrex();
      goto LABEL_283;
    }
    if (__stxr(1u, (unsigned __int8 *)v125))
LABEL_283:
      MEMORY[0x19AEA534C](v125);
    v127 = *(_QWORD *)(v125 + 8);
    v128 = v127 - 1;
    *(_QWORD *)(v125 + 8) = v127 - 1;
    if (v127 == 1)
    {
      v144 = *(_QWORD *)(v125 + 16);
      v129 = *(_QWORD *)(v125 + 24);
      *(_QWORD *)(v125 + 24) = 0;
      v130 = v144 != 0;
    }
    else
    {
      v129 = 0;
      v130 = 1;
    }
    v131 = __ldxr((unsigned __int8 *)v125);
    if (v131 != 1)
    {
      __clrex();
LABEL_291:
      WTF::Lock::unlockSlow((WTF::Lock *)v125);
      if (!v128)
        goto LABEL_292;
      goto LABEL_296;
    }
    if (__stlxr(0, (unsigned __int8 *)v125))
      goto LABEL_291;
    if (!v128)
    {
LABEL_292:
      if (v129)
        (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
      if (!v130)
        WTF::fastFree((WTF *)v125, v27);
    }
LABEL_296:
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v175, v27);
    result = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)v167 + 1240))(v167);
    v12 = (WebCore::AXCoreObject *)result;
    if (result)
    {
      v132 = *(_QWORD *)(result + 8);
      if (__ldaxr((unsigned __int8 *)v132))
      {
        __clrex();
        goto LABEL_300;
      }
      if (__stxr(1u, (unsigned __int8 *)v132))
LABEL_300:
        result = MEMORY[0x19AEA534C](v132);
      ++*(_QWORD *)(v132 + 8);
      v134 = __ldxr((unsigned __int8 *)v132);
      if (v134 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v132))
          goto LABEL_306;
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v132);
    }
LABEL_306:
    v135 = *((_QWORD *)v167 + 1);
    if (__ldaxr((unsigned __int8 *)v135))
    {
      __clrex();
      goto LABEL_309;
    }
    if (__stxr(1u, (unsigned __int8 *)v135))
LABEL_309:
      result = MEMORY[0x19AEA534C](v135);
    v137 = *(_QWORD *)(v135 + 8);
    v138 = v137 - 1;
    *(_QWORD *)(v135 + 8) = v137 - 1;
    if (v137 == 1)
    {
      v143 = *(_QWORD *)(v135 + 16);
      v139 = *(_QWORD *)(v135 + 24);
      *(_QWORD *)(v135 + 24) = 0;
      v140 = v143 != 0;
    }
    else
    {
      v139 = 0;
      v140 = 1;
    }
    v141 = __ldxr((unsigned __int8 *)v135);
    if (v141 != 1)
    {
      __clrex();
LABEL_317:
      result = WTF::Lock::unlockSlow((WTF::Lock *)v135);
      if (!v138)
        goto LABEL_318;
      goto LABEL_322;
    }
    if (__stlxr(0, (unsigned __int8 *)v135))
      goto LABEL_317;
    if (!v138)
    {
LABEL_318:
      if (v139)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
      if (!v140)
        result = WTF::fastFree((WTF *)v135, v27);
    }
LABEL_322:
    if (v12)
    {
      v142 = v167;
      v6 = v167;
      result = v165;
      if (v12 != (WebCore::AXCoreObject *)v165)
        continue;
    }
    else
    {
      v142 = v167;
    }
    break;
  }
LABEL_333:
  v148 = *((_QWORD *)v142 + 1);
  if (__ldaxr((unsigned __int8 *)v148))
  {
    __clrex();
    goto LABEL_336;
  }
  if (__stxr(1u, (unsigned __int8 *)v148))
LABEL_336:
    result = MEMORY[0x19AEA534C](v148);
  v150 = *(_QWORD *)(v148 + 8);
  v151 = v150 - 1;
  *(_QWORD *)(v148 + 8) = v150 - 1;
  if (v150 == 1)
  {
    v162 = *(_QWORD *)(v148 + 16);
    v152 = *(_QWORD *)(v148 + 24);
    *(_QWORD *)(v148 + 24) = 0;
    v153 = v162 != 0;
  }
  else
  {
    v152 = 0;
    v153 = 1;
  }
  v154 = __ldxr((unsigned __int8 *)v148);
  if (v154 != 1)
  {
    __clrex();
LABEL_344:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v148);
    if (!v151)
      goto LABEL_345;
    goto LABEL_349;
  }
  if (__stlxr(0, (unsigned __int8 *)v148))
    goto LABEL_344;
  if (!v151)
  {
LABEL_345:
    if (v152)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
    if (!v153)
      result = WTF::fastFree((WTF *)v148, v27);
  }
LABEL_349:
  if (!v12)
    return result;
  v155 = *((_QWORD *)v12 + 1);
  if (__ldaxr((unsigned __int8 *)v155))
  {
    __clrex();
    goto LABEL_353;
  }
  if (__stxr(1u, (unsigned __int8 *)v155))
LABEL_353:
    result = MEMORY[0x19AEA534C](v155);
  v157 = *(_QWORD *)(v155 + 8);
  v158 = v157 - 1;
  *(_QWORD *)(v155 + 8) = v157 - 1;
  if (v157 == 1)
  {
    v163 = *(_QWORD *)(v155 + 16);
    v159 = *(_QWORD *)(v155 + 24);
    *(_QWORD *)(v155 + 24) = 0;
    v160 = v163 != 0;
  }
  else
  {
    v159 = 0;
    v160 = 1;
  }
  v161 = __ldxr((unsigned __int8 *)v155);
  if (v161 != 1)
  {
    __clrex();
LABEL_361:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v155);
    if (!v158)
      goto LABEL_362;
    return result;
  }
  if (__stlxr(0, (unsigned __int8 *)v155))
    goto LABEL_361;
  if (!v158)
  {
LABEL_362:
    if (v159)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
    if (!v160)
      return WTF::fastFree((WTF *)v155, v27);
  }
  return result;
}

uint64_t WebCore::appendChildrenToArray(_QWORD *a1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::AccessibilityObject *v55;
  WebCore::AccessibilityObject *SiblingUnignored;
  uint64_t v57;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  int v90;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  int v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  int v114;
  unsigned int v115;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 176))(*a1)
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 184))(*a1))
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)*a1 + 208))(&v113);
    goto LABEL_19;
  }
  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 1896))(*a1, 1);
  v10 = *(unsigned int *)(v9 + 12);
  v113 = 0;
  v114 = 0;
  v115 = v10;
  if ((_DWORD)v10)
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
LABEL_230:
      JUMPOUT(0x1955EB3ECLL);
    }
    v11 = v9;
    v12 = WTF::fastMalloc((WTF *)(8 * v10));
    v114 = v10;
    v113 = (_QWORD *)v12;
    v13 = *(unsigned int *)(v11 + 12);
    if ((_DWORD)v13)
    {
      v14 = (_QWORD *)v12;
      v15 = *(uint64_t **)v11;
      v16 = 8 * v13;
      while (1)
      {
        v17 = *v15;
        if (!*v15)
          goto LABEL_18;
        v18 = *(_QWORD *)(v17 + 8);
        if (__ldaxr((unsigned __int8 *)v18))
          break;
        if (__stxr(1u, (unsigned __int8 *)v18))
          goto LABEL_12;
LABEL_13:
        ++*(_QWORD *)(v18 + 8);
        v20 = __ldxr((unsigned __int8 *)v18);
        if (v20 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v18))
            goto LABEL_18;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_18:
        *v14++ = v17;
        ++v15;
        v16 -= 8;
        if (!v16)
          goto LABEL_19;
      }
      __clrex();
LABEL_12:
      MEMORY[0x19AEA534C](v18);
      goto LABEL_13;
    }
  }
LABEL_19:
  v21 = v115;
  if (a2)
    v22 = 0;
  else
    v22 = v115;
  if (!*a3)
    goto LABEL_157;
  v110 = v115;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 856))(*a3))
    goto LABEL_148;
  v23 = *a3;
  v24 = *a1;
  if (!*a1)
    goto LABEL_149;
  do
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 1232))(v23);
    if (!v23)
      goto LABEL_148;
  }
  while (v23 != v24);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 1232))(*a3);
  if (v25)
  {
    v26 = (_QWORD *)v25;
    v27 = *(_QWORD *)(v25 + 8);
    if (__ldaxr((unsigned __int8 *)v27))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v27))
    {
LABEL_32:
      ++*(_QWORD *)(v27 + 8);
      v29 = __ldxr((unsigned __int8 *)v27);
      if (v29 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
      while (1)
      {
LABEL_37:
        v30 = v26;
        if (!(*(unsigned int (**)(_QWORD *))(*v26 + 856))(v26) || v26 == (_QWORD *)*a1)
          goto LABEL_96;
        v31 = v26[1];
        if (__ldaxr((unsigned __int8 *)v31))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v31))
        {
          goto LABEL_43;
        }
        MEMORY[0x19AEA534C](v31);
LABEL_43:
        ++*(_QWORD *)(v31 + 8);
        v33 = __ldxr((unsigned __int8 *)v31);
        if (v33 != 1)
        {
          __clrex();
LABEL_47:
          WTF::Lock::unlockSlow((WTF::Lock *)v31);
          goto LABEL_48;
        }
        if (__stlxr(0, (unsigned __int8 *)v31))
          goto LABEL_47;
LABEL_48:
        v34 = *a3;
        *a3 = (uint64_t)v30;
        if (!v34)
          goto LABEL_65;
        v35 = *(_QWORD *)(v34 + 8);
        if (__ldaxr((unsigned __int8 *)v35))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v35))
        {
          goto LABEL_53;
        }
        MEMORY[0x19AEA534C](v35);
LABEL_53:
        v37 = *(_QWORD *)(v35 + 8);
        v38 = v37 - 1;
        *(_QWORD *)(v35 + 8) = v37 - 1;
        if (v37 == 1)
        {
          v54 = *(_QWORD *)(v35 + 16);
          v39 = *(_QWORD *)(v35 + 24);
          *(_QWORD *)(v35 + 24) = 0;
          v40 = v54 != 0;
        }
        else
        {
          v39 = 0;
          v40 = 1;
        }
        v41 = __ldxr((unsigned __int8 *)v35);
        if (v41 != 1)
        {
          __clrex();
LABEL_60:
          WTF::Lock::unlockSlow((WTF::Lock *)v35);
          if (v38)
            goto LABEL_65;
          goto LABEL_61;
        }
        if (__stlxr(0, (unsigned __int8 *)v35))
          goto LABEL_60;
        if (v38)
          goto LABEL_65;
LABEL_61:
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        if (!v40)
          WTF::fastFree((WTF *)v35, v8);
LABEL_65:
        v42 = (*(uint64_t (**)(_QWORD *))(*v30 + 1232))(v30);
        v26 = (_QWORD *)v42;
        if (!v42)
          goto LABEL_75;
        v43 = *(_QWORD *)(v42 + 8);
        if (__ldaxr((unsigned __int8 *)v43))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v43))
        {
          goto LABEL_70;
        }
        MEMORY[0x19AEA534C](v43);
LABEL_70:
        ++*(_QWORD *)(v43 + 8);
        v45 = __ldxr((unsigned __int8 *)v43);
        if (v45 != 1)
        {
          __clrex();
LABEL_74:
          WTF::Lock::unlockSlow((WTF::Lock *)v43);
          goto LABEL_75;
        }
        if (__stlxr(0, (unsigned __int8 *)v43))
          goto LABEL_74;
LABEL_75:
        v46 = v30[1];
        if (__ldaxr((unsigned __int8 *)v46))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v46))
        {
          goto LABEL_79;
        }
        MEMORY[0x19AEA534C](v46);
LABEL_79:
        v48 = *(_QWORD *)(v46 + 8);
        v49 = v48 - 1;
        *(_QWORD *)(v46 + 8) = v48 - 1;
        if (v48 == 1)
        {
          v53 = *(_QWORD *)(v46 + 16);
          v50 = *(_QWORD *)(v46 + 24);
          *(_QWORD *)(v46 + 24) = 0;
          v51 = v53 != 0;
        }
        else
        {
          v50 = 0;
          v51 = 1;
        }
        v52 = __ldxr((unsigned __int8 *)v46);
        if (v52 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v46))
          {
            if (!v49)
              goto LABEL_87;
            goto LABEL_91;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v46);
        if (!v49)
        {
LABEL_87:
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
          if (!v51)
            WTF::fastFree((WTF *)v46, v8);
        }
LABEL_91:
        if (!v26)
          goto LABEL_95;
      }
    }
    MEMORY[0x19AEA534C](v27);
    goto LABEL_32;
  }
LABEL_95:
  v30 = 0;
LABEL_96:
  v55 = (WebCore::AccessibilityObject *)*a3;
  if (!*a3)
  {
    *a3 = 0;
    goto LABEL_131;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v55 + 48))(*a3))
  {
    v55 = 0;
    goto LABEL_114;
  }
  if (!(*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v55 + 856))(v55)
    || (!a2
      ? (SiblingUnignored = WebCore::AccessibilityObject::nextSiblingUnignored(v55, -1))
      : (SiblingUnignored = WebCore::AccessibilityObject::previousSiblingUnignored(v55, -1)),
        (v55 = SiblingUnignored) != 0))
  {
    v57 = *((_QWORD *)v55 + 1);
    if (__ldaxr((unsigned __int8 *)v57))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v57))
    {
      goto LABEL_109;
    }
    MEMORY[0x19AEA534C](v57);
LABEL_109:
    ++*(_QWORD *)(v57 + 8);
    v59 = __ldxr((unsigned __int8 *)v57);
    if (v59 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v57))
        goto LABEL_114;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v57);
  }
LABEL_114:
  v60 = *a3;
  *a3 = (uint64_t)v55;
  if (!v60)
    goto LABEL_131;
  v61 = *(_QWORD *)(v60 + 8);
  if (__ldaxr((unsigned __int8 *)v61))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v61))
  {
    goto LABEL_119;
  }
  MEMORY[0x19AEA534C](v61);
LABEL_119:
  v63 = *(_QWORD *)(v61 + 8);
  v64 = v63 - 1;
  *(_QWORD *)(v61 + 8) = v63 - 1;
  if (v63 == 1)
  {
    v109 = *(_QWORD *)(v61 + 16);
    v65 = *(_QWORD *)(v61 + 24);
    *(_QWORD *)(v61 + 24) = 0;
    v66 = v109 != 0;
  }
  else
  {
    v65 = 0;
    v66 = 1;
  }
  v67 = __ldxr((unsigned __int8 *)v61);
  if (v67 != 1)
  {
    __clrex();
    goto LABEL_125;
  }
  if (__stlxr(0, (unsigned __int8 *)v61))
LABEL_125:
    WTF::Lock::unlockSlow((WTF::Lock *)v61);
  if (!v64)
  {
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
    if (!v66)
      WTF::fastFree((WTF *)v61, v8);
  }
LABEL_131:
  if (v30)
  {
    v68 = v30[1];
    if (__ldaxr((unsigned __int8 *)v68))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v68))
    {
      goto LABEL_136;
    }
    MEMORY[0x19AEA534C](v68);
LABEL_136:
    v70 = *(_QWORD *)(v68 + 8);
    v71 = v70 - 1;
    *(_QWORD *)(v68 + 8) = v70 - 1;
    if (v70 == 1)
    {
      v108 = *(_QWORD *)(v68 + 16);
      v72 = *(_QWORD *)(v68 + 24);
      *(_QWORD *)(v68 + 24) = 0;
      v73 = v108 != 0;
    }
    else
    {
      v72 = 0;
      v73 = 1;
    }
    v74 = __ldxr((unsigned __int8 *)v68);
    if (v74 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v68))
      {
LABEL_143:
        if (!v71)
        {
          if (v72)
            (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
          if (!v73)
            WTF::fastFree((WTF *)v68, v8);
        }
        goto LABEL_148;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v68);
    goto LABEL_143;
  }
LABEL_148:
  v23 = *a3;
LABEL_149:
  if (v23)
  {
    v75 = v115;
    if (v115)
    {
      v76 = v113;
      v77 = a2;
      while (*v76 != v23)
      {
        ++v77;
        ++v76;
        if (!--v75)
          goto LABEL_156;
      }
      v22 = v77;
    }
  }
LABEL_156:
  v21 = v110;
LABEL_157:
  if ((a2 & 1) == 0)
  {
    if (!v22)
      return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v8);
    v93 = 0;
    while (1)
    {
      if (v93 >= v115)
      {
        __break(0xC471u);
        goto LABEL_230;
      }
      v94 = v113[v93];
      if (!v94)
        goto LABEL_204;
      v95 = *(_QWORD *)(v94 + 8);
      if (__ldaxr((unsigned __int8 *)v95))
        break;
      if (__stxr(1u, (unsigned __int8 *)v95))
        goto LABEL_198;
LABEL_199:
      ++*(_QWORD *)(v95 + 8);
      v97 = __ldxr((unsigned __int8 *)v95);
      if (v97 != 1)
      {
        __clrex();
LABEL_203:
        WTF::Lock::unlockSlow((WTF::Lock *)v95);
        goto LABEL_204;
      }
      if (__stlxr(0, (unsigned __int8 *)v95))
        goto LABEL_203;
LABEL_204:
      v111 = v94;
      WebCore::appendAccessibilityObject(&v111, a4);
      v98 = v111;
      v111 = 0;
      if (!v98)
        goto LABEL_221;
      v99 = *(_QWORD *)(v98 + 8);
      if (__ldaxr((unsigned __int8 *)v99))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v99))
      {
        goto LABEL_209;
      }
      MEMORY[0x19AEA534C](v99);
LABEL_209:
      v101 = *(_QWORD *)(v99 + 8);
      v102 = v101 - 1;
      *(_QWORD *)(v99 + 8) = v101 - 1;
      if (v101 == 1)
      {
        v106 = *(_QWORD *)(v99 + 16);
        v103 = *(_QWORD *)(v99 + 24);
        *(_QWORD *)(v99 + 24) = 0;
        v104 = v106 != 0;
      }
      else
      {
        v103 = 0;
        v104 = 1;
      }
      v105 = __ldxr((unsigned __int8 *)v99);
      if (v105 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v99))
        {
          if (!v102)
            goto LABEL_217;
          goto LABEL_221;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v99);
      if (!v102)
      {
LABEL_217:
        if (v103)
          (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
        if (!v104)
          WTF::fastFree((WTF *)v99, v8);
      }
LABEL_221:
      if (v22 == ++v93)
        return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v8);
    }
    __clrex();
LABEL_198:
    MEMORY[0x19AEA534C](v95);
    goto LABEL_199;
  }
  if (v22 < v21)
  {
    v78 = v21 - 1;
    while (1)
    {
      if (v78 >= v115)
      {
        __break(0xC471u);
        JUMPOUT(0x1955EB3F4);
      }
      v79 = v113[v78];
      if (!v79)
        goto LABEL_171;
      v80 = *(_QWORD *)(v79 + 8);
      if (__ldaxr((unsigned __int8 *)v80))
        break;
      if (__stxr(1u, (unsigned __int8 *)v80))
        goto LABEL_165;
LABEL_166:
      ++*(_QWORD *)(v80 + 8);
      v82 = __ldxr((unsigned __int8 *)v80);
      if (v82 != 1)
      {
        __clrex();
LABEL_170:
        WTF::Lock::unlockSlow((WTF::Lock *)v80);
        goto LABEL_171;
      }
      if (__stlxr(0, (unsigned __int8 *)v80))
        goto LABEL_170;
LABEL_171:
      v112 = v79;
      WebCore::appendAccessibilityObject(&v112, a4);
      v83 = v112;
      v112 = 0;
      if (!v83)
        goto LABEL_188;
      v84 = *(_QWORD *)(v83 + 8);
      if (__ldaxr((unsigned __int8 *)v84))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v84))
      {
        goto LABEL_176;
      }
      MEMORY[0x19AEA534C](v84);
LABEL_176:
      v86 = *(_QWORD *)(v84 + 8);
      v87 = v86 - 1;
      *(_QWORD *)(v84 + 8) = v86 - 1;
      if (v86 == 1)
      {
        v92 = *(_QWORD *)(v84 + 16);
        v88 = *(_QWORD *)(v84 + 24);
        *(_QWORD *)(v84 + 24) = 0;
        v89 = v92 != 0;
      }
      else
      {
        v88 = 0;
        v89 = 1;
      }
      v90 = __ldxr((unsigned __int8 *)v84);
      if (v90 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v84))
        {
          if (!v87)
            goto LABEL_184;
          goto LABEL_188;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v84);
      if (!v87)
      {
LABEL_184:
        if (v88)
          (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
        if (!v89)
          WTF::fastFree((WTF *)v84, v8);
      }
LABEL_188:
      if (v78-- <= v22)
        return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v8);
    }
    __clrex();
LABEL_165:
    MEMORY[0x19AEA534C](v80);
    goto LABEL_166;
  }
  return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v8);
}

uint64_t WebCore::nodeID(WebCore *this, WebCore::AXObjectCache *a2, WebCore::Node *a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v19;

  if (!a2)
    return 0;
  v3 = WebCore::AXObjectCache::getOrCreate((uint64_t)this, (uint64_t)a2, 0);
  if (!v3)
    return 0;
  v5 = v3;
  v6 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_7:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v11 = v5 + 8;
  v10 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_16:
  v13 = *(_QWORD *)(v10 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v10 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v19 = *(_QWORD *)(v10 + 16);
    v15 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v16 = v19 != 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v17 = __ldxr((unsigned __int8 *)v10);
  if (v17 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v10))
    {
      if (v14)
        return v9;
      goto LABEL_24;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
  if (v14)
    return v9;
LABEL_24:
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!v16)
    WTF::fastFree((WTF *)v10, v4);
  return v9;
}

WebCore::TextMarkerData *WebCore::TextMarkerData::TextMarkerData(WebCore::TextMarkerData *this, WebCore::AXObjectCache *a2, CharacterOffset *a3, char a4)
{
  void *v7;
  WebCore::Node *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  __int16 v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  WebCore::Node *v19;
  int v20;
  char v21;
  char v22;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_DWORD *)this = *((_QWORD *)a2 + 2);
  *((_DWORD *)this + 1) = WebCore::nodeID(a2, (WebCore::AXObjectCache *)a3->var0.var0, (WebCore::Node *)a3);
  WebCore::AXObjectCache::visiblePositionFromCharacterOffset(a3, (uint64_t)&v19);
  v8 = v19;
  if (v19)
  {
    v9 = *((_DWORD *)v19 + 6);
    v10 = v9 + 2;
    *((_DWORD *)v19 + 6) = v9 + 2;
    v11 = v20;
    if ((v21 & 8) == 0)
    {
      v12 = v21 & 7;
      if (v12 == 4 || v12 == 2)
      {
        *((_DWORD *)v8 + 6) = v9 + 4;
        v14 = *((_WORD *)v8 + 14);
        if ((v14 & 1) != 0)
        {
          v18 = *((_QWORD *)v8 + 10);
          if (v18)
            v11 = *(_DWORD *)(v18 + 4);
          else
            v11 = 0;
        }
        else if ((v14 & 4) != 0 && (v15 = *((_QWORD *)v8 + 10)) != 0)
        {
          v11 = 0;
          do
          {
            ++v11;
            v15 = *(_QWORD *)(v15 + 56);
          }
          while (v15);
        }
        else
        {
          v11 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v8 + 208))(v8) ^ 1;
          v10 = *((_DWORD *)v8 + 6) - 2;
        }
        if (v10)
        {
          *((_DWORD *)v8 + 6) = v10;
        }
        else if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v8, v7);
        }
      }
    }
    v16 = v11 & ~(v11 >> 31);
  }
  else
  {
    v16 = 0;
  }
  *((_DWORD *)this + 2) = v16;
  *((_DWORD *)this + 3) = 0;
  *((_BYTE *)this + 16) = v22;
  *((_DWORD *)this + 5) = a3->var1 & ~(a3->var1 >> 31);
  *((_DWORD *)this + 6) = a3->var2 & ~(a3->var2 >> 31);
  *((_BYTE *)this + 28) = a4;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v7);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v7);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  return this;
}

WebCore::AXTextMarker *WebCore::AXTextMarker::AXTextMarker(WebCore::AXTextMarker *this, VisiblePosition *a2)
{
  Node *var0;
  int v5;
  unsigned __int8 v6;
  uint64_t v8;
  BOOL v9;
  WebCore::AXObjectCache **v10;
  unsigned int *v11;
  WebCore::AXObjectCache *v12;
  uint64_t v13[4];
  char v14;
  WebCore::AXObjectCache *v15;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  var0 = a2->var0.var0.var0;
  if (a2->var0.var0.var0)
  {
    v5 = *((_DWORD *)var0 + 6);
    *((_DWORD *)var0 + 6) = v5 + 2;
    if (v5)
    {
      *((_DWORD *)var0 + 6) = v5;
    }
    else if ((*((_WORD *)var0 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)var0, a2);
    }
    v6 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
    if ((v6 & 1) != 0)
    {
      v8 = WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)var0 + 5) + 8));
      *(_DWORD *)(v8 + 24) += 2;
      v13[0] = v8;
      if (*(_QWORD *)(v8 + 1944))
        v9 = *(_BYTE *)(v8 + 3405) == 0;
      else
        v9 = 0;
      if (v9)
      {
        v10 = (WebCore::AXObjectCache **)v8;
        v11 = *(unsigned int **)(v8 + 1488);
        if (v11)
        {
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v13);
        }
        else
        {
          v12 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
          v15 = WebCore::AXObjectCache::AXObjectCache(v12, (WebCore::Document *)v10);
          std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v10 + 186, &v15);
          std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v15);
          WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
          v11 = (unsigned int *)v10[186];
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v13);
          if (!v11)
            return this;
        }
        WebCore::AXObjectCache::textMarkerDataForVisiblePosition(v11, a2, (uint64_t)v13);
        if (v14)
        {
          *(_OWORD *)this = *(_OWORD *)v13;
          *(_OWORD *)((char *)this + 13) = *(_OWORD *)((char *)&v13[1] + 5);
        }
      }
      else
      {
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v13);
      }
    }
  }
  return this;
}

uint64_t WebCore::AXTextMarker::boundaryPoint@<X0>(uint64_t this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  WebCore::AccessibilityObject *v40;
  int v41;
  unint64_t v42;
  void *v43;
  int v44;
  WebCore::AccessibilityObject *v45;
  unint64_t v46;
  uint64_t v47;
  int i;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  WebCore::AccessibilityObject *v53;
  uint64_t v54;
  int var3;
  CharacterOffset v56;

  if (*(_BYTE *)(this + 28))
    goto LABEL_96;
  v4 = this;
  v5 = *(unsigned int *)this;
  if ((unint64_t)(v5 - 1) > 0xFFFFFFFFFFFFFFFDLL || !*(_DWORD *)(this + 4))
    goto LABEL_96;
  if ((byte_1ECE82168 & 1) == 0)
  {
    qword_1ECE82160 = 0;
    byte_1ECE82168 = 1;
    goto LABEL_96;
  }
  if (!qword_1ECE82160)
    goto LABEL_96;
  v6 = *(_DWORD *)(qword_1ECE82160 - 8);
  v7 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(qword_1ECE82160 + 16 * v10);
  if (v11 != v5)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(_QWORD *)(qword_1ECE82160 + 16 * v10);
      ++v12;
      if (v11 == v5)
        goto LABEL_10;
    }
    goto LABEL_96;
  }
LABEL_10:
  v13 = *(_QWORD *)(qword_1ECE82160 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_96:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return this;
  }
  do
    v14 = __ldaxr((unsigned int *)v13);
  while (__stlxr(v14 + 1, (unsigned int *)v13));
  v15 = *(_QWORD *)(v13 + 8);
  if (!v15)
    goto LABEL_21;
  v16 = *(_QWORD *)(v15 + 56);
  if (!v16)
    goto LABEL_21;
  v17 = *(unsigned int *)(this + 4);
  v18 = *(_DWORD *)(v16 - 8);
  v19 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
  v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
  v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v22 = v18 & ((v21 >> 31) ^ v21);
  v23 = *(_QWORD *)(v16 + 16 * v22);
  if (v23 != v17)
  {
    v24 = 1;
    while (v23)
    {
      v22 = ((_DWORD)v22 + v24) & v18;
      v23 = *(_QWORD *)(v16 + 16 * v22);
      ++v24;
      if (v23 == v17)
        goto LABEL_18;
    }
    goto LABEL_21;
  }
LABEL_18:
  v25 = *(_QWORD **)(v16 + 16 * v22 + 8);
  if (!v25)
  {
LABEL_21:
    v53 = 0;
    v54 = 0;
    var3 = 0;
    goto LABEL_52;
  }
  v26 = v25[1];
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_24:
  ++*(_QWORD *)(v26 + 8);
  v28 = __ldxr((unsigned __int8 *)v26);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
  this = (*(uint64_t (**)(_QWORD *))(*v25 + 840))(v25);
  v29 = this;
  v30 = *(_QWORD *)(v4 + 20);
  if (this)
    *(_DWORD *)(this + 24) += 2;
  v56.var0.var0 = (Node *)this;
  *(_QWORD *)&v56.var1 = v30;
  v56.var3 = 0;
  if (*(_BYTE *)(v4 + 16))
  {
    v53 = (WebCore::AccessibilityObject *)this;
    v54 = *(_QWORD *)&v56.var1;
    var3 = v56.var3;
  }
  else
  {
    this = (uint64_t)WebCore::AXObjectCache::previousCharacterOffset(*(unsigned int **)(v13 + 8), &v56, 0, (uint64_t)&v53);
    if (v29)
    {
      if (*(_DWORD *)(v29 + 24) == 2)
      {
        if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v29, a2);
      }
      else
      {
        *(_DWORD *)(v29 + 24) -= 2;
      }
    }
  }
  v31 = v25[1];
  if (__ldaxr((unsigned __int8 *)v31))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v31))
  {
    goto LABEL_40;
  }
  this = MEMORY[0x19AEA534C](v31);
LABEL_40:
  v33 = *(_QWORD *)(v31 + 8);
  v34 = v33 - 1;
  *(_QWORD *)(v31 + 8) = v33 - 1;
  if (v33 == 1)
  {
    v52 = *(_QWORD *)(v31 + 16);
    v35 = *(_QWORD *)(v31 + 24);
    *(_QWORD *)(v31 + 24) = 0;
    v36 = v52 != 0;
  }
  else
  {
    v35 = 0;
    v36 = 1;
  }
  v37 = __ldxr((unsigned __int8 *)v31);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_46;
  }
  if (__stlxr(0, (unsigned __int8 *)v31))
LABEL_46:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v31);
  if (!v34)
  {
    if (v35)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    if (!v36)
      this = WTF::fastFree((WTF *)v31, a2);
  }
  do
  {
LABEL_52:
    v38 = __ldaxr((unsigned int *)v13);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, (unsigned int *)v13));
  if (!v39)
  {
    atomic_store(1u, (unsigned int *)v13);
    this = WTF::fastFree((WTF *)v13, a2);
  }
  v40 = v53;
  if (!v53)
    goto LABEL_96;
  v41 = v54;
  v42 = HIDWORD(v54);
  *((_DWORD *)v53 + 6) += 2;
  this = WebCore::AccessibilityObject::replacedNodeNeedsCharacter((uint64_t)v40, (WebCore::Node *)a2);
  if ((this & 1) == 0)
  {
    v44 = v42 + v41;
    if ((*((_WORD *)v40 + 14) & 0x10) != 0)
    {
      v45 = v40;
      if (*(_QWORD *)(*((_QWORD *)v40 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
        goto LABEL_59;
    }
    else
    {
      v45 = v40;
    }
LABEL_76:
    v51 = *((_DWORD *)v45 + 6);
    *((_DWORD *)v45 + 6) = v51 + 2;
    *(_QWORD *)a3 = v45;
    *(_DWORD *)(a3 + 8) = v44;
    *(_BYTE *)(a3 + 16) = 1;
    if (v51)
    {
      *((_DWORD *)v45 + 6) = v51;
    }
    else if ((*((_WORD *)v45 + 15) & 0x400) == 0)
    {
      this = (uint64_t)WebCore::Node::removedLastRef(v45, v43);
    }
    goto LABEL_79;
  }
LABEL_59:
  WebCore::AXObjectCache::rangeForNodeContents(v40, (WebCore::Node *)v43, (uint64_t)&v56);
  v46 = WebCore::characterCount((int *)&v56, 0);
  v47 = *((_QWORD *)v40 + 6);
  for (i = 0; ; ++i)
  {
    v49 = v47 & 0xFFFFFFFFFFFFLL;
    if (!v49)
      break;
    v47 = *(_QWORD *)(v49 + 48);
  }
  if (v46 >= v42)
    v44 = i;
  else
    v44 = i + 1;
  v45 = (WebCore::AccessibilityObject *)*((_QWORD *)v40 + 4);
  v50 = *(_QWORD *)&v56.var3;
  *(_QWORD *)&v56.var3 = 0;
  if (v50)
  {
    if (*(_DWORD *)(v50 + 24) == 2)
    {
      if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v50, v43);
    }
    else
    {
      *(_DWORD *)(v50 + 24) -= 2;
    }
  }
  this = (uint64_t)v56.var0.var0;
  v56.var0.var0 = 0;
  if (this)
  {
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v43);
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
  }
  if (v45)
    *((_DWORD *)v45 + 6) += 2;
  if (*((_DWORD *)v40 + 6) == 2)
  {
    if ((*((_WORD *)v40 + 15) & 0x400) == 0)
      this = (uint64_t)WebCore::Node::removedLastRef(v40, v43);
  }
  else
  {
    *((_DWORD *)v40 + 6) -= 2;
  }
  if (v45)
    goto LABEL_76;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
LABEL_79:
  if (*((_DWORD *)v40 + 6) == 2)
  {
    if ((*((_WORD *)v40 + 15) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef(v40, v43);
  }
  else
  {
    *((_DWORD *)v40 + 6) -= 2;
  }
  return this;
}

_OWORD *WebCore::AXTextMarkerRange::AXTextMarkerRange(_OWORD *result, const WebCore::SimpleRange *a2)
{
  _OWORD *v2;
  unsigned __int8 v3;
  _OWORD *v4;
  uint64_t v5;
  BOOL v6;
  Node *var0;
  WebCore::AXObjectCache *v8;
  const WebCore::SimpleRange *v9;
  WebCore::AXObjectCache *v10;
  void *v11;
  unsigned __int8 v12;
  __int128 v13;
  void *v14;
  Node *v15;
  unsigned __int8 v16;
  __int128 v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  WebCore::AXObjectCache **v22;
  WebCore::AXObjectCache *v23;
  WebCore::AXObjectCache **v24;
  WebCore::AXObjectCache *v25;
  WebCore::AXObjectCache *v26;
  WebCore::AXObjectCache *v27;
  CharacterOffset v29;
  _OWORD v30[2];
  uint64_t v31[4];
  WebCore::AXObjectCache *v32;

  result[2] = 0u;
  v2 = result + 2;
  result[3] = 0u;
  *result = 0u;
  result[1] = 0u;
  if (!*((_BYTE *)a2 + 32))
    return result;
  v3 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v3 & 1) == 0)
    return result;
  v4 = result;
  v5 = WebCore::Document::topDocument(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8));
  *(_DWORD *)(v5 + 24) += 2;
  v31[0] = v5;
  if (*(_QWORD *)(v5 + 1944))
    v6 = *(_BYTE *)(v5 + 3405) == 0;
  else
    v6 = 0;
  if (!v6)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v31);
    return v4;
  }
  var0 = (Node *)v5;
  v8 = *(WebCore::AXObjectCache **)(v5 + 1488);
  if (v8)
  {
    result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v31);
    v9 = a2;
  }
  else
  {
    v10 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    *(_QWORD *)&v30[0] = WebCore::AXObjectCache::AXObjectCache(v10, (WebCore::Document *)var0);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)var0 + 186, (WebCore::AXObjectCache **)v30);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100]((WebCore::AXObjectCache **)v30);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v8 = (WebCore::AXObjectCache *)*((_QWORD *)var0 + 186);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v31);
    result = v4;
    v9 = a2;
    if (!v8)
      return result;
  }
  if (!*((_BYTE *)v9 + 32))
    goto LABEL_29;
  result = WebCore::AXObjectCache::startOrEndCharacterOffsetForRange(v8, a2, 1, 0, (uint64_t)&v29);
  memset(v30, 0, sizeof(v30));
  var0 = v29.var0.var0;
  if (!v29.var0.var0)
  {
    *v4 = 0uLL;
    v4[1] = 0uLL;
    goto LABEL_18;
  }
  result = *(_OWORD **)(*((_QWORD *)v29.var0.var0 + 5) + 8);
  v12 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v12 & 1) != 0)
    goto LABEL_30;
  while (1)
  {
    v13 = v30[1];
    *v4 = v30[0];
    v4[1] = v13;
    if (*((_DWORD *)var0 + 6) == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)var0, v11);
    }
    else
    {
      *((_DWORD *)var0 + 6) -= 2;
    }
LABEL_18:
    if (*((_BYTE *)a2 + 32))
      break;
LABEL_29:
    __break(1u);
LABEL_30:
    v18 = WebCore::Document::topDocument((uint64_t)result);
    *(_DWORD *)(v18 + 24) += 2;
    v31[0] = v18;
    if (*(_QWORD *)(v18 + 1944))
      v19 = *(_BYTE *)(v18 + 3405) == 0;
    else
      v19 = 0;
    if (v19)
    {
      v22 = (WebCore::AXObjectCache **)v18;
      v23 = *(WebCore::AXObjectCache **)(v18 + 1488);
      if (v23)
      {
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v31);
        goto LABEL_45;
      }
      v26 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
      v32 = WebCore::AXObjectCache::AXObjectCache(v26, (WebCore::Document *)v22);
      std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v22 + 186, &v32);
      std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v32);
      WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
      v23 = v22[186];
      result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v31);
      if (v23)
      {
LABEL_45:
        result = WebCore::AXObjectCache::textMarkerDataForCharacterOffset(v23, &v29, (WebCore::TextMarkerData *)v31);
        v30[0] = *(_OWORD *)v31;
        *(_OWORD *)((char *)v30 + 13) = *(_OWORD *)((char *)&v31[1] + 5);
      }
    }
    else
    {
      result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v31);
    }
  }
  WebCore::AXObjectCache::startOrEndCharacterOffsetForRange(v8, a2, 0, 0, (uint64_t)&v29);
  memset(v30, 0, sizeof(v30));
  v15 = v29.var0.var0;
  if (v29.var0.var0)
  {
    v16 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
    if ((v16 & 1) != 0)
    {
      v20 = WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)v29.var0.var0 + 5) + 8));
      *(_DWORD *)(v20 + 24) += 2;
      v31[0] = v20;
      if (*(_QWORD *)(v20 + 1944))
        v21 = *(_BYTE *)(v20 + 3405) == 0;
      else
        v21 = 0;
      if (v21)
      {
        v24 = (WebCore::AXObjectCache **)v20;
        v25 = *(WebCore::AXObjectCache **)(v20 + 1488);
        if (v25)
        {
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v31);
        }
        else
        {
          v27 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
          v32 = WebCore::AXObjectCache::AXObjectCache(v27, (WebCore::Document *)v24);
          std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v24 + 186, &v32);
          std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v32);
          WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
          v25 = v24[186];
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v31);
          if (!v25)
            goto LABEL_21;
        }
        WebCore::AXObjectCache::textMarkerDataForCharacterOffset(v25, &v29, (WebCore::TextMarkerData *)v31);
        v30[0] = *(_OWORD *)v31;
        *(_OWORD *)((char *)v30 + 13) = *(_OWORD *)((char *)&v31[1] + 5);
        goto LABEL_21;
      }
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v31);
    }
LABEL_21:
    v17 = v30[1];
    *v2 = v30[0];
    v2[1] = v17;
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v14);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  else
  {
    *v2 = 0uLL;
    v2[1] = 0uLL;
  }
  return v4;
}

unsigned int *WebCore::AXTextMarkerRange::simpleRange@<X0>(WebCore::AXTextMarkerRange *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *result;
  void *v6;
  void *v7;
  WebCore::Node *v8;
  int v9;
  unsigned int v10;
  int v11;
  WebCore::Node *v12;
  int v13;
  char v14;
  WebCore::Node *v15;
  int v16;
  char v17;

  result = (unsigned int *)WebCore::AXTextMarker::boundaryPoint((uint64_t)this, a2, (uint64_t)&v15);
  if (!v17)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return result;
  }
  result = (unsigned int *)WebCore::AXTextMarker::boundaryPoint((uint64_t)this + 32, v6, (uint64_t)&v12);
  if (v14)
  {
    v8 = v15;
    *((_DWORD *)v15 + 6) += 2;
    v9 = v16;
    result = (unsigned int *)v12;
    v10 = *((_DWORD *)v12 + 6);
    *((_DWORD *)v12 + 6) = v10 + 2;
    v11 = v13;
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 16) = result;
    *(_DWORD *)(a3 + 24) = v11;
    *(_BYTE *)(a3 + 32) = 1;
    if (v10)
    {
      result[6] = v10;
    }
    else if ((*((_WORD *)result + 15) & 0x400) == 0)
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    v8 = v15;
    if (!v15)
      return result;
  }
  if (*((_DWORD *)v8 + 6) == 2)
  {
    if ((*((_WORD *)v8 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v8, v7);
  }
  else
  {
    *((_DWORD *)v8 + 6) -= 2;
  }
  return result;
}

void WebCore::AXCoreObject::cellScope(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::AXCoreObject::performDismissAction(WebCore::AXCoreObject *this)
{
  return 0;
}

void WebCore::AXImage::~AXImage(WebCore::AXImage *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::AccessibilityObject::isMediaObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AXRemoteFrame::~AXRemoteFrame(WebCore::AXRemoteFrame *this, void *a2)
{
  const void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (const void *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = off_1E337C0A8;
  v4 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  const void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  void *v8;

  v3 = (const void *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = off_1E337C0A8;
  v4 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v7, v8);
}

uint64_t WebCore::AccessibilityObject::isAccessibilityRenderObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AXRemoteFrame::isAXRemoteFrame(WebCore::AXRemoteFrame *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityObject::isLink(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isSecureField(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isNativeTextControl(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isAttachment(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isInputImage(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isControl(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isRadioInput(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isFieldset(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityMockObject::isMockObject(WebCore::AccessibilityMockObject *this)
{
  return 1;
}

CFTypeRef WebCore::AXRemoteFrame::remoteFramePlatformElement@<X0>(WebCore::AXRemoteFrame *this@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 31);
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::AccessibilityObject::isChecked(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityMockObject::isEnabled(WebCore::AccessibilityMockObject *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityObject::isFocused(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isIndeterminate(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMultiSelectable(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isOffScreen(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isPressed(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isRequired(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::supportsRequiredAttribute(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::hasBoldFont(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::hasItalicFont(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::hasPlainText(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::hasSameFont(WebCore::AccessibilityObject *this, const WebCore::AXCoreObject *a2)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::hasSameFontColor(WebCore::AccessibilityObject *this, const WebCore::AXCoreObject *a2)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::hasSameStyle(WebCore::AccessibilityObject *this, const WebCore::AXCoreObject *a2)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::hasUnderline(WebCore::AccessibilityObject *this)
{
  return 0;
}

double WebCore::AccessibilityObject::dateTimeValue(WebCore::AccessibilityObject *this)
{
  return 0.0;
}

uint64_t WebCore::AccessibilityObject::canSetFocusAttribute(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::canSetValueAttribute(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::canSetSelectedAttribute(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::node(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::renderer(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::headingLevel(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::valueDescription(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

float WebCore::AccessibilityObject::valueForRange(WebCore::AccessibilityObject *this)
{
  return 0.0;
}

float WebCore::AccessibilityObject::maxValueForRange(WebCore::AccessibilityObject *this)
{
  return 0.0;
}

float WebCore::AccessibilityObject::minValueForRange(WebCore::AccessibilityObject *this)
{
  return 0.0;
}

uint64_t WebCore::AccessibilityObject::layoutCount(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::supportsARIAOwns(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::internalLinkElement(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::radioButtonGroup(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::AccessibilityObject::supportsDropping(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::supportsDragging(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isGrabbed(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::determineDropEffects(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::AccessibilityObject::accessibilityHitTest()
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::inheritsPresentationalRole(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::title(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::AccessibilityObject::description(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::AccessibilityObject::stringValue(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::AccessibilityObject::textUnderElement(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::AccessibilityObject::text(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::AccessibilityObject::expandedTextValue(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::AccessibilityObject::supportsExpandedTextValue(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::actionElement(WebCore::AccessibilityObject *this)
{
  return 0;
}

double WebCore::AccessibilityObject::elementPath@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t WebCore::AccessibilityObject::supportsPath(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::selectedTextRange(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::insertionPointLineNumber(WebCore::AccessibilityObject *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::AccessibilityObject::url@<X0>(WTF::URL *a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  return WTF::URL::invalidate(a1);
}

void WebCore::AccessibilityObject::selectedText(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::AccessibilityObject::accessKey(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::AccessibilityObject::isWidget(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::widget(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::widgetForAttachmentView(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isPlugin(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::hierarchicalLevel(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::setValue(WebCore::AccessibilityObject *this, const WTF::String *a2)
{
  return 0;
}

unsigned int *WebCore::AccessibilityMockObject::detachFromParent(WebCore::AccessibilityMockObject *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

BOOL WebCore::AccessibilityMockObject::isDetachedFromParent(WebCore::AccessibilityMockObject *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 30);
  return !v1 || *(_QWORD *)(v1 + 8) == 0;
}

void WebCore::AccessibilityObject::visibleChildren(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebCore::AccessibilityObject::visiblePositionRange(_QWORD *a1@<X8>)
{
  a1[2] = 0;
  a1[3] = 0;
  *a1 = 0;
  a1[1] = 0;
  *((_BYTE *)a1 + 16) = 1;
  a1[4] = 0;
  a1[5] = 0;
  *((_BYTE *)a1 + 40) = 1;
}

double WebCore::AccessibilityObject::visiblePositionRangeForLine@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

void WebCore::AccessibilityObject::visiblePositionForIndex(_QWORD *a1@<X8>)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  *((_BYTE *)a1 + 16) = 1;
}

{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  *((_BYTE *)a1 + 16) = 1;
}

uint64_t WebCore::AccessibilityObject::indexForVisiblePosition(WebCore::AccessibilityObject *this, const VisiblePosition *a2)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::doAXRangeForLine(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::doAXRangeForIndex(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::doAXStringForRange(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::AccessibilityObject::doAXBoundsForRange()
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::doAXBoundsForRangeUsingCharacterOffset()
{
  return 0;
}

void WebCore::AccessibilityObject::liveRegionStatus(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::AccessibilityObject::liveRegionRelevant(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::AccessibilityObject::liveRegionAtomic(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isBusy(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::documentLinks(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::AccessibilityObject::isAccessibilityNodeObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isSearchField(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isHovered(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AXRemoteFrame::computeAccessibilityIsIgnored(WebCore::AXRemoteFrame *this)
{
  return 0;
}

float WebCore::AccessibilityObject::stepValueForRange(WebCore::AccessibilityObject *this)
{
  return 0.0;
}

uint64_t WebCore::AccessibilityObject::canvasHasFallbackContent(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::firstChild(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::lastChild(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::previousSibling(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::nextSibling(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::parentObjectIfExists(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isDescendantOfBarrenParent(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::observableObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::controlForLabelElement(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::ariaRoleAttribute(WebCore::AccessibilityObject *this)
{
  return 134;
}

uint64_t WebCore::AccessibilityObject::hasAttributesRequiredForInclusion(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::helpText(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::AccessibilityObject::ariaLabeledByAttribute(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::AccessibilityObject::ariaDescribedByAttribute(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::AXRemoteFrame::determineAccessibilityRole(WebCore::AXRemoteFrame *this)
{
  return 90;
}

uint64_t WebCore::AccessibilityObject::anchorElement(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::popoverTargetElement(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::AccessibilityObject::boundingBoxRect(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::toggleDetailsAncestor(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::canHaveChildren(WebCore::AccessibilityObject *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityObject::needsToUpdateChildren(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::selectedVisiblePositionRange(_QWORD *a1@<X8>)
{
  a1[2] = 0;
  a1[3] = 0;
  *a1 = 0;
  a1[1] = 0;
  *((_BYTE *)a1 + 16) = 1;
  a1[4] = 0;
  a1[5] = 0;
  *((_BYTE *)a1 + 40) = 1;
}

uint64_t WebCore::AccessibilityObject::boundsForVisiblePositionRange()
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::index(WebCore::AccessibilityObject *this, const VisiblePosition *a2)
{
  return 0xFFFFFFFFLL;
}

void WebCore::AccessibilityObject::secureFieldValue(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

float WebCore::AccessibilityObject::frameRect(WebCore::AccessibilityObject *this)
{
  return 0.0;
}

uint64_t WebCore::AccessibilityObject::isNonLayerSVGObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::getScrollableAreaIfScrollable(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::shouldIgnoreAttributeRole(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityMockObject::setParent(WebCore::AccessibilityMockObject *this, WebCore::AccessibilityObject *a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  if (a2)
  {
    result = *((_QWORD *)a2 + 4);
    if (result)
      goto LABEL_18;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v5 = (unsigned int *)*((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = result;
    if (!v5)
      goto LABEL_18;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
    result = *((_QWORD *)a2 + 4);
    if (result)
    {
LABEL_18:
      do
        v8 = __ldaxr((unsigned int *)result);
      while (__stlxr(v8 + 1, (unsigned int *)result));
    }
  }
  else
  {
    result = 0;
  }
  v9 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = result;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      return WTF::fastFree((WTF *)v9, a2);
    }
  }
  return result;
}

uint64_t *WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if (*a2)
    *(_DWORD *)(v3 + 24) += 2;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)(a1 + 16 * i) != -1)
      {
        v5 = *(_QWORD *)(a1 + 16 * i + 8);
        if (v5)
        {
          v6 = *(unsigned int *)(v5 - 4);
          if ((_DWORD)v6)
          {
            for (j = 0; j != v6; ++j)
            {
              if (*(unsigned __int8 *)(v5 + 32 * j) != 254)
              {
                v8 = v5 + 32 * j;
                v9 = *(WTF **)(v8 + 16);
                if (v9)
                {
                  do
                  {
                    v10 = (WTF *)*((_QWORD *)v9 + 2);
                    WTF::fastFree(v9, a2);
                    v9 = v10;
                  }
                  while (v10);
                }
                v11 = *(_QWORD *)(v8 + 8);
                if (v11)
                  WTF::fastFree((WTF *)(v11 - 16), a2);
              }
            }
          }
          WTF::fastFree((WTF *)(v5 - 16), a2);
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (uint64_t *)(a1 + 16 * i);
      v6 = *v5;
      if (*v5 != -1)
      {
        v7 = (WTF::StringImpl *)v5[1];
        v5[1] = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
          {
            WTF::StringImpl::destroy(v7, a2);
            v6 = *v5;
          }
          else
          {
            *(_DWORD *)v7 -= 2;
          }
        }
        *v5 = 0;
        if (v6)
        {
          do
          {
            v8 = __ldaxr((unsigned int *)v6);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, (unsigned int *)v6));
          if (!v9)
          {
            atomic_store(1u, (unsigned int *)v6);
            v10 = *(unsigned int *)(v6 + 28);
            if ((_DWORD)v10)
            {
              v13 = v6;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v10));
              v6 = v13;
            }
            v11 = *(WTF **)(v6 + 16);
            if (v11)
            {
              *(_QWORD *)(v6 + 16) = 0;
              *(_DWORD *)(v6 + 24) = 0;
              v12 = v6;
              WTF::fastFree(v11, a2);
              v6 = v12;
            }
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *std::pair<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~pair(uint64_t *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v10)
      {
        v16 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v10));
        v3 = v16;
      }
      v11 = *(WTF **)(v3 + 16);
      if (v11)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v14 = v3;
        WTF::fastFree(v11, a2);
        v3 = v14;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *a1;
  *a1 = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v12 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v12)
      {
        v17 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v12));
        v6 = v17;
      }
      v13 = *(WTF **)(v6 + 16);
      if (v13)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v15 = v6;
        WTF::fastFree(v13, a2);
        v6 = v15;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

WebCore::AccessibilityObject **WebCore::AccessibilityObject::iterator::operator++(WebCore::AccessibilityObject **a1)
{
  uint64_t v2;
  void *v3;
  WebCore::AccessibilityObject *v4;
  uint64_t v5;
  int v7;
  WebCore::AccessibilityObject *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v17;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)*a1 + 2936))(*a1);
  v4 = (WebCore::AccessibilityObject *)v2;
  if (v2)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_6:
    ++*(_QWORD *)(v5 + 8);
    v7 = __ldxr((unsigned __int8 *)v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
LABEL_11:
  v8 = *a1;
  *a1 = v4;
  if (!v8)
    goto LABEL_28;
  v9 = *((_QWORD *)v8 + 1);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_16:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v17 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v17 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v9))
    {
      if (v12)
        goto LABEL_28;
      goto LABEL_24;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
  if (v12)
    goto LABEL_28;
LABEL_24:
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (!v14)
    WTF::fastFree((WTF *)v9, v3);
LABEL_28:
  WebCore::AccessibilityObject::iterator::ensureContentsParentValidity(a1);
  return a1;
}

WebCore::AccessibilityObject::iterator *WebCore::AccessibilityObject::iterator::iterator(WebCore::AccessibilityObject::iterator *this, const WebCore::AccessibilityObject *a2, const WebCore::AccessibilityObject *a3)
{
  const WebCore::AccessibilityObject *v3;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  int v14;
  uint64_t v16;

  v3 = a3;
  v6 = (*(uint64_t (**)(const WebCore::AccessibilityObject *))(*(_QWORD *)a3 + 832))(a3);
  if (!v6)
    goto LABEL_5;
  v7 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 2;
  if ((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v16 = *(_QWORD *)((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0)
  {
    v8 = 0;
    if (!v7)
      goto LABEL_29;
LABEL_4:
    *(_DWORD *)(v6 + 24) = v7;
    if (v8)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = (*(_QWORD *)(v16 + 16) & 0x1FLL) == 18;
  if (v7)
    goto LABEL_4;
LABEL_29:
  if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v6);
    if (v8)
      goto LABEL_6;
LABEL_5:
    v3 = 0;
    goto LABEL_6;
  }
  if (!v8)
    goto LABEL_5;
LABEL_6:
  if (!a2)
    goto LABEL_16;
  v9 = *((_QWORD *)a2 + 1);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_11:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_16:
  *(_QWORD *)this = a2;
  if (!v3)
    goto LABEL_26;
  v12 = *((_QWORD *)v3 + 1);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
LABEL_20:
    MEMORY[0x19AEA534C](v12);
    goto LABEL_21;
  }
  if (__stxr(1u, (unsigned __int8 *)v12))
    goto LABEL_20;
LABEL_21:
  ++*(_QWORD *)(v12 + 8);
  v14 = __ldxr((unsigned __int8 *)v12);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_26;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_26:
  *((_QWORD *)this + 1) = v3;
  return this;
}

WebCore::AccessibilityObject *WebCore::AccessibilityObject::iterator::ensureContentsParentValidity(WebCore::AccessibilityObject **this)
{
  WebCore::AccessibilityObject *result;
  void *v3;
  WebCore::AccessibilityObject *v4;
  WebCore::AccessibilityObject *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;

  result = *this;
  if (!result)
    return result;
  result = (WebCore::AccessibilityObject *)WebCore::AccessibilityObject::displayContentsParent(result);
  if (!result)
    return result;
  v4 = this[1];
  if (!v4)
    return result;
  if (result == v4)
    return result;
  v5 = *this;
  *this = 0;
  if (!v5)
    return result;
  v6 = *((_QWORD *)v5 + 1);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_10;
  }
  result = (WebCore::AccessibilityObject *)MEMORY[0x19AEA534C](v6);
LABEL_10:
  v8 = *(_QWORD *)(v6 + 8);
  v9 = v8 - 1;
  *(_QWORD *)(v6 + 8) = v8 - 1;
  if (v8 == 1)
  {
    v13 = *(_QWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = 0;
    v11 = v13 != 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
  }
  v12 = __ldxr((unsigned __int8 *)v6);
  if (v12 != 1)
  {
    __clrex();
LABEL_17:
    result = (WebCore::AccessibilityObject *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      return result;
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
    goto LABEL_17;
  if (v9)
    return result;
LABEL_18:
  if (v10)
    result = (WebCore::AccessibilityObject *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (!v11)
    return (WebCore::AccessibilityObject *)WTF::fastFree((WTF *)v6, v3);
  return result;
}

void WebCore::AccessibilityObject::iterator::~iterator(WebCore::AccessibilityObject::iterator *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v19 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v19 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (!v11)
    return;
  v12 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_23:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v20 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v20 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 != 1)
  {
    __clrex();
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      return;
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
    goto LABEL_30;
  if (v15)
    return;
LABEL_31:
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v17)
    WTF::fastFree((WTF *)v12, a2);
}

void WebCore::AXObjectCache::AttributeChange::~AttributeChange(WebCore::AXObjectCache::AttributeChange *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
      WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v11 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v11)
      {
        v14 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v11));
        v6 = v14;
      }
      v12 = *(WTF **)(v6 + 16);
      if (v12)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v13 = v6;
        WTF::fastFree(v12, a2);
        v6 = v13;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
}

void WebCore::SimplifiedBackwardsTextIterator::~SimplifiedBackwardsTextIterator(WebCore::SimplifiedBackwardsTextIterator *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 4);
  if ((WebCore::SimplifiedBackwardsTextIterator *)((char *)this + 48) != v8 && v8)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 < *(unsigned int *)(v3 + 60))
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 80 * v2) + 112);
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  if (v2)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS9_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

_QWORD *WebCore::appendAccessibilityObject(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  uint64_t v28;
  int v30;
  int v31;
  uint64_t v32;

  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 128))(*a1);
  if (!(_DWORD)result)
  {
LABEL_34:
    v9 = (_QWORD *)*a1;
LABEL_35:
    if (!v9)
      return result;
    v21 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v21 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v21 + 1, (unint64_t)a1);
      v22 = *(unsigned int *)(a2 + 12);
      v23 = *(char **)a2;
      v24 = *result;
      if (!*result)
        goto LABEL_57;
      v25 = *(_QWORD *)(v24 + 8);
      if (__ldaxr((unsigned __int8 *)v25))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v25))
      {
LABEL_52:
        ++*(_QWORD *)(v25 + 8);
        v31 = __ldxr((unsigned __int8 *)v25);
        if (v31 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v25))
            goto LABEL_57;
        }
        else
        {
          __clrex();
        }
        result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_57:
        *(_QWORD *)&v23[8 * v22] = v24;
        goto LABEL_58;
      }
      result = (_QWORD *)MEMORY[0x19AEA534C](v25);
      goto LABEL_52;
    }
    v27 = *(char **)a2;
    v28 = v9[1];
    if (__ldaxr((unsigned __int8 *)v28))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v28))
    {
      goto LABEL_44;
    }
    result = (_QWORD *)MEMORY[0x19AEA534C](v28);
LABEL_44:
    ++*(_QWORD *)(v28 + 8);
    v30 = __ldxr((unsigned __int8 *)v28);
    if (v30 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v28))
        goto LABEL_49;
    }
    else
    {
      __clrex();
    }
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_49:
    *(_QWORD *)&v27[8 * v21] = v9;
LABEL_58:
    ++*(_DWORD *)(a2 + 12);
    return result;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 1688))(*a1);
  if (result)
  {
    v5 = result;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 72))(result);
    if ((_DWORD)result)
    {
      v6 = *(_QWORD *)(v5[41] + 296);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 1944) && !*(_BYTE *)(v6 + 3405))
        {
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 1488))(*a1);
          result = (_QWORD *)WebCore::AXObjectCache::getOrCreate(v7, v6, 0);
          v9 = result;
          if (!result)
            goto LABEL_17;
          v10 = result[1];
          if (__ldaxr((unsigned __int8 *)v10))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v10))
          {
            goto LABEL_12;
          }
          result = (_QWORD *)MEMORY[0x19AEA534C](v10);
LABEL_12:
          ++*(_QWORD *)(v10 + 8);
          v12 = __ldxr((unsigned __int8 *)v10);
          if (v12 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v10))
            {
LABEL_17:
              v13 = *a1;
              *a1 = v9;
              if (!v13)
                goto LABEL_35;
              v14 = *(_QWORD *)(v13 + 8);
              if (__ldaxr((unsigned __int8 *)v14))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v14))
              {
                goto LABEL_22;
              }
              result = (_QWORD *)MEMORY[0x19AEA534C](v14);
LABEL_22:
              v16 = *(_QWORD *)(v14 + 8);
              v17 = v16 - 1;
              *(_QWORD *)(v14 + 8) = v16 - 1;
              if (v16 == 1)
              {
                v32 = *(_QWORD *)(v14 + 16);
                v18 = *(_QWORD *)(v14 + 24);
                *(_QWORD *)(v14 + 24) = 0;
                v19 = v32 != 0;
              }
              else
              {
                v18 = 0;
                v19 = 1;
              }
              v20 = __ldxr((unsigned __int8 *)v14);
              if (v20 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v14))
                {
LABEL_29:
                  if (!v17)
                  {
                    if (v18)
                      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
                    if (!v19)
                      result = (_QWORD *)WTF::fastFree((WTF *)v14, v8);
                  }
                  goto LABEL_34;
                }
              }
              else
              {
                __clrex();
              }
              result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
              goto LABEL_29;
            }
          }
          else
          {
            __clrex();
          }
          result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
          goto LABEL_17;
        }
      }
    }
  }
  return result;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_WORD *__dst, uint64_t a2, char a3, uint64_t a4, int8x16_t *a5, int a6)
{
  _WORD *v10;
  int8x16_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  _WORD *v26;
  char *v27;
  int8x16_t *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  char *v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int16 v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;

  v10 = __dst;
  if (a2)
  {
    v12 = *(int8x16_t **)(a2 + 8);
    v13 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v14 = (char *)&__dst[v13];
      if (v13 >= 0x40)
      {
        v15 = (char *)&__dst[v13 & 0xFFFFFFC0];
        v17 = 0uLL;
        v18 = (char *)__dst;
        do
        {
          v53.val[0] = *v12;
          v19 = v12[1];
          v56.val[0] = v12[2];
          v20 = v12[3];
          v12 += 4;
          v21 = v20;
          v56.val[1] = 0uLL;
          v59.val[0] = v19;
          v53.val[1] = 0uLL;
          v22 = v18;
          vst2q_s8(v22, v53);
          v22 += 32;
          v59.val[1] = 0uLL;
          vst2q_s8(v22, v59);
          v23 = v18 + 64;
          vst2q_s8(v23, v56);
          v24 = v18 + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
          v18 += 128;
        }
        while (v18 != v15);
      }
      else
      {
        v15 = (char *)__dst;
      }
      while (v15 != v14)
      {
        v25 = v12->u8[0];
        v12 = (int8x16_t *)((char *)v12 + 1);
        *(_WORD *)v15 = v25;
        v15 += 2;
      }
    }
    else if ((_DWORD)v13 == 1)
    {
      *__dst = v12->i16[0];
    }
    else if ((_DWORD)v13)
    {
      __dst = memcpy(__dst, v12, 2 * v13);
    }
    v16 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v16 = 0;
  }
  v26 = &v10[v16];
  *v26 = a3;
  v27 = (char *)(v26 + 1);
  if (a4)
  {
    v28 = *(int8x16_t **)(a4 + 8);
    v29 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v30 = &v27[2 * v29];
      if (v29 >= 0x40)
      {
        v31 = &v27[2 * (v29 & 0xFFFFFFC0)];
        v33 = 0uLL;
        v34 = v27;
        do
        {
          v54.val[0] = *v28;
          v35 = v28[1];
          v57.val[0] = v28[2];
          v36 = v28[3];
          v28 += 4;
          v37 = v36;
          v57.val[1] = 0uLL;
          v60.val[0] = v35;
          v54.val[1] = 0uLL;
          v38 = v34;
          vst2q_s8(v38, v54);
          v38 += 32;
          v60.val[1] = 0uLL;
          vst2q_s8(v38, v60);
          v39 = v34 + 64;
          vst2q_s8(v39, v57);
          v40 = v34 + 96;
          vst2q_s8(v40, *(int8x16x2_t *)(&v33 - 1));
          v34 += 128;
        }
        while (v34 != v31);
      }
      else
      {
        v31 = v27;
      }
      while (v31 != v30)
      {
        v41 = v28->u8[0];
        v28 = (int8x16_t *)((char *)v28 + 1);
        *(_WORD *)v31 = v41;
        v31 += 2;
      }
    }
    else if ((_DWORD)v29 == 1)
    {
      *(_WORD *)v27 = v28->i16[0];
    }
    else if ((_DWORD)v29)
    {
      __dst = memcpy(v27, v28, 2 * v29);
    }
    v32 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v32 = 0;
  }
  v42 = &v27[2 * v32];
  v43 = &v42[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v44 = &v42[2 * (a6 & 0xFFFFFFC0)];
    v45 = 0uLL;
    do
    {
      v55.val[0] = *a5;
      v46 = a5[1];
      v58.val[0] = a5[2];
      v47 = a5[3];
      a5 += 4;
      v48 = v47;
      v58.val[1] = 0uLL;
      v61.val[0] = v46;
      v55.val[1] = 0uLL;
      v49 = v42;
      vst2q_s8(v49, v55);
      v49 += 32;
      v61.val[1] = 0uLL;
      vst2q_s8(v49, v61);
      v50 = v42 + 64;
      vst2q_s8(v50, v58);
      v51 = v42 + 96;
      vst2q_s8(v51, *(int8x16x2_t *)(&v45 - 1));
      v42 += 128;
    }
    while (v42 != v44);
    v42 = v44;
  }
  while (v42 != v43)
  {
    v52 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v42 = v52;
    v42 += 2;
  }
  return __dst;
}

void WTF::Detail::CallableWrapper<WebCore::AXImage::imageOverlayElements(void)::$_0,void,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&>::call(uint64_t a1, WebCore::Node **a2)
{
  WebCore::Node *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  WebCore::AXObjectCache *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a2;
  if (v2)
    v3 = WebCore::Document::hasEverCreatedAnAXObjectCache == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = *(_QWORD *)(*((_QWORD *)v2 + 5) + 8);
    if (*(_BYTE *)(v4 + 3362) || *(_BYTE *)(v4 + 3405))
    {
      while (1)
      {
        v12 = *(_QWORD *)(v4 + 528);
        if (!v12)
          break;
        v13 = *(_QWORD *)(v12 + 8);
        if (!v13)
          break;
        v14 = *(_QWORD *)(v13 + 120);
        if (!v14)
          break;
        v15 = *(_QWORD *)(v14 + 8);
        if (!v15)
          break;
        v4 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8);
      }
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 528);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
          if (v7 && *(_BYTE *)(v7 + 144) == 0)
          {
            v9 = *(_QWORD *)(v7 + 296);
            if (v9)
              v4 = v9;
          }
        }
      }
    }
    v10 = *(WebCore::AXObjectCache **)(v4 + 1488);
    if (v10)
    {
      ++*((_DWORD *)v10 + 2);
      WebCore::AXObjectCache::postNotification(v10, v2, 29, 0);
      v11 = *((_DWORD *)v10 + 2);
      if (!v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1955ED9CCLL);
      }
      *((_DWORD *)v10 + 2) = v11 - 1;
    }
  }
}

_QWORD *WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  size_t v6;
  uint64_t v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v5 = (_BYTE *)*result;
  v4 = result[1];
  if (v4)
  {
    v6 = v4 - 1;
    if ((unint64_t)(v4 - 1) >> 31)
      goto LABEL_24;
  }
  else
  {
    v6 = 0;
  }
  v8 = *(_BYTE **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    v9 = v7 - 1;
    if (!((unint64_t)(v7 - 1) >> 31))
      goto LABEL_5;
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x1955EDB08);
  }
  v9 = 0;
LABEL_5:
  v10 = (v6 + v9);
  if (__OFADD__((_DWORD)v6, (_DWORD)v9))
    goto LABEL_19;
  if (!(_DWORD)v10)
  {
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_15;
  }
  if ((v10 & 0x80000000) != 0)
  {
LABEL_19:
    v11 = 0;
    goto LABEL_15;
  }
  result = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(v10 + 20));
  v11 = v13;
  if (v13)
  {
    v12 = (_BYTE *)(v13 + 20);
    *(_DWORD *)v13 = 2;
    *(_DWORD *)(v13 + 4) = v10;
    *(_QWORD *)(v13 + 8) = v13 + 20;
    *(_DWORD *)(v13 + 16) = 4;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 == 1)
      {
        *v12 = *v5;
        if (!(_DWORD)v9)
          goto LABEL_15;
LABEL_13:
        result = &v12[v6];
        if ((_DWORD)v9 == 1)
          *(_BYTE *)result = *v8;
        else
          result = memcpy(result, v8, v9);
        goto LABEL_15;
      }
      result = memcpy((void *)(v13 + 20), v5, v6);
    }
    if (!(_DWORD)v9)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_15:
  *a3 = v11;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v8 + 16 * v22;
        *(_BYTE *)(a4 + 16) = 0;
        *((_BYTE *)v16 + 8) = *a3;
        return result;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      *((_BYTE *)v18 + 8) = 2;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  *((_BYTE *)v16 + 8) = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_28;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_29:
    result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v6, v27, v16);
    v16 = result;
    v23 = *v6;
    if (*v6)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
  }
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v23 + 16 * v26;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_BYTE *)(v9 + 24);
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 2;
      v12 += 16;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_QWORD *)(v6 + 16 * v13);
      if ((unint64_t)(*v15 + 1) >= 2)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = (*v15 + ~(*v15 << 32)) ^ ((*v15 + ~(*v15 << 32)) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = *(_QWORD *)(v16 + 16 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (v24);
        v25 = (_OWORD *)(v16 + 16 * v23);
        *v25 = *(_OWORD *)v15;
        if (v15 == a3)
          v14 = v25;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::AXObjectCache::*&)(void),WebCore::AXObjectCache*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Vector<std::pair<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WebCore::AXObjectCache::AXNotification>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  WTF *v15;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    for (i = 16 * v3; i; i -= 16)
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (!v6)
        goto LABEL_20;
      v7 = *(_QWORD *)(v6 + 8);
      if (__ldaxr((unsigned __int8 *)v7))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v7))
      {
        goto LABEL_8;
      }
      MEMORY[0x19AEA534C](v7);
LABEL_8:
      v9 = *(_QWORD *)(v7 + 8);
      v10 = v9 - 1;
      *(_QWORD *)(v7 + 8) = v9 - 1;
      if (v9 == 1)
      {
        v14 = *(_QWORD *)(v7 + 16);
        v11 = *(_QWORD *)(v7 + 24);
        *(_QWORD *)(v7 + 24) = 0;
        v12 = v14 != 0;
      }
      else
      {
        v11 = 0;
        v12 = 1;
      }
      v13 = __ldxr((unsigned __int8 *)v7);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
        {
          if (!v10)
            goto LABEL_16;
          goto LABEL_20;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (!v10)
      {
LABEL_16:
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        if (!v12)
          WTF::fastFree((WTF *)v7, a2);
      }
LABEL_20:
      v4 = (WTF *)((char *)v4 + 16);
    }
  }
  v15 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v15, a2);
  }
  return a1;
}

uint64_t WTF::ListHashSet<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>>::deleteAllNodes(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  if (this)
  {
    v2 = this;
    do
    {
      v3 = (WTF *)v2;
      v2 = *(_QWORD *)(v2 + 16);
      v4 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      if (!v4)
        goto LABEL_20;
      v5 = *(_QWORD *)(v4 + 8);
      if (__ldaxr((unsigned __int8 *)v5))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v5))
      {
        goto LABEL_8;
      }
      MEMORY[0x19AEA534C](v5);
LABEL_8:
      v7 = *(_QWORD *)(v5 + 8);
      v8 = v7 - 1;
      *(_QWORD *)(v5 + 8) = v7 - 1;
      if (v7 == 1)
      {
        v12 = *(_QWORD *)(v5 + 16);
        v9 = *(_QWORD *)(v5 + 24);
        *(_QWORD *)(v5 + 24) = 0;
        v10 = v12 != 0;
      }
      else
      {
        v9 = 0;
        v10 = 1;
      }
      v11 = __ldxr((unsigned __int8 *)v5);
      if (v11 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v5))
        {
          if (!v8)
            goto LABEL_16;
          goto LABEL_20;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (!v8)
      {
LABEL_16:
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        if (!v10)
          WTF::fastFree((WTF *)v5, a2);
      }
LABEL_20:
      this = WTF::fastFree(v3, a2);
    }
    while (v2);
  }
  return this;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr((unsigned int *)v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)v8));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)v8);
          v11 = *(unsigned int *)(v8 + 28);
          if ((_DWORD)v11)
          {
            v14 = v8;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
            v8 = v14;
          }
          v12 = *(WTF **)(v8 + 16);
          if (v12)
          {
            *(_QWORD *)(v8 + 16) = 0;
            *(_DWORD *)(v8 + 24) = 0;
            v13 = v8;
            WTF::fastFree(v12, a2);
            v8 = v13;
          }
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v6 = (WTF *)((char *)v6 + 8);
    }
    while (v6 != (WTF *)v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  void *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;

  v2 = qword_1ECE82160;
  if (qword_1ECE82160)
  {
    v3 = *(_DWORD *)(qword_1ECE82160 - 4);
    v4 = *(_DWORD *)(qword_1ECE82160 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v7 = (_DWORD *)v5;
  v8 = v5 + 16;
  if (a1)
    bzero((void *)(v5 + 16), 16 * a1);
  qword_1ECE82160 = v8;
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE82160 - 12) = v4;
  if (v3)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v2 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          if (qword_1ECE82160)
            v16 = *(_DWORD *)(qword_1ECE82160 - 8);
          else
            v16 = 0;
          v17 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(qword_1ECE82160 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (uint64_t *)(qword_1ECE82160 + 16 * v22);
          v25 = (unsigned int *)v24[1];
          v24[1] = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v6);
            }
          }
          *v24 = *v10;
          v28 = v2 + 16 * v9;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v24[1] = v29;
          v13 = *(unsigned int **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (!v13)
            goto LABEL_27;
          do
          {
            v30 = __ldaxr(v13);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v13));
          if (v31)
            goto LABEL_27;
        }
        else
        {
          v12 = v2 + 16 * v9;
          v13 = *(unsigned int **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (!v13)
            goto LABEL_27;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (v15)
            goto LABEL_27;
        }
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v6);
      }
LABEL_27:
      if (++v9 == v3)
        goto LABEL_30;
    }
  }
  if (v2)
LABEL_30:
    WTF::fastFree((WTF *)(v2 - 16), v6);
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (_QWORD *)v6;
      v9 = (WTF *)((char *)v4 + 8 * v5);
      v10 = v4;
      do
      {
        v11 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        *v8 = v11;
        v12 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        if (v12)
        {
          do
          {
            v13 = __ldaxr((unsigned int *)v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, (unsigned int *)v12));
          if (!v14)
          {
            atomic_store(1u, (unsigned int *)v12);
            v15 = *(unsigned int *)(v12 + 28);
            if ((_DWORD)v15)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v15));
            v16 = *(WTF **)(v12 + 16);
            if (v16)
            {
              *(_QWORD *)(v12 + 16) = 0;
              *(_DWORD *)(v12 + 24) = 0;
              WTF::fastFree(v16, v7);
            }
            WTF::fastFree((WTF *)v12, v7);
          }
        }
        ++v8;
        v10 = (WTF *)((char *)v10 + 8);
      }
      while (v10 != v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AXObjectCache::cacheAndInitializeWrapper(WebCore::AccessibilityObject &,std::variant<decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *>)::$_0,WebCore::AXObjectCache::cacheAndInitializeWrapper(WebCore::AccessibilityObject &,std::variant<decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *>)::$_1,WebCore::AXObjectCache::cacheAndInitializeWrapper(WebCore::AccessibilityObject &,std::variant<decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *>)::$_2,WebCore::AXObjectCache::cacheAndInitializeWrapper(WebCore::AccessibilityObject &,std::variant<decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *>)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *> &>(WTF ****a1, uint64_t *a2)
{
  WTF ***v2;
  uint64_t v3;
  WTF **v4;
  uint64_t *v5;
  WTF *v6;
  WTF **v7;
  uint64_t v8;
  unsigned int v9;
  WTF **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int i;
  uint64_t v17;
  uint64_t *v18;
  uint64_t result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int j;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;

  v2 = *a1;
  v3 = *a2;
  v4 = (*a1)[1];
  v5 = (uint64_t *)(v4 + 8);
  v6 = *(WTF **)(*a2 + 8);
  if (!v6)
  {
    v6 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *((_QWORD *)v6 + 1) = v3;
    v37 = *(WTF **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v6;
    if (v37)
    {
      if (*(_DWORD *)v37 == 1)
      {
        WTF::fastFree(v37, a2);
        v6 = *(WTF **)(v3 + 8);
      }
      else
      {
        --*(_DWORD *)v37;
      }
    }
  }
  ++*(_DWORD *)v6;
  v7 = *v2;
  v8 = *v5;
  if (*v5
    || (WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash((uint64_t *)v4 + 8, 8u), (v8 = *v5) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v11 = *((_QWORD *)v6 + 1);
  v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v9;
    v18 = (uint64_t *)(v8 + 16 * v17);
    result = *v18;
    if (*v18 != -1)
      break;
    v10 = (WTF **)(v8 + 16 * v17);
LABEL_11:
    v15 = i + v17;
  }
  if (!result)
  {
    if (v10)
    {
      *v10 = 0;
      v10[1] = 0;
      --*(_DWORD *)(*v5 - 16);
      *v10 = v6;
    }
    else
    {
      *v18 = (uint64_t)v6;
      v10 = (WTF **)(v8 + 16 * v17);
    }
    v10[1] = *v7;
    v20 = *v5;
    if (*v5)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v5;
    if (*v5)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_30;
    }
    else
    {
      if (3 * v25 > 4 * v24)
        goto LABEL_30;
      if (!(_DWORD)v25)
      {
        v26 = 8;
        goto LABEL_29;
      }
    }
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_29:
    result = WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash((uint64_t *)v4 + 8, v26);
    goto LABEL_30;
  }
  if (*(_QWORD *)(result + 8) != v11)
    goto LABEL_11;
  *(_QWORD *)(v8 + 16 * v17 + 8) = *v7;
  if (*(_DWORD *)v6 == 1)
    result = WTF::fastFree(v6, a2);
  else
    --*(_DWORD *)v6;
LABEL_30:
  if ((*(_BYTE *)(v3 + 45) & 1) == 0)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
    if (v27)
    {
      v28 = v4[10];
      if (v28)
      {
        v29 = *((_DWORD *)v28 - 2);
        v30 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
        v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
        v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
        v33 = v29 & ((v32 >> 31) ^ v32);
        for (j = 1; ; ++j)
        {
          v35 = v33;
          v36 = *((_QWORD *)v28 + 2 * v33);
          if (v36 != -1)
          {
            if (!v36)
              return result;
            if (*(_QWORD *)(v36 + 8) == v27)
              break;
          }
          v33 = (v35 + j) & v29;
        }
        if ((_DWORD)v35 != *((_DWORD *)v28 - 1))
          *((_QWORD *)v28 + 2 * v35 + 1) = **v2;
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AXObjectCache::cacheAndInitializeWrapper(WebCore::AccessibilityObject &,std::variant<decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *>)::$_0,WebCore::AXObjectCache::cacheAndInitializeWrapper(WebCore::AccessibilityObject &,std::variant<decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *>)::$_1,WebCore::AXObjectCache::cacheAndInitializeWrapper(WebCore::AccessibilityObject &,std::variant<decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *>)::$_2,WebCore::AXObjectCache::cacheAndInitializeWrapper(WebCore::AccessibilityObject &,std::variant<decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *>)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t *v11;
  WTF *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  WTF *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  WTF *v41;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 24);
  result = (uint64_t)WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>((unsigned int **)&v41, *a2);
  v8 = *(_QWORD *)(v3 + 80);
  v7 = (uint64_t *)(v3 + 80);
  v6 = v8;
  v9 = *(_QWORD **)(v2 + 16);
  if (v8
    || (result = WTF::HashTable<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(v7, 8u), (v6 = *v7) != 0))
  {
    v10 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = 0;
  v12 = v41;
  v13 = *((_QWORD *)v41 + 1);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (uint64_t *)(v6 + 16 * v19);
    v21 = *v20;
    if (*v20 == -1)
    {
      v11 = (uint64_t *)(v6 + 16 * v19);
      goto LABEL_10;
    }
    if (!v21)
      break;
    if (*(_QWORD *)(v21 + 8) == v13)
    {
      *(_QWORD *)(v6 + 16 * v19 + 8) = *v9;
      goto LABEL_29;
    }
LABEL_10:
    v17 = i + v19;
  }
  if (v11)
  {
    *v11 = 0;
    v11[1] = 0;
    --*(_DWORD *)(*v7 - 16);
    v20 = v11;
  }
  v41 = 0;
  result = *v20;
  *v20 = (uint64_t)v12;
  if (result)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)result);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)result));
    if (!v23)
    {
      v40 = v20;
      atomic_store(1u, (unsigned int *)result);
      v36 = *(unsigned int *)(result + 28);
      if ((_DWORD)v36)
      {
        v39 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v36));
        result = v39;
      }
      v37 = *(WTF **)(result + 16);
      if (v37)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v38 = result;
        WTF::fastFree(v37, v5);
        result = v38;
      }
      result = WTF::fastFree((WTF *)result, v5);
      v20 = v40;
    }
  }
  v20[1] = *v9;
  v24 = *v7;
  if (*v7)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *v7;
  if (*v7)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
    {
LABEL_25:
      v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
      goto LABEL_28;
    }
  }
  else if (3 * v29 <= 4 * v28)
  {
    if ((_DWORD)v29)
      goto LABEL_25;
    v30 = 8;
LABEL_28:
    result = WTF::HashTable<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(v7, v30);
  }
LABEL_29:
  v31 = v41;
  v41 = 0;
  if (v31)
  {
    do
    {
      v32 = __ldaxr((unsigned int *)v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, (unsigned int *)v31));
    if (!v33)
    {
      atomic_store(1u, (unsigned int *)v31);
      v34 = *((unsigned int *)v31 + 7);
      if ((_DWORD)v34)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v31 + 2), (WTF::StringImpl *)(*((_QWORD *)v31 + 2) + 32 * v34));
      v35 = (WTF *)*((_QWORD *)v31 + 2);
      if (v35)
      {
        *((_QWORD *)v31 + 2) = 0;
        *((_DWORD *)v31 + 6) = 0;
        WTF::fastFree(v35, v5);
      }
      return WTF::fastFree(v31, v5);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AXObjectCache::cacheAndInitializeWrapper(WebCore::AccessibilityObject &,std::variant<decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *>)::$_0,WebCore::AXObjectCache::cacheAndInitializeWrapper(WebCore::AccessibilityObject &,std::variant<decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *>)::$_1,WebCore::AXObjectCache::cacheAndInitializeWrapper(WebCore::AccessibilityObject &,std::variant<decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *>)::$_2,WebCore::AXObjectCache::cacheAndInitializeWrapper(WebCore::AccessibilityObject &,std::variant<decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *>)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,decltype(nullptr),WebCore::RenderObject *,WebCore::Node *,WebCore::Widget *> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  WTF *v5;
  WTF *v6;
  WTF **v7;
  uint64_t v8;
  unsigned int v9;
  WTF **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int i;
  uint64_t v17;
  uint64_t *v18;
  uint64_t result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;

  v2 = *a1;
  v3 = *a2;
  v4 = (uint64_t *)(*(_QWORD *)(*a1 + 40) + 72);
  v5 = *(WTF **)(*a2 + 16);
  if (!v5)
  {
    v5 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *((_QWORD *)v5 + 1) = v3;
    v6 = *(WTF **)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        WTF::fastFree(v6, a2);
        v5 = *(WTF **)(v3 + 16);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
  }
  ++*(_DWORD *)v5;
  v7 = *(WTF ***)(v2 + 32);
  v8 = *v4;
  if (*v4
    || (WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(v4, 8u), (v8 = *v4) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v11 = *((_QWORD *)v5 + 1);
  v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v9;
    v18 = (uint64_t *)(v8 + 16 * v17);
    result = *v18;
    if (*v18 != -1)
      break;
    v10 = (WTF **)(v8 + 16 * v17);
LABEL_14:
    v15 = i + v17;
  }
  if (!result)
  {
    if (v10)
    {
      *v10 = 0;
      v10[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      *v10 = v5;
    }
    else
    {
      *v18 = (uint64_t)v5;
      v10 = (WTF **)(v8 + 16 * v17);
    }
    v10[1] = *v7;
    v20 = *v4;
    if (*v4)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v4;
    if (*v4)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        return result;
    }
    else
    {
      if (3 * v25 > 4 * v24)
        return result;
      if (!(_DWORD)v25)
      {
        v26 = 8;
        return WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(v4, v26);
      }
    }
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    return WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(v4, v26);
  }
  if (*(_QWORD *)(result + 8) != v11)
    goto LABEL_14;
  *(_QWORD *)(v8 + 16 * v17 + 8) = *v7;
  if (*(_DWORD *)v5 == 1)
    return WTF::fastFree(v5, a2);
  --*(_DWORD *)v5;
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  WTF **v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  WTF **v21;
  WTF *v22;
  WTF *v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WTF **)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != (WTF *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ~(*((_QWORD *)v11 + 1) << 32) + *((_QWORD *)v11 + 1);
          v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
          v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
          v17 = v13 & (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (WTF **)(v12 + 16 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v21[1] = *(WTF **)(v4 + 16 * i + 8);
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
              WTF::fastFree(v23, v8);
            else
              --*(_DWORD *)v23;
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unsigned int **WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v4 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 8) = a2;
    *(_BYTE *)(v4 + 32) = 0;
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v6 & 0xFFFF000000000000 | v4;
    v7 = v6 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v7);
        v13 = *(unsigned int *)(v7 + 28);
        if ((_DWORD)v13)
        {
          v16 = v7;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v13));
          v7 = v16;
        }
        v14 = *(WTF **)(v7 + 16);
        if (v14)
        {
          *(_QWORD *)(v7 + 16) = 0;
          *(_DWORD *)(v7 + 24) = 0;
          v15 = v7;
          WTF::fastFree(v14, v5);
          v7 = v15;
        }
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  v10 = (unsigned int *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *a1 = v10;
  return a1;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ~(*(_QWORD *)(v11 + 8) << 32) + *(_QWORD *)(v11 + 8);
          v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
          v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
          v17 = v13 & (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 16 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v21[1] = *(_QWORD *)(v4 + 16 * i + 8);
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            do
            {
              v24 = __ldaxr((unsigned int *)v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, (unsigned int *)v23));
            if (!v25)
            {
              atomic_store(1u, (unsigned int *)v23);
              v26 = *(unsigned int *)(v23 + 28);
              if ((_DWORD)v26)
              {
                v29 = v23;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v26));
                v23 = v29;
              }
              v27 = *(WTF **)(v23 + 16);
              if (v27)
              {
                *(_QWORD *)(v23 + 16) = 0;
                *(_DWORD *)(v23 + 24) = 0;
                v28 = v23;
                WTF::fastFree(v27, v8);
                v23 = v28;
              }
              WTF::fastFree((WTF *)v23, v8);
            }
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::AccessibilityObject&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *v16 = v11;
    v20 = *(_QWORD *)(a3 + 8);
    if (__ldaxr((unsigned __int8 *)v20))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v20))
    {
      goto LABEL_18;
    }
    result = (uint64_t *)MEMORY[0x19AEA534C](v20);
LABEL_18:
    ++*(_QWORD *)(v20 + 8);
    v23 = __ldxr((unsigned __int8 *)v20);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
      {
LABEL_23:
        v24 = v16[1];
        v16[1] = a3;
        if (!v24)
          goto LABEL_40;
        v25 = *(_QWORD *)(v24 + 8);
        if (__ldaxr((unsigned __int8 *)v25))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v25))
        {
          goto LABEL_28;
        }
        result = (uint64_t *)MEMORY[0x19AEA534C](v25);
LABEL_28:
        v27 = *(_QWORD *)(v25 + 8);
        v28 = v27 - 1;
        *(_QWORD *)(v25 + 8) = v27 - 1;
        if (v27 == 1)
        {
          v50 = *(_QWORD *)(v25 + 16);
          v29 = *(_QWORD *)(v25 + 24);
          *(_QWORD *)(v25 + 24) = 0;
          v30 = v50 != 0;
        }
        else
        {
          v29 = 0;
          v30 = 1;
        }
        v31 = __ldxr((unsigned __int8 *)v25);
        if (v31 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v25))
          {
            if (v28)
              goto LABEL_40;
LABEL_36:
            if (v29)
              result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
            if (!v30)
              result = (uint64_t *)WTF::fastFree((WTF *)v25, a2);
LABEL_40:
            v32 = *v6;
            if (*v6)
              v33 = *(_DWORD *)(v32 - 12) + 1;
            else
              v33 = 1;
            *(_DWORD *)(v32 - 12) = v33;
            v34 = *v6;
            if (*v6)
              v35 = *(_DWORD *)(v34 - 12);
            else
              v35 = 0;
            v36 = (*(_DWORD *)(v34 - 16) + v35);
            v37 = *(unsigned int *)(v34 - 4);
            if (v37 > 0x400)
            {
              if (v37 <= 2 * v36)
                goto LABEL_49;
            }
            else if (3 * v37 <= 4 * v36)
            {
              if (!(_DWORD)v37)
              {
                v38 = 8;
LABEL_65:
                result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v6, v38, v16);
                v16 = result;
                v34 = *v6;
                if (*v6)
                  v37 = *(unsigned int *)(v34 - 4);
                else
                  v37 = 0;
                goto LABEL_69;
              }
LABEL_49:
              v38 = (_DWORD)v37 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v37));
              goto LABEL_65;
            }
LABEL_69:
            *(_QWORD *)a4 = v16;
            *(_QWORD *)(a4 + 8) = v34 + 16 * v37;
            *(_BYTE *)(a4 + 16) = 1;
            return result;
          }
        }
        else
        {
          __clrex();
        }
        result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v25);
        if (v28)
          goto LABEL_40;
        goto LABEL_36;
      }
    }
    else
    {
      __clrex();
    }
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v20);
    goto LABEL_23;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v11 = *a2;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v22;
  *(_BYTE *)(a4 + 16) = 0;
  v39 = *(_QWORD *)(a3 + 8);
  if (__ldaxr((unsigned __int8 *)v39))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v39))
  {
    goto LABEL_56;
  }
  result = (uint64_t *)MEMORY[0x19AEA534C](v39);
LABEL_56:
  ++*(_QWORD *)(v39 + 8);
  v41 = __ldxr((unsigned __int8 *)v39);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_60;
  }
  if (__stlxr(0, (unsigned __int8 *)v39))
LABEL_60:
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v39);
  v42 = v16[1];
  v16[1] = a3;
  if (!v42)
    return result;
  v43 = *(_QWORD *)(v42 + 8);
  if (__ldaxr((unsigned __int8 *)v43))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v43))
  {
    goto LABEL_73;
  }
  result = (uint64_t *)MEMORY[0x19AEA534C](v43);
LABEL_73:
  v45 = *(_QWORD *)(v43 + 8);
  v46 = v45 - 1;
  *(_QWORD *)(v43 + 8) = v45 - 1;
  if (v45 == 1)
  {
    v51 = *(_QWORD *)(v43 + 16);
    v47 = *(_QWORD *)(v43 + 24);
    *(_QWORD *)(v43 + 24) = 0;
    v48 = v51 != 0;
  }
  else
  {
    v47 = 0;
    v48 = 1;
  }
  v49 = __ldxr((unsigned __int8 *)v43);
  if (v49 != 1)
  {
    __clrex();
LABEL_80:
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v43);
    if (v46)
      return result;
    goto LABEL_81;
  }
  if (__stlxr(0, (unsigned __int8 *)v43))
    goto LABEL_80;
  if (v46)
    return result;
LABEL_81:
  if (v47)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  if (!v48)
    return (uint64_t *)WTF::fastFree((WTF *)v43, a2);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *result;
  uint64_t v55;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v55 = v5;
    while (1)
    {
      v12 = (uint64_t *)(v4 + 16 * v9);
      v13 = *v12;
      if (*v12 == -1)
        goto LABEL_67;
      if (v13)
      {
        v18 = *a1;
        if (*a1)
          v19 = *(_DWORD *)(v18 - 8);
        else
          v19 = 0;
        v20 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
        v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
        v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
        v23 = v19 & ((v22 >> 31) ^ v22);
        v24 = 1;
        do
        {
          v25 = v23;
          v26 = *(_QWORD *)(v18 + 16 * v23);
          v23 = (v23 + v24++) & v19;
        }
        while (v26);
        v27 = (uint64_t *)(v18 + 16 * v25);
        v28 = v27[1];
        v27[1] = 0;
        if (!v28)
          goto LABEL_47;
        v29 = *(_QWORD *)(v28 + 8);
        if (__ldaxr((unsigned __int8 *)v29))
        {
          __clrex();
          goto LABEL_34;
        }
        if (__stxr(1u, (unsigned __int8 *)v29))
LABEL_34:
          MEMORY[0x19AEA534C](v29);
        v36 = *(_QWORD *)(v29 + 8);
        v37 = v36 - 1;
        *(_QWORD *)(v29 + 8) = v36 - 1;
        if (v36 == 1)
        {
          v52 = *(_QWORD *)(v29 + 16);
          v38 = *(_QWORD *)(v29 + 24);
          *(_QWORD *)(v29 + 24) = 0;
          v39 = v52 != 0;
        }
        else
        {
          v38 = 0;
          v39 = 1;
        }
        v40 = __ldxr((unsigned __int8 *)v29);
        if (v40 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v29))
          {
            if (!v37)
            {
LABEL_43:
              if (v38)
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
              if (!v39)
                WTF::fastFree((WTF *)v29, v8);
            }
LABEL_47:
            *v27 = *v12;
            v41 = v4 + 16 * v9;
            v42 = *(_QWORD *)(v41 + 8);
            *(_QWORD *)(v41 + 8) = 0;
            v27[1] = v42;
            v43 = *(_QWORD *)(v41 + 8);
            *(_QWORD *)(v41 + 8) = 0;
            if (!v43)
              goto LABEL_64;
            v44 = *(_QWORD *)(v43 + 8);
            if (__ldaxr((unsigned __int8 *)v44))
            {
              __clrex();
              goto LABEL_51;
            }
            if (__stxr(1u, (unsigned __int8 *)v44))
LABEL_51:
              MEMORY[0x19AEA534C](v44);
            v46 = *(_QWORD *)(v44 + 8);
            v47 = v46 - 1;
            *(_QWORD *)(v44 + 8) = v46 - 1;
            if (v46 == 1)
            {
              v53 = *(_QWORD *)(v44 + 16);
              v48 = *(_QWORD *)(v44 + 24);
              *(_QWORD *)(v44 + 24) = 0;
              v49 = v53 != 0;
            }
            else
            {
              v48 = 0;
              v49 = 1;
            }
            v50 = __ldxr((unsigned __int8 *)v44);
            if (v50 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v44))
              {
                if (!v47)
                {
LABEL_60:
                  if (v48)
                    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
                  if (!v49)
                    WTF::fastFree((WTF *)v44, v8);
                }
LABEL_64:
                if (v12 == a3)
                  v10 = v27;
                v11 = v55;
                goto LABEL_67;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v44);
            if (!v47)
              goto LABEL_60;
            goto LABEL_64;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v29);
        if (!v37)
          goto LABEL_43;
        goto LABEL_47;
      }
      v14 = v4 + 16 * v9;
      v15 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      if (!v15)
        goto LABEL_67;
      v16 = *(_QWORD *)(v15 + 8);
      if (__ldaxr((unsigned __int8 *)v16))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v16))
      {
        goto LABEL_21;
      }
      MEMORY[0x19AEA534C](v16);
LABEL_21:
      v31 = *(_QWORD *)(v16 + 8);
      v32 = v31 - 1;
      *(_QWORD *)(v16 + 8) = v31 - 1;
      if (v31 == 1)
      {
        v51 = *(_QWORD *)(v16 + 16);
        v33 = *(_QWORD *)(v16 + 24);
        *(_QWORD *)(v16 + 24) = 0;
        v34 = v51 != 0;
      }
      else
      {
        v33 = 0;
        v34 = 1;
      }
      v35 = __ldxr((unsigned __int8 *)v16);
      if (v35 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v16))
        {
          if (!v32)
            goto LABEL_29;
          goto LABEL_67;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
      if (!v32)
      {
LABEL_29:
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        if (!v34)
          WTF::fastFree((WTF *)v16, v8);
      }
LABEL_67:
      if (++v9 == v11)
        goto LABEL_73;
    }
  }
  v10 = 0;
  result = 0;
  if (v4)
  {
LABEL_73:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v10;
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Element,WTF::String,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_32;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 16 * --v4);
      result = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
      {
        *v6 = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)result);
          v10 = *(unsigned int *)(result + 28);
          if ((_DWORD)v10)
          {
            v27 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v10));
            result = v27;
          }
          v11 = *(WTF **)(result + 16);
          if (v11)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v26 = result;
            WTF::fastFree(v11, a2);
            result = v26;
          }
          WTF::fastFree((WTF *)result, a2);
        }
        *v6 = -1;
        v9 = v3 + 16 * v4;
        result = *(_QWORD *)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v12 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v13 = *(_DWORD *)(v12 - 12);
      else
        v13 = 0;
      *(_DWORD *)(v12 - 12) = v13 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (v3)
    {
      v14 = *(_DWORD *)(v3 - 4);
      v15 = *(unsigned int *)(v3 - 12);
      if (v14 >= 9 && 6 * (int)v15 < v14)
      {
        v19 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
        v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
        v21 = (v20 | HIWORD(v20)) + 1;
        if (v21 > 0x400)
        {
          if (v21 > 2 * v15)
            goto LABEL_43;
        }
        else if (3 * v21 > 4 * v15)
        {
LABEL_41:
          v22 = (double)v15;
          v23 = (double)v21;
          v24 = 0.604166667;
          goto LABEL_44;
        }
        LODWORD(v21) = 2 * v21;
        if (v21 <= 0x400)
          goto LABEL_41;
LABEL_43:
        v22 = (double)v15;
        v23 = (double)v21;
        v24 = 0.416666667;
LABEL_44:
        if (v23 * v24 <= v22)
          LODWORD(v21) = 2 * v21;
        if (v21 <= 8)
          v25 = 8;
        else
          v25 = v21;
        result = (uint64_t)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)v2, v25, 0);
        v3 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          v17 = 0;
          goto LABEL_36;
        }
LABEL_33:
        v17 = *(_DWORD *)(v3 - 12);
        v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
          goto LABEL_37;
        goto LABEL_36;
      }
LABEL_32:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_33;
    }
  }
  v17 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_36:
  v18 = v17;
LABEL_37:
  *(_DWORD *)(v2 + 12) = 2 * v18;
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  unsigned int **v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int **result;
  uint64_t v33;
  uint64_t v34;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (uint64_t *)(v6 + 16 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v22 = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::reinsert(a1, (WTF::StringImpl *)(v6 + 16 * v11));
          v23 = v6 + 16 * v11;
          v24 = *(WTF::StringImpl **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v10);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = *v14;
          *v14 = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr((unsigned int *)v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, (unsigned int *)v25));
            if (!v27)
            {
              atomic_store(1u, (unsigned int *)v25);
              v28 = *(unsigned int *)(v25 + 28);
              if ((_DWORD)v28)
              {
                v34 = v25;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v25 + 16), (WTF::StringImpl *)(*(_QWORD *)(v25 + 16) + 32 * v28));
                v25 = v34;
              }
              v29 = *(WTF **)(v25 + 16);
              if (v29)
              {
                *(_QWORD *)(v25 + 16) = 0;
                *(_DWORD *)(v25 + 24) = 0;
                v33 = v25;
                WTF::fastFree(v29, v10);
                v25 = v33;
              }
              WTF::fastFree((WTF *)v25, v10);
            }
          }
          if (v14 == a3)
            v12 = v22;
        }
        else
        {
          v16 = v6 + 16 * v11;
          v17 = *(WTF::StringImpl **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
            {
              WTF::StringImpl::destroy(v17, v10);
              v15 = *v14;
            }
            else
            {
              *(_DWORD *)v17 -= 2;
            }
          }
          *v14 = 0;
          if (v15)
          {
            do
            {
              v18 = __ldaxr((unsigned int *)v15);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, (unsigned int *)v15));
            if (!v19)
            {
              atomic_store(1u, (unsigned int *)v15);
              v20 = *(unsigned int *)(v15 + 28);
              if ((_DWORD)v20)
              {
                v31 = v15;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v20));
                v15 = v31;
              }
              v21 = *(WTF **)(v15 + 16);
              if (v21)
              {
                *(_QWORD *)(v15 + 16) = 0;
                *(_DWORD *)(v15 + 24) = 0;
                v30 = v15;
                WTF::fastFree(v21, v10);
                v15 = v30;
              }
              WTF::fastFree((WTF *)v15, v10);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int **WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::reinsert(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int **v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int *v15;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = ~(*(_QWORD *)a2 << 32) + *(_QWORD *)a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
  v9 = 1;
  do
  {
    v10 = v8;
    v11 = *(_QWORD *)(v3 + 16 * v8);
    v8 = (v8 + v9++) & v4;
  }
  while (v11);
  v12 = (unsigned int **)(v3 + 16 * v10);
  v13 = (WTF::StringImpl *)v12[1];
  v12[1] = 0;
  if (!v13)
    goto LABEL_9;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_9:
    *v12 = 0;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v13, a2);
  v18 = *v12;
  *v12 = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      v23 = (WTF *)v18;
      v21 = v18[7];
      if ((_DWORD)v21)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v23 + 2), (WTF::StringImpl *)(*((_QWORD *)v23 + 2) + 32 * v21));
      v22 = (WTF *)*((_QWORD *)v23 + 2);
      if (v22)
      {
        *((_QWORD *)v23 + 2) = 0;
        *((_DWORD *)v23 + 6) = 0;
        WTF::fastFree(v22, v17);
      }
      WTF::fastFree(v23, v17);
    }
  }
LABEL_10:
  v14 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  *v12 = v14;
  v15 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v12[1] = v15;
  return v12;
}

unsigned int **WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int **result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v13 = *(unsigned int *)(v3 + 28);
      v17 = a2;
      if ((_DWORD)v13)
      {
        v16 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v13));
        v3 = v16;
      }
      v14 = *(WTF **)(v3 + 16);
      if (v14)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v15 = v3;
        WTF::fastFree(v14, a2);
        v3 = v15;
      }
      WTF::fastFree((WTF *)v3, a2);
      a2 = v17;
    }
  }
  result = (unsigned int **)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (unsigned int **)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  ++*(_DWORD *)(*a1 - 16);
  v7 = *a1;
  if (*a1)
    v8 = *(_DWORD *)(v7 - 12) - 1;
  else
    v8 = -1;
  *(_DWORD *)(v7 - 12) = v8;
  v9 = *a1;
  if (*a1)
  {
    v10 = 6 * *(_DWORD *)(v9 - 12);
    v11 = *(_DWORD *)(v9 - 4);
    if (v10 < v11 && v11 >= 9)
      return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v11 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::VectorMover<false,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::moveOverlapping(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;

  v3 = a3;
  v5 = result;
  if (result <= a3)
  {
    if (a2 != result)
    {
      v12 = (uint64_t *)((char *)a3 + (((char *)a2 - (char *)result) & 0xFFFFFFFFFFFFFFF8) - 8);
      result = a2 - 1;
      v13 = a2 - 1;
      do
      {
        v14 = *result;
        *v13-- = 0;
        *v12-- = v14;
        v15 = WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(result, a2) == v5;
        result = v13;
      }
      while (!v15);
    }
  }
  else if (result != a2)
  {
    do
    {
      v6 = *v5;
      *v5 = 0;
      *v3 = v6;
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr((unsigned int *)v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v7));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)v7);
          v10 = *(unsigned int *)(v7 + 28);
          if ((_DWORD)v10)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
          v11 = *(WTF **)(v7 + 16);
          if (v11)
          {
            *(_QWORD *)(v7 + 16) = 0;
            *(_DWORD *)(v7 + 24) = 0;
            WTF::fastFree(v11, a2);
          }
          result = (uint64_t *)WTF::fastFree((WTF *)v7, a2);
        }
      }
      ++v3;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_7ElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v4)
    {
      v5 = 0;
      do
      {
        v6 = --v4;
        v7 = *(_QWORD *)(v2 + 8 * v4);
        if ((unint64_t)(v7 + 1) >= 2 && !*(_QWORD *)(v7 + 8))
        {
          *(_QWORD *)(v2 + 8 * v4) = 0;
          do
          {
            v13 = __ldaxr((unsigned int *)v7);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, (unsigned int *)v7));
          if (!v14)
          {
            v21 = v4;
            v19 = v2;
            v20 = v4;
            v18 = v5;
            v17 = a1;
            atomic_store(1u, (unsigned int *)v7);
            v23 = v7;
            v15 = *(unsigned int *)(v7 + 28);
            if ((_DWORD)v15)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v15));
            v16 = *(WTF **)(v23 + 16);
            if (v16)
            {
              *(_QWORD *)(v23 + 16) = 0;
              *(_DWORD *)(v23 + 24) = 0;
              WTF::fastFree(v16, a2);
            }
            WTF::fastFree((WTF *)v23, a2);
            a1 = v17;
            v5 = v18;
            v2 = v19;
            v4 = v20;
            v6 = v21;
          }
          *(_QWORD *)(v2 + 8 * v6) = -1;
          ++v5;
        }
      }
      while (v6);
      v8 = *a1;
      v2 = v5 != 0;
      if (v5)
      {
        *(_DWORD *)(v8 - 16) += v5;
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 12);
        else
          v12 = 0;
        *(_DWORD *)(v11 - 12) = v12 - v5;
        v8 = *a1;
      }
      if (v8)
      {
        v9 = *(_DWORD *)(v8 - 4);
        if (6 * *(_DWORD *)(v8 - 12) < v9 && v9 >= 9)
        {
          v22 = v2;
          WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(a1);
          return v22;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t *_ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_16HTMLTableElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *result, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t *v24;

  v2 = *result;
  if (*result)
  {
    v3 = *(_DWORD *)(v2 - 4);
    if (v3)
    {
      v4 = result;
      v5 = 0;
      do
      {
        while (1)
        {
          result = *(uint64_t **)(v2 + 8 * --v3);
          if ((unint64_t)result + 1 >= 2 && !result[1])
            break;
          if (!v3)
            goto LABEL_18;
        }
        *(_QWORD *)(v2 + 8 * v3) = 0;
        do
        {
          v6 = __ldaxr((unsigned int *)result);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, (unsigned int *)result));
        if (!v7)
        {
          atomic_store(1u, (unsigned int *)result);
          v8 = *((unsigned int *)result + 7);
          if ((_DWORD)v8)
          {
            v24 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct((WTF::StringImpl *)result[2], (WTF::StringImpl *)(result[2] + 32 * v8));
            result = v24;
          }
          v9 = (WTF *)result[2];
          if (v9)
          {
            result[2] = 0;
            *((_DWORD *)result + 6) = 0;
            v23 = result;
            WTF::fastFree(v9, a2);
            result = v23;
          }
          result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        }
        *(_QWORD *)(v2 + 8 * v3) = -1;
        ++v5;
      }
      while (v3);
LABEL_18:
      v10 = *v4;
      if (v5)
      {
        *(_DWORD *)(v10 - 16) += v5;
        v11 = *v4;
        if (*v4)
          v12 = *(_DWORD *)(v11 - 12);
        else
          v12 = 0;
        *(_DWORD *)(v11 - 12) = v12 - v5;
        v10 = *v4;
      }
      if (v10)
      {
        v13 = *(_DWORD *)(v10 - 4);
        v14 = *(unsigned int *)(v10 - 12);
        if (6 * (int)v14 < v13 && v13 >= 9)
        {
          v16 = (v14 - 1) | ((v14 - 1) >> 1) | ((((_DWORD)v14 - 1) | ((v14 - 1) >> 1)) >> 2);
          v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
          v18 = (v17 | HIWORD(v17)) + 1;
          if (v18 > 0x400)
          {
            if (v18 > 2 * v14)
              goto LABEL_34;
          }
          else if (3 * v18 > 4 * v14)
          {
LABEL_31:
            v19 = (double)v14;
            v20 = (double)v18;
            v21 = 0.604166667;
LABEL_35:
            if (v20 * v21 <= v19)
              LODWORD(v18) = 2 * v18;
            if (v18 <= 8)
              v22 = 8;
            else
              v22 = v18;
            return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v4, v22, 0);
          }
          LODWORD(v18) = 2 * v18;
          if (v18 <= 0x400)
            goto LABEL_31;
LABEL_34:
          v19 = (double)v14;
          v20 = (double)v18;
          v21 = 0.416666667;
          goto LABEL_35;
        }
      }
    }
  }
  return result;
}

BOOL WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove(uint64_t *a1, void *a2, WTF *this)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;

  if (this)
  {
    v5 = *a1;
    if (*a1)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = ~(*(_QWORD *)this << 32) + *(_QWORD *)this;
      v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
      v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
      v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
      for (i = 1; ; ++i)
      {
        v12 = v10;
        v13 = *(_QWORD **)(v5 + 8 * v10);
        if (v13 != (_QWORD *)-1)
        {
          if (!v13)
            goto LABEL_17;
          if (*v13 == *(_QWORD *)this)
            break;
        }
        v10 = (v12 + i) & v6;
      }
      if (*(_DWORD *)(v5 - 4) != (_DWORD)v12)
      {
        *(_QWORD *)(v5 + 8 * v12) = -1;
        ++*(_DWORD *)(*a1 - 16);
        v14 = *a1;
        v15 = *a1 ? *(_DWORD *)(v14 - 12) - 1 : -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *a1;
        if (*a1)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>>::rehash(a1, v18 >> 1, 0);
        }
      }
    }
LABEL_17:
    v20 = *((_QWORD *)this + 1);
    v21 = *((_QWORD *)this + 2);
    if (v20)
    {
      *(_QWORD *)(v20 + 16) = v21;
      v21 = *((_QWORD *)this + 2);
    }
    else
    {
      a1[1] = v21;
    }
    if (v21)
      v22 = (_QWORD *)(v21 + 8);
    else
      v22 = a1 + 2;
    *v22 = v20;
    v23 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v23)
    {
      do
      {
        v25 = __ldaxr((unsigned int *)v23);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v23));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)v23);
        v27 = *(unsigned int *)(v23 + 28);
        if ((_DWORD)v27)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v27));
        v28 = *(WTF **)(v23 + 16);
        if (v28)
        {
          *(_QWORD *)(v23 + 16) = 0;
          *(_DWORD *)(v23 + 24) = 0;
          WTF::fastFree(v28, a2);
        }
        WTF::fastFree((WTF *)v23, a2);
      }
    }
    WTF::fastFree(this, a2);
  }
  return this != 0;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD **)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = ~(*v14 << 32) + *v14;
        v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
        v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
        v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>(uint64_t *a1, WTF *this)
{
  uint64_t v2;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  WTF *v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v2 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v2 - 8);
    v6 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    for (i = 1; ; ++i)
    {
      v11 = *(WTF **)(v2 + 8 * v9);
      if (!v11)
        break;
      v12 = v9;
      if (v11 != (WTF *)-1 && v11 == this)
      {
        if (v9 == *(_DWORD *)(v2 - 4))
          return 0;
        *(_QWORD *)(v2 + 8 * v9) = 0;
        if (this)
        {
          if (*(_DWORD *)this == 1)
            WTF::fastFree(this, this);
          else
            --*(_DWORD *)this;
        }
        *(_QWORD *)(v2 + 8 * v12) = -1;
        ++*(_DWORD *)(*a1 - 16);
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 12) - 1;
        else
          v15 = -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *a1;
        if (*a1)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v18 >> 1, 0);
        }
        return 1;
      }
      v9 = (v9 + i) & v5;
    }
  }
  return 0;
}

uint64_t *WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int i;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  char v26;
  unsigned int v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = ~(*a2 << 32) + *a2;
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v7;
    v15 = (_QWORD *)(v6 + 8 * (v12 & v7));
    v16 = (_QWORD *)*v15;
    if (!*v15)
      break;
    if (v16 != (_QWORD *)-1)
    {
      v15 = v8;
      if (*v16 == *a2)
      {
        v26 = 0;
        goto LABEL_20;
      }
    }
    v12 = i + v14;
    v8 = v15;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*v4 - 16);
    v15 = v8;
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v17 = *a2;
  *a2 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = v17;
  *v15 = result;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_16;
    goto LABEL_22;
  }
  if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v27 = 8;
      goto LABEL_25;
    }
LABEL_22:
    v27 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
LABEL_25:
    v15 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>>::rehash(v4, v27, (_QWORD **)v15);
    result = (uint64_t *)*v15;
  }
LABEL_16:
  v24 = v4[2];
  result[1] = v24;
  result[2] = 0;
  if (v24)
    v25 = (uint64_t **)(v24 + 16);
  else
    v25 = (uint64_t **)(v4 + 1);
  *v25 = result;
  v4[2] = (uint64_t)result;
  v16 = (_QWORD *)*v15;
  v26 = 1;
LABEL_20:
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

uint64_t WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::createWeakPtr<WebCore::Node>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t *v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (uint64_t *)result;
  if ((*(_QWORD *)result & 0xFFFFFFFFFFFFLL) == 0)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = a2;
    *(_BYTE *)(v8 + 32) = 0;
    v10 = *v3;
    *v3 = *v3 & 0xFFFF000000000000 | v8;
    result = v10 & 0xFFFFFFFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)result));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)result);
        v13 = *(unsigned int *)(result + 28);
        if ((_DWORD)v13)
        {
          v16 = result;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v13));
          result = v16;
        }
        v14 = *(WTF **)(result + 16);
        if (v14)
        {
          *(_QWORD *)(result + 16) = 0;
          *(_DWORD *)(result + 24) = 0;
          v15 = result;
          WTF::fastFree(v14, v9);
          result = v15;
        }
        result = WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  v5 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFLL);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *a3 = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::AXObjectCache::AttributeChange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::AXObjectCache::AttributeChange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::AXObjectCache::AttributeChange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::AXObjectCache::AttributeChange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(32 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = (_QWORD *)result;
        result = (uint64_t)v7;
        do
        {
          v11 = *(WTF **)result;
          *(_QWORD *)result = 0;
          *v10 = v11;
          v12 = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = 0;
          v10[1] = v12;
          v13 = *(_QWORD *)(result + 16);
          *(_QWORD *)(result + 16) = 0;
          v10[2] = v13;
          v14 = *(_QWORD *)(result + 24);
          *(_QWORD *)(result + 24) = 0;
          v10[3] = v14;
          WebCore::AXObjectCache::AttributeChange::~AttributeChange((WebCore::AXObjectCache::AttributeChange *)result, v9);
          result = v15 + 32;
          v10 += 4;
        }
        while ((WTF *)result != (WTF *)((char *)v7 + 32 * v8));
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<void WebCore::filterWeakHashSetForRemoval<WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> &,WebCore::Document const&,WTF::HashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTableTraits> &)::{lambda(WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> &)#1},void,WebCore::Element&>::call(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  void *v4;
  uint64_t v5;
  unsigned int *v6;

  result = *(unsigned int **)(a1 + 16);
  if ((*(_BYTE *)(a2 + 22) & 8) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) == *(_QWORD *)(a1 + 8))
  {
    *(_DWORD *)(a2 + 24) += 2;
    v6 = (unsigned int *)a2;
    WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)result, (uint64_t *)&v6, (uint64_t)&v5);
    result = v6;
    v6 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<void WebCore::filterWeakHashSetForRemoval<WTF::WeakHashSet<WebCore::HTMLTableElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::HTMLTableElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> &,WebCore::Document const&,WTF::HashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTableTraits> &)::{lambda(WTF::WeakHashSet<WebCore::HTMLTableElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> &)#1},void,WebCore::HTMLTableElement&>::call(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  void *v4;
  uint64_t v5;
  unsigned int *v6;

  result = *(unsigned int **)(a1 + 16);
  if ((*(_BYTE *)(a2 + 22) & 8) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) == *(_QWORD *)(a1 + 8))
  {
    *(_DWORD *)(a2 + 24) += 2;
    v6 = (unsigned int *)a2;
    WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)result, (uint64_t *)&v6, (uint64_t)&v5);
    result = v6;
    v6 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::AXObjectCache::performDeferredCacheUpdate(WebCore::ForceLayout)::$_1,void,WebCore::HTMLTableElement &>::call(uint64_t a1, WebCore::Node *a2)
{
  uint64_t v2;
  WebCore::AccessibilityTable *v3;

  v2 = WebCore::AXObjectCache::get(*(WebCore::AXObjectCache **)(a1 + 8), a2);
  if (v2)
  {
    v3 = (WebCore::AccessibilityTable *)v2;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2))
      WebCore::AccessibilityTable::recomputeIsExposable(v3);
  }
}

uint64_t WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>(WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::Node&)#1},WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;

  v3 = result;
  v4 = *(WTF **)(a2 + 8);
  if (v4)
  {
    do
    {
      v5 = (WTF *)*((_QWORD *)v4 + 2);
      if (!*(_QWORD *)(*(_QWORD *)v4 + 8))
        result = WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)a2, (void *)a2, v4);
      v4 = v5;
    }
    while (v5);
  }
  *(_DWORD *)(a2 + 24) = 0;
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v7 = *(_DWORD *)(v6 - 12);
    if (v7 >= 0x7FFFFFFF)
      v8 = -2;
    else
      v8 = 2 * v7;
    *(_DWORD *)(a2 + 28) = v8;
    v9 = *(unsigned int *)(v6 - 12);
    if ((_DWORD)v9)
    {
      if (v9 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * v9));
      *(_DWORD *)(v3 + 8) = v9;
      *(_QWORD *)v3 = result;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 28) = 0;
  }
  v10 = *(_QWORD **)(a2 + 8);
  if (v10)
  {
    while (1)
    {
      result = *(_QWORD *)(*v10 + 8);
      if (result)
        break;
      v10 = (_QWORD *)v10[2];
      if (!v10)
        return result;
    }
LABEL_16:
    result = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(result);
    if (result)
    {
      do
        v11 = __ldaxr((unsigned int *)result);
      while (__stlxr(v11 + 1, (unsigned int *)result));
    }
    v12 = *(unsigned int *)(v3 + 12);
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v12) = result;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    while (1)
    {
      v10 = (_QWORD *)v10[2];
      if (!v10)
        break;
      result = *(_QWORD *)(*v10 + 8);
      if (result)
      {
        ++*(_DWORD *)(a2 + 24);
        goto LABEL_16;
      }
    }
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AXObjectCache::performDeferredCacheUpdate(WebCore::ForceLayout)::$_2,void,WebCore::AccessibilityTable &>::call(int a1, WebCore::AccessibilityTable *this)
{
  return WebCore::AccessibilityTable::clearChildren(this);
}

void WTF::Detail::CallableWrapper<WebCore::AXObjectCache::performDeferredCacheUpdate(WebCore::ForceLayout)::$_3,void,WebCore::Element &>::call(uint64_t a1, uint64_t a2)
{
  WebCore::RenderObject *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  WebCore::AXObjectCache *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  WebCore::AccessibilityObject *v12;

  v2 = (WebCore::RenderObject *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL);
  if (v2)
  {
    if ((*((_BYTE *)v2 + 45) & 2) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = WebCore::AXObjectCache::get(*(WebCore::AXObjectCache **)(a1 + 8), v2);
      if (v3)
      {
        v4 = (unsigned __int8 *)v3;
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1488))(v3);
        v6 = (WebCore::AXObjectCache *)v5;
        if (v5 && *(_BYTE *)(v5 + 361)
          || ((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v4 + 2896))(v4) & 1) == 0)
        {
          v7 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v4 + 2872))(v4);
        }
        else
        {
          v7 = 1;
        }
        v8 = v4[59];
        v4[59] = v7;
        if (v6)
        {
          if (v8 == 1)
            v9 = v7;
          else
            v9 = 1;
          if (v8)
            v10 = 0;
          else
            v10 = v7;
          if (v9 != 1 || v10 != 0)
          {
            v12 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v4 + 1232))(v4);
            WebCore::AXObjectCache::childrenChanged(v6, v12);
          }
        }
      }
    }
  }
}

void WTF::Detail::CallableWrapper<WebCore::AXObjectCache::performDeferredCacheUpdate(WebCore::ForceLayout)::$_4,void,WebCore::Element &>::call(uint64_t a1, WebCore::Node *a2)
{
  WebCore::AXObjectCache::postNotification(*(WebCore::AXObjectCache **)(a1 + 8), a2, 48, 0);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AXObjectCache::performDeferredCacheUpdate(WebCore::ForceLayout)::$_6,void,WebCore::Element &>::call(uint64_t a1, WebCore::Node *a2)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  result = WebCore::AXObjectCache::get(*(WebCore::AXObjectCache **)(a1 + 8), a2);
  if (!result)
    return result;
  v4 = result;
  v5 = *(_QWORD *)(result + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v5);
LABEL_6:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_10:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v8 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_15;
  }
  result = MEMORY[0x19AEA534C](v8);
LABEL_15:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v15 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v15 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 != 1)
  {
    __clrex();
LABEL_22:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return result;
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
    goto LABEL_22;
  if (v11)
    return result;
LABEL_23:
  if (v12)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (!v13)
    return WTF::fastFree((WTF *)v8, v3);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AXObjectCache::performDeferredCacheUpdate(WebCore::ForceLayout)::$_7,void,WebCore::ScrollView &>::call(uint64_t a1, WebCore::Widget *a2)
{
  WebCore::AXObjectCache *v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  WTF *v6;

  v2 = *(WebCore::AXObjectCache **)(a1 + 8);
  result = WebCore::AXObjectCache::get(v2, a2);
  if (result)
  {
    v5 = result;
    v6 = (WTF *)*((_QWORD *)v2 + 11);
    *((_QWORD *)v2 + 11) = 0;
    if (v6)
    {
      if (*(_QWORD *)v6)
        WTF::fastFree((WTF *)(*(_QWORD *)v6 - 16), v4);
      WTF::fastFree(v6, v4);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1904))(v5);
  }
  return result;
}

uint64_t WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::rehash(uint64_t *a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v10 = (_QWORD *)(result + 24);
    do
    {
      *((_BYTE *)v10 - 8) = -1;
      v10[1] = 0;
      v10[2] = 0;
      *v10 = 0;
      v10 += 4;
      --v7;
    }
    while (v7);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v39 = v5;
    do
    {
      v14 = (_BYTE *)(v4 + 32 * v11);
      v15 = *v14;
      if (v15 != 254)
      {
        if (v15 == 255)
        {
          v16 = v4 + 32 * v11;
          v17 = *(WTF **)(v16 + 16);
          if (v17)
          {
            do
            {
              v18 = (WTF *)*((_QWORD *)v17 + 2);
              WTF::fastFree(v17, v9);
              v17 = v18;
            }
            while (v18);
          }
          v19 = *(_QWORD *)(v16 + 8);
          if (v19)
            WTF::fastFree((WTF *)(v19 - 16), v9);
        }
        else
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = 0;
          v23 = 9 * ((~(v15 << 15) + v15) ^ ((~(v15 << 15) + v15) >> 10));
          v24 = ((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) ^ (((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) >> 16);
          do
          {
            v25 = v24 & v21;
            v24 = ++v22 + v25;
          }
          while (*(unsigned __int8 *)(v20 + 32 * v25) != 255);
          v26 = v12;
          v27 = v20 + 32 * v25;
          v28 = *(WTF **)(v27 + 16);
          if (v28)
          {
            do
            {
              v29 = (WTF *)*((_QWORD *)v28 + 2);
              WTF::fastFree(v28, v9);
              v28 = v29;
            }
            while (v29);
          }
          v30 = (_QWORD *)(v27 + 8);
          v31 = *(_QWORD *)(v27 + 8);
          if (v31)
            WTF::fastFree((WTF *)(v31 - 16), v9);
          *(_BYTE *)v27 = *v14;
          v32 = v4 + 32 * v11;
          *v30 = 0;
          v34 = *(_QWORD *)(v32 + 8);
          v33 = (_QWORD *)(v32 + 8);
          *v33 = 0;
          *v30 = v34;
          v35 = v33[1];
          v33[1] = 0;
          *(_QWORD *)(v27 + 16) = v35;
          v36 = (WTF *)v33[1];
          v37 = v33[2];
          v33[2] = 0;
          *(_QWORD *)(v20 + 32 * v25 + 24) = v37;
          if (v36)
          {
            do
            {
              v38 = (WTF *)*((_QWORD *)v36 + 2);
              WTF::fastFree(v36, v9);
              v36 = v38;
            }
            while (v38);
          }
          v12 = v26;
          if (*v33)
            WTF::fastFree((WTF *)(*v33 - 16), v9);
          if (v14 == a3)
            v12 = v27;
          v13 = v39;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v9);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t k;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t j;
  uint64_t v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v53;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v50 = v5;
    do
    {
      v14 = (uint64_t *)(v4 + 16 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v53 = v12;
          v25 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
          v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
          v28 = v24 & ((v27 >> 31) ^ v27);
          v29 = 1;
          do
          {
            v30 = v28;
            v31 = *(_QWORD *)(v23 + 16 * v28);
            v28 = (v28 + v29++) & v24;
          }
          while (v31);
          v32 = (_QWORD *)(v23 + 16 * v30);
          v34 = v32 + 1;
          v33 = v32[1];
          if (v33)
          {
            v35 = *(unsigned int *)(v33 - 4);
            if ((_DWORD)v35)
            {
              for (i = 0; i != v35; ++i)
              {
                if (*(unsigned __int8 *)(v33 + 32 * i) != 254)
                {
                  v37 = v33 + 32 * i;
                  v38 = *(WTF **)(v37 + 16);
                  if (v38)
                  {
                    do
                    {
                      v39 = (WTF *)*((_QWORD *)v38 + 2);
                      WTF::fastFree(v38, v8);
                      v38 = v39;
                    }
                    while (v39);
                  }
                  v40 = *(_QWORD *)(v37 + 8);
                  if (v40)
                    WTF::fastFree((WTF *)(v40 - 16), v8);
                }
              }
            }
            WTF::fastFree((WTF *)(v33 - 16), v8);
            v15 = *v14;
          }
          *v32 = v15;
          v41 = v4 + 16 * v11;
          *v34 = 0;
          v42 = *(_QWORD *)(v41 + 8);
          *(_QWORD *)(v41 + 8) = 0;
          *v34 = v42;
          v43 = *(_QWORD *)(v41 + 8);
          if (v43)
          {
            v44 = *(unsigned int *)(v43 - 4);
            if ((_DWORD)v44)
            {
              for (j = 0; j != v44; ++j)
              {
                if (*(unsigned __int8 *)(v43 + 32 * j) != 254)
                {
                  v46 = v43 + 32 * j;
                  v47 = *(WTF **)(v46 + 16);
                  if (v47)
                  {
                    do
                    {
                      v48 = (WTF *)*((_QWORD *)v47 + 2);
                      WTF::fastFree(v47, v8);
                      v47 = v48;
                    }
                    while (v48);
                  }
                  v49 = *(_QWORD *)(v46 + 8);
                  if (v49)
                    WTF::fastFree((WTF *)(v49 - 16), v8);
                }
              }
            }
            WTF::fastFree((WTF *)(v43 - 16), v8);
          }
          v12 = v53;
          if (v14 == a3)
            v12 = v32;
          v13 = v50;
        }
        else
        {
          v16 = *(_QWORD *)(v4 + 16 * v11 + 8);
          if (v16)
          {
            v17 = *(unsigned int *)(v16 - 4);
            if ((_DWORD)v17)
            {
              for (k = 0; k != v17; ++k)
              {
                if (*(unsigned __int8 *)(v16 + 32 * k) != 254)
                {
                  v19 = v16 + 32 * k;
                  v20 = *(WTF **)(v19 + 16);
                  if (v20)
                  {
                    do
                    {
                      v21 = (WTF *)*((_QWORD *)v20 + 2);
                      WTF::fastFree(v20, v8);
                      v20 = v21;
                    }
                    while (v21);
                  }
                  v22 = *(_QWORD *)(v19 + 8);
                  if (v22)
                    WTF::fastFree((WTF *)(v22 - 16), v8);
                }
              }
            }
            WTF::fastFree((WTF *)(v16 - 16), v8);
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *,WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (!v7)
  {
    v12 = 0;
    if (!v6)
      return v12;
    goto LABEL_16;
  }
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = (_QWORD **)(v6 + 8 * v11);
    v14 = *v13;
    if ((unint64_t)*v13 + 1 >= 2)
    {
      v15 = *a1;
      if (*a1)
        v16 = *(_DWORD *)(v15 - 8);
      else
        v16 = 0;
      v17 = *v14 + ~(*v14 << 32);
      v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
      v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
      v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
      v21 = 1;
      do
      {
        v22 = v20;
        v23 = *(_QWORD *)(v15 + 8 * v20);
        v20 = (v20 + v21++) & v16;
      }
      while (v23);
      v24 = (_QWORD *)(v15 + 8 * v22);
      *v24 = v14;
      if (v13 == a3)
        v12 = v24;
    }
    ++v11;
  }
  while (v11 != v7);
  if (v6)
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  _QWORD *v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  WTF *v27;
  _QWORD *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  WTF *v36;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v8 = 0;
    v9 = v4;
    do
    {
      v10 = (uint64_t *)(v3 + 24 * v8);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = (_QWORD *)(v16 + 24 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          v25 = v23;
          v26 = v16 + 24 * v23;
          v29 = *(WTF **)(v26 + 8);
          v28 = (_QWORD *)(v26 + 8);
          v27 = v29;
          if (v29)
          {
            *v28 = 0;
            *(_DWORD *)(v16 + 24 * v23 + 16) = 0;
            WTF::fastFree(v27, v7);
            v11 = *v10;
          }
          *v24 = v11;
          v30 = v3 + 24 * v8;
          *v28 = 0;
          v28[1] = 0;
          v32 = *(_QWORD *)(v30 + 8);
          v31 = v30 + 8;
          *(_QWORD *)v31 = 0;
          *v28 = v32;
          v33 = *(_DWORD *)(v31 + 8);
          *(_DWORD *)(v31 + 8) = 0;
          v34 = v16 + 24 * v25;
          *(_DWORD *)(v34 + 16) = v33;
          v35 = *(_DWORD *)(v31 + 12);
          *(_DWORD *)(v31 + 12) = 0;
          *(_DWORD *)(v34 + 20) = v35;
          v36 = *(WTF **)v31;
          if (*(_QWORD *)v31)
          {
            *(_QWORD *)v31 = 0;
            *(_DWORD *)(v31 + 8) = 0;
            WTF::fastFree(v36, v7);
          }
        }
        else
        {
          v12 = v3 + 24 * v8;
          v15 = *(WTF **)(v12 + 8);
          v14 = (_QWORD *)(v12 + 8);
          v13 = v15;
          if (v15)
          {
            *v14 = 0;
            *(_DWORD *)(v3 + 24 * v8 + 16) = 0;
            WTF::fastFree(v13, v7);
          }
        }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  else if (!v3)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v3 - 16), v7);
}

WebCore::Node *WTF::Detail::CallableWrapper<void WebCore::Accessibility::performFunctionOnMainThreadAndWait<WebCore::partialOrder(WebCore::AXTextMarker const&,WebCore::AXTextMarker const&)::$_0>(WebCore::partialOrder(WebCore::AXTextMarker const&,WebCore::AXTextMarker const&)::$_0 &&)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  WebCore::Node *result;
  void *v4;
  void *v5;
  WebCore::Node *v6[2];
  char v7;
  WebCore::Node *v8[2];
  char v9;

  result = (WebCore::Node *)WebCore::AXTextMarker::boundaryPoint(*(_QWORD *)(a1 + 8), a2, (uint64_t)v8);
  if (v9)
  {
    result = (WebCore::Node *)WebCore::AXTextMarker::boundaryPoint(*(_QWORD *)(a1 + 16), v4, (uint64_t)v6);
    if (v7)
    {
      result = (WebCore::Node *)WebCore::treeOrder<(WebCore::TreeType)2>((int *)v8, (uint64_t)v6);
      **(_BYTE **)(a1 + 24) = (_BYTE)result;
      if (v7)
      {
        result = v6[0];
        v6[0] = 0;
        if (result)
        {
          if (*((_DWORD *)result + 6) == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v5);
          }
          else
          {
            *((_DWORD *)result + 6) -= 2;
          }
        }
      }
    }
    if (v9)
    {
      result = v8[0];
      v8[0] = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return (WebCore::Node *)WebCore::Node::removedLastRef(result, v5);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
    }
  }
  return result;
}

void WebCore::AccessibilityARIAGridCell::~AccessibilityARIAGridCell(WebCore::AccessibilityARIAGridCell *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::AccessibilityARIAGridCell::parentTable(WebCore::AccessibilityARIAGridCell *this)
{
  uint64_t result;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  result = (*(uint64_t (**)(WebCore::AccessibilityARIAGridCell *))(*(_QWORD *)this + 1232))(this);
  if (result)
  {
    v2 = result;
    do
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2))
        goto LABEL_33;
      v4 = *(_QWORD *)(v2 + 8);
      if (__ldaxr((unsigned __int8 *)v4))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v4))
      {
        goto LABEL_8;
      }
      MEMORY[0x19AEA534C](v4);
LABEL_8:
      ++*(_QWORD *)(v4 + 8);
      v6 = __ldxr((unsigned __int8 *)v4);
      if (v6 != 1)
      {
        __clrex();
LABEL_12:
        WTF::Lock::unlockSlow((WTF::Lock *)v4);
        goto LABEL_13;
      }
      if (__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_12;
LABEL_13:
      if (*(_BYTE *)(v2 + 312))
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 856))(v2) ^ 1;
      else
        v7 = 0;
      v8 = *(_QWORD *)(v2 + 8);
      if (__ldaxr((unsigned __int8 *)v8))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v8))
      {
        goto LABEL_20;
      }
      MEMORY[0x19AEA534C](v8);
LABEL_20:
      v10 = *(_QWORD *)(v8 + 8);
      v11 = v10 - 1;
      *(_QWORD *)(v8 + 8) = v10 - 1;
      if (v10 == 1)
      {
        v15 = *(_QWORD *)(v8 + 16);
        v12 = *(_QWORD *)(v8 + 24);
        *(_QWORD *)(v8 + 24) = 0;
        v13 = v15 != 0;
      }
      else
      {
        v12 = 0;
        v13 = 1;
      }
      v14 = __ldxr((unsigned __int8 *)v8);
      if (v14 != 1)
      {
        __clrex();
LABEL_27:
        WTF::Lock::unlockSlow((WTF::Lock *)v8);
        if (v11)
          goto LABEL_32;
        goto LABEL_28;
      }
      if (__stlxr(0, (unsigned __int8 *)v8))
        goto LABEL_27;
      if (v11)
        goto LABEL_32;
LABEL_28:
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      if (!v13)
        WTF::fastFree((WTF *)v8, v3);
LABEL_32:
      if ((v7 & 1) != 0)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2))
          return v2;
        else
          return 0;
      }
LABEL_33:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1232))(v2);
      v2 = result;
    }
    while (result);
  }
  return result;
}

_QWORD *WebCore::AccessibilityARIAGridCell::readOnlyValue@<X0>(WebCore::AccessibilityARIAGridCell *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::String *Attribute;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;

  if (WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_readonlyAttr))
  {
    Attribute = (WTF::String *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_readonlyAttr);
    return (_QWORD *)WTF::String::convertToASCIILowercase(Attribute);
  }
  result = (_QWORD *)WebCore::AccessibilityARIAGridCell::parentTable(this);
  if (!result)
  {
    *a2 = 0;
    return result;
  }
  v6 = result;
  v7 = result[1];
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_8:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 3152))(v6);
  v11 = v6[1];
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_17;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v11);
LABEL_17:
  v13 = *(_QWORD *)(v11 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v11 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v18 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    v16 = v18 != 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v17 = __ldxr((unsigned __int8 *)v11);
  if (v17 != 1)
  {
    __clrex();
LABEL_24:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      return result;
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
    goto LABEL_24;
  if (v14)
    return result;
LABEL_25:
  if (v15)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!v16)
    return (_QWORD *)WTF::fastFree((WTF *)v11, v10);
  return result;
}

void WebCore::AccessibilityARIAGridRow::~AccessibilityARIAGridRow(WebCore::AccessibilityARIAGridRow *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebCore::AccessibilityARIAGridRow::isARIATreeGridRow(WebCore::AccessibilityARIAGridRow *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _BOOL8 v9;
  uint64_t v11;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityARIAGridRow *))(*(_QWORD *)this + 1232))(this);
  if (!v2)
    return 0;
  v3 = (_QWORD *)v2;
  while (1)
  {
    if (!(*(unsigned int (**)(_QWORD *))(*v3 + 64))(v3) || !*((_BYTE *)v3 + 312))
      goto LABEL_17;
    if (((*(uint64_t (**)(_QWORD *))(*v3 + 3328))(v3) & 1) != 0)
      goto LABEL_22;
    v4 = *((_QWORD *)this + 31);
    if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
    {
      v6 = *((_QWORD *)this + 30);
      if (v6)
        goto LABEL_12;
      goto LABEL_17;
    }
    if (*(_BYTE *)(v5 + 46) == 49)
      break;
    if ((*(_BYTE *)(v5 + 45) & 1) == 0)
    {
      v6 = *(_QWORD *)(v5 + 24);
      goto LABEL_12;
    }
LABEL_17:
    v3 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 1232))(v3);
    if (!v3)
      return 0;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40);
LABEL_12:
  v7 = *(_QWORD *)(v6 + 8);
  if (v7)
    v8 = (*(_WORD *)(v7 + 28) & 0x10) == 0;
  else
    v8 = 1;
  if (v8 || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
    goto LABEL_17;
LABEL_22:
  if (((*(uint64_t (**)(_QWORD *))(*v3 + 64))(v3) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1955F2180);
  }
  v11 = v3[1];
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stxr(1u, (unsigned __int8 *)v11))
LABEL_26:
    MEMORY[0x19AEA534C](v11);
  ++*(_QWORD *)(v11 + 8);
  v13 = __ldxr((unsigned __int8 *)v11);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
  v9 = (*(unsigned int (**)(_QWORD *))(*v3 + 1456))(v3) == 130;
  v15 = v3[1];
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stxr(1u, (unsigned __int8 *)v15))
LABEL_35:
    MEMORY[0x19AEA534C](v15);
  v17 = *(_QWORD *)(v15 + 8);
  v18 = v17 - 1;
  *(_QWORD *)(v15 + 8) = v17 - 1;
  if (v17 == 1)
  {
    v22 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v20 = v22 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v21 = __ldxr((unsigned __int8 *)v15);
  if (v21 != 1)
  {
    __clrex();
LABEL_43:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (!v18)
      goto LABEL_44;
    return v9;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
    goto LABEL_43;
  if (!v18)
  {
LABEL_44:
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (!v20)
      WTF::fastFree((WTF *)v15, v14);
  }
  return v9;
}

uint64_t WebCore::AccessibilityARIAGridRow::parentTable(WebCore::AccessibilityARIAGridRow *this)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t result;

  v2 = (_BYTE *)(*(uint64_t (**)(WebCore::AccessibilityARIAGridRow *))(*(_QWORD *)this + 1232))(this);
  if (!v2)
    return (uint64_t)v2;
  while (1)
  {
    if (!(*(unsigned int (**)(_BYTE *))(*(_QWORD *)v2 + 64))(v2) || !v2[312])
      goto LABEL_16;
    if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 3328))(v2) & 1) != 0)
      goto LABEL_19;
    v3 = *((_QWORD *)this + 31);
    if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
    {
      v5 = *((_QWORD *)this + 30);
      if (v5)
        goto LABEL_11;
      goto LABEL_16;
    }
    if (*(_BYTE *)(v4 + 46) == 49)
      break;
    if ((*(_BYTE *)(v4 + 45) & 1) == 0)
    {
      v5 = *(_QWORD *)(v4 + 24);
      goto LABEL_11;
    }
LABEL_16:
    v2 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 1232))(v2);
    if (!v2)
      return (uint64_t)v2;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 40);
LABEL_11:
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
    v7 = (*(_WORD *)(v6 + 28) & 0x10) == 0;
  else
    v7 = 1;
  if (v7 || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
    goto LABEL_16;
LABEL_19:
  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 64))(v2) & 1) != 0)
    return (uint64_t)v2;
  result = 105;
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::AccessibilityARIAGridRow::disclosedRows@<X0>(WebCore::AccessibilityARIAGridRow *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  _QWORD *result;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  unint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = WebCore::AccessibilityARIAGridRow::parentObjectUnignored(this);
  v5 = v4;
  if (!v4)
    goto LABEL_11;
  v6 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_11:
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
  if (!(_DWORD)result || !*(_BYTE *)(v5 + 312))
  {
    v36 = *(_QWORD *)(v5 + 8);
    if (__ldaxr((unsigned __int8 *)v36))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v36))
    {
      goto LABEL_65;
    }
    result = (_QWORD *)MEMORY[0x19AEA534C](v36);
LABEL_65:
    v38 = *(_QWORD *)(v36 + 8);
    v39 = v38 - 1;
    *(_QWORD *)(v36 + 8) = v38 - 1;
    if (v38 == 1)
    {
      v58 = *(_QWORD *)(v36 + 16);
      v40 = *(_QWORD *)(v36 + 24);
      *(_QWORD *)(v36 + 24) = 0;
      v41 = v58 != 0;
    }
    else
    {
      v40 = 0;
      v41 = 1;
    }
    v42 = __ldxr((unsigned __int8 *)v36);
    if (v42 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v36))
      {
        if (v39)
          return result;
LABEL_73:
        if (v40)
          result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        if (!v41)
          return (_QWORD *)WTF::fastFree((WTF *)v36, v10);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v36);
    if (v39)
      return result;
    goto LABEL_73;
  }
  v11 = *((unsigned int *)this + 64);
  if ((v11 & 0x80000000) != 0)
    goto LABEL_95;
  v12 = WebCore::AccessibilityNodeObject::hierarchicalLevel(this);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v5 + 208))(&v62, v5);
  v14 = v11 + 1;
  if ((int)v11 + 1 >= v63)
    goto LABEL_94;
  v15 = v12 + 1;
  v16 = ~(_DWORD)v11 + v63;
  while (1)
  {
    if (v14 >= v63)
    {
      __break(0xC471u);
      return result;
    }
    v17 = *(_QWORD **)(v62 + 8 * v14);
    if (!v17)
      goto LABEL_27;
    v18 = v17[1];
    if (__ldaxr((unsigned __int8 *)v18))
    {
      __clrex();
LABEL_21:
      MEMORY[0x19AEA534C](v18);
      goto LABEL_22;
    }
    if (__stxr(1u, (unsigned __int8 *)v18))
      goto LABEL_21;
LABEL_22:
    ++*(_QWORD *)(v18 + 8);
    v20 = __ldxr((unsigned __int8 *)v18);
    if (v20 != 1)
    {
      __clrex();
LABEL_26:
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
      goto LABEL_27;
    }
    if (__stlxr(0, (unsigned __int8 *)v18))
      goto LABEL_26;
LABEL_27:
    v61 = v17;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v17 + 1744))(v17);
    if ((_DWORD)result != v15)
      break;
    v21 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v21 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v21 + 1, (unint64_t)&v61);
      v21 = *(unsigned int *)(a2 + 12);
      v22 = *(char **)a2;
      v23 = (_QWORD *)*result;
      if (!*result)
        goto LABEL_41;
    }
    else
    {
      v22 = *(char **)a2;
      v23 = v61;
      if (!v61)
        goto LABEL_41;
    }
    v24 = v23[1];
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
LABEL_35:
      result = (_QWORD *)MEMORY[0x19AEA534C](v24);
      goto LABEL_36;
    }
    if (__stxr(1u, (unsigned __int8 *)v24))
      goto LABEL_35;
LABEL_36:
    ++*(_QWORD *)(v24 + 8);
    v26 = __ldxr((unsigned __int8 *)v24);
    if (v26 != 1)
    {
      __clrex();
LABEL_40:
      result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v24);
      goto LABEL_41;
    }
    if (__stlxr(0, (unsigned __int8 *)v24))
      goto LABEL_40;
LABEL_41:
    *(_QWORD *)&v22[8 * v21] = v23;
    ++*(_DWORD *)(a2 + 12);
    v27 = v61;
    v61 = 0;
    if (!v27)
      goto LABEL_58;
    v28 = v27[1];
    if (__ldaxr((unsigned __int8 *)v28))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v28))
    {
      goto LABEL_46;
    }
    result = (_QWORD *)MEMORY[0x19AEA534C](v28);
LABEL_46:
    v30 = *(_QWORD *)(v28 + 8);
    v31 = v30 - 1;
    *(_QWORD *)(v28 + 8) = v30 - 1;
    if (v30 == 1)
    {
      v35 = *(_QWORD *)(v28 + 16);
      v32 = *(_QWORD *)(v28 + 24);
      *(_QWORD *)(v28 + 24) = 0;
      v33 = v35 != 0;
    }
    else
    {
      v32 = 0;
      v33 = 1;
    }
    v34 = __ldxr((unsigned __int8 *)v28);
    if (v34 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v28))
      {
        if (!v31)
          goto LABEL_54;
        goto LABEL_58;
      }
    }
    else
    {
      __clrex();
    }
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v28);
    if (!v31)
    {
LABEL_54:
      if (v32)
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      if (!v33)
        result = (_QWORD *)WTF::fastFree((WTF *)v28, v13);
    }
LABEL_58:
    ++v14;
    if (!--v16)
      goto LABEL_94;
  }
  v43 = v61;
  v61 = 0;
  if (!v43)
    goto LABEL_94;
  v44 = v43[1];
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
    goto LABEL_81;
  }
  if (__stxr(1u, (unsigned __int8 *)v44))
LABEL_81:
    MEMORY[0x19AEA534C](v44);
  v46 = *(_QWORD *)(v44 + 8);
  v47 = v46 - 1;
  *(_QWORD *)(v44 + 8) = v46 - 1;
  if (v46 == 1)
  {
    v60 = *(_QWORD *)(v44 + 16);
    v48 = *(_QWORD *)(v44 + 24);
    *(_QWORD *)(v44 + 24) = 0;
    v49 = v60 != 0;
  }
  else
  {
    v48 = 0;
    v49 = 1;
  }
  v50 = __ldxr((unsigned __int8 *)v44);
  if (v50 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v44))
      goto LABEL_89;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_89:
  if (!v47)
  {
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    if (!v49)
      WTF::fastFree((WTF *)v44, v13);
  }
LABEL_94:
  result = (_QWORD *)WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v13);
LABEL_95:
  v51 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v51))
  {
    __clrex();
    goto LABEL_98;
  }
  if (__stxr(1u, (unsigned __int8 *)v51))
LABEL_98:
    result = (_QWORD *)MEMORY[0x19AEA534C](v51);
  v53 = *(_QWORD *)(v51 + 8);
  v54 = v53 - 1;
  *(_QWORD *)(v51 + 8) = v53 - 1;
  if (v53 == 1)
  {
    v59 = *(_QWORD *)(v51 + 16);
    v55 = *(_QWORD *)(v51 + 24);
    *(_QWORD *)(v51 + 24) = 0;
    v56 = v59 != 0;
  }
  else
  {
    v55 = 0;
    v56 = 1;
  }
  v57 = __ldxr((unsigned __int8 *)v51);
  if (v57 != 1)
  {
    __clrex();
LABEL_106:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v51);
    if (!v54)
      goto LABEL_107;
    return result;
  }
  if (__stlxr(0, (unsigned __int8 *)v51))
    goto LABEL_106;
  if (!v54)
  {
LABEL_107:
    if (v55)
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    if (!v56)
      return (_QWORD *)WTF::fastFree((WTF *)v51, v10);
  }
  return result;
}

uint64_t WebCore::AccessibilityARIAGridRow::parentObjectUnignored(WebCore::AccessibilityARIAGridRow *this)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t i;
  uint64_t result;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityARIAGridRow *))(*(_QWORD *)this + 1232))(this);
  if (v2)
  {
    v3 = (_BYTE *)v2;
    do
    {
      if (!(*(unsigned int (**)(_BYTE *))(*(_QWORD *)v3 + 64))(v3) || !v3[312])
        goto LABEL_17;
      if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 3328))(v3) & 1) != 0)
        goto LABEL_24;
      v4 = *((_QWORD *)this + 31);
      if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
      {
        if (*(_BYTE *)(v5 + 46) == 49)
        {
          v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40);
        }
        else
        {
          if ((*(_BYTE *)(v5 + 45) & 1) != 0)
            goto LABEL_17;
          v6 = *(_QWORD *)(v5 + 24);
        }
      }
      else
      {
        v6 = *((_QWORD *)this + 30);
        if (!v6)
          goto LABEL_17;
      }
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v8 = (*(_WORD *)(v7 + 28) & 0x10) == 0;
      else
        v8 = 1;
      if (!v8 && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
      {
LABEL_24:
        if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 64))(v3) & 1) != 0)
          return (uint64_t)v3;
        result = 105;
        __break(0xC471u);
        return result;
      }
LABEL_17:
      v3 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 1232))(v3);
    }
    while (v3);
  }
  for (i = (*(uint64_t (**)(WebCore::AccessibilityARIAGridRow *))(*(_QWORD *)this + 1232))(this);
        ;
        i = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 1232))(v3))
  {
    v3 = (_BYTE *)i;
    if (!i || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)i + 856))(i))
      break;
  }
  return (uint64_t)v3;
}

uint64_t WebCore::AccessibilityTable::isExposable(WebCore::AccessibilityTable *this)
{
  return *((unsigned __int8 *)this + 312);
}

uint64_t WebCore::AccessibilityTableRow::rowIndex(WebCore::AccessibilityTableRow *this)
{
  return *((unsigned int *)this + 64);
}

_QWORD *WebCore::AccessibilityARIAGridRow::disclosedByRow(WebCore::AccessibilityARIAGridRow *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  _QWORD *result;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v2 = WebCore::AccessibilityARIAGridRow::parentObjectUnignored(this);
  v3 = v2;
  if (!v2)
    goto LABEL_11;
  v4 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3)
    && *(_BYTE *)(v3 + 312)
    && (v8 = WebCore::AccessibilityNodeObject::hierarchicalLevel(this), v8 >= 2))
  {
    v18 = v8;
    v19 = *((unsigned int *)this + 64);
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 208))(&v24, v3);
    if ((int)v19 < v25)
    {
      v21 = v18 - 1;
      v22 = v19 - 1;
      while ((int)v22 + 1 >= 1)
      {
        if (v22 >= v25)
        {
          __break(0xC471u);
          return result;
        }
        v9 = *(_QWORD *)(v24 + 8 * v22);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1744))(v9);
        --v22;
        if ((_DWORD)result == v21)
          goto LABEL_39;
      }
    }
    v9 = 0;
LABEL_39:
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v20);
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_19:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v23 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v23 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v10))
    {
      if (!v13)
        goto LABEL_27;
      return (_QWORD *)v9;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
  if (!v13)
  {
LABEL_27:
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (!v15)
      WTF::fastFree((WTF *)v10, v7);
  }
  return (_QWORD *)v9;
}

uint64_t WebCore::AccessibilityARIAGridRow::rowHeader(WebCore::AccessibilityARIAGridRow *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  (*(void (**)(WebCore::AccessibilityARIAGridRow *))(*(_QWORD *)this + 1904))(this);
  v2 = *((unsigned int *)this + 13);
  if (!(_DWORD)v2)
    return 0;
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  v4 = 8 * v2;
  while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v3 + 1456))(*v3) != 91)
  {
    ++v3;
    v4 -= 8;
    if (!v4)
      return 0;
  }
  return *v3;
}

void WebCore::AccessibilityARIATable::~AccessibilityARIATable(WebCore::AccessibilityARIATable *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityTable::~AccessibilityTable(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebCore::AccessibilityARIATable::isMultiSelectable(WebCore::AccessibilityARIATable *this)
{
  int v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v6;
  int v7;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityARIATable *))(*(_QWORD *)this + 2976))(this);
  if (v2 == 130 || v2 == 42)
  {
    v3 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_multiselectableAttr);
    if (v3 && *(_DWORD *)(v3 + 4) == 5)
    {
      v6 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v6 & 0xDF) == 0x46
          && (*(_BYTE *)(v6 + 1) & 0xDF) == 0x41
          && (*(_BYTE *)(v6 + 2) & 0xDF) == 0x4C
          && (*(_BYTE *)(v6 + 3) & 0xDF) == 0x53)
        {
          v7 = *(unsigned __int8 *)(v6 + 4);
LABEL_14:
          v4 = (v7 & 0xFFFFFFDF) == 69;
          return !v4;
        }
      }
      else if ((*(_WORD *)v6 & 0xFFDF) == 0x46
             && (*(_WORD *)(v6 + 2) & 0xFFDF) == 0x41
             && (*(_WORD *)(v6 + 4) & 0xFFDF) == 0x4C
             && (*(_WORD *)(v6 + 6) & 0xFFDF) == 0x53)
      {
        v7 = *(unsigned __int16 *)(v6 + 8);
        goto LABEL_14;
      }
    }
    v4 = 0;
    return !v4;
  }
  return 0;
}

float WebCore::AccessibilityAttachment::valueForRange(WebCore::AccessibilityAttachment *this)
{
  WTF::String *Attribute;
  float result;
  BOOL v3;

  Attribute = (WTF::String *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::progressAttr);
  v3 = 0;
  WTF::String::toFloat(Attribute, &v3);
  if (result > 1.0)
    result = 1.0;
  if (result < 0.0)
    return 0.0;
  return result;
}

uint64_t WebCore::AccessibilityAttachment::computeAccessibilityIsIgnored(WebCore::AccessibilityAttachment *this)
{
  return 0;
}

unsigned int *WebCore::AccessibilityAttachment::accessibilityText(unsigned int *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  int v43;

  v3 = *((_QWORD *)result + 31);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    if (*(_BYTE *)(v4 + 46) == 49)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v4 + 45) & 1) != 0)
        return result;
      v5 = *(_QWORD *)(v4 + 24);
    }
  }
  else
  {
    v5 = *((_QWORD *)result + 30);
    if (!v5)
      return result;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    v7 = *(_WORD *)(v6 + 28);
    if ((v7 & 0x10) != 0
      && (v7 & 0x110) != 0x110
      && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
    {
      *(_DWORD *)(v6 + 24) += 2;
      v8 = *(_QWORD *)(v6 + 104);
      if (v8)
      {
        v9 = *(_DWORD *)(v8 + 4);
        if ((v9 & 1) != 0)
        {
          v10 = *(_QWORD *)(v8 + 40);
          LODWORD(v11) = *(_DWORD *)(v8 + 52);
          if ((_DWORD)v11)
          {
LABEL_14:
            v11 = v11;
            v12 = (WTF::StringImpl **)(v10 + 8);
            while (1)
            {
              v13 = (uint64_t)*(v12 - 1);
              if (v13 == WebCore::HTMLNames::titleAttr
                || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
                && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
              {
                goto LABEL_23;
              }
              v12 += 2;
              if (!--v11)
              {
                v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                goto LABEL_23;
              }
            }
          }
        }
        else
        {
          v10 = v8 + 32;
          LODWORD(v11) = v9 >> 5;
          if (v9 >> 5)
            goto LABEL_14;
        }
      }
      v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_23:
      v14 = *v12;
      if (*v12 && *((_DWORD *)v14 + 1))
        goto LABEL_29;
      v15 = *(_QWORD *)(v6 + 120);
      if (!v15)
      {
        v14 = 0;
        goto LABEL_30;
      }
      v14 = *(WTF::StringImpl **)(v15 + 144);
      if (v14)
LABEL_29:
        *(_DWORD *)v14 += 2;
LABEL_30:
      if (v8)
      {
        v16 = *(_DWORD *)(v8 + 4);
        if ((v16 & 1) != 0)
        {
          v17 = *(_QWORD *)(v8 + 40);
          LODWORD(v18) = *(_DWORD *)(v8 + 52);
          if ((_DWORD)v18)
          {
LABEL_33:
            v18 = v18;
            v19 = (WTF::StringImpl **)(v17 + 8);
            while (1)
            {
              v20 = (uint64_t)*(v19 - 1);
              if (v20 == WebCore::HTMLNames::subtitleAttr
                || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::subtitleAttr + 24)
                && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::subtitleAttr + 32))
              {
                break;
              }
              v19 += 2;
              if (!--v18)
              {
                v19 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                break;
              }
            }
LABEL_42:
            result = (unsigned int *)WebCore::AccessibilityObject::getAttribute((WebCore::AccessibilityObject *)result, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::actionAttr);
            v22 = *(WTF::StringImpl **)result;
            if (*(_QWORD *)result && *((_DWORD *)v22 + 1))
            {
              *(_DWORD *)v22 += 2;
              v42 = v22;
              v43 = 10;
              v23 = *(unsigned int *)(a2 + 12);
              if ((_DWORD)v23 == *(_DWORD *)(a2 + 8))
              {
                v24 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v23 + 1, (unint64_t)&v42);
                v23 = *(unsigned int *)(a2 + 12);
                v25 = *(_QWORD *)a2 + 16 * v23;
                v26 = *(_QWORD *)v24;
                *(_QWORD *)v24 = 0;
                *(_QWORD *)v25 = v26;
                *(_DWORD *)(v25 + 8) = *(_DWORD *)(v24 + 8);
              }
              else
              {
                v27 = *(_QWORD *)a2;
                v42 = 0;
                v28 = v27 + 16 * v23;
                *(_QWORD *)v28 = v22;
                *(_DWORD *)(v28 + 8) = 10;
              }
              *(_DWORD *)(a2 + 12) = v23 + 1;
              result = (unsigned int *)v42;
              v42 = 0;
              if (result)
              {
                if (*result == 2)
                {
                  result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
                  if (!v14)
                    goto LABEL_57;
LABEL_51:
                  if (*((_DWORD *)v14 + 1))
                  {
                    *(_DWORD *)v14 += 2;
                    v42 = v14;
                    v43 = 8;
                    v29 = *(unsigned int *)(a2 + 12);
                    if ((_DWORD)v29 == *(_DWORD *)(a2 + 8))
                    {
                      v30 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v29 + 1, (unint64_t)&v42);
                      v31 = *(unsigned int *)(a2 + 12);
                      v32 = *(_QWORD *)a2 + 16 * v31;
                      v33 = *(_QWORD *)v30;
                      *(_QWORD *)v30 = 0;
                      *(_QWORD *)v32 = v33;
                      *(_DWORD *)(v32 + 8) = *(_DWORD *)(v30 + 8);
                      result = (unsigned int *)v42;
                      *(_DWORD *)(a2 + 12) = v31 + 1;
                      v42 = 0;
                      if (result)
                      {
                        if (*result == 2)
                          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
                        else
                          *result -= 2;
                      }
                    }
                    else
                    {
                      v34 = *(_QWORD *)a2 + 16 * v29;
                      *(_QWORD *)v34 = v14;
                      *(_DWORD *)(v34 + 8) = 8;
                      *(_DWORD *)(a2 + 12) = v29 + 1;
                    }
                  }
LABEL_57:
                  v35 = *v19;
                  if (*v19 && *((_DWORD *)v35 + 1))
                  {
                    *(_DWORD *)v35 += 2;
                    v42 = v35;
                    v43 = 9;
                    v36 = *(unsigned int *)(a2 + 12);
                    if ((_DWORD)v36 == *(_DWORD *)(a2 + 8))
                    {
                      v37 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v36 + 1, (unint64_t)&v42);
                      v38 = *(unsigned int *)(a2 + 12);
                      v39 = *(_QWORD *)a2 + 16 * v38;
                      v40 = *(_QWORD *)v37;
                      *(_QWORD *)v37 = 0;
                      *(_QWORD *)v39 = v40;
                      *(_DWORD *)(v39 + 8) = *(_DWORD *)(v37 + 8);
                      result = (unsigned int *)v42;
                      *(_DWORD *)(a2 + 12) = v38 + 1;
                      v42 = 0;
                      if (result)
                      {
                        if (*result == 2)
                        {
                          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
                          if (!v14)
                          {
LABEL_68:
                            if (*(_DWORD *)(v6 + 24) == 2)
                            {
                              if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                                return WebCore::Node::removedLastRef((WebCore::Node *)v6, v21);
                            }
                            else
                            {
                              *(_DWORD *)(v6 + 24) -= 2;
                            }
                            return result;
                          }
                        }
                        else
                        {
                          *result -= 2;
                          if (!v14)
                            goto LABEL_68;
                        }
LABEL_66:
                        if (*(_DWORD *)v14 == 2)
                          result = (unsigned int *)WTF::StringImpl::destroy(v14, v21);
                        else
                          *(_DWORD *)v14 -= 2;
                        goto LABEL_68;
                      }
                    }
                    else
                    {
                      v41 = *(_QWORD *)a2 + 16 * v36;
                      *(_QWORD *)v41 = v35;
                      *(_DWORD *)(v41 + 8) = 9;
                      *(_DWORD *)(a2 + 12) = v36 + 1;
                    }
                  }
                  if (!v14)
                    goto LABEL_68;
                  goto LABEL_66;
                }
                *result -= 2;
              }
            }
            if (!v14)
              goto LABEL_57;
            goto LABEL_51;
          }
        }
        else
        {
          v17 = v8 + 32;
          LODWORD(v18) = v16 >> 5;
          if ((_DWORD)v18)
            goto LABEL_33;
        }
      }
      v19 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      goto LABEL_42;
    }
  }
  return result;
}

void WebCore::AccessibilityImageMapLink::~AccessibilityImageMapLink(WebCore::AccessibilityImageMapLink *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v12 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v12)
      {
        v18 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v12));
        v3 = v18;
      }
      v13 = *(WTF **)(v3 + 16);
      if (v13)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v16 = v3;
        WTF::fastFree(v13, a2);
        v3 = v16;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v14 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v14)
      {
        v19 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v14));
        v6 = v19;
      }
      v15 = *(WTF **)(v6 + 16);
      if (v15)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v17 = v6;
        WTF::fastFree(v15, a2);
        v6 = v17;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  *(_QWORD *)this = off_1E337C0A8;
  v9 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityImageMapLink::~AccessibilityImageMapLink(this, a2);
  WTF::fastFree(v2, v3);
}

double WebCore::AccessibilityImageMapLink::setHTMLAreaElement(WebCore::AccessibilityImageMapLink *this, WebCore::HTMLAreaElement *a2)
{
  WebCore::HTMLAreaElement *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  double result;
  WebCore::AXObjectCache *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (WebCore::HTMLAreaElement *)*((_QWORD *)this + 31);
  if (v3)
    v3 = (WebCore::HTMLAreaElement *)*((_QWORD *)v3 + 1);
  if (v3 != a2)
  {
    if (a2)
    {
      v4 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)a2);
      v5 = v4;
      if (v4)
      {
        do
          v6 = __ldaxr(v4);
        while (__stlxr(v6 + 1, v4));
      }
    }
    else
    {
      v5 = 0;
    }
    v7 = *((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = v5;
    if (v7)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v7);
        v14 = *(unsigned int *)(v7 + 28);
        if ((_DWORD)v14)
        {
          v17 = v7;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v14));
          v7 = v17;
        }
        v15 = *(WTF **)(v7 + 16);
        if (v15)
        {
          *(_QWORD *)(v7 + 16) = 0;
          *(_DWORD *)(v7 + 24) = 0;
          v16 = v7;
          WTF::fastFree(v15, a2);
          v7 = v16;
        }
        WTF::fastFree((WTF *)v7, a2);
      }
    }
    v10 = *((unsigned __int8 *)this + 57);
    v11 = (*(uint64_t (**)(WebCore::AccessibilityImageMapLink *))(*(_QWORD *)this + 3016))(this);
    *((_BYTE *)this + 57) = v11;
    if (v10 != v11)
    {
      v13 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityImageMapLink *))(*(_QWORD *)this + 1488))(this);
      if (v13)
        return WebCore::AXObjectCache::handleRoleChanged(v13, this);
    }
  }
  return result;
}

_QWORD *WebCore::AccessibilityImageMapLink::parentObject(WebCore::AccessibilityImageMapLink *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  WebCore::AXObjectCache *v5;
  WebCore::RenderObject *v6;
  WebCore::AccessibilityImageMapLink *v8;
  uint64_t v9;
  WebCore::AXObjectCache *v11;
  WebCore::AXObjectCache **v12;
  WebCore::AXObjectCache *v13;
  WebCore::AXObjectCache *v14;
  uint64_t v15;

  v1 = *((_QWORD *)this + 30);
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 8);
    if (v2)
      return v2;
  }
  v2 = (_QWORD *)*((_QWORD *)this + 32);
  if (!v2)
    return v2;
  v2 = (_QWORD *)v2[1];
  if (!v2)
    return v2;
  if ((v2[8] & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((v2[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1955F3510);
  }
  v3 = *(_QWORD *)(v2[5] + 8);
  v4 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v4 & 1) != 0)
  {
    v8 = this;
    v9 = WebCore::Document::topDocument(v3);
    *(_DWORD *)(v9 + 24) += 2;
    v15 = v9;
    if (*(_QWORD *)(v9 + 1944) && *(_BYTE *)(v9 + 3405) == 0)
    {
      v12 = (WebCore::AXObjectCache **)v9;
      v11 = *(WebCore::AXObjectCache **)(v9 + 1488);
      if (!v11)
      {
        v13 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
        v14 = WebCore::AXObjectCache::AXObjectCache(v13, (WebCore::Document *)v12);
        std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v12 + 186, &v14);
        std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v14);
        WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
        v11 = v12[186];
      }
    }
    else
    {
      v11 = 0;
    }
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
    this = v8;
    v5 = v11;
  }
  else
  {
    v5 = 0;
  }
  v6 = (WebCore::RenderObject *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 8) + 64) & 0xFFFFFFFFFFFFLL);
  if (!v6)
    return 0;
  if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1955F3530);
  }
  return (_QWORD *)WebCore::AXObjectCache::getOrCreate(v5, v6);
}

uint64_t WebCore::AccessibilityImageMapLink::determineAccessibilityRole(WebCore::AccessibilityImageMapLink *this)
{
  uint64_t v1;
  WebCore::AccessibilityObject *Attribute;
  const WTF::String *v3;

  v1 = *((_QWORD *)this + 31);
  if (v1
    && *(_QWORD *)(v1 + 8)
    && (Attribute = (WebCore::AccessibilityObject *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::roleAttr), *(_QWORD *)Attribute)&& *(_DWORD *)(*(_QWORD *)Attribute + 4))
  {
    return WebCore::AccessibilityObject::ariaRoleToWebCoreRole(Attribute, v3);
  }
  else
  {
    return 139;
  }
}

uint64_t WebCore::AccessibilityImageMapLink::actionElement(WebCore::AccessibilityImageMapLink *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::AccessibilityImageMapLink::anchorElement(WebCore::AccessibilityImageMapLink *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

WTF::StringImpl *WebCore::AccessibilityImageMapLink::url@<X0>(WebCore::AccessibilityImageMapLink *this@<X0>, WTF::URL *a2@<X8>)
{
  uint64_t v2;
  WebCore::HTMLAnchorElement *v3;

  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    v3 = *(WebCore::HTMLAnchorElement **)(v2 + 8);
    if (v3)
      return WebCore::HTMLAnchorElement::href(v3, a2);
  }
  *(_QWORD *)a2 = 0;
  return (WTF::StringImpl *)WTF::URL::invalidate(a2);
}

WTF::StringImpl *WebCore::AccessibilityImageMapLink::accessibilityText(WebCore::AccessibilityObject *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;

  WebCore::AccessibilityObject::getAttributeTrimmed(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr, &v34);
  v4 = v34;
  if (v34 && *((_DWORD *)v34 + 1))
    goto LABEL_9;
  v4 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::altAttr);
  if (v4)
  {
    if (*((_DWORD *)v4 + 1))
      *(_DWORD *)v4 += 2;
    else
      v4 = 0;
  }
  v6 = v34;
  v34 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v5);
      if (!v4)
        goto LABEL_7;
      goto LABEL_9;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (!v4)
  {
LABEL_7:
    v7 = 1;
    goto LABEL_18;
  }
LABEL_9:
  if (*((_DWORD *)v4 + 1))
  {
    *(_DWORD *)v4 += 2;
    v34 = v4;
    v35 = 0;
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v8 == *(_DWORD *)(a2 + 8))
    {
      v9 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v8 + 1, (unint64_t)&v34);
      v11 = *(unsigned int *)(a2 + 12);
      v12 = *(_QWORD *)a2 + 16 * v11;
      v13 = *(_QWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)v12 = v13;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v9 + 8);
      v14 = v34;
      *(_DWORD *)(a2 + 12) = v11 + 1;
      v34 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v10);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    else
    {
      v15 = *(_QWORD *)a2 + 16 * v8;
      *(_QWORD *)v15 = v4;
      *(_DWORD *)(v15 + 8) = 0;
      *(_DWORD *)(a2 + 12) = v8 + 1;
    }
  }
  v7 = 0;
LABEL_18:
  v16 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::titleAttr);
  if (v16 && *((_DWORD *)v16 + 1))
  {
    *(_DWORD *)v16 += 2;
    v34 = v16;
    v35 = 5;
    v20 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v20 == *(_DWORD *)(a2 + 8))
    {
      v21 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v20 + 1, (unint64_t)&v34);
      v23 = *(unsigned int *)(a2 + 12);
      v24 = *(_QWORD *)a2 + 16 * v23;
      v25 = *(_QWORD *)v21;
      *(_QWORD *)v21 = 0;
      *(_QWORD *)v24 = v25;
      *(_DWORD *)(v24 + 8) = *(_DWORD *)(v21 + 8);
      v26 = v34;
      *(_DWORD *)(a2 + 12) = v23 + 1;
      v34 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v22);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
    else
    {
      v32 = *(_QWORD *)a2 + 16 * v20;
      *(_QWORD *)v32 = v16;
      *(_DWORD *)(v32 + 8) = 5;
      *(_DWORD *)(a2 + 12) = v20 + 1;
    }
  }
  result = (WTF::StringImpl *)WebCore::AccessibilityObject::getAttribute(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::summaryAttr);
  v19 = *(WTF::StringImpl **)result;
  if (*(_QWORD *)result && *((_DWORD *)v19 + 1))
  {
    *(_DWORD *)v19 += 2;
    v34 = v19;
    v35 = 2;
    v27 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v27 == *(_DWORD *)(a2 + 8))
    {
      v28 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v27 + 1, (unint64_t)&v34);
      v29 = *(unsigned int *)(a2 + 12);
      v30 = *(_QWORD *)a2 + 16 * v29;
      v31 = *(_QWORD *)v28;
      *(_QWORD *)v28 = 0;
      *(_QWORD *)v30 = v31;
      *(_DWORD *)(v30 + 8) = *(_DWORD *)(v28 + 8);
      result = v34;
      *(_DWORD *)(a2 + 12) = v29 + 1;
      v34 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v33 = *(_QWORD *)a2 + 16 * v27;
      *(_QWORD *)v33 = v19;
      *(_DWORD *)(v33 + 8) = 2;
      *(_DWORD *)(a2 + 12) = v27 + 1;
    }
  }
  if ((v7 & 1) == 0)
  {
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v18);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::AccessibilityImageMapLink::description@<X0>(WebCore::AccessibilityImageMapLink *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  result = (WTF::StringImpl *)WebCore::AccessibilityObject::getAttributeTrimmed(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr, &v7);
  if (v7 && *((_DWORD *)v7 + 1))
  {
    *a2 = v7;
  }
  else
  {
    v6 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::altAttr);
    if (v6)
    {
      if (*((_DWORD *)v6 + 1))
        *(_DWORD *)v6 += 2;
      else
        v6 = 0;
    }
    *a2 = v6;
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::AccessibilityImageMapLink::title@<X0>(WebCore::AccessibilityImageMapLink *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v5;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::titleAttr);
  v5 = (_DWORD *)*result;
  if (*result && v5[1])
    goto LABEL_6;
  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::summaryAttr);
  v5 = (_DWORD *)*result;
  if (*result)
  {
    if (v5[1])
    {
LABEL_6:
      *v5 += 2;
      goto LABEL_7;
    }
    v5 = 0;
  }
LABEL_7:
  *a2 = v5;
  return result;
}

uint64_t WebCore::AccessibilityImageMapLink::imageMapLinkRenderer(WebCore::AccessibilityImageMapLink *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v1 = *((_QWORD *)this + 32);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v4 = *((_QWORD *)this + 31);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return 0;
  v5 = *((_QWORD *)this + 30);
  if (v5)
  {
    v6 = *(_QWORD **)(v5 + 8);
    if (v6)
    {
      if (((*(uint64_t (**)(_QWORD))(*v6 + 56))(*(_QWORD *)(v5 + 8)) & 1) != 0)
      {
        v7 = v6[31];
        if (v7)
        {
          result = *(_QWORD *)(v7 + 8);
          if (result && (*(_BYTE *)(result + 45) & 2) != 0)
            goto LABEL_17;
          return result;
        }
        return 0;
      }
      v2 = *(_QWORD *)(*((_QWORD *)this + 32) + 8);
    }
  }
  result = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (result && (*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x1955F3B10);
  }
  return result;
}

uint64_t WebCore::AccessibilityImageMapLink::detachFromParent(WebCore::AccessibilityImageMapLink *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v12 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v12)
      {
        v19 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v12));
        v6 = v19;
      }
      v13 = *(WTF **)(v6 + 16);
      if (v13)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v18 = v6;
        WTF::fastFree(v13, a2);
        v6 = v18;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  result = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (result)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)result));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)result);
      v14 = *(unsigned int *)(result + 28);
      if ((_DWORD)v14)
      {
        v17 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v14));
        result = v17;
      }
      v15 = *(WTF **)(result + 16);
      if (v15)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v16 = result;
        WTF::fastFree(v15, a2);
        result = v16;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebCore::AccessibilityImageMapLink::elementPath(WebCore::AccessibilityImageMapLink *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WebCore::RenderObject *v5;
  uint64_t v6;
  WebCore::HTMLAreaElement *v7;

  v4 = WebCore::AccessibilityImageMapLink::imageMapLinkRenderer(this);
  if (v4)
  {
    v5 = (WebCore::RenderObject *)v4;
    v6 = *((_QWORD *)this + 31);
    if (v6)
      v7 = *(WebCore::HTMLAreaElement **)(v6 + 8);
    else
      v7 = 0;
    WebCore::HTMLAreaElement::computePath(v7, v5, a2);
  }
  else
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

uint64_t WebCore::AccessibilityImageMapLink::elementRect(WebCore::AccessibilityImageMapLink *this)
{
  uint64_t v2;
  WebCore::RenderObject *v3;
  uint64_t v4;
  WebCore::HTMLAreaElement *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const WebCore::FloatRect *v11;
  _DWORD v13[4];
  char v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = WebCore::AccessibilityImageMapLink::imageMapLinkRenderer(this);
  if (!v2)
    return 0;
  v3 = (WebCore::RenderObject *)v2;
  v4 = *((_QWORD *)this + 31);
  if (v4)
    v5 = *(WebCore::HTMLAreaElement **)(v4 + 8);
  else
    v5 = 0;
  WebCore::HTMLAreaElement::computePath(v5, v3, (uint64_t)v15);
  WebCore::Path::fastBoundingRect((WebCore::Path *)v15);
  v13[0] = v7;
  v13[1] = v8;
  v13[2] = v9;
  v13[3] = v10;
  v6 = WebCore::enclosingLayoutRect((WebCore *)v13, v11);
  if (v17 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v17])(&v14, &v16);
  return v6;
}

void WebCore::AccessibilityLabel::~AccessibilityLabel(WebCore::AccessibilityLabel *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebCore::AccessibilityLabel::computeAccessibilityIsIgnored(WebCore::AccessibilityLabel *this)
{
  return WebCore::AccessibilityObject::defaultObjectInclusion(this) == 1;
}

unsigned int *WebCore::AccessibilityLabel::stringValue@<X0>(WebCore::AccessibilityLabel *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  if ((*((_BYTE *)this + 256) & 1) != 0)
  {
    if ((WebCore::childrenContainOnlyStaticText((uint64_t)this + 40) & 1) != 0)
      return WebCore::AccessibilityRenderObject::textUnderElement((uint64_t)this, 0x100010000, 0, a2);
  }
  else if ((*((_BYTE *)this + 256) & 2) != 0)
  {
    return WebCore::AccessibilityRenderObject::textUnderElement((uint64_t)this, 0x100010000, 0, a2);
  }
  return (unsigned int *)WebCore::AccessibilityNodeObject::stringValue(this, a2);
}

uint64_t WebCore::childrenContainOnlyStaticText(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;

  v1 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v1)
    return 0;
  v2 = *(_QWORD **)a1;
  v3 = 8 * v1;
  do
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v2 + 1456))(*v2) != 107)
    {
      v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 1456))(*v2);
      if (v4 != 127 && v4 != 44)
        return 0;
      v5 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v2 + 1896))(*v2, 1);
      result = WebCore::childrenContainOnlyStaticText(v5);
      if (!(_DWORD)result)
        return result;
    }
    ++v2;
    v3 -= 8;
  }
  while (v3);
  return 1;
}

uint64_t WebCore::AccessibilityLabel::updateChildrenIfNecessary(WebCore::AccessibilityLabel *this)
{
  uint64_t result;
  char v3;
  char v4;

  if ((*(unsigned int (**)(WebCore::AccessibilityLabel *))(*(_QWORD *)this + 3112))(this))
    (*(void (**)(WebCore::AccessibilityLabel *))(*(_QWORD *)this + 3104))(this);
  result = (uint64_t)WebCore::AccessibilityObject::updateChildrenIfNecessary(this);
  v3 = *((_BYTE *)this + 256);
  if ((v3 & 1) != 0)
  {
    result = WebCore::childrenContainOnlyStaticText((uint64_t)this + 40);
    if ((_DWORD)result)
      v4 = 2;
    else
      v4 = 0;
    v3 = *((_BYTE *)this + 256) & 0xFD | v4;
  }
  *((_BYTE *)this + 256) = v3 & 0xFE;
  return result;
}

WTF *WebCore::AccessibilityLabel::clearChildren(WebCore::AccessibilityLabel *this)
{
  WTF *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *result;

  v2 = (WebCore::AccessibilityLabel *)((char *)this + 40);
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *v3++;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1912))(v6);
      v5 -= 8;
    }
    while (v5);
  }
  result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v2, 0);
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 232) = 0;
  *((_BYTE *)this + 256) &= 0xFCu;
  return result;
}

uint64_t WebCore::AccessibilityLabel::insertChild(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t result;

  result = WebCore::AccessibilityObject::insertChild(a1, a2, a3, a4);
  *(_BYTE *)(a1 + 256) |= 1u;
  return result;
}

void WebCore::AccessibilityList::~AccessibilityList(WebCore::AccessibilityList *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebCore::AccessibilityList::computeAccessibilityIsIgnored(WebCore::AccessibilityList *this)
{
  return WebCore::AccessibilityObject::defaultObjectInclusion(this) == 1;
}

BOOL WebCore::AccessibilityList::isUnorderedList(WebCore::AccessibilityList *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_BYTE *)this + 234) == 66)
    return 1;
  v2 = *((_QWORD *)this + 31);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
  {
    v4 = *((_QWORD *)this + 30);
    if (v4)
      goto LABEL_9;
    return 0;
  }
  if (*(_BYTE *)(v3 + 46) == 49)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40);
    goto LABEL_9;
  }
  if ((*(_BYTE *)(v3 + 45) & 1) != 0)
    return 0;
  v4 = *(_QWORD *)(v3 + 24);
LABEL_9:
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5 || (*(_WORD *)(v5 + 28) & 0x10) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
  if (v6 == *(_QWORD *)(WebCore::HTMLNames::menuTag + 24))
    return 1;
  return v6 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24);
}

BOOL WebCore::AccessibilityList::isOrderedList(WebCore::AccessibilityList *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*((_BYTE *)this + 234) == 27)
    return 1;
  v2 = *((_QWORD *)this + 31);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    if (*(_BYTE *)(v3 + 46) == 49)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v3 + 45) & 1) != 0)
        return 0;
      v4 = *(_QWORD *)(v3 + 24);
    }
  }
  else
  {
    v4 = *((_QWORD *)this + 30);
    if (!v4)
      return 0;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 && (*(_WORD *)(v5 + 28) & 0x10) != 0)
    return *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::olTag + 24);
  return 0;
}

BOOL WebCore::AccessibilityList::isDescriptionList(WebCore::AccessibilityList *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    if (*(_BYTE *)(v2 + 46) == 49)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v2 + 45) & 1) != 0)
        return 0;
      v3 = *(_QWORD *)(v2 + 24);
    }
  }
  else
  {
    v3 = *((_QWORD *)this + 30);
    if (!v3)
      return 0;
  }
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 && (*(_WORD *)(v4 + 28) & 0x10) != 0)
    return *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24);
  return 0;
}

uint64_t WebCore::AccessibilityList::childHasPseudoVisibleListItemMarkers(WebCore::AccessibilityList *this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v4;
  WebCore::AXObjectCache *v5;
  WebCore::RenderObject *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;

  if (!a2)
    return 0;
  if ((*((_WORD *)a2 + 14) & 8) == 0)
    return 0;
  if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v4 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0xA8);
  if (!v4)
    return 0;
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (WebCore::AXObjectCache *)WebCore::AccessibilityObject::axObjectCache(this);
  v6 = (WebCore::RenderObject *)(*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL);
  if (v6)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1955F443CLL);
    }
    v7 = WebCore::AXObjectCache::getOrCreate(v5, v6);
    if (v7)
    {
      v8 = (_QWORD *)v7;
      v9 = *(_QWORD *)(v7 + 8);
      if (__ldaxr((unsigned __int8 *)v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v9))
      {
        goto LABEL_14;
      }
      MEMORY[0x19AEA534C](v9);
LABEL_14:
      ++*(_QWORD *)(v9 + 8);
      v11 = __ldxr((unsigned __int8 *)v9);
      if (v11 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
        {
LABEL_19:
          if ((*(unsigned int (**)(_QWORD *))(*v8 + 856))(v8))
          {
            v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v8 + 1896))(v8, 1);
            v13 = *(unsigned int *)(v12 + 12);
            if ((_DWORD)v13)
            {
              v14 = *(uint64_t **)v12;
              v15 = 8 * v13 - 8;
              do
              {
                v16 = *v14++;
                v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 856))(v16);
                if (v17)
                  v18 = v15 == 0;
                else
                  v18 = 1;
                v15 -= 8;
              }
              while (!v18);
              v2 = v17 ^ 1u;
            }
            else
            {
              v2 = 0;
            }
          }
          else
          {
            v2 = 1;
          }
          v19 = v8[1];
          if (__ldaxr((unsigned __int8 *)v19))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v19))
          {
            goto LABEL_35;
          }
          MEMORY[0x19AEA534C](v19);
LABEL_35:
          v21 = *(_QWORD *)(v19 + 8);
          v22 = v21 - 1;
          *(_QWORD *)(v19 + 8) = v21 - 1;
          if (v21 == 1)
          {
            v26 = *(_QWORD *)(v19 + 16);
            v23 = *(_QWORD *)(v19 + 24);
            *(_QWORD *)(v19 + 24) = 0;
            v24 = v26 != 0;
          }
          else
          {
            v23 = 0;
            v24 = 1;
          }
          v25 = __ldxr((unsigned __int8 *)v19);
          if (v25 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v19))
            {
LABEL_42:
              if (!v22)
              {
                if (v23)
                  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
                if (!v24)
                  WTF::fastFree((WTF *)v19, v6);
              }
              goto LABEL_47;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v19);
          goto LABEL_42;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_19;
    }
  }
  v2 = 0;
LABEL_47:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return v2;
}

uint64_t WebCore::AccessibilityList::determineAccessibilityRole(WebCore::AccessibilityList *this)
{
  int v2;
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int HasPseudoVisibleListItemMarkers;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WebCore::Node *v28;
  uint64_t v29;
  uint64_t v30;

  v2 = WebCore::AccessibilityNodeObject::determineAriaRoleAttribute(this);
  *((_BYTE *)this + 234) = v2;
  result = 66;
  if (v2 == 27)
    return result;
  v4 = *((_BYTE *)this + 57);
  *((_BYTE *)this + 57) = 66;
  (*(void (**)(WebCore::AccessibilityList *))(*(_QWORD *)this + 1904))(this);
  v5 = *((_QWORD *)this + 31);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
  {
    v7 = *((_QWORD *)this + 30);
    if (!v7)
      goto LABEL_15;
LABEL_8:
    v8 = *(_QWORD *)(v7 + 8);
    if (v8
      && (*(_WORD *)(v8 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24)
      && *((_DWORD *)this + 13) != 0)
    {
      result = 23;
      goto LABEL_72;
    }
    goto LABEL_15;
  }
  if (*(_BYTE *)(v6 + 46) == 49)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40);
    goto LABEL_8;
  }
  if ((*(_BYTE *)(v6 + 45) & 1) == 0)
  {
    v7 = *(_QWORD *)(v6 + 24);
    goto LABEL_8;
  }
LABEL_15:
  v10 = *((unsigned int *)this + 13);
  if (!(_DWORD)v10)
  {
    if (*((unsigned __int8 *)this + 234) == 134)
      goto LABEL_64;
    goto LABEL_71;
  }
  v11 = 0;
  v12 = 0;
  v13 = (_QWORD *)*((_QWORD *)this + 5);
  v14 = 8 * v10;
  do
  {
    v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 840))(*v13);
    v16 = v15;
    if (v15)
      *(_DWORD *)(v15 + 24) += 2;
    v17 = *v13;
    if (*v13
      && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v17 + 48))(*v13)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 2976))(v17) == 69)
    {
      goto LABEL_46;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v13 + 1456))(*v13) != 69)
      goto LABEL_47;
    v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 848))(*v13);
    if (v19 && *(_BYTE *)(v19 + 46) == 19)
    {
      if ((v12 & 1) != 0)
      {
        HasPseudoVisibleListItemMarkers = 0;
LABEL_45:
        v12 |= HasPseudoVisibleListItemMarkers;
LABEL_46:
        ++v11;
LABEL_47:
        if (!v16)
          goto LABEL_50;
        goto LABEL_48;
      }
      v23 = v19;
      if ((*(_BYTE *)(v19 + 45) & 2) != 0)
        v23 = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8);
      v24 = *(_QWORD *)(v23 + 104);
      v25 = *(unsigned __int8 *)(v24 + 368);
      v26 = *(WTF::StringImpl **)(v24 + 376);
      if (v26)
        *(_DWORD *)v26 += 2;
      if (v25 != 2)
        goto LABEL_42;
      v27 = v19;
      if ((*(_BYTE *)(v19 + 45) & 2) != 0)
        v27 = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8);
      if (!*(_QWORD *)(*(_QWORD *)(v27 + 104) + 8))
      {
        if ((*(_BYTE *)(v19 + 45) & 1) != 0)
          v28 = 0;
        else
          v28 = *(WebCore::Node **)(*(_QWORD *)(v19 + 24) + 8);
        HasPseudoVisibleListItemMarkers = WebCore::AccessibilityList::childHasPseudoVisibleListItemMarkers(this, v28);
        if (!v26)
          goto LABEL_45;
      }
      else
      {
LABEL_42:
        HasPseudoVisibleListItemMarkers = 1;
        if (!v26)
          goto LABEL_45;
      }
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v18);
      else
        *(_DWORD *)v26 -= 2;
      goto LABEL_45;
    }
    if (!v16)
      goto LABEL_50;
    if ((*(_WORD *)(v16 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::liTag + 24))
    {
      if (*((_BYTE *)this + 234) == 66)
        v21 = v11 + 1;
      else
        v21 = v11;
      v22 = WebCore::AccessibilityList::childHasPseudoVisibleListItemMarkers(this, (WebCore::Node *)v16);
      v12 |= v22;
      v11 = v21 + v22;
    }
LABEL_48:
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v18);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
LABEL_50:
    ++v13;
    v14 -= 8;
  }
  while (v14);
  if (*((unsigned __int8 *)this + 234) != 134)
  {
    if (v11)
      goto LABEL_70;
LABEL_71:
    result = 44;
    goto LABEL_72;
  }
  if ((v12 & 1) != 0)
    goto LABEL_70;
LABEL_64:
  v29 = (*(uint64_t (**)(WebCore::AccessibilityList *))(*(_QWORD *)this + 1232))(this);
  if (!v29)
    goto LABEL_71;
  v30 = v29;
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 1456))(v30) != 60)
  {
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 1232))(v30);
    if (!v30)
      goto LABEL_71;
  }
LABEL_70:
  result = 66;
LABEL_72:
  *((_BYTE *)this + 57) = v4;
  return result;
}

uint64_t WebCore::AccessibilityARIAGridCell::isAccessibilityARIAGridCellInstance(WebCore::AccessibilityARIAGridCell *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityTableCell::isTableCell(WebCore::AccessibilityTableCell *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityARIAGridRow::isAccessibilityARIAGridRowInstance(WebCore::AccessibilityARIAGridRow *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityTable::isAccessibilityTableInstance(WebCore::AccessibilityTable *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityTable::isTable(WebCore::AccessibilityTable *this)
{
  return 1;
}

BOOL WebCore::AccessibilityARIATable::supportsSelectedRows(WebCore::AccessibilityARIATable *this)
{
  int v1;

  v1 = (*(uint64_t (**)(WebCore::AccessibilityARIATable *))(*(_QWORD *)this + 2976))(this);
  return v1 == 42 || v1 == 130;
}

uint64_t WebCore::AccessibilityARIATable::isAriaTable(WebCore::AccessibilityARIATable *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityARIATable::computeIsTableExposableThroughAccessibility(WebCore::AccessibilityARIATable *this)
{
  return 1;
}

void WebCore::AccessibilityAttachment::~AccessibilityAttachment(WebCore::AccessibilityAttachment *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::AccessibilityAttachment::isAttachmentElement(WebCore::AccessibilityAttachment *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityAttachment::determineAccessibilityRole(WebCore::AccessibilityAttachment *this)
{
  return 10;
}

uint64_t WebCore::AccessibilityImageMapLink::isLink(WebCore::AccessibilityImageMapLink *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityImageMapLink::isEnabled(WebCore::AccessibilityImageMapLink *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityImageMapLink::node(WebCore::AccessibilityImageMapLink *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::AccessibilityImageMapLink::supportsPath(WebCore::AccessibilityImageMapLink *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityImageMapLink::isImageMapLink(WebCore::AccessibilityImageMapLink *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityLabel::isAccessibilityLabelInstance(WebCore::AccessibilityLabel *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityLabel::determineAccessibilityRole(WebCore::AccessibilityLabel *this)
{
  return 54;
}

uint64_t WebCore::AccessibilityList::isList(WebCore::AccessibilityList *this)
{
  return 1;
}

unint64_t WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = v9;
      v12 = (WTF *)((char *)v7 + 16 * v8);
      v13 = v7;
      do
      {
        v14 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        *(_QWORD *)v11 = v14;
        *(_DWORD *)(v11 + 8) = *((_DWORD *)v13 + 2);
        v15 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v10);
          else
            *(_DWORD *)v15 -= 2;
        }
        v13 = (WTF *)((char *)v13 + 16);
        v11 += 16;
      }
      while (v13 != v12);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WebCore::AccessibilityListBox::~AccessibilityListBox(WebCore::AccessibilityListBox *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::AccessibilityListBox::canSetSelectedChildren(WebCore::AccessibilityListBox *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    if (*(_BYTE *)(v2 + 46) == 49)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v2 + 45) & 1) != 0)
        return 0;
      v3 = *(_QWORD *)(v2 + 24);
    }
  }
  else
  {
    v3 = *((_QWORD *)this + 30);
    if (!v3)
      return 0;
  }
  result = *(_QWORD *)(v3 + 8);
  if (!result)
    return result;
  if ((*(_WORD *)(result + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 960))(result) ^ 1;
  }
  return 0;
}

WebCore::Node *WebCore::AccessibilityListBox::addChildren(WebCore::Node *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  WebCore::AXObjectCache *v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::AXObjectCache *v30;
  uint64_t v31;

  v1 = (uint64_t)this;
  *((_BYTE *)this + 56) = 1;
  v2 = *((_QWORD *)this + 31);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    if (*(_BYTE *)(v3 + 46) == 49)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v3 + 45) & 1) != 0)
        goto LABEL_54;
      v4 = *(_QWORD *)(v3 + 24);
    }
  }
  else
  {
    v4 = *((_QWORD *)this + 30);
    if (!v4)
      goto LABEL_54;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if (v5
    && (*(_WORD *)(v5 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    if (*(_BYTE *)(v5 + 300))
      this = WebCore::HTMLSelectElement::recalcListItems(v5, (void *)1, 1u);
    v6 = *(unsigned int *)(v5 + 196);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(v5 + 184);
      v8 = v7 + 8 * v6;
      while (1)
      {
        v9 = *(_QWORD *)v7 ? *(_QWORD *)(*(_QWORD *)v7 + 8) : 0;
        v10 = *(_QWORD *)(v1 + 248);
        if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
        {
          v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 40);
        }
        else
        {
          if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 840))(v1))
            break;
          v12 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 840))(v1) + 40);
        }
        v13 = *(_QWORD *)(v12 + 8);
        if (!v13)
          break;
        v14 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
        if ((v14 & 1) != 0)
        {
          v17 = v13;
          if (*(_BYTE *)(v13 + 3362) || *(_BYTE *)(v13 + 3405))
          {
            for (i = *(_QWORD *)(v13 + 528); i; i = *(_QWORD *)(v17 + 528))
            {
              v27 = *(_QWORD *)(i + 8);
              if (!v27)
                break;
              v28 = *(_QWORD *)(v27 + 120);
              if (!v28)
                break;
              v29 = *(_QWORD *)(v28 + 8);
              if (!v29)
                break;
              v17 = *(_QWORD *)(*(_QWORD *)(v29 + 40) + 8);
            }
          }
          else
          {
            v18 = *(_QWORD *)(v13 + 528);
            if (v18)
            {
              v19 = *(_QWORD *)(v18 + 8);
              if (v19)
              {
                v20 = *(_QWORD *)(*(_QWORD *)(v19 + 128) + 8);
                if (v20 && *(_BYTE *)(v20 + 144) == 0)
                {
                  v22 = *(_QWORD *)(v20 + 296);
                  if (v22)
                    v17 = v22;
                }
              }
            }
          }
          *(_DWORD *)(v17 + 24) += 2;
          v31 = v17;
          if (*(_QWORD *)(v17 + 1944))
            v23 = *(_BYTE *)(v17 + 3405) == 0;
          else
            v23 = 0;
          if (v23)
          {
            v24 = *(_QWORD *)(v17 + 1488);
            if (!v24)
            {
              v25 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
              v30 = WebCore::AXObjectCache::AXObjectCache(v25, (WebCore::Document *)v17);
              std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)(v17 + 1488), &v30);
              std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v30);
              WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
              v24 = *(_QWORD *)(v17 + 1488);
            }
          }
          else
          {
            v24 = 0;
          }
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v31);
          v15 = v24;
          if (!v9)
            break;
        }
        else
        {
          v15 = 0;
          if (!v9)
            break;
        }
        v16 = WebCore::AXObjectCache::getOrCreate(v15, v9, 0);
LABEL_46:
        this = (WebCore::Node *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v1 + 3072))(v1, v16, *(unsigned int *)(v1 + 52), 0);
        v7 += 8;
        if (v7 == v8)
          goto LABEL_54;
      }
      v16 = 0;
      goto LABEL_46;
    }
  }
LABEL_54:
  *(_BYTE *)(v1 + 233) = 0;
  return this;
}

uint64_t WebCore::AccessibilityListBox::setSelectedChildren(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = result;
  v4 = *(_QWORD *)(result + 248);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if (*(_BYTE *)(v5 + 46) == 49)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v5 + 45) & 1) != 0)
        return result;
      v6 = *(_QWORD *)(v5 + 24);
    }
  }
  else
  {
    v6 = *(_QWORD *)(result + 240);
    if (!v6)
      return result;
  }
  result = *(_QWORD *)(v6 + 8);
  if (result)
  {
    if ((*(_WORD *)(result + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 960))(result);
      if ((result & 1) == 0)
      {
        v7 = *(unsigned int *)(v3 + 52);
        if ((_DWORD)v7)
        {
          v8 = *(_QWORD **)(v3 + 40);
          v9 = 8 * v7;
          do
          {
            result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 544))(*v8);
            if ((_DWORD)result)
              result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v8 + 1832))(*v8, 0);
            ++v8;
            v9 -= 8;
          }
          while (v9);
        }
        v10 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v10)
        {
          v11 = *(_QWORD **)a2;
          v12 = 8 * v10;
          do
          {
            result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 1456))(*v11);
            if ((_DWORD)result == 68)
              result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v11 + 1832))(*v11, 1);
            ++v11;
            v12 -= 8;
          }
          while (v12);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityListBox::selectedChildren@<X0>(WebCore::AccessibilityListBox *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!*((_BYTE *)this + 56))
    WebCore::AccessibilityListBox::addChildren(this);
  v18 = 0;
  v19 = 0;
  v5 = *((unsigned int *)this + 13);
  if (!(_DWORD)v5)
  {
    v14 = 0;
    v15 = 0;
    goto LABEL_22;
  }
  v6 = (_QWORD *)*((_QWORD *)this + 5);
  v7 = 8 * v5;
  do
  {
    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 544))(*v6))
      goto LABEL_19;
    v8 = *v6;
    v17 = *v6;
    v9 = HIDWORD(v19);
    if (HIDWORD(v19) == (_DWORD)v19)
    {
      WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AXCoreObject*>((uint64_t)&v18, &v17);
      goto LABEL_19;
    }
    v10 = v18;
    if (!v8)
      goto LABEL_18;
    v11 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
LABEL_12:
      MEMORY[0x19AEA534C](v11);
      goto LABEL_13;
    }
    if (__stxr(1u, (unsigned __int8 *)v11))
      goto LABEL_12;
LABEL_13:
    ++*(_QWORD *)(v11 + 8);
    v13 = __ldxr((unsigned __int8 *)v11);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
        goto LABEL_18;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_18:
    *(_QWORD *)(v10 + 8 * v9) = v8;
    ++HIDWORD(v19);
LABEL_19:
    ++v6;
    v7 -= 8;
  }
  while (v7);
  v14 = v18;
  v15 = v19;
LABEL_22:
  v18 = 0;
  v19 = 0;
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v15;
  *(_BYTE *)(a3 + 16) = 1;
  return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, a2);
}

uint64_t WebCore::AccessibilityListBox::visibleChildren@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  WebCore::RenderListBox *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v15;

  v3 = *(_QWORD *)(this + 248);
  if (v3 && (v4 = *(WebCore::RenderListBox **)(v3 + 8)) != 0 && *((_BYTE *)v4 + 46) == 18)
  {
    v5 = this;
    if (!*(_BYTE *)(this + 56))
      this = (uint64_t)WebCore::AccessibilityListBox::addChildren((WebCore::Node *)this);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    if (*(_DWORD *)(v5 + 52))
    {
      v6 = 0;
      v7 = 0;
      while (1)
      {
        this = WebCore::RenderListBox::listIndexIsVisible(v4, v7);
        v8 = *(unsigned int *)(v5 + 52);
        if ((_DWORD)this)
          break;
LABEL_24:
        ++v7;
        v6 += 8;
        if (v7 >= v8)
          return this;
      }
      if (v7 >= v8)
      {
        __break(0xC471u);
        return this;
      }
      v9 = (uint64_t *)(*(_QWORD *)(v5 + 40) + v6);
      v10 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v10 == *(_DWORD *)(a2 + 8))
      {
        this = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v10 + 1, (unint64_t)v9);
        v10 = *(unsigned int *)(a2 + 12);
        v11 = *(char **)a2;
        v12 = *(_QWORD *)this;
        if (!*(_QWORD *)this)
          goto LABEL_23;
      }
      else
      {
        v11 = *(char **)a2;
        v12 = *v9;
        if (!*v9)
          goto LABEL_23;
      }
      v13 = *(_QWORD *)(v12 + 8);
      if (__ldaxr((unsigned __int8 *)v13))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v13))
      {
LABEL_18:
        ++*(_QWORD *)(v13 + 8);
        v15 = __ldxr((unsigned __int8 *)v13);
        if (v15 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v13))
            goto LABEL_23;
        }
        else
        {
          __clrex();
        }
        this = WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_23:
        *(_QWORD *)&v11[8 * v10] = v12;
        ++*(_DWORD *)(a2 + 12);
        v8 = *(unsigned int *)(v5 + 52);
        goto LABEL_24;
      }
      this = MEMORY[0x19AEA534C](v13);
      goto LABEL_18;
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return this;
}

uint64_t WebCore::AccessibilityListBox::elementAccessibilityHitTest(WebCore::AccessibilityListBox *this, const WebCore::IntPoint *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::RenderListBox *v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  signed int v18;
  int v19;
  uint64_t v20;
  WebCore::AXObjectCache *v21;
  uint64_t v22;
  WebCore::RenderObject *v23;
  unint64_t v25;

  v2 = *((_QWORD *)this + 31);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || (*(_BYTE *)(v3 + 45) & 1) != 0 || !*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8))
    return 0;
  v6 = WebCore::AccessibilityRenderObject::boundingBoxRect(this);
  v7 = *((_DWORD *)this + 13);
  if (!v7)
    goto LABEL_34;
  v8 = v6;
  v9 = 0;
  while (1)
  {
    v10 = *((_QWORD *)this + 31);
    if (v10)
      v11 = *(WebCore::RenderListBox **)(v10 + 8);
    else
      v11 = 0;
    if (*((_BYTE *)v11 + 46) != 18)
      goto LABEL_39;
    v25 = v8;
    v12 = WebCore::RenderListBox::itemBoundingBoxRect(v11, (const WebCore::LayoutPoint *)&v25, v9);
    v15 = *((_DWORD *)a2 + 1);
    v16 = *(_DWORD *)a2 << 6;
    if (*(int *)a2 < -33554432)
      v16 = 0x80000000;
    if (*(int *)a2 > 0x1FFFFFF)
      v16 = 0x7FFFFFFF;
    v17 = v15 << 6;
    if (v15 < -33554432)
      v17 = 0x80000000;
    if (v15 > 0x1FFFFFF)
      v17 = 0x7FFFFFFF;
    if (v16 >= (int)v12)
    {
      v18 = v12 + v13;
      if (__OFADD__((_DWORD)v12, v13))
        v18 = (v12 >> 31) + 0x7FFFFFFF;
      if (v18 > v16 && v17 >= SHIDWORD(v12))
      {
        v19 = (HIDWORD(v12) >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(HIDWORD(v12), v14))
          v19 = HIDWORD(v12) + v14;
        if (v19 > v17)
          break;
      }
    }
    if (v7 == (_DWORD)++v9)
      goto LABEL_34;
  }
  if (*((_DWORD *)this + 13) <= v9)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x1955F5308);
  }
  v20 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v9);
  if (!v20
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20) & 1) == 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 856))(v20))
  {
LABEL_34:
    v21 = (WebCore::AXObjectCache *)WebCore::AccessibilityObject::axObjectCache(this);
    v22 = *((_QWORD *)this + 31);
    if (v22)
    {
      v23 = *(WebCore::RenderObject **)(v22 + 8);
      if (v23)
        return WebCore::AXObjectCache::getOrCreate(v21, v23);
    }
    return 0;
  }
  return v20;
}

void WebCore::AccessibilityListBoxOption::~AccessibilityListBoxOption(WebCore::AccessibilityListBoxOption *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E337CD98;
  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = off_1E337CD98;
  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v6, v7);
}

BOOL WebCore::AccessibilityListBoxOption::isEnabled(WebCore::AccessibilityListBoxOption *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;

  v2 = *((_QWORD *)this + 30);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_WORD *)(v3 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
      {
        return 0;
      }
    }
  }
  v4 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_disabledAttr);
  if (!v4 || *(_DWORD *)(v4 + 4) != 4)
    return !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::disabledAttr);
  v6 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v6 & 0xDF) != 0x54 || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x52 || (*(_BYTE *)(v6 + 2) & 0xDF) != 0x55)
      return !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::disabledAttr);
    v7 = *(unsigned __int8 *)(v6 + 3);
  }
  else
  {
    if ((*(_WORD *)v6 & 0xFFDF) != 0x54
      || (*(_WORD *)(v6 + 2) & 0xFFDF) != 0x52
      || (*(_WORD *)(v6 + 4) & 0xFFDF) != 0x55)
    {
      return !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::disabledAttr);
    }
    v7 = *(unsigned __int16 *)(v6 + 6);
  }
  if ((v7 & 0xFFFFFFDF) != 0x45)
    return !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::disabledAttr);
  return 0;
}

uint64_t WebCore::AccessibilityListBoxOption::isSelected(WebCore::AccessibilityListBoxOption *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 30);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2
    || (*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  v4 = WebCore::HTMLOptionElement::selected(v2, 1u);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v4;
}

uint64_t WebCore::AccessibilityListBoxOption::isSelectedOptionActive(WebCore::AccessibilityListBoxOption *this, void *a2)
{
  uint64_t result;
  void *v4;
  int SelectedListIndex;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = WebCore::AccessibilityListBoxOption::listBoxOptionParentNode(*((_QWORD *)this + 30), a2);
  if (result)
  {
    SelectedListIndex = *(_DWORD *)(result + 292);
    if (SelectedListIndex < 0)
      SelectedListIndex = WebCore::HTMLSelectElement::lastSelectedListIndex(result);
    v6 = *((_QWORD *)this + 30);
    if (!v6)
      goto LABEL_5;
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_5;
    v8 = WebCore::AccessibilityListBoxOption::listBoxOptionParentNode(v6, v4);
    if (!v8)
      goto LABEL_5;
    if (*(_BYTE *)(v8 + 300))
    {
      v16 = v8;
      WebCore::HTMLSelectElement::recalcListItems(v8, (void *)1, 1u);
      v8 = v16;
    }
    v9 = *(unsigned int *)(v8 + 196);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v8 + 184);
      v11 = *((_QWORD *)this + 30);
      if (v11)
      {
        v12 = 0;
        v13 = *(_QWORD *)(v11 + 8);
        while (1)
        {
          v14 = *(_QWORD *)(v10 + 8 * v12);
          if (v14)
            v14 = *(_QWORD *)(v14 + 8);
          if (v14 == v13)
            break;
          ++v12;
          v7 = -1;
          if (v9 == v12)
            return SelectedListIndex == v7;
        }
      }
      else
      {
        v12 = 0;
        while (1)
        {
          v15 = *(_QWORD *)(v10 + 8 * v12);
          if (!v15 || !*(_QWORD *)(v15 + 8))
            break;
          ++v12;
          v7 = -1;
          if (v9 == v12)
            return SelectedListIndex == v7;
        }
      }
      v7 = v12;
    }
    else
    {
LABEL_5:
      v7 = -1;
    }
    return SelectedListIndex == v7;
  }
  return result;
}

uint64_t WebCore::AccessibilityListBoxOption::listBoxOptionParentNode(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!this)
    return this;
  v2 = *(_QWORD *)(this + 8);
  if (!v2 || (*(_WORD *)(v2 + 28) & 0x10) == 0)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
  if (v3 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    v4 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v4 + 2;
    this = WebCore::HTMLOptionElement::ownerSelectElement((WebCore::HTMLOptionElement *)v2);
    if (v4)
    {
      *(_DWORD *)(v2 + 24) = v4;
    }
    else
    {
      v6 = this;
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v5);
      return v6;
    }
    return this;
  }
  if (v3 != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
    return 0;
  v7 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v7 + 2;
  v8 = *(_QWORD *)(v2 + 32);
  if (v8 && (*(_WORD *)(v8 + 28) & 0x10) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
      v8 = 0;
    v9 = v8;
  }
  else
  {
    v9 = 0;
  }
  if (v7)
  {
    *(_DWORD *)(v2 + 24) = v7;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  return v9;
}

uint64_t WebCore::AccessibilityListBoxOption::elementRect(WebCore::AccessibilityListBoxOption *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  BOOL v17;
  uint64_t *v18;
  void *v19;
  WebCore::AXObjectCache *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  WebCore::AXObjectCache *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  WebCore::RenderObject *v59;
  WebCore::AXObjectCache *v60;
  uint64_t v61;

  v3 = *((_QWORD *)this + 30);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return v4;
  v6 = WebCore::AccessibilityListBoxOption::listBoxOptionParentNode(v3, a2);
  if (!v6)
    return 0;
  *(_DWORD *)(v6 + 24) += 2;
  v4 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v4)
    goto LABEL_11;
  if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1955F5944);
  }
  if (*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 18
    || (v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8)
                                   + 40)
                       + 8),
        v8 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled),
        (v8 & 1) == 0))
  {
    v4 = 0;
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  v59 = (WebCore::RenderObject *)(*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL);
  v11 = v6;
  if (*(_BYTE *)(v7 + 3362) || *(_BYTE *)(v7 + 3405))
  {
    while (1)
    {
      v43 = *(_QWORD *)(v7 + 528);
      if (!v43)
        break;
      v44 = *(_QWORD *)(v43 + 8);
      if (!v44)
        break;
      v45 = *(_QWORD *)(v44 + 120);
      if (!v45)
        break;
      v46 = *(_QWORD *)(v45 + 8);
      if (!v46)
        break;
      v7 = *(_QWORD *)(*(_QWORD *)(v46 + 40) + 8);
    }
  }
  else
  {
    v12 = *(_QWORD *)(v7 + 528);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 128) + 8);
        if (v14 && *(_BYTE *)(v14 + 144) == 0)
        {
          v16 = *(_QWORD *)(v14 + 296);
          if (v16)
            v7 = v16;
        }
      }
    }
  }
  *(_DWORD *)(v7 + 24) += 2;
  v61 = v7;
  if (*(_QWORD *)(v7 + 1944))
    v17 = *(_BYTE *)(v7 + 3405) == 0;
  else
    v17 = 0;
  if (v17)
  {
    v18 = *(uint64_t **)(v7 + 1488);
    if (v18)
    {
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v61);
    }
    else
    {
      v20 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
      v60 = WebCore::AXObjectCache::AXObjectCache(v20, (WebCore::Document *)v7);
      std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)(v7 + 1488), &v60);
      std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v60);
      WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
      v18 = *(uint64_t **)(v7 + 1488);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v61);
      if (!v18)
        goto LABEL_35;
    }
    v21 = *v18;
    if (!*v18)
    {
      v21 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = v18;
      v22 = (unsigned int *)*v18;
      *v18 = v21;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, v19);
        }
        v21 = *v18;
        if (!*v18)
          goto LABEL_35;
      }
    }
    do
      v25 = __ldaxr((unsigned int *)v21);
    while (__stlxr(v25 + 1, (unsigned int *)v21));
    v26 = *(WebCore::AXObjectCache **)(v21 + 8);
    if (!v26 || (v27 = WebCore::AXObjectCache::getOrCreate(v26, v59)) == 0)
    {
      v57 = 0;
      v58 = 0;
      do
      {
LABEL_76:
        v41 = __ldaxr((unsigned int *)v21);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, (unsigned int *)v21));
      if (!v42)
      {
        atomic_store(1u, (unsigned int *)v21);
        WTF::fastFree((WTF *)v21, v19);
      }
      v6 = v11;
      v4 = v57;
      v9 = v58;
      goto LABEL_12;
    }
    v28 = (_QWORD *)v27;
    v29 = *(_QWORD *)(v27 + 8);
    if (__ldaxr((unsigned __int8 *)v29))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v29))
    {
      goto LABEL_53;
    }
    MEMORY[0x19AEA534C](v29);
LABEL_53:
    ++*(_QWORD *)(v29 + 8);
    v31 = __ldxr((unsigned __int8 *)v29);
    if (v31 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v29))
        goto LABEL_58;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v29);
LABEL_58:
    v32 = (*(uint64_t (**)(_QWORD *))(*v28 + 3040))(v28);
    v33 = *((_QWORD *)this + 30);
    if (!v33)
      goto LABEL_59;
    if (!*(_QWORD *)(v33 + 8))
      goto LABEL_59;
    v47 = WebCore::AccessibilityListBoxOption::listBoxOptionParentNode(v33, v19);
    if (!v47)
      goto LABEL_59;
    v48 = v47;
    if (*(_BYTE *)(v47 + 300))
      WebCore::HTMLSelectElement::recalcListItems(v47, (void *)1, 1u);
    v49 = *(unsigned int *)(v48 + 196);
    if (!(_DWORD)v49)
      goto LABEL_59;
    v50 = *(_QWORD *)(v48 + 184);
    v51 = *((_QWORD *)this + 30);
    if (v51)
    {
      v52 = 0;
      v53 = *(_QWORD *)(v51 + 8);
      do
      {
        v54 = *(_QWORD *)(v50 + 8 * v52);
        if (v54)
          v54 = *(_QWORD *)(v54 + 8);
        if (v54 == v53)
          break;
        v57 = 0;
        v58 = 0;
        ++v52;
      }
      while (v49 != v52);
    }
    else
    {
      v52 = 0;
      while (1)
      {
        v56 = *(_QWORD *)(v50 + 8 * v52);
        if (!v56 || !*(_QWORD *)(v56 + 8))
          break;
        v57 = 0;
        v58 = 0;
        if (v49 == ++v52)
          goto LABEL_60;
      }
    }
    if ((_DWORD)v52 != -1)
    {
      v61 = v32;
      v57 = WebCore::RenderListBox::itemBoundingBoxRect(v59, (const WebCore::LayoutPoint *)&v61, v52);
      v58 = v19;
    }
    else
    {
LABEL_59:
      v57 = 0;
      v58 = 0;
    }
LABEL_60:
    v34 = v28[1];
    if (__ldaxr((unsigned __int8 *)v34))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v34))
    {
      goto LABEL_64;
    }
    MEMORY[0x19AEA534C](v34);
LABEL_64:
    v36 = *(_QWORD *)(v34 + 8);
    v37 = v36 - 1;
    *(_QWORD *)(v34 + 8) = v36 - 1;
    if (v36 == 1)
    {
      v55 = *(_QWORD *)(v34 + 16);
      v38 = *(_QWORD *)(v34 + 24);
      *(_QWORD *)(v34 + 24) = 0;
      v39 = v55 != 0;
    }
    else
    {
      v38 = 0;
      v39 = 1;
    }
    v40 = __ldxr((unsigned __int8 *)v34);
    if (v40 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v34))
      {
LABEL_71:
        if (!v37)
        {
          if (v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          if (!v39)
            WTF::fastFree((WTF *)v34, v19);
        }
        goto LABEL_76;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
    goto LABEL_71;
  }
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v61);
LABEL_35:
  v4 = 0;
  v9 = 0;
  v6 = v11;
LABEL_12:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    v10 = v4;
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
    return v10;
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v4;
}

uint64_t WebCore::AccessibilityListBoxOption::computeAccessibilityIsIgnored(WebCore::AccessibilityListBoxOption *this)
{
  uint64_t v1;
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  WebCore::Document *v16;
  WebCore::AXObjectCache **v17;
  WebCore::AXObjectCache *v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::AXObjectCache *v24;
  uint64_t v25;

  v1 = *((_QWORD *)this + 30);
  if (!v1)
    return 1;
  if (!*(_QWORD *)(v1 + 8))
    return 1;
  if (WebCore::AccessibilityObject::defaultObjectInclusion(this) == 1)
    return 1;
  v5 = WebCore::AccessibilityListBoxOption::listBoxOptionParentNode(*((_QWORD *)this + 30), v4);
  if (!v5)
    return 1;
  v6 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v6 & 1) == 0)
    return 1;
  v7 = v5;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 30) + 8) + 40) + 8);
  if (*(_BYTE *)(v8 + 3362) || *(_BYTE *)(v8 + 3405))
  {
    for (i = *(_QWORD *)(v8 + 528); i; i = *(_QWORD *)(v8 + 528))
    {
      v21 = *(_QWORD *)(i + 8);
      if (!v21)
        break;
      v22 = *(_QWORD *)(v21 + 120);
      if (!v22)
        break;
      v23 = *(_QWORD *)(v22 + 8);
      if (!v23)
        break;
      v8 = *(_QWORD *)(*(_QWORD *)(v23 + 40) + 8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 528);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v10 + 128) + 8);
        if (v11 && *(_BYTE *)(v11 + 144) == 0)
        {
          v13 = *(_QWORD *)(v11 + 296);
          if (v13)
            v8 = v13;
        }
      }
    }
  }
  *(_DWORD *)(v8 + 24) += 2;
  v25 = v8;
  if (*(_QWORD *)(v8 + 1944))
    v14 = *(_BYTE *)(v8 + 3405) == 0;
  else
    v14 = 0;
  if (!v14)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v25);
    return 1;
  }
  v15 = *(_QWORD *)(v8 + 1488);
  if (v15)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v25);
  }
  else
  {
    v16 = (WebCore::Document *)v8;
    v17 = (WebCore::AXObjectCache **)(v8 + 1488);
    v18 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v24 = WebCore::AXObjectCache::AXObjectCache(v18, v16);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v17, &v24);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v24);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v15 = *((_QWORD *)v16 + 186);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v25);
    if (!v15)
      return 1;
  }
  v19 = WebCore::AXObjectCache::getOrCreate(v15, v7, 0);
  if (!v19)
    return 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 856))(v19);
}

uint64_t WebCore::AccessibilityListBoxOption::parentObject(WebCore::AccessibilityListBoxOption *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  WebCore::Document *v15;
  WebCore::AXObjectCache **v16;
  WebCore::AXObjectCache *v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::AXObjectCache *v22;
  uint64_t v23;

  v3 = WebCore::AccessibilityListBoxOption::listBoxOptionParentNode(*((_QWORD *)this + 30), a2);
  if (!v3)
    return 0;
  v4 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v4 & 1) == 0)
    return 0;
  v6 = v3;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 30) + 8) + 40) + 8);
  if (*(_BYTE *)(v7 + 3362) || *(_BYTE *)(v7 + 3405))
  {
    for (i = *(_QWORD *)(v7 + 528); i; i = *(_QWORD *)(v7 + 528))
    {
      v19 = *(_QWORD *)(i + 8);
      if (!v19)
        break;
      v20 = *(_QWORD *)(v19 + 120);
      if (!v20)
        break;
      v21 = *(_QWORD *)(v20 + 8);
      if (!v21)
        break;
      v7 = *(_QWORD *)(*(_QWORD *)(v21 + 40) + 8);
    }
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 528);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v9 + 128) + 8);
        if (v10 && *(_BYTE *)(v10 + 144) == 0)
        {
          v12 = *(_QWORD *)(v10 + 296);
          if (v12)
            v7 = v12;
        }
      }
    }
  }
  *(_DWORD *)(v7 + 24) += 2;
  v23 = v7;
  if (*(_QWORD *)(v7 + 1944))
    v13 = *(_BYTE *)(v7 + 3405) == 0;
  else
    v13 = 0;
  if (!v13)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v23);
    return 0;
  }
  v14 = *(_QWORD *)(v7 + 1488);
  if (v14)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v23);
  }
  else
  {
    v15 = (WebCore::Document *)v7;
    v16 = (WebCore::AXObjectCache **)(v7 + 1488);
    v17 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v22 = WebCore::AXObjectCache::AXObjectCache(v17, v15);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v16, &v22);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v22);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v14 = *((_QWORD *)v15 + 186);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v23);
    if (!v14)
      return 0;
  }
  return WebCore::AXObjectCache::getOrCreate(v14, v6, 0);
}

uint64_t WebCore::AccessibilityListBoxOption::canSetSelectedAttribute(WebCore::AccessibilityListBoxOption *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Node *v5;
  WebCore::Node *v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 30);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3
    || (*(_WORD *)(v3 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    return 0;
  }
  *(_DWORD *)(v3 + 24) += 2;
  if (*(_BYTE *)(v3 + 112)
    || (v4 = *(_QWORD *)(v3 + 32)) != 0
    && (*(_WORD *)(v4 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
    && *(_BYTE *)(v4 + 112))
  {
    v7 = 0;
  }
  else
  {
    v5 = (WebCore::Node *)WebCore::AccessibilityListBoxOption::listBoxOptionParentNode(v2, a2);
    if (v5)
    {
      v6 = v5;
      *((_DWORD *)v5 + 6) += 2;
      v7 = (*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v5 + 960))(v5) ^ 1;
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v6, a2);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
    }
    else
    {
      v7 = 1;
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v7;
}

_QWORD *WebCore::AccessibilityListBoxOption::stringValue@<X0>(_QWORD *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = this[30];
  if (!v3 || !*(_QWORD *)(v3 + 8))
  {
    *a2 = 0;
    return this;
  }
  v4 = this;
  this = WebCore::AccessibilityObject::getAttributeTrimmed((WebCore::AccessibilityObject *)this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr, &v8);
  if (v8 && *((_DWORD *)v8 + 1))
  {
    *a2 = v8;
    return this;
  }
  v6 = v4[30];
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  if ((*(_WORD *)(v7 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    *(_DWORD *)(v7 + 24) += 2;
    WebCore::HTMLOptionElement::label((WebCore::HTMLOptionElement *)v7, v5);
    goto LABEL_16;
  }
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  if ((*(_WORD *)(v7 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
  {
    *(_DWORD *)(v7 + 24) += 2;
    WebCore::HTMLOptGroupElement::groupLabelText((WebCore::HTMLOptGroupElement *)v7, a2);
LABEL_16:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v5);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    goto LABEL_21;
  }
  *a2 = 0;
LABEL_21:
  this = v8;
  v8 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v5);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::AccessibilityListBoxOption::actionElement(WebCore::AccessibilityListBoxOption *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 30);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if ((*(_WORD *)(v2 + 28) & 8) != 0)
    return v2;
  return 0;
}

uint64_t WebCore::AccessibilityListBoxOption::node(WebCore::AccessibilityListBoxOption *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 30);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::AccessibilityListBoxOption::setSelected(WebCore::AccessibilityListBoxOption *this, void *a2)
{
  int v2;
  uint64_t result;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (int)a2;
  result = WebCore::AccessibilityListBoxOption::listBoxOptionParentNode(*((_QWORD *)this + 30), a2);
  if (result)
  {
    v6 = result;
    result = WebCore::AccessibilityListBoxOption::canSetSelectedAttribute(this, v5);
    if ((_DWORD)result)
    {
      result = *((_QWORD *)this + 30);
      if (result
        && (v8 = *(_QWORD *)(result + 8)) != 0
        && (*(_WORD *)(v8 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        *(_DWORD *)(v8 + 24) += 2;
        result = WebCore::HTMLOptionElement::selected(v8, 1u);
        v9 = result;
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, v7);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
        if (v9 != v2)
        {
          result = *((_QWORD *)this + 30);
          goto LABEL_11;
        }
      }
      else if ((v2 & 1) != 0)
      {
        if (!result)
          goto LABEL_12;
        if (!*(_QWORD *)(result + 8))
          goto LABEL_12;
        v16 = WebCore::AccessibilityListBoxOption::listBoxOptionParentNode(result, v7);
        if (!v16)
          goto LABEL_12;
LABEL_11:
        v17 = v16;
        if (*(_BYTE *)(v16 + 300))
          WebCore::HTMLSelectElement::recalcListItems(v16, (void *)1, 1u);
        v18 = *(unsigned int *)(v17 + 196);
        if ((_DWORD)v18)
        {
          v19 = *(_QWORD *)(v17 + 184);
          v20 = *((_QWORD *)this + 30);
          if (v20)
          {
            v21 = 0;
            v22 = *(_QWORD *)(v20 + 8);
            v10 = -1;
            while (1)
            {
              v23 = *(_QWORD *)(v19 + 8 * v21);
              if (v23)
                v23 = *(_QWORD *)(v23 + 8);
              if (v23 == v22)
                break;
              if (v18 == ++v21)
                goto LABEL_13;
            }
          }
          else
          {
            v21 = 0;
            v10 = -1;
            while (1)
            {
              v24 = *(_QWORD *)(v19 + 8 * v21);
              if (!v24 || !*(_QWORD *)(v24 + 8))
                break;
              if (v18 == ++v21)
                goto LABEL_13;
            }
          }
          v10 = v21;
        }
        else
        {
LABEL_12:
          v10 = -1;
        }
LABEL_13:
        if (*(_BYTE *)(v6 + 300))
        {
          WebCore::HTMLSelectElement::recalcListItems(v6, (void *)1, 1u);
          if ((v10 & 0x80000000) != 0)
            goto LABEL_17;
        }
        else if ((v10 & 0x80000000) != 0)
        {
          goto LABEL_17;
        }
        if (*(_DWORD *)(v6 + 196) > (signed int)v10)
        {
          v11 = *(uint64_t **)(v6 + 184);
          v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11[v10] + 8) + 96) + 24);
          if (v12 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
          {
            v13 = 0;
            if (v10)
            {
              v14 = v10;
              do
              {
                v15 = *v11++;
                if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 96) + 24) == v12)
                  v13 = (v13 + 1);
                else
                  v13 = v13;
                --v14;
              }
              while (v14);
            }
            return WebCore::HTMLSelectElement::accessKeySetSelectedIndex((WebCore::HTMLSelectElement *)v6, (void *)v13);
          }
        }
LABEL_17:
        v13 = 0xFFFFFFFFLL;
        return WebCore::HTMLSelectElement::accessKeySetSelectedIndex((WebCore::HTMLSelectElement *)v6, (void *)v13);
      }
    }
  }
  return result;
}

void WebCore::AccessibilityMathMLElement::~AccessibilityMathMLElement(WebCore::AccessibilityMathMLElement *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::AccessibilityMathMLElement::determineAccessibilityRole(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 31);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 134;
  result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 3296))(this);
  *((_BYTE *)this + 234) = result;
  if ((_DWORD)result == 134)
  {
    v4 = *((_QWORD *)this + 31);
    if (v4)
      v4 = *(_QWORD *)(v4 + 8);
    if ((*(_BYTE *)(v4 + 45) & 1) == 0
      && (v5 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8)) != 0
      && (*(_WORD *)(v5 + 28) & 0x40) != 0
      && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::mathTag + 24))
    {
      return 30;
    }
    else
    {
      return 72;
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::textUnderElement@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (!*(_BYTE *)(a1 + 256) || (a2 & 0xFF0000) != 0 && (a2 & 0xFF000000) != 0)
    return (uint64_t)WebCore::AccessibilityRenderObject::textUnderElement(a1, a2, a3, a4);
  v6 = *(_QWORD *)(a1 + 248);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 184))(v7) & 1) != 0)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1952))(v7);
    if ((_WORD)result)
      return WTF::String::String();
    else
      *a4 = 0;
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::stringValue@<X0>(WebCore::AccessibilityMathMLElement *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!*((_BYTE *)this + 256))
    return WebCore::AccessibilityRenderObject::stringValue(this, a2);
  v3 = *((_QWORD *)this + 31);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 184))(v4) & 1) != 0)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1952))(v4);
    if ((_WORD)result)
      return WTF::String::String();
    else
      *a2 = 0;
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::isIgnoredElementWithinMathTree(WebCore::AccessibilityMathMLElement *this)
{
  if (*((_BYTE *)this + 256)
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2304))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2312))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2320))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2328))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2336))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2344))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 3160))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 3168))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 3176))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 3184))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 3192))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 3200))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2360))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2368))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2376))(this) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return (*(unsigned int (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2384))(this) ^ 1;
  }
}

BOOL WebCore::AccessibilityMathMLElement::isMathFraction(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 31);
  return v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && *(_BYTE *)(v2 + 46) == 54;
}

BOOL WebCore::AccessibilityMathMLElement::isMathFenced(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 31);
  return v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && *(_BYTE *)(v2 + 46) == 52;
}

uint64_t WebCore::AccessibilityMathMLElement::isMathSubscriptSuperscript(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
    return 0;
  result = *(_QWORD *)(v1 + 8);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
    if ((_DWORD)result)
      return (*(unsigned int (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2384))(this) ^ 1;
  }
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::isMathRow(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;

  v1 = *((_QWORD *)this + 31);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && ((v3 = *(unsigned __int8 *)(v2 + 46), v4 = v3 > 0x3C, v5 = (1 << v3) & 0x1D90000000000000, !v4)
      ? (v6 = v5 == 0)
      : (v6 = 1),
        !v6))
  {
    return (*(unsigned int (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2344))(this) ^ 1;
  }
  else
  {
    return 0;
  }
}

BOOL WebCore::AccessibilityMathMLElement::isMathUnderOver(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 31);
  return v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && *(_BYTE *)(v2 + 46) == 65;
}

uint64_t WebCore::AccessibilityMathMLElement::isMathSquareRoot(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 192))(v2);
  else
    return 0;
}

uint64_t WebCore::AccessibilityMathMLElement::isMathToken(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2);
  else
    return 0;
}

BOOL WebCore::AccessibilityMathMLElement::isMathRoot(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 31);
  return v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && *(_BYTE *)(v2 + 46) == 59;
}

uint64_t WebCore::AccessibilityMathMLElement::isMathOperator(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 184))(v2);
  else
    return 0;
}

uint64_t WebCore::AccessibilityMathMLElement::isAnonymousMathOperator(WebCore::AccessibilityMathMLElement *this)
{
  return *((unsigned __int8 *)this + 256);
}

uint64_t WebCore::AccessibilityMathMLElement::isMathFenceOperator(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 184))(v2))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 1936))(v2, 2);
  else
    return 0;
}

uint64_t WebCore::AccessibilityMathMLElement::isMathSeparatorOperator(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 184))(v2))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 1936))(v2, 16);
  else
    return 0;
}

BOOL WebCore::AccessibilityMathMLElement::isMathText(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _BOOL8 v5;
  int v6;
  uint64_t v7;

  if (!(*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this))
    return 0;
  v2 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
  if ((*(_WORD *)(v2 + 28) & 0x40) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::mtextTag + 24))
  {
    return 1;
  }
  v3 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
  if (!v3 || (*(_WORD *)(v3 + 28) & 8) == 0)
    return 0;
  v6 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v6 + 2;
  v7 = *(_QWORD *)(v3 + 96);
  if (v7 == WebCore::MathMLNames::msTag)
    v5 = 1;
  else
    v5 = *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::MathMLNames::msTag + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::MathMLNames::msTag + 32);
  if (v6)
  {
    *(_DWORD *)(v3 + 24) = v6;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  return v5;
}

uint64_t WebCore::AccessibilityMathMLElement::isMathNumber(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v3 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
    return (*(_WORD *)(v3 + 28) & 0x40) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::mnTag + 24);
  }
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::isMathIdentifier(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v3 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
    return (*(_WORD *)(v3 + 28) & 0x40) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::miTag + 24);
  }
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::isMathMultiscript(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v3 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
    return (*(_WORD *)(v3 + 28) & 0x40) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::mmultiscriptsTag + 24);
  }
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::isMathTable(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v3 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
    return (*(_WORD *)(v3 + 28) & 0x40) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::mtableTag + 24);
  }
  return result;
}

BOOL WebCore::AccessibilityMathMLElement::isMathTableRow(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _BOOL8 v5;
  int v6;
  uint64_t v7;

  if (!(*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this))
    return 0;
  v2 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
  if ((*(_WORD *)(v2 + 28) & 0x40) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::mtrTag + 24))
  {
    return 1;
  }
  v3 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
  if (!v3 || (*(_WORD *)(v3 + 28) & 8) == 0)
    return 0;
  v6 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v6 + 2;
  v7 = *(_QWORD *)(v3 + 96);
  if (v7 == WebCore::MathMLNames::mlabeledtrTag)
    v5 = 1;
  else
    v5 = *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::MathMLNames::mlabeledtrTag + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::MathMLNames::mlabeledtrTag + 32);
  if (v6)
  {
    *(_DWORD *)(v3 + 24) = v6;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  return v5;
}

uint64_t WebCore::AccessibilityMathMLElement::isMathTableCell(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v3 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
    return (*(_WORD *)(v3 + 28) & 0x40) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::mtdTag + 24);
  }
  return result;
}

_QWORD *WebCore::AccessibilityMathMLElement::isMathScriptObject(uint64_t a1, int a2)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1240))(a1);
  if (result)
  {
    v5 = 2464;
    if (!a2)
      v5 = 2456;
    return (_QWORD *)((*(uint64_t (**)(void))(*result + v5))() == a1);
  }
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::isMathMultiscriptObject(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  WTF *v14;
  uint64_t v15;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1240))(a1);
  if (!v4)
    return 0;
  v5 = (_QWORD *)v4;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 2384))(v4))
    return 0;
  v14 = 0;
  v15 = 0;
  v6 = 2504;
  if (a2 < 2)
    v6 = 2496;
  (*(void (**)(_QWORD *, WTF **))(*v5 + v6))(v5, &v14);
  v9 = v14;
  v10 = HIDWORD(v15);
  if (HIDWORD(v15))
  {
    v8 = v14;
    while (1)
    {
      if (*(_QWORD *)v8 == a1)
      {
        v12 = (a2 & 0xFFFFFFFD) == 0;
        goto LABEL_15;
      }
      if (*((_QWORD *)v8 + 1) == a1)
        break;
      v8 = (WTF *)((char *)v8 + 16);
      if (v8 == (WTF *)((char *)v14 + 16 * HIDWORD(v15)))
      {
        v10 = 0;
        goto LABEL_19;
      }
    }
    v12 = (a2 & 0xFFFFFFFD) == 1;
LABEL_15:
    LODWORD(v8) = v12;
    v10 = 1;
  }
LABEL_19:
  v11 = v10 & v8;
  if (v14)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    WTF::fastFree(v9, v7);
  }
  return v11;
}

uint64_t WebCore::AccessibilityMathMLElement::mathRadicand@<X0>(WebCore::AccessibilityMathMLElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  int v23;
  int v24;
  int v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2344))(this);
  if ((result & 1) == 0
    || (result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *, uint64_t))(*(_QWORD *)this + 1896))(this, 1), !*(_DWORD *)(result + 12)))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  v5 = result;
  result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2352))(this);
  if ((_DWORD)result)
  {
    v6 = *(unsigned int *)(v5 + 12);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v6;
    if (!(_DWORD)v6)
    {
LABEL_19:
      *(_BYTE *)(a2 + 16) = 1;
      return result;
    }
    if (!(v6 >> 29))
    {
      result = WTF::fastMalloc((WTF *)(8 * v6));
      *(_DWORD *)(a2 + 8) = v6;
      *(_QWORD *)a2 = result;
      v7 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v7)
      {
        v8 = (_QWORD *)result;
        v9 = *(uint64_t **)v5;
        v10 = 8 * v7;
        while (1)
        {
          v11 = *v9;
          if (!*v9)
            goto LABEL_18;
          v12 = *(_QWORD *)(v11 + 8);
          if (__ldaxr((unsigned __int8 *)v12))
            break;
          if (__stxr(1u, (unsigned __int8 *)v12))
            goto LABEL_12;
LABEL_13:
          ++*(_QWORD *)(v12 + 8);
          v14 = __ldxr((unsigned __int8 *)v12);
          if (v14 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v12))
              goto LABEL_18;
          }
          else
          {
            __clrex();
          }
          result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_18:
          *v8++ = v11;
          ++v9;
          v10 -= 8;
          if (!v10)
            goto LABEL_19;
        }
        __clrex();
LABEL_12:
        result = MEMORY[0x19AEA534C](v12);
        goto LABEL_13;
      }
      goto LABEL_19;
    }
LABEL_61:
    __break(0xC471u);
    JUMPOUT(0x1955F73B0);
  }
  if (!*(_DWORD *)(v5 + 12))
    goto LABEL_61;
  v15 = **(_QWORD **)v5;
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_28;
    }
    MEMORY[0x19AEA534C](v16);
LABEL_28:
    ++*(_QWORD *)(v16 + 8);
    v18 = __ldxr((unsigned __int8 *)v16);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
        goto LABEL_33;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
  }
LABEL_33:
  v37 = 1;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v36 = v20;
  if (!v15)
    goto LABEL_43;
  v21 = *(_QWORD *)(v15 + 8);
  if (__ldaxr((unsigned __int8 *)v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v21))
  {
    goto LABEL_38;
  }
  MEMORY[0x19AEA534C](v21);
LABEL_38:
  ++*(_QWORD *)(v21 + 8);
  v23 = __ldxr((unsigned __int8 *)v21);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, (unsigned __int8 *)v21))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
LABEL_43:
  *v20 = v15;
  v24 = v37;
  v25 = HIDWORD(v37) + 1;
  v26 = v36;
  v36 = 0;
  v37 = 0;
  *(_QWORD *)a2 = v26;
  *(_DWORD *)(a2 + 8) = v24;
  *(_DWORD *)(a2 + 12) = v25;
  *(_BYTE *)(a2 + 16) = 1;
  result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v19);
  if (!v15)
    return result;
  v28 = *(_QWORD *)(v15 + 8);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_48;
  }
  result = MEMORY[0x19AEA534C](v28);
LABEL_48:
  v30 = *(_QWORD *)(v28 + 8);
  v31 = v30 - 1;
  *(_QWORD *)(v28 + 8) = v30 - 1;
  if (v30 == 1)
  {
    v35 = *(_QWORD *)(v28 + 16);
    v32 = *(_QWORD *)(v28 + 24);
    *(_QWORD *)(v28 + 24) = 0;
    v33 = v35 != 0;
  }
  else
  {
    v32 = 0;
    v33 = 1;
  }
  v34 = __ldxr((unsigned __int8 *)v28);
  if (v34 != 1)
  {
    __clrex();
    goto LABEL_54;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_54:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v28);
  if (!v31)
  {
    if (v32)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    if (!v33)
      return WTF::fastFree((WTF *)v28, v27);
  }
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::mathRootIndexObject(WebCore::AccessibilityMathMLElement *this)
{
  _DWORD *v2;

  if ((*(unsigned int (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2344))(this)
    && ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2352))(this) & 1) == 0
    && (v2 = (_DWORD *)(*(uint64_t (**)(WebCore::AccessibilityMathMLElement *, uint64_t))(*(_QWORD *)this
                                                                                                 + 1896))(this, 1), v2[3] >= 2u))
  {
    return *(_QWORD *)(*(_QWORD *)v2 + 8);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::AccessibilityMathMLElement::mathNumeratorObject(WebCore::AccessibilityMathMLElement *this)
{
  _DWORD *v2;

  if ((*(unsigned int (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2304))(this)
    && (v2 = (_DWORD *)(*(uint64_t (**)(WebCore::AccessibilityMathMLElement *, uint64_t))(*(_QWORD *)this
                                                                                                 + 1896))(this, 1), v2[3] == 2))
  {
    return **(_QWORD **)v2;
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::AccessibilityMathMLElement::mathDenominatorObject(WebCore::AccessibilityMathMLElement *this)
{
  _DWORD *v2;

  if ((*(unsigned int (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2304))(this)
    && (v2 = (_DWORD *)(*(uint64_t (**)(WebCore::AccessibilityMathMLElement *, uint64_t))(*(_QWORD *)this
                                                                                                 + 1896))(this, 1), v2[3] == 2))
  {
    return *(_QWORD *)(*(_QWORD *)v2 + 8);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::AccessibilityMathMLElement::mathUnderObject(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t result;
  uint64_t v3;
  _DWORD *v4;

  if (!(*(unsigned int (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2336))(this))
    return 0;
  result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
  if (!result)
    return result;
  v3 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
  if (*(_DWORD *)(v3 + 12) < 2u)
    return 0;
  v4 = (_DWORD *)v3;
  result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
  if ((*(_WORD *)(result + 28) & 0x40) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::munderTag + 24))
  {
    result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
    if ((*(_WORD *)(result + 28) & 0x40) == 0
      || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::munderoverTag + 24))
    {
      return 0;
    }
  }
  if (v4[3] > 1u)
    return *(_QWORD *)(*(_QWORD *)v4 + 8);
  __break(0xC471u);
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::mathOverObject(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(unsigned int (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2336))(this))
  {
    result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
    if (!result)
      return result;
    v3 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
    if (*(_DWORD *)(v3 + 12) >= 2u)
    {
      v4 = v3;
      v5 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
      if ((*(_WORD *)(v5 + 28) & 0x40) != 0)
      {
        v6 = *(_DWORD *)(v4 + 12);
        if (*(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::moverTag + 24))
        {
          if (v6 > 1)
          {
            v8 = 1;
            return *(_QWORD *)(*(_QWORD *)v4 + 8 * v8);
          }
LABEL_17:
          __break(0xC471u);
          JUMPOUT(0x1955F76F8);
        }
      }
      else
      {
        v6 = *(_DWORD *)(v4 + 12);
      }
      if (v6 < 3)
        return 0;
      v7 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
      if ((*(_WORD *)(v7 + 28) & 0x40) == 0
        || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::munderoverTag + 24))
      {
        return 0;
      }
      if (*(_DWORD *)(v4 + 12) > 2u)
      {
        v8 = 2;
        return *(_QWORD *)(*(_QWORD *)v4 + 8 * v8);
      }
      goto LABEL_17;
    }
  }
  return 0;
}

uint64_t WebCore::AccessibilityMathMLElement::mathBaseObject(WebCore::AccessibilityMathMLElement *this)
{
  _DWORD *v2;

  if ((((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2320))(this) & 1) != 0
     || ((*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2336))(this) & 1) != 0
     || (*(unsigned int (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2384))(this))
    && (v2 = (_DWORD *)(*(uint64_t (**)(WebCore::AccessibilityMathMLElement *, uint64_t))(*(_QWORD *)this
                                                                                                 + 1896))(this, 1), v2[3]))
  {
    return **(_QWORD **)v2;
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::AccessibilityMathMLElement::mathSubscriptObject(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t result;
  uint64_t v3;
  _DWORD *v4;

  if (!(*(unsigned int (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2320))(this))
    return 0;
  result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
  if (!result)
    return result;
  v3 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
  if (*(_DWORD *)(v3 + 12) < 2u)
    return 0;
  v4 = (_DWORD *)v3;
  result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
  if ((*(_WORD *)(result + 28) & 0x40) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::msubTag + 24))
  {
    result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
    if ((*(_WORD *)(result + 28) & 0x40) == 0
      || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::msubsupTag + 24))
    {
      return 0;
    }
  }
  if (v4[3] > 1u)
    return *(_QWORD *)(*(_QWORD *)v4 + 8);
  __break(0xC471u);
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::mathSuperscriptObject(WebCore::AccessibilityMathMLElement *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(unsigned int (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2320))(this))
  {
    result = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
    if (!result)
      return result;
    v3 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
    v4 = *(_DWORD *)(v3 + 12);
    if (v4 >= 2)
    {
      v5 = v3;
      v6 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
      if ((*(_WORD *)(v6 + 28) & 0x40) != 0
        && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::msupTag + 24))
      {
        if (*(_DWORD *)(v5 + 12) > 1u)
        {
          v8 = 1;
          return *(_QWORD *)(*(_QWORD *)v5 + 8 * v8);
        }
      }
      else
      {
        if (v4 < 3)
          return 0;
        v7 = (*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 840))(this);
        if ((*(_WORD *)(v7 + 28) & 0x40) == 0
          || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::msubsupTag + 24))
        {
          return 0;
        }
        if (*(_DWORD *)(v5 + 12) > 2u)
        {
          v8 = 2;
          return *(_QWORD *)(*(_QWORD *)v5 + 8 * v8);
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1955F7998);
    }
  }
  return 0;
}

_QWORD *WebCore::AccessibilityMathMLElement::mathFencedOpenString@<X0>(WebCore::AccessibilityMathMLElement *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v5;

  result = (_QWORD *)(*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2312))(this);
  if ((_DWORD)result)
  {
    result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::MathMLNames::openAttr);
    v5 = (_DWORD *)*result;
    if (*result)
      *v5 += 2;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

_QWORD *WebCore::AccessibilityMathMLElement::mathFencedCloseString@<X0>(WebCore::AccessibilityMathMLElement *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v5;

  result = (_QWORD *)(*(uint64_t (**)(WebCore::AccessibilityMathMLElement *))(*(_QWORD *)this + 2312))(this);
  if ((_DWORD)result)
  {
    result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::MathMLNames::closeAttr);
    v5 = (_DWORD *)*result;
    if (*result)
      *v5 += 2;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::mathPrescripts(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t *v31;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2384))(a1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      if (result && (*(_WORD *)(result + 28) & 4) != 0)
      {
        v6 = *(_QWORD *)(result + 80);
        if (v6)
        {
          v7 = 0;
          v8 = 0;
          do
          {
            if (v7)
            {
              v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1488))(a1);
              result = WebCore::AXObjectCache::getOrCreate(v9, v6, 0);
              if (result
                && (v10 = result,
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 2296))(result),
                    (_DWORD)result))
              {
                if (v8)
                {
                  v11 = *(unsigned int *)(a2 + 12);
                  if ((_DWORD)v11 == *(_DWORD *)(a2 + 8))
                  {
                    v12 = v11 + (v11 >> 2);
                    if (v12 >= 0x10)
                      v13 = v12 + 1;
                    else
                      v13 = 16;
                    if (v13 <= v11 + 1)
                      v14 = v11 + 1;
                    else
                      v14 = v13;
                    if (v14 >> 28)
                      goto LABEL_51;
                    v15 = *(void **)a2;
                    v16 = (void *)WTF::fastMalloc((WTF *)(16 * v14));
                    *(_DWORD *)(a2 + 8) = v14;
                    *(_QWORD *)a2 = v16;
                    result = (uint64_t)memcpy(v16, v15, 16 * v11);
                    if (v15)
                    {
                      if (*(void **)a2 == v15)
                      {
                        *(_QWORD *)a2 = 0;
                        *(_DWORD *)(a2 + 8) = 0;
                      }
                      result = WTF::fastFree((WTF *)v15, v17);
                    }
                    v18 = *(unsigned int *)(a2 + 12);
                    v19 = v18 + 1;
                    v20 = (uint64_t *)(*(_QWORD *)a2 + 16 * v18);
                    *v20 = v8;
                    v20[1] = v10;
                    *(_DWORD *)(a2 + 12) = v19;
                  }
                  else
                  {
                    v21 = (uint64_t *)(*(_QWORD *)a2 + 16 * v11);
                    *v21 = v8;
                    v21[1] = v10;
                    *(_DWORD *)(a2 + 12) = v11 + 1;
                  }
                  v7 = 1;
                  v8 = 0;
                }
                else
                {
                  v7 = 1;
                  v8 = v10;
                }
              }
              else
              {
                v7 = 1;
              }
            }
            else
            {
              v7 = (*(_WORD *)(v6 + 28) & 0x40) != 0
                && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::mprescriptsTag + 24);
            }
            v6 = *(_QWORD *)(v6 + 56);
          }
          while (v6);
          if (v8)
          {
            v22 = *(unsigned int *)(a2 + 12);
            if ((_DWORD)v22 == *(_DWORD *)(a2 + 8))
            {
              v23 = v22 + (v22 >> 2);
              if (v23 >= 0x10)
                v24 = v23 + 1;
              else
                v24 = 16;
              if (v24 <= v22 + 1)
                v25 = v22 + 1;
              else
                v25 = v24;
              if (v25 >> 28)
              {
LABEL_51:
                __break(0xC471u);
                JUMPOUT(0x1955F7CD4);
              }
              v26 = *(void **)a2;
              v27 = (void *)WTF::fastMalloc((WTF *)(16 * v25));
              *(_DWORD *)(a2 + 8) = v25;
              *(_QWORD *)a2 = v27;
              result = (uint64_t)memcpy(v27, v26, 16 * v22);
              if (v26)
              {
                if (*(void **)a2 == v26)
                {
                  *(_QWORD *)a2 = 0;
                  *(_DWORD *)(a2 + 8) = 0;
                }
                result = WTF::fastFree((WTF *)v26, v28);
              }
              v22 = *(unsigned int *)(a2 + 12);
              v29 = (uint64_t *)(*(_QWORD *)a2 + 16 * v22);
              *v29 = v8;
              v30 = v29 + 1;
            }
            else
            {
              v31 = (uint64_t *)(*(_QWORD *)a2 + 16 * v22);
              *v31 = v8;
              v30 = v31 + 1;
            }
            *v30 = 0;
            *(_DWORD *)(a2 + 12) = v22 + 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::mathPostscripts(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2384))(a1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      if (result && (*(_WORD *)(result + 28) & 4) != 0)
      {
        v6 = *(_QWORD *)(result + 80);
        if (v6)
        {
          v7 = 0;
          v8 = 0;
          while ((*(_WORD *)(v6 + 28) & 0x40) == 0
               || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mprescriptsTag + 24))
          {
            v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1488))(a1);
            result = WebCore::AXObjectCache::getOrCreate(v9, v6, 0);
            if (result)
            {
              v10 = result;
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 2296))(result);
              if ((result & v7) == 1)
              {
                if (v8)
                {
                  v11 = *(unsigned int *)(a2 + 12);
                  if ((_DWORD)v11 == *(_DWORD *)(a2 + 8))
                  {
                    v12 = v11 + (v11 >> 2);
                    if (v12 >= 0x10)
                      v13 = v12 + 1;
                    else
                      v13 = 16;
                    if (v13 <= v11 + 1)
                      v14 = v11 + 1;
                    else
                      v14 = v13;
                    if (v14 >> 28)
                      goto LABEL_49;
                    v15 = *(void **)a2;
                    v16 = (void *)WTF::fastMalloc((WTF *)(16 * v14));
                    *(_DWORD *)(a2 + 8) = v14;
                    *(_QWORD *)a2 = v16;
                    result = (uint64_t)memcpy(v16, v15, 16 * v11);
                    if (v15)
                    {
                      if (*(void **)a2 == v15)
                      {
                        *(_QWORD *)a2 = 0;
                        *(_DWORD *)(a2 + 8) = 0;
                      }
                      result = WTF::fastFree((WTF *)v15, v17);
                    }
                    v11 = *(unsigned int *)(a2 + 12);
                    v18 = (uint64_t *)(*(_QWORD *)a2 + 16 * v11);
                    *v18 = v8;
                    v19 = v18 + 1;
                  }
                  else
                  {
                    v20 = (uint64_t *)(*(_QWORD *)a2 + 16 * v11);
                    *v20 = v8;
                    v19 = v20 + 1;
                  }
                  v8 = 0;
                  *v19 = v10;
                  *(_DWORD *)(a2 + 12) = v11 + 1;
                  v7 = 1;
                }
                else
                {
                  v7 = 1;
                  v8 = v10;
                }
              }
              else
              {
                v7 |= result;
              }
            }
            v6 = *(_QWORD *)(v6 + 56);
            if (!v6)
              break;
          }
          if (v8)
          {
            v21 = *(unsigned int *)(a2 + 12);
            if ((_DWORD)v21 == *(_DWORD *)(a2 + 8))
            {
              v22 = v21 + (v21 >> 2);
              if (v22 >= 0x10)
                v23 = v22 + 1;
              else
                v23 = 16;
              if (v23 <= v21 + 1)
                v24 = v21 + 1;
              else
                v24 = v23;
              if (v24 >> 28)
              {
LABEL_49:
                __break(0xC471u);
                JUMPOUT(0x1955F7F44);
              }
              v25 = *(void **)a2;
              v26 = (void *)WTF::fastMalloc((WTF *)(16 * v24));
              *(_DWORD *)(a2 + 8) = v24;
              *(_QWORD *)a2 = v26;
              result = (uint64_t)memcpy(v26, v25, 16 * v21);
              if (v25)
              {
                if (*(void **)a2 == v25)
                {
                  *(_QWORD *)a2 = 0;
                  *(_DWORD *)(a2 + 8) = 0;
                }
                result = WTF::fastFree((WTF *)v25, v27);
              }
              v21 = *(unsigned int *)(a2 + 12);
              v28 = (uint64_t *)(*(_QWORD *)a2 + 16 * v21);
              *v28 = v8;
              v29 = v28 + 1;
            }
            else
            {
              v30 = (uint64_t *)(*(_QWORD *)a2 + 16 * v21);
              *v30 = v8;
              v29 = v30 + 1;
            }
            *v29 = 0;
            *(_DWORD *)(a2 + 12) = v21 + 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityMathMLElement::mathLineThickness(WebCore::AccessibilityMathMLElement *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  unint64_t *v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;

  v2 = *((_QWORD *)this + 31);
  if (!v2)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || *(_BYTE *)(v3 + 46) != 54)
    return 0xFFFFFFFFLL;
  result = WebCore::RenderMathMLFraction::defaultLineThickness((WebCore::RenderMathMLFraction *)v3, a2);
  if ((_DWORD)result)
  {
    v5 = result;
    v6 = WebCore::MathMLFractionElement::lineThickness(*(WebCore::MathMLFractionElement **)(*(_QWORD *)(v3 + 24) + 8));
    v10 = WebCore::RenderMathMLFraction::defaultLineThickness((WebCore::RenderMathMLFraction *)v3, v7);
    v8 = WebCore::toUserUnits((uint64_t)v6, (WebCore::RenderStyle *)(v3 + 80), &v10);
    v9 = (uint64_t)((unint64_t)(v8 & ~(v8 >> 31)) << 6) / v5;
    if (v9 <= (uint64_t)0xFFFFFFFF80000000)
      v9 = 0xFFFFFFFF80000000;
    if (v9 >= 0x7FFFFFFF)
      LODWORD(v9) = 0x7FFFFFFF;
    return (int)(float)((float)(int)v9 * 0.015625);
  }
  return result;
}

uint64_t WebCore::AccessibilityMenuList::press(WebCore::AccessibilityMenuList *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityMenuList::addChildren(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 248);
  if (!v2)
    goto LABEL_9;
  if (!*(_QWORD *)(v2 + 8))
    goto LABEL_9;
  this = WebCore::AccessibilityObject::axObjectCache((WebCore::AccessibilityObject *)this);
  if (!this)
    goto LABEL_9;
  v3 = (uint64_t *)this;
  this = WebCore::AXObjectCache::create((uint64_t *)this, 79);
  if (!this)
    goto LABEL_9;
  v4 = (uint64_t *)this;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 472))(this) & 1) != 0)
  {
    (*(void (**)(uint64_t *, uint64_t))(*v4 + 3288))(v4, v1);
    if ((*(unsigned int (**)(uint64_t *))(*v4 + 856))(v4))
    {
      this = (uint64_t)WebCore::AXObjectCache::remove(v3, v4[2]);
    }
    else
    {
      *(_BYTE *)(v1 + 56) = 1;
      (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v1 + 3072))(v1, v4, *(unsigned int *)(v1 + 52), 1);
      this = (*(uint64_t (**)(uint64_t *))(*v4 + 3064))(v4);
    }
LABEL_9:
    *(_BYTE *)(v1 + 233) = 0;
    return this;
  }
  this = 96;
  __break(0xC471u);
  return this;
}

uint64_t WebCore::AccessibilityMenuList::isCollapsed(WebCore::AccessibilityMenuList *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityMenuList::canSetFocusAttribute(WebCore::AccessibilityMenuList *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    if (*(_BYTE *)(v2 + 46) != 49)
    {
      if ((*(_BYTE *)(v2 + 45) & 1) == 0)
      {
        v3 = *(_QWORD *)(v2 + 24);
        goto LABEL_7;
      }
      return 0;
    }
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
  }
  else
  {
    v3 = *((_QWORD *)this + 30);
    if (!v3)
      return 0;
  }
LABEL_7:
  if (!*(_QWORD *)(v3 + 8))
    return 0;
  if (v1 && (v4 = *(_QWORD *)(v1 + 8)) != 0)
  {
    if (*(_BYTE *)(v4 + 46) == 49)
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 40);
    else
      v5 = *(_QWORD *)(v4 + 24);
  }
  else
  {
    v5 = *((_QWORD *)this + 30);
  }
  v6 = *(_WORD **)(v5 + 8);
  if ((v6[14] & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1955F81D0);
  }
  return (*(unsigned int (**)(_WORD *))(*(_QWORD *)v6 + 960))(v6) ^ 1;
}

void WebCore::AccessibilityMenuList::didUpdateActiveOption(WebCore::AccessibilityMenuList *this, unsigned int a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  WTF **v12;
  WebCore::AXObjectCache *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  WebCore::AXObjectCache *v45;
  uint64_t v46;
  uint64_t *v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WebCore::AXObjectCache *v56;
  uint64_t v57[3];

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 24) + 8) + 40)
                 + 8);
  *(_DWORD *)(v4 + 24) += 2;
  (*(void (**)(WebCore::AccessibilityMenuList *))(*(_QWORD *)this + 1904))(this);
  if (*((_DWORD *)this + 13))
  {
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(***((_QWORD ***)this + 5) + 1896))(**((_QWORD **)this + 5), 1);
    if (!*((_DWORD *)this + 13))
    {
      __break(0xC471u);
      JUMPOUT(0x1955F8674);
    }
    v7 = *(_DWORD *)(v6 + 12);
    v8 = **((_QWORD **)this + 5);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8))
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 2808))(v8);
      if ((a2 & 0x80000000) == 0 && v9 && v7 > (int)a2)
      {
        v11 = WebCore::AccessibilityObject::axObjectCache((WebCore::AccessibilityObject *)v8);
        if (v11)
        {
          if (*(_DWORD *)(v8 + 52) <= a2)
          {
            __break(0xC471u);
            JUMPOUT(0x1955F86D8);
          }
          v12 = (WTF **)v11;
          v13 = *(WebCore::AXObjectCache **)(*(_QWORD *)(v8 + 40) + 8 * a2);
          if (!v13)
          {
            v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1720))(v8);
            if (v16)
              v17 = *(_QWORD *)(*(_QWORD *)(v16 + 328) + 296);
            else
              v17 = 0;
            v32 = WebCore::AXObjectCache::postNotification(v12, 0, v17, 24, 0);
            v33 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v8 + 1720))(v8, v32);
            if (v33)
              v34 = *(_QWORD *)(*(_QWORD *)(v33 + 328) + 296);
            else
              v34 = 0;
            WebCore::AXObjectCache::postNotification(v12, 0, v34, 65, 0);
            goto LABEL_51;
          }
          if (((*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)v13 + 48))(v13) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1955F8524);
          }
          v14 = *((_QWORD *)v13 + 1);
          if (__ldaxr((unsigned __int8 *)v14))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v14))
          {
            goto LABEL_19;
          }
          MEMORY[0x19AEA534C](v14);
LABEL_19:
          ++*(_QWORD *)(v14 + 8);
          v18 = __ldxr((unsigned __int8 *)v14);
          if (v18 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v14))
            {
LABEL_24:
              v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1720))(v8);
              if (v19)
                v20 = *(_QWORD *)(*(_QWORD *)(v19 + 328) + 296);
              else
                v20 = 0;
              v21 = WebCore::AXObjectCache::postNotification(v12, v13, v20, 24, 0);
              v22 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v8 + 1720))(v8, v21);
              if (v22)
                v23 = *(_QWORD *)(*(_QWORD *)(v22 + 328) + 296);
              else
                v23 = 0;
              v24.n128_f64[0] = WebCore::AXObjectCache::postNotification(v12, v13, v23, 65, 0);
              v25 = *((_QWORD *)v13 + 1);
              if (__ldaxr((unsigned __int8 *)v25))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v25))
              {
                goto LABEL_34;
              }
              MEMORY[0x19AEA534C](v25, v24);
LABEL_34:
              v27 = *(_QWORD *)(v25 + 8);
              v28 = v27 - 1;
              *(_QWORD *)(v25 + 8) = v27 - 1;
              if (v27 == 1)
              {
                v36 = *(_QWORD *)(v25 + 16);
                v29 = *(_QWORD *)(v25 + 24);
                *(_QWORD *)(v25 + 24) = 0;
                v30 = v36 != 0;
              }
              else
              {
                v29 = 0;
                v30 = 1;
              }
              v31 = __ldxr((unsigned __int8 *)v25);
              if (v31 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v25))
                {
LABEL_41:
                  if (!v28)
                  {
                    if (v29)
                      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v29 + 8))(v29, v24);
                    if (!v30)
                      WTF::fastFree((WTF *)v25, v5);
                  }
                  goto LABEL_51;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v25);
              goto LABEL_41;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v14);
          goto LABEL_24;
        }
      }
    }
  }
LABEL_51:
  v35 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v35 & 1) == 0)
    goto LABEL_52;
  if (*(_BYTE *)(v4 + 3362) || *(_BYTE *)(v4 + 3405))
  {
    v49 = *(_QWORD *)(v4 + 528);
    i = v4;
    if (v49)
    {
      v50 = *(_QWORD *)(v49 + 8);
      i = v4;
      if (v50)
      {
        v51 = *(_QWORD *)(v50 + 120);
        i = v4;
        if (v51)
        {
          v52 = *(_QWORD *)(v51 + 8);
          for (i = v4; v52; v52 = *(_QWORD *)(v55 + 8))
          {
            i = *(_QWORD *)(*(_QWORD *)(v52 + 40) + 8);
            v53 = *(_QWORD *)(i + 528);
            if (!v53)
              break;
            v54 = *(_QWORD *)(v53 + 8);
            if (!v54)
              break;
            v55 = *(_QWORD *)(v54 + 120);
            if (!v55)
              break;
          }
        }
      }
    }
  }
  else
  {
    v37 = *(_QWORD *)(v4 + 528);
    i = v4;
    if (v37)
    {
      v39 = *(_QWORD *)(v37 + 8);
      i = v4;
      if (v39)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(v39 + 128) + 8);
        v41 = v40 && *(_BYTE *)(v40 + 144) == 0;
        i = v4;
        if (v41)
        {
          v42 = *(_QWORD *)(v40 + 296);
          i = v4;
          if (v42)
            i = v42;
        }
      }
    }
  }
  *(_DWORD *)(i + 24) += 2;
  v57[0] = i;
  if (*(_QWORD *)(i + 1944))
    v43 = *(_BYTE *)(i + 3405) == 0;
  else
    v43 = 0;
  if (!v43)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v57);
    goto LABEL_52;
  }
  v44 = *(_QWORD *)(i + 1488);
  if (v44)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v57);
  }
  else
  {
    v45 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v56 = WebCore::AXObjectCache::AXObjectCache(v45, (WebCore::Document *)i);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)(i + 1488), &v56);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v56);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v44 = *(_QWORD *)(i + 1488);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v57);
    if (!v44)
      goto LABEL_52;
  }
  v46 = (*(uint64_t (**)(WebCore::AccessibilityMenuList *))(*(_QWORD *)this + 840))(this);
  if (v46)
  {
    v5 = (void *)v46;
    if ((*(_WORD *)(v46 + 28) & 8) != 0)
    {
      v47 = WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(v44 + 632, (_QWORD *)v46, (uint64_t)v57);
      if ((*(_QWORD *)(v44 + 400) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(v44 + 400) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        *(_QWORD *)(v44 + 392) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v47);
        WebCore::TimerBase::setNextFireTime(v44 + 368, v48 + 0.0);
      }
    }
  }
LABEL_52:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
}

uint64_t WebCore::AccessibilityNodeObject::node(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 30);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::AccessibilityMenuListOption::actionElement(WebCore::AccessibilityMenuListOption *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 30);
  if (!v1)
    return 0;
  result = *(_QWORD *)(v1 + 8);
  if (result)
  {
    if ((*(_WORD *)(result + 28) & 8) == 0)
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityMenuListOption::isEnabled(WebCore::AccessibilityMenuListOption *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 30);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if ((*(_WORD *)(v2 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    return *(unsigned __int8 *)(v2 + 112) == 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::AccessibilityMenuListOption::isVisible(WebCore::AccessibilityMenuListOption *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  WebCore::Document *v35;
  WebCore::AXObjectCache **v36;
  WebCore::AXObjectCache *v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::AXObjectCache *v42;
  uint64_t v43;

  v2 = *((_QWORD *)this + 30);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if ((*(_WORD *)(v3 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1955F8990);
  }
  if ((*(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 8) = v3;
    *(_BYTE *)(v5 + 32) = 0;
    v6 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v6 & 0xFFFF000000000000 | v5;
    v7 = v6 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v7);
        v26 = *(unsigned int *)(v7 + 28);
        if ((_DWORD)v26)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v26));
        v27 = *(WTF **)(v7 + 16);
        if (v27)
        {
          *(_QWORD *)(v7 + 16) = 0;
          *(_DWORD *)(v7 + 24) = 0;
          WTF::fastFree(v27, a2);
        }
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  v10 = *(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFLL;
  if (!v10)
    return 0;
  do
    v11 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v11 + 1, (unsigned int *)v10));
  v12 = *(_QWORD *)(v10 + 8);
  if (!v12)
    goto LABEL_22;
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
  v14 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v14 & 1) != 0)
  {
    v28 = v13;
    if (*(_BYTE *)(v13 + 3362) || *(_BYTE *)(v13 + 3405))
    {
      for (i = *(_QWORD *)(v13 + 528); i; i = *(_QWORD *)(v28 + 528))
      {
        v39 = *(_QWORD *)(i + 8);
        if (!v39)
          break;
        v40 = *(_QWORD *)(v39 + 120);
        if (!v40)
          break;
        v41 = *(_QWORD *)(v40 + 8);
        if (!v41)
          break;
        v28 = *(_QWORD *)(*(_QWORD *)(v41 + 40) + 8);
      }
    }
    else
    {
      v29 = *(_QWORD *)(v13 + 528);
      if (v29)
      {
        v30 = *(_QWORD *)(v29 + 8);
        if (v30)
        {
          v31 = *(_QWORD *)(*(_QWORD *)(v30 + 128) + 8);
          if (v31 && *(_BYTE *)(v31 + 144) == 0)
          {
            v33 = *(_QWORD *)(v31 + 296);
            if (v33)
              v28 = v33;
          }
        }
      }
    }
    *(_DWORD *)(v28 + 24) += 2;
    v43 = v28;
    if (*(_QWORD *)(v28 + 1944) && *(_BYTE *)(v28 + 3405) == 0)
    {
      v15 = *(_QWORD *)(v28 + 1488);
      if (!v15)
      {
        v35 = (WebCore::Document *)v28;
        v36 = (WebCore::AXObjectCache **)(v28 + 1488);
        v37 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
        v42 = WebCore::AXObjectCache::AXObjectCache(v37, v35);
        std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v36, &v42);
        std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v42);
        WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
        v15 = *((_QWORD *)v35 + 186);
      }
    }
    else
    {
      v15 = 0;
    }
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v43);
  }
  else
  {
    v15 = 0;
  }
  v16 = WebCore::HTMLOptionElement::ownerSelectElement(*(WebCore::HTMLOptionElement **)(v10 + 8));
  if (!v16 || (v17 = WebCore::AXObjectCache::getOrCreate(v15, v16, 0)) == 0)
  {
LABEL_22:
    v20 = 0;
    goto LABEL_23;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 592))(v17))
  {
    v18 = *((_QWORD *)this + 30);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        if ((*(_WORD *)(v19 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x1955F89B8);
        }
        v20 = WebCore::HTMLOptionElement::selected(v19, 1u);
        goto LABEL_23;
      }
    }
    goto LABEL_22;
  }
  v20 = 1;
  do
  {
LABEL_23:
    v21 = __ldaxr((unsigned int *)v10);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v10));
  if (!v22)
  {
    atomic_store(1u, (unsigned int *)v10);
    v23 = *(unsigned int *)(v10 + 28);
    if ((_DWORD)v23)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v23));
    v24 = *(WTF **)(v10 + 16);
    if (v24)
    {
      *(_QWORD *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 24) = 0;
      WTF::fastFree(v24, a2);
    }
    WTF::fastFree((WTF *)v10, a2);
  }
  return v20;
}

uint64_t WebCore::AccessibilityMenuListOption::isSelected(WebCore::AccessibilityMenuListOption *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 30);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if ((*(_WORD *)(v2 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    return WebCore::HTMLOptionElement::selected(v2, 1u);
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::AccessibilityMenuListOption::isOffScreen(WebCore::AccessibilityMenuListOption *this, void *a2)
{
  return WebCore::AccessibilityMenuListOption::isVisible(this, a2) ^ 1;
}

void WebCore::AccessibilityMenuListOption::setSelected(WebCore::AccessibilityMenuListOption *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 30);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_WORD *)(v3 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        if (!*(_BYTE *)(v3 + 112))
          WebCore::HTMLOptionElement::setSelected((WebCore::HTMLOptionElement *)v3, a2);
      }
      else
      {
        __break(0xC471u);
      }
    }
  }
}

uint64_t WebCore::AccessibilityMenuListOption::canSetSelectedAttribute(WebCore::AccessibilityMenuListOption *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 30);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if ((*(_WORD *)(v2 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    return *(unsigned __int8 *)(v2 + 112) == 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

BOOL WebCore::AccessibilityMenuListOption::computeAccessibilityIsIgnored(WebCore::AccessibilityMenuListOption *this)
{
  return WebCore::AccessibilityObject::defaultObjectInclusion(this) == 1;
}

unint64_t WebCore::AccessibilityMenuListOption::elementRect(WebCore::AccessibilityMenuListOption *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v29;
  uint64_t v30;

  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 8);
    if (v3)
    {
      v4 = v3[1];
      if (__ldaxr((unsigned __int8 *)v4))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v4))
      {
        goto LABEL_7;
      }
      MEMORY[0x19AEA534C](v4);
LABEL_7:
      ++*(_QWORD *)(v4 + 8);
      v6 = __ldxr((unsigned __int8 *)v4);
      if (v6 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v4))
        {
LABEL_12:
          v7 = (*(uint64_t (**)(_QWORD *))(*v3 + 1232))(v3);
          if (!v7)
          {
            v13 = WebCore::AccessibilityNodeObject::boundingBoxRect(this);
            goto LABEL_38;
          }
          v8 = (_QWORD *)v7;
          v9 = *(_QWORD *)(v7 + 8);
          if (__ldaxr((unsigned __int8 *)v9))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v9))
          {
            goto LABEL_17;
          }
          MEMORY[0x19AEA534C](v9);
LABEL_17:
          ++*(_QWORD *)(v9 + 8);
          v11 = __ldxr((unsigned __int8 *)v9);
          if (v11 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v9))
            {
LABEL_22:
              v13 = (*(uint64_t (**)(_QWORD *))(*v8 + 1512))(v8);
              v14 = v8[1];
              if (__ldaxr((unsigned __int8 *)v14))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v14))
              {
                goto LABEL_26;
              }
              MEMORY[0x19AEA534C](v14);
LABEL_26:
              v16 = *(_QWORD *)(v14 + 8);
              v17 = v16 - 1;
              *(_QWORD *)(v14 + 8) = v16 - 1;
              if (v16 == 1)
              {
                v29 = *(_QWORD *)(v14 + 16);
                v18 = *(_QWORD *)(v14 + 24);
                *(_QWORD *)(v14 + 24) = 0;
                v19 = v29 != 0;
              }
              else
              {
                v18 = 0;
                v19 = 1;
              }
              v20 = __ldxr((unsigned __int8 *)v14);
              if (v20 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v14))
                {
                  if (v17)
                    goto LABEL_38;
LABEL_34:
                  if (v18)
                    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
                  if (!v19)
                    WTF::fastFree((WTF *)v14, v12);
LABEL_38:
                  v21 = v3[1];
                  if (__ldaxr((unsigned __int8 *)v21))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v21))
                  {
                    goto LABEL_42;
                  }
                  MEMORY[0x19AEA534C](v21);
LABEL_42:
                  v23 = *(_QWORD *)(v21 + 8);
                  v24 = v23 - 1;
                  *(_QWORD *)(v21 + 8) = v23 - 1;
                  if (v23 == 1)
                  {
                    v30 = *(_QWORD *)(v21 + 16);
                    v25 = *(_QWORD *)(v21 + 24);
                    *(_QWORD *)(v21 + 24) = 0;
                    v26 = v30 != 0;
                  }
                  else
                  {
                    v25 = 0;
                    v26 = 1;
                  }
                  v27 = __ldxr((unsigned __int8 *)v21);
                  if (v27 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v21))
                    {
                      if (!v24)
                        goto LABEL_50;
                      return v13;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v21);
                  if (!v24)
                  {
LABEL_50:
                    if (v25)
                      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
                    if (!v26)
                      WTF::fastFree((WTF *)v21, v12);
                  }
                  return v13;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v14);
              if (v17)
                goto LABEL_38;
              goto LABEL_34;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v9);
          goto LABEL_22;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      goto LABEL_12;
    }
  }
  return WebCore::AccessibilityNodeObject::boundingBoxRect(this);
}

uint64_t WebCore::AccessibilityMenuListOption::parentObject(WebCore::AccessibilityMenuListOption *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

unint64_t WebCore::AccessibilityNodeObject::boundingBoxRect(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  void *v3;
  int v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v16;
  unint64_t v17;
  unsigned int v18;
  signed int v19;
  signed int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  int v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  uint64_t v56;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 832))(this);
  if (!v2)
    goto LABEL_52;
  v4 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v4 + 2;
  if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v26 = *(_QWORD *)((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0)
  {
    v5 = (*(_QWORD *)(v26 + 16) & 0x1FLL) == 18;
    if (!v4)
    {
LABEL_50:
      if ((*(_WORD *)(v2 + 30) & 0x400) != 0)
      {
        if (!v5)
          goto LABEL_52;
      }
      else
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
        if (!v5)
          goto LABEL_52;
      }
      goto LABEL_5;
    }
  }
  else
  {
    v5 = 0;
    if (!v4)
      goto LABEL_50;
  }
  *(_DWORD *)(v2 + 24) = v4;
  if (!v5)
    goto LABEL_52;
LABEL_5:
  v6 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *, _QWORD))(*(_QWORD *)this + 1896))(this, 0);
  v7 = *(unsigned int *)(v6 + 12);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 0;
    LODWORD(v10) = 0;
    v11 = *(_QWORD **)v6;
    v12 = 8 * v7;
    do
    {
      v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 1512))(*v11);
      if ((int)v14 >= 1 && SHIDWORD(v14) >= 1)
      {
        if ((int)v8 < 1 || SHIDWORD(v8) < 1)
        {
          v8 = v14;
          v9 = HIDWORD(v13);
          LODWORD(v10) = v13;
        }
        else
        {
          if ((int)v13 >= (int)v10)
            v16 = v10;
          else
            v16 = v13;
          if (SHIDWORD(v13) >= (int)v9)
            v17 = v9;
          else
            v17 = HIDWORD(v13);
          v18 = v10 + v8;
          if (__OFADD__((_DWORD)v10, (_DWORD)v8))
            v18 = (v10 >> 31) + 0x7FFFFFFF;
          v19 = v13 + v14;
          if (__OFADD__((_DWORD)v13, (_DWORD)v14))
            v19 = (v13 >> 31) + 0x7FFFFFFF;
          if ((int)v18 <= v19)
            v18 = v19;
          v20 = v9 + HIDWORD(v8);
          if (__OFADD__((_DWORD)v9, HIDWORD(v8)))
            v20 = (v9 >> 31) + 0x7FFFFFFF;
          v21 = HIDWORD(v13) + HIDWORD(v14);
          if (__OFADD__(HIDWORD(v13), HIDWORD(v14)))
            v21 = (HIDWORD(v13) >> 31) + 0x7FFFFFFF;
          if (v20 > v21)
            v21 = v20;
          LODWORD(v22) = v18 - v16;
          if (__OFSUB__(v18, v16))
            v22 = (v18 >> 31) + 0x7FFFFFFF;
          else
            v22 = v22;
          v23 = __OFSUB__(v21, (_DWORD)v17);
          v24 = v21 - v17;
          LODWORD(v25) = (v21 >> 31) + 0x7FFFFFFF;
          if (v23)
            v25 = v25;
          else
            v25 = v24;
          v8 = v22 | (v25 << 32);
          v9 = v17;
          LODWORD(v10) = v16;
        }
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
    if ((int)v8 >= 1 && SHIDWORD(v8) >= 1)
      return v10 | (v9 << 32);
  }
LABEL_52:
  v27 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1232))(this);
  v10 = v27;
  if (!v27)
  {
LABEL_113:
    v9 = 0;
    return v10 | (v9 << 32);
  }
  v28 = *(_QWORD *)(v27 + 8);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
LABEL_56:
    MEMORY[0x19AEA534C](v28);
    goto LABEL_57;
  }
  if (__stxr(1u, (unsigned __int8 *)v28))
    goto LABEL_56;
LABEL_57:
  ++*(_QWORD *)(v28 + 8);
  v30 = __ldxr((unsigned __int8 *)v28);
  if (v30 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v28))
      goto LABEL_62;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_62:
  while (1)
  {
    v31 = v10;
    if ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 848))(v10))
    {
      v32 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 1512))(v10);
      if ((int)v33 >= 1 && SHIDWORD(v33) >= 1)
        break;
    }
    v35 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 1232))(v10);
    v10 = v35;
    if (!v35)
      goto LABEL_78;
    v37 = *(_QWORD *)(v35 + 8);
    if (__ldaxr((unsigned __int8 *)v37))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v37))
    {
      goto LABEL_73;
    }
    MEMORY[0x19AEA534C](v37);
LABEL_73:
    ++*(_QWORD *)(v37 + 8);
    v39 = __ldxr((unsigned __int8 *)v37);
    if (v39 != 1)
    {
      __clrex();
LABEL_77:
      WTF::Lock::unlockSlow((WTF::Lock *)v37);
      goto LABEL_78;
    }
    if (__stlxr(0, (unsigned __int8 *)v37))
      goto LABEL_77;
LABEL_78:
    v40 = *(_QWORD *)(v31 + 8);
    if (__ldaxr((unsigned __int8 *)v40))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v40))
    {
      goto LABEL_82;
    }
    MEMORY[0x19AEA534C](v40);
LABEL_82:
    v42 = *(_QWORD *)(v40 + 8);
    v43 = v42 - 1;
    *(_QWORD *)(v40 + 8) = v42 - 1;
    if (v42 == 1)
    {
      v47 = *(_QWORD *)(v40 + 16);
      v44 = *(_QWORD *)(v40 + 24);
      *(_QWORD *)(v40 + 24) = 0;
      v45 = v47 != 0;
    }
    else
    {
      v44 = 0;
      v45 = 1;
    }
    v46 = __ldxr((unsigned __int8 *)v40);
    if (v46 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v40))
      {
        if (!v43)
          goto LABEL_90;
        goto LABEL_94;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v40);
    if (!v43)
    {
LABEL_90:
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      if (!v45)
        WTF::fastFree((WTF *)v40, v36);
    }
LABEL_94:
    if (!v10)
      goto LABEL_113;
  }
  v10 = v32;
  v48 = *(_QWORD *)(v31 + 8);
  if (__ldaxr((unsigned __int8 *)v48))
  {
    __clrex();
    goto LABEL_100;
  }
  if (__stxr(1u, (unsigned __int8 *)v48))
LABEL_100:
    MEMORY[0x19AEA534C](v48);
  v50 = *(_QWORD *)(v48 + 8);
  v51 = v50 - 1;
  *(_QWORD *)(v48 + 8) = v50 - 1;
  if (v50 == 1)
  {
    v56 = *(_QWORD *)(v48 + 16);
    v52 = *(_QWORD *)(v48 + 24);
    *(_QWORD *)(v48 + 24) = 0;
    v53 = v56 != 0;
  }
  else
  {
    v52 = 0;
    v53 = 1;
  }
  v9 = HIDWORD(v10);
  v54 = __ldxr((unsigned __int8 *)v48);
  if (v54 != 1)
  {
    __clrex();
LABEL_108:
    WTF::Lock::unlockSlow((WTF::Lock *)v48);
    if (!v51)
      goto LABEL_109;
    return v10 | (v9 << 32);
  }
  if (__stlxr(0, (unsigned __int8 *)v48))
    goto LABEL_108;
  if (!v51)
  {
LABEL_109:
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    if (!v53)
      WTF::fastFree((WTF *)v48, v33);
  }
  return v10 | (v9 << 32);
}

uint64_t WebCore::AccessibilityMenuListOption::stringValue@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 240);
  if (v3 && (this = *(_QWORD *)(v3 + 8)) != 0)
  {
    if ((*(_WORD *)(this + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(this + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    {
      return (uint64_t)WebCore::HTMLOptionElement::label((WebCore::HTMLOptionElement *)this, a2);
    }
    else
    {
      this = 105;
      __break(0xC471u);
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

uint64_t WebCore::AccessibilityMenuListPopup::isVisible(WebCore::AccessibilityMenuListPopup *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityMenuListPopup::isOffScreen(WebCore::AccessibilityMenuListPopup *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 30);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2864))(v2);
  else
    return 1;
}

uint64_t WebCore::AccessibilityMenuListPopup::isEnabled(WebCore::AccessibilityMenuListPopup *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 30);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 536))(v2);
  else
    return 0;
}

BOOL WebCore::AccessibilityMenuListPopup::computeAccessibilityIsIgnored(WebCore::AccessibilityMenuListPopup *this)
{
  return WebCore::AccessibilityObject::defaultObjectInclusion(this) == 1;
}

uint64_t WebCore::AccessibilityMenuListPopup::selectedChildren@<X0>(WebCore::AccessibilityMenuListPopup *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  void *v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = (*(uint64_t (**)(WebCore::AccessibilityMenuListPopup *))(*(_QWORD *)this + 1456))(this);
  v6 = (result - 19) > 0x37 || ((1 << (result - 19)) & 0xC1800000800001) == 0;
  if (v6 && ((result - 119) <= 0xB ? (v7 = ((1 << (result - 119)) & 0xC01) == 0) : (v7 = 1), v7))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  else
  {
    if (!*((_BYTE *)this + 56))
      WebCore::AccessibilityMenuListPopup::addChildren((uint64_t)this);
    v21 = 0;
    v22 = 0;
    v8 = *((unsigned int *)this + 13);
    if ((_DWORD)v8)
    {
      v9 = (_QWORD *)*((_QWORD *)this + 5);
      v10 = 8 * v8;
      while (1)
      {
        v11 = *v9;
        if (!*v9
          || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v11 + 48))(*v9)
          || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 2816))(v11)
          || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 544))(v11))
        {
          goto LABEL_31;
        }
        v12 = *v9;
        v20 = *v9;
        v13 = HIDWORD(v22);
        if (HIDWORD(v22) != (_DWORD)v22)
          break;
        WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AXCoreObject*>((uint64_t)&v21, &v20);
LABEL_31:
        ++v9;
        v10 -= 8;
        if (!v10)
        {
          v18 = v21;
          v19 = v22;
          goto LABEL_34;
        }
      }
      v14 = v21;
      if (!v12)
        goto LABEL_30;
      v15 = *(_QWORD *)(v12 + 8);
      if (__ldaxr((unsigned __int8 *)v15))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v15))
      {
LABEL_25:
        ++*(_QWORD *)(v15 + 8);
        v17 = __ldxr((unsigned __int8 *)v15);
        if (v17 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v15))
            goto LABEL_30;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_30:
        *(_QWORD *)(v14 + 8 * v13) = v12;
        ++HIDWORD(v22);
        goto LABEL_31;
      }
      MEMORY[0x19AEA534C](v15);
      goto LABEL_25;
    }
    v18 = 0;
    v19 = 0;
LABEL_34:
    v21 = 0;
    v22 = 0;
    *(_QWORD *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v19;
    *(_BYTE *)(a2 + 16) = 1;
    return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v5);
  }
  return result;
}

uint64_t WebCore::AccessibilityMenuListPopup::addChildren(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  WebCore::AXObjectCache *v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::AXObjectCache *v38;
  uint64_t v39;

  v1 = *(_QWORD *)(this + 240);
  if (v1)
  {
    v2 = this;
    this = *(_QWORD *)(v1 + 8);
    if (this)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 840))(this);
      if (this)
      {
        v3 = this;
        if ((*(_WORD *)(this + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(this + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
        {
          *(_DWORD *)(this + 24) += 2;
          *(_BYTE *)(v2 + 56) = 1;
          if (*(_BYTE *)(this + 300))
            this = (uint64_t)WebCore::HTMLSelectElement::recalcListItems(this, (void *)1, 1u);
          v4 = *(unsigned int *)(v3 + 196);
          if ((_DWORD)v4)
          {
            v5 = *(_QWORD *)(v3 + 184);
            v6 = v5 + 8 * v4;
            do
            {
              if (*(_QWORD *)v5)
              {
                v7 = *(_QWORD *)(*(_QWORD *)v5 + 8);
                if (v7)
                {
                  if ((*(_BYTE *)(v7 + 22) & 8) != 0)
                  {
                    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
                    if (*(_QWORD *)(v8 + 1944))
                    {
                      if (!*(_BYTE *)(v8 + 3405))
                      {
                        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1720))(v2);
                        if (v9)
                          v10 = *(_QWORD *)(*(_QWORD *)(v9 + 328) + 296);
                        else
                          v10 = 0;
                        v11 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
                        if ((v11 & 1) != 0)
                        {
                          v23 = v6;
                          v24 = v5;
                          v25 = v10;
                          if (*(_BYTE *)(v10 + 3362) || *(_BYTE *)(v10 + 3405))
                          {
                            for (i = *(_QWORD *)(v10 + 528); i; i = *(_QWORD *)(v25 + 528))
                            {
                              v35 = *(_QWORD *)(i + 8);
                              if (!v35)
                                break;
                              v36 = *(_QWORD *)(v35 + 120);
                              if (!v36)
                                break;
                              v37 = *(_QWORD *)(v36 + 8);
                              if (!v37)
                                break;
                              v25 = *(_QWORD *)(*(_QWORD *)(v37 + 40) + 8);
                            }
                          }
                          else
                          {
                            v26 = *(_QWORD *)(v10 + 528);
                            if (v26)
                            {
                              v27 = *(_QWORD *)(v26 + 8);
                              if (v27)
                              {
                                v28 = *(_QWORD *)(*(_QWORD *)(v27 + 128) + 8);
                                if (v28 && *(_BYTE *)(v28 + 144) == 0)
                                {
                                  v30 = *(_QWORD *)(v28 + 296);
                                  if (v30)
                                    v25 = v30;
                                }
                              }
                            }
                          }
                          *(_DWORD *)(v25 + 24) += 2;
                          v39 = v25;
                          if (*(_QWORD *)(v25 + 1944))
                            v31 = *(_BYTE *)(v25 + 3405) == 0;
                          else
                            v31 = 0;
                          if (v31)
                          {
                            v32 = *(_QWORD *)(v25 + 1488);
                            if (!v32)
                            {
                              v33 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
                              v38 = (WebCore::AXObjectCache *)WebCore::AXObjectCache::AXObjectCache(v33, (WebCore::Document *)v25);
                              std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)(v25 + 1488), &v38);
                              std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v38);
                              WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
                              v32 = *(_QWORD *)(v25 + 1488);
                            }
                          }
                          else
                          {
                            v32 = 0;
                          }
                          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v39);
                          v12 = v32;
                          v5 = v24;
                          v6 = v23;
                        }
                        else
                        {
                          v12 = 0;
                        }
                        this = WebCore::AXObjectCache::getOrCreate(v12, v7, 0);
                        if (this)
                        {
                          v13 = this;
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 2816))(this);
                          if ((_DWORD)this)
                          {
                            v15 = *(_QWORD *)(v2 + 32);
                            if (v15)
                              goto LABEL_68;
                            v15 = WTF::fastCompactMalloc((WTF *)0x10);
                            *(_DWORD *)v15 = 1;
                            *(_QWORD *)(v15 + 8) = v2;
                            v16 = *(unsigned int **)(v2 + 32);
                            *(_QWORD *)(v2 + 32) = v15;
                            if (!v16)
                              goto LABEL_68;
                            do
                            {
                              v17 = __ldaxr(v16);
                              v18 = v17 - 1;
                            }
                            while (__stlxr(v18, v16));
                            if (!v18)
                            {
                              atomic_store(1u, v16);
                              WTF::fastFree((WTF *)v16, v14);
                            }
                            v15 = *(_QWORD *)(v2 + 32);
                            if (v15)
                            {
LABEL_68:
                              do
                                v19 = __ldaxr((unsigned int *)v15);
                              while (__stlxr(v19 + 1, (unsigned int *)v15));
                            }
                            v20 = *(unsigned int **)(v13 + 248);
                            *(_QWORD *)(v13 + 248) = v15;
                            if (v20)
                            {
                              do
                              {
                                v21 = __ldaxr(v20);
                                v22 = v21 - 1;
                              }
                              while (__stlxr(v22, v20));
                              if (!v22)
                              {
                                atomic_store(1u, v20);
                                WTF::fastFree((WTF *)v20, v14);
                              }
                            }
                            this = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 3072))(v2, v13, *(unsigned int *)(v2 + 52), 0);
                          }
                        }
                      }
                    }
                  }
                }
              }
              v5 += 8;
            }
            while (v5 != v6);
          }
          if (*(_DWORD *)(v3 + 24) == 2)
          {
            if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)v3);
          }
          else
          {
            *(_DWORD *)(v3 + 24) -= 2;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::AccessibilityMenuListPopup::press(WebCore::AccessibilityMenuListPopup *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 30);
  if (!v1)
    return 0;
  result = *(_QWORD *)(v1 + 8);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 1848))(result);
    return 1;
  }
  return result;
}

uint64_t *WebCore::AccessibilityMenuListPopup::handleChildrenChanged(WebCore::AccessibilityMenuListPopup *this)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  result = (uint64_t *)WebCore::AccessibilityObject::axObjectCache(this);
  if (result)
  {
    v3 = *((unsigned int *)this + 13);
    if ((_DWORD)v3)
    {
      v4 = result;
      v5 = v3 - 1;
      while (v5 < *((unsigned int *)this + 13))
      {
        v6 = *(uint64_t **)(*((_QWORD *)this + 5) + 8 * v5);
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v6 + 1504))(v6);
        if (result)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v6 + 1504))(v6);
          if ((*((_BYTE *)result + 22) & 8) == 0
            || (v7 = *(_QWORD *)(result[5] + 8), !*(_QWORD *)(v7 + 1944))
            || *(_BYTE *)(v7 + 3405))
          {
            (*(void (**)(uint64_t *))(*v6 + 1912))(v6);
            result = WebCore::AXObjectCache::remove(v4, v6[2]);
          }
        }
        if (--v5 == -1)
          goto LABEL_11;
      }
      __break(0xC471u);
    }
    else
    {
LABEL_11:
      WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebCore::AccessibilityMenuListPopup *)((char *)this + 40), 0);
      *((_BYTE *)this + 56) = 0;
      return (uint64_t *)WebCore::AccessibilityMenuListPopup::addChildren((uint64_t)this);
    }
  }
  return result;
}

BOOL WebCore::AccessibilityMockObject::computeAccessibilityIsIgnored(WebCore::AccessibilityMockObject *this)
{
  return WebCore::AccessibilityObject::defaultObjectInclusion(this) == 1;
}

void WebCore::AccessibilityNodeObject::~AccessibilityNodeObject(WebCore::AccessibilityNodeObject *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E337CD98;
  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = off_1E337CD98;
  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::AccessibilityNodeObject::init(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3016))(this);
  *((_BYTE *)this + 57) = result;
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::detachRemoteParts(_QWORD *a1, int a2, __n128 a3)
{
  uint64_t v4;
  void *v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == 1 && (*(unsigned int (**)(_QWORD *))(*a1 + 1456))(a1) == 73)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 1488))(a1);
    if (v4)
      a3.n128_f64[0] = WebCore::AXObjectCache::postNotification((WTF **)v4, 0, *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8), 67, 0);
  }
  (*(void (**)(_QWORD *, __n128))(*a1 + 3104))(a1, a3);
  result = a1[30];
  a1[30] = 0;
  if (result)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)result));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)result);
      v9 = *(unsigned int *)(result + 28);
      if ((_DWORD)v9)
      {
        v12 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v9));
        result = v12;
      }
      v10 = *(WTF **)(result + 16);
      if (v10)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v11 = result;
        WTF::fastFree(v10, v5);
        result = v11;
      }
      return WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::firstChild(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
    if (v3)
      v4 = (*(_WORD *)(v3 + 28) & 4) == 0;
    else
      v4 = 1;
    if (v4)
      return 0;
    v5 = *(_QWORD *)(v3 + 80);
    if (!v5)
    {
      return 0;
    }
    else
    {
      result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1488))(this);
      if (result)
      {
        v6 = result;
        while (1)
        {
          result = WebCore::AXObjectCache::getOrCreate(v6, v5, 0);
          if (result)
            break;
          v5 = *(_QWORD *)(v5 + 56);
          if (!v5)
            return 0;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::lastChild(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this)
    && ((v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this)) != 0
      ? (v3 = (*(_WORD *)(v2 + 28) & 4) == 0)
      : (v3 = 1),
        !v3
     && (v4 = *(_QWORD *)(v2 + 88)) != 0
     && (v5 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1488))(this)) != 0))
  {
    return WebCore::AXObjectCache::getOrCreate(v5, v4, 0);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::AccessibilityNodeObject::previousSibling(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;

  if ((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this)
    && (v2 = *(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this)
                       + 48) & 0xFFFFFFFFFFFFLL) != 0
    && (v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1488))(this)) != 0)
  {
    return WebCore::AXObjectCache::getOrCreate(v3, v2, 0);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::AccessibilityNodeObject::nextSibling(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;

  if ((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this)
    && (v2 = *(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this)
                       + 56)) != 0
    && (v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1488))(this)) != 0)
  {
    return WebCore::AXObjectCache::getOrCreate(v3, v2, 0);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::AccessibilityNodeObject::parentObjectIfExists(WebCore::AccessibilityNodeObject *this)
{
  return (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1232))(this);
}

uint64_t WebCore::AccessibilityNodeObject::parentObject(WebCore::AccessibilityNodeObject *this)
{
  void *v2;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t *v8;
  int v9;

  if (!(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this))
    return 0;
  (*(void (**)(uint64_t **__return_ptr, WebCore::AccessibilityNodeObject *, uint64_t))(*(_QWORD *)this + 984))(&v8, this, 17);
  if (v9 && (v3 = *v8) != 0)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(*v8);
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    if ((v4 & 1) != 0)
      return v3;
  }
  else
  {
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v2);
  }
  v3 = *(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this) + 32);
  if (v3)
  {
    v6 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1488))(this);
    if (v6)
      return WebCore::AXObjectCache::getOrCreate(v6, v3, 0);
    return 0;
  }
  return v3;
}

unsigned int *WebCore::Accessibility::labelsForElement(unsigned int *this, WebCore::Element *a2)
{
  unsigned int *v2;
  void *v4;
  uint64_t v5;
  const WTF::AtomString *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  WebCore::Node *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WebCore::Node *v63;

  v2 = this;
  if (!a2 || (*((_WORD *)a2 + 14) & 0x10) == 0)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return this;
  }
  *((_DWORD *)a2 + 6) += 2;
  this = (unsigned int *)(*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 1192))(a2);
  if (!(_DWORD)this)
  {
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    goto LABEL_54;
  }
  v61 = 0;
  v62 = 0;
  v5 = *((_QWORD *)a2 + 13);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v45 = *(_DWORD *)(v5 + 4);
    if ((v45 & 1) != 0)
    {
      v46 = *(uint64_t **)(v5 + 40);
      LODWORD(v47) = *(_DWORD *)(v5 + 52);
    }
    else
    {
      v46 = (uint64_t *)(v5 + 32);
      LODWORD(v47) = v45 >> 5;
    }
    if ((_DWORD)v47)
    {
      v47 = v47;
      while (1)
      {
        v57 = *v46;
        if (*v46 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v57 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v57 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v46 += 2;
        if (!--v47)
          goto LABEL_134;
      }
    }
    else
    {
LABEL_134:
      v46 = 0;
    }
    v6 = (const WTF::AtomString *)(v46 + 1);
  }
  else
  {
    v6 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
  }
  if (*(_QWORD *)v6 && *(_DWORD *)(*(_QWORD *)v6 + 4))
  {
    if (v5)
    {
      v11 = *(_DWORD *)(v5 + 4);
      if ((v11 & 1) != 0)
      {
        v12 = *(uint64_t **)(v5 + 40);
        LODWORD(v13) = *(_DWORD *)(v5 + 52);
      }
      else
      {
        v12 = (uint64_t *)(v5 + 32);
        LODWORD(v13) = v11 >> 5;
      }
      if ((_DWORD)v13)
      {
        v13 = v13;
        do
        {
          v27 = *v12;
          if (*v12 == WebCore::HTMLNames::aria_labelAttr
            || *(_QWORD *)(v27 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
            && *(_QWORD *)(v27 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
          {
            goto LABEL_52;
          }
          v12 += 2;
        }
        while (--v13);
      }
    }
    v28 = WebCore::TreeScope::labelElementsForId(*((WebCore::TreeScope **)a2 + 5), v6);
    if (v28)
    {
      v29 = v28;
      v30 = *((unsigned int *)v28 + 3);
      if ((_DWORD)v30)
      {
        v60 = 0;
        if (v30 >> 29)
        {
          __break(0xC471u);
          goto LABEL_140;
        }
        v31 = (char *)WTF::fastMalloc((WTF *)(8 * v30));
        LODWORD(v60) = v30;
        v59 = v31;
        v32 = *((unsigned int *)v29 + 3);
        if ((_DWORD)v32)
        {
          LODWORD(v33) = 0;
          v34 = *v29;
          v35 = 8 * v32;
          do
          {
            v36 = *(_QWORD *)(*(_QWORD *)v34 + 8);
            if ((*(_WORD *)(v36 + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v36 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
            {
              *(_DWORD *)(v36 + 24) += 2;
              v63 = (WebCore::Node *)v36;
              if ((_DWORD)v33 == (_DWORD)v60)
              {
                v37 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v59, v33 + 1, (unint64_t)&v63);
                v33 = HIDWORD(v60);
                v31 = v59;
                v38 = *(_QWORD *)v37;
                *(_QWORD *)v37 = 0;
                *(_QWORD *)&v31[8 * v33] = v38;
              }
              else
              {
                v63 = 0;
                *(_QWORD *)&v31[8 * v33] = v36;
              }
              LODWORD(v33) = v33 + 1;
              HIDWORD(v60) = v33;
              v39 = v63;
              v63 = 0;
              if (v39)
              {
                if (*((_DWORD *)v39 + 6) == 2)
                {
                  if ((*((_WORD *)v39 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v39, v4);
                }
                else
                {
                  *((_DWORD *)v39 + 6) -= 2;
                }
              }
            }
            v34 += 8;
            v35 -= 8;
          }
          while (v35);
          v40 = v33;
          v30 = v60;
        }
        else
        {
          LODWORD(v33) = 0;
          v40 = 0;
        }
        if (v40 < v30)
        {
          if (v40 < v33)
          {
            v41 = v33;
            v42 = &v31[8 * v40];
            v43 = 8 * v41 - 8 * v40;
            do
            {
              v44 = *(_QWORD *)v42;
              *(_QWORD *)v42 = 0;
              if (v44)
              {
                if (*(_DWORD *)(v44 + 24) == 2)
                {
                  if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v44, v4);
                }
                else
                {
                  *(_DWORD *)(v44 + 24) -= 2;
                }
              }
              v42 += 8;
              v43 -= 8;
            }
            while (v43);
            HIDWORD(v60) = v40;
            LODWORD(v33) = v40;
          }
          if (v40)
          {
            LODWORD(v60) = v40;
            v31 = (char *)WTF::fastRealloc((WTF *)v31, (void *)(8 * v40));
            v59 = v31;
          }
          else if (v31)
          {
            v59 = 0;
            LODWORD(v60) = 0;
            WTF::fastFree((WTF *)v31, v4);
            v31 = 0;
          }
        }
        if ((_DWORD)v33)
        {
          if (v33 <= 0x10)
            v48 = 16;
          else
            v48 = v33;
          if (!(v48 >> 29))
          {
            v49 = WTF::fastMalloc((WTF *)(8 * v48));
            v50 = v49;
            v51 = 0;
            LODWORD(v62) = v48;
            v61 = v49;
            v52 = 8 * v33;
            do
            {
              v53 = *(_QWORD *)&v31[8 * v51];
              *(_QWORD *)&v31[8 * v51] = 0;
              *(_QWORD *)(v49 + 8 * v51++) = v53;
              v52 -= 8;
            }
            while (v52);
            HIDWORD(v62) = v51;
            v54 = 8 * v33;
            v55 = v31;
            while (1)
            {
              v56 = *(_QWORD *)v55;
              *(_QWORD *)v55 = 0;
              if (v56)
              {
                v58 = v55;
                if (*(_DWORD *)(v56 + 24) == 2)
                {
                  if ((*(_WORD *)(v56 + 30) & 0x400) != 0)
                    goto LABEL_113;
                  WebCore::Node::removedLastRef((WebCore::Node *)v56, v4);
                }
                else
                {
                  *(_DWORD *)(v56 + 24) -= 2;
                }
                v55 = v58;
              }
LABEL_113:
              v55 += 8;
              v54 -= 8;
              if (!v54)
                goto LABEL_121;
            }
          }
          __break(0xC471u);
LABEL_140:
          JUMPOUT(0x1955FA714);
        }
        v50 = 0;
        v48 = 0;
        LODWORD(v51) = 0;
LABEL_121:
        if (v31)
        {
          v59 = 0;
          LODWORD(v60) = 0;
          WTF::fastFree((WTF *)v31, v4);
        }
        if ((_DWORD)v51)
        {
          v61 = 0;
          v62 = 0;
          *(_QWORD *)v2 = v50;
          v2[2] = v48;
          v2[3] = v51;
          goto LABEL_53;
        }
      }
    }
  }
  v7 = *((_QWORD *)a2 + 13);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 4);
    if ((v8 & 1) == 0)
    {
      v9 = (uint64_t *)(v7 + 32);
      LODWORD(v10) = v8 >> 5;
      if (!(_DWORD)v10)
        goto LABEL_26;
LABEL_19:
      v10 = v10;
      while (1)
      {
        v14 = *v9;
        if (*v9 == WebCore::HTMLNames::aria_labelAttr
          || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
          && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
        {
          goto LABEL_52;
        }
        v9 += 2;
        if (!--v10)
          goto LABEL_26;
      }
    }
    v9 = *(uint64_t **)(v7 + 40);
    LODWORD(v10) = *(_DWORD *)(v7 + 52);
    if ((_DWORD)v10)
      goto LABEL_19;
  }
LABEL_26:
  v15 = *((_QWORD *)a2 + 4);
  if (v15)
  {
    v16 = *(_WORD *)(v15 + 28);
    if ((v16 & 8) != 0)
    {
      while ((v16 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
      {
        v15 = *(_QWORD *)(v15 + 32);
        if (v15)
        {
          v16 = *(_WORD *)(v15 + 28);
          if ((v16 & 8) != 0)
            continue;
        }
        goto LABEL_52;
      }
      v17 = *(_DWORD *)(v15 + 24);
      *(_DWORD *)(v15 + 24) = v17 + 2;
      v18 = *(_QWORD *)(v15 + 104);
      if (v18)
      {
        v19 = *(_DWORD *)(v18 + 4);
        if ((v19 & 1) != 0)
        {
          v20 = *(_QWORD *)(v18 + 40);
          LODWORD(v21) = *(_DWORD *)(v18 + 52);
          if ((_DWORD)v21)
          {
LABEL_36:
            v21 = v21;
            v22 = (uint64_t *)(v20 + 8);
            while (1)
            {
              v23 = *(v22 - 1);
              if (v23 == WebCore::HTMLNames::forAttr
                || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::forAttr + 24)
                && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::forAttr + 32))
              {
                goto LABEL_45;
              }
              v22 += 2;
              if (!--v21)
              {
                v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                goto LABEL_45;
              }
            }
          }
        }
        else
        {
          v20 = v18 + 32;
          LODWORD(v21) = v19 >> 5;
          if ((_DWORD)v21)
            goto LABEL_36;
        }
      }
      v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_45:
      v24 = *v22;
      if (!v24 || !*(_DWORD *)(v24 + 4) || v24 == *(_QWORD *)v6)
      {
        v25 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        *(_QWORD *)v2 = v25;
        v26 = *(_DWORD *)(v15 + 24);
        *(_DWORD *)(v15 + 24) = v26 + 2;
        *v25 = v15;
        *((_QWORD *)v2 + 1) = 0x100000001;
        if (v26)
        {
          *(_DWORD *)(v15 + 24) = v26;
        }
        else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v4);
        }
        goto LABEL_53;
      }
      if (v17)
      {
        *(_DWORD *)(v15 + 24) = v17;
      }
      else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v4);
      }
    }
  }
LABEL_52:
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
LABEL_53:
  this = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v4);
LABEL_54:
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(a2, v4);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  return this;
}

unint64_t WebCore::AccessibilityNodeObject::elementRect(WebCore::AccessibilityNodeObject *this)
{
  unint64_t v1;
  WebCore::AccessibilityNodeObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  int v7;
  WebCore::Element *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WebCore::AccessibilityNodeObject *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unsigned int v25;
  signed int v26;
  signed int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t result;
  WebCore::AccessibilityNodeObject *v35;
  uint64_t v36;
  unint64_t *v37;
  unsigned int v38;

  v2 = this;
  v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v3)
    return (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)v2 + 3040))(v2);
  v5 = v3;
  if ((*(_WORD *)(v3 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)v2 + 3040))(v2);
  }
  v6 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v6 + 2;
  v7 = *(_DWORD *)(*(_QWORD *)(v3 + 240) + 12);
  if (v7 != 4096 && v7 != 2)
  {
    v32 = 1;
    goto LABEL_55;
  }
  v9 = (WebCore::Element *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)v2 + 832))(v2);
  WebCore::Accessibility::labelsForElement((unsigned int *)&v37, v9);
  v10 = v38;
  v11 = *(_QWORD *)v2;
  v35 = v2;
  if (!v38)
  {
    v33 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(v11 + 3040))(v2);
    LODWORD(v2) = v33;
    v24 = HIDWORD(v33);
LABEL_54:
    WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, (void *)v14);
    v32 = 0;
    v1 = v2 | (v24 << 32);
    v6 = *(_DWORD *)(v5 + 24) - 2;
    v2 = v35;
LABEL_55:
    if (v6)
    {
      *(_DWORD *)(v5 + 24) = v6;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    if (!v32)
      return v1;
    return (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)v2 + 3040))(v2);
  }
  v12 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(v11 + 1488))(v2);
  v13 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)v2 + 3040))(v2);
  v15 = (WebCore::AccessibilityNodeObject *)v13;
  v16 = v14;
  v17 = HIDWORD(v13);
  v18 = HIDWORD(v14);
  v36 = v12;
  if (!v12)
  {
    LODWORD(v2) = v13;
    v24 = HIDWORD(v13);
    goto LABEL_54;
  }
  v19 = v37;
  v20 = 8 * v10;
  while (1)
  {
    v14 = *v19;
    if ((*(_QWORD *)(*v19 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_48;
    if ((*(_BYTE *)((*(_QWORD *)(*v19 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      break;
    v21 = WebCore::AXObjectCache::getOrCreate(v36, v14, 0);
    if (v21)
    {
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 1512))(v21);
      if ((int)v14 >= 1 && SHIDWORD(v14) >= 1)
      {
        if (v16 < 1 || (int)v18 < 1)
        {
          v2 = (WebCore::AccessibilityNodeObject *)v22;
          v24 = HIDWORD(v22);
          v16 = v14;
          v18 = HIDWORD(v14);
        }
        else
        {
          if ((int)v22 >= (int)v15)
            v2 = (WebCore::AccessibilityNodeObject *)v15;
          else
            v2 = (WebCore::AccessibilityNodeObject *)v22;
          if (SHIDWORD(v22) >= (int)v17)
            v24 = v17;
          else
            v24 = HIDWORD(v22);
          v25 = (_DWORD)v15 + v16;
          if (__OFADD__((_DWORD)v15, v16))
            v25 = (v15 >> 31) + 0x7FFFFFFF;
          v26 = v22 + v14;
          if (__OFADD__((_DWORD)v22, (_DWORD)v14))
            v26 = (v22 >> 31) + 0x7FFFFFFF;
          if ((int)v25 <= v26)
            v25 = v26;
          v27 = v17 + v18;
          if (__OFADD__((_DWORD)v17, (_DWORD)v18))
            v27 = (v17 >> 31) + 0x7FFFFFFF;
          v28 = HIDWORD(v22) + HIDWORD(v14);
          if (__OFADD__(HIDWORD(v22), HIDWORD(v14)))
            v28 = (HIDWORD(v22) >> 31) + 0x7FFFFFFF;
          if (v27 > v28)
            v28 = v27;
          v29 = __OFSUB__(v25, (_DWORD)v2);
          v30 = v25 - (_DWORD)v2;
          v31 = (v25 >> 31) + 0x7FFFFFFF;
          if (v29)
            v16 = v31;
          else
            v16 = v30;
          LODWORD(v18) = v28 - v24;
          if (__OFSUB__(v28, (_DWORD)v24))
            LODWORD(v18) = (v28 >> 31) + 0x7FFFFFFF;
        }
        goto LABEL_49;
      }
    }
LABEL_48:
    v2 = v15;
    v24 = v17;
LABEL_49:
    ++v19;
    v15 = v2;
    v17 = v24;
    v20 -= 8;
    if (!v20)
      goto LABEL_54;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::document(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (result)
    return *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this
                                                                                                 + 840))(this)
                                 + 40)
                     + 8);
  return result;
}

WebCore::AccessibilityNodeObject *WebCore::AccessibilityNodeObject::documentFrameView(WebCore::AccessibilityNodeObject *this)
{
  WebCore::AccessibilityNodeObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::AccessibilityNodeObject *result;
  char v6;
  uint64_t v7;

  v1 = this;
  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 528);
    if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
      return *(WebCore::AccessibilityNodeObject **)(v4 + 288);
    else
      return 0;
  }
  else
  {
    while (1)
    {
      v6 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)v1 + 56))(v1);
      v7 = *(_QWORD *)v1;
      if ((v6 & 1) != 0)
        break;
      result = (WebCore::AccessibilityNodeObject *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(v7 + 1232))(v1);
      v1 = result;
      if (!result)
        return result;
    }
    return (WebCore::AccessibilityNodeObject *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(v7 + 1720))(v1);
  }
}

uint64_t WebCore::AccessibilityNodeObject::determineAccessibilityRole(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3296))(this);
  *((_BYTE *)this + 234) = result;
  if ((_DWORD)result == 134)
    return WebCore::AccessibilityNodeObject::determineAccessibilityRoleFromNode(this, 0);
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::determineAccessibilityRoleFromNode(WebCore::AccessibilityObject *a1, int a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  unsigned __int8 v14;
  int v15;
  __int16 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::Element *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL isActiveSummary;
  int v30;
  BOOL v31;
  char v32;
  WebCore::QualifiedName::QualifiedNameImpl *v33;
  WebCore::QualifiedName::QualifiedNameImpl *v34;
  WebCore::QualifiedName::QualifiedNameImpl *v35;
  WebCore::QualifiedName::QualifiedNameImpl *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl ***v41;
  WTF::StringImpl **v42;
  WTF *v43;
  void *v44;
  BOOL v45;
  char v46;
  WTF *v47;
  void *v48;
  WTF *v49;
  void *v50;
  WTF *v51;
  void *v52;
  WTF *v53;
  void *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  WebCore::QualifiedName::QualifiedNameImpl *v65;
  WebCore::QualifiedName::QualifiedNameImpl *v66;
  WebCore::QualifiedName::QualifiedNameImpl *v67;
  WebCore::QualifiedName::QualifiedNameImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl ***v72;
  WTF::StringImpl **v73;
  WTF *v74;
  void *v75;
  WebCore::QualifiedName::QualifiedNameImpl *v76;
  WebCore::QualifiedName::QualifiedNameImpl *v77;
  WebCore::QualifiedName::QualifiedNameImpl *v78;
  WebCore::QualifiedName::QualifiedNameImpl *v79;
  WebCore::QualifiedName::QualifiedNameImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl ***v84;
  WTF::StringImpl **v85;
  WTF *v86;
  void *v87;
  WTF *v88;
  void *v89;
  WTF *v90;
  void *v91;
  WTF *v92;
  void *v93;
  WTF::StringImpl **v94;
  WTF *v95;
  void *v96;
  WTF *v97;
  void *v98;
  WTF *v99;
  void *v100;
  WTF *v101;
  void *v102;
  WTF *v103;
  void *v104;
  WTF *v105;
  void *v106;
  WTF *v107;
  void *v108;
  WTF *v109;
  void *v110;
  WTF *v111;
  void *v112;
  WTF *v113;
  void *v114;
  WTF *v115;
  void *v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WebCore::QualifiedName::QualifiedNameImpl *v122;
  WebCore::QualifiedName::QualifiedNameImpl *v123;
  WebCore::QualifiedName::QualifiedNameImpl *v124;
  WebCore::QualifiedName::QualifiedNameImpl *v125;
  WebCore::QualifiedName::QualifiedNameImpl *v126;
  WebCore::QualifiedName::QualifiedNameImpl *v127;
  WTF::StringImpl ***v128;
  _BYTE v129[24];
  WebCore::QualifiedName::QualifiedNameImpl *v130;
  WebCore::QualifiedName::QualifiedNameImpl *v131;
  WebCore::QualifiedName::QualifiedNameImpl *v132;
  WebCore::QualifiedName::QualifiedNameImpl *v133;
  WebCore::QualifiedName::QualifiedNameImpl *v134;
  WebCore::QualifiedName::QualifiedNameImpl *v135;
  WebCore::QualifiedName::QualifiedNameImpl *v136;
  WebCore::QualifiedName::QualifiedNameImpl *v137;
  WebCore::QualifiedName::QualifiedNameImpl *v138;
  WebCore::QualifiedName::QualifiedNameImpl *v139;
  WebCore::QualifiedName::QualifiedNameImpl *v140[3];

  v140[1] = *(WebCore::QualifiedName::QualifiedNameImpl **)MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 840))(a1);
  if (!v4)
    return -122;
  v6 = v4;
  v7 = *(_DWORD *)(v4 + 24);
  v8 = v7 + 2;
  *(_DWORD *)(v4 + 24) = v7 + 2;
  v9 = *(_WORD *)(v4 + 28);
  if ((v9 & 2) != 0)
  {
    v14 = 107;
    goto LABEL_18;
  }
  if ((v9 & 0x10) != 0)
    v10 = v4;
  else
    v10 = 0;
  if ((v9 & 0x10) == 0)
  {
    v14 = -122;
    goto LABEL_18;
  }
  v11 = v7 + 4;
  *(_DWORD *)(v4 + 24) = v7 + 4;
  v12 = *(_WORD *)(v4 + 30);
  if ((v12 & 1) != 0)
  {
    v14 = -117;
    goto LABEL_16;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
  if (v13 == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    *(_DWORD *)(v4 + 24) = v7 + 6;
    if (*(_BYTE *)(v4 + 297))
      v14 = 67;
    else
      v14 = 84;
    if (v7 != -4)
    {
      *(_DWORD *)(v4 + 24) = v11;
      goto LABEL_16;
    }
    if ((v12 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_16;
  }
  if (v13 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
  {
    *(_DWORD *)(v4 + 24) = v7 + 6;
    v18 = *(_QWORD *)(v4 + 104);
    if (v18)
    {
      v19 = *(_DWORD *)(v18 + 4);
      if ((v19 & 1) != 0)
      {
        v20 = *(uint64_t **)(v18 + 40);
        LODWORD(v21) = *(_DWORD *)(v18 + 52);
      }
      else
      {
        v20 = (uint64_t *)(v18 + 32);
        LODWORD(v21) = v19 >> 5;
      }
      if ((_DWORD)v21)
      {
        v21 = v21;
        while (1)
        {
          v22 = *v20;
          if (*v20 == WebCore::HTMLNames::usemapAttr
            || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::usemapAttr + 24)
            && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::usemapAttr + 32))
          {
            break;
          }
          v20 += 2;
          if (!--v21)
            goto LABEL_45;
        }
        if (v11)
        {
          *(_DWORD *)(v4 + 24) = v11;
        }
        else if ((v12 & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
        }
        v14 = 50;
        goto LABEL_16;
      }
    }
LABEL_45:
    if (v11)
    {
      *(_DWORD *)(v4 + 24) = v11;
    }
    else if ((v12 & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
      v13 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24);
    }
  }
  if (v13 == *(_QWORD *)(WebCore::HTMLNames::liTag + 24))
  {
    v14 = 69;
    goto LABEL_16;
  }
  if (v13 == *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24))
  {
    v14 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 3280))(a1);
    goto LABEL_16;
  }
  if (v13 == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
  {
    v14 = 63;
    goto LABEL_16;
  }
  if (v13 == *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
  {
    v14 = 11;
    goto LABEL_16;
  }
  if (v13 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v23 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 840))(a1);
    if (v23
      && (*(_WORD *)(v23 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v23 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24)
      || (v24 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 832))(a1),
          WebCore::AccessibilityObject::contentEditableAttributeIsEnabled(v24, v25)))
    {
      v14 = 125;
      goto LABEL_16;
    }
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 872))(a1))
    {
      v14 = 45;
      goto LABEL_16;
    }
    v26 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24);
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::codeTag + 24))
    {
      v14 = 15;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::delTag + 24) || v26 == *(_QWORD *)(WebCore::HTMLNames::sTag + 24))
    {
      v14 = 22;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::insTag + 24))
    {
      v14 = 53;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::subTag + 24))
    {
      v14 = 109;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::supTag + 24))
    {
      v14 = 112;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::strongTag + 24))
    {
      v14 = 108;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::kbdTag + 24)
      || v26 == *(_QWORD *)(WebCore::HTMLNames::preTag + 24)
      || v26 == *(_QWORD *)(WebCore::HTMLNames::sampTag + 24)
      || v26 == *(_QWORD *)(WebCore::HTMLNames::varTag + 24)
      || v26 == *(_QWORD *)(WebCore::HTMLNames::citeTag + 24))
    {
      v31 = a2 == 0;
      v32 = 48;
      goto LABEL_123;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::ddTag + 24))
    {
      v14 = 24;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::dtTag + 24))
    {
      v14 = 25;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
    {
      v14 = 23;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::menuTag + 24)
      || v26 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
      || v26 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
    {
      v14 = 66;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
      goto LABEL_220;
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::figureTag + 24))
    {
      v14 = 34;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::pTag + 24))
    {
      v14 = 83;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
    {
      v14 = 54;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::dfnTag + 24))
    {
      v14 = 124;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
    {
      if (!(*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 480))(a1))
      {
        v14 = 38;
        goto LABEL_16;
      }
      v26 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24);
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
    {
      v14 = 37;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::articleTag + 24))
    {
      v14 = 29;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::mainTag + 24))
    {
      v14 = 59;
      goto LABEL_16;
    }
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::navTag + 24))
    {
      v14 = 60;
      goto LABEL_16;
    }
    if (v26 != *(_QWORD *)(WebCore::HTMLNames::asideTag + 24))
    {
      if (v26 == *(_QWORD *)(WebCore::HTMLNames::searchTag + 24))
      {
        v14 = 62;
        goto LABEL_16;
      }
      if (v26 != *(_QWORD *)(WebCore::HTMLNames::sectionTag + 24))
      {
        if (v26 == *(_QWORD *)(WebCore::HTMLNames::addressTag + 24))
          goto LABEL_220;
        if (v26 == *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
        {
          v14 = 9;
          goto LABEL_16;
        }
        if (v26 == *(_QWORD *)(WebCore::HTMLNames::captionTag + 24)
          || v26 == *(_QWORD *)(WebCore::HTMLNames::figcaptionTag + 24))
        {
          v14 = 12;
          goto LABEL_16;
        }
        if (v26 == *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24))
        {
          v14 = 3;
          goto LABEL_16;
        }
        if (v26 == *(_QWORD *)(WebCore::HTMLNames::markTag + 24))
          goto LABEL_208;
        v27 = *WebCore::AccessibilityObject::getAttribute(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::roleAttr);
        if (v27 && *(_DWORD *)(v27 + 4) == 4)
        {
          v59 = *(_QWORD *)(v27 + 8);
          if ((*(_BYTE *)(v27 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v59 & 0xDF) != 0x4D
              || (*(_BYTE *)(v59 + 1) & 0xDF) != 0x41
              || (*(_BYTE *)(v59 + 2) & 0xDF) != 0x52)
            {
              goto LABEL_111;
            }
            v60 = *(unsigned __int8 *)(v59 + 3);
          }
          else
          {
            if ((*(_WORD *)v59 & 0xFFDF) != 0x4D
              || (*(_WORD *)(v59 + 2) & 0xFFDF) != 0x41
              || (*(_WORD *)(v59 + 4) & 0xFFDF) != 0x52)
            {
              goto LABEL_111;
            }
            v60 = *(unsigned __int16 *)(v59 + 6);
          }
          if ((v60 & 0xFFFFFFDF) == 0x4B)
          {
LABEL_208:
            v14 = 71;
            goto LABEL_16;
          }
        }
LABEL_111:
        v28 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24);
        if (v28 == *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24))
        {
          v14 = 26;
          goto LABEL_16;
        }
        if (v28 == *(_QWORD *)(WebCore::HTMLNames::summaryTag + 24))
        {
          *(_DWORD *)(v10 + 24) += 2;
          isActiveSummary = WebCore::HTMLSummaryElement::isActiveSummary((WebCore::HTMLSummaryElement *)v10);
          v30 = *(_DWORD *)(v10 + 24) - 2;
          if (isActiveSummary)
          {
            if (*(_DWORD *)(v10 + 24) == 2)
            {
              if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v10, v5);
            }
            else
            {
              *(_DWORD *)(v10 + 24) = v30;
            }
            v14 = 111;
            goto LABEL_16;
          }
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10, v5);
          }
          else
          {
            *(_DWORD *)(v10 + 24) = v30;
          }
        }
        v55 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 840))(a1);
        if (v55
          && (*(_WORD *)(v55 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v55 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::outputTag + 24))
        {
          v14 = 6;
          goto LABEL_16;
        }
        if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
        {
          v14 = -120;
          goto LABEL_16;
        }
        v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 824))(v10);
        v57 = *(_QWORD *)(v6 + 96);
        if ((v56 & 1) != 0)
        {
          v58 = *(_QWORD *)(v57 + 24);
          if (v58 == *(_QWORD *)(WebCore::HTMLNames::audioTag + 24))
          {
            v14 = 8;
            goto LABEL_16;
          }
        }
        else
        {
          v58 = *(_QWORD *)(v57 + 24);
        }
        if (v58 == *(_QWORD *)(WebCore::HTMLNames::modelTag + 24))
        {
          v14 = 82;
          goto LABEL_16;
        }
        if (v58 == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          v14 = 47;
          goto LABEL_16;
        }
        if (v58 != *(_QWORD *)(WebCore::HTMLNames::headerTag + 24))
        {
          if (v58 != *(_QWORD *)(WebCore::HTMLNames::footerTag + 24))
          {
            if (v58 == *(_QWORD *)(WebCore::HTMLNames::timeTag + 24))
            {
              v14 = 0x80;
              goto LABEL_16;
            }
            if (v58 == *(_QWORD *)(WebCore::HTMLNames::hrTag + 24))
            {
              v14 = 46;
              goto LABEL_16;
            }
            if (v58 == *(_QWORD *)(WebCore::HTMLNames::emTag + 24))
            {
              v14 = 32;
              goto LABEL_16;
            }
            if (v58 == *(_QWORD *)(WebCore::HTMLNames::hgroupTag + 24)
              || WebCore::AccessibilityObject::supportsARIAAttributes(a1))
            {
LABEL_220:
              v14 = 44;
              goto LABEL_16;
            }
            v117 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 800))(a1);
            v14 = 44;
            if ((v117 & 1) != 0)
              goto LABEL_16;
            v45 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 552))(v10) == 0;
            v46 = -122;
LABEL_179:
            if (v45)
              v14 = v46;
            goto LABEL_16;
          }
          v127 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::articleTag;
          if (WebCore::HTMLNames::articleTag)
            ++*(_DWORD *)WebCore::HTMLNames::articleTag;
          v130 = v127;
          v126 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::asideTag;
          if (WebCore::HTMLNames::asideTag)
            ++*(_DWORD *)WebCore::HTMLNames::asideTag;
          v131 = v126;
          v125 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::navTag;
          if (WebCore::HTMLNames::navTag)
            ++*(_DWORD *)WebCore::HTMLNames::navTag;
          v132 = v125;
          v124 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::sectionTag;
          if (WebCore::HTMLNames::sectionTag)
            ++*(_DWORD *)WebCore::HTMLNames::sectionTag;
          v133 = v124;
          v123 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::mainTag;
          if (WebCore::HTMLNames::mainTag)
            ++*(_DWORD *)WebCore::HTMLNames::mainTag;
          v134 = v123;
          v122 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::blockquoteTag;
          if (WebCore::HTMLNames::blockquoteTag)
            ++*(_DWORD *)WebCore::HTMLNames::blockquoteTag;
          v135 = v122;
          v76 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::detailsTag;
          if (WebCore::HTMLNames::detailsTag)
            ++*(_DWORD *)WebCore::HTMLNames::detailsTag;
          v136 = v76;
          v77 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::dialogTag;
          if (WebCore::HTMLNames::dialogTag)
            ++*(_DWORD *)WebCore::HTMLNames::dialogTag;
          v137 = v77;
          v78 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::fieldsetTag;
          if (WebCore::HTMLNames::fieldsetTag)
            ++*(_DWORD *)WebCore::HTMLNames::fieldsetTag;
          v138 = v78;
          v79 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::figureTag;
          if (WebCore::HTMLNames::figureTag)
            ++*(_DWORD *)WebCore::HTMLNames::figureTag;
          v139 = v79;
          v80 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::tdTag;
          if (WebCore::HTMLNames::tdTag)
            ++*(_DWORD *)WebCore::HTMLNames::tdTag;
          v140[0] = v80;
          v128 = 0;
          WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v130);
          WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v131);
          WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v132);
          WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v133);
          WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v134);
          WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v135);
          WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v136);
          WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v137);
          WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v138);
          WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v139);
          WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, v140);
          v81 = *((_QWORD *)a1 + 30);
          if (v81
            && (v120 = *(_QWORD *)(v81 + 8)) != 0
            && (v121 = *(_QWORD *)(v120 + 32)) != 0
            && (*(_WORD *)(v121 + 28) & 8) != 0)
          {
            v82 = (uint64_t)v128;
            while ((WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::QualifiedName>,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(v82, (WebCore::QualifiedName::QualifiedNameImpl **)(v121 + 96)) & 1) == 0)
            {
              v121 = *(_QWORD *)(v121 + 32);
              if (!v121 || (*(_WORD *)(v121 + 28) & 8) == 0)
                goto LABEL_280;
            }
            v14 = 35;
            if (!v82)
              goto LABEL_296;
          }
          else
          {
LABEL_280:
            v14 = 57;
            v82 = (uint64_t)v128;
            if (!v128)
            {
LABEL_296:
              if (v80)
              {
                if (*(_DWORD *)v80 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v80);
                  WTF::fastFree(v95, v96);
                }
                else
                {
                  --*(_DWORD *)v80;
                }
              }
              if (v79)
              {
                if (*(_DWORD *)v79 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v79);
                  WTF::fastFree(v97, v98);
                }
                else
                {
                  --*(_DWORD *)v79;
                }
              }
              if (v78)
              {
                if (*(_DWORD *)v78 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v78);
                  WTF::fastFree(v99, v100);
                }
                else
                {
                  --*(_DWORD *)v78;
                }
              }
              if (v77)
              {
                if (*(_DWORD *)v77 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v77);
                  WTF::fastFree(v101, v102);
                }
                else
                {
                  --*(_DWORD *)v77;
                }
              }
              if (v76)
              {
                if (*(_DWORD *)v76 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v76);
                  WTF::fastFree(v103, v104);
                }
                else
                {
                  --*(_DWORD *)v76;
                }
              }
              if (v122)
              {
                if (*(_DWORD *)v122 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v122);
                  WTF::fastFree(v105, v106);
                }
                else
                {
                  --*(_DWORD *)v122;
                }
              }
              if (v123)
              {
                if (*(_DWORD *)v123 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v123);
                  WTF::fastFree(v107, v108);
                }
                else
                {
                  --*(_DWORD *)v123;
                }
              }
              if (v124)
              {
                if (*(_DWORD *)v124 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v124);
                  WTF::fastFree(v109, v110);
                }
                else
                {
                  --*(_DWORD *)v124;
                }
              }
              if (v125)
              {
                if (*(_DWORD *)v125 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v125);
                  WTF::fastFree(v111, v112);
                }
                else
                {
                  --*(_DWORD *)v125;
                }
              }
              if (!v126)
                goto LABEL_356;
              if (*(_DWORD *)v126 != 1)
              {
                --*(_DWORD *)v126;
                goto LABEL_356;
              }
              v94 = (WTF::StringImpl **)v126;
LABEL_355:
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v94);
              WTF::fastFree(v113, v114);
LABEL_356:
              if (v127)
              {
                if (*(_DWORD *)v127 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v127);
                  WTF::fastFree(v115, v116);
                }
                else
                {
                  --*(_DWORD *)v127;
                }
              }
              goto LABEL_16;
            }
          }
          v83 = *(unsigned int *)(v82 - 4);
          if ((_DWORD)v83)
          {
            v84 = (WTF::StringImpl ***)v82;
            do
            {
              v85 = *v84;
              if (*v84 != (WTF::StringImpl **)-1)
              {
                *v84 = 0;
                if (v85)
                {
                  if (*(_DWORD *)v85 == 1)
                  {
                    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v85);
                    WTF::fastFree(v86, v87);
                  }
                  else
                  {
                    --*(_DWORD *)v85;
                  }
                }
              }
              ++v84;
              --v83;
            }
            while (v83);
          }
          WTF::fastFree((WTF *)(v82 - 16), v5);
          goto LABEL_296;
        }
        v127 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::articleTag;
        if (WebCore::HTMLNames::articleTag)
          ++*(_DWORD *)WebCore::HTMLNames::articleTag;
        v130 = v127;
        v65 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::asideTag;
        if (WebCore::HTMLNames::asideTag)
          ++*(_DWORD *)WebCore::HTMLNames::asideTag;
        v131 = v65;
        v66 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::mainTag;
        if (WebCore::HTMLNames::mainTag)
          ++*(_DWORD *)WebCore::HTMLNames::mainTag;
        v132 = v66;
        v67 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::navTag;
        if (WebCore::HTMLNames::navTag)
          ++*(_DWORD *)WebCore::HTMLNames::navTag;
        v133 = v67;
        v68 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::sectionTag;
        if (WebCore::HTMLNames::sectionTag)
          ++*(_DWORD *)WebCore::HTMLNames::sectionTag;
        v134 = v68;
        v128 = 0;
        WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v130);
        WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v131);
        WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v132);
        WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v133);
        WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v134);
        v69 = *((_QWORD *)a1 + 30);
        if (v69
          && (v118 = *(_QWORD *)(v69 + 8)) != 0
          && (v119 = *(_QWORD *)(v118 + 32)) != 0
          && (*(_WORD *)(v119 + 28) & 8) != 0)
        {
          v70 = (uint64_t)v128;
          while ((WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::QualifiedName>,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(v70, (WebCore::QualifiedName::QualifiedNameImpl **)(v119 + 96)) & 1) == 0)
          {
            v119 = *(_QWORD *)(v119 + 32);
            if (!v119 || (*(_WORD *)(v119 + 28) & 8) == 0)
              goto LABEL_243;
          }
          v14 = 38;
          if (!v70)
            goto LABEL_291;
        }
        else
        {
LABEL_243:
          v14 = 55;
          v70 = (uint64_t)v128;
          if (!v128)
          {
LABEL_291:
            if (v68)
            {
              if (*(_DWORD *)v68 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v68);
                WTF::fastFree(v88, v89);
              }
              else
              {
                --*(_DWORD *)v68;
              }
            }
            if (v67)
            {
              if (*(_DWORD *)v67 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v67);
                WTF::fastFree(v90, v91);
              }
              else
              {
                --*(_DWORD *)v67;
              }
            }
            if (v66)
            {
              if (*(_DWORD *)v66 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v66);
                WTF::fastFree(v92, v93);
              }
              else
              {
                --*(_DWORD *)v66;
              }
            }
            if (!v65)
              goto LABEL_356;
            if (*(_DWORD *)v65 != 1)
            {
              --*(_DWORD *)v65;
              goto LABEL_356;
            }
            v94 = (WTF::StringImpl **)v65;
            goto LABEL_355;
          }
        }
        v71 = *(unsigned int *)(v70 - 4);
        if ((_DWORD)v71)
        {
          v72 = (WTF::StringImpl ***)v70;
          do
          {
            v73 = *v72;
            if (*v72 != (WTF::StringImpl **)-1)
            {
              *v72 = 0;
              if (v73)
              {
                if (*(_DWORD *)v73 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v73);
                  WTF::fastFree(v74, v75);
                }
                else
                {
                  --*(_DWORD *)v73;
                }
              }
            }
            ++v72;
            --v71;
          }
          while (v71);
        }
        WTF::fastFree((WTF *)(v70 - 16), v5);
        goto LABEL_291;
      }
      v31 = !WebCore::hasAccNameAttribute((WebCore *)v10, (WebCore::Element *)v5);
      v32 = 61;
LABEL_123:
      if (v31)
        v14 = 127;
      else
        v14 = v32;
      goto LABEL_16;
    }
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 2976))(a1) == 56)
    {
      v14 = 56;
      goto LABEL_16;
    }
    v33 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::asideTag;
    if (WebCore::HTMLNames::asideTag)
      ++*(_DWORD *)WebCore::HTMLNames::asideTag;
    v130 = v33;
    v34 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::articleTag;
    if (WebCore::HTMLNames::articleTag)
      ++*(_DWORD *)WebCore::HTMLNames::articleTag;
    v131 = v34;
    v35 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::sectionTag;
    if (WebCore::HTMLNames::sectionTag)
      ++*(_DWORD *)WebCore::HTMLNames::sectionTag;
    v132 = v35;
    v36 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::navTag;
    if (WebCore::HTMLNames::navTag)
      ++*(_DWORD *)WebCore::HTMLNames::navTag;
    v133 = v36;
    v128 = 0;
    WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v130);
    WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v131);
    WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v132);
    WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add((uint64_t)v129, (uint64_t *)&v128, &v133);
    v37 = *((_QWORD *)a1 + 30);
    if (v37
      && (v61 = *(_QWORD *)(v37 + 8)) != 0
      && (v62 = *(_QWORD *)(v61 + 32)) != 0
      && (*(_WORD *)(v62 + 28) & 8) != 0)
    {
      v63 = (uint64_t)v128;
      do
      {
        v64 = WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::QualifiedName>,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(v63, (WebCore::QualifiedName::QualifiedNameImpl **)(v62 + 96));
        if ((v64 & 1) != 0)
          break;
        v62 = *(_QWORD *)(v62 + 32);
        if (!v62)
          break;
      }
      while ((*(_WORD *)(v62 + 28) & 8) != 0);
      v38 = v64 ^ 1;
    }
    else
    {
      v38 = 1;
    }
    v39 = (uint64_t)v128;
    if (v128)
    {
      v40 = *((unsigned int *)v128 - 1);
      if ((_DWORD)v40)
      {
        v41 = v128;
        do
        {
          v42 = *v41;
          if (*v41 != (WTF::StringImpl **)-1)
          {
            *v41 = 0;
            if (v42)
            {
              if (*(_DWORD *)v42 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v42);
                WTF::fastFree(v43, v44);
              }
              else
              {
                --*(_DWORD *)v42;
              }
            }
          }
          ++v41;
          --v40;
        }
        while (v40);
      }
      WTF::fastFree((WTF *)(v39 - 16), v5);
    }
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v36);
        WTF::fastFree(v47, v48);
        if (!v35)
          goto LABEL_171;
        goto LABEL_169;
      }
      --*(_DWORD *)v36;
    }
    if (!v35)
      goto LABEL_171;
LABEL_169:
    if (*(_DWORD *)v35 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v35);
      WTF::fastFree(v49, v50);
    }
    else
    {
      --*(_DWORD *)v35;
    }
LABEL_171:
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v34);
        WTF::fastFree(v51, v52);
        if (v33)
        {
LABEL_175:
          if (*(_DWORD *)v33 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v33);
            WTF::fastFree(v53, v54);
          }
          else
          {
            --*(_DWORD *)v33;
          }
        }
LABEL_177:
        v14 = 56;
        if ((v38 & 1) != 0)
          goto LABEL_16;
        v45 = !WebCore::hasAccNameAttribute((WebCore *)v10, (WebCore::Element *)v5);
        v46 = 38;
        goto LABEL_179;
      }
      --*(_DWORD *)v34;
    }
    if (v33)
      goto LABEL_175;
    goto LABEL_177;
  }
  *(_DWORD *)(v10 + 24) += 2;
  v14 = WebCore::AccessibilityNodeObject::roleFromInputElement(a1, (const WebCore::HTMLInputElement *)v10);
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
    {
      v4 = v10;
LABEL_27:
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
LABEL_16:
  v8 = *(_DWORD *)(v6 + 24) - 2;
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    v17 = *(_WORD *)(v6 + 30);
    if ((v17 & 0x400) != 0)
      goto LABEL_22;
    WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
    v8 = *(_DWORD *)(v6 + 24);
  }
  else
  {
    *(_DWORD *)(v6 + 24) = v8;
  }
LABEL_18:
  v15 = v8 - 2;
  if (v15)
  {
    *(_DWORD *)(v6 + 24) = v15;
    return v14;
  }
  v17 = *(_WORD *)(v6 + 30);
LABEL_22:
  if ((v17 & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
  return v14;
}

uint64_t WebCore::AccessibilityNodeObject::roleFromInputElement(WebCore::AccessibilityNodeObject *this, const WebCore::HTMLInputElement *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v12;
  _QWORD *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  v2 = *((_QWORD *)a2 + 30);
  v3 = *(_DWORD *)(v2 + 12);
  if ((v3 & 0x14001) != 0)
    return (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3280))(this);
  if (v3 == 2)
  {
    v5 = *(_QWORD *)(v2 + 24);
    if (!v5)
      return 14;
    v6 = *(_QWORD *)(v5 + 8);
    result = 14;
    if (v6)
    {
      if ((*(_WORD *)(v6 + 232) & 0x2000) != 0)
        return 113;
      else
        return 14;
    }
    return result;
  }
  if (v3 == 4096)
    return 88;
  if ((v3 & 0x2A8C20) != 0)
  {
    v8 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1232))(this);
    if (v8)
    {
      v9 = (_QWORD *)v8;
      v10 = *(_QWORD *)(v8 + 8);
      if (__ldaxr((unsigned __int8 *)v10))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v10))
      {
        goto LABEL_23;
      }
      MEMORY[0x19AEA534C](v10);
LABEL_23:
      ++*(_QWORD *)(v10 + 8);
      v12 = __ldxr((unsigned __int8 *)v10);
      if (v12 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
        {
          while (1)
          {
LABEL_28:
            v13 = v9;
            if ((*(unsigned int (**)(_QWORD *))(*v9 + 1456))(v9) == 19)
            {
              v30 = v9[1];
              if (__ldaxr((unsigned __int8 *)v30))
              {
                __clrex();
                goto LABEL_68;
              }
              if (__stxr(1u, (unsigned __int8 *)v30))
LABEL_68:
                MEMORY[0x19AEA534C](v30);
              v32 = *(_QWORD *)(v30 + 8);
              v33 = v32 - 1;
              *(_QWORD *)(v30 + 8) = v32 - 1;
              if (v32 == 1)
              {
                v46 = *(_QWORD *)(v30 + 16);
                v34 = *(_QWORD *)(v30 + 24);
                *(_QWORD *)(v30 + 24) = 0;
                v35 = v46 != 0;
              }
              else
              {
                v34 = 0;
                v35 = 1;
              }
              v36 = __ldxr((unsigned __int8 *)v30);
              if (v36 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v30))
                {
LABEL_76:
                  if (!v33)
                  {
                    if (v34)
                      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
                    if (!v35)
                      WTF::fastFree((WTF *)v30, v14);
                  }
                  return 19;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v30);
              goto LABEL_76;
            }
            v15 = (*(uint64_t (**)(_QWORD *))(*v9 + 1456))(v9);
            if (v15 != 44 && v15 != 127 && (*(unsigned int (**)(_QWORD *))(*v9 + 1456))(v9) != 38)
            {
              v39 = v9[1];
              if (__ldaxr((unsigned __int8 *)v39))
              {
                __clrex();
                goto LABEL_93;
              }
              if (__stxr(1u, (unsigned __int8 *)v39))
LABEL_93:
                MEMORY[0x19AEA534C](v39);
              v41 = *(_QWORD *)(v39 + 8);
              v42 = v41 - 1;
              *(_QWORD *)(v39 + 8) = v41 - 1;
              if (v41 == 1)
              {
                v47 = *(_QWORD *)(v39 + 16);
                v43 = *(_QWORD *)(v39 + 24);
                *(_QWORD *)(v39 + 24) = 0;
                v44 = v47 != 0;
              }
              else
              {
                v43 = 0;
                v44 = 1;
              }
              v45 = __ldxr((unsigned __int8 *)v39);
              if (v45 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v39))
                {
LABEL_101:
                  if (!v42)
                  {
                    if (v43)
                      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
                    if (!v44)
                      WTF::fastFree((WTF *)v39, v16);
                  }
                  goto LABEL_106;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v39);
              goto LABEL_101;
            }
            v17 = (*(uint64_t (**)(_QWORD *))(*v9 + 1232))(v9);
            v9 = (_QWORD *)v17;
            if (!v17)
              goto LABEL_42;
            v19 = *(_QWORD *)(v17 + 8);
            if (__ldaxr((unsigned __int8 *)v19))
              break;
            if (__stxr(1u, (unsigned __int8 *)v19))
              goto LABEL_36;
LABEL_37:
            ++*(_QWORD *)(v19 + 8);
            v21 = __ldxr((unsigned __int8 *)v19);
            if (v21 != 1)
            {
              __clrex();
LABEL_41:
              WTF::Lock::unlockSlow((WTF::Lock *)v19);
              goto LABEL_42;
            }
            if (__stlxr(0, (unsigned __int8 *)v19))
              goto LABEL_41;
LABEL_42:
            v22 = v13[1];
            if (__ldaxr((unsigned __int8 *)v22))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v22))
            {
              goto LABEL_46;
            }
            MEMORY[0x19AEA534C](v22);
LABEL_46:
            v24 = *(_QWORD *)(v22 + 8);
            v25 = v24 - 1;
            *(_QWORD *)(v22 + 8) = v24 - 1;
            if (v24 == 1)
            {
              v29 = *(_QWORD *)(v22 + 16);
              v26 = *(_QWORD *)(v22 + 24);
              *(_QWORD *)(v22 + 24) = 0;
              v27 = v29 != 0;
            }
            else
            {
              v26 = 0;
              v27 = 1;
            }
            v28 = __ldxr((unsigned __int8 *)v22);
            if (v28 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v22))
                goto LABEL_53;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_53:
            if (!v25)
            {
              if (v26)
                (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
              if (!v27)
                WTF::fastFree((WTF *)v22, v18);
            }
            if (!v9)
              goto LABEL_106;
          }
          __clrex();
LABEL_36:
          MEMORY[0x19AEA534C](v19);
          goto LABEL_37;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      goto LABEL_28;
    }
LABEL_106:
    v37 = *(_DWORD *)(*((_QWORD *)a2 + 30) + 12) == 0x8000;
    v38 = 101;
LABEL_107:
    if (v37)
      return v38;
    else
      return 126;
  }
  result = 20;
  if (v3 > 127)
  {
    if (v3 >= 0x40000)
    {
      if (v3 == 0x40000 || v3 == 0x100000)
        return result;
      goto LABEL_87;
    }
    if (v3 == 128)
      return 47;
    if (v3 != 512)
      goto LABEL_87;
  }
  else
  {
    if (v3 > 15)
    {
      if (v3 == 16)
        return result;
      if (v3 == 64)
        return 10;
      goto LABEL_87;
    }
    if (v3 == 4)
      return 16;
    if (v3 != 8)
    {
LABEL_87:
      v37 = v3 == 0x2000;
      v38 = 102;
      goto LABEL_107;
    }
  }
  return result;
}

_BYTE *WebCore::AccessibilityNodeObject::updateChildrenIfNecessary(WebCore::AccessibilityNodeObject *this)
{
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3112))(this))
    (*(void (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3104))(this);
  return WebCore::AccessibilityObject::updateChildrenIfNecessary(this);
}

WTF *WebCore::AccessibilityNodeObject::clearChildren(WebCore::AccessibilityNodeObject *this)
{
  WTF *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *result;

  v2 = (WebCore::AccessibilityNodeObject *)((char *)this + 40);
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *v3++;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1912))(v6);
      v5 -= 8;
    }
    while (v5);
  }
  result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v2, 0);
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 232) = 0;
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::updateOwnedChildren(WebCore::AccessibilityNodeObject *this)
{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v31;
  int v32;

  (*(void (**)(uint64_t **__return_ptr, WebCore::AccessibilityNodeObject *, uint64_t))(*(_QWORD *)this + 984))(&v31, this, 18);
  if (v32)
  {
    v3 = v31;
    v4 = &v31[v32];
    do
    {
      v5 = *v3;
      if (!*v3)
        goto LABEL_13;
      v6 = *(_QWORD *)(v5 + 8);
      if (__ldaxr((unsigned __int8 *)v6))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v6))
      {
        goto LABEL_8;
      }
      MEMORY[0x19AEA534C](v6);
LABEL_8:
      ++*(_QWORD *)(v6 + 8);
      v8 = __ldxr((unsigned __int8 *)v6);
      if (v8 != 1)
      {
        __clrex();
LABEL_12:
        WTF::Lock::unlockSlow((WTF::Lock *)v6);
        goto LABEL_13;
      }
      if (__stlxr(0, (unsigned __int8 *)v6))
        goto LABEL_12;
LABEL_13:
      v9 = *((unsigned int *)this + 13);
      if (!(_DWORD)v9)
        goto LABEL_38;
      v10 = (_QWORD *)*((_QWORD *)this + 5);
      if (*v10 == v5)
      {
        v11 = 0;
LABEL_20:
        v13 = &v10[v11];
        *v13 = 0;
        if (!v5)
          goto LABEL_37;
        v14 = *(_QWORD *)(v5 + 8);
        if (__ldaxr((unsigned __int8 *)v14))
        {
          __clrex();
          goto LABEL_24;
        }
        if (__stxr(1u, (unsigned __int8 *)v14))
LABEL_24:
          MEMORY[0x19AEA534C](v14);
        v16 = *(_QWORD *)(v14 + 8);
        v17 = v16 - 1;
        *(_QWORD *)(v14 + 8) = v16 - 1;
        if (v16 == 1)
        {
          v29 = *(_QWORD *)(v14 + 16);
          v18 = *(_QWORD *)(v14 + 24);
          *(_QWORD *)(v14 + 24) = 0;
          v19 = v29 != 0;
        }
        else
        {
          v18 = 0;
          v19 = 1;
        }
        v20 = __ldxr((unsigned __int8 *)v14);
        if (v20 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v14))
          {
            if (!v17)
            {
LABEL_33:
              if (v18)
                (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
              if (!v19)
                WTF::fastFree((WTF *)v14, v2);
            }
LABEL_37:
            memmove(v13, v13 + 1, *((_QWORD *)this + 5) + 8 * *((unsigned int *)this + 13) - (_QWORD)(v13 + 1));
            --*((_DWORD *)this + 13);
            goto LABEL_38;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v14);
        if (!v17)
          goto LABEL_33;
        goto LABEL_37;
      }
      v11 = 0;
      while (v9 - 1 != v11)
      {
        v12 = v10[++v11];
        if (v12 == v5)
          goto LABEL_20;
      }
LABEL_38:
      (*(void (**)(WebCore::AccessibilityNodeObject *, uint64_t))(*(_QWORD *)this + 3072))(this, v5);
      if (!v5)
        goto LABEL_55;
      v21 = *(_QWORD *)(v5 + 8);
      if (__ldaxr((unsigned __int8 *)v21))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v21))
      {
        goto LABEL_43;
      }
      MEMORY[0x19AEA534C](v21);
LABEL_43:
      v23 = *(_QWORD *)(v21 + 8);
      v24 = v23 - 1;
      *(_QWORD *)(v21 + 8) = v23 - 1;
      if (v23 == 1)
      {
        v28 = *(_QWORD *)(v21 + 16);
        v25 = *(_QWORD *)(v21 + 24);
        *(_QWORD *)(v21 + 24) = 0;
        v26 = v28 != 0;
      }
      else
      {
        v25 = 0;
        v26 = 1;
      }
      v27 = __ldxr((unsigned __int8 *)v21);
      if (v27 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v21))
        {
          if (!v24)
            goto LABEL_51;
          goto LABEL_55;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v21);
      if (!v24)
      {
LABEL_51:
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        if (!v26)
          WTF::fastFree((WTF *)v21, v2);
      }
LABEL_55:
      ++v3;
    }
    while (v3 != v4);
  }
  return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v2);
}

uint64_t WebCore::AccessibilityNodeObject::addChildren(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;

  *((_BYTE *)this + 56) = 1;
  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    result = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(result);
    if (result)
    {
      v4 = result;
      do
        v5 = __ldaxr((unsigned int *)result);
      while (__stlxr(v5 + 1, (unsigned int *)result));
      if (*(_QWORD *)(result + 8))
      {
        result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3080))(this);
        if ((_DWORD)result)
        {
          result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 848))(this);
          if (!result
            || (v6 = *(_QWORD *)(v4 + 8)) != 0
            && (*(_WORD *)(v6 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
          {
            result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1488))(this);
            if (result)
            {
              v7 = *(_QWORD *)(v4 + 8);
              if (v7)
              {
                if ((*(_WORD *)(v7 + 28) & 4) != 0)
                {
                  v8 = *(_QWORD *)(v7 + 80);
                  if (v8)
                  {
                    v9 = result;
                    do
                    {
                      v10 = WebCore::AXObjectCache::getOrCreate(v9, v8, 0);
                      (*(void (**)(WebCore::AccessibilityNodeObject *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 3072))(this, v10, *((unsigned int *)this + 13), 1);
                      v8 = *(_QWORD *)(v8 + 56);
                    }
                    while (v8);
                  }
                }
              }
              result = WebCore::AccessibilityNodeObject::updateOwnedChildren(this);
            }
          }
        }
      }
      do
      {
        v11 = __ldaxr((unsigned int *)v4);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)v4));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)v4);
        v13 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v13)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v13));
        v14 = *(WTF **)(v4 + 16);
        if (v14)
        {
          *(_QWORD *)(v4 + 16) = 0;
          *(_DWORD *)(v4 + 24) = 0;
          WTF::fastFree(v14, v3);
        }
        result = WTF::fastFree((WTF *)v4, v3);
      }
    }
  }
  *((_BYTE *)this + 233) = 0;
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::canHaveChildren(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  BOOL v3;
  int v4;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;

  if ((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this)
    && !(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 848))(this))
  {
    v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
    v3 = !v2 || (*(_WORD *)(v2 + 28) & 0x10) == 0;
    if (!v3 && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::noscriptTag + 24))
      return 0;
  }
  v4 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
  result = 0;
  if ((v4 - 77) > 0x37 || ((1 << (v4 - 77)) & 0x80101060800C93) == 0)
  {
    v7 = v4 - 10;
    v8 = v7 > 0x3A;
    v9 = (1 << v7) & 0x400000000000011;
    if (v8 || v9 == 0)
      return 1;
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::visibleChildren@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 2976))(this);
  if ((_DWORD)result == 67)
  {
    if (!*((_BYTE *)this + 56))
      (*(void (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3064))(this);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
    v5 = *(unsigned int *)(result + 12);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD **)result;
      v7 = 8 * v5;
      while (1)
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 592))(*v6);
        if ((result & 1) == 0)
          break;
LABEL_21:
        ++v6;
        v7 -= 8;
        if (!v7)
          return result;
      }
      v8 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v8 == *(_DWORD *)(a2 + 8))
      {
        result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v8 + 1, (unint64_t)v6);
        v8 = *(unsigned int *)(a2 + 12);
        v9 = *(char **)a2;
        v10 = *(_QWORD **)result;
        if (!*(_QWORD *)result)
          goto LABEL_20;
      }
      else
      {
        v9 = *(char **)a2;
        v10 = (_QWORD *)*v6;
        if (!*v6)
          goto LABEL_20;
      }
      v11 = v10[1];
      if (__ldaxr((unsigned __int8 *)v11))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v11))
      {
LABEL_15:
        ++*(_QWORD *)(v11 + 8);
        v13 = __ldxr((unsigned __int8 *)v11);
        if (v13 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v11))
            goto LABEL_20;
        }
        else
        {
          __clrex();
        }
        result = WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_20:
        *(_QWORD *)&v9[8 * v8] = v10;
        ++*(_DWORD *)(a2 + 12);
        goto LABEL_21;
      }
      result = MEMORY[0x19AEA534C](v11);
      goto LABEL_15;
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::computeAccessibilityIsIgnored(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;
  int v3;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  if (!(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this))
    return 1;
  if ((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this)
    && (*(_WORD *)((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this) + 28) & 2) != 0
    && !(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 848))(this))
  {
    if (*(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this) + 32))
    {
      v5 = *(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this)
                     + 32);
      if (v5
        && (*(_WORD *)(v5 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
      {
        v20 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
        if ((*(_QWORD *)(*(_QWORD *)(v20 + 32) + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v20 + 32) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1955FCD60);
          }
          return 1;
        }
      }
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1384))(&v21, this);
    v8 = v21;
    if (!v21)
      return 1;
    v9 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
    v10 = *((unsigned int *)v21 + 1);
    if ((*((_BYTE *)v21 + 16) & 4) != 0)
    {
      if ((_DWORD)v10)
      {
        while (1)
        {
          v11 = *v9;
          v12 = v11 > 0x20;
          v13 = (1 << v11) & 0x100003600;
          if (v12 || v13 == 0)
            goto LABEL_43;
          ++v9;
          if (!--v10)
            goto LABEL_34;
        }
      }
    }
    else if ((_DWORD)v10)
    {
      v15 = 2 * v10;
      while (1)
      {
        v16 = *(unsigned __int16 *)v9;
        v12 = v16 > 0x20;
        v17 = (1 << v16) & 0x100003600;
        if (v12 || v17 == 0)
          break;
        v9 += 2;
        v15 -= 2;
        if (!v15)
        {
LABEL_34:
          v19 = 1;
          goto LABEL_35;
        }
      }
LABEL_43:
      v19 = 0;
LABEL_35:
      v21 = 0;
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if ((v19 & 1) == 0)
          goto LABEL_5;
      }
      else
      {
        *(_DWORD *)v8 -= 2;
        if ((v19 & 1) == 0)
          goto LABEL_5;
      }
      return 1;
    }
    v21 = 0;
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
    return 1;
  }
LABEL_5:
  result = WebCore::AccessibilityObject::defaultObjectInclusion(this);
  if (result >= 2)
  {
    v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
    return v3 == 47 || v3 == 134;
  }
  return result;
}

BOOL WebCore::AccessibilityNodeObject::canvasHasFallbackContent(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v1;
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;

  v1 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v1
    || (*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
  {
    return 0;
  }
  v3 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v3 + 2;
  v4 = *(_QWORD *)(v1 + 80);
  if (v4)
  {
    while ((*(_WORD *)(v4 + 28) & 8) == 0)
    {
      v5 = 0;
      v4 = *(_QWORD *)(v4 + 56);
      if (!v4)
        goto LABEL_9;
    }
    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
LABEL_9:
  v6 = v5 != 0;
  if (v3)
  {
    *(_DWORD *)(v1 + 24) = v3;
  }
  else if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
  }
  return v6;
}

BOOL WebCore::AccessibilityNodeObject::isNativeTextControl(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  int v6;
  _BOOL8 v8;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (v2
    && (*(_WORD *)(v2 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
  {
    return 1;
  }
  v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v3
    || (*(_WORD *)(v3 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return 0;
  }
  v5 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v5 + 2;
  v6 = *(_DWORD *)(*(_QWORD *)(v3 + 240) + 12);
  v8 = (v6 & 0x2A8820) != 0 || v6 == 1024;
  if (v5)
  {
    *(_DWORD *)(v3 + 24) = v5;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  return v8;
}

BOOL WebCore::AccessibilityNodeObject::isSearchField(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::HTMLFormElement *v17;
  WTF::StringImpl *v18;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v2)
    return 0;
  v3 = v2;
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 101)
    return 1;
  if ((*(_WORD *)(v3 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return 0;
  }
  *(_DWORD *)(v3 + 24) += 2;
  if (!*WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::nameAttr)|| WTF::StringImpl::findIgnoringASCIICase() == -1)
  {
    v6 = *(_QWORD *)(v3 + 120);
    if (!v6 || (v8 = *(_QWORD *)(v6 + 8)) == 0)
    {
      v4 = 0;
      goto LABEL_9;
    }
    *(_DWORD *)(v8 + 24) += 2;
    v17 = (WebCore::HTMLFormElement *)v8;
    v9 = *(_QWORD *)(v8 + 104);
    if (v9 && (v10 = *(_DWORD *)(v9 + 4), (v10 & 2) != 0))
    {
      if ((v10 & 1) != 0)
      {
        v14 = *(_QWORD **)(v9 + 40);
        LODWORD(v15) = *(_DWORD *)(v9 + 52);
      }
      else
      {
        v14 = (_QWORD *)(v9 + 32);
        LODWORD(v15) = v10 >> 5;
      }
      if ((_DWORD)v15)
      {
        v15 = v15;
        while (1)
        {
          v16 = *v14;
          if (*v14 == WebCore::HTMLNames::nameAttr
            || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
            && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
          {
            break;
          }
          v14 += 2;
          if (!--v15)
            goto LABEL_45;
        }
      }
      else
      {
LABEL_45:
        v14 = 0;
      }
      v11 = (WTF::StringImpl **)(v14 + 1);
    }
    else
    {
      v11 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
    v12 = *v11;
    if (!*v11 || (*(_DWORD *)v12 += 2, WTF::StringImpl::findIgnoringASCIICase() == -1))
    {
      WebCore::HTMLFormElement::action(v17, &v18);
      v13 = v18;
      if (v18)
      {
        v4 = WTF::StringImpl::findIgnoringASCIICase() != -1;
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v5);
        else
          *(_DWORD *)v13 -= 2;
      }
      else
      {
        v4 = 0;
      }
      if (!v12)
      {
LABEL_27:
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17, v5);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
        goto LABEL_9;
      }
    }
    else
    {
      v4 = 1;
    }
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
    goto LABEL_27;
  }
  v4 = 1;
LABEL_9:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v4;
}

uint64_t WebCore::AccessibilityNodeObject::isSecureField(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v2)
    return 0;
  v3 = v2;
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 2976))(this) == 134)
  {
    if (*(_DWORD *)(*(_QWORD *)(v3 + 240) + 12) == 2048)
      v5 = 1;
    else
      v5 = (*(unsigned __int16 *)(v3 + 230) >> 10) & 1;
  }
  else
  {
    v5 = 0;
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v5;
}

BOOL WebCore::AccessibilityNodeObject::isInputImage(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  void *v3;
  int v4;
  _BOOL8 v5;

  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) != 10)
    return 0;
  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v2
    || (*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return 0;
  }
  v4 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v4 + 2;
  v5 = *(_DWORD *)(*(_QWORD *)(v2 + 240) + 12) == 256;
  if (v4)
  {
    *(_DWORD *)(v2 + 24) = v4;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  return v5;
}

uint64_t WebCore::AccessibilityNodeObject::isEnabled(WebCore::AccessibilityNodeObject *this)
{
  WebCore::AccessibilityObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;

  if (this)
  {
    v2 = this;
    do
    {
      v3 = *WebCore::AccessibilityObject::getAttribute(v2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_disabledAttr);
      if (v3)
      {
        v4 = *(_DWORD *)(v3 + 4);
        if (v4 == 4)
        {
          v7 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v3 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v7 & 0xDF) != 0x54
              || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x52
              || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x55)
            {
              goto LABEL_4;
            }
            v8 = *(unsigned __int8 *)(v7 + 3);
          }
          else
          {
            if ((*(_WORD *)v7 & 0xFFDF) != 0x54
              || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x52
              || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x55)
            {
              goto LABEL_4;
            }
            v8 = *(unsigned __int16 *)(v7 + 6);
          }
          if ((v8 & 0xFFFFFFDF) == 0x45)
            return 0;
        }
        else if (v4 == 5)
        {
          v5 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v3 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v5 & 0xDF) != 0x46
              || (*(_BYTE *)(v5 + 1) & 0xDF) != 0x41
              || (*(_BYTE *)(v5 + 2) & 0xDF) != 0x4C
              || (*(_BYTE *)(v5 + 3) & 0xDF) != 0x53)
            {
              goto LABEL_4;
            }
            v6 = *(unsigned __int8 *)(v5 + 4);
          }
          else
          {
            if ((*(_WORD *)v5 & 0xFFDF) != 0x46
              || (*(_WORD *)(v5 + 2) & 0xFFDF) != 0x41
              || (*(_WORD *)(v5 + 4) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v5 + 6) & 0xFFDF) != 0x53)
            {
              goto LABEL_4;
            }
            v6 = *(unsigned __int16 *)(v5 + 8);
          }
          if ((v6 & 0xFFFFFFDF) == 0x45)
            break;
        }
      }
LABEL_4:
      v2 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v2 + 1232))(v2);
    }
    while (v2);
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 46)
    return 0;
  v10 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v10)
    return 1;
  v11 = v10;
  if ((*(_WORD *)(v10 + 28) & 8) == 0)
    return 1;
  *(_DWORD *)(v10 + 24) += 2;
  v9 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 960))(v10) ^ 1;
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v13);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  return v9;
}

BOOL WebCore::AccessibilityNodeObject::isIndeterminate(WebCore::AccessibilityNodeObject *this)
{
  int v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 656))(this);
  v3 = *(_QWORD *)this;
  if (v2)
    return (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(v3 + 880))(this) == 2;
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(v3 + 2976))(this) == 87)
    return !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_valuenowAttr);
  return 0;
}

BOOL WebCore::AccessibilityNodeObject::isPressed(WebCore::AccessibilityNodeObject *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _BOOL8 isUserActionElementActive;
  int v8;
  uint64_t v10;
  int v11;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
  if (v2 != 10 && v2 != 132 && v2 != 84)
    return 0;
  v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v3)
    return 0;
  v4 = v3;
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 132)
  {
    v6 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_pressedAttr);
    if (v6 && *(_DWORD *)(v6 + 4) == 4)
    {
      v10 = *(_QWORD *)(v6 + 8);
      if ((*(_BYTE *)(v6 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v10 & 0xDF) == 0x54
          && (*(_BYTE *)(v10 + 1) & 0xDF) == 0x52
          && (*(_BYTE *)(v10 + 2) & 0xDF) == 0x55)
        {
          v11 = *(unsigned __int8 *)(v10 + 3);
          return (v11 & 0xFFFFFFDF) == 69;
        }
      }
      else if ((*(_WORD *)v10 & 0xFFDF) == 0x54
             && (*(_WORD *)(v10 + 2) & 0xFFDF) == 0x52
             && (*(_WORD *)(v10 + 4) & 0xFFDF) == 0x55)
      {
        v11 = *(unsigned __int16 *)(v10 + 6);
        return (v11 & 0xFFFFFFDF) == 69;
      }
    }
    return 0;
  }
  if ((*(_WORD *)(v4 + 28) & 8) == 0)
    return 0;
  v8 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v8 + 2;
  if ((*(_BYTE *)(v4 + 54) & 2) != 0)
  {
    isUserActionElementActive = WebCore::Element::isUserActionElementActive((WebCore::Element *)v4);
    v8 = *(_DWORD *)(v4 + 24) - 2;
    if (*(_DWORD *)(v4 + 24) != 2)
      goto LABEL_11;
  }
  else
  {
    isUserActionElementActive = 0;
    if (v8)
    {
LABEL_11:
      *(_DWORD *)(v4 + 24) = v8;
      return isUserActionElementActive;
    }
  }
  if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  return isUserActionElementActive;
}

BOOL WebCore::AccessibilityNodeObject::isChecked(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  void *v3;
  int v4;
  _BOOL8 v5;
  int v6;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v2)
    return 0;
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v6 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 2976))(this);
    if ((v6 - 76) <= 0x37 && ((1 << (v6 - 76)) & 0x80002000001007) != 0 || v6 == 14)
    {
      v9 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_checkedAttr);
      if (v9)
      {
        if (*(_DWORD *)(v9 + 4) == 4)
        {
          v11 = *(_QWORD *)(v9 + 8);
          if ((*(_BYTE *)(v9 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v11 & 0xDF) == 0x54
              && (*(_BYTE *)(v11 + 1) & 0xDF) == 0x52
              && (*(_BYTE *)(v11 + 2) & 0xDF) == 0x55)
            {
              v12 = *(unsigned __int8 *)(v11 + 3);
              return (v12 & 0xFFFFFFDF) == 69;
            }
          }
          else if ((*(_WORD *)v11 & 0xFFDF) == 0x54
                 && (*(_WORD *)(v11 + 2) & 0xFFDF) == 0x52
                 && (*(_WORD *)(v11 + 4) & 0xFFDF) == 0x55)
          {
            v12 = *(unsigned __int16 *)(v11 + 6);
            return (v12 & 0xFFFFFFDF) == 69;
          }
        }
      }
    }
    return 0;
  }
  v4 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v4 + 2;
  if ((*(_WORD *)(v2 + 230) & 1) != 0)
  {
    v5 = (*(_WORD *)(*(_QWORD *)(v2 + 240) + 12) & 0x1002) != 0;
    if (v4)
    {
LABEL_6:
      *(_DWORD *)(v2 + 24) = v4;
      return v5;
    }
  }
  else
  {
    v5 = 0;
    if (v4)
      goto LABEL_6;
  }
  if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  return v5;
}

BOOL WebCore::AccessibilityNodeObject::isHovered(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v1;
  void *v2;
  _BOOL8 isUserActionElementHovered;
  uint64_t v4;
  int v5;

  v1 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v1)
    return 0;
  v4 = v1;
  if ((*(_WORD *)(v1 + 28) & 8) == 0)
    return 0;
  v5 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v5 + 2;
  if ((*(_BYTE *)(v1 + 54) & 2) != 0)
  {
    isUserActionElementHovered = WebCore::Element::isUserActionElementHovered((WebCore::Element *)v1);
    v5 = *(_DWORD *)(v4 + 24) - 2;
    if (*(_DWORD *)(v4 + 24) != 2)
      goto LABEL_6;
  }
  else
  {
    isUserActionElementHovered = 0;
    if (v5)
    {
LABEL_6:
      *(_DWORD *)(v4 + 24) = v5;
      return isUserActionElementHovered;
    }
  }
  if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v4, v2);
  return isUserActionElementHovered;
}

BOOL WebCore::AccessibilityNodeObject::isMultiSelectable(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  _BOOL8 v6;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v2 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_multiselectableAttr);
  if (v2)
  {
    v8 = *(_DWORD *)(v2 + 4);
    if (v8 == 4)
    {
      v11 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v11 & 0xDF) != 0x54
          || (*(_BYTE *)(v11 + 1) & 0xDF) != 0x52
          || (*(_BYTE *)(v11 + 2) & 0xDF) != 0x55)
        {
          goto LABEL_2;
        }
        v12 = *(unsigned __int8 *)(v11 + 3);
      }
      else
      {
        if ((*(_WORD *)v11 & 0xFFDF) != 0x54
          || (*(_WORD *)(v11 + 2) & 0xFFDF) != 0x52
          || (*(_WORD *)(v11 + 4) & 0xFFDF) != 0x55)
        {
          goto LABEL_2;
        }
        v12 = *(unsigned __int16 *)(v11 + 6);
      }
      if ((v12 & 0xFFFFFFDF) == 0x45)
        return 1;
    }
    else
    {
      if (v8 != 5)
        goto LABEL_2;
      v9 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v9 & 0xDF) != 0x46
          || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x41
          || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x4C
          || (*(_BYTE *)(v9 + 3) & 0xDF) != 0x53)
        {
          goto LABEL_2;
        }
        v10 = *(unsigned __int8 *)(v9 + 4);
      }
      else
      {
        if ((*(_WORD *)v9 & 0xFFDF) != 0x46
          || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x41
          || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x53)
        {
          goto LABEL_2;
        }
        v10 = *(unsigned __int16 *)(v9 + 8);
      }
      if ((v10 & 0xFFFFFFDF) == 0x45)
        return 0;
    }
  }
LABEL_2:
  v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v3
    || (*(_WORD *)(v3 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    return 0;
  }
  v5 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v5 + 2;
  v6 = *(_BYTE *)(v3 + 297) != 0;
  if (v5)
  {
    *(_DWORD *)(v3 + 24) = v5;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  return v6;
}

uint64_t WebCore::AccessibilityNodeObject::isRequired(WebCore::AccessibilityNodeObject *this)
{
  _WORD *v2;
  _WORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  int v10;

  v2 = (_WORD *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v2 || (v3 = v2, (v2[14] & 8) == 0) || !(*(unsigned int (**)(_WORD *))(*(_QWORD *)v2 + 848))(v2))
  {
    v5 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_requiredAttr);
    if (!v5 || *(_DWORD *)(v5 + 4) != 4)
      return 0;
    v3 = 0;
    v8 = 1;
    goto LABEL_16;
  }
  *((_DWORD *)v3 + 6) += 2;
  if ((v3[84] & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v5 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_requiredAttr);
    if (!v5)
    {
      v6 = 0;
      goto LABEL_10;
    }
    v8 = 0;
    v6 = 0;
    if (*(_DWORD *)(v5 + 4) == 4)
    {
LABEL_16:
      v9 = *(_QWORD *)(v5 + 8);
      if ((*(_BYTE *)(v5 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v9 & 0xDF) == 0x54 && (*(_BYTE *)(v9 + 1) & 0xDF) == 0x52 && (*(_BYTE *)(v9 + 2) & 0xDF) == 0x55)
        {
          v10 = *(unsigned __int8 *)(v9 + 3);
          goto LABEL_21;
        }
      }
      else if ((*(_WORD *)v9 & 0xFFDF) == 0x54
             && (*(_WORD *)(v9 + 2) & 0xFFDF) == 0x52
             && (*(_WORD *)(v9 + 4) & 0xFFDF) == 0x55)
      {
        v10 = *(unsigned __int16 *)(v9 + 6);
LABEL_21:
        if ((v10 & 0xFFFFFFDF) == 0x45)
        {
          v6 = 1;
          if ((v8 & 1) != 0)
            return v6;
          goto LABEL_10;
        }
      }
      v6 = 0;
      if ((v8 & 1) != 0)
        return v6;
    }
  }
LABEL_10:
  if (*((_DWORD *)v3 + 6) == 2)
  {
    if ((v3[15] & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  else
  {
    *((_DWORD *)v3 + 6) -= 2;
  }
  return v6;
}

uint64_t WebCore::AccessibilityNodeObject::accessKey@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 832))(this);
  if (!result)
  {
    v10 = 0;
    goto LABEL_17;
  }
  v4 = *(_QWORD *)(result + 104);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
      {
LABEL_5:
        v7 = v7;
        v8 = (_DWORD **)(v6 + 8);
        while (1)
        {
          v9 = (uint64_t)*(v8 - 1);
          if (v9 == WebCore::HTMLNames::accesskeyAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::accesskeyAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::accesskeyAttr + 32))
          {
            goto LABEL_15;
          }
          v8 += 2;
          if (!--v7)
          {
            v8 = (_DWORD **)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
        goto LABEL_5;
    }
  }
  v8 = (_DWORD **)MEMORY[0x1E0CBF2F8];
LABEL_15:
  v10 = *v8;
  if (v10)
    *v10 += 2;
LABEL_17:
  *a2 = v10;
  return result;
}

BOOL WebCore::AccessibilityNodeObject::supportsDropping(WebCore::AccessibilityNodeObject *this)
{
  WTF::StringImpl *v1;
  unsigned int v2;
  WTF *v3;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  int v9;
  unsigned int v10;

  (*(void (**)(WTF **__return_ptr))(*(_QWORD *)this + 1200))(&v8);
  v2 = v10;
  if (v10)
  {
    v5 = v8;
    v6 = 8 * v10;
    do
    {
      v7 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v1);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 = (WTF *)((char *)v5 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  v3 = v8;
  if (v8)
  {
    v8 = 0;
    v9 = 0;
    WTF::fastFree(v3, v1);
  }
  return v2 != 0;
}

BOOL WebCore::AccessibilityNodeObject::supportsDragging(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_grabbedAttr);
  if (!v2)
    return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::draggableAttr);
  v4 = *(_DWORD *)(v2 + 4);
  if (v4 == 4)
  {
    v7 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v7 & 0xDF) != 0x54 || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x52 || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x55)
        return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::draggableAttr);
      v6 = *(unsigned __int8 *)(v7 + 3);
    }
    else
    {
      if ((*(_WORD *)v7 & 0xFFDF) != 0x54
        || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x55)
      {
        return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::draggableAttr);
      }
      v6 = *(unsigned __int16 *)(v7 + 6);
    }
  }
  else
  {
    if (v4 != 5)
      return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::draggableAttr);
    v5 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v5 & 0xDF) != 0x46
        || (*(_BYTE *)(v5 + 1) & 0xDF) != 0x41
        || (*(_BYTE *)(v5 + 2) & 0xDF) != 0x4C
        || (*(_BYTE *)(v5 + 3) & 0xDF) != 0x53)
      {
        return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::draggableAttr);
      }
      v6 = *(unsigned __int8 *)(v5 + 4);
    }
    else
    {
      if ((*(_WORD *)v5 & 0xFFDF) != 0x46
        || (*(_WORD *)(v5 + 2) & 0xFFDF) != 0x41
        || (*(_WORD *)(v5 + 4) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v5 + 6) & 0xFFDF) != 0x53)
      {
        return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::draggableAttr);
      }
      v6 = *(unsigned __int16 *)(v5 + 8);
    }
  }
  if ((v6 & 0xFFFFFFDF) != 0x45)
    return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::draggableAttr);
  return 1;
}

BOOL WebCore::AccessibilityNodeObject::isGrabbed(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;

  if (WebCore::AccessibilityObject::mainFrame(this))
  {
    WebCore::AccessibilityObject::mainFrame(this);
    {
      v2 = WebCore::EventHandler::dragState(void)::state;
    }
    else
    {
      v2 = 0;
      WebCore::EventHandler::dragState(void)::state = 0u;
      *(_OWORD *)&qword_1EE2F7E10 = 0u;
    }
    if (v2 == (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 832))(this))
      return 1;
  }
  v3 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_grabbedAttr);
  if (!v3 || *(_DWORD *)(v3 + 4) != 4)
    return 0;
  v5 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v5 & 0xFFDF) == 0x54
      && (*(_WORD *)(v5 + 2) & 0xFFDF) == 0x52
      && (*(_WORD *)(v5 + 4) & 0xFFDF) == 0x55)
    {
      v6 = *(unsigned __int16 *)(v5 + 6);
      return (v6 & 0xFFFFFFDF) == 69;
    }
    return 0;
  }
  if ((*(_BYTE *)v5 & 0xDF) != 0x54 || (*(_BYTE *)(v5 + 1) & 0xDF) != 0x52 || (*(_BYTE *)(v5 + 2) & 0xDF) != 0x55)
    return 0;
  v6 = *(unsigned __int8 *)(v5 + 3);
  return (v6 & 0xFFFFFFDF) == 69;
}

int **WebCore::AccessibilityNodeObject::determineDropEffects@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, int ***a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  int **result;
  WTF::StringImpl *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;

  v4 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_dropeffectAttr);
  if (v4 && *(_DWORD *)(v4 + 4))
  {
    WTF::StringImpl::replace();
    WTF::String::split();
    result = (int **)v17;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        return (int **)WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    return result;
  }
  v5 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(this, &WebCore::HTMLNames::dropzoneAttr);
  if (v5)
  {
    v6 = *(_DWORD *)v5;
    v7 = *((_DWORD *)v5 + 1);
    *(_DWORD *)v5 += 2;
    if (v7)
    {
      *(_DWORD *)v5 = v6 + 4;
      result = (int **)WTF::fastMalloc((WTF *)8);
      *a2 = result;
      v10 = *(_DWORD *)v5;
      *(_DWORD *)v5 += 2;
      *result = (int *)v5;
      a2[1] = (int **)0x100000001;
      if (v10)
        *(_DWORD *)v5 = v10;
      else
        result = (int **)WTF::StringImpl::destroy(v5, v9);
LABEL_18:
      if (*(_DWORD *)v5 == 2)
        return (int **)WTF::StringImpl::destroy(v5, v9);
      *(_DWORD *)v5 -= 2;
      return result;
    }
  }
  result = (int **)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::webkitdropzoneAttr);
  v11 = *result;
  if (*result)
  {
    v12 = *v11;
    v13 = v11[1];
    v14 = *v11 + 2;
    *v11 = v14;
    if (v13)
    {
      *v11 = v12 + 4;
      result = (int **)WTF::fastMalloc((WTF *)8);
      *a2 = result;
      v14 = *v11;
      *v11 += 2;
      *result = v11;
      a2[1] = (int **)0x100000001;
      if (v14)
      {
        *v11 = v14;
      }
      else
      {
        result = (int **)WTF::StringImpl::destroy((WTF::StringImpl *)v11, v9);
        v14 = *v11;
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    v16 = v14 - 2;
    if (v16)
      *v11 = v16;
    else
      result = (int **)WTF::StringImpl::destroy((WTF::StringImpl *)v11, v9);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v5)
    goto LABEL_18;
  return result;
}

BOOL WebCore::AccessibilityNodeObject::supportsARIAOwns(WebCore::AccessibilityNodeObject *this)
{
  _QWORD *Attribute;

  Attribute = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_ownsAttr);
  return *Attribute && *(_DWORD *)(*Attribute + 4) != 0;
}

BOOL WebCore::AccessibilityNodeObject::supportsRequiredAttribute(WebCore::AccessibilityNodeObject *this)
{
  int v2;
  _BOOL8 v3;
  uint64_t v6;
  void *v7;
  int v8;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
  v3 = 1;
  if ((v2 - 84) > 0x30 || ((1 << (v2 - 84)) & 0x10680201400B1) == 0)
  {
    if ((v2 - 10) > 0x39)
      return 0;
    if (((1 << (v2 - 10)) & 0x200040300000318) != 0)
      return v3;
    if (v2 != 10)
      return 0;
    v6 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
    if (!v6
      || (*(_WORD *)(v6 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      return 0;
    }
    v8 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v8 + 2;
    v3 = *(_DWORD *)(*(_QWORD *)(v6 + 240) + 12) == 64;
    if (v8)
    {
      *(_DWORD *)(v6 + 24) = v8;
    }
    else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
    }
  }
  return v3;
}

uint64_t WebCore::AccessibilityNodeObject::radioButtonGroup@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  unsigned int v29;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (result
    && (*(_WORD *)(result + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    result = (uint64_t)WebCore::HTMLInputElement::radioButtonGroup((uint64_t *)result, v5, &v27);
    v6 = v29;
    if (v29)
    {
      if (v29 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v7 = WTF::fastMalloc((WTF *)(8 * v29));
      *(_DWORD *)(a2 + 8) = v6;
      *(_QWORD *)a2 = v7;
    }
    result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1488))(this);
    if (result)
    {
      v9 = (uint64_t *)result;
      v10 = *(_QWORD *)result;
      if (*(_QWORD *)result)
        goto LABEL_56;
      v10 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = v9;
      result = *v9;
      *v9 = v10;
      if (!result)
        goto LABEL_56;
      do
      {
        v11 = __ldaxr((unsigned int *)result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)result));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v8);
      }
      v10 = *v9;
      if (*v9)
      {
LABEL_56:
        do
          v13 = __ldaxr((unsigned int *)v10);
        while (__stlxr(v13 + 1, (unsigned int *)v10));
      }
    }
    else
    {
      v10 = 0;
    }
    if (v29)
    {
      if (v10)
      {
        v14 = v27;
        v15 = 8 * v29;
        while (1)
        {
          result = *(_QWORD *)(v10 + 8);
          if (!result)
            goto LABEL_38;
          v26 = 0;
          v8 = *(void **)v14;
          if (*(_QWORD *)v14)
          {
            result = WebCore::AXObjectCache::getOrCreate(result, (uint64_t)v8, 0);
            v26 = result;
            if (result)
            {
              v16 = *(unsigned int *)(a2 + 12);
              if ((_DWORD)v16 != *(_DWORD *)(a2 + 8))
              {
                v17 = result;
                v18 = *(_QWORD *)a2;
                v19 = *(_QWORD *)(result + 8);
                if (__ldaxr((unsigned __int8 *)v19))
                {
                  __clrex();
                  goto LABEL_28;
                }
                if (__stxr(1u, (unsigned __int8 *)v19))
LABEL_28:
                  result = MEMORY[0x19AEA534C](v19);
                ++*(_QWORD *)(v19 + 8);
                v21 = __ldxr((unsigned __int8 *)v19);
                if (v21 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v19))
                    goto LABEL_34;
                }
                else
                {
                  __clrex();
                }
                result = WTF::Lock::unlockSlow((WTF::Lock *)v19);
LABEL_34:
                *(_QWORD *)(v18 + 8 * v16) = v17;
                ++*(_DWORD *)(a2 + 12);
                goto LABEL_35;
              }
              result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AXCoreObject*>(a2, &v26);
            }
          }
LABEL_35:
          v14 = (WTF *)((char *)v14 + 8);
          v15 -= 8;
          if (!v15)
            goto LABEL_38;
        }
      }
    }
    else if (v10)
    {
      do
      {
LABEL_38:
        v22 = __ldaxr((unsigned int *)v10);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unsigned int *)v10));
      if (!v23)
      {
        atomic_store(1u, (unsigned int *)v10);
        result = WTF::fastFree((WTF *)v10, v8);
      }
    }
    v24 = v27;
    if (v29)
    {
      v25 = 8 * v29;
      do
      {
        result = *(_QWORD *)v24;
        *(_QWORD *)v24 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        v24 = (WTF *)((char *)v24 + 8);
        v25 -= 8;
      }
      while (v25);
      v24 = v27;
    }
    if (v24)
    {
      v27 = 0;
      v28 = 0;
      return WTF::fastFree(v24, v8);
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::headingLevel(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v3 = result;
    if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) != 45
      || ((v4 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_levelAttr)) == 0? (v5 = 0, v6 = 0x100000000): (v5 = *(uint64_t **)(v4 + 8), v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32)), (WebCore::parseHTMLInteger(v5, v6, &v8), HIDWORD(v8)) || (result = v8, (int)v8 <= 0)))
    {
      if ((*(_WORD *)(v3 + 28) & 0x10) != 0)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24);
        if (v7 == *(_QWORD *)(WebCore::HTMLNames::h1Tag + 24))
        {
          return 1;
        }
        else if (v7 == *(_QWORD *)(WebCore::HTMLNames::h2Tag + 24))
        {
          return 2;
        }
        else if (v7 == *(_QWORD *)(WebCore::HTMLNames::h3Tag + 24))
        {
          return 3;
        }
        else if (v7 == *(_QWORD *)(WebCore::HTMLNames::h4Tag + 24))
        {
          return 4;
        }
        else if (v7 == *(_QWORD *)(WebCore::HTMLNames::h5Tag + 24))
        {
          return 5;
        }
        else if (v7 == *(_QWORD *)(WebCore::HTMLNames::h6Tag + 24))
        {
          return 6;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

_QWORD *WebCore::AccessibilityNodeObject::valueDescription@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v5;

  result = (_QWORD *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
  v5 = 0;
  switch((int)result)
  {
    case 'd':
    case 'f':
    case 'h':
      goto LABEL_6;
    case 'e':
    case 'g':
    case 'i':
      break;
    case 'j':
      result = (_QWORD *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 800))(this);
      if ((_DWORD)result)
        goto LABEL_6;
      v5 = 0;
      break;
    default:
      if ((_DWORD)result == 81 || (_DWORD)result == 87)
      {
LABEL_6:
        result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_valuetextAttr);
        v5 = (_DWORD *)*result;
        if (*result)
          *v5 += 2;
      }
      break;
  }
  *a2 = v5;
  return result;
}

void WebCore::AccessibilityNodeObject::valueForRange(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  int v7;
  int v8;
  WTF::String *Attribute;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (v2)
  {
    v4 = v2;
    if ((*(_WORD *)(v2 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v5 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v5 + 2;
      v6 = *(_DWORD **)(v2 + 240);
      v7 = v6[3];
      if (v7 == 0x2000)
      {
        (*(double (**)(_DWORD *))(*(_QWORD *)v6 + 104))(v6);
        v5 = *(_DWORD *)(v4 + 24) - 2;
        if (*(_DWORD *)(v4 + 24) != 2)
        {
LABEL_6:
          *(_DWORD *)(v4 + 24) = v5;
          goto LABEL_7;
        }
      }
      else if (v5)
      {
        goto LABEL_6;
      }
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
LABEL_7:
      if (v7 == 0x2000)
        return;
    }
  }
  v8 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
  switch(v8)
  {
    case 'd':
    case 'f':
    case 'h':
      goto LABEL_16;
    case 'e':
    case 'g':
    case 'i':
      return;
    case 'j':
      if (!(*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 800))(this))
        return;
      goto LABEL_16;
    default:
      if (v8 == 81 || v8 == 87)
      {
LABEL_16:
        Attribute = (WTF::String *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_valuenowAttr);
        if (*(_QWORD *)Attribute && *(_DWORD *)(*(_QWORD *)Attribute + 4))
        {
          WTF::String::toFloat(Attribute, 0);
        }
        else if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) != 104)
        {
          (*(void (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 912))(this);
          (*(float (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 904))(this);
        }
      }
      break;
  }
}

uint64_t WebCore::AccessibilityNodeObject::maxValueForRange(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  int v5;
  int v6;
  WTF::String *Attribute;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v4 = result;
    if ((*(_WORD *)(result + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v5 = *(_DWORD *)(result + 24);
      *(_DWORD *)(result + 24) = v5 + 2;
      v6 = *(_DWORD *)(*(_QWORD *)(result + 240) + 12);
      if (v6 == 0x2000)
      {
        result = (uint64_t)WebCore::HTMLInputElement::maximum((WebCore::HTMLInputElement *)result);
        v5 = *(_DWORD *)(v4 + 24) - 2;
        if (*(_DWORD *)(v4 + 24) != 2)
        {
LABEL_6:
          *(_DWORD *)(v4 + 24) = v5;
          goto LABEL_7;
        }
      }
      else if (v5)
      {
        goto LABEL_6;
      }
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
LABEL_7:
      if (v6 == 0x2000)
        return result;
    }
  }
  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
  switch((int)result)
  {
    case 'd':
    case 'f':
    case 'h':
      goto LABEL_16;
    case 'e':
    case 'g':
    case 'i':
      return result;
    case 'j':
      result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 800))(this);
      if (!(_DWORD)result)
        return result;
      goto LABEL_16;
    default:
      if ((_DWORD)result == 81 || (_DWORD)result == 87)
      {
LABEL_16:
        Attribute = (WTF::String *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_valuemaxAttr);
        if (*(_QWORD *)Attribute && *(_DWORD *)(*(_QWORD *)Attribute + 4))
          result = WTF::String::toFloat(Attribute, 0);
        else
          result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
      }
      break;
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::minValueForRange(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  int v5;
  int v6;
  WTF::String *Attribute;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v4 = result;
    if ((*(_WORD *)(result + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v5 = *(_DWORD *)(result + 24);
      *(_DWORD *)(result + 24) = v5 + 2;
      v6 = *(_DWORD *)(*(_QWORD *)(result + 240) + 12);
      if (v6 == 0x2000)
      {
        result = (uint64_t)WebCore::HTMLInputElement::minimum((WebCore::HTMLInputElement *)result);
        v5 = *(_DWORD *)(v4 + 24) - 2;
        if (*(_DWORD *)(v4 + 24) != 2)
        {
LABEL_6:
          *(_DWORD *)(v4 + 24) = v5;
          goto LABEL_7;
        }
      }
      else if (v5)
      {
        goto LABEL_6;
      }
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
LABEL_7:
      if (v6 == 0x2000)
        return result;
    }
  }
  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
  switch((int)result)
  {
    case 'd':
    case 'f':
    case 'h':
      goto LABEL_16;
    case 'e':
    case 'g':
    case 'i':
      return result;
    case 'j':
      result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 800))(this);
      if (!(_DWORD)result)
        return result;
      goto LABEL_16;
    default:
      if ((_DWORD)result == 81 || (_DWORD)result == 87)
      {
LABEL_16:
        Attribute = (WTF::String *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_valueminAttr);
        if (*(_QWORD *)Attribute && *(_DWORD *)(*(_QWORD *)Attribute + 4))
          result = WTF::String::toFloat(Attribute, 0);
        else
          result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
      }
      break;
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::stepValueForRange(WebCore::AccessibilityNodeObject *this)
{
  WTF::String *Attribute;

  Attribute = (WTF::String *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::stepAttr);
  return WTF::String::toFloat(Attribute, 0);
}

uint64_t WebCore::AccessibilityNodeObject::orientation(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v2 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_orientationAttr);
  if (v2)
  {
    v5 = *(_DWORD *)(v2 + 4);
    switch(v5)
    {
      case 10:
        v8 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v8 & 0xDF) != 0x48
            || (*(_BYTE *)(v8 + 1) & 0xDF) != 0x4F
            || (*(_BYTE *)(v8 + 2) & 0xDF) != 0x52
            || (*(_BYTE *)(v8 + 3) & 0xDF) != 0x49
            || (*(_BYTE *)(v8 + 4) & 0xDF) != 0x5A
            || (*(_BYTE *)(v8 + 5) & 0xDF) != 0x4F
            || (*(_BYTE *)(v8 + 6) & 0xDF) != 0x4E
            || (*(_BYTE *)(v8 + 7) & 0xDF) != 0x54
            || (*(_BYTE *)(v8 + 8) & 0xDF) != 0x41)
          {
            break;
          }
          v9 = *(unsigned __int8 *)(v8 + 9);
        }
        else
        {
          if ((*(_WORD *)v8 & 0xFFDF) != 0x48
            || (*(_WORD *)(v8 + 2) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v8 + 4) & 0xFFDF) != 0x52
            || (*(_WORD *)(v8 + 6) & 0xFFDF) != 0x49
            || (*(_WORD *)(v8 + 8) & 0xFFDF) != 0x5A
            || (*(_WORD *)(v8 + 10) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v8 + 12) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v8 + 14) & 0xFFDF) != 0x54
            || (*(_WORD *)(v8 + 16) & 0xFFDF) != 0x41)
          {
            break;
          }
          v9 = *(unsigned __int16 *)(v8 + 18);
        }
        if ((v9 & 0xFFFFFFDF) == 0x4C)
          return 1;
        break;
      case 8:
        v10 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v10 & 0xDF) != 0x56
            || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x52
            || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x54
            || (*(_BYTE *)(v10 + 4) & 0xDF) != 0x49
            || (*(_BYTE *)(v10 + 5) & 0xDF) != 0x43
            || (*(_BYTE *)(v10 + 6) & 0xDF) != 0x41)
          {
            break;
          }
          v11 = *(unsigned __int8 *)(v10 + 7);
        }
        else
        {
          if ((*(_WORD *)v10 & 0xFFDF) != 0x56
            || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x52
            || (*(_WORD *)(v10 + 6) & 0xFFDF) != 0x54
            || (*(_WORD *)(v10 + 8) & 0xFFDF) != 0x49
            || (*(_WORD *)(v10 + 10) & 0xFFDF) != 0x43
            || (*(_WORD *)(v10 + 12) & 0xFFDF) != 0x41)
          {
            break;
          }
          v11 = *(unsigned __int16 *)(v10 + 14);
        }
        if ((v11 & 0xFFFFFFDF) == 0x4C)
          return 0;
        break;
      case 9:
        v6 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v6 & 0xDF) != 0x55
            || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x4E
            || (*(_BYTE *)(v6 + 2) & 0xDF) != 0x44
            || (*(_BYTE *)(v6 + 3) & 0xDF) != 0x45
            || (*(_BYTE *)(v6 + 4) & 0xDF) != 0x46
            || (*(_BYTE *)(v6 + 5) & 0xDF) != 0x49
            || (*(_BYTE *)(v6 + 6) & 0xDF) != 0x4E
            || (*(_BYTE *)(v6 + 7) & 0xDF) != 0x45)
          {
            break;
          }
          v7 = *(unsigned __int8 *)(v6 + 8);
        }
        else
        {
          if ((*(_WORD *)v6 & 0xFFDF) != 0x55
            || (*(_WORD *)(v6 + 2) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v6 + 4) & 0xFFDF) != 0x44
            || (*(_WORD *)(v6 + 6) & 0xFFDF) != 0x45
            || (*(_WORD *)(v6 + 8) & 0xFFDF) != 0x46
            || (*(_WORD *)(v6 + 10) & 0xFFDF) != 0x49
            || (*(_WORD *)(v6 + 12) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v6 + 14) & 0xFFDF) != 0x45)
          {
            break;
          }
          v7 = *(unsigned __int16 *)(v6 + 16);
        }
        if ((v7 & 0xFFFFFFDF) == 0x44)
          return 2;
        break;
      default:
        break;
    }
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 19
    || (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 89
    || (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 130)
  {
    return 2;
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 100
    || (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 67
    || (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 73
    || (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 129)
  {
    return 0;
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 74
    || (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 106
    || (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 119
    || (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 133
    || (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 102)
  {
    return 1;
  }
  (*(void (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1512))(this);
  if ((int)v4 > SHIDWORD(v4))
    return 1;
  else
    return 2 * (SHIDWORD(v4) <= (int)v4);
}

BOOL WebCore::AccessibilityNodeObject::isLink(WebCore::AccessibilityNodeObject *this)
{
  return (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 139;
}

BOOL WebCore::AccessibilityNodeObject::isBusy(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  v1 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_busyAttr);
  if (v1 && *(_DWORD *)(v1 + 4) == 4)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if ((*(_BYTE *)(v1 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v3 & 0xDF) == 0x54 && (*(_BYTE *)(v3 + 1) & 0xDF) == 0x52 && (*(_BYTE *)(v3 + 2) & 0xDF) == 0x55)
      {
        v4 = *(unsigned __int8 *)(v3 + 3);
        return (v4 & 0xFFFFFFDF) == 69;
      }
    }
    else if ((*(_WORD *)v3 & 0xFFDF) == 0x54
           && (*(_WORD *)(v3 + 2) & 0xFFDF) == 0x52
           && (*(_WORD *)(v3 + 4) & 0xFFDF) == 0x55)
    {
      v4 = *(unsigned __int16 *)(v3 + 6);
      return (v4 & 0xFFFFFFDF) == 69;
    }
  }
  return 0;
}

uint64_t WebCore::AccessibilityNodeObject::isControl(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;
  int v3;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    if ((*(_WORD *)(result + 28) & 8) != 0
      && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 848))(result) & 1) != 0)
    {
      return 1;
    }
    else
    {
      v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 2976))(this);
      result = 1;
      if ((v3 - 84) > 0x30 || ((1 << (v3 - 84)) & 0x1060020060011) == 0)
      {
        v5 = v3 - 10;
        v6 = v5 > 0x39;
        v7 = (1 << v5) & 0x200000000000211;
        if (v6 || v7 == 0)
          return (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 10;
      }
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::isRadioInput(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (result)
    return (*(_WORD *)(result + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
        && *(_DWORD *)(*(_QWORD *)(result + 240) + 12) == 4096;
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::isFieldset(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (result)
    return (*(_WORD *)(result + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24);
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::checkboxOrRadioValue(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v2
    || (*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return WebCore::AccessibilityObject::checkboxOrRadioValue(this);
  }
  v3 = *(_QWORD *)(v2 + 240);
  v4 = *(_DWORD *)(v3 + 12);
  if (v4 == 4096)
  {
    if ((*(_WORD *)(v2 + 230) & 8) == 0)
      return (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 528))(this);
    return 2;
  }
  if (v4 != 2)
    return WebCore::AccessibilityObject::checkboxOrRadioValue(this);
  if ((*(_WORD *)(v2 + 230) & 8) == 0)
    return (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 528))(this);
  v5 = *(_QWORD *)(v3 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if ((*(_WORD *)(v6 + 232) & 0x2000) != 0)
        return (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 528))(this);
    }
  }
  return 2;
}

uint64_t WebCore::AccessibilityNodeObject::anchorElement(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::AXObjectCache *v4;
  __int16 v5;
  WebCore::RenderObject *v6;
  uint64_t v7;
  uint64_t result;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v2)
    return v2;
  v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1488))(this);
  if (!v3)
    return 0;
  v4 = (WebCore::AXObjectCache *)v3;
  while (1)
  {
    v5 = *(_WORD *)(v2 + 28);
    if ((v5 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
      break;
    v6 = (WebCore::RenderObject *)(*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL);
    if (v6)
    {
      v7 = WebCore::AXObjectCache::getOrCreate(v4, v6);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 104))(v7))
      {
        v5 = *(_WORD *)(v2 + 28);
        break;
      }
    }
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2)
      return v2;
  }
  if ((v5 & 8) != 0)
    return v2;
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::popoverTargetElement@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, unsigned int **a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  unsigned int *v13;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (result
    && (v4 = result, (*(_WORD *)(result + 28) & 8) != 0)
    && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 848))(result), (_DWORD)result)
    && (result = WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v4)) != 0)
  {
    v6 = result;
    do
      v7 = __ldaxr((unsigned int *)result);
    while (__stlxr(v7 + 1, (unsigned int *)result));
    result = *(_QWORD *)(result + 8);
    if (result)
    {
      result = (uint64_t)WebCore::HTMLFormControlElement::popoverTargetElement((unsigned int *)result, &v13);
      v8 = v13;
    }
    else
    {
      v8 = 0;
    }
    *a2 = v8;
    do
    {
      v9 = __ldaxr((unsigned int *)v6);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v6));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v6);
      v11 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v11)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v11));
      v12 = *(WTF **)(v6 + 16);
      if (v12)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        WTF::fastFree(v12, v5);
      }
      return WTF::fastFree((WTF *)v6, v5);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::internalLinkElement(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  WebCore::HTMLAnchorElement *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Node *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  WTF *v24;
  unsigned int *v25;
  uint64_t v26;
  WTF *v27;
  WebCore::Node *v28;
  WTF::StringImpl *v29[5];
  uint64_t v30;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3024))(this);
  if (!v2)
    return 0;
  v4 = v2;
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
  {
    return 0;
  }
  if ((*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 8) = v4;
    *(_BYTE *)(v5 + 32) = 0;
    v6 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v6 & 0xFFFF000000000000 | v5;
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        v25 = v7;
        v26 = v7[7];
        if ((_DWORD)v26)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v25 + 2), (WTF::StringImpl *)(*((_QWORD *)v25 + 2) + 32 * v26));
        v27 = (WTF *)*((_QWORD *)v25 + 2);
        if (v27)
        {
          *((_QWORD *)v25 + 2) = 0;
          v25[6] = 0;
          WTF::fastFree(v27, v3);
        }
        WTF::fastFree((WTF *)v25, v3);
      }
    }
  }
  v10 = *(_QWORD *)(v4 + 16) & 0xFFFFFFFFFFFFLL;
  if (!v10)
    return 0;
  do
    v11 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v11 + 1, (unsigned int *)v10));
  v12 = *(WebCore::HTMLAnchorElement **)(v10 + 8);
  if (v12)
  {
    WebCore::HTMLAnchorElement::href(v12, (WTF::URL *)v29);
    v13 = WTF::URL::fragmentIdentifier((WTF::URL *)v29);
    v14 = (uint64_t)v3;
    if ((_DWORD)v3)
    {
      v15 = (unsigned __int8 *)v13;
      v16 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1712))(this);
      if (!v16)
        goto LABEL_21;
      if (WTF::equalIgnoringFragmentIdentifier())
      {
        WebCore::TreeScope::findAnchor(v16 + 96, v15, v14, (uint64_t *)&v28);
        v16 = (uint64_t)v28;
        if (v28)
        {
          v17 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v17 = off_1E3385038;
          v30 = v17;
          v16 = WebCore::firstAccessibleObjectFromNode(v16, &v30);
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          v18 = v28;
          v28 = 0;
          if (v18)
          {
            if (*((_DWORD *)v18 + 6) == 2)
            {
              if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v18, v3);
            }
            else
            {
              *((_DWORD *)v18 + 6) -= 2;
            }
          }
        }
        goto LABEL_21;
      }
    }
    v16 = 0;
LABEL_21:
    v19 = v29[0];
    v29[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v19 -= 2;
    }
    goto LABEL_24;
  }
  v16 = 0;
  do
  {
LABEL_24:
    v20 = __ldaxr((unsigned int *)v10);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, (unsigned int *)v10));
  if (!v21)
  {
    atomic_store(1u, (unsigned int *)v10);
    v23 = *(unsigned int *)(v10 + 28);
    if ((_DWORD)v23)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v23));
    v24 = *(WTF **)(v10 + 16);
    if (v24)
    {
      *(_QWORD *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 24) = 0;
      WTF::fastFree(v24, v3);
    }
    WTF::fastFree((WTF *)v10, v3);
  }
  return v16;
}

uint64_t WebCore::AccessibilityNodeObject::toggleDetailsAncestor(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  WTF::String *v4;
  __n128 v5;
  __int16 v6;
  uint64_t *v7;
  uint64_t v8;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    do
    {
      v6 = *(_WORD *)(result + 28);
      if ((v6 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24))
      {
        WebCore::HTMLDetailsElement::toggleOpen((WebCore::HTMLDetailsElement *)result, v5, v2, v3, v4);
        return 1;
      }
      if ((v6 & 0x80) != 0)
      {
        v8 = *(_QWORD *)(result + 200);
        if (!v8)
          return 0;
        v7 = (uint64_t *)(v8 + 8);
      }
      else
      {
        v7 = (uint64_t *)(result + 32);
      }
      result = *v7;
    }
    while (*v7);
  }
  return result;
}

WebCore::Node *WebCore::AccessibilityNodeObject::actionElement(WebCore::AccessibilityNodeObject *this)
{
  WebCore::Node *v2;
  WebCore::Node *v3;
  void *v4;
  WebCore::Node *v5;
  int v7;
  int v10;
  WebCore::Node *v11;
  uint64_t v14;
  WebCore::Node *v15;

  v2 = (WebCore::Node *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v2)
    return 0;
  v3 = v2;
  WebCore::nodeActionElement((uint64_t)&v15, v2);
  v5 = v15;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, v4);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
    return v5;
  }
  v7 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 2976))(this);
  if ((v7 - 88) <= 0x26 && ((1 << (v7 - 88)) & 0x4002002001) != 0 || v7 == 14)
  {
    v5 = v3;
    if ((*((_WORD *)v3 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1955FFBD4);
    }
    return v5;
  }
  v10 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
  if ((v10 - 69) <= 0x3F && ((1 << (v10 - 69)) & 0x8010000000008381) != 0
    || v10 == 10)
  {
    v5 = WebCore::nativeActionElement(v3, v11);
    if (!v5)
    {
      v5 = v3;
      if ((*((_WORD *)v3 + 14) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1955FFC48);
      }
    }
    return v5;
  }
  v14 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3024))(this);
  v5 = (WebCore::Node *)v14;
  if (v14)
    return v5;
  return (WebCore::Node *)WebCore::AccessibilityNodeObject::mouseButtonListener((uint64_t)this, 1);
}

uint64_t WebCore::nodeActionElement(uint64_t this, WebCore::Node *a2)
{
  _QWORD *v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;

  v2 = (_QWORD *)this;
  v3 = *((_WORD *)a2 + 14);
  if ((v3 & 0x10) == 0)
    goto LABEL_8;
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
  if (v4 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v5 = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v5 + 2;
    if ((*((_BYTE *)a2 + 160) & 0x18) == 0)
    {
      v6 = *(_DWORD *)(*((_QWORD *)a2 + 30) + 12);
      if (v6 == 2)
        goto LABEL_16;
      v7 = v6 != 4096 && (v6 & 0x14001) == 0;
      if (!v7 || v6 == 64 || v6 == 256)
        goto LABEL_16;
    }
    if (v5)
    {
      *((_DWORD *)a2 + 6) = v5;
    }
    else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
    {
      this = (uint64_t)WebCore::Node::removedLastRef(a2, a2);
    }
    goto LABEL_8;
  }
  if (v4 != *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24) && v4 != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
LABEL_8:
    a2 = 0;
LABEL_16:
    *v2 = a2;
    return this;
  }
  if ((v3 & 8) != 0)
  {
    *((_DWORD *)a2 + 6) += 2;
    goto LABEL_16;
  }
  this = 96;
  __break(0xC471u);
  return this;
}

WebCore::Node *WebCore::nativeActionElement(WebCore *this, WebCore::Node *a2)
{
  WebCore::Node *v2;
  WebCore::Node *v3;
  WebCore::Node *v4;
  uint64_t v5;
  WebCore::Node *v7;

  if ((*((_WORD *)this + 14) & 4) == 0)
    return 0;
  v2 = (WebCore::Node *)*((_QWORD *)this + 10);
  if (!v2)
    return 0;
  while (1)
  {
    WebCore::nodeActionElement((uint64_t)&v7, v2);
    v4 = v7;
    if (v7)
      break;
    v5 = WebCore::nativeActionElement(v2, v3);
    if (v5)
      return (WebCore::Node *)v5;
    v2 = (WebCore::Node *)*((_QWORD *)v2 + 7);
    if (!v2)
      return 0;
  }
  if (*((_DWORD *)v7 + 6) == 2)
  {
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v7, v3);
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
  return v4;
}

uint64_t WebCore::AccessibilityNodeObject::mouseButtonListener(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  __int16 v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  unint64_t StatusReg;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
  if (!v4)
    return 0;
  v5 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
  if (!v5)
    return 0;
  v7 = v5;
  do
    v8 = __ldaxr((unsigned int *)v5);
  while (__stlxr(v8 + 1, (unsigned int *)v5));
  v9 = *(_QWORD *)(v5 + 8);
  if (v9)
  {
    v10 = *(_WORD *)(v9 + 28);
    if ((v10 & 8) != 0)
      goto LABEL_19;
    v9 = *(_QWORD *)(v9 + 32);
    if (!v9)
      goto LABEL_10;
    v10 = *(_WORD *)(v9 + 28);
    if ((v10 & 8) != 0)
    {
LABEL_19:
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      do
      {
        if ((v10 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1456))(a1);
          if (a2 == 1 && (_DWORD)v5 == 107)
            break;
        }
        v17 = *(_QWORD *)(StatusReg + 736);
        if (!v17 || (v18 = *(_QWORD *)(v17 + 96)) == 0)
        {
          v5 = WebCore::threadGlobalDataSlow((WebCore *)v5);
          v18 = v5;
        }
        v19 = *(_QWORD *)(v18 + 40);
        if (!v19)
        {
          v5 = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v18);
          v19 = *(_QWORD *)(v18 + 40);
        }
        v20 = *(_QWORD *)(v9 + 16);
        if ((v20 & 0x1000000000000) != 0)
        {
          v29 = v20 & 0xFFFFFFFFFFFFLL;
          v30 = *(unsigned int *)(v29 + 28);
          if ((_DWORD)v30)
          {
            v31 = *(_QWORD **)(v29 + 16);
            v32 = *(_QWORD *)(v19 + 400);
            v33 = 32 * v30;
            while (*v31 != v32)
            {
              v31 += 4;
              v33 -= 32;
              if (!v33)
                goto LABEL_30;
            }
            goto LABEL_10;
          }
        }
LABEL_30:
        v21 = *(_QWORD *)(StatusReg + 736);
        if (!v21 || (v22 = *(_QWORD *)(v21 + 96)) == 0)
        {
          v5 = WebCore::threadGlobalDataSlow((WebCore *)v5);
          v22 = v5;
        }
        v23 = *(_QWORD *)(v22 + 40);
        if (!v23)
        {
          v5 = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v22);
          v23 = *(_QWORD *)(v22 + 40);
        }
        v24 = *(_QWORD *)(v9 + 16);
        if ((v24 & 0x1000000000000) != 0)
        {
          v34 = v24 & 0xFFFFFFFFFFFFLL;
          v35 = *(unsigned int *)(v34 + 28);
          if ((_DWORD)v35)
          {
            v36 = *(_QWORD **)(v34 + 16);
            v37 = *(_QWORD *)(v23 + 1208);
            v38 = 32 * v35;
            while (*v36 != v37)
            {
              v36 += 4;
              v38 -= 32;
              if (!v38)
                goto LABEL_36;
            }
            goto LABEL_10;
          }
        }
LABEL_36:
        v25 = *(_QWORD *)(StatusReg + 736);
        if (!v25 || (v26 = *(_QWORD *)(v25 + 96)) == 0)
        {
          v5 = WebCore::threadGlobalDataSlow((WebCore *)v5);
          v26 = v5;
        }
        v27 = *(_QWORD *)(v26 + 40);
        if (!v27)
        {
          v5 = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v26);
          v27 = *(_QWORD *)(v26 + 40);
        }
        v28 = *(_QWORD *)(v9 + 16);
        if ((v28 & 0x1000000000000) != 0)
        {
          v39 = v28 & 0xFFFFFFFFFFFFLL;
          v40 = *(unsigned int *)(v39 + 28);
          if ((_DWORD)v40)
          {
            v41 = *(_QWORD **)(v39 + 16);
            v42 = *(_QWORD *)(v27 + 1256);
            v43 = 32 * v40;
            while (*v41 != v42)
            {
              v41 += 4;
              v43 -= 32;
              if (!v43)
                goto LABEL_42;
            }
            goto LABEL_10;
          }
        }
LABEL_42:
        v9 = *(_QWORD *)(v9 + 32);
        if (!v9)
          goto LABEL_10;
        v10 = *(_WORD *)(v9 + 28);
      }
      while ((v10 & 8) != 0);
    }
    v9 = 0;
  }
  do
  {
LABEL_10:
    v11 = __ldaxr((unsigned int *)v7);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, (unsigned int *)v7));
  if (!v12)
  {
    atomic_store(1u, (unsigned int *)v7);
    v13 = *(unsigned int *)(v7 + 28);
    if ((_DWORD)v13)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v13));
    v14 = *(WTF **)(v7 + 16);
    if (v14)
    {
      *(_QWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 24) = 0;
      WTF::fastFree(v14, v6);
    }
    WTF::fastFree((WTF *)v7, v6);
  }
  return v9;
}

uint64_t WebCore::AccessibilityNodeObject::isDescendantOfBarrenParent(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;
  uint64_t v2;
  int v3;

  if (*((_QWORD *)this + 27))
    return *((_BYTE *)this + 226) != 0;
  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1232))(this);
  if (result)
  {
    v2 = result;
    do
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 3080))(v2);
      if (!v3)
        break;
      v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1232))(v2);
    }
    while (v2);
    return v3 ^ 1u;
  }
  return result;
}

void WebCore::AccessibilityNodeObject::alterRangeValue(WebCore::AccessibilityObject *a1, int a2)
{
  uint64_t v4;
  _QWORD *Attribute;
  __n128 v6;
  float v7;
  float v8;
  float v9;

  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1456))(a1) == 102
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1456))(a1) == 104)
  {
    v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 832))(a1);
    if (v4)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 960))(v4) & 1) == 0)
      {
        Attribute = WebCore::AccessibilityObject::getAttribute(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::stepAttr);
        if (*Attribute && *(_DWORD *)(*Attribute + 4))
        {
          v7 = (*(float (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 2880))(a1);
          (*(void (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 896))(a1);
          v9 = -v7;
          if (a2)
            v9 = v7;
          WebCore::AccessibilityNodeObject::setNodeValue(a1, a2, v9 + v8);
        }
        else
        {
          v6.n128_u32[0] = -5.0;
          if (a2)
            v6.n128_f32[0] = 5.0;
          (*(void (**)(WebCore::AccessibilityObject *, __n128))(*(_QWORD *)a1 + 3288))(a1, v6);
        }
      }
    }
  }
}

void WebCore::AccessibilityNodeObject::increment(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1712))(this);
  LOBYTE(v4) = 0;
  v5 = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator(&v3, 257, v2, 1, 0, &v4, 1);
  WebCore::AccessibilityNodeObject::alterRangeValue(this, 1);
  WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v3);
}

void WebCore::AccessibilityNodeObject::decrement(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1712))(this);
  LOBYTE(v4) = 0;
  v5 = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator(&v3, 257, v2, 1, 0, &v4, 1);
  WebCore::AccessibilityNodeObject::alterRangeValue(this, 0);
  WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v3);
}

WebCore *WebCore::AccessibilityNodeObject::performDismissAction(WebCore::AccessibilityNodeObject *this)
{
  WTF::StringImpl *v2;
  WTF *v3;
  WTF::StringImpl *v4;
  WebCore *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15[2];
  __int128 v16;
  WTF::StringImpl *v17[2];
  WTF::StringImpl *v18[2];
  __int128 v19;
  WTF::StringImpl *v20;

  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v15 = 0u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v20;
  v17[0] = v20;
  *(_QWORD *)((char *)&v19 + 4) = 0x1B0000001BLL;
  WTF::AtomStringImpl::add();
  if (v20)
    *(_DWORD *)v20 += 2;
  v17[1] = v2;
  v3 = *(WTF **)((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1712))(this) + 528);
  if (v3)
  {
    v3 = (WTF *)*((_QWORD *)v3 + 1);
    if (v3)
    {
      v3 = (WTF *)*((_QWORD *)v3 + 14);
      if (v3)
        ++*(_DWORD *)v3;
    }
  }
  v15[1] = v3;
  BYTE2(v15[0]) = 1;
  LOWORD(v15[0]) = 257;
  v5 = WebCore::dispatchSimulatedKeyboardUpDownEvent(this, (unsigned __int8 *)v15);
  v6 = v18[1];
  v18[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v17[1];
  v17[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v17[0];
  v17[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v15[1];
  v15[1] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v11 = (uint64_t *)*((_QWORD *)v9 + 2);
      *((_QWORD *)v9 + 2) = 0;
      if (v11)
      {
        if (*v11)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v11, v4);
        WTF::fastFree((WTF *)v11, v4);
      }
      v12 = (unsigned int *)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v4);
        }
      }
      WTF::fastFree(v9, v4);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return v5;
}

WebCore *WebCore::dispatchSimulatedKeyboardUpDownEvent(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v6;
  WebCore *v7;
  WebCore *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore *v13;
  void *v14;
  WebCore *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v28;
  uint64_t v29;

  v4 = a1[1];
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v7 = (WebCore *)(*(uint64_t (**)(_QWORD *))(*a1 + 840))(a1);
  v8 = v7;
  if (v7)
  {
    v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
      v10 = WebCore::threadGlobalDataSlow(v7);
    v11 = *(_QWORD *)(v10 + 40);
    if (!v11)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
      v11 = *(_QWORD *)(v10 + 40);
    }
    WebCore::KeyboardEvent::create((_QWORD *)(v11 + 1048), a2, 1, &v29);
    v12 = v29;
    (*(void (**)(WebCore *, uint64_t))(*(_QWORD *)v8 + 48))(v8, v29);
    v8 = (WebCore *)(*(unsigned __int8 *)(v12 + 20) >> 7);
    if (*(_DWORD *)(v12 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    else
      --*(_DWORD *)(v12 + 16);
  }
  v13 = (WebCore *)(*(uint64_t (**)(_QWORD *))(*a1 + 840))(a1);
  if (v13)
  {
    v15 = v13;
    v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
      v17 = WebCore::threadGlobalDataSlow(v13);
    v18 = *(_QWORD *)(v17 + 40);
    if (!v18)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v17);
      v18 = *(_QWORD *)(v17 + 40);
    }
    WebCore::KeyboardEvent::create((_QWORD *)(v18 + 1072), a2, 1, &v29);
    v19 = v29;
    (*(void (**)(WebCore *, uint64_t))(*(_QWORD *)v15 + 48))(v15, v29);
    v8 = (WebCore *)(v8 | (*(unsigned __int8 *)(v19 + 20) >> 7));
    if (*(_DWORD *)(v19 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    else
      --*(_DWORD *)(v19 + 16);
  }
  v20 = a1[1];
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v20))
  {
    goto LABEL_30;
  }
  MEMORY[0x19AEA534C](v20);
LABEL_30:
  v22 = *(_QWORD *)(v20 + 8);
  v23 = v22 - 1;
  *(_QWORD *)(v20 + 8) = v22 - 1;
  if (v22 == 1)
  {
    v28 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 24) = 0;
    v25 = v28 != 0;
  }
  else
  {
    v24 = 0;
    v25 = 1;
  }
  v26 = __ldxr((unsigned __int8 *)v20);
  if (v26 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v20))
    {
      if (v23)
        return v8;
      goto LABEL_38;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v20);
  if (v23)
    return v8;
LABEL_38:
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (!v25)
    WTF::fastFree((WTF *)v20, v14);
  return v8;
}

void WebCore::AccessibilityNodeObject::setNodeValue(WTF::String *a1, int a2, float a3)
{
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF **v9;
  uint64_t v10;
  int v11;
  int v12;
  _BOOL4 v13;
  int v14;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[2];
  __int128 v29;
  WTF::StringImpl *v30[2];
  WTF::StringImpl *v31[2];
  __int128 v32;
  WTF::StringImpl *v33;

  WTF::String::number(a1, a3);
  v6 = (*(uint64_t (**)(WTF::String *, WTF::StringImpl **))(*(_QWORD *)a1 + 1784))(a1, v28);
  v7 = v28[0];
  v28[0] = 0;
  if (!v7)
  {
LABEL_4:
    if (v6)
      goto LABEL_5;
    goto LABEL_8;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v7, v5);
  if (v6)
  {
LABEL_5:
    v8 = (*(uint64_t (**)(WTF::String *))(*(_QWORD *)a1 + 1488))(a1);
    if (v8)
    {
      v9 = (WTF **)v8;
      v10 = (*(uint64_t (**)(WTF::String *))(*(_QWORD *)a1 + 1712))(a1);
      WebCore::AXObjectCache::postNotification(v9, a1, v10, 57, 0);
    }
    return;
  }
LABEL_8:
  *(_OWORD *)v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)v28 = 0u;
  v11 = *(unsigned __int8 *)((*(uint64_t (**)(WTF::String *))(*(_QWORD *)a1 + 1704))(a1) + 1132);
  if ((*(unsigned int (**)(WTF::String *))(*(_QWORD *)a1 + 1872))(a1))
  {
    v12 = (*(uint64_t (**)(WTF::String *))(*(_QWORD *)a1 + 1456))(a1);
    v13 = v12 == 104;
    if ((a2 & 1) != 0)
      goto LABEL_16;
    if (v12 != 104)
    {
      v13 = 0;
      goto LABEL_16;
    }
LABEL_15:
    v13 = 1;
    goto LABEL_16;
  }
  if ((a2 & 1) == 0)
    goto LABEL_15;
  v13 = 1;
LABEL_16:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v30[0] = v33;
  if (v11)
    v14 = 37;
  else
    v14 = 39;
  if (v11)
    v15 = 39;
  else
    v15 = 37;
  if (v13)
  {
    v14 = 38;
    v15 = 40;
  }
  if (a2)
    v16 = v14;
  else
    v16 = v15;
  DWORD1(v32) = v16;
  v27 = v33;
  WTF::AtomStringImpl::add();
  v31[1] = v33;
  DWORD2(v32) = v16;
  if (v27)
    *(_DWORD *)v27 += 2;
  v30[1] = v27;
  v17 = *(WTF::StringImpl **)((*(uint64_t (**)(WTF::String *))(*(_QWORD *)a1 + 1712))(a1) + 528);
  if (v17)
  {
    v17 = (WTF::StringImpl *)*((_QWORD *)v17 + 1);
    if (v17)
    {
      v17 = (WTF::StringImpl *)*((_QWORD *)v17 + 14);
      if (v17)
        ++*(_DWORD *)v17;
    }
  }
  v28[1] = v17;
  BYTE2(v28[0]) = 1;
  LOWORD(v28[0]) = 257;
  WebCore::dispatchSimulatedKeyboardUpDownEvent(a1, (unsigned __int8 *)v28);
  v19 = v31[1];
  v31[1] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v30[1];
  v30[1] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v30[0];
  v30[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v28[1];
  v28[1] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
    {
      v23 = (uint64_t *)*((_QWORD *)v22 + 2);
      *((_QWORD *)v22 + 2) = 0;
      if (v23)
      {
        if (*v23)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v23, v18);
        WTF::fastFree((WTF *)v23, v18);
      }
      v24 = (unsigned int *)*((_QWORD *)v22 + 1);
      *((_QWORD *)v22 + 1) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          WTF::fastFree((WTF *)v24, v18);
        }
      }
      WTF::fastFree(v22, v18);
    }
    else
    {
      --*(_DWORD *)v22;
    }
  }
}

void WebCore::AccessibilityNodeObject::changeValueByPercent(WebCore::AccessibilityNodeObject *this, float a2)
{
  float v4;
  float v5;
  float v6;

  if (a2 != 0.0)
  {
    v4 = (*(float (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 904))(this);
    v5 = (float)(a2 / 100.0)
       * (float)(v4 - (*(float (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 912))(this));
    (*(void (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 896))(this);
    if (fabsf(v5) < 1.0)
      v5 = fabsf(a2) * (float)(1.0 / a2);
    WebCore::AccessibilityNodeObject::setNodeValue(this, a2 > 0.0, v6 + v5);
  }
}

uint64_t WebCore::AccessibilityNodeObject::liveRegionStatus@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v5;

  result = (uint64_t)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_liveAttr);
  v5 = *(_DWORD **)result;
  if (*(_QWORD *)result && v5[1])
    goto LABEL_11;
  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
  if (result <= 7
    && (((1 << result) & 6) != 0 || ((1 << result) & 0x50) != 0 || ((1 << result) & 0xA0) != 0))
  {
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  v5 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
LABEL_11:
    *v5 += 2;
  *a2 = v5;
  return result;
}

_QWORD *WebCore::AccessibilityNodeObject::liveRegionRelevant@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v4;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_relevantAttr);
  v4 = (_DWORD *)*result;
  if (!*result || !v4[1])
    return (_QWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *v4 += 2;
  *a2 = v4;
  return result;
}

BOOL WebCore::AccessibilityNodeObject::liveRegionAtomic(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  int v3;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v2 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_atomicAttr);
  if (v2)
  {
    v6 = *(_DWORD *)(v2 + 4);
    if (v6 != 4)
    {
      if (v6 != 5)
        goto LABEL_2;
      v7 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v7 & 0xDF) != 0x46
          || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x41
          || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x4C
          || (*(_BYTE *)(v7 + 3) & 0xDF) != 0x53)
        {
          goto LABEL_2;
        }
        v8 = *(unsigned __int8 *)(v7 + 4);
      }
      else
      {
        if ((*(_WORD *)v7 & 0xFFDF) != 0x46
          || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x41
          || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v7 + 6) & 0xFFDF) != 0x53)
        {
          goto LABEL_2;
        }
        v8 = *(unsigned __int16 *)(v7 + 8);
      }
      if ((v8 & 0xFFFFFFDF) == 0x45)
        return 0;
      goto LABEL_2;
    }
    v9 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v9 & 0xDF) != 0x54 || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x52 || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x55)
        goto LABEL_2;
      v10 = *(unsigned __int8 *)(v9 + 3);
    }
    else
    {
      if ((*(_WORD *)v9 & 0xFFDF) != 0x54
        || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x55)
      {
        goto LABEL_2;
      }
      v10 = *(unsigned __int16 *)(v9 + 6);
    }
    if ((v10 & 0xFFFFFFDF) == 0x45)
      return 1;
  }
LABEL_2:
  v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
  return v3 == 1 || v3 == 6;
}

double WebCore::AccessibilityNodeObject::visiblePositionRange@<D0>(WebCore::AccessibilityNodeObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  WebCore::Node *v4;
  uint64_t v5;
  void *v6;
  WebCore::Node *v7;
  __int16 v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  double result;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  uint64_t v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  int v20;
  char v21;
  char v22;
  WebCore::Node *v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;

  v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v3)
  {
    result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_BYTE *)(a2 + 16) = 1;
    *(_BYTE *)(a2 + 40) = 1;
    return result;
  }
  v5 = v3;
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::firstPositionInOrBeforeNode(v3, v4, (uint64_t)&v23);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v23, (uint64_t)&v27);
  v30 = 1;
  v7 = v23;
  v23 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v6);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 208))(v5) & 1) != 0)
  {
    v8 = *(_WORD *)(v5 + 28);
    *(_DWORD *)(v5 + 24) += 2;
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v5 + 80);
      if (v9)
        LODWORD(v9) = *(_DWORD *)(v9 + 4);
      v10 = 0;
      v19 = (WebCore::Node *)v5;
    }
    else
    {
      LODWORD(v9) = 0;
      v19 = (WebCore::Node *)v5;
      v10 = 4;
    }
  }
  else
  {
    LODWORD(v9) = 0;
    *(_DWORD *)(v5 + 24) += 2;
    v19 = (WebCore::Node *)v5;
    v10 = 2;
  }
  v20 = v9;
  v21 = v10;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v19, (uint64_t)&v23);
  v26 = 1;
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v11);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  if (WebCore::operator==(&v27, (uint64_t *)&v23))
  {
    WebCore::VisiblePosition::next((unsigned __int8 *)&v23, 0, 0, (uint64_t)&v19);
    v14 = v19;
    v19 = 0;
    v15 = v23;
    v23 = v14;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v15, v12);
          v18 = v19;
          v24 = v20;
          v25 = v21;
          v26 = v22;
          v19 = 0;
          if (v18)
          {
            if (*((_DWORD *)v18 + 6) == 2)
            {
              if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v18, v12);
            }
            else
            {
              *((_DWORD *)v18 + 6) -= 2;
            }
          }
          goto LABEL_18;
        }
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    v24 = v20;
    v25 = v21;
    v26 = v22;
LABEL_18:
    v16 = v23;
    v17 = v27;
    if (!v23)
    {
      if (v27)
        *(_DWORD *)(v27 + 24) += 2;
      v24 = v28;
      v25 = v29;
      v26 = v30;
      v16 = (WebCore::Node *)v17;
    }
    goto LABEL_23;
  }
  v17 = v27;
  v16 = v23;
LABEL_23:
  *(_QWORD *)a2 = v17;
  *(_DWORD *)(a2 + 8) = v28;
  *(_BYTE *)(a2 + 12) = v29;
  *(_BYTE *)(a2 + 16) = v30;
  *(_QWORD *)(a2 + 24) = v16;
  *(_DWORD *)(a2 + 32) = v24;
  *(_BYTE *)(a2 + 36) = v25;
  *(_BYTE *)(a2 + 40) = v26;
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v12);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

void WebCore::AccessibilityNodeObject::selectedVisiblePositionRange(WebCore::AccessibilityNodeObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  const WebCore::VisiblePosition *v15;
  int v16;
  int v17;
  uint64_t *v18;
  const WebCore::VisiblePosition *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  int v42;
  char v43;
  __int16 v44;
  char v45;
  uint64_t v46;
  int v47;
  char v48;
  char v49;

  v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1712))(this);
  if (!v3)
    goto LABEL_23;
  v4 = *(_QWORD *)(v3 + 528);
  if (!v4)
    goto LABEL_23;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_23;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064);
  v7 = *(_QWORD *)(v6 + 56);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v26 = v7;
  v27 = *(_DWORD *)(v6 + 64);
  v28 = *(_BYTE *)(v6 + 68);
  v8 = *(_QWORD *)(v6 + 72);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v29 = v8;
  v30 = *(_DWORD *)(v6 + 80);
  v31 = *(_BYTE *)(v6 + 84);
  v9 = *(_QWORD *)(v6 + 88);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v32 = v9;
  v33 = *(_DWORD *)(v6 + 96);
  v34 = *(_BYTE *)(v6 + 100);
  v10 = *(_QWORD *)(v6 + 104);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v35 = v10;
  v36 = *(_DWORD *)(v6 + 112);
  v37 = *(_BYTE *)(v6 + 116);
  v11 = *(_QWORD *)(v6 + 120);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v38 = v11;
  v39 = *(_DWORD *)(v6 + 128);
  v40 = *(_BYTE *)(v6 + 132);
  v12 = *(_QWORD *)(v6 + 136);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v41 = v12;
  v42 = *(_DWORD *)(v6 + 144);
  v43 = *(_BYTE *)(v6 + 148);
  v44 = *(_WORD *)(v6 + 152);
  v45 = *(_BYTE *)(v6 + 154);
  v13 = HIBYTE(v44);
  if (!HIBYTE(v44))
  {
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v26);
LABEL_23:
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 40) = 1;
    return;
  }
  v14 = v44;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v38, a2);
  *(_BYTE *)(a2 + 16) = 1;
  if (v13 != 2 && !v14)
  {
    v20 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      *(_DWORD *)(v20 + 24) += 2;
      v46 = v20;
      v47 = *(_DWORD *)(a2 + 8);
      v48 = *(_BYTE *)(a2 + 12);
      v49 = 0;
      if (!WebCore::inSameLine((WebCore *)a2, (const WebCore::VisiblePosition *)&v46, v15))
        *(_BYTE *)(a2 + 16) = 0;
      v22 = v46;
      v46 = 0;
      if (v22)
      {
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22, v21);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
      }
    }
  }
  v16 = HIBYTE(v44);
  v17 = v44;
  v18 = (uint64_t *)(a2 + 24);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v41, a2 + 24);
  *(_BYTE *)(a2 + 40) = 1;
  if (v16 == 2 || !v17)
  {
    v23 = *v18;
    if (*v18)
    {
      *(_DWORD *)(v23 + 24) += 2;
      v46 = v23;
      v47 = *(_DWORD *)(a2 + 32);
      v48 = *(_BYTE *)(a2 + 36);
      v49 = 0;
      if (!WebCore::inSameLine((WebCore *)(a2 + 24), (const WebCore::VisiblePosition *)&v46, v19))
        *(_BYTE *)(a2 + 40) = 0;
      v25 = v46;
      v46 = 0;
      if (v25)
      {
        if (*(_DWORD *)(v25 + 24) == 2)
        {
          if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v25, v24);
        }
        else
        {
          *(_DWORD *)(v25 + 24) -= 2;
        }
      }
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v26);
}

uint64_t WebCore::AccessibilityNodeObject::indexForVisiblePosition(WebCore::AccessibilityNodeObject *this, VisiblePosition *a2)
{
  WebCore::Node *v3;
  WebCore::Node *v4;
  void *v5;
  uint64_t v6;

  v3 = (WebCore::Node *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v3)
    return 0;
  v4 = v3;
  *((_DWORD *)v3 + 6) += 2;
  v6 = WebCore::indexForVisiblePosition(v3, a2, 0);
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v4, v5);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  return v6;
}

unsigned int *WebCore::AccessibilityNodeObject::visiblePositionForIndex@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, WebCore::Node *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *result;
  unsigned int *v6;
  void *v7;

  result = (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v6 = result;
    result[6] += 2;
    result = WebCore::visiblePositionForIndexUsingCharacterIterator((WebCore *)result, a2, (uint64_t)a3);
    if (v6[6] == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
    }
    else
    {
      v6[6] -= 2;
    }
  }
  else
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 16) = 1;
  }
  return result;
}

unsigned int *WebCore::AccessibilityNodeObject::visiblePositionRangeForLine@<X0>(unsigned int *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  WebCore::Node *v6;
  void *v7;
  WebCore::Node *v8;
  uint64_t v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  int v12;
  int v13;
  const WebCore::VisiblePosition *v14;
  int v15;
  int v16;
  WebCore::Node **v17;
  void *v18;
  const WebCore::VisiblePosition *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  void *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  int v27;
  char v28;
  char v29;
  WebCore::Node *v30;
  int v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned int *v38;
  int v39;
  char v40;
  char v41;

  if (!a2
    || (this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 1712))(this)) == 0
    || (this = (unsigned int *)*((_QWORD *)this + 243)) == 0)
  {
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_BYTE *)(a3 + 40) = 1;
    return this;
  }
  v30 = 0;
  WebCore::RenderBlock::positionForPoint((WebCore::RenderBlock *)this, (int *)&v30, 1, 0, (uint64_t)&v38);
  v5 = a2 - 1;
  if (!v5)
  {
LABEL_27:
    WebCore::FrameSelection::FrameSelection((WebCore::FrameSelection *)&v30, 0);
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v26, (const WebCore::VisiblePosition *)&v38, 0);
    WebCore::FrameSelection::setSelection((uint64_t)&v30, (uint64_t)&v26, 6u, 0, 0, 0, 0);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v26);
    WebCore::FrameSelection::modify((uint64_t)&v30, 1, 2, 7, 0);
    v12 = v37;
    v13 = v36;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v34, a3);
    *(_BYTE *)(a3 + 16) = 1;
    if (v12 != 2 && !v13)
    {
      v21 = *(WebCore::Node **)a3;
      if (*(_QWORD *)a3)
      {
        *((_DWORD *)v21 + 6) += 2;
        v26 = v21;
        v27 = *(_DWORD *)(a3 + 8);
        v28 = *(_BYTE *)(a3 + 12);
        v29 = 0;
        if (!WebCore::inSameLine((WebCore *)a3, (const WebCore::VisiblePosition *)&v26, v14))
          *(_BYTE *)(a3 + 16) = 0;
        v23 = v26;
        v26 = 0;
        if (v23)
        {
          if (*((_DWORD *)v23 + 6) == 2)
          {
            if ((*((_WORD *)v23 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v23, v22);
          }
          else
          {
            *((_DWORD *)v23 + 6) -= 2;
          }
        }
      }
    }
    v15 = v37;
    v16 = v36;
    v17 = (WebCore::Node **)(a3 + 24);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v35, a3 + 24);
    *(_BYTE *)(a3 + 40) = 1;
    if (v15 == 2 || !v16)
    {
      v24 = *v17;
      if (*v17)
      {
        *((_DWORD *)v24 + 6) += 2;
        v26 = v24;
        v27 = *(_DWORD *)(a3 + 32);
        v28 = *(_BYTE *)(a3 + 36);
        v29 = 0;
        if (!WebCore::inSameLine((WebCore *)(a3 + 24), (const WebCore::VisiblePosition *)&v26, v19))
          *(_BYTE *)(a3 + 40) = 0;
        v25 = v26;
        v26 = 0;
        if (v25)
        {
          if (*((_DWORD *)v25 + 6) == 2)
          {
            if ((*((_WORD *)v25 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v25, v18);
          }
          else
          {
            *((_DWORD *)v25 + 6) -= 2;
          }
        }
      }
    }
    WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)&v30, v18);
    goto LABEL_35;
  }
  while (1)
  {
    v6 = (WebCore::Node *)v38;
    if (v38)
      v38[6] += 2;
    v30 = v6;
    v31 = v39;
    v32 = v40;
    v33 = v41;
    WebCore::nextLinePosition((uint64_t)&v38, 0, 0, &v26);
    v8 = v26;
    v26 = 0;
    v9 = (uint64_t)v38;
    v38 = (unsigned int *)v8;
    if (!v9)
      goto LABEL_10;
    if (*(_DWORD *)(v9 + 24) != 2)
    {
      *(_DWORD *)(v9 + 24) -= 2;
LABEL_10:
      v39 = v27;
      v40 = v28;
      v41 = v29;
      goto LABEL_11;
    }
    if ((*(_WORD *)(v9 + 30) & 0x400) != 0)
      goto LABEL_10;
    WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
    v11 = v26;
    v39 = v27;
    v40 = v28;
    v41 = v29;
    v26 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v7);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
LABEL_11:
    if (!v38 || WebCore::operator==((uint64_t *)&v38, (uint64_t *)&v30))
      break;
    v10 = v30;
    v30 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v7);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    if (!--v5)
      goto LABEL_27;
  }
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  *(_BYTE *)(a3 + 40) = 1;
  v20 = v30;
  v30 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20, v7);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
LABEL_35:
  this = v38;
  v38 = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this, v7);
    }
    else
    {
      this[6] -= 2;
    }
  }
  return this;
}

uint64_t WebCore::AccessibilityNodeObject::isGenericFocusableElement(WebCore::AccessibilityNodeObject *this)
{
  uint64_t result;
  int v3;
  int v4;
  uint64_t v5;
  WebCore::Element *v6;
  BOOL IsEnabled;
  uint64_t v8;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 800))(this);
  if ((_DWORD)result)
  {
    if (((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 144))(this) & 1) != 0)
      return 0;
    v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
    if ((v3 & 0x7F) == 8 || *((unsigned __int8 *)this + 234) != 134)
      return 0;
    v4 = v3;
    v5 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 832))(this);
    IsEnabled = WebCore::AccessibilityObject::contentEditableAttributeIsEnabled(v5, v6);
    result = 0;
    if (v4 != 138 && !IsEnabled)
    {
      if (!(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this))
        return v4 != 114;
      v8 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
      if (!v8
        || (*(_WORD *)(v8 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        return v4 != 114;
      }
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::controlForLabelElement(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WebCore::Node *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  WebCore::Node *v9;

  if (((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 144))(this) & 1) != 0)
    return 0;
  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v2)
    return v2;
  while ((*(_WORD *)(v2 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2)
      return v2;
  }
  v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1488))(this);
  WebCore::HTMLLabelElement::control(v2, (uint64_t *)&v9);
  v5 = v9;
  if (!v9)
    return 0;
  if ((*((_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
LABEL_13:
    v2 = WebCore::AXObjectCache::getOrCreate(v3, (uint64_t)v9, 0);
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v7);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
    return v2;
  }
  if ((*(_BYTE *)((*((_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    v6 = *(_QWORD *)((*((_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v6 && *(_QWORD *)(v6 + 8))
      goto LABEL_13;
    v9 = 0;
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v4);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::siblingWithAriaRole(uint64_t result, char *__s)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unsigned __int8 *v12;
  size_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;

  if (result)
  {
    v2 = *(_QWORD *)(result + 80);
    if (!v2)
      return 0;
    result = 0;
    while ((*(_WORD *)(v2 + 28) & 8) == 0)
    {
      v2 = *(_QWORD *)(v2 + 56);
      if (!v2)
        return result;
    }
LABEL_8:
    v4 = *(_QWORD *)(v2 + 104);
    if (v4
      && ((v5 = *(unsigned int *)(v4 + 4), (v5 & 1) != 0)
        ? (v6 = *(_QWORD *)(v4 + 40), v7 = *(unsigned int *)(v4 + 52))
        : (v6 = v4 + 32, v7 = v5 >> 5),
          v7))
    {
      v8 = (uint64_t *)(v6 + 8);
      while (1)
      {
        v9 = *(v8 - 1);
        if (v9 == WebCore::HTMLNames::roleAttr
          || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
          && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
        {
          break;
        }
        v8 += 2;
        if (!--v7)
          goto LABEL_20;
      }
    }
    else
    {
LABEL_20:
      v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v10 = *v8;
    if (!*v8 || (!__s ? (v11 = 0) : (v11 = strlen(__s)), v11 != *(_DWORD *)(v10 + 4)))
    {
LABEL_25:
      while (1)
      {
        v2 = *(_QWORD *)(v2 + 56);
        if (!v2)
          return 0;
        if ((*(_WORD *)(v2 + 28) & 8) != 0)
          goto LABEL_8;
      }
    }
    v12 = *(unsigned __int8 **)(v10 + 8);
    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
    {
      if (v11)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v12) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                    + *__s))
          goto LABEL_25;
        v13 = 0;
        v14 = v12 + 1;
        while (v11 - 1 != v13)
        {
          v15 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v14[v13]);
          v16 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + __s[++v13]);
          if (v15 != v16)
            goto LABEL_34;
        }
      }
    }
    else if (v11)
    {
      if ((*(unsigned __int16 *)v12 | (32 * (*(unsigned __int16 *)v12 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *__s))
        goto LABEL_25;
      v17 = 1;
      do
      {
        v13 = v17;
        if (v11 == v17)
          break;
        v18 = *(unsigned __int16 *)&v12[2 * v17] | (32 * (*(unsigned __int16 *)&v12[2 * v17] - 65 < 0x1A));
        ++v17;
      }
      while (v18 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + __s[v13]));
LABEL_34:
      if (v13 < v11)
        goto LABEL_25;
    }
    return v2;
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::textAsLabelFor(WebCore::AccessibilityNodeObject *this, const WebCore::AccessibilityObject *a2, uint64_t a3)
{
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::Node *v17;
  uint64_t v18;
  WTF::StringBuilder *v19;
  __n128 v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v25;
  int v26;
  WTF::String *v27;
  float v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  char v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  char v44;
  WTF::StringImpl *v45;

  result = (uint64_t)WebCore::AccessibilityObject::getAttributeTrimmed(a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr, &v45);
  v7 = v45;
  if (v45 && *((_DWORD *)v45 + 1))
    goto LABEL_88;
  v7 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::altAttr);
  if (v7)
    *(_DWORD *)v7 += 2;
  result = (uint64_t)v45;
  v45 = v7;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
      v7 = v45;
      if (!v45)
        goto LABEL_8;
      goto LABEL_84;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v7)
    goto LABEL_8;
LABEL_84:
  if (*((_DWORD *)v7 + 1))
  {
LABEL_88:
    *(_QWORD *)this = v7;
    return result;
  }
LABEL_8:
  v7 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::titleAttr);
  if (v7)
    *(_DWORD *)v7 += 2;
  result = (uint64_t)v45;
  v45 = v7;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
      v7 = v45;
      if (!v45)
        goto LABEL_14;
      goto LABEL_87;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v7)
    goto LABEL_14;
LABEL_87:
  if (*((_DWORD *)v7 + 1))
    goto LABEL_88;
LABEL_14:
  if ((*(unsigned int (**)(const WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 2712))(a2))
  {
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 1;
    v10 = (*(uint64_t (**)(const WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)a2 + 1896))(a2, 1);
    v12 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD **)v10;
      v14 = *(_QWORD *)v10 + 8 * v12;
      do
      {
        if (*v13 != a3)
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v13 + 1456))(*v13) == 67)
          {
            (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)*v13 + 1928))(&v38);
            if (v40)
            {
              if (!v39)
                goto LABEL_43;
              v15 = v38;
              v16 = 8 * v39;
              do
              {
                v17 = (WebCore::Node *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v15 + 840))(*(_QWORD *)v15);
                WebCore::accessibleNameForNode((WTF::StringImpl *)&v37, v17, 0, v20, v18, v19);
                WebCore::appendNameToStringBuilder((uint64_t)&v41, (WTF::StringImpl *)&v37, 1);
                v21 = v37;
                v37 = 0;
                if (v21)
                {
                  if (*(_DWORD *)v21 == 2)
                    WTF::StringImpl::destroy(v21, v11);
                  else
                    *(_DWORD *)v21 -= 2;
                }
                v15 = (WTF::StringImpl *)((char *)v15 + 8);
                v16 -= 8;
              }
              while (v16);
              if (v40)
LABEL_43:
                WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v11);
            }
          }
          else
          {
            if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v13 + 1456))(*v13) == 19)
            {
              (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)*v13 + 1384))(&v38);
            }
            else
            {
              v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 1456))(*v13);
              if ((v22 - 101) <= 0x19 && ((1 << (v22 - 101)) & 0x3000001) != 0 || v22 == 19)
              {
                (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)*v13 + 1400))(&v38);
              }
              else
              {
                v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 1456))(*v13);
                if (v26 == 102 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v13 + 1456))(*v13) == 104)
                {
                  v27 = (WTF::String *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 896))(*v13);
                  WTF::String::number(v27, v28);
                }
                else
                {
                  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*v13
                                                                                                  + 1392))(&v38, *v13, 0x100010000, 0);
                }
              }
            }
            WebCore::appendNameToStringBuilder((uint64_t)&v41, (WTF::StringImpl *)&v38, 1);
            v25 = v38;
            v38 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v11);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
        }
        ++v13;
      }
      while (v13 != (_QWORD *)v14);
    }
    if (v43 < 0)
    {
      result = 268;
      __break(0xC471u);
      return result;
    }
    if (v43)
    {
      v29 = v41;
      if (v41
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v41),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v41),
            (v29 = v41) != 0))
      {
        *(_DWORD *)v29 += 2;
      }
      v37 = v29;
      WTF::String::trim();
      WTF::String::simplifyWhiteSpace();
      v31 = v38;
      v38 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v30);
        else
          *(_DWORD *)v31 -= 2;
      }
      v32 = v37;
      v37 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v30);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = v42;
      v42 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v30);
        else
          *(_DWORD *)v33 -= 2;
      }
      goto LABEL_75;
    }
    v34 = v42;
    v42 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v11);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = v41;
    v41 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v11);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, const WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 1400))(&v41, a2);
  if (!v41 || !*((_DWORD *)v41 + 1))
  {
    (*(void (**)(const WebCore::AccessibilityObject *, uint64_t, _QWORD))(*(_QWORD *)a2 + 1392))(a2, 0x100010000, 0);
LABEL_75:
    v36 = v41;
    v41 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v30);
      else
        *(_DWORD *)v36 -= 2;
    }
    goto LABEL_78;
  }
  *(_QWORD *)this = v41;
LABEL_78:
  result = (uint64_t)v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v30);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::appendNameToStringBuilder(uint64_t result, WTF::StringImpl *a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(v3 + 4))
    return result;
  v5 = result;
  if (a3)
  {
    v6 = *(unsigned __int8 **)(v3 + 8);
    v7 = (*(_BYTE *)(v3 + 16) & 4) != 0 ? *v6 : *(unsigned __int16 *)v6;
    if (v7 > 0xD || (v7 != 10 ? (v8 = v7 == 13) : (v8 = 1), !v8))
    {
      v9 = *(unsigned int *)(result + 16);
      if ((v9 & 0x80000000) != 0)
      {
        result = 268;
        __break(0xC471u);
        return result;
      }
      if ((_DWORD)v9)
      {
        v10 = v9 - 1;
        v12 = *(_QWORD *)result;
        v11 = *(_QWORD *)(result + 8);
        v13 = v11;
        if (!v11)
        {
          v13 = *(_QWORD *)result;
          if (!v12)
            goto LABEL_46;
        }
        if ((*(_BYTE *)(v13 + 16) & 4) == 0)
        {
          if (v12)
            v20 = *(_QWORD *)result;
          else
            v20 = *(_QWORD *)(result + 8);
          v15 = *(unsigned __int16 *)(*(_QWORD *)(v20 + 8) + 2 * v10);
LABEL_19:
          if (v15 > 0xD || (v15 != 10 ? (v16 = v15 == 13) : (v16 = 1), !v16))
          {
            if (!v11 || v9 >= *(_DWORD *)(v11 + 4) || v12)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              v17 = *(_DWORD *)(v11 + 16);
              v18 = *(_QWORD *)(v11 + 8);
              *(_DWORD *)(result + 16) = v9 + 1;
              if ((v17 & 4) != 0)
                *(_BYTE *)(v18 + v9) = 32;
              else
                *(_WORD *)(v18 + 2 * v9) = 32;
            }
            v3 = *(_QWORD *)a2;
          }
          goto LABEL_32;
        }
        v14 = *(_QWORD *)result;
        if (!v12)
        {
LABEL_46:
          v12 = 0;
          v14 = *(_QWORD *)(result + 8);
        }
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 8) + v10);
        goto LABEL_19;
      }
    }
  }
LABEL_32:
  if (*(_DWORD *)(v5 + 16) || *(_QWORD *)(v5 + 8))
  {
    if (v3 && (*(_BYTE *)(v3 + 16) & 4) == 0)
      return WTF::StringBuilder::append();
    else
      return WTF::StringBuilder::append();
  }
  else
  {
    if (v3)
      *(_DWORD *)v3 += 2;
    result = *(_QWORD *)v5;
    *(_QWORD *)v5 = v3;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    v19 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      LODWORD(v19) = *(_DWORD *)(v19 + 4);
    *(_DWORD *)(v5 + 16) = v19;
  }
  return result;
}

WTF::StringImpl *WebCore::accessibleNameForNode(WTF::StringImpl *this, WebCore::Node *a2, WebCore::Node *a3, __n128 a4, uint64_t a5, WTF::StringBuilder *a6)
{
  _QWORD *v8;
  __int16 v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD **v16;
  _DWORD **v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned __int8 v21;
  WebCore::AccessibilityObject *v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _DWORD **v31;
  _DWORD **v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  WTF::StringImpl *v53;
  unint64_t i;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WebCore::AXObjectCache *v84;
  uint64_t v85;
  uint64_t v86;
  int v88;
  void *v89;
  int v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  int v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  WebCore::Node *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  char v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  int v138;
  char v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  int v142;
  char v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;

  v8 = this;
  v9 = *((_WORD *)a2 + 14);
  if ((v9 & 8) != 0)
  {
    this = WebCore::Element::attributeTrimmedWithDefaultARIA(a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr, &v145);
    v10 = v145;
    if (!v145)
      goto LABEL_9;
  }
  else
  {
    v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v10 += 2;
    v145 = v10;
    if (!v10)
      goto LABEL_9;
  }
  if (*((_DWORD *)v10 + 1))
  {
    *v8 = v10;
    return this;
  }
LABEL_9:
  if ((v9 & 8) == 0)
    goto LABEL_21;
  v11 = *((_QWORD *)a2 + 13);
  if (!v11)
    goto LABEL_21;
  v12 = *(_DWORD *)(v11 + 4);
  if ((v12 & 1) == 0)
  {
    v13 = v11 + 32;
    v14 = v12 >> 5;
    if (v14)
      goto LABEL_13;
LABEL_21:
    v17 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_22;
  }
  v13 = *(_QWORD *)(v11 + 40);
  v14 = *(_DWORD *)(v11 + 52);
  if (!v14)
    goto LABEL_21;
LABEL_13:
  v15 = v14;
  v16 = (_DWORD **)(v13 + 8);
  v17 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  while (1)
  {
    v18 = (uint64_t)*(v16 - 1);
    if (v18 == WebCore::HTMLNames::altAttr
      || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
      && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
    {
      break;
    }
    v16 += 2;
    if (!--v15)
      goto LABEL_22;
  }
  v17 = v16;
LABEL_22:
  v19 = *v17;
  if (v19 && v19[1])
  {
    *v19 += 2;
    *v8 = v19;
    goto LABEL_96;
  }
  v20 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  v21 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v21 & 1) == 0)
    goto LABEL_24;
  v134 = v9;
  if (*(_BYTE *)(v20 + 3362) || *(_BYTE *)(v20 + 3405))
  {
    while (1)
    {
      v130 = *(_QWORD *)(v20 + 528);
      if (!v130)
        break;
      v131 = *(_QWORD *)(v130 + 8);
      if (!v131)
        break;
      v132 = *(_QWORD *)(v131 + 120);
      if (!v132)
        break;
      v133 = *(_QWORD *)(v132 + 8);
      if (!v133)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v133 + 40) + 8);
    }
  }
  else
  {
    v68 = *(_QWORD *)(v20 + 528);
    if (v68)
    {
      v69 = *(_QWORD *)(v68 + 8);
      if (v69)
      {
        v70 = *(_QWORD *)(*(_QWORD *)(v69 + 128) + 8);
        if (v70 && *(_BYTE *)(v70 + 144) == 0)
        {
          v72 = *(_QWORD *)(v70 + 296);
          if (v72)
            v20 = v72;
        }
      }
    }
  }
  *(_DWORD *)(v20 + 24) += 2;
  v140 = (WTF::StringImpl *)v20;
  if (*(_QWORD *)(v20 + 1944))
    v73 = *(_BYTE *)(v20 + 3405) == 0;
  else
    v73 = 0;
  if (!v73)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v140);
LABEL_24:
    if ((v9 & 8) == 0)
    {
      WebCore::Node::textContent(a2, 0, a6, &v136, a4);
      v22 = 0;
      v23 = 1;
      goto LABEL_26;
    }
    v22 = 0;
    v34 = 0;
    v23 = 1;
    goto LABEL_42;
  }
  v81 = *(_QWORD *)(v20 + 1488);
  if (v81)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v140);
  }
  else
  {
    v84 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v136 = WebCore::AXObjectCache::AXObjectCache(v84, (WebCore::Document *)v20);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)(v20 + 1488), &v136);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v136);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v81 = *(_QWORD *)(v20 + 1488);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v140);
    if (!v81)
      goto LABEL_24;
  }
  v85 = WebCore::AXObjectCache::getOrCreate(v81, (uint64_t)a2, 0);
  if (!v85)
    goto LABEL_24;
  v22 = (WebCore::AccessibilityObject *)v85;
  v86 = *(_QWORD *)(v85 + 8);
  if (__ldaxr((unsigned __int8 *)v86))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v86))
  {
    goto LABEL_217;
  }
  MEMORY[0x19AEA534C](v86);
LABEL_217:
  ++*(_QWORD *)(v86 + 8);
  v88 = __ldxr((unsigned __int8 *)v86);
  if (v88 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v86))
      goto LABEL_222;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v86);
LABEL_222:
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)v22 + 888))(&v144, v22);
  if (v144 && *((_DWORD *)v144 + 1))
  {
    *v8 = v144;
    goto LABEL_80;
  }
  LOBYTE(v140) = 0;
  LOBYTE(v142) = 0;
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v22 + 1456))(v22) != 67)
  {
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v22 + 1456))(v22) != 19)
      goto LABEL_293;
    v102 = (*(uint64_t (**)(WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)v22 + 1896))(v22, 1);
    v103 = *(unsigned int *)(v102 + 12);
    if (!(_DWORD)v103)
      goto LABEL_293;
    v104 = *(_QWORD **)v102;
    v105 = 8 * v103;
    while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v104 + 1456))(*v104) != 67)
    {
      ++v104;
      v105 -= 8;
      if (!v105)
        goto LABEL_293;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)*v104 + 1928))(&v136);
    v90 = v142;
    if (v142 != v138)
      goto LABEL_285;
    if (!(_BYTE)v142)
      goto LABEL_293;
    if (!HIDWORD(v141))
    {
LABEL_287:
      v117 = v140;
      if (v140)
      {
        v140 = 0;
        LODWORD(v141) = 0;
        WTF::fastFree(v117, v89);
      }
      v140 = v136;
      v118 = v137;
      v136 = 0;
      v137 = 0;
      v141 = v118;
      goto LABEL_291;
    }
    v106 = v140;
    v107 = 8 * HIDWORD(v141);
    while (1)
    {
      v108 = *(_QWORD *)v106;
      *(_QWORD *)v106 = 0;
      if (v108)
        break;
LABEL_282:
      v106 = (WTF::StringImpl *)((char *)v106 + 8);
      v107 -= 8;
      if (!v107)
        goto LABEL_287;
    }
    v109 = *(_QWORD *)(v108 + 8);
    if (__ldaxr((unsigned __int8 *)v109))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v109))
    {
      goto LABEL_270;
    }
    MEMORY[0x19AEA534C](v109);
LABEL_270:
    v111 = *(_QWORD *)(v109 + 8);
    v112 = v111 - 1;
    *(_QWORD *)(v109 + 8) = v111 - 1;
    if (v111 == 1)
    {
      v116 = *(_QWORD *)(v109 + 16);
      v113 = *(_QWORD *)(v109 + 24);
      *(_QWORD *)(v109 + 24) = 0;
      v114 = v116 != 0;
    }
    else
    {
      v113 = 0;
      v114 = 1;
    }
    v115 = __ldxr((unsigned __int8 *)v109);
    if (v115 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v109))
      {
LABEL_277:
        if (!v112)
        {
          if (v113)
            (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
          if (!v114)
            WTF::fastFree((WTF *)v109, v89);
        }
        goto LABEL_282;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v109);
    goto LABEL_277;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)v22 + 1928))(&v136, v22);
  v90 = v142;
  if (v142 == v138)
  {
    if (!(_BYTE)v142)
      goto LABEL_293;
    if (HIDWORD(v141))
    {
      v91 = v140;
      v92 = 8 * HIDWORD(v141);
      while (1)
      {
        v93 = *(_QWORD *)v91;
        *(_QWORD *)v91 = 0;
        if (v93)
          break;
LABEL_245:
        v91 = (WTF::StringImpl *)((char *)v91 + 8);
        v92 -= 8;
        if (!v92)
          goto LABEL_287;
      }
      v94 = *(_QWORD *)(v93 + 8);
      if (__ldaxr((unsigned __int8 *)v94))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v94))
      {
        goto LABEL_233;
      }
      MEMORY[0x19AEA534C](v94);
LABEL_233:
      v96 = *(_QWORD *)(v94 + 8);
      v97 = v96 - 1;
      *(_QWORD *)(v94 + 8) = v96 - 1;
      if (v96 == 1)
      {
        v101 = *(_QWORD *)(v94 + 16);
        v98 = *(_QWORD *)(v94 + 24);
        *(_QWORD *)(v94 + 24) = 0;
        v99 = v101 != 0;
      }
      else
      {
        v98 = 0;
        v99 = 1;
      }
      v100 = __ldxr((unsigned __int8 *)v94);
      if (v100 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v94))
        {
LABEL_240:
          if (!v97)
          {
            if (v98)
              (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
            if (!v99)
              WTF::fastFree((WTF *)v94, v89);
          }
          goto LABEL_245;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v94);
      goto LABEL_240;
    }
    goto LABEL_287;
  }
LABEL_285:
  if (v90)
  {
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v140, v89);
    LOBYTE(v142) = 0;
  }
  else
  {
    v140 = v136;
    v119 = v137;
    v136 = 0;
    v137 = 0;
    v141 = v119;
    LOBYTE(v142) = 1;
  }
LABEL_291:
  if ((_BYTE)v138)
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v136, v89);
LABEL_293:
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 1;
  if ((_BYTE)v142 && HIDWORD(v141))
  {
    v120 = v140;
    v121 = 8 * HIDWORD(v141);
    do
    {
      v122 = (WebCore::Node *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v120 + 840))(*(_QWORD *)v120);
      WebCore::accessibleNameForNode((WebCore *)&v135, v122, 0);
      WebCore::appendNameToStringBuilder((uint64_t)&v136, (WTF::StringImpl *)&v135, 1);
      v123 = v135;
      v135 = 0;
      if (v123)
      {
        if (*(_DWORD *)v123 == 2)
          WTF::StringImpl::destroy(v123, a2);
        else
          *(_DWORD *)v123 -= 2;
      }
      v120 = (WTF::StringImpl *)((char *)v120 + 8);
      v121 -= 8;
    }
    while (v121);
    v124 = v136;
    if (v136)
      goto LABEL_304;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v136);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v136);
  v124 = v136;
  if (v136)
  {
LABEL_304:
    v125 = *(_DWORD *)v124;
    *(_DWORD *)v124 += 2;
    *v8 = v124;
    if (*((_DWORD *)v124 + 1))
    {
      v126 = 0;
      goto LABEL_309;
    }
    *v8 = 0;
    if (v125)
      *(_DWORD *)v124 = v125;
    else
      WTF::StringImpl::destroy(v124, a2);
  }
  else
  {
    *v8 = 0;
  }
  v126 = 1;
LABEL_309:
  v127 = v137;
  v137 = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
      WTF::StringImpl::destroy(v127, a2);
    else
      *(_DWORD *)v127 -= 2;
  }
  v128 = v136;
  v136 = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
      WTF::StringImpl::destroy(v128, a2);
    else
      *(_DWORD *)v128 -= 2;
  }
  if ((_BYTE)v142)
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v140, a2);
  v129 = v144;
  v144 = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
    {
      WTF::StringImpl::destroy(v129, a2);
      if ((v126 & 1) == 0)
        goto LABEL_80;
      goto LABEL_321;
    }
    *(_DWORD *)v129 -= 2;
  }
  if ((v126 & 1) == 0)
    goto LABEL_80;
LABEL_321:
  v23 = 0;
  if ((v134 & 8) == 0)
  {
    LOBYTE(v9) = v134;
    goto LABEL_63;
  }
  v34 = 1;
  LOBYTE(v9) = v134;
LABEL_42:
  if ((*((_WORD *)a2 + 14) & 0x10) == 0)
    goto LABEL_62;
  v35 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
  if (v35 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    if (v35 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    {
      WebCore::HTMLOptionElement::value(a2, a2, v8);
      goto LABEL_79;
    }
LABEL_62:
    if ((v34 & 1) == 0)
    {
      WebCore::Element::innerText(a2, &v136);
LABEL_26:
      WTF::String::simplifyWhiteSpace();
      v24 = v140;
      v140 = 0;
      v25 = v136;
      v136 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, a2);
        else
          *(_DWORD *)v25 -= 2;
      }
      goto LABEL_29;
    }
LABEL_63:
    if (!WebCore::AccessibilityObject::accessibleNameDerivesFromContent(v22))
    {
      v24 = 0;
      goto LABEL_30;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *, uint64_t, WebCore::Node *))(*(_QWORD *)v22 + 1392))(&v140, v22, 0x100010102, a3);
    v24 = v140;
LABEL_29:
    if (v24 && *((_DWORD *)v24 + 1))
    {
      *v8 = v24;
      goto LABEL_79;
    }
LABEL_30:
    if ((v9 & 8) != 0)
    {
      v26 = *((_QWORD *)a2 + 13);
      if (v26)
      {
        v27 = *(_DWORD *)(v26 + 4);
        if ((v27 & 1) != 0)
        {
          v28 = *(_QWORD *)(v26 + 40);
          v29 = *(_DWORD *)(v26 + 52);
          if (v29)
          {
LABEL_34:
            v30 = v29;
            v31 = (_DWORD **)(v28 + 8);
            v32 = (_DWORD **)MEMORY[0x1E0CBF2F8];
            while (1)
            {
              v33 = (uint64_t)*(v31 - 1);
              if (v33 == WebCore::HTMLNames::titleAttr
                || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
                && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
              {
                break;
              }
              v31 += 2;
              if (!--v30)
                goto LABEL_68;
            }
            v32 = v31;
LABEL_68:
            v44 = *v32;
            if (v44 && v44[1])
            {
              *v44 += 2;
              *v8 = v44;
              goto LABEL_76;
            }
            if ((*((_WORD *)a2 + 14) & 0x10) != 0
              && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24)
              && a3 != 0)
            {
              v63 = **((_QWORD **)a2 + 5);
              if (v63 && (*(_WORD *)(v63 + 28) & 0x80) != 0)
              {
                v65 = *(_DWORD *)(v63 + 24);
                *(_DWORD *)(v63 + 24) = v65 + 2;
                v66 = *(_QWORD *)(v63 + 224);
                if (v66)
                {
                  v67 = (*(uint64_t (**)(uint64_t, WebCore::Node *, uint64_t))(*(_QWORD *)v66 + 24))(v66, a2, v63);
                  v65 = *(_DWORD *)(v63 + 24) - 2;
                }
                else
                {
                  v67 = 0;
                }
                if (v65)
                {
                  *(_DWORD *)(v63 + 24) = v65;
                }
                else if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v63, a2);
                }
                if (v67)
                {
                  v140 = 0;
                  v141 = 0;
                  v142 = 0;
                  v143 = 1;
                  v74 = *(unsigned int *)(v67 + 12);
                  if ((_DWORD)v74)
                  {
                    v75 = *(_QWORD *)v67;
                    v76 = 8 * v74;
                    do
                    {
                      WebCore::accessibleNameForNode((WebCore *)&v136, *(WebCore::Node **)(*(_QWORD *)v75 + 8), 0);
                      WebCore::appendNameToStringBuilder((uint64_t)&v140, (WTF::StringImpl *)&v136, 1);
                      v77 = v136;
                      v136 = 0;
                      if (v77)
                      {
                        if (*(_DWORD *)v77 == 2)
                          WTF::StringImpl::destroy(v77, a2);
                        else
                          *(_DWORD *)v77 -= 2;
                      }
                      v75 += 8;
                      v76 -= 8;
                    }
                    while (v76);
                    v78 = v140;
                    if (v140)
                      goto LABEL_193;
                  }
                  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v140);
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v140);
                  v78 = v140;
                  if (v140)
                  {
LABEL_193:
                    v79 = *(_DWORD *)v78;
                    *(_DWORD *)v78 += 2;
                    *v8 = v78;
                    if (*((_DWORD *)v78 + 1))
                    {
                      v80 = v141;
                      v141 = 0;
                      if (v80)
                      {
                        if (*(_DWORD *)v80 == 2)
                        {
                          WTF::StringImpl::destroy(v80, a2);
                          v78 = v140;
                          v140 = 0;
                          if (!v78)
                            goto LABEL_76;
LABEL_198:
                          if (*(_DWORD *)v78 == 2)
                            WTF::StringImpl::destroy(v78, a2);
                          else
                            *(_DWORD *)v78 -= 2;
                          goto LABEL_76;
                        }
                        *(_DWORD *)v80 -= 2;
                      }
                      v140 = 0;
                      goto LABEL_198;
                    }
                    *v8 = 0;
                    if (v79)
                      *(_DWORD *)v78 = v79;
                    else
                      WTF::StringImpl::destroy(v78, a2);
                  }
                  else
                  {
                    *v8 = 0;
                  }
                  v82 = v141;
                  v141 = 0;
                  if (v82)
                  {
                    if (*(_DWORD *)v82 == 2)
                      WTF::StringImpl::destroy(v82, a2);
                    else
                      *(_DWORD *)v82 -= 2;
                  }
                  v83 = v140;
                  v140 = 0;
                  if (v83)
                  {
                    if (*(_DWORD *)v83 == 2)
                      WTF::StringImpl::destroy(v83, a2);
                    else
                      *(_DWORD *)v83 -= 2;
                  }
                }
              }
            }
            *v8 = 0;
LABEL_76:
            if (!v24)
              goto LABEL_79;
            if (*(_DWORD *)v24 != 2)
            {
              *(_DWORD *)v24 -= 2;
              goto LABEL_79;
            }
            v53 = v24;
            goto LABEL_111;
          }
        }
        else
        {
          v28 = v26 + 32;
          v29 = v27 >> 5;
          if (v29)
            goto LABEL_34;
        }
      }
    }
    v32 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_68;
  }
  v36 = (_DWORD *)*((_QWORD *)a2 + 30);
  if (v36[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v36, &v136);
    goto LABEL_114;
  }
  v37 = (WTF::StringImpl *)*((_QWORD *)a2 + 27);
  if (v37)
  {
    *(_DWORD *)v37 += 2;
    v136 = v37;
    goto LABEL_114;
  }
  v38 = *((_QWORD *)a2 + 13);
  if (!v38)
    goto LABEL_104;
  v39 = *(_DWORD *)(v38 + 4);
  if ((v39 & 1) == 0)
  {
    v40 = v38 + 32;
    LODWORD(v41) = v39 >> 5;
    if ((_DWORD)v41)
      goto LABEL_49;
LABEL_104:
    v42 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_105;
  }
  v40 = *(_QWORD *)(v38 + 40);
  LODWORD(v41) = *(_DWORD *)(v38 + 52);
  if (!(_DWORD)v41)
    goto LABEL_104;
LABEL_49:
  v41 = v41;
  v42 = (_QWORD *)(v40 + 8);
  while (1)
  {
    v43 = *(v42 - 1);
    if (v43 == WebCore::HTMLNames::valueAttr
      || *(_QWORD *)(v43 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
      && *(_QWORD *)(v43 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
    {
      break;
    }
    v42 += 2;
    if (!--v41)
    {
      v42 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_105:
  if (*v42)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v36 + 296))(&v136);
    if (v136)
      goto LABEL_114;
    v136 = 0;
    v36 = (_DWORD *)*((_QWORD *)a2 + 30);
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v36 + 64))(&v136);
LABEL_114:
  if (*(_DWORD *)(*((_QWORD *)a2 + 30) + 12) != 2048)
  {
    *v8 = v136;
    goto LABEL_79;
  }
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v143 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v140);
  for (i = 0; ; ++i)
  {
    v55 = v136;
    if (v136)
      v55 = (WTF::StringImpl *)*((unsigned int *)v136 + 1);
    if (i >= (unint64_t)v55)
      break;
    WTF::String::fromUTF8();
    v56 = v144;
    if (!v142 && !v141)
    {
      if (v144)
        *(_DWORD *)v144 += 2;
      v57 = v140;
      v140 = v56;
      if (v57)
      {
        if (*(_DWORD *)v57 != 2)
        {
          *(_DWORD *)v57 -= 2;
          goto LABEL_126;
        }
        WTF::StringImpl::destroy(v57, a2);
        v56 = v144;
        if (!v144)
        {
LABEL_128:
          v142 = (int)v56;
          goto LABEL_129;
        }
      }
      else
      {
LABEL_126:
        if (!v56)
          goto LABEL_128;
      }
      LODWORD(v56) = *((_DWORD *)v56 + 1);
      goto LABEL_128;
    }
    if (v144 && (*((_BYTE *)v144 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
LABEL_129:
    v58 = v144;
    v144 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, a2);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v140;
  if (v140
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v140),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v140),
        (v59 = v140) != 0))
  {
    *(_DWORD *)v59 += 2;
  }
  *v8 = v59;
  v60 = v141;
  v141 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, a2);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = v140;
  v140 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, a2);
    else
      *(_DWORD *)v61 -= 2;
  }
  v53 = v136;
  v136 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 != 2)
    {
      *(_DWORD *)v53 -= 2;
      goto LABEL_79;
    }
LABEL_111:
    WTF::StringImpl::destroy(v53, a2);
  }
LABEL_79:
  if ((v23 & 1) != 0)
    goto LABEL_96;
LABEL_80:
  v46 = *((_QWORD *)v22 + 1);
  if (__ldaxr((unsigned __int8 *)v46))
  {
    __clrex();
    goto LABEL_83;
  }
  if (__stxr(1u, (unsigned __int8 *)v46))
LABEL_83:
    MEMORY[0x19AEA534C](v46);
  v48 = *(_QWORD *)(v46 + 8);
  v49 = v48 - 1;
  *(_QWORD *)(v46 + 8) = v48 - 1;
  if (v48 == 1)
  {
    v62 = *(_QWORD *)(v46 + 16);
    v50 = *(_QWORD *)(v46 + 24);
    *(_QWORD *)(v46 + 24) = 0;
    v51 = v62 != 0;
  }
  else
  {
    v50 = 0;
    v51 = 1;
  }
  v52 = __ldxr((unsigned __int8 *)v46);
  if (v52 != 1)
  {
    __clrex();
LABEL_91:
    WTF::Lock::unlockSlow((WTF::Lock *)v46);
    if (!v49)
      goto LABEL_92;
    goto LABEL_96;
  }
  if (__stlxr(0, (unsigned __int8 *)v46))
    goto LABEL_91;
  if (!v49)
  {
LABEL_92:
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    if (!v51)
      WTF::fastFree((WTF *)v46, a2);
  }
LABEL_96:
  this = v145;
  v145 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::isHTMLSpaceButNotLineBreak(unsigned int a1)
{
  _BOOL4 v2;
  int v3;
  unsigned int v4;

  v2 = a1 != 10 && a1 != 13;
  v3 = a1 > 0xD || v2;
  if (((1 << a1) & 0x100003600) != 0)
    v4 = v3;
  else
    v4 = 0;
  if (a1 <= 0x20)
    return v4;
  else
    return 0;
}

WTF::StringImpl *WebCore::AccessibilityNodeObject::textForLabelElements(WTF::StringImpl **a1, const WebCore::AccessibilityObject *a2, uint64_t a3)
{
  uint64_t *v6;
  WebCore::Node *v7;
  unsigned int **v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  uint64_t v21;
  WebCore::Node **v22;
  uint64_t v23;
  uint64_t v24;
  const WebCore::AccessibilityObject *v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  WTF::StringBuilder *v30;
  __n128 v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  char v47;

  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 1;
  v6 = (uint64_t *)(*(uint64_t (**)(const WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 1488))(a2);
  if (v6)
  {
    v8 = (unsigned int **)v6;
    v9 = *v6;
    if (*v6)
      goto LABEL_83;
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v8;
    v10 = *v8;
    *v8 = (unsigned int *)v9;
    if (!v10)
      goto LABEL_83;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v7);
    }
    v9 = (uint64_t)*v8;
    if (*v8)
    {
LABEL_83:
      do
        v13 = __ldaxr((unsigned int *)v9);
      while (__stlxr(v13 + 1, (unsigned int *)v9));
    }
  }
  else
  {
    v9 = 0;
  }
  v14 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v14)
    v15 = v9 == 0;
  else
    v15 = 1;
  if (v15)
    goto LABEL_16;
  v21 = *(_QWORD *)(v9 + 8);
  if (!v21)
    goto LABEL_16;
  v22 = *(WebCore::Node ***)a3;
  v23 = 8 * v14 - 8;
LABEL_32:
  v7 = *v22;
  if (!*v22)
    goto LABEL_73;
  v24 = WebCore::AXObjectCache::getOrCreate(v21, (uint64_t)v7, 0);
  if (!v24)
    goto LABEL_73;
  v25 = (const WebCore::AccessibilityObject *)v24;
  v26 = *(_QWORD *)(v24 + 8);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_38;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_38:
  ++*(_QWORD *)(v26 + 8);
  v28 = __ldxr((unsigned __int8 *)v26);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
  if (v25 == a2)
  {
    WebCore::AccessibilityNodeObject::textAsLabelFor((WebCore::AccessibilityNodeObject *)&v43, a2, (uint64_t)a2);
LABEL_53:
    WebCore::appendNameToStringBuilder((uint64_t)&v44, (WTF::StringImpl *)&v43, 1);
    goto LABEL_54;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, const WebCore::AccessibilityObject *))(*(_QWORD *)v25 + 3000))(&v43, v25);
  if (v43 && *((_DWORD *)v43 + 1))
    goto LABEL_53;
  if ((*(unsigned int (**)(const WebCore::AccessibilityObject *))(*(_QWORD *)v25 + 2712))(v25))
    WebCore::AccessibilityNodeObject::textAsLabelFor((WebCore::AccessibilityNodeObject *)&v42, v25, (uint64_t)a2);
  else
    WebCore::accessibleNameForNode((WTF::StringImpl *)&v42, *v22, 0, v31, v29, v30);
  WebCore::appendNameToStringBuilder((uint64_t)&v44, (WTF::StringImpl *)&v42, 1);
  v32 = v42;
  v42 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v7);
    else
      *(_DWORD *)v32 -= 2;
  }
LABEL_54:
  v33 = v43;
  v43 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v7);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = *((_QWORD *)v25 + 1);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_61;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_61:
  v36 = *(_QWORD *)(v34 + 8);
  v37 = v36 - 1;
  *(_QWORD *)(v34 + 8) = v36 - 1;
  if (v36 == 1)
  {
    v41 = *(_QWORD *)(v34 + 16);
    v38 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v34 + 24) = 0;
    v39 = v41 != 0;
  }
  else
  {
    v38 = 0;
    v39 = 1;
  }
  v40 = __ldxr((unsigned __int8 *)v34);
  if (v40 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v34))
    {
      if (v37)
        goto LABEL_73;
      goto LABEL_69;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v34);
  if (v37)
    goto LABEL_73;
LABEL_69:
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (!v39)
    WTF::fastFree((WTF *)v34, v7);
LABEL_73:
  while (v23)
  {
    ++v22;
    v21 = *(_QWORD *)(v9 + 8);
    v23 -= 8;
    if (v21)
      goto LABEL_32;
  }
LABEL_16:
  v16 = v44;
  if (v44
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v44),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v44),
        (v16 = v44) != 0))
  {
    *(_DWORD *)v16 += 2;
  }
  *a1 = v16;
  if (v9)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v9);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v9));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v9);
      WTF::fastFree((WTF *)v9, v7);
    }
  }
  v19 = v45;
  v45 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v7);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::AccessibilityNodeObject::labelText(const WebCore::AccessibilityObject *a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v5;
  unint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::Node *v15;
  unint64_t v16;
  void *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  WebCore::Node *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  _QWORD *v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  WebCore::Node *v61;

  result = (unsigned int *)(*(uint64_t (**)(const WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 832))(a1);
  if (result)
  {
    v5 = result;
    result[6] += 2;
    v59 = 0;
    v60 = 0;
    (*(void (**)(_QWORD **__return_ptr, const WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)a1 + 984))(&v57, a1, 15);
    v6 = v58;
    if (!v58)
    {
      WebCore::Accessibility::labelsForElement((unsigned int *)&v55, (WebCore::Element *)v5);
      goto LABEL_50;
    }
    v56 = 0;
    if (v58 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      LODWORD(v56) = v58;
      v55 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v58));
      if (v58)
      {
        v8 = v57;
        v9 = 8 * v58;
        do
        {
          v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 832))(*v8);
          if (v10 && (*(_WORD *)(v10 + 28) & 0x10) != 0)
          {
            *(_DWORD *)(v10 + 24) += 2;
            v61 = (WebCore::Node *)v10;
            LODWORD(v11) = HIDWORD(v56);
            if (HIDWORD(v56) == (_DWORD)v56)
            {
              v12 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v55, HIDWORD(v56) + 1, (unint64_t)&v61);
              v11 = HIDWORD(v56);
              v13 = v55;
              v14 = *(_QWORD *)v12;
              *(_QWORD *)v12 = 0;
              *((_QWORD *)v13 + v11) = v14;
            }
            else
            {
              v61 = 0;
              *((_QWORD *)v55 + HIDWORD(v56)) = v10;
            }
            HIDWORD(v56) = v11 + 1;
            v15 = v61;
            v61 = 0;
            if (v15)
            {
              if (*((_DWORD *)v15 + 6) == 2)
              {
                if ((*((_WORD *)v15 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v15, v7);
              }
              else
              {
                *((_DWORD *)v15 + 6) -= 2;
              }
            }
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
        v6 = v56;
        v16 = HIDWORD(v56);
      }
      else
      {
        v16 = 0;
      }
      if (v16 >= v6)
        goto LABEL_37;
      v18 = HIDWORD(v56);
      v19 = v55;
      if (v16 < HIDWORD(v56))
      {
        v20 = (uint64_t *)((char *)v55 + 8 * v16);
        v21 = 8 * HIDWORD(v56) - 8 * v16;
        do
        {
          v22 = *v20;
          *v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)(v22 + 24) == 2)
            {
              if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v22, v7);
            }
            else
            {
              *(_DWORD *)(v22 + 24) -= 2;
            }
          }
          ++v20;
          v21 -= 8;
        }
        while (v21);
        HIDWORD(v56) = v16;
        v19 = v55;
        v18 = v16;
      }
      if (!v16)
        goto LABEL_36;
      if ((_DWORD)v56)
      {
        LODWORD(v56) = v16;
        v55 = (WTF::StringImpl *)WTF::fastRealloc(v19, (void *)(8 * v16));
LABEL_37:
        if (HIDWORD(v56))
        {
          if (HIDWORD(v56) <= 0x10)
            v24 = 16;
          else
            v24 = HIDWORD(v56);
          if (v24 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195603FE8);
          }
          v25 = WTF::fastMalloc((WTF *)(8 * v24));
          v26 = (WTF *)v25;
          LODWORD(v60) = v24;
          v59 = (WTF::StringImpl *)v25;
          if (HIDWORD(v56))
          {
            v27 = 0;
            v28 = v55;
            v29 = 8 * HIDWORD(v56);
            do
            {
              v30 = *((_QWORD *)v28 + v27);
              *((_QWORD *)v28 + v27) = 0;
              *(_QWORD *)(v25 + 8 * v27++) = v30;
              v29 -= 8;
            }
            while (v29);
            HIDWORD(v60) = v27;
            WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v7);
            if ((_DWORD)v27)
            {
LABEL_51:
              WebCore::AccessibilityNodeObject::textForLabelElements(&v61, a1, (uint64_t)&v59);
              v33 = v61;
              if (v61 && *((_DWORD *)v61 + 1))
              {
                if ((*(unsigned int (**)(const WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 2976))(a1) == 81
                  || (v42 = (*(uint64_t (**)(const WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 848))(a1)) != 0
                  && *(_BYTE *)(v42 + 46) == 23)
                {
                  v43 = 0;
                }
                else
                {
                  v43 = 7;
                }
                *(_DWORD *)v33 += 2;
                v55 = v33;
                LODWORD(v56) = v43;
                v47 = *(unsigned int *)(a2 + 12);
                if ((_DWORD)v47 == *(_DWORD *)(a2 + 8))
                {
                  v48 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v47 + 1, (unint64_t)&v55);
                  v49 = *(unsigned int *)(a2 + 12);
                  v50 = *(_QWORD *)a2 + 16 * v49;
                  v51 = *(_QWORD *)v48;
                  *(_QWORD *)v48 = 0;
                  *(_QWORD *)v50 = v51;
                  *(_DWORD *)(v50 + 8) = *(_DWORD *)(v48 + 8);
                  v52 = v55;
                  *(_DWORD *)(a2 + 12) = v49 + 1;
                  v55 = 0;
                  if (v52)
                  {
                    if (*(_DWORD *)v52 == 2)
                      WTF::StringImpl::destroy(v52, v34);
                    else
                      *(_DWORD *)v52 -= 2;
                  }
                }
                else
                {
                  v53 = *(_QWORD *)a2 + 16 * v47;
                  *(_QWORD *)v53 = v33;
                  *(_DWORD *)(v53 + 8) = v43;
                  *(_DWORD *)(a2 + 12) = v47 + 1;
                }
                goto LABEL_69;
              }
              WebCore::AccessibilityObject::getAttributeTrimmed(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr, &v54);
              v35 = v54;
              if (v54)
              {
                if (*((_DWORD *)v54 + 1))
                {
                  *(_DWORD *)v54 += 2;
                  v55 = v35;
                  LODWORD(v56) = 7;
                  v36 = *(unsigned int *)(a2 + 12);
                  if ((_DWORD)v36 == *(_DWORD *)(a2 + 8))
                  {
                    v37 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v36 + 1, (unint64_t)&v55);
                    v38 = *(unsigned int *)(a2 + 12);
                    v39 = *(_QWORD *)a2 + 16 * v38;
                    v40 = *(_QWORD *)v37;
                    *(_QWORD *)v37 = 0;
                    *(_QWORD *)v39 = v40;
                    *(_DWORD *)(v39 + 8) = *(_DWORD *)(v37 + 8);
                    v41 = v55;
                    *(_DWORD *)(a2 + 12) = v38 + 1;
                    v55 = 0;
                    if (v41)
                    {
                      if (*(_DWORD *)v41 == 2)
                        WTF::StringImpl::destroy(v41, v34);
                      else
                        *(_DWORD *)v41 -= 2;
                    }
                  }
                  else
                  {
                    v44 = *(_QWORD *)a2 + 16 * v36;
                    *(_QWORD *)v44 = v35;
                    *(_DWORD *)(v44 + 8) = 7;
                    *(_DWORD *)(a2 + 12) = v36 + 1;
                  }
                  v35 = v54;
                  v54 = 0;
                  if (!v35)
                    goto LABEL_68;
                }
                else
                {
                  v54 = 0;
                }
                if (*(_DWORD *)v35 == 2)
                {
                  WTF::StringImpl::destroy(v35, v34);
                  if (v33)
                  {
LABEL_69:
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, v34);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
LABEL_71:
                  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v34);
                  result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v45);
                  if (v5[6] == 2)
                  {
                    if ((*((_WORD *)v5 + 15) & 0x400) == 0)
                      return WebCore::Node::removedLastRef((WebCore::Node *)v5, v46);
                  }
                  else
                  {
                    v5[6] -= 2;
                  }
                  return result;
                }
                *(_DWORD *)v35 -= 2;
              }
LABEL_68:
              if (v33)
                goto LABEL_69;
              goto LABEL_71;
            }
            WebCore::Accessibility::labelsForElement((unsigned int *)&v55, (WebCore::Element *)v5);
            goto LABEL_49;
          }
        }
        else
        {
          v26 = 0;
        }
        WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v7);
        WebCore::Accessibility::labelsForElement((unsigned int *)&v55, (WebCore::Element *)v5);
        if (v26)
        {
LABEL_49:
          v59 = 0;
          LODWORD(v60) = 0;
          WTF::fastFree(v26, v17);
        }
LABEL_50:
        v59 = v55;
        v31 = v56;
        v32 = HIDWORD(v56);
        v55 = 0;
        v56 = 0;
        v60 = __PAIR64__(v32, v31);
        WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v17);
        goto LABEL_51;
      }
      if (!(v16 >> 29))
      {
        v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v16));
        LODWORD(v56) = v16;
        v55 = v23;
        if (v23 != v19)
          memcpy(v23, v19, 8 * v18);
LABEL_36:
        if (v19)
        {
          if (v55 == v19)
          {
            v55 = 0;
            LODWORD(v56) = 0;
          }
          WTF::fastFree(v19, v7);
        }
        goto LABEL_37;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x195603FE0);
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::alternativeText(WebCore::AccessibilityObject *a1, uint64_t a2)
{
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _BOOL4 v39;
  uint64_t v41;
  int *v42;
  int v43;
  int v44;
  const WTF::StringImpl **Attribute;
  const WTF::StringImpl *v46;
  char v47;
  int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  WTF::StringImpl **v82;
  unsigned int v83;
  WTF::StringImpl **v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WebCore::AccessibilityObject *v93;
  WebCore::AccessibilityObject *v94;
  WebCore::Node *v95;
  uint64_t v96;
  WTF::StringBuilder *v97;
  __n128 v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringBuilder *v114;
  __n128 v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  int v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WebCore::AccessibilityObject *v140;
  WebCore::AccessibilityObject *v141;
  WebCore::Node *v142;
  uint64_t v143;
  WTF::StringBuilder *v144;
  __n128 v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  int v164;
  WTF::StringImpl *v165;

  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1456))(a1) != 138)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 3000))(&v165, a1);
    v14 = v165;
    if (v165)
    {
      if (!*((_DWORD *)v165 + 1))
      {
        v165 = 0;
LABEL_55:
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
        goto LABEL_57;
      }
      *(_DWORD *)v165 += 2;
      v163 = v14;
      v164 = 0;
      v15 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v15 == *(_DWORD *)(a2 + 8))
      {
        v16 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v15 + 1, (unint64_t)&v163);
        v17 = *(unsigned int *)(a2 + 12);
        v18 = *(_QWORD *)a2 + 16 * v17;
        v19 = *(_QWORD *)v16;
        *(_QWORD *)v16 = 0;
        *(_QWORD *)v18 = v19;
        *(_DWORD *)(v18 + 8) = *(_DWORD *)(v16 + 8);
        v20 = v163;
        *(_DWORD *)(a2 + 12) = v17 + 1;
        v163 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v13);
          else
            *(_DWORD *)v20 -= 2;
        }
      }
      else
      {
        v36 = *(_QWORD *)a2 + 16 * v15;
        *(_QWORD *)v36 = v14;
        *(_DWORD *)(v36 + 8) = 0;
        *(_DWORD *)(a2 + 12) = v15 + 1;
      }
      v14 = v165;
      v165 = 0;
      if (v14)
        goto LABEL_55;
    }
LABEL_57:
    WebCore::AccessibilityObject::getAttributeTrimmed(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr, &v165);
    v38 = v165;
    if (v165 && *((_DWORD *)v165 + 1))
    {
      *(_DWORD *)v165 += 2;
      v163 = v38;
      v164 = 0;
      v55 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v55 == *(_DWORD *)(a2 + 8))
      {
        v56 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v55 + 1, (unint64_t)&v163);
        v55 = *(unsigned int *)(a2 + 12);
        v57 = *(_QWORD *)a2 + 16 * v55;
        v58 = *(_QWORD *)v56;
        *(_QWORD *)v56 = 0;
        *(_QWORD *)v57 = v58;
        *(_DWORD *)(v57 + 8) = *(_DWORD *)(v56 + 8);
      }
      else
      {
        v75 = *(_QWORD *)a2;
        v163 = 0;
        v76 = v75 + 16 * v55;
        *(_QWORD *)v76 = v38;
        *(_DWORD *)(v76 + 8) = 0;
      }
      *(_DWORD *)(a2 + 12) = v55 + 1;
      v77 = v163;
      v163 = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v37);
        else
          *(_DWORD *)v77 -= 2;
      }
    }
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1456))(a1) == 49
      || ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 136))(a1) & 1) != 0)
    {
      goto LABEL_60;
    }
    v59 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 840))(a1);
    if (v59 && (*(_WORD *)(v59 + 28) & 0x10) != 0)
    {
      v61 = *(_QWORD *)(*(_QWORD *)(v59 + 96) + 24);
      if (v61 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
        || v61 == *(_QWORD *)(WebCore::HTMLNames::appletTag + 24)
        || v61 == *(_QWORD *)(WebCore::HTMLNames::embedTag + 24)
        || v61 == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
      {
        goto LABEL_60;
      }
      if (v61 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        v62 = *(_DWORD *)(v59 + 24);
        *(_DWORD *)(v59 + 24) = v62 + 2;
        v63 = *(_DWORD *)(*(_QWORD *)(v59 + 240) + 12);
        if (v62)
        {
          *(_DWORD *)(v59 + 24) = v62;
        }
        else if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v59, v60);
        }
        if (v63 == 256)
          goto LABEL_60;
      }
    }
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1456))(a1) == 11)
    {
LABEL_60:
      v39 = 1;
    }
    else if ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 840))(a1))
    {
      v64 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 840))(a1);
      v39 = 0;
      if (v64 && (*(_WORD *)(v64 + 28) & 0x10) != 0)
        v39 = *(_QWORD *)(*(_QWORD *)(v64 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24);
    }
    else
    {
      v39 = 0;
    }
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1456))(a1) == 82 || v39)
    {
      v41 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 848))(a1);
      if (v41)
      {
        if ((((*(_BYTE *)(v41 + 52) & 7) == 3) & *(_BYTE *)(v41 + 53)) == 1)
        {
          v42 = *(int **)(v41 + 216);
          if (v42)
          {
            v43 = v42[1];
            v44 = *v42 + 2;
            *v42 = v44;
            if (v43)
            {
              Attribute = (const WTF::StringImpl **)WebCore::AccessibilityObject::getAttribute(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::titleAttr);
              v47 = WTF::equal((WTF *)v42, *Attribute, v46);
              v44 = *v42;
              if ((v47 & 1) == 0)
              {
                *v42 = v44 + 2;
                v163 = (WTF::StringImpl *)v42;
                v164 = 0;
                v69 = *(unsigned int *)(a2 + 12);
                if ((_DWORD)v69 == *(_DWORD *)(a2 + 8))
                {
                  v70 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v69 + 1, (unint64_t)&v163);
                  v71 = *(unsigned int *)(a2 + 12);
                  v72 = *(_QWORD *)a2 + 16 * v71;
                  v73 = *(_QWORD *)v70;
                  *(_QWORD *)v70 = 0;
                  *(_QWORD *)v72 = v73;
                  *(_DWORD *)(v72 + 8) = *(_DWORD *)(v70 + 8);
                  v74 = v163;
                  *(_DWORD *)(a2 + 12) = v71 + 1;
                  v163 = 0;
                  if (v74)
                  {
                    if (*(_DWORD *)v74 == 2)
                      WTF::StringImpl::destroy(v74, v5);
                    else
                      *(_DWORD *)v74 -= 2;
                  }
                }
                else
                {
                  v91 = *(_QWORD *)a2 + 16 * v69;
                  *(_QWORD *)v91 = v42;
                  *(_DWORD *)(v91 + 8) = 0;
                  *(_DWORD *)(a2 + 12) = v69 + 1;
                }
                if (*v42 != 2)
                {
                  *v42 -= 2;
                  goto LABEL_223;
                }
                v107 = (WTF::StringImpl *)v42;
                goto LABEL_228;
              }
            }
            v48 = v44 - 2;
            if (v48)
              *v42 = v48;
            else
              WTF::StringImpl::destroy((WTF::StringImpl *)v42, v5);
          }
        }
      }
      v50 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::altAttr);
      if (v50 && *((_DWORD *)v50 + 1))
      {
        *(_DWORD *)v50 += 2;
        v163 = v50;
        v164 = 0;
        v65 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v65 == *(_DWORD *)(a2 + 8))
        {
          v66 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v65 + 1, (unint64_t)&v163);
          v65 = *(unsigned int *)(a2 + 12);
          v67 = *(_QWORD *)a2 + 16 * v65;
          v68 = *(_QWORD *)v66;
          *(_QWORD *)v66 = 0;
          *(_QWORD *)v67 = v68;
          *(_DWORD *)(v67 + 8) = *(_DWORD *)(v66 + 8);
        }
        else
        {
          v104 = *(_QWORD *)a2;
          v163 = 0;
          v105 = v104 + 16 * v65;
          *(_QWORD *)v105 = v50;
          *(_DWORD *)(v105 + 8) = 0;
        }
        *(_DWORD *)(a2 + 12) = v65 + 1;
        v106 = v163;
        v163 = 0;
        if (v106)
        {
          if (*(_DWORD *)v106 == 2)
            WTF::StringImpl::destroy(v106, v49);
          else
            *(_DWORD *)v106 -= 2;
        }
      }
    }
    v51 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 840))(a1);
    if (!v51)
      goto LABEL_223;
    v52 = v51;
    v53 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1488))(a1);
    if ((*(_WORD *)(v52 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v52 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
    {
      *(_DWORD *)(v52 + 24) += 2;
      if (v53)
      {
        v54 = *(_QWORD *)(v52 + 80);
        if (v54)
        {
          while ((*(_WORD *)(v54 + 28) & 0x10) == 0
               || *(_QWORD *)(*(_QWORD *)(v54 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
          {
            v54 = *(_QWORD *)(v54 + 56);
            if (!v54)
              goto LABEL_180;
          }
          v92 = WebCore::AXObjectCache::getOrCreate(v53, v54, 0);
          if (v92)
          {
            v93 = (WebCore::AccessibilityObject *)v92;
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 552))(v92) & 1) != 0)
            {
LABEL_153:
              if (!WebCore::AccessibilityObject::isDOMHidden(v93))
              {
                v95 = (WebCore::Node *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v93 + 840))(v93);
                WebCore::accessibleNameForNode((WTF::StringImpl *)&v162, v95, 0, v98, v96, v97);
                v99 = v162;
                if (v162)
                  *(_DWORD *)v162 += 2;
                v163 = v99;
                v164 = 0;
                v100 = *(unsigned int *)(a2 + 12);
                if ((_DWORD)v100 == *(_DWORD *)(a2 + 8))
                {
                  v101 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v100 + 1, (unint64_t)&v163);
                  v100 = *(unsigned int *)(a2 + 12);
                  v102 = *(_QWORD *)a2 + 16 * v100;
                  v103 = *(_QWORD *)v101;
                  *(_QWORD *)v101 = 0;
                  *(_QWORD *)v102 = v103;
                  *(_DWORD *)(v102 + 8) = *(_DWORD *)(v101 + 8);
                }
                else
                {
                  v108 = *(_QWORD *)a2;
                  v163 = 0;
                  v109 = v108 + 16 * v100;
                  *(_QWORD *)v109 = v99;
                  *(_DWORD *)(v109 + 8) = 0;
                }
                *(_DWORD *)(a2 + 12) = v100 + 1;
                v110 = v163;
                v163 = 0;
                if (v110)
                {
                  if (*(_DWORD *)v110 == 2)
                    WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v54);
                  else
                    *(_DWORD *)v110 -= 2;
                }
                v111 = v162;
                v162 = 0;
                if (v111)
                {
                  if (*(_DWORD *)v111 == 2)
                    WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v54);
                  else
                    *(_DWORD *)v111 -= 2;
                }
              }
            }
            else
            {
              v94 = v93;
              while (!WebCore::AccessibilityObject::isARIAHidden(v94))
              {
                v94 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v94 + 1232))(v94);
                if (!v94)
                  goto LABEL_153;
              }
            }
          }
        }
      }
LABEL_180:
      if (*(_DWORD *)(v52 + 24) == 2)
      {
        if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v52, (void *)v54);
      }
      else
      {
        *(_DWORD *)(v52 + 24) -= 2;
      }
    }
    v112 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 840))(a1);
    if (v112)
    {
      if ((*(_WORD *)(v112 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v112 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::figureTag + 24))
      {
        v124 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 840))(a1);
        if (v124)
        {
          if ((*(_WORD *)(v124 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v124 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::figureTag + 24))
          {
            v125 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1488))(a1);
            if (v125)
            {
              v126 = v125;
              v127 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 840))(a1);
              if (v127)
              {
                if ((*(_WORD *)(v127 + 28) & 4) != 0)
                {
                  v128 = *(_QWORD *)(v127 + 80);
                  if (v128)
                  {
                    while ((*(_WORD *)(v128 + 28) & 0x10) == 0
                         || *(_QWORD *)(*(_QWORD *)(v128 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::figcaptionTag
                                                                                    + 24))
                    {
                      v128 = *(_QWORD *)(v128 + 56);
                      if (!v128)
                        goto LABEL_185;
                    }
                    v139 = WebCore::AXObjectCache::getOrCreate(v126, v128, 0);
                    if (v139)
                    {
                      v140 = (WebCore::AccessibilityObject *)v139;
                      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 552))(v139) & 1) != 0)
                      {
LABEL_240:
                        if (!WebCore::AccessibilityObject::isDOMHidden(v140))
                        {
                          v142 = (WebCore::Node *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v140 + 840))(v140);
                          WebCore::accessibleNameForNode((WTF::StringImpl *)&v162, v142, 0, v145, v143, v144);
                          v147 = v162;
                          if (v162)
                            *(_DWORD *)v162 += 2;
                          v163 = v147;
                          v164 = 0;
                          v148 = *(unsigned int *)(a2 + 12);
                          if ((_DWORD)v148 == *(_DWORD *)(a2 + 8))
                          {
                            v149 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v148 + 1, (unint64_t)&v163);
                            v148 = *(unsigned int *)(a2 + 12);
                            v150 = *(_QWORD *)a2 + 16 * v148;
                            v151 = *(_QWORD *)v149;
                            *(_QWORD *)v149 = 0;
                            *(_QWORD *)v150 = v151;
                            *(_DWORD *)(v150 + 8) = *(_DWORD *)(v149 + 8);
                          }
                          else
                          {
                            v152 = *(_QWORD *)a2;
                            v163 = 0;
                            v153 = v152 + 16 * v148;
                            *(_QWORD *)v153 = v147;
                            *(_DWORD *)(v153 + 8) = 0;
                          }
                          *(_DWORD *)(a2 + 12) = v148 + 1;
                          v154 = v163;
                          v163 = 0;
                          if (v154)
                          {
                            if (*(_DWORD *)v154 == 2)
                              WTF::StringImpl::destroy(v154, v146);
                            else
                              *(_DWORD *)v154 -= 2;
                          }
                          v155 = v162;
                          v162 = 0;
                          if (v155)
                          {
                            if (*(_DWORD *)v155 == 2)
                              WTF::StringImpl::destroy(v155, v146);
                            else
                              *(_DWORD *)v155 -= 2;
                          }
                        }
                      }
                      else
                      {
                        v141 = v140;
                        while (!WebCore::AccessibilityObject::isARIAHidden(v141))
                        {
                          v141 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v141 + 1232))(v141);
                          if (!v141)
                            goto LABEL_240;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_185:
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1456))(a1) == 131
      && (!v165 || !*((_DWORD *)v165 + 1)))
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 3000))(&v163, a1);
      v116 = v163;
      if (!v163)
      {
LABEL_188:
        WebCore::accessibleNameForNode((WTF::StringImpl *)&v162, (WebCore::Node *)v52, 0, v115, v113, v114);
        v117 = v162;
        if (v162)
          *(_DWORD *)v162 += 2;
        v163 = v117;
        v164 = 0;
        v118 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v118 == *(_DWORD *)(a2 + 8))
        {
          v119 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v118 + 1, (unint64_t)&v163);
          v120 = *(unsigned int *)(a2 + 12);
          v121 = *(_QWORD *)a2 + 16 * v120;
          v122 = *(_QWORD *)v119;
          *(_QWORD *)v119 = 0;
          *(_QWORD *)v121 = v122;
          *(_DWORD *)(v121 + 8) = *(_DWORD *)(v119 + 8);
          v123 = v163;
          *(_DWORD *)(a2 + 12) = v120 + 1;
          v163 = 0;
          if (v123)
          {
            if (*(_DWORD *)v123 == 2)
              WTF::StringImpl::destroy(v123, v5);
            else
              *(_DWORD *)v123 -= 2;
          }
        }
        else
        {
          v129 = *(_QWORD *)a2 + 16 * v118;
          *(_QWORD *)v129 = v117;
          *(_DWORD *)(v129 + 8) = 0;
          *(_DWORD *)(a2 + 12) = v118 + 1;
          v163 = 0;
        }
        v130 = v162;
        v162 = 0;
        if (v130)
        {
          if (*(_DWORD *)v130 == 2)
            WTF::StringImpl::destroy(v130, v5);
          else
            *(_DWORD *)v130 -= 2;
        }
        goto LABEL_215;
      }
      v131 = *((_DWORD *)v163 + 1);
      v163 = 0;
      if (*(_DWORD *)v116 == 2)
      {
        WTF::StringImpl::destroy(v116, v5);
        if (!v131)
          goto LABEL_188;
      }
      else
      {
        *(_DWORD *)v116 -= 2;
        if (!v131)
          goto LABEL_188;
      }
    }
LABEL_215:
    if ((*(_WORD *)(v52 + 28) & 0x40) == 0)
      goto LABEL_223;
    v132 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::MathMLNames::alttextAttr);
    if (v132)
      *(_DWORD *)v132 += 2;
    v163 = v132;
    v164 = 0;
    v133 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v133 != *(_DWORD *)(a2 + 8))
    {
      v138 = *(_QWORD *)a2 + 16 * v133;
      *(_QWORD *)v138 = v132;
      *(_DWORD *)(v138 + 8) = 0;
      *(_DWORD *)(a2 + 12) = v133 + 1;
      goto LABEL_223;
    }
    v134 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v133 + 1, (unint64_t)&v163);
    v135 = *(unsigned int *)(a2 + 12);
    v136 = *(_QWORD *)a2 + 16 * v135;
    v137 = *(_QWORD *)v134;
    *(_QWORD *)v134 = 0;
    *(_QWORD *)v136 = v137;
    *(_DWORD *)(v136 + 8) = *(_DWORD *)(v134 + 8);
    v107 = v163;
    *(_DWORD *)(a2 + 12) = v135 + 1;
    v163 = 0;
    if (!v107)
      goto LABEL_223;
    if (*(_DWORD *)v107 != 2)
    {
      *(_DWORD *)v107 -= 2;
      goto LABEL_223;
    }
LABEL_228:
    WTF::StringImpl::destroy(v107, v5);
LABEL_223:
    result = (uint64_t)v165;
    v165 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      *(_DWORD *)result -= 2;
    }
    return result;
  }
  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1712))(a1);
  if (!result)
    return result;
  v6 = *(_QWORD *)(result + 1272);
  if (!v6)
    goto LABEL_23;
  v7 = *(_QWORD *)(v6 + 104);
  if (!v7)
    goto LABEL_21;
  v8 = *(_DWORD *)(v7 + 4);
  if ((v8 & 1) == 0)
  {
    v9 = v7 + 32;
    LODWORD(v10) = v8 >> 5;
    if ((_DWORD)v10)
      goto LABEL_7;
LABEL_21:
    v11 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_22;
  }
  v9 = *(_QWORD *)(v7 + 40);
  LODWORD(v10) = *(_DWORD *)(v7 + 52);
  if (!(_DWORD)v10)
    goto LABEL_21;
LABEL_7:
  v10 = v10;
  v11 = (WTF::StringImpl **)(v9 + 8);
  while (1)
  {
    v12 = (uint64_t)*(v11 - 1);
    if (v12 == WebCore::HTMLNames::aria_labelAttr
      || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
      && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
    {
      break;
    }
    v11 += 2;
    if (!--v10)
    {
      v11 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_22:
  v21 = *v11;
  if (*v11 && *((_DWORD *)v21 + 1))
    goto LABEL_133;
LABEL_23:
  v22 = *(_QWORD *)(result + 528);
  if (!v22
    || (v23 = *(_QWORD *)(v22 + 8)) == 0
    || (v24 = *(_QWORD *)(v23 + 120)) == 0
    || (v25 = *(_QWORD *)(v24 + 8)) == 0)
  {
    result = *(_QWORD *)(result + 1448);
    if (result)
    {
      v28 = *(_DWORD *)(result + 4);
      v29 = *(_DWORD *)result + 2;
      *(_DWORD *)result = v29;
      if (v28)
      {
        v21 = (WTF::StringImpl *)result;
LABEL_134:
        if (*((_DWORD *)v21 + 1))
        {
          *(_DWORD *)v21 = v29 + 2;
          v163 = v21;
          v164 = 0;
          v85 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v85 == *(_DWORD *)(a2 + 8))
          {
            v86 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v85 + 1, (unint64_t)&v163);
            v87 = *(unsigned int *)(a2 + 12);
            v88 = *(_QWORD *)a2 + 16 * v87;
            v89 = *(_QWORD *)v86;
            *(_QWORD *)v86 = 0;
            *(_QWORD *)v88 = v89;
            *(_DWORD *)(v88 + 8) = *(_DWORD *)(v86 + 8);
            result = (uint64_t)v163;
            *(_DWORD *)(a2 + 12) = v87 + 1;
            v163 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
              else
                *(_DWORD *)result -= 2;
            }
          }
          else
          {
            v90 = *(_QWORD *)a2 + 16 * v85;
            *(_QWORD *)v90 = v21;
            *(_DWORD *)(v90 + 8) = 0;
            *(_DWORD *)(a2 + 12) = v85 + 1;
          }
          v29 = *(_DWORD *)v21;
        }
        if (v29 != 2)
        {
          *(_DWORD *)v21 = v29 - 2;
          return result;
        }
        result = (uint64_t)v21;
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      }
    }
    if (!v6)
      goto LABEL_52;
    if ((*(_WORD *)(v6 + 28) & 0x10) == 0)
      goto LABEL_52;
    if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      goto LABEL_52;
    v35 = *(_QWORD *)(v6 + 80);
    if (!v35)
      goto LABEL_52;
    while ((*(_WORD *)(v35 + 28) & 0x10) == 0)
    {
      v35 = *(_QWORD *)(v35 + 56);
      if (!v35)
        goto LABEL_52;
    }
    v78 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
    v79 = *(_QWORD *)(*(_QWORD *)(v35 + 96) + 24);
    if (v79 != v78)
    {
LABEL_112:
      if (v79 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
      {
        while (1)
        {
          v35 = *(_QWORD *)(v35 + 56);
          if (!v35)
            break;
          if ((*(_WORD *)(v35 + 28) & 0x10) != 0)
          {
            v79 = *(_QWORD *)(*(_QWORD *)(v35 + 96) + 24);
            if (v79 != v78)
              goto LABEL_112;
            goto LABEL_116;
          }
        }
LABEL_52:
        v21 = 0;
        goto LABEL_121;
      }
    }
LABEL_116:
    v80 = *(_QWORD *)(v35 + 104);
    if (v80 && (v81 = *(_DWORD *)(v80 + 4), (v81 & 2) != 0))
    {
      if ((v81 & 1) != 0)
      {
        v159 = *(_QWORD **)(v80 + 40);
        LODWORD(v160) = *(_DWORD *)(v80 + 52);
      }
      else
      {
        v159 = (_QWORD *)(v80 + 32);
        LODWORD(v160) = v81 >> 5;
      }
      if ((_DWORD)v160)
      {
        v160 = v160;
        while (1)
        {
          v161 = *v159;
          if (*v159 == WebCore::HTMLNames::nameAttr
            || *(_QWORD *)(v161 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
            && *(_QWORD *)(v161 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
          {
            break;
          }
          v159 += 2;
          if (!--v160)
            goto LABEL_282;
        }
      }
      else
      {
LABEL_282:
        v159 = 0;
      }
      v82 = (WTF::StringImpl **)(v159 + 1);
    }
    else
    {
      v82 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
    v21 = *v82;
    if (*v82)
      *(_DWORD *)v21 += 2;
LABEL_121:
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
        if (!v21)
          return result;
LABEL_170:
        v29 = *(_DWORD *)v21;
        goto LABEL_134;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v21)
      return result;
    goto LABEL_170;
  }
  v26 = *(_QWORD *)(*(_QWORD *)(v25 + 96) + 24);
  if (v26 != *(_QWORD *)(WebCore::HTMLNames::frameTag + 24) && v26 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
  {
    v27 = *(_QWORD *)(v25 + 104);
    goto LABEL_129;
  }
  v27 = *(_QWORD *)(v25 + 104);
  if (!v27)
    goto LABEL_127;
  v30 = *(_DWORD *)(v27 + 4);
  if ((v30 & 1) == 0)
  {
    v31 = v27 + 32;
    LODWORD(v32) = v30 >> 5;
    if (v30 >> 5)
      goto LABEL_36;
LABEL_127:
    v33 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_128;
  }
  v31 = *(_QWORD *)(v27 + 40);
  LODWORD(v32) = *(_DWORD *)(v27 + 52);
  if (!(_DWORD)v32)
    goto LABEL_127;
LABEL_36:
  v32 = v32;
  v33 = (WTF::StringImpl **)(v31 + 8);
  while (1)
  {
    v34 = (uint64_t)*(v33 - 1);
    if (v34 == WebCore::HTMLNames::titleAttr
      || *(_QWORD *)(v34 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
      && *(_QWORD *)(v34 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
    {
      break;
    }
    v33 += 2;
    if (!--v32)
    {
      v33 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_128:
  v21 = *v33;
  if (*v33 && *((_DWORD *)v21 + 1))
  {
LABEL_133:
    v29 = *(_DWORD *)v21 + 2;
    *(_DWORD *)v21 = v29;
    goto LABEL_134;
  }
LABEL_129:
  if (v27 && (v83 = *(_DWORD *)(v27 + 4), (v83 & 2) != 0))
  {
    if ((v83 & 1) != 0)
    {
      v156 = *(_QWORD **)(v27 + 40);
      LODWORD(v157) = *(_DWORD *)(v27 + 52);
    }
    else
    {
      v156 = (_QWORD *)(v27 + 32);
      LODWORD(v157) = v83 >> 5;
    }
    if ((_DWORD)v157)
    {
      v157 = v157;
      while (1)
      {
        v158 = *v156;
        if (*v156 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v158 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v158 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v156 += 2;
        if (!--v157)
          goto LABEL_269;
      }
    }
    else
    {
LABEL_269:
      v156 = 0;
    }
    v84 = (WTF::StringImpl **)(v156 + 1);
  }
  else
  {
    v84 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  v21 = *v84;
  if (*v84)
    goto LABEL_133;
  return result;
}

WTF::StringImpl *WebCore::AccessibilityNodeObject::accessibilityText(WebCore::AccessibilityObject *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl **Attribute;
  WTF::StringImpl *v51;
  WTF::StringImpl *result;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  unint64_t v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  int v92;

  (*(void (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 3304))(a1);
  WebCore::AccessibilityNodeObject::alternativeText(a1, a2);
  v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 840))(a1);
  if (!v4)
    goto LABEL_39;
  v5 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
  if (!v5)
    goto LABEL_39;
  v7 = v5;
  do
    v8 = __ldaxr((unsigned int *)v5);
  while (__stlxr(v8 + 1, (unsigned int *)v5));
  v9 = *(_QWORD *)(v5 + 8);
  if (v9)
  {
    if ((*(_WORD *)(v9 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v10 = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = v10 + 2;
      if ((*(_DWORD *)(*(_QWORD *)(v9 + 240) + 12) & 0x14001) != 0)
      {
        WebCore::HTMLInputElement::valueWithDefault((WebCore::HTMLInputElement *)v9, &v90);
        v11 = v90;
        if (v90)
          *(_DWORD *)v90 += 2;
        v91 = v11;
        v92 = 4;
        v12 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v12 == *(_DWORD *)(a2 + 8))
        {
          v13 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v12 + 1, (unint64_t)&v91);
          v14 = *(unsigned int *)(a2 + 12);
          v15 = *(_QWORD *)a2 + 16 * v14;
          v16 = *(_QWORD *)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v15 = v16;
          *(_DWORD *)(v15 + 8) = *(_DWORD *)(v13 + 8);
          v17 = v91;
          *(_DWORD *)(a2 + 12) = v14 + 1;
          v91 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v6);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        else
        {
          v27 = *(_QWORD *)a2 + 16 * v12;
          *(_QWORD *)v27 = v11;
          *(_DWORD *)(v27 + 8) = 4;
          *(_DWORD *)(a2 + 12) = v12 + 1;
          v91 = 0;
        }
        v28 = v90;
        v90 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v6);
          else
            *(_DWORD *)v28 -= 2;
        }
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v9, v6);
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
        goto LABEL_37;
      }
      if (v10)
      {
        *(_DWORD *)(v9 + 24) = v10;
      }
      else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v6);
      }
    }
    if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 56))(a1) & 1) != 0
      || (v18 = *(_QWORD *)(v7 + 8)) == 0
      || (*(_WORD *)(v18 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    {
      if (WebCore::AccessibilityObject::dependsOnTextUnderElement(a1))
      {
        v19 = (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1456))(a1) == 45
            ? 0x100010100
            : 0x100010000;
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *, uint64_t, _QWORD))(*(_QWORD *)a1 + 1392))(&v90, a1, v19, 0);
        v20 = v90;
        if (v90)
        {
          if (*((_DWORD *)v90 + 1))
          {
            *(_DWORD *)v90 += 2;
            v91 = v20;
            v92 = 1;
            v21 = *(unsigned int *)(a2 + 12);
            if ((_DWORD)v21 == *(_DWORD *)(a2 + 8))
            {
              v22 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v21 + 1, (unint64_t)&v91);
              v23 = *(unsigned int *)(a2 + 12);
              v24 = *(_QWORD *)a2 + 16 * v23;
              v25 = *(_QWORD *)v22;
              *(_QWORD *)v22 = 0;
              *(_QWORD *)v24 = v25;
              *(_DWORD *)(v24 + 8) = *(_DWORD *)(v22 + 8);
              v26 = v91;
              *(_DWORD *)(a2 + 12) = v23 + 1;
              v91 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v6);
                else
                  *(_DWORD *)v26 -= 2;
              }
            }
            else
            {
              v80 = *(_QWORD *)a2 + 16 * v21;
              *(_QWORD *)v80 = v20;
              *(_DWORD *)(v80 + 8) = 1;
              *(_DWORD *)(a2 + 12) = v21 + 1;
            }
            v20 = v90;
            v90 = 0;
            if (!v20)
              goto LABEL_37;
          }
          else
          {
            v90 = 0;
          }
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v6);
          else
            *(_DWORD *)v20 -= 2;
        }
      }
    }
  }
  do
  {
LABEL_37:
    v29 = __ldaxr((unsigned int *)v7);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, (unsigned int *)v7));
  if (!v30)
  {
    atomic_store(1u, (unsigned int *)v7);
    v85 = *(unsigned int *)(v7 + 28);
    if ((_DWORD)v85)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v85));
    v86 = *(WTF **)(v7 + 16);
    if (v86)
    {
      *(_QWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 24) = 0;
      WTF::fastFree(v86, v6);
    }
    WTF::fastFree((WTF *)v7, v6);
  }
LABEL_39:
  v32 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_helpAttr);
  if (v32 && *((_DWORD *)v32 + 1))
  {
    *(_DWORD *)v32 += 2;
    v91 = v32;
    v92 = 3;
    v81 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v81 == *(_DWORD *)(a2 + 8))
    {
      v82 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v81 + 1, (unint64_t)&v91);
      v81 = *(unsigned int *)(a2 + 12);
      v83 = *(_QWORD *)a2 + 16 * v81;
      v84 = *(_QWORD *)v82;
      *(_QWORD *)v82 = 0;
      *(_QWORD *)v83 = v84;
      *(_DWORD *)(v83 + 8) = *(_DWORD *)(v82 + 8);
    }
    else
    {
      v87 = *(_QWORD *)a2;
      v91 = 0;
      v88 = v87 + 16 * v81;
      *(_QWORD *)v88 = v32;
      *(_DWORD *)(v88 + 8) = 3;
    }
    *(_DWORD *)(a2 + 12) = v81 + 1;
    v89 = v91;
    v91 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2)
        WTF::StringImpl::destroy(v89, v31);
      else
        *(_DWORD *)v89 -= 2;
    }
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 144))(a1))
  {
    v33 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1232))(a1);
    if (v33)
    {
      v34 = v33;
      do
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 448))(v34))
        {
          (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v34 + 3008))(&v91, v34);
          v36 = v91;
          if (v91)
          {
            v37 = *((_DWORD *)v91 + 1);
            v91 = 0;
            if (*(_DWORD *)v36 == 2)
            {
              WTF::StringImpl::destroy(v36, v35);
              if (v37)
              {
LABEL_51:
                (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v34 + 3008))(&v90, v34);
                v39 = v90;
                if (v90)
                  *(_DWORD *)v90 += 2;
                v91 = v39;
                v92 = 2;
                v40 = *(unsigned int *)(a2 + 12);
                if ((_DWORD)v40 == *(_DWORD *)(a2 + 8))
                {
                  v41 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v40 + 1, (unint64_t)&v91);
                  v40 = *(unsigned int *)(a2 + 12);
                  v42 = *(_QWORD *)a2 + 16 * v40;
                  v43 = *(_QWORD *)v41;
                  *(_QWORD *)v41 = 0;
                  *(_QWORD *)v42 = v43;
                  *(_DWORD *)(v42 + 8) = *(_DWORD *)(v41 + 8);
                }
                else
                {
                  v44 = *(_QWORD *)a2;
                  v91 = 0;
                  v45 = v44 + 16 * v40;
                  *(_QWORD *)v45 = v39;
                  *(_DWORD *)(v45 + 8) = 2;
                }
                *(_DWORD *)(a2 + 12) = v40 + 1;
                v46 = v91;
                v91 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, v38);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v90;
                v90 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, v38);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                break;
              }
            }
            else
            {
              *(_DWORD *)v36 -= 2;
              if (v37)
                goto LABEL_51;
            }
          }
        }
        v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 1232))(v34);
      }
      while (v34);
    }
  }
  v49 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::summaryAttr);
  if (v49 && *((_DWORD *)v49 + 1))
  {
    *(_DWORD *)v49 += 2;
    v91 = v49;
    v92 = 2;
    v59 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v59 == *(_DWORD *)(a2 + 8))
    {
      v60 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v59 + 1, (unint64_t)&v91);
      v59 = *(unsigned int *)(a2 + 12);
      v61 = *(_QWORD *)a2 + 16 * v59;
      v62 = *(_QWORD *)v60;
      *(_QWORD *)v60 = 0;
      *(_QWORD *)v61 = v62;
      *(_DWORD *)(v61 + 8) = *(_DWORD *)(v60 + 8);
    }
    else
    {
      v69 = *(_QWORD *)a2;
      v91 = 0;
      v70 = v69 + 16 * v59;
      *(_QWORD *)v70 = v49;
      *(_DWORD *)(v70 + 8) = 2;
    }
    *(_DWORD *)(a2 + 12) = v59 + 1;
    v71 = v91;
    v91 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v48);
      else
        *(_DWORD *)v71 -= 2;
    }
  }
  Attribute = (WTF::StringImpl **)WebCore::AccessibilityObject::getAttribute(a1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::titleAttr);
  if (*Attribute && *((_DWORD *)*Attribute + 1))
  {
    v63 = Attribute;
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 2976))(a1) == 81
      || (v64 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 848))(a1)) != 0
      && *(_BYTE *)(v64 + 46) == 23
      || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 2976))(a1) == 134
      && ((v65 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1456))(a1), v65 == 38)
       || v65 == 134))
    {
      v66 = *v63;
      if (*v63)
        *(_DWORD *)v66 += 2;
      v91 = v66;
      v67 = 3;
    }
    else
    {
      v66 = *v63;
      if (*v63)
        *(_DWORD *)v66 += 2;
      v91 = v66;
      v67 = 5;
    }
    v92 = v67;
    v72 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v72 == *(_DWORD *)(a2 + 8))
    {
      v73 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v72 + 1, (unint64_t)&v91);
      v75 = *(unsigned int *)(a2 + 12);
      v76 = *(_QWORD *)a2 + 16 * v75;
      v77 = *(_QWORD *)v73;
      *(_QWORD *)v73 = 0;
      *(_QWORD *)v76 = v77;
      *(_DWORD *)(v76 + 8) = *(_DWORD *)(v73 + 8);
      v78 = v91;
      *(_DWORD *)(a2 + 12) = v75 + 1;
      v91 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, v74);
        else
          *(_DWORD *)v78 -= 2;
      }
    }
    else
    {
      v79 = *(_QWORD *)a2 + 16 * v72;
      *(_QWORD *)v79 = v66;
      *(_DWORD *)(v79 + 8) = v67;
      *(_DWORD *)(a2 + 12) = v72 + 1;
    }
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)a1 + 1424))(&v90, a1);
  result = v90;
  if (v90)
  {
    if (!*((_DWORD *)v90 + 1))
    {
      v90 = 0;
LABEL_86:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v51);
      *(_DWORD *)result -= 2;
      return result;
    }
    *(_DWORD *)v90 += 2;
    v91 = result;
    v92 = 6;
    v53 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v53 == *(_DWORD *)(a2 + 8))
    {
      v54 = WTF::Vector<WebCore::AccessibilityText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v53 + 1, (unint64_t)&v91);
      v55 = *(unsigned int *)(a2 + 12);
      v56 = *(_QWORD *)a2 + 16 * v55;
      v57 = *(_QWORD *)v54;
      *(_QWORD *)v54 = 0;
      *(_QWORD *)v56 = v57;
      *(_DWORD *)(v56 + 8) = *(_DWORD *)(v54 + 8);
      v58 = v91;
      *(_DWORD *)(a2 + 12) = v55 + 1;
      v91 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v51);
        else
          *(_DWORD *)v58 -= 2;
      }
    }
    else
    {
      v68 = *(_QWORD *)a2 + 16 * v53;
      *(_QWORD *)v68 = result;
      *(_DWORD *)(v68 + 8) = 6;
      *(_DWORD *)(a2 + 12) = v53 + 1;
    }
    result = v90;
    v90 = 0;
    if (result)
      goto LABEL_86;
  }
  return result;
}

WTF::StringImpl *WebCore::AccessibilityNodeObject::description@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _BOOL4 v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
  if ((_DWORD)result == 107)
  {
    *a2 = 0;
    return result;
  }
  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3000))(&v23, this);
  v5 = v23;
  if (!v23 || !*((_DWORD *)v23 + 1))
  {
    WebCore::AccessibilityObject::getAttributeTrimmed(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr, &v22);
    v5 = v22;
    if (v22 && !*((_DWORD *)v22 + 1))
    {
      v22 = 0;
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
      v5 = 0;
    }
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        if (!v5)
          goto LABEL_9;
        goto LABEL_29;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v5)
      goto LABEL_9;
  }
LABEL_29:
  if (*((_DWORD *)v5 + 1))
  {
    *a2 = v5;
    return result;
  }
LABEL_9:
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 49
    || ((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 136))(this) & 1) != 0)
  {
    goto LABEL_11;
  }
  v15 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (v15 && (*(_WORD *)(v15 + 28) & 0x10) != 0)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24);
    if (v17 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
      || v17 == *(_QWORD *)(WebCore::HTMLNames::appletTag + 24)
      || v17 == *(_QWORD *)(WebCore::HTMLNames::embedTag + 24)
      || v17 == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
    {
      goto LABEL_11;
    }
    if (v17 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v18 = *(_DWORD *)(v15 + 24);
      *(_DWORD *)(v15 + 24) = v18 + 2;
      v19 = *(_DWORD *)(*(_QWORD *)(v15 + 240) + 12);
      if (v18)
      {
        *(_DWORD *)(v15 + 24) = v18;
      }
      else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
      }
      if (v19 == 256)
        goto LABEL_11;
    }
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 11)
  {
LABEL_11:
    v7 = 1;
  }
  else if ((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this))
  {
    v20 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
    v7 = 0;
    if (v20 && (*(_WORD *)(v20 + 28) & 0x10) != 0)
      v7 = *(_QWORD *)(*(_QWORD *)(v20 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24);
  }
  else
  {
    v7 = 0;
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 82 || v7)
  {
    result = (WTF::StringImpl *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::altAttr);
    v10 = *(WTF::StringImpl **)result;
    if (*(_QWORD *)result)
    {
LABEL_51:
      *(_DWORD *)v10 += 2;
LABEL_52:
      *a2 = v10;
      if (!v5)
        return result;
      goto LABEL_61;
    }
  }
  v11 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (v11 && (*(_WORD *)(v11 + 28) & 0x40) != 0)
  {
    result = (WTF::StringImpl *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::MathMLNames::alttextAttr);
    v10 = *(WTF::StringImpl **)result;
    if (!*(_QWORD *)result)
      goto LABEL_52;
    goto LABEL_51;
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 2976))(this) == 134
    && ((result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this),
         (_DWORD)result == 38)
     || (_DWORD)result == 134)
    || (result = (WTF::StringImpl *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::titleAttr), (v12 = *(WTF::StringImpl **)result) == 0))
  {
LABEL_60:
    *a2 = 0;
    if (!v5)
      return result;
    goto LABEL_61;
  }
  v13 = *((_DWORD *)v12 + 1);
  *(_DWORD *)v12 += 2;
  if (!v13)
    goto LABEL_58;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1360))(&v23, this);
  result = v23;
  if (!v23)
    goto LABEL_25;
  v21 = *((_DWORD *)v23 + 1);
  v23 = 0;
  if (*(_DWORD *)result == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    if (!v21)
      goto LABEL_25;
LABEL_58:
    if (*(_DWORD *)v12 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
    goto LABEL_60;
  }
  *(_DWORD *)result -= 2;
  if (v21)
    goto LABEL_58;
LABEL_25:
  v14 = *(_DWORD *)v12;
  *(_DWORD *)v12 += 2;
  *a2 = v12;
  if (v14)
  {
    *(_DWORD *)v12 = v14;
    if (!v5)
      return result;
  }
  else
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v9);
    if (!v5)
      return result;
  }
LABEL_61:
  if (*(_DWORD *)v5 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v9);
  *(_DWORD *)v5 -= 2;
  return result;
}

unsigned int *WebCore::AccessibilityNodeObject::helpText@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  unsigned int *result;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::String *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  WTF::String *v14;
  WTF::StringImpl *v15;
  __n128 v16;
  const WTF::StringImpl **Attribute;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  result = (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!result
    || (result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)result)) == 0)
  {
    *a2 = 0;
    return result;
  }
  v6 = result;
  do
    v7 = __ldaxr(result);
  while (__stlxr(v7 + 1, result));
  if (*((_QWORD *)result + 1))
  {
    result = (unsigned int *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_helpAttr);
    v8 = *(WTF::StringImpl **)result;
    if (*(_QWORD *)result && *((_DWORD *)v8 + 1))
    {
      *(_DWORD *)v8 += 2;
    }
    else
    {
      result = (unsigned int *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3008))(&v31, this);
      v8 = v31;
      if (!v31 || !*((_DWORD *)v31 + 1))
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1368))(&v30, this);
        v12 = *((_QWORD *)v6 + 1);
        if (v12)
        {
          while (1)
          {
            if ((*(_WORD *)(v12 + 28) & 0x10) != 0)
            {
              v15 = *(WTF::StringImpl **)WebCore::Element::getAttribute((WebCore::Element *)v12, (const WebCore::QualifiedName *)&WebCore::HTMLNames::summaryAttr, v9, v10, v11);
              if (v15 && *((_DWORD *)v15 + 1))
                goto LABEL_24;
              Attribute = (const WTF::StringImpl **)WebCore::Element::getAttribute((WebCore::Element *)v12, (const WebCore::QualifiedName *)&WebCore::HTMLNames::titleAttr, v13, v14, v16);
              v19 = *Attribute;
              if (*Attribute)
              {
                if (*((_DWORD *)v19 + 1))
                {
                  v24 = Attribute;
                  if ((WTF::equal(v30, v19, v18) & 1) == 0)
                    break;
                }
              }
            }
            v20 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1488))(this);
            if (v20)
            {
              v21 = WebCore::AXObjectCache::getOrCreate(v20, v12, 0);
              if (!v21
                || (v22 = v21, v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 1456))(v21), v23 == 44)
                || v23 == 127
                || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 1456))(v22) == 134)
              {
                v12 = *(_QWORD *)(v12 + 32);
                if (v12)
                  continue;
              }
            }
            goto LABEL_26;
          }
          v15 = *v24;
          if (!*v24)
            goto LABEL_27;
LABEL_24:
          *(_DWORD *)v15 += 2;
        }
        else
        {
LABEL_26:
          v15 = 0;
        }
LABEL_27:
        *a2 = v15;
        v25 = v30;
        v30 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v5);
          else
            *(_DWORD *)v25 -= 2;
        }
        result = (unsigned int *)v31;
        v31 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
          else
            *result -= 2;
        }
        goto LABEL_37;
      }
    }
    *a2 = v8;
  }
  else
  {
    *a2 = 0;
  }
  do
  {
LABEL_37:
    v26 = __ldaxr(v6);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v6));
  if (!v27)
  {
    atomic_store(1u, v6);
    v28 = v6[7];
    if ((_DWORD)v28)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v6 + 2), (WTF::StringImpl *)(*((_QWORD *)v6 + 2) + 32 * v28));
    v29 = (WTF *)*((_QWORD *)v6 + 2);
    if (v29)
    {
      *((_QWORD *)v6 + 2) = 0;
      v6[6] = 0;
      WTF::fastFree(v29, v5);
    }
    return (unsigned int *)WTF::fastFree((WTF *)v6, v5);
  }
  return result;
}

unsigned int *WebCore::AccessibilityNodeObject::url@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int *result;
  void *v8;
  void *v9;
  WebCore::Document *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v4)
    goto LABEL_34;
  v5 = v4;
  if ((*(_WORD *)(v4 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
  {
    *(_DWORD *)(v4 + 24) += 2;
    if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 104))(this))
    {
      result = (unsigned int *)WebCore::HTMLAnchorElement::href((WebCore::HTMLAnchorElement *)v5, (WTF::URL *)a2);
      goto LABEL_54;
    }
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  if ((*(_WORD *)(v5 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
  {
    *(_DWORD *)(v5 + 24) += 2;
    if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 49)
    {
      v10 = *(WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8);
      v11 = *(_QWORD *)(v5 + 104);
      if (v11)
      {
        v12 = *(_DWORD *)(v11 + 4);
        if ((v12 & 1) == 0)
        {
          v13 = v11 + 32;
          LODWORD(v14) = v12 >> 5;
          if (!(_DWORD)v14)
            goto LABEL_52;
LABEL_36:
          v14 = v14;
          v22 = (_QWORD *)(v13 + 8);
          v23 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          while (1)
          {
            v24 = *(v22 - 1);
            if (v24 == WebCore::HTMLNames::srcAttr
              || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
              && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
            {
              goto LABEL_53;
            }
            v22 += 2;
            if (!--v14)
              goto LABEL_51;
          }
        }
        v13 = *(_QWORD *)(v11 + 40);
        LODWORD(v14) = *(_DWORD *)(v11 + 52);
        if ((_DWORD)v14)
          goto LABEL_36;
      }
      goto LABEL_52;
    }
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  if ((*(_WORD *)(v5 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
LABEL_26:
    if ((*(_WORD *)(v5 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
    {
      *(_DWORD *)(v5 + 24) += 2;
      result = (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
      if ((_DWORD)result == 136)
      {
        v20 = *(_DWORD **)(v5 + 912);
        if (v20)
          *v20 += 2;
        *(_QWORD *)a2 = v20;
        v21 = *(_OWORD *)(v5 + 920);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(v5 + 936);
        *(_OWORD *)(a2 + 8) = v21;
        goto LABEL_54;
      }
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, v8);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
LABEL_34:
    *(_QWORD *)a2 = 0;
    return (unsigned int *)WTF::URL::invalidate((WTF::URL *)a2);
  }
  *(_DWORD *)(v5 + 24) += 2;
  if (!(*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 136))(this))
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v15);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    goto LABEL_26;
  }
  v10 = *(WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8);
  v16 = *(_QWORD *)(v5 + 104);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 + 4);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(v16 + 40);
      LODWORD(v19) = *(_DWORD *)(v16 + 52);
      if (!(_DWORD)v19)
        goto LABEL_52;
    }
    else
    {
      v18 = v16 + 32;
      LODWORD(v19) = v17 >> 5;
      if (!(_DWORD)v19)
        goto LABEL_52;
    }
    v19 = v19;
    v22 = (_QWORD *)(v18 + 8);
    v23 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    while (1)
    {
      v25 = *(v22 - 1);
      if (v25 == WebCore::HTMLNames::srcAttr
        || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
        && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
      {
        goto LABEL_53;
      }
      v22 += 2;
      if (!--v19)
      {
LABEL_51:
        v22 = v23;
        goto LABEL_53;
      }
    }
  }
LABEL_52:
  v22 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_53:
  result = (unsigned int *)WebCore::Document::completeURL(v10, v22, (uint64_t)v10 + 848, 0, (WTF::URL *)a2);
LABEL_54:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5, v8);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::hierarchicalLevel(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::String *v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v2)
    return 0;
  v6 = v2;
  if ((*(_WORD *)(v2 + 28) & 8) == 0)
    return 0;
  *(_DWORD *)(v2 + 24) += 2;
  v9 = *(_QWORD *)(v2 + 104);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 4);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(v9 + 40);
      LODWORD(v12) = *(_DWORD *)(v9 + 52);
      if ((_DWORD)v12)
      {
LABEL_8:
        v12 = v12;
        v13 = (uint64_t *)(v11 + 8);
        while (1)
        {
          v14 = *(v13 - 1);
          if (v14 == WebCore::HTMLNames::aria_levelAttr
            || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_levelAttr + 24)
            && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_levelAttr + 32))
          {
            goto LABEL_17;
          }
          v13 += 2;
          if (!--v12)
          {
            v13 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v11 = v9 + 32;
      LODWORD(v12) = v10 >> 5;
      if ((_DWORD)v12)
        goto LABEL_8;
    }
  }
  v13 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_17:
  v15 = *v13;
  if (v15 && *(_DWORD *)(v15 + 4))
  {
    v20 = *(_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_levelAttr, v3, v4, v5);
    if (v20)
    {
      v21 = *(uint64_t **)(v20 + 8);
      v22 = *(unsigned int *)(v20 + 4) | ((unint64_t)((*(_DWORD *)(v20 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v21 = 0;
      v22 = 0x100000000;
    }
    WebCore::parseHTMLInteger(v21, v22, &v23);
    if (HIDWORD(v23))
      v7 = 0;
    else
      v7 = v23;
  }
  else if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 131)
  {
    v17 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1232))(this);
    if (v17)
    {
      v18 = v17;
      v7 = 1;
      do
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 2976))(v18);
        if (v19 == 44)
        {
          v7 = (v7 + 1);
        }
        else if (v19 == 129)
        {
          break;
        }
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1232))(v18);
      }
      while (v18);
    }
    else
    {
      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v16);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v7;
}

void WebCore::AccessibilityNodeObject::setIsExpanded(WebCore::AccessibilityNodeObject *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::String *v5;
  __n128 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF::String *v10;
  __n128 v11;

  v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (v3)
  {
    v7 = v3;
    if ((*(_WORD *)(v3 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24))
    {
      *(_DWORD *)(v3 + 24) += 2;
      if (WebCore::Element::hasAttribute((WebCore::Element *)v3, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, v4, v5, v6) != a2)WebCore::HTMLDetailsElement::toggleOpen((WebCore::HTMLDetailsElement *)v7, v11, (uint64_t)v8, v9, v10);
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
  }
}

unsigned int *WebCore::AccessibilityNodeObject::textUnderElement@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  int v4;
  unsigned int *v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned int *result;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  _BOOL4 v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebCore::AccessibilityObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  void *v30;
  int v31;
  void *v32;
  void *v33;
  uint64_t v34;
  int v36;
  const WebCore::AccessibilityObject *v37;
  WebCore::AccessibilityObject *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  BOOL v43;
  __int16 v44;
  WebCore::AccessibilityObject *v45;
  uint64_t v46;
  WebCore::AccessibilityObject *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  WebCore::Node *v54;
  uint64_t v55;
  WTF::StringBuilder *v56;
  __n128 v57;
  BOOL v58;
  char v59;
  char v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WebCore::AccessibilityObject *v72;
  uint64_t v73;
  int v75;
  WebCore::AccessibilityObject *v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  int v83;
  WebCore::AccessibilityObject *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  int v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  int v98;
  WebCore::AccessibilityObject *v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  int v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  WebCore::AccessibilityObject *v115[2];
  uint64_t *v116;
  WTF::StringImpl *v117;
  char *v118;
  WebCore::AccessibilityObject **v119;
  char v120;
  WebCore::AccessibilityObject *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  char v125;
  uint64_t v126;
  uint64_t v127;

  v4 = a2;
  v5 = a1;
  v126 = a2;
  v127 = a3;
  v7 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 840))(a1);
  v9 = v7;
  v10 = BYTE2(v4);
  if (v7)
  {
    *(_DWORD *)(v7 + 24) += 2;
    if ((*(_WORD *)(v7 + 28) & 2) != 0)
    {
      if (!BYTE2(v4) || (v4 & 0xFF000000) == 0)
      {
LABEL_27:
        result = (unsigned int *)WebCore::Text::wholeText((WebCore::Text *)v9, v8, a4);
        goto LABEL_267;
      }
      while (1)
      {
        v14 = *WebCore::AccessibilityObject::getAttribute((WebCore::AccessibilityObject *)v5, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_hiddenAttr);
        if (v14 && *(_DWORD *)(v14 + 4) == 5)
        {
          v17 = *(_QWORD *)(v14 + 8);
          if ((*(_BYTE *)(v14 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v17 & 0xDF) == 0x46
              && (*(_BYTE *)(v17 + 1) & 0xDF) == 0x41
              && (*(_BYTE *)(v17 + 2) & 0xDF) == 0x4C
              && (*(_BYTE *)(v17 + 3) & 0xDF) == 0x53)
            {
              v18 = *(unsigned __int8 *)(v17 + 4);
              goto LABEL_20;
            }
          }
          else if ((*(_WORD *)v17 & 0xFFDF) == 0x46
                 && (*(_WORD *)(v17 + 2) & 0xFFDF) == 0x41
                 && (*(_WORD *)(v17 + 4) & 0xFFDF) == 0x4C
                 && (*(_WORD *)(v17 + 6) & 0xFFDF) == 0x53)
          {
            v18 = *(unsigned __int16 *)(v17 + 8);
LABEL_20:
            if ((v18 & 0xFFFFFFDF) == 0x45)
              goto LABEL_27;
          }
        }
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 1232))(v5);
        v5 = result;
        if (!result)
        {
          v19 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
            *(_DWORD *)v19 += 2;
          *a4 = v19;
          goto LABEL_267;
        }
      }
    }
  }
  v11 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 848))(v5);
  if (v11)
  {
    if ((*(_BYTE *)(v11 + 45) & 2) != 0)
    {
      v108 = *(_QWORD *)(v11 + 32);
      if (v108)
        v11 = *(_QWORD *)(v108 + 8);
      else
        v11 = 0;
    }
    v12 = v11 + 80;
    goto LABEL_6;
  }
  v21 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 832))(v5);
  if (!v21)
  {
    v12 = 0;
LABEL_41:
    v13 = 1;
    goto LABEL_42;
  }
  LOBYTE(v116) = 0;
  LOBYTE(v118) = 0;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v21 + 264))(v21, &v116);
  if ((_BYTE)v118)
  {
    v23 = v117;
    v117 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::destroy(v23, v22);
        if (!v12)
          goto LABEL_41;
        goto LABEL_6;
      }
      *(_DWORD *)v23 -= 2;
    }
  }
  if (!v12)
    goto LABEL_41;
LABEL_6:
  if ((*(_QWORD *)(v12 + 16) & 0x1FLL) != 0x1A && (*(_BYTE *)(*(_QWORD *)(v12 + 24) + 239) & 4) == 0)
  {
    v13 = 0;
    v20 = (*(_BYTE *)(v12 + 40) & 0x30) != 0;
    goto LABEL_43;
  }
  v13 = 0;
LABEL_42:
  v20 = 1;
LABEL_43:
  BYTE3(v126) = v20;
  if (!v10 || !v20)
    goto LABEL_74;
  v24 = (WebCore::AccessibilityObject *)v5;
  do
  {
    v25 = *WebCore::AccessibilityObject::getAttribute(v24, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_hiddenAttr);
    if (v25 && *(_DWORD *)(v25 + 4) == 5)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if ((*(_BYTE *)(v25 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v26 & 0xDF) != 0x46
          || (*(_BYTE *)(v26 + 1) & 0xDF) != 0x41
          || (*(_BYTE *)(v26 + 2) & 0xDF) != 0x4C
          || (*(_BYTE *)(v26 + 3) & 0xDF) != 0x53)
        {
          goto LABEL_47;
        }
        v27 = *(unsigned __int8 *)(v26 + 4);
      }
      else
      {
        if ((*(_WORD *)v26 & 0xFFDF) != 0x46
          || (*(_WORD *)(v26 + 2) & 0xFFDF) != 0x41
          || (*(_WORD *)(v26 + 4) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v26 + 6) & 0xFFDF) != 0x53)
        {
          goto LABEL_47;
        }
        v27 = *(unsigned __int16 *)(v26 + 8);
      }
      if ((v27 & 0xFFFFFFDF) == 0x45)
        goto LABEL_74;
    }
LABEL_47:
    v24 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v24 + 1232))(v24);
  }
  while (v24);
  if (!v9)
    goto LABEL_74;
  v28 = *(_QWORD *)(v9 + 32);
  if (v28)
  {
    v29 = *(_WORD *)(v28 + 28);
    if ((v29 & 8) != 0)
    {
      while ((v29 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
      {
        v28 = *(_QWORD *)(v28 + 32);
        if (v28)
        {
          v29 = *(_WORD *)(v28 + 28);
          if ((v29 & 8) != 0)
            continue;
        }
        goto LABEL_70;
      }
LABEL_74:
      v122 = 0;
      v123 = 0;
      v124 = 0;
      v125 = 1;
      v121 = 0;
      v120 = 0;
      v116 = &v126;
      v117 = (WTF::StringImpl *)&v122;
      v118 = &v120;
      v119 = &v121;
      v34 = *((_QWORD *)v5 + 1);
      if (__ldaxr((unsigned __int8 *)v34))
      {
        __clrex();
        goto LABEL_77;
      }
      if (__stxr(1u, (unsigned __int8 *)v34))
LABEL_77:
        MEMORY[0x19AEA534C](v34);
      ++*(_QWORD *)(v34 + 8);
      v36 = __ldxr((unsigned __int8 *)v34);
      if (v36 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v34))
        {
LABEL_83:
          v37 = (const WebCore::AccessibilityObject *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 2912))(v5);
          WebCore::AccessibilityObject::iterator::iterator((WebCore::AccessibilityObject::iterator *)v115, v37, (const WebCore::AccessibilityObject *)v5);
          v113 = 0;
          v114 = 0;
          v38 = v115[0];
          WebCore::AccessibilityObject::iterator::~iterator((WebCore::AccessibilityObject::iterator *)&v113, v39);
          if (v38)
          {
            while (1)
            {
              if (v127)
              {
                v41 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v115[0] + 840))(v115[0]);
                if (v41 == v127)
                  goto LABEL_171;
              }
              if (BYTE2(v126))
                v43 = BYTE3(v126) == 0;
              else
                v43 = 1;
              if (!v43)
              {
LABEL_170:
                WebCore::AccessibilityNodeObject::textUnderElement(WebCore::TextUnderElementMode)const::$_0::operator()<WebCore::AccessibilityObject>((uint64_t *)&v116, v115[0]);
                goto LABEL_171;
              }
              if (v126 == 2
                && !WebCore::AccessibilityObject::accessibleNameDerivesFromContent(v115[0]))
              {
                v54 = (WebCore::Node *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v115[0]
                                                                                                 + 840))(v115[0]);
                WebCore::accessibleNameForNode((WTF::StringImpl *)&v113, v54, 0, v57, v55, v56);
                if (v113)
                  v58 = *((_DWORD *)v113 + 1) == 0;
                else
                  v58 = 1;
                WebCore::appendNameToStringBuilder((uint64_t)&v122, (WTF::StringImpl *)&v113, 1);
                v60 = !v58;
                if (v120)
                  v60 = 1;
                v120 = v60;
                v61 = v113;
                v113 = 0;
                if (v61)
                {
                  if (*(_DWORD *)v61 == 2)
                    WTF::StringImpl::destroy(v61, v42);
                  else
                    *(_DWORD *)v61 -= 2;
                }
                goto LABEL_171;
              }
              v44 = v126;
              if (v126 != 1)
                break;
LABEL_98:
              v47 = v115[0];
              if (!(*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v115[0] + 2672))(v115[0]))
                goto LABEL_133;
              WebCore::AccessibilityNodeObject::ariaLabeledByElements((WebCore::AccessibilityNodeObject *)&v113, v47);
              v48 = HIDWORD(v114);
              if (HIDWORD(v114))
              {
                v49 = 0;
                v50 = v113;
                while (v9 != *(_QWORD *)((char *)v113 + v49))
                {
                  v49 += 8;
                  if (8 * HIDWORD(v114) == v49)
                    goto LABEL_103;
                }
                v53 = 4;
                goto LABEL_130;
              }
LABEL_103:
              v111 = 0;
              v112 = 0;
              WebCore::AccessibilityNodeObject::alternativeText(v47, (uint64_t)&v111);
              v51 = HIDWORD(v112);
              v52 = v111;
              if (HIDWORD(v112))
              {
                if (!*(_QWORD *)v111 || !*(_DWORD *)(*(_QWORD *)v111 + 4))
                {
                  v53 = 0;
LABEL_159:
                  v70 = 16 * v51;
                  do
                  {
                    v71 = *(WTF::StringImpl **)v52;
                    *(_QWORD *)v52 = 0;
                    if (v71)
                    {
                      if (*(_DWORD *)v71 == 2)
                        WTF::StringImpl::destroy(v71, v42);
                      else
                        *(_DWORD *)v71 -= 2;
                    }
                    v52 = (WTF *)((char *)v52 + 16);
                    v70 -= 16;
                  }
                  while (v70);
                  v52 = v111;
                  if (!v111)
                    goto LABEL_129;
LABEL_128:
                  v111 = 0;
                  LODWORD(v112) = 0;
                  WTF::fastFree(v52, v42);
                  goto LABEL_129;
                }
                WebCore::appendNameToStringBuilder((uint64_t)&v122, v111, 1);
                v120 = 1;
                v51 = HIDWORD(v112);
                v53 = 4;
                v52 = v111;
                if (HIDWORD(v112))
                  goto LABEL_159;
              }
              else
              {
                v53 = 0;
              }
              if (v52)
                goto LABEL_128;
LABEL_129:
              v48 = HIDWORD(v114);
              v50 = v113;
LABEL_130:
              if (v48)
              {
                v87 = 8 * v48;
                do
                {
                  v88 = *(_QWORD *)v50;
                  *(_QWORD *)v50 = 0;
                  if (v88)
                  {
                    if (*(_DWORD *)(v88 + 24) == 2)
                    {
                      if ((*(_WORD *)(v88 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v88, v42);
                    }
                    else
                    {
                      *(_DWORD *)(v88 + 24) -= 2;
                    }
                  }
                  v50 = (WTF::StringImpl *)((char *)v50 + 8);
                  v87 -= 8;
                }
                while (v87);
                v50 = v113;
                if (v113)
                {
LABEL_210:
                  v113 = 0;
                  LODWORD(v114) = 0;
                  WTF::fastFree(v50, v42);
                  if (v53)
                    goto LABEL_171;
                  goto LABEL_133;
                }
              }
              else if (v50)
              {
                goto LABEL_210;
              }
              if (v53)
                goto LABEL_171;
LABEL_133:
              if (!v9)
                goto LABEL_170;
              if (!(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v115[0] + 840))(v115[0]))
                goto LABEL_170;
              v62 = *(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v115[0] + 840))(v115[0])
                              + 32);
              if (!v62)
                goto LABEL_170;
              if (v9 == v62 || (*(_WORD *)(v62 + 28) & 8) == 0)
                goto LABEL_170;
              if ((*(_BYTE *)(v9 + 22) & 0x10) != 0)
                goto LABEL_170;
              v64 = **(_QWORD **)(v9 + 40);
              if (v64)
              {
                if ((*(_WORD *)(v64 + 28) & 0x80) != 0 && !*(_BYTE *)(v64 + 193))
                  goto LABEL_170;
              }
              v65 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v115[0] + 840))(v115[0]);
              if ((*(_BYTE *)(v65 + 22) & 0x10) != 0)
                goto LABEL_170;
              v66 = **(_QWORD **)(v65 + 40);
              v67 = !v66 || (*(_WORD *)(v66 + 28) & 0x80) == 0;
              if (!v67 && !*(_BYTE *)(v66 + 193))
                goto LABEL_170;
LABEL_171:
              v72 = v115[0];
              if (!v115[0])
                goto LABEL_181;
              v73 = *((_QWORD *)v115[0] + 1);
              if (__ldaxr((unsigned __int8 *)v73))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v73))
              {
                goto LABEL_176;
              }
              MEMORY[0x19AEA534C](v73);
LABEL_176:
              ++*(_QWORD *)(v73 + 8);
              v75 = __ldxr((unsigned __int8 *)v73);
              if (v75 != 1)
              {
                __clrex();
LABEL_180:
                WTF::Lock::unlockSlow((WTF::Lock *)v73);
                goto LABEL_181;
              }
              if (__stlxr(0, (unsigned __int8 *)v73))
                goto LABEL_180;
LABEL_181:
              v76 = v121;
              v121 = v72;
              if (!v76)
                goto LABEL_198;
              v77 = *((_QWORD *)v76 + 1);
              if (__ldaxr((unsigned __int8 *)v77))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v77))
              {
                goto LABEL_186;
              }
              MEMORY[0x19AEA534C](v77);
LABEL_186:
              v79 = *(_QWORD *)(v77 + 8);
              v80 = v79 - 1;
              *(_QWORD *)(v77 + 8) = v79 - 1;
              if (v79 == 1)
              {
                v86 = *(_QWORD *)(v77 + 16);
                v81 = *(_QWORD *)(v77 + 24);
                *(_QWORD *)(v77 + 24) = 0;
                v82 = v86 != 0;
              }
              else
              {
                v81 = 0;
                v82 = 1;
              }
              v83 = __ldxr((unsigned __int8 *)v77);
              if (v83 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v77))
                {
                  if (!v80)
                    goto LABEL_194;
                  goto LABEL_198;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v77);
              if (!v80)
              {
LABEL_194:
                if (v81)
                  (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
                if (!v82)
                  WTF::fastFree((WTF *)v77, v42);
              }
LABEL_198:
              WebCore::AccessibilityObject::iterator::operator++(v115);
              v113 = 0;
              v114 = 0;
              v84 = v115[0];
              WebCore::AccessibilityObject::iterator::~iterator((WebCore::AccessibilityObject::iterator *)&v113, v85);
              if (!v84)
                goto LABEL_216;
            }
            v45 = v115[0];
            if (v126 == 2 && !WebCore::AccessibilityObject::accessibleNameDerivesFromContent(v115[0]))
              goto LABEL_171;
            v46 = *WebCore::AccessibilityObject::getAttribute(v45, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_hiddenAttr);
            if (v46 && *(_DWORD *)(v46 + 4) == 4)
            {
              v68 = *(_QWORD *)(v46 + 8);
              if ((*(_BYTE *)(v46 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v68 & 0xDF) == 0x54
                  && (*(_BYTE *)(v68 + 1) & 0xDF) == 0x52
                  && (*(_BYTE *)(v68 + 2) & 0xDF) == 0x55)
                {
                  v69 = *(unsigned __int8 *)(v68 + 3);
LABEL_156:
                  if ((v69 & 0xFFFFFFDF) == 0x45)
                    goto LABEL_171;
                }
              }
              else if ((*(_WORD *)v68 & 0xFFDF) == 0x54
                     && (*(_WORD *)(v68 + 2) & 0xFFDF) == 0x52
                     && (*(_WORD *)(v68 + 4) & 0xFFDF) == 0x55)
              {
                v69 = *(unsigned __int16 *)(v68 + 6);
                goto LABEL_156;
              }
            }
            if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v45 + 2952))(v45) & 1) == 0)
            {
              v59 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v45 + 800))(v45);
              if ((v44 & 0x100) == 0 && (v59 & 1) != 0)
                goto LABEL_171;
              if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v45 + 160))(v45) & 1) != 0
                || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v45 + 64))(v45)
                && *((_BYTE *)v45 + 312)
                || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v45 + 1456))(v45) == 129
                || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v45 + 1456))(v45) == 11
                || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v45 + 1456))(v45) == 82)
              {
                goto LABEL_171;
              }
            }
            goto LABEL_98;
          }
LABEL_216:
          WebCore::AccessibilityObject::iterator::~iterator((WebCore::AccessibilityObject::iterator *)v115, v40);
          v89 = v122;
          if (v122
            || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v122),
                WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v122),
                (v89 = v122) != 0))
          {
            v90 = *(_DWORD *)v89;
            *(_DWORD *)v89 += 2;
            v115[0] = v89;
            if (BYTE4(v126))
              goto LABEL_219;
            *(_DWORD *)v89 = v90 + 4;
LABEL_224:
            *a4 = v89;
          }
          else
          {
            v115[0] = 0;
            if (!BYTE4(v126))
            {
              v89 = 0;
              goto LABEL_224;
            }
LABEL_219:
            WTF::String::trim();
            WTF::String::simplifyWhiteSpace();
            v91 = v113;
            v113 = 0;
            if (v91)
            {
              if (*(_DWORD *)v91 == 2)
                WTF::StringImpl::destroy(v91, v16);
              else
                *(_DWORD *)v91 -= 2;
            }
            v89 = v115[0];
          }
          v115[0] = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 2)
              WTF::StringImpl::destroy(v89, v16);
            else
              *(_DWORD *)v89 -= 2;
          }
          v92 = *((_QWORD *)v5 + 1);
          if (__ldaxr((unsigned __int8 *)v92))
          {
            __clrex();
            goto LABEL_231;
          }
          if (__stxr(1u, (unsigned __int8 *)v92))
LABEL_231:
            MEMORY[0x19AEA534C](v92);
          v94 = *(_QWORD *)(v92 + 8);
          v95 = v94 - 1;
          *(_QWORD *)(v92 + 8) = v94 - 1;
          if (v94 == 1)
          {
            v109 = *(_QWORD *)(v92 + 16);
            v96 = *(_QWORD *)(v92 + 24);
            *(_QWORD *)(v92 + 24) = 0;
            v97 = v109 != 0;
          }
          else
          {
            v96 = 0;
            v97 = 1;
          }
          v98 = __ldxr((unsigned __int8 *)v92);
          if (v98 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v92))
            {
              if (!v95)
              {
LABEL_240:
                if (v96)
                  (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
                if (!v97)
                  WTF::fastFree((WTF *)v92, v16);
              }
LABEL_244:
              v99 = v121;
              v121 = 0;
              if (!v99)
                goto LABEL_261;
              v100 = *((_QWORD *)v99 + 1);
              if (__ldaxr((unsigned __int8 *)v100))
              {
                __clrex();
                goto LABEL_248;
              }
              if (__stxr(1u, (unsigned __int8 *)v100))
LABEL_248:
                MEMORY[0x19AEA534C](v100);
              v102 = *(_QWORD *)(v100 + 8);
              v103 = v102 - 1;
              *(_QWORD *)(v100 + 8) = v102 - 1;
              if (v102 == 1)
              {
                v110 = *(_QWORD *)(v100 + 16);
                v104 = *(_QWORD *)(v100 + 24);
                *(_QWORD *)(v100 + 24) = 0;
                v105 = v110 != 0;
              }
              else
              {
                v104 = 0;
                v105 = 1;
              }
              v106 = __ldxr((unsigned __int8 *)v100);
              if (v106 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v100))
                {
                  if (!v103)
                  {
LABEL_257:
                    if (v104)
                      (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
                    if (!v105)
                      WTF::fastFree((WTF *)v100, v16);
                  }
LABEL_261:
                  v107 = v123;
                  v123 = 0;
                  if (v107)
                  {
                    if (*(_DWORD *)v107 == 2)
                      WTF::StringImpl::destroy(v107, v16);
                    else
                      *(_DWORD *)v107 -= 2;
                  }
                  result = (unsigned int *)v122;
                  v122 = 0;
                  if (result)
                  {
                    if (*result == 2)
                      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
                    else
                      *result -= 2;
                  }
                  goto LABEL_267;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v100);
              if (!v103)
                goto LABEL_257;
              goto LABEL_261;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v92);
          if (!v95)
            goto LABEL_240;
          goto LABEL_244;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v34);
      goto LABEL_83;
    }
  }
LABEL_70:
  (*(void (**)(uint64_t **__return_ptr, unsigned int *, uint64_t))(*(_QWORD *)v5 + 984))(&v116, v5, 16);
  if (HIDWORD(v117))
  {
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v116, v30);
LABEL_73:
    BYTE2(v126) = 0;
    goto LABEL_74;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, unsigned int *, uint64_t))(*(_QWORD *)v5 + 984))(&v122, v5, 6);
  v31 = HIDWORD(v123);
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v122, v32);
  result = (unsigned int *)WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v116, v33);
  if (v31)
    goto LABEL_73;
  if ((v13 & 1) != 0 || (*(_QWORD *)(v12 + 16) & 0x1FLL) != 0x1A)
    goto LABEL_74;
  *a4 = 0;
LABEL_267:
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v9, v16);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::AccessibilityNodeObject::textUnderElement(WebCore::TextUnderElementMode)const::$_0::operator()<WebCore::AccessibilityObject>(uint64_t *a1, WebCore *a2)
{
  uint64_t v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  WebCore *v9;
  WebCore::AXCoreObject *v10;
  int v11;
  int v12;
  WTF::StringImpl *v13;

  v4 = *a1;
  v5 = *(_BYTE *)(*a1 + 4);
  *(_BYTE *)(v4 + 4) = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore *, _QWORD, _QWORD))(*(_QWORD *)a2 + 1392))(&v13, a2, *(_QWORD *)v4, *(_QWORD *)(v4 + 8));
  result = v13;
  if (!v13)
    goto LABEL_13;
  if (!*((_DWORD *)v13 + 1))
  {
    v13 = 0;
LABEL_11:
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
    goto LABEL_13;
  }
  v8 = a1[1];
  if (*(_BYTE *)a1[2]
    || (v9 = *(WebCore **)a1[3], (WebCore::needsSpaceFromDisplay(a2, v6) & 1) != 0)
    || v9 && (WebCore::needsSpaceFromDisplay(v9, v10) & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v12 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)a2 + 144))(a2);
    v11 = v12;
    if (v9 && (v12 & 1) == 0)
      v11 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v9 + 144))(v9);
  }
  WebCore::appendNameToStringBuilder(v8, (WTF::StringImpl *)&v13, v11);
  *(_BYTE *)a1[2] = 0;
  result = v13;
  v13 = 0;
  if (result)
    goto LABEL_11;
LABEL_13:
  *(_BYTE *)(v4 + 4) = v5;
  return result;
}

unsigned int *WebCore::AccessibilityNodeObject::ariaLabeledByElements(WebCore::AccessibilityNodeObject *this, WebCore::AccessibilityObject *a2)
{
  unsigned int *result;
  unsigned int v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  unsigned int v11;

  result = WebCore::AccessibilityObject::elementsFromAttribute(a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelledbyAttr, (WTF::StringImpl *)&v9);
  v5 = v11;
  if (v11)
  {
    *(_QWORD *)this = v9;
    *((_DWORD *)this + 2) = v10;
    *((_DWORD *)this + 3) = v5;
    return result;
  }
  result = WebCore::AccessibilityObject::elementsFromAttribute(a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labeledbyAttr, this);
  v7 = v9;
  if (!v11)
  {
    if (!v9)
      return result;
LABEL_15:
    v9 = 0;
    v10 = 0;
    return (unsigned int *)WTF::fastFree(v7, v6);
  }
  v8 = 8 * v11;
  do
  {
    result = *(unsigned int **)v7;
    *(_QWORD *)v7 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
      }
      else
      {
        result[6] -= 2;
      }
    }
    v7 = (WTF *)((char *)v7 + 8);
    v8 -= 8;
  }
  while (v8);
  v7 = v9;
  if (v9)
    goto LABEL_15;
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::title@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Element *v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  WTF *v26;
  unsigned int v27[4];
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!result
    || (result = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(result)) == 0)
  {
    *a2 = 0;
    return result;
  }
  v6 = result;
  do
    v7 = __ldaxr((unsigned int *)result);
  while (__stlxr(v7 + 1, (unsigned int *)result));
  v8 = *(_QWORD *)(result + 8);
  if (!v8)
    goto LABEL_57;
  if ((*(_WORD *)(v8 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v9 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v9 + 2;
    if ((*(_DWORD *)(*(_QWORD *)(v8 + 240) + 12) & 0x14001) != 0)
    {
      result = (uint64_t)WebCore::HTMLInputElement::valueWithDefault((WebCore::HTMLInputElement *)v8, a2);
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, v5);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      goto LABEL_58;
    }
    if (v9)
    {
      *(_DWORD *)(v8 + 24) = v9;
    }
    else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v5);
    }
  }
  v10 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v10
    || ((*(_WORD *)(v10 + 28) & 0x10) == 0
     || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    && ((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 144))(this) & 1) == 0
    && (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) != 87
    && (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) != 81
    && (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 2976))(this) != 81
    && ((v11 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 848))(this)) == 0
     || *(_BYTE *)(v11 + 46) != 23))
  {
LABEL_33:
    v17 = *(_QWORD *)(v6 + 8);
    if (v17)
    {
      if ((*(_WORD *)(v17 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
      {
        result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 56))(this);
        if (!(_DWORD)result)
          goto LABEL_57;
        result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
        if ((_DWORD)result == 84)
          goto LABEL_57;
      }
    }
    result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
    v18 = (result - 75);
    if (v18 <= 0x39)
    {
      if (((1 << (result - 75)) & 0x20040400000220FLL) != 0)
        goto LABEL_43;
      if (v18 == 39)
      {
LABEL_57:
        *a2 = 0;
        goto LABEL_58;
      }
    }
    if ((result - 10) > 0x3B || ((1 << (result - 10)) & 0xC00000000000011) == 0)
    {
      v21 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 104))(this);
      v20 = *(_QWORD *)this;
      if (!v21)
      {
        result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(v20 + 1456))(this);
        if ((_DWORD)result == 45)
        {
          result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *, uint64_t, _QWORD))(*(_QWORD *)this
                                                                                                  + 1392))(this, 0x100010100, 0);
          goto LABEL_58;
        }
        goto LABEL_57;
      }
LABEL_44:
      result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *, uint64_t, _QWORD))(v20 + 1392))(this, 0x100010000, 0);
      goto LABEL_58;
    }
LABEL_43:
    v20 = *(_QWORD *)this;
    goto LABEL_44;
  }
  v12 = (WebCore::Element *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 832))(this);
  WebCore::Accessibility::labelsForElement(v27, v12);
  if (!v27[3])
  {
LABEL_32:
    WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v13);
    goto LABEL_33;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3000))(&v29, this);
  v14 = v29;
  if (!v29 || !*((_DWORD *)v29 + 1))
  {
    WebCore::AccessibilityObject::getAttributeTrimmed(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr, &v28);
    v14 = v28;
    if (v28 && !*((_DWORD *)v28 + 1))
    {
      v28 = 0;
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v14 -= 2;
      v14 = 0;
    }
    v15 = v29;
    v29 = 0;
    if (!v15)
    {
LABEL_29:
      if (!v14)
        goto LABEL_66;
      goto LABEL_30;
    }
    if (*(_DWORD *)v15 != 2)
    {
      *(_DWORD *)v15 -= 2;
      goto LABEL_29;
    }
    WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
    if (!v14)
      goto LABEL_66;
  }
LABEL_30:
  v16 = *((_DWORD *)v14 + 1);
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v13);
    if (v16)
      goto LABEL_32;
  }
  else
  {
    *(_DWORD *)v14 -= 2;
    if (v16)
      goto LABEL_32;
  }
LABEL_66:
  WebCore::AccessibilityNodeObject::textForLabelElements(a2, this, (uint64_t)v27);
  result = WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v24);
  do
  {
LABEL_58:
    v22 = __ldaxr((unsigned int *)v6);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, (unsigned int *)v6));
  if (!v23)
  {
    atomic_store(1u, (unsigned int *)v6);
    v25 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v25)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v25));
    v26 = *(WTF **)(v6 + 16);
    if (v26)
    {
      *(_QWORD *)(v6 + 16) = 0;
      *(_DWORD *)(v6 + 24) = 0;
      WTF::fastFree(v26, v5);
    }
    return WTF::fastFree((WTF *)v6, v5);
  }
  return result;
}

unsigned int *WebCore::AccessibilityNodeObject::text@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  int v4;
  uint64_t v5;
  unsigned int *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v16;
  uint64_t v17;
  void *v18;
  void *v19;
  WTF *v20;
  uint64_t v21;

  v4 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 112))(this);
  v5 = *(_QWORD *)this;
  if (v4)
    return (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(v5 + 3144))(this);
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(v5 + 2976))(this) == 107)
  {
    v20 = 0;
    v21 = 0;
    result = (unsigned int *)WebCore::AccessibilityNodeObject::alternativeText(this, (uint64_t)&v20);
    v8 = HIDWORD(v21);
    v9 = v20;
    if (HIDWORD(v21))
    {
      v10 = *(WTF::StringImpl **)v20;
      if (*(_QWORD *)v20 && *((_DWORD *)v10 + 1))
      {
        v11 = 0;
        *(_DWORD *)v10 += 2;
        *a2 = v10;
      }
      else
      {
        v11 = 1;
      }
      v12 = 16 * v8;
      do
      {
        result = *(unsigned int **)v9;
        *(_QWORD *)v9 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
          else
            *result -= 2;
        }
        v9 = (WTF *)((char *)v9 + 16);
        v12 -= 16;
      }
      while (v12);
      v9 = v20;
      if (v20)
        goto LABEL_19;
    }
    else
    {
      v11 = 1;
      if (v20)
      {
LABEL_19:
        v20 = 0;
        LODWORD(v21) = 0;
        result = (unsigned int *)WTF::fastFree(v9, v7);
      }
    }
    if (!v11)
      return result;
  }
  v13 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
  v14 = *(_QWORD *)this;
  if (v13 == 107)
    return (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *, uint64_t, _QWORD))(v14 + 1392))(this, 0x100010000, 0);
  result = (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(v14 + 1456))(this);
  v16 = ((_DWORD)result - 101) <= 0x19 && ((1 << ((_BYTE)result - 101)) & 0x3000001) != 0
     || (_DWORD)result == 19;
  if (v16
    && (result = (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this)) != 0
    && (v17 = (uint64_t)result, (result[7] & 8) != 0))
  {
    result[6] += 4;
    if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 872))(result) & 1) != 0
      && (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 120))(this))
    {
      result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 1392))(v17);
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v17, v19);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
    }
    else
    {
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v17, v18);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
      result = WebCore::Element::innerText((WebCore::Element *)v17, a2);
    }
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v17, v19);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::stringValue@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  __int16 v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v23;
  int v24;
  char v25;

  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!result)
    goto LABEL_53;
  v5 = result;
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 2976))(this) != 107)
  {
    v9 = *(_WORD *)(v5 + 28);
    if ((v9 & 2) != 0)
      return (*(uint64_t (**)(WebCore::AccessibilityNodeObject *, uint64_t, _QWORD))(*(_QWORD *)this + 1392))(this, 0x100010000, 0);
    if ((v9 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    {
      *(_DWORD *)(v5 + 24) += 2;
      result = WebCore::HTMLSelectElement::selectedIndex((WebCore::HTMLSelectElement *)v5);
      v11 = result;
      if (*(_BYTE *)(v5 + 300))
      {
        result = (uint64_t)WebCore::HTMLSelectElement::recalcListItems(v5, (void *)1, 1u);
        if ((v11 & 0x80000000) != 0)
          goto LABEL_20;
      }
      else if ((result & 0x80000000) != 0)
      {
        goto LABEL_20;
      }
      if (*(_DWORD *)(v5 + 196) > v11)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v5 + 184) + 8 * v11);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 8);
          if (v13)
          {
            *(_DWORD *)(v13 + 24) += 2;
            WebCore::Element::attributeTrimmedWithDefaultARIA((WTF::StringImpl *)v13, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr, a2);
            result = (uint64_t)*a2;
            if (*a2)
            {
              if (*(_DWORD *)(result + 4))
              {
                if (*(_DWORD *)(v13 + 24) == 2)
                {
                  if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                    result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v13, v10);
                }
                else
                {
                  *(_DWORD *)(v13 + 24) -= 2;
                }
                goto LABEL_30;
              }
              *a2 = 0;
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v10);
              else
                *(_DWORD *)result -= 2;
            }
            else
            {
              *a2 = 0;
            }
            if (*(_DWORD *)(v13 + 24) == 2)
            {
              if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v13, v10);
            }
            else
            {
              *(_DWORD *)(v13 + 24) -= 2;
            }
          }
        }
      }
LABEL_20:
      if (*(_BYTE *)(v5 + 297))
        *a2 = 0;
      else
        result = (uint64_t)WebCore::HTMLSelectElement::value((unsigned int *)v5, a2);
LABEL_30:
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v5, v10);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
      return result;
    }
    if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 19)
    {
      v14 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
      v15 = *(unsigned int *)(v14 + 12);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD **)v14;
        v17 = 8 * v15;
        while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v16 + 1456))(*v16) != 67)
        {
          ++v16;
          v17 -= 8;
          if (!v17)
            goto LABEL_44;
        }
        (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)*v16 + 1928))(&v23);
        if (v25)
        {
          if (v24 && *(_QWORD *)v23)
          {
            result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v23 + 1384))(*(_QWORD *)v23);
            if (v25)
              return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v19);
            return result;
          }
          WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v18);
        }
      }
    }
LABEL_44:
    result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
    if ((result - 101) <= 0x19 && ((1 << (result - 101)) & 0x3000001) != 0 || (_DWORD)result == 19)
      return (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1400))(this);
LABEL_53:
    *a2 = 0;
    return result;
  }
  result = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1400))(this);
  if (!*a2 || !*((_DWORD *)*a2 + 1))
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityNodeObject *, uint64_t, _QWORD))(*(_QWORD *)this + 1392))(&v23, this, 0x100010000, 0);
    v7 = v23;
    v23 = 0;
    result = (uint64_t)*a2;
    *a2 = v7;
    if (result)
    {
      v8 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result != 2)
      {
LABEL_7:
        *(_DWORD *)result = v8;
        return result;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      result = (uint64_t)v23;
      v23 = 0;
      if (result)
      {
        v8 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result != 2)
          goto LABEL_7;
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::Element::attributeTrimmedWithDefaultARIA@<X0>(WTF::StringImpl *this@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::QualifiedName::QualifiedNameImpl *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::AccessibilityNodeObject *v21;
  WTF::StringImpl *v22[2];
  WTF::StringImpl *v23;

  v3 = this;
  v5 = *((_QWORD *)this + 13);
  if (!v5)
    goto LABEL_12;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) == 0)
  {
    v7 = v5 + 32;
    LODWORD(v8) = v6 >> 5;
    if ((_DWORD)v8)
      goto LABEL_4;
LABEL_12:
    v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v5 + 40);
  LODWORD(v8) = *(_DWORD *)(v5 + 52);
  if (!(_DWORD)v8)
    goto LABEL_12;
LABEL_4:
  v9 = *a2;
  v8 = v8;
  v10 = (WTF::StringImpl **)(v7 + 8);
  while (1)
  {
    v11 = *(v10 - 1);
    if (v11 == v9 || *((_QWORD *)v11 + 3) == *((_QWORD *)v9 + 3) && *((_QWORD *)v11 + 4) == *((_QWORD *)v9 + 4))
      break;
    v10 += 2;
    if (!--v8)
    {
      v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v12 = *v10;
  if (!v12)
  {
    v15 = *((_QWORD *)this + 9);
    if ((v15 & 0x3000000000000000) != 0x2000000000000000
      && ((v15 & 0x3000000000000000) != 0x3000000000000000 || (*((_WORD *)this + 14) & 0x100) != 0))
    {
      goto LABEL_31;
    }
    v16 = v15 & 0xFFFFFFFFFFFFLL;
    if (!v16)
      goto LABEL_31;
    v17 = *(_QWORD *)(v16 + 104);
    if (!v17)
      goto LABEL_31;
    v18 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v17 + 8), a2);
    v19 = *(_QWORD *)(v17 + 8);
    if (v19)
      v19 += 32 * *(unsigned int *)(v19 - 4);
    if (v19 != v18)
    {
      v22[0] = v3;
      v22[1] = v3;
      v20 = *(unsigned int *)(v18 + 24);
      if ((_DWORD)v20 == -1)
      {
        v21 = (WebCore::AccessibilityNodeObject *)std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)WebCore::AccessibilityNodeObject::dateTimeValue(v21);
      }
      v23 = (WTF::StringImpl *)v22;
      this = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore24CustomElementDefaultARIA17valueForAttributeERKNS8_7ElementERKNS8_13QualifiedNameEE3__0JZNKS9_17valueForAttributeESC_SF_E3__1ZNKS9_17valueForAttributeESC_SF_E3__2EEEEEJRKNS0_6__implIJNS6_10AtomStringENS6_7WeakPtrISA_NS8_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISO_EEEENS6_6VectorISR_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v20])(&v23, v18 + 8);
    }
    else
    {
LABEL_31:
      this = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
    }
    v12 = *(WTF::StringImpl **)this;
    if (!*(_QWORD *)this)
      goto LABEL_33;
  }
  if (*((_DWORD *)v12 + 1))
  {
    *(_DWORD *)v12 += 2;
    v22[0] = v12;
    WTF::String::trim();
    WTF::String::simplifyWhiteSpace();
    v14 = v23;
    v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    this = v22[0];
    v22[0] = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v13);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
LABEL_33:
    *a3 = 0;
  }
  return this;
}

double WebCore::AccessibilityNodeObject::dateTimeValue(WebCore::AccessibilityNodeObject *this)
{
  double v2;
  uint64_t v3;
  double v4;

  v2 = 0.0;
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 20)
  {
    v3 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
    if (v3)
    {
      if ((*(_WORD *)(v3 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        WebCore::HTMLInputElement::accessibilityValueAsDate((WebCore::HTMLInputElement *)v3);
        return v4;
      }
    }
  }
  return v2;
}

uint64_t WebCore::AccessibilityObject::dateTimeComponentsType(WebCore::AccessibilityObject *this)
{
  uint64_t v2;

  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 20
    && (v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this)) != 0
    && (*(_WORD *)(v2 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 240) + 912))(*(_QWORD *)(v2 + 240));
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::AccessibilityNodeObject::colorValue(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ColorInputType *v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  char v13;

  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) != 16)
    return 0;
  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v2)
    return 0;
  v3 = v2;
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  v4 = *(WebCore::ColorInputType **)(v2 + 240);
  if (v4)
    v5 = *((_DWORD *)v4 + 3) == 4;
  else
    v5 = 0;
  if (v5)
    WebCore::ColorInputType::valueAsColor(v4, (uint64_t *)&v12);
  else
    v12 = 0x1104000000000000;
  v6 = WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>(&v12, (uint64_t)&v13);
  if ((v12 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v7);
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v7);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v6;
}

WTF::StringImpl *WebCore::AccessibilityNodeObject::accessibilityDescriptionForChildren@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringBuilder *v11;
  __n128 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  char v25;

  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!result
    || (v5 = result,
        (result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1488))(this)) == 0))
  {
    *a2 = 0;
    return result;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  if ((*((_BYTE *)v5 + 28) & 4) == 0 || (v7 = *((_QWORD *)v5 + 10)) == 0)
  {
LABEL_25:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v22);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v22);
    result = v22;
    if (v22)
      goto LABEL_26;
    goto LABEL_27;
  }
  v8 = (uint64_t)result;
  do
  {
    if ((*(_WORD *)(v7 + 28) & 8) == 0)
      goto LABEL_15;
    v9 = WebCore::AXObjectCache::getOrCreate(v8, v7, 0);
    if (!v9)
      goto LABEL_15;
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v9 + 3000))(&v21);
    if (!v21 || !*((_DWORD *)v21 + 1))
    {
      WebCore::accessibleNameForNode((WTF::StringImpl *)&v20, (WebCore::Node *)v7, 0, v12, v10, v11);
      v15 = v20;
      v14 = v21;
      v20 = 0;
      v21 = v15;
      if (v14)
      {
        v16 = *(_DWORD *)v14 - 2;
        if (*(_DWORD *)v14 != 2)
          goto LABEL_11;
        WTF::StringImpl::destroy(v14, v13);
        v14 = v20;
        v20 = 0;
        if (v14)
        {
          v16 = *(_DWORD *)v14 - 2;
          if (*(_DWORD *)v14 != 2)
          {
LABEL_11:
            *(_DWORD *)v14 = v16;
            goto LABEL_12;
          }
          WTF::StringImpl::destroy(v14, v18);
        }
      }
    }
LABEL_12:
    WebCore::appendNameToStringBuilder((uint64_t)&v22, (WTF::StringImpl *)&v21, 1);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v6);
      else
        *(_DWORD *)v17 -= 2;
    }
LABEL_15:
    v7 = *(_QWORD *)(v7 + 56);
  }
  while (v7);
  result = v22;
  if (!v22)
    goto LABEL_25;
LABEL_26:
  *(_DWORD *)result += 2;
LABEL_27:
  *a2 = result;
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v6);
      result = v22;
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::AccessibilityNodeObject::descriptionForElements(WTF::StringImpl **a1, uint64_t a2, WebCore::Node **a3, unsigned int a4)
{
  uint64_t v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  uint64_t v10;
  WTF::StringBuilder *v11;
  __n128 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  char v21;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  if (a4)
  {
    v7 = 8 * a4;
    do
    {
      v8 = *a3;
      v9 = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
      WebCore::accessibleNameForNode((WTF::StringImpl *)&v17, v8, v9, v12, v10, v11);
      WebCore::appendNameToStringBuilder((uint64_t)&v18, (WTF::StringImpl *)&v17, 1);
      v14 = v17;
      v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++a3;
      v7 -= 8;
    }
    while (v7);
    result = v18;
    if (v18)
      goto LABEL_11;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v18);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v18);
  result = v18;
  if (v18)
LABEL_11:
    *(_DWORD *)result += 2;
  *a1 = result;
  v16 = v19;
  v19 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v13);
      result = v18;
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WebCore::AccessibilityNodeObject::ariaDescribedByAttribute@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  void *v4;
  WTF *result;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  unsigned int v11;

  WebCore::AccessibilityObject::elementsFromAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_describedbyAttr, (WTF::StringImpl *)&v9);
  WebCore::AccessibilityNodeObject::descriptionForElements(a2, (uint64_t)this, (WebCore::Node **)v9, v11);
  if (v11)
  {
    v6 = v9;
    v7 = 8 * v11;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, v4);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  result = v9;
  if (v9)
  {
    v9 = 0;
    v10 = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

WTF *WebCore::AccessibilityNodeObject::ariaLabeledByAttribute@<X0>(WebCore::AccessibilityNodeObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  void *v4;
  WTF *result;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  unsigned int v11;

  WebCore::AccessibilityNodeObject::ariaLabeledByElements((WebCore::AccessibilityNodeObject *)&v9, this);
  WebCore::AccessibilityNodeObject::descriptionForElements(a2, (uint64_t)this, (WebCore::Node **)v9, v11);
  if (v11)
  {
    v6 = v9;
    v7 = 8 * v11;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, v4);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  result = v9;
  if (v9)
  {
    v9 = 0;
    v10 = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

uint64_t WebCore::AccessibilityNodeObject::hasAttributesRequiredForInclusion(WebCore::AccessibilityNodeObject *this)
{
  WebCore *v1;
  WebCore::Element *v2;
  WebCore *v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = (WebCore *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 832))(this);
  if (!v1)
    return 0;
  v3 = v1;
  *((_DWORD *)v1 + 6) += 2;
  if (WebCore::hasAccNameAttribute(v1, v2))
    goto LABEL_45;
  v5 = *((_QWORD *)v3 + 13);
  if (!v5)
    goto LABEL_14;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) == 0)
  {
    v7 = v5 + 32;
    LODWORD(v8) = v6 >> 5;
    if (v6 >> 5)
      goto LABEL_6;
LABEL_14:
    v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(v5 + 40);
  LODWORD(v8) = *(_DWORD *)(v5 + 52);
  if (!(_DWORD)v8)
    goto LABEL_14;
LABEL_6:
  v8 = v8;
  v9 = (uint64_t *)(v7 + 8);
  while (1)
  {
    v10 = *(v9 - 1);
    if (v10 == WebCore::MathMLNames::alttextAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::MathMLNames::alttextAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::MathMLNames::alttextAttr + 32))
    {
      break;
    }
    v9 += 2;
    if (!--v8)
    {
      v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_15:
  v11 = *v9;
  if (v11 && *(_DWORD *)(v11 + 4))
    goto LABEL_45;
  if (!v5)
    goto LABEL_28;
  v12 = *(_DWORD *)(v5 + 4);
  if ((v12 & 1) == 0)
  {
    v13 = v5 + 32;
    LODWORD(v14) = v12 >> 5;
    if (v12 >> 5)
      goto LABEL_20;
LABEL_28:
    v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_29;
  }
  v13 = *(_QWORD *)(v5 + 40);
  LODWORD(v14) = *(_DWORD *)(v5 + 52);
  if (!(_DWORD)v14)
    goto LABEL_28;
LABEL_20:
  v14 = v14;
  v15 = (uint64_t *)(v13 + 8);
  while (1)
  {
    v16 = *(v15 - 1);
    if (v16 == WebCore::HTMLNames::altAttr
      || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
      && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
    {
      break;
    }
    v15 += 2;
    if (!--v14)
    {
      v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_29:
  v17 = *v15;
  if (v17 && *(_DWORD *)(v17 + 4))
    goto LABEL_45;
  if (!v5)
    goto LABEL_42;
  v18 = *(_DWORD *)(v5 + 4);
  if ((v18 & 1) == 0)
  {
    v19 = v5 + 32;
    v20 = v18 >> 5;
    if (v18 >> 5)
      goto LABEL_34;
LABEL_42:
    v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_43;
  }
  v19 = *(_QWORD *)(v5 + 40);
  v20 = *(_DWORD *)(v5 + 52);
  if (!v20)
    goto LABEL_42;
LABEL_34:
  v21 = v20;
  v22 = (uint64_t *)(v19 + 8);
  while (1)
  {
    v23 = *(v22 - 1);
    if (v23 == WebCore::HTMLNames::aria_helpAttr
      || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_helpAttr + 24)
      && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_helpAttr + 32))
    {
      break;
    }
    v22 += 2;
    if (!--v21)
    {
      v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_43:
  v24 = *v22;
  if (v24 && *(_DWORD *)(v24 + 4))
  {
LABEL_45:
    v25 = 1;
    goto LABEL_46;
  }
  v25 = 0;
LABEL_46:
  if (*((_DWORD *)v3 + 6) == 2)
  {
    if ((*((_WORD *)v3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v3, v4);
  }
  else
  {
    *((_DWORD *)v3 + 6) -= 2;
  }
  return v25;
}

uint64_t WebCore::AccessibilityNodeObject::isFocused(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *((_QWORD *)this + 30);
  if (!v1)
    return 0;
  if (!*(_QWORD *)(v1 + 8))
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this)
                             + 40)
                 + 8);
  v5 = *(_QWORD *)(v4 + 1248);
  if (!v5)
    return 0;
  if (v5 != (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this))
  {
    if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 138)
    {
      v6 = *(_QWORD *)(v4 + 528);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064);
          if ((*(_WORD *)(v8 + 256) & 4) != 0)
          {
            v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8) + 528);
            if (v9)
            {
              v10 = *(_QWORD *)(v9 + 8);
              if (v10)
              {
                v11 = *(_QWORD *)(v10 + 24);
                if (v11)
                {
                  v12 = *(_QWORD *)(v11 + 8);
                  if (v12)
                    return *(_WORD *)(*(_QWORD *)(v12 + 72) + 26) & 1;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  return 1;
}

void WebCore::AccessibilityNodeObject::setFocused(WebCore::AccessibilityNodeObject *this, int a2)
{
  WebCore::Document *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  __int128 v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  WebCore::AccessibilityObject::setFocused(this, a2);
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 800))(this))
  {
    v4 = (WebCore::Document *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1712))(this);
    LOBYTE(v26) = 0;
    v27 = 0;
    WebCore::UserGestureIndicator::UserGestureIndicator(&v23, 257, (uint64_t)v4, 1, 0, &v26, 1);
    if (!a2
      || (v5 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this)) == 0
      || (*(_WORD *)(v5 + 28) & 8) == 0)
    {
      v25 = 0;
      v24 = 0;
      WebCore::Document::setFocusedElement(v4, 0, &v24);
LABEL_6:
      WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v23);
      return;
    }
    v6 = *((_QWORD *)this + 1);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_12:
    ++*(_QWORD *)(v6 + 8);
    v8 = __ldxr((unsigned __int8 *)v6);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
LABEL_17:
        v9 = *((_QWORD *)v4 + 156);
        if (v9 == (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this))
        {
          v25 = 0;
          v24 = 0;
          WebCore::Document::setFocusedElement(v4, 0, &v24);
        }
        v10 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1488))(this);
        if (v10)
        {
          v12 = v10;
          *(_BYTE *)(v10 + 736) = 1;
          v13 = *((_QWORD *)this + 30);
          if (v13)
            v14 = *(_WORD **)(v13 + 8);
          else
            v14 = 0;
          if ((v14[14] & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195608E28);
          }
          v25 = 0;
          v24 = 0;
          (*(void (**)(_WORD *, int *))(*(_QWORD *)v14 + 656))(v14, &v24);
          *(_BYTE *)(v12 + 736) = 0;
        }
        v15 = *((_QWORD *)this + 1);
        if (__ldaxr((unsigned __int8 *)v15))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v15))
        {
          goto LABEL_28;
        }
        MEMORY[0x19AEA534C](v15);
LABEL_28:
        v17 = *(_QWORD *)(v15 + 8);
        v18 = v17 - 1;
        *(_QWORD *)(v15 + 8) = v17 - 1;
        if (v17 == 1)
        {
          v22 = *(_QWORD *)(v15 + 16);
          v19 = *(_QWORD *)(v15 + 24);
          *(_QWORD *)(v15 + 24) = 0;
          v20 = v22 != 0;
        }
        else
        {
          v19 = 0;
          v20 = 1;
        }
        v21 = __ldxr((unsigned __int8 *)v15);
        if (v21 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v15))
          {
LABEL_35:
            if (!v18)
            {
              if (v19)
                (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
              if (!v20)
                WTF::fastFree((WTF *)v15, v11);
            }
            goto LABEL_6;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v15);
        goto LABEL_35;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    goto LABEL_17;
  }
}

uint64_t WebCore::AccessibilityNodeObject::canSetFocusAttribute(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v2)
    return 0;
  v3 = v2;
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 138)
    return 1;
  if ((*(_WORD *)(v3 + 28) & 8) == 0)
    return 0;
  *(_DWORD *)(v3 + 24) += 2;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 960))(v3) & 1) != 0)
    v4 = 0;
  else
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 544))(v3);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v4;
}

uint64_t WebCore::AccessibilityNodeObject::canSetValueAttribute(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
  if (!v2)
    return 0;
  v4 = v2;
  if ((*(_WORD *)(v2 + 28) & 0x10) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
    if (v5 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
    {
      v6 = *(_QWORD *)(v2 + 112);
      *(_DWORD *)(v2 + 24) += 2;
LABEL_9:
      if ((*(unsigned int (**)(void))(v6 + 288))())
        v7 = (*(_BYTE *)(v4 + 160) & 0x20) == 0;
      else
        v7 = 1;
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, v9);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
      return v7;
    }
    if (v5 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v8 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v8 + 2;
      if ((*(_DWORD *)(*(_QWORD *)(v2 + 240) + 12) & 0x2A8C20) != 0)
      {
        v6 = *(_QWORD *)(v2 + 112);
        goto LABEL_9;
      }
      if (v8)
      {
        *(_DWORD *)(v2 + 24) = v8;
      }
      else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
      }
    }
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3152))(&v19, this);
  if (v19 && *((_DWORD *)v19 + 1))
  {
    v7 = MEMORY[0x19AEA53F4]() ^ 1;
    goto LABEL_24;
  }
  if (((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 480))(this) & 1) != 0)
  {
LABEL_17:
    v7 = 1;
    goto LABEL_24;
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 2976))(this) == 81
    || (v11 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 848))(this)) != 0
    && *(_BYTE *)(v11 + 46) == 23)
  {
LABEL_21:
    v7 = 0;
    goto LABEL_24;
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 87
    || (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 81
    || (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 102
    || (*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) == 100)
  {
    goto LABEL_17;
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this) != 138)
    goto LABEL_52;
  v14 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1712))(this);
  if (!v14)
    goto LABEL_21;
  v4 = v14;
  v15 = *(_QWORD *)(v14 + 1272);
  if (!v15)
    goto LABEL_52;
  if ((*(_WORD *)(v15 + 28) & 0x10) == 0)
    goto LABEL_52;
  if (*(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    goto LABEL_52;
  v16 = *(_QWORD *)(v15 + 80);
  if (!v16)
    goto LABEL_52;
  while ((*(_WORD *)(v16 + 28) & 0x10) == 0)
  {
    v16 = *(_QWORD *)(v16 + 56);
    if (!v16)
      goto LABEL_52;
  }
  v17 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
  v18 = *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24);
  if (v18 == v17)
  {
LABEL_51:
    v7 = 1;
    if (WebCore::Node::computeEditability(v16, 0, 1))
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_47:
  if (v18 == *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
    goto LABEL_51;
  while (1)
  {
    v16 = *(_QWORD *)(v16 + 56);
    if (!v16)
      break;
    if ((*(_WORD *)(v16 + 28) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24);
      if (v18 != v17)
        goto LABEL_47;
      goto LABEL_51;
    }
  }
LABEL_52:
  v7 = WebCore::Node::computeEditability(v4, 0, 1) != 0;
LABEL_24:
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v7;
}

uint64_t WebCore::AccessibilityNodeObject::determineAriaRoleAttribute(WebCore::AccessibilityNodeObject *this)
{
  WebCore::AccessibilityObject *Attribute;
  const WTF::String *v3;
  int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Element *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 v18;
  WebCore *v19;
  WebCore::Element *v20;
  uint64_t v22;
  int v23;

  Attribute = (WebCore::AccessibilityObject *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::roleAttr);
  if (!*(_QWORD *)Attribute || !*(_DWORD *)(*(_QWORD *)Attribute + 4))
    return -122;
  v4 = WebCore::AccessibilityObject::ariaRoleToWebCoreRole(Attribute, v3);
  if (v4 == 10)
  {
    v5 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 3280))(this);
  }
  else
  {
    v5 = v4;
    if (v4 == 86)
    {
      if (((*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 800))(this) & 1) != 0)
        return -122;
LABEL_46:
      if (WebCore::AccessibilityObject::supportsARIAAttributes(this))
        return -122;
      else
        return 86;
    }
  }
  if (v5 == 126)
  {
    v7 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_multilineAttr);
    if (v7)
    {
      v8 = *(_DWORD *)v7;
      v9 = *(_DWORD *)(v7 + 4);
      *(_DWORD *)v7 += 2;
      if (v9 == 4)
      {
        v13 = *(_QWORD *)(v7 + 8);
        if ((*(_BYTE *)(v7 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v13 & 0xDF) != 0x54
            || (*(_BYTE *)(v13 + 1) & 0xDF) != 0x52
            || (*(_BYTE *)(v13 + 2) & 0xDF) != 0x55)
          {
            goto LABEL_12;
          }
          v14 = *(unsigned __int8 *)(v13 + 3);
        }
        else
        {
          if ((*(_WORD *)v13 & 0xFFDF) != 0x54
            || (*(_WORD *)(v13 + 2) & 0xFFDF) != 0x52
            || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x55)
          {
            goto LABEL_12;
          }
          v14 = *(unsigned __int16 *)(v13 + 6);
        }
        if ((v14 & 0xFFFFFFDF) == 0x45)
          goto LABEL_23;
        goto LABEL_12;
      }
      if (v9 == 5)
      {
        v22 = *(_QWORD *)(v7 + 8);
        if ((*(_BYTE *)(v7 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v22 & 0xDF) != 0x46
            || (*(_BYTE *)(v22 + 1) & 0xDF) != 0x41
            || (*(_BYTE *)(v22 + 2) & 0xDF) != 0x4C
            || (*(_BYTE *)(v22 + 3) & 0xDF) != 0x53)
          {
            goto LABEL_12;
          }
          v23 = *(unsigned __int8 *)(v22 + 4);
        }
        else
        {
          if ((*(_WORD *)v22 & 0xFFDF) != 0x46
            || (*(_WORD *)(v22 + 2) & 0xFFDF) != 0x41
            || (*(_WORD *)(v22 + 4) & 0xFFDF) != 0x4C
            || (*(_WORD *)(v22 + 6) & 0xFFDF) != 0x53)
          {
            goto LABEL_12;
          }
          v23 = *(unsigned __int16 *)(v22 + 8);
        }
        if ((v23 & 0xFFFFFFDF) == 0x45)
        {
          v5 = 126;
          if (v8)
          {
LABEL_26:
            *(_DWORD *)v7 = v8;
            goto LABEL_27;
          }
          goto LABEL_63;
        }
      }
    }
LABEL_12:
    v10 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 840))(this);
    if (!v10
      || (*(_WORD *)(v10 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
    {
      v11 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 832))(this);
      if (!WebCore::AccessibilityObject::contentEditableAttributeIsEnabled(v11, v12))
      {
        v5 = 126;
        goto LABEL_24;
      }
    }
LABEL_23:
    v5 = 125;
LABEL_24:
    if (!v7)
      goto LABEL_27;
    v8 = *(_DWORD *)v7 - 2;
    if (*(_DWORD *)v7 != 2)
      goto LABEL_26;
LABEL_63:
    WTF::StringImpl::destroy((WTF::StringImpl *)v7, v6);
  }
LABEL_27:
  if ((v5 & 0xFFFFFFF7) != 0x44)
    goto LABEL_40;
  v15 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1232))(this);
  if (!v15)
    return v5;
  v16 = v15;
  if (v5 != 68)
  {
    do
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 856))(v16) & 1) != 0)
        break;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 2976))(v16) != 134)
        break;
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 1232))(v16);
    }
    while (v16);
LABEL_40:
    if (v5 > 60)
    {
      if (v5 != 61)
      {
        v18 = v5;
        if (v5 != 86)
          return v18;
        goto LABEL_46;
      }
    }
    else
    {
      if (!v5)
        return -122;
      if (v5 != 37)
        return v5;
    }
    v19 = (WebCore *)(*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 832))(this);
    if (v19)
    {
      if (WebCore::hasAccNameAttribute(v19, v20))
        return v5;
      else
        return -122;
    }
    return -122;
  }
  while (1)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 856))(v16) & 1) != 0)
      return 68;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 2976))(v16);
    if (v17 != 134)
      break;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 1232))(v16);
    v18 = 68;
    if (!v16)
      return v18;
  }
  if (v17 != 73)
    goto LABEL_40;
  return 76;
}

uint64_t WebCore::AccessibilityNodeObject::canSetSelectedAttribute(WebCore::AccessibilityNodeObject *this)
{
  int v2;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 1456))(this);
  if ((v2 - 76) <= 0x37 && ((1 << (v2 - 76)) & 0xE0280000018007) != 0)
    return (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 536))(this);
  if (v2 == 43 || v2 == 13)
    return (*(uint64_t (**)(WebCore::AccessibilityNodeObject *))(*(_QWORD *)this + 536))(this);
  else
    return 0;
}

uint64_t WebCore::AccessibilityListBox::isAccessibilityListBoxInstance(WebCore::AccessibilityListBox *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityListBox::determineAccessibilityRole(WebCore::AccessibilityListBox *this)
{
  return 67;
}

BOOL WebCore::AccessibilityNodeObject::isDetached(WebCore::AccessibilityNodeObject *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 30);
  return !v1 || *(_QWORD *)(v1 + 8) == 0;
}

uint64_t WebCore::AccessibilityListBoxOption::isAccessibilityListBoxOptionInstance(WebCore::AccessibilityListBoxOption *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityListBoxOption::determineAccessibilityRole(WebCore::AccessibilityListBoxOption *this)
{
  return 68;
}

uint64_t WebCore::AccessibilityListBoxOption::canHaveChildren(WebCore::AccessibilityListBoxOption *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityMathMLElement::isMathElement(WebCore::AccessibilityMathMLElement *this)
{
  return 1;
}

void WebCore::AccessibilityMenuList::~AccessibilityMenuList(WebCore::AccessibilityMenuList *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::AccessibilityMenuList::isMenuList(WebCore::AccessibilityMenuList *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityMenuList::determineAccessibilityRole(WebCore::AccessibilityMenuList *this)
{
  return 84;
}

void WebCore::AccessibilityMenuListOption::~AccessibilityMenuListOption(WebCore::AccessibilityMenuListOption *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (unsigned int *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E337CD98;
  v6 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v9 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v9)
      {
        v12 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
        v6 = v12;
      }
      v10 = *(WTF **)(v6 + 16);
      if (v10)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v11 = v6;
        WTF::fastFree(v10, a2);
        v6 = v11;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (unsigned int *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E337CD98;
  v6 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v11 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v11)
      {
        v14 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v11));
        v6 = v14;
      }
      v12 = *(WTF **)(v6 + 16);
      if (v12)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v13 = v6;
        WTF::fastFree(v12, a2);
        v6 = v13;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v9, v10);
}

uint64_t WebCore::AccessibilityMenuListOption::isMenuListOption(WebCore::AccessibilityMenuListOption *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityMenuListOption::determineAccessibilityRole(WebCore::AccessibilityMenuListOption *this)
{
  return 80;
}

uint64_t WebCore::AccessibilityMenuListOption::canHaveChildren(WebCore::AccessibilityMenuListOption *this)
{
  return 0;
}

void WebCore::AccessibilityMenuListPopup::~AccessibilityMenuListPopup(WebCore::AccessibilityMenuListPopup *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E337C0A8;
  v3 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E337C0A8;
  v3 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::AccessibilityMenuListPopup::elementRect(WebCore::AccessibilityMenuListPopup *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityMenuListPopup::isMenuListPopup(WebCore::AccessibilityMenuListPopup *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityMenuListPopup::determineAccessibilityRole(WebCore::AccessibilityMenuListPopup *this)
{
  return 79;
}

uint64_t WebCore::needsSpaceFromDisplay(WebCore *this, WebCore::AXCoreObject *a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  _BYTE v24[8];
  WTF::StringImpl *v25;
  char v26;

  if (((*(uint64_t (**)(WebCore *, WebCore::AXCoreObject *))(*(_QWORD *)this + 48))(this, a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195609B68);
  }
  if (!(*(unsigned int (**)(WebCore *))(*(_QWORD *)this + 48))(this))
    return 0;
  v3 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_7:
  ++*(_QWORD *)(v3 + 8);
  v5 = __ldxr((unsigned __int8 *)v3);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  v6 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 848))(this);
  v8 = v6;
  if (v6)
  {
    v9 = *(_DWORD *)(v6 + 16) + 1;
    *(_DWORD *)(v6 + 16) = v9;
    if ((*(_BYTE *)(v6 + 45) & 2) != 0)
    {
      v10 = 0;
LABEL_18:
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x195609BB4);
      }
      *(_DWORD *)(v8 + 16) = v9 - 1;
      goto LABEL_20;
    }
    v10 = v6 + 80;
LABEL_15:
    v10 = ((*(_BYTE *)(v10 + 16) & 0x1Fu) < 0x15) & (0x12102Au >> *(_BYTE *)(v10 + 16));
    if (!v8)
      goto LABEL_20;
    v9 = *(_DWORD *)(v8 + 16);
    goto LABEL_18;
  }
  v19 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 848))(this);
  if (v19)
  {
    if ((*(_BYTE *)(v19 + 45) & 2) != 0)
    {
      v23 = *(_QWORD *)(v19 + 32);
      if (v23)
        v19 = *(_QWORD *)(v23 + 8);
      else
        v19 = 0;
    }
    v10 = v19 + 80;
    goto LABEL_15;
  }
  v21 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 832))(this);
  if (!v21)
  {
    v10 = 0;
    goto LABEL_20;
  }
  v24[0] = 0;
  v26 = 0;
  v10 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 264))(v21, v24);
  if (v26)
  {
    v22 = v25;
    v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v7);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  if (v10)
    goto LABEL_15;
LABEL_20:
  v11 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_24:
  v13 = *(_QWORD *)(v11 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v11 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v20 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    v16 = v20 != 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v17 = __ldxr((unsigned __int8 *)v11);
  if (v17 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
    {
      if (v14)
        return v10;
      goto LABEL_32;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v11);
  if (v14)
    return v10;
LABEL_32:
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!v16)
    WTF::fastFree((WTF *)v11, v7);
  return v10;
}

WTF *WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, unint64_t a2)
{
  WTF *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  WTF *v16;

  if (*((unsigned int *)result + 2) <= a2)
    return result;
  v3 = result;
  v4 = *((unsigned int *)result + 3);
  if (v4 <= a2)
    goto LABEL_24;
  v5 = (uint64_t *)(*(_QWORD *)result + 8 * a2);
  v6 = 8 * v4 - 8 * a2;
  do
  {
    v7 = *v5;
    *v5 = 0;
    if (!v7)
      goto LABEL_21;
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_9;
    }
    result = (WTF *)MEMORY[0x19AEA534C](v8);
LABEL_9:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v15 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v15 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 != 1)
    {
      __clrex();
LABEL_16:
      result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (v11)
        goto LABEL_21;
      goto LABEL_17;
    }
    if (__stlxr(0, (unsigned __int8 *)v8))
      goto LABEL_16;
    if (v11)
      goto LABEL_21;
LABEL_17:
    if (v12)
      result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v13)
      result = (WTF *)WTF::fastFree((WTF *)v8, (void *)a2);
LABEL_21:
    ++v5;
    v6 -= 8;
  }
  while (v6);
  *((_DWORD *)v3 + 3) = a2;
  LODWORD(v4) = a2;
LABEL_24:
  v16 = *(WTF **)v3;
  if (a2)
  {
    if (*((_DWORD *)v3 + 2))
    {
      *((_DWORD *)v3 + 2) = a2;
      result = (WTF *)WTF::fastRealloc(v16, (void *)(8 * a2));
      *(_QWORD *)v3 = result;
      return result;
    }
    if (!(a2 >> 29))
    {
      result = (WTF *)WTF::fastMalloc((WTF *)(8 * a2));
      *((_DWORD *)v3 + 2) = a2;
      *(_QWORD *)v3 = result;
      if (result != v16)
        result = (WTF *)memcpy(result, v16, 8 * v4);
      goto LABEL_30;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_30:
    if (v16)
    {
      if (*(WTF **)v3 == v16)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF *)WTF::fastFree(v16, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::add(uint64_t a1, uint64_t *a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  uint64_t result;
  WTF::StringImpl **v9;
  WebCore::QualifiedName::QualifiedNameImpl **v10;
  int i;
  unsigned int v12;
  WebCore::QualifiedName::QualifiedNameImpl **v13;
  int v14;
  WebCore::QualifiedName::QualifiedNameImpl *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  unsigned int v19;
  WebCore::QualifiedName::QualifiedNameImpl *v20;
  int v21;
  uint64_t v22;
  WebCore::QualifiedName::QualifiedNameImpl *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  WTF *v36;
  void *v37;
  uint64_t *v38;

  v4 = a2;
  v5 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::rehash(a2, 8u, 0), (v5 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *a3;
  result = *((unsigned int *)*a3 + 1);
  if (!(_DWORD)result)
  {
    result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a3);
    *((_DWORD *)v7 + 1) = result;
  }
  v9 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v38 = v4;
    v10 = 0;
    for (i = 1; ; ++i)
    {
      v12 = result & v6;
      v13 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 8 * (result & v6));
      if (v9)
      {
        v14 = (*(_DWORD *)v9)++;
        v15 = *v13;
        if (v14)
        {
          *(_DWORD *)v9 = v14;
          v16 = (uint64_t)v9;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v9);
          result = WTF::fastFree(v17, v18);
          v16 = WebCore::nullName;
        }
      }
      else
      {
        v16 = 0;
        v15 = *v13;
      }
      if (v15 == (WebCore::QualifiedName::QualifiedNameImpl *)v9)
        break;
      if (*v13 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v10 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 8 * v12);
      }
      else if (*v13 == *a3)
      {
        goto LABEL_37;
      }
      result = i + v12;
      v9 = (WTF::StringImpl **)v16;
    }
LABEL_26:
    v4 = v38;
    if (v10)
    {
      v22 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v10 = (WebCore::QualifiedName::QualifiedNameImpl *)v22;
      --*(_DWORD *)(*v38 - 16);
      v13 = v10;
    }
LABEL_30:
    v23 = *a3;
    if (*a3)
      ++*(_DWORD *)v23;
    result = (uint64_t)*v13;
    *v13 = v23;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v36, v37);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v24 = *v4;
    if (*v4)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v28 = *v4;
    if (*v4)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    v30 = (*(_DWORD *)(v28 - 16) + v29);
    v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 <= 2 * v30)
        goto LABEL_46;
    }
    else if (3 * v31 <= 4 * v30)
    {
      if (!(_DWORD)v31)
      {
        v32 = 8;
LABEL_51:
        result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v4, v32, v13);
        v13 = (WebCore::QualifiedName::QualifiedNameImpl **)result;
        v28 = *v4;
        if (*v4)
          v31 = *(unsigned int *)(v28 - 4);
        else
          v31 = 0;
        goto LABEL_55;
      }
LABEL_46:
      v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
      goto LABEL_51;
    }
LABEL_55:
    v33 = a1;
    v35 = v28 + 8 * v31;
    v34 = 1;
    goto LABEL_56;
  }
  v19 = result & v6;
  v13 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 8 * (result & v6));
  v20 = *v13;
  if (!*v13)
    goto LABEL_30;
  v38 = v4;
  v10 = 0;
  v21 = 1;
  while (1)
  {
    if (v20 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
    {
      v10 = v13;
      goto LABEL_25;
    }
    if (v20 == *a3)
      break;
LABEL_25:
    v19 = (v19 + v21) & v6;
    v13 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 8 * v19);
    v20 = *v13;
    ++v21;
    if (!*v13)
      goto LABEL_26;
  }
LABEL_37:
  v26 = *v38;
  if (*v38)
    v27 = *(unsigned int *)(v26 - 4);
  else
    v27 = 0;
  v33 = a1;
  v34 = 0;
  v35 = v26 + 8 * v27;
LABEL_56:
  *(_QWORD *)v33 = v13;
  *(_QWORD *)(v33 + 8) = v35;
  *(_BYTE *)(v33 + 16) = v34;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::rehash(uint64_t *a1, unsigned int a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WebCore::QualifiedName::QualifiedNameImpl **v19;
  WTF::StringImpl **v20;
  WTF::StringImpl **v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  WTF::StringImpl **v25;
  WebCore::QualifiedName::QualifiedNameImpl *v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  int v31;
  WTF::StringImpl ***v32;
  int v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  BOOL v36;
  WTF *v37;
  void *v38;
  WTF::StringImpl **v39;
  int v40;
  uint64_t v41;
  WebCore::QualifiedName::QualifiedNameImpl *v42;
  WebCore::QualifiedName::QualifiedNameImpl *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF *v48;
  void *v49;
  WTF *v50;
  void *v51;
  WTF::StringImpl ***result;
  uint64_t v53;
  WTF::StringImpl ***v55;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  v11 = &webThreadDelegateMessageScopeCount;
  if (a2)
  {
    v12 = a2;
    v13 = (_DWORD *)WebCore::nullName;
    if (WebCore::nullName)
    {
      v14 = *(_DWORD *)WebCore::nullName;
      v15 = (_QWORD *)(v7 + 16);
      do
      {
        *v15++ = v13;
        --v12;
      }
      while (v12);
      *v13 = v14 + a2;
    }
    else
    {
      bzero((void *)(v7 + 16), 8 * a2);
      v11 = &webThreadDelegateMessageScopeCount;
      do
        --v12;
      while (v12);
    }
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v16 = 0;
    v17 = 0;
    v18 = v5;
    v53 = v5;
    do
    {
      v19 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 8 * v16);
      v20 = (WTF::StringImpl **)*v19;
      if (*v19 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v21 = (WTF::StringImpl **)*((_QWORD *)v11 + 254);
        if (v21)
        {
          v22 = (*(_DWORD *)v21)++;
          if (v22)
          {
            *(_DWORD *)v21 = v22;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
            WTF::fastFree(v44, v45);
            v11 = &webThreadDelegateMessageScopeCount;
          }
        }
        if (v20 == v21)
        {
          v25 = (WTF::StringImpl **)*v19;
          *v19 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
              WTF::fastFree(v50, v51);
              v11 = &webThreadDelegateMessageScopeCount;
            }
            else
            {
              --*(_DWORD *)v25;
            }
          }
        }
        else
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v26 = *v19;
          v27 = *((_DWORD *)*v19 + 1);
          if (!v27)
          {
            v27 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*v19);
            v11 = &webThreadDelegateMessageScopeCount;
            *((_DWORD *)v26 + 1) = v27;
          }
          v28 = (WTF::StringImpl **)*((_QWORD *)v11 + 254);
          if (v28)
          {
            v55 = v17;
            v29 = v4;
            v30 = 0;
            do
            {
              v31 = v27 & v24;
              v32 = (WTF::StringImpl ***)(v23 + 8 * (v27 & v24));
              if (v28)
              {
                v33 = (*(_DWORD *)v28)++;
                v34 = *v32;
                if (v33)
                {
                  *(_DWORD *)v28 = v33;
                  v35 = (uint64_t)v28;
                }
                else
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
                  WTF::fastFree(v37, v38);
                  v11 = &webThreadDelegateMessageScopeCount;
                  v35 = WebCore::nullName;
                }
              }
              else
              {
                v35 = 0;
                v34 = *v32;
              }
              v27 = ++v30 + v31;
              v36 = v34 == v28;
              v28 = (WTF::StringImpl **)v35;
            }
            while (!v36);
            v39 = *v32;
            *v32 = 0;
            if (v39)
            {
              v4 = v29;
              v17 = v55;
              if (*(_DWORD *)v39 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v39);
                WTF::fastFree(v48, v49);
                v11 = &webThreadDelegateMessageScopeCount;
              }
              else
              {
                --*(_DWORD *)v39;
              }
            }
            else
            {
              v4 = v29;
              v17 = v55;
            }
            v18 = v53;
          }
          else
          {
            v40 = 0;
            do
            {
              v41 = v27 & v24;
              v27 = ++v40 + v41;
            }
            while (*(_QWORD *)(v23 + 8 * v41));
            v32 = (WTF::StringImpl ***)(v23 + 8 * v41);
            *v32 = 0;
          }
          v42 = *v19;
          *v19 = 0;
          *v32 = (WTF::StringImpl **)v42;
          v43 = *v19;
          *v19 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v43);
              WTF::fastFree(v46, v47);
              v11 = &webThreadDelegateMessageScopeCount;
            }
            else
            {
              --*(_DWORD *)v43;
            }
          }
          if (v19 == a3)
            v17 = v32;
        }
      }
      ++v16;
    }
    while (v16 != v18);
  }
  else
  {
    v17 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v17;
}

uint64_t WTF::HashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::QualifiedName>,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(uint64_t result, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  WebCore::QualifiedName::QualifiedNameImpl *v5;
  int v6;
  WTF::StringImpl **v7;
  int v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v15;
  void *v16;
  unsigned int v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;
  BOOL v20;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = *a2;
    v6 = *((_DWORD *)*a2 + 1);
    if (!v6)
    {
      v6 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v5 + 1) = v6;
    }
    v7 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v8 = 0;
      while (1)
      {
        v9 = v6 & v4;
        if (v7)
        {
          v10 = (*(_DWORD *)v7)++;
          v11 = *(WTF::StringImpl ***)(v3 + 8 * v9);
          if (v10)
          {
            *(_DWORD *)v7 = v10;
            v12 = (uint64_t)v7;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
            WTF::fastFree(v15, v16);
            v12 = WebCore::nullName;
          }
        }
        else
        {
          v12 = 0;
          v11 = *(WTF::StringImpl ***)(v3 + 8 * v9);
        }
        result = v11 != v7;
        if (v11 == v7)
          break;
        v13 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v3 + 8 * v9);
        if (v13 != (WebCore::QualifiedName::QualifiedNameImpl *)-1 && v13 == *a2)
          break;
        v6 = ++v8 + v9;
        v7 = (WTF::StringImpl **)v12;
      }
    }
    else
    {
      v17 = v6 & v4;
      v18 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v3 + 8 * (v6 & v4));
      if (v18)
      {
        v19 = 1;
        do
        {
          v20 = v18 != (WebCore::QualifiedName::QualifiedNameImpl *)-1 && v18 == *a2;
          result = v20;
          if (v20)
            break;
          v17 = (v17 + v19) & v4;
          v18 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v3 + 8 * v17);
          ++v19;
        }
        while (v18);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void WebCore::AccessibilityObject::~AccessibilityObject(WebCore::AccessibilityObject *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  const void *v14;

  *(_QWORD *)this = off_1E337DA98;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (*((_BYTE *)this + 176) && *((_BYTE *)this + 136))
  {
    v5 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v5)
    {
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    v6 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
  }
  if (*((_BYTE *)this + 96))
  {
    v7 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    v8 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v8)
    {
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
  v10 = *((_QWORD *)this + 4);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v9);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E3370CA0;
  v14 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
    CFRelease(v14);
}

uint64_t WebCore::AccessibilityObject::init(WebCore::AccessibilityObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 3016))(this);
  *((_BYTE *)this + 57) = result;
  return result;
}

uint64_t WebCore::AccessibilityObject::treeID(WebCore::AccessibilityObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t WebCore::AccessibilityObject::dbg@<X0>(WTF::String **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  _OWORD *v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  char v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  _WORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _BYTE *v33;
  size_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  size_t v38;
  uint64_t v39;
  _BYTE *v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  char *v45;
  int8x16_t v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  char *v51;
  __int16 v52;
  _WORD *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  char *v60;
  int8x16_t v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  char *v65;
  char *v66;
  __int16 v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  char *v74;
  int8x16_t v75;
  __int128 v76;
  __int128 v77;
  char *v78;
  char *v79;
  char *v80;
  __int16 v81;
  uint64_t result;
  unsigned __int128 *v83;
  unsigned __int128 *v84;
  unsigned __int128 v85;
  unsigned __int128 *v86;
  unsigned __int128 *v87;
  unsigned __int128 v88;
  unsigned __int128 *v89;
  unsigned __int128 *v90;
  unsigned __int128 v91;
  char v92;
  char v93;
  char v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  _DWORD *v98;
  int8x16x2_t v99;
  int8x16x2_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x2_t v107;

  v4 = (*((uint64_t (**)(WTF::String **))*this + 106))(this);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 632))(&v97);
    if (v97)
    {
      v5 = *(_DWORD *)(v97 + 4);
      if (v5 < 0 || (v6 = (v5 + 2), __OFADD__(v5, 2)))
      {
        v98 = 0;
        goto LABEL_173;
      }
      v7 = (*(unsigned __int8 *)(v97 + 16) >> 2) & 1;
    }
    else
    {
      v7 = 1;
      v6 = 2;
    }
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v6, v7, (int8x16_t *)", ", 2u, v97, &v98);
    v9 = v98;
    if (v98)
    {
      v10 = (WTF::StringImpl *)v97;
      v97 = 0;
      v98 = 0;
      if (!v10)
        goto LABEL_18;
LABEL_16:
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
      goto LABEL_18;
    }
LABEL_173:
    __break(0xC471u);
    JUMPOUT(0x19560B5F0);
  }
  v11 = (*((uint64_t (**)(WTF::String **))*this + 105))(this);
  if (!v11)
  {
    v9 = 0;
    goto LABEL_18;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v11 + 304))(&v96);
  if (v96)
  {
    v12 = *((_DWORD *)v96 + 1);
    if (v12 < 0 || (v13 = (v12 + 2), __OFADD__(v12, 2)))
    {
      v98 = 0;
      goto LABEL_176;
    }
    v14 = (*((unsigned __int8 *)v96 + 16) >> 2) & 1;
  }
  else
  {
    v14 = 1;
    v13 = 2;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v13, v14, (int8x16_t *)", ", 2u, (uint64_t)v96, &v98);
  v9 = v98;
  if (!v98)
  {
LABEL_176:
    __break(0xC471u);
    JUMPOUT(0x19560B600);
  }
  v98 = 0;
  v10 = v96;
  v96 = 0;
  if (v10)
    goto LABEL_16;
LABEL_18:
  switch((*((unsigned int (**)(WTF::String **))*this + 182))(this))
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
    case 0x4Fu:
    case 0x50u:
    case 0x51u:
    case 0x52u:
    case 0x53u:
    case 0x54u:
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
    case 0x59u:
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x5Du:
    case 0x5Eu:
    case 0x5Fu:
    case 0x60u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
    case 0x65u:
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = v98;
      WTF::String::number(this[2]);
      if (v9)
        *v9 += 2;
      if (v15)
      {
        v17 = v15[1];
        if (v95)
          goto LABEL_27;
      }
      else
      {
        v17 = 0;
        if (v95)
        {
LABEL_27:
          v18 = *((_DWORD *)v95 + 1);
          if (v9)
            goto LABEL_28;
LABEL_81:
          v19 = 0;
          goto LABEL_29;
        }
      }
      v18 = 0;
      if (!v9)
        goto LABEL_81;
LABEL_28:
      v19 = v9[1];
      if (v19 < 0)
        goto LABEL_171;
LABEL_29:
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      v22 = v20;
      if (v18 < 0)
        goto LABEL_171;
      if ((v22 & 1) != 0)
        goto LABEL_171;
      v20 = __OFADD__(v18, v21);
      v23 = v18 + v21;
      if (v20)
        goto LABEL_171;
      v20 = __OFADD__(v23, 5);
      v24 = v23 + 5;
      v25 = v20;
      if (v17 < 0
        || v25
        || (v20 = __OFADD__(v17, v24), v26 = v17 + v24, v20)
        || (v27 = (v26 + 7), __OFADD__(v26, 7)))
      {
LABEL_171:
        *a2 = 0;
        __break(0xC471u);
        JUMPOUT(0x19560B5E4);
      }
      if (v15 && (v15[4] & 4) == 0 || v95 && (*((_BYTE *)v95 + 16) & 4) == 0 || v9 && (v9[4] & 4) == 0)
      {
        if (v26 != -7)
        {
          if (v27 <= 0x7FFFFFEF)
          {
            WTF::tryFastCompactMalloc((WTF *)(2 * v27 + 20));
            v28 = v98;
            if (v98)
            {
              *v98 = 2;
              v28[1] = v27;
              *(_QWORD *)(v28 + 5) = 0x6C006F0072007BLL;
              *((_QWORD *)v28 + 1) = v28 + 5;
              v28[4] = 0;
              v29 = (_WORD *)v28 + 17;
              v28[7] = 3801189;
              *((_WORD *)v28 + 16) = 32;
              if (v15)
              {
                v16 = (_OWORD *)*((_QWORD *)v15 + 1);
                v30 = v15[1];
                if ((v15[4] & 4) != 0)
                {
                  v31 = (char *)&v29[v30];
                  if (v30 >= 0x40)
                  {
                    v32 = (char *)&v29[v30 & 0xFFFFFFC0];
                    v44 = 0uLL;
                    v45 = (char *)v28 + 34;
                    do
                    {
                      v99.val[0] = (int8x16_t)*v16;
                      v46 = *((int8x16_t *)v16 + 1);
                      v102.val[0] = (int8x16_t)v16[2];
                      v47 = v16[3];
                      v16 += 4;
                      v48 = v47;
                      v102.val[1] = 0uLL;
                      v105.val[0] = v46;
                      v99.val[1] = 0uLL;
                      v49 = v45;
                      vst2q_s8(v49, v99);
                      v49 += 32;
                      v105.val[1] = 0uLL;
                      vst2q_s8(v49, v105);
                      v50 = v45 + 64;
                      vst2q_s8(v50, v102);
                      v51 = v45 + 96;
                      vst2q_s8(v51, *(int8x16x2_t *)(&v44 - 1));
                      v45 += 128;
                    }
                    while (v45 != v32);
                  }
                  else
                  {
                    v32 = (char *)v28 + 34;
                  }
                  while (v32 != v31)
                  {
                    v52 = *(unsigned __int8 *)v16;
                    v16 = (_OWORD *)((char *)v16 + 1);
                    *(_WORD *)v32 = v52;
                    v32 += 2;
                  }
                }
                else if ((_DWORD)v30 == 1)
                {
                  *v29 = *(_WORD *)v16;
                }
                else if ((_DWORD)v30)
                {
                  memcpy((char *)v28 + 34, v16, 2 * v30);
                }
                v43 = v15[1];
              }
              else
              {
                v43 = 0;
              }
              v53 = &v29[v43];
              *(_QWORD *)v53 = 0x4400490020002CLL;
              v53[4] = 32;
              v54 = (char *)(v53 + 5);
              if (v95)
              {
                v16 = (_OWORD *)*((_QWORD *)v95 + 1);
                v55 = *((unsigned int *)v95 + 1);
                if ((*((_BYTE *)v95 + 16) & 4) != 0)
                {
                  v56 = &v54[2 * v55];
                  if (v55 >= 0x40)
                  {
                    v57 = &v54[2 * (v55 & 0xFFFFFFC0)];
                    v59 = 0uLL;
                    v60 = v54;
                    do
                    {
                      v100.val[0] = (int8x16_t)*v16;
                      v61 = *((int8x16_t *)v16 + 1);
                      v103.val[0] = (int8x16_t)v16[2];
                      v62 = v16[3];
                      v16 += 4;
                      v63 = v62;
                      v103.val[1] = 0uLL;
                      v106.val[0] = v61;
                      v100.val[1] = 0uLL;
                      v64 = v60;
                      vst2q_s8(v64, v100);
                      v64 += 32;
                      v106.val[1] = 0uLL;
                      vst2q_s8(v64, v106);
                      v65 = v60 + 64;
                      vst2q_s8(v65, v103);
                      v66 = v60 + 96;
                      vst2q_s8(v66, *(int8x16x2_t *)(&v59 - 1));
                      v60 += 128;
                    }
                    while (v60 != v57);
                  }
                  else
                  {
                    v57 = v54;
                  }
                  while (v57 != v56)
                  {
                    v67 = *(unsigned __int8 *)v16;
                    v16 = (_OWORD *)((char *)v16 + 1);
                    *(_WORD *)v57 = v67;
                    v57 += 2;
                  }
                }
                else if ((_DWORD)v55 == 1)
                {
                  *(_WORD *)v54 = *(_WORD *)v16;
                }
                else if ((_DWORD)v55)
                {
                  memcpy(v54, v16, 2 * v55);
                }
                v58 = *((unsigned int *)v95 + 1);
              }
              else
              {
                v58 = 0;
              }
              v68 = &v54[2 * v58];
              if (v9)
              {
                v16 = (_OWORD *)*((_QWORD *)v9 + 1);
                v69 = v9[1];
                if ((v9[4] & 4) != 0)
                {
                  v70 = &v68[2 * v69];
                  if (v69 >= 0x40)
                  {
                    v71 = &v68[2 * (v69 & 0xFFFFFFC0)];
                    v73 = 0uLL;
                    v74 = v68;
                    do
                    {
                      v101.val[0] = (int8x16_t)*v16;
                      v75 = *((int8x16_t *)v16 + 1);
                      v104.val[0] = (int8x16_t)v16[2];
                      v76 = v16[3];
                      v16 += 4;
                      v77 = v76;
                      v104.val[1] = 0uLL;
                      v107.val[0] = v75;
                      v101.val[1] = 0uLL;
                      v78 = v74;
                      vst2q_s8(v78, v101);
                      v78 += 32;
                      v107.val[1] = 0uLL;
                      vst2q_s8(v78, v107);
                      v79 = v74 + 64;
                      vst2q_s8(v79, v104);
                      v80 = v74 + 96;
                      vst2q_s8(v80, *(int8x16x2_t *)(&v73 - 1));
                      v74 += 128;
                    }
                    while (v74 != v71);
                  }
                  else
                  {
                    v71 = v68;
                  }
                  while (v71 != v70)
                  {
                    v81 = *(unsigned __int8 *)v16;
                    v16 = (_OWORD *)((char *)v16 + 1);
                    *(_WORD *)v71 = v81;
                    v71 += 2;
                  }
                }
                else if ((_DWORD)v69 == 1)
                {
                  *(_WORD *)v68 = *(_WORD *)v16;
                }
                else if ((_DWORD)v69)
                {
                  memcpy(v68, v16, 2 * v69);
                }
                v72 = v9[1];
              }
              else
              {
                v72 = 0;
              }
              *(_WORD *)&v68[2 * v72] = 125;
              goto LABEL_122;
            }
          }
          goto LABEL_171;
        }
LABEL_143:
        v28 = (_DWORD *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        goto LABEL_122;
      }
      if (v26 == -7)
        goto LABEL_143;
      if ((v27 & 0x80000000) != 0)
        goto LABEL_171;
      WTF::tryFastCompactMalloc((WTF *)(v27 + 20));
      v28 = v98;
      if (!v98)
        goto LABEL_171;
      *v98 = 2;
      v28[1] = v27;
      *((_QWORD *)v28 + 1) = v28 + 5;
      *((_QWORD *)v28 + 2) = 0x6C6F727B00000004;
      v33 = (char *)v28 + 27;
      *(_DWORD *)((char *)v28 + 23) = 540697964;
      if (v15)
      {
        v16 = (_OWORD *)*((_QWORD *)v15 + 1);
        v34 = v15[1];
        if ((v15[4] & 4) != 0)
        {
          if ((_DWORD)v34)
          {
            if ((_DWORD)v34 == 1)
              *v33 = *(_BYTE *)v16;
            else
              memcpy((char *)v28 + 27, v16, v34);
          }
        }
        else
        {
          if (v34 < 0x10)
          {
            v83 = (unsigned __int128 *)((char *)v28 + 27);
          }
          else
          {
            v83 = (unsigned __int128 *)&v33[v34 & 0xFFFFFFF0];
            v84 = (unsigned __int128 *)((char *)v28 + 27);
            do
            {
              v85 = (unsigned __int128)vld2q_s8((const char *)v16);
              v16 += 2;
              *v84++ = v85;
            }
            while (v84 != v83);
          }
          while (v83 != (unsigned __int128 *)&v33[v34])
          {
            v92 = *(_BYTE *)v16;
            v16 = (_OWORD *)((char *)v16 + 2);
            *(_BYTE *)v83 = v92;
            v83 = (unsigned __int128 *)((char *)v83 + 1);
          }
        }
        v35 = v15[1];
      }
      else
      {
        v35 = 0;
      }
      v36 = &v33[v35];
      v36[4] = 32;
      *(_DWORD *)v36 = 1145643052;
      v37 = v36 + 5;
      if (v95)
      {
        v16 = (_OWORD *)*((_QWORD *)v95 + 1);
        v38 = *((unsigned int *)v95 + 1);
        if ((*((_BYTE *)v95 + 16) & 4) != 0)
        {
          if ((_DWORD)v38)
          {
            if ((_DWORD)v38 == 1)
              *v37 = *(_BYTE *)v16;
            else
              memcpy(v37, v16, v38);
          }
        }
        else
        {
          if (v38 < 0x10)
          {
            v86 = (unsigned __int128 *)(v36 + 5);
          }
          else
          {
            v86 = (unsigned __int128 *)&v37[v38 & 0xFFFFFFF0];
            v87 = (unsigned __int128 *)(v36 + 5);
            do
            {
              v88 = (unsigned __int128)vld2q_s8((const char *)v16);
              v16 += 2;
              *v87++ = v88;
            }
            while (v87 != v86);
          }
          while (v86 != (unsigned __int128 *)&v37[v38])
          {
            v93 = *(_BYTE *)v16;
            v16 = (_OWORD *)((char *)v16 + 2);
            *(_BYTE *)v86 = v93;
            v86 = (unsigned __int128 *)((char *)v86 + 1);
          }
        }
        v39 = *((unsigned int *)v95 + 1);
      }
      else
      {
        v39 = 0;
      }
      v40 = &v37[v39];
      if (v9)
      {
        v16 = (_OWORD *)*((_QWORD *)v9 + 1);
        v41 = v9[1];
        if ((v9[4] & 4) != 0)
        {
          if ((_DWORD)v41)
          {
            if ((_DWORD)v41 == 1)
              *v40 = *(_BYTE *)v16;
            else
              memcpy(v40, v16, v41);
          }
        }
        else
        {
          if (v41 < 0x10)
          {
            v89 = (unsigned __int128 *)v40;
          }
          else
          {
            v89 = (unsigned __int128 *)&v40[v41 & 0xFFFFFFF0];
            v90 = (unsigned __int128 *)v40;
            do
            {
              v91 = (unsigned __int128)vld2q_s8((const char *)v16);
              v16 += 2;
              *v90++ = v91;
            }
            while (v90 != v89);
          }
          while (v89 != (unsigned __int128 *)&v40[v41])
          {
            v94 = *(_BYTE *)v16;
            v16 = (_OWORD *)((char *)v16 + 2);
            *(_BYTE *)v89 = v94;
            v89 = (unsigned __int128 *)((char *)v89 + 1);
          }
        }
        v42 = v9[1];
      }
      else
      {
        v42 = 0;
      }
      v40[v42] = 125;
LABEL_122:
      *a2 = v28;
      if (v9)
      {
        if (*v9 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v9, (WTF::StringImpl *)v16);
        else
          *v9 -= 2;
      }
      result = (uint64_t)v95;
      if (v95)
      {
        if (*(_DWORD *)v95 == 2)
        {
          result = WTF::StringImpl::destroy(v95, (WTF::StringImpl *)v16);
          if (!v15)
            goto LABEL_131;
          goto LABEL_129;
        }
        *(_DWORD *)v95 -= 2;
      }
      if (!v15)
        goto LABEL_131;
LABEL_129:
      if (*v15 == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)v15, (WTF::StringImpl *)v16);
      else
        *v15 -= 2;
LABEL_131:
      if (v9)
      {
        if (*v9 == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)v9, (WTF::StringImpl *)v16);
        else
          *v9 -= 2;
      }
      return result;
    default:
      abort();
  }
}

uint64_t WebCore::AccessibilityObject::detachRemoteParts(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v4;

  if (a2 == 1 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1456))(a1) == 73)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1488))(a1);
    if (v4)
      a3.n128_f64[0] = WebCore::AXObjectCache::postNotification((WTF **)v4, 0, *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8), 67, 0);
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 3104))(a1, a3);
}

BOOL WebCore::AccessibilityObject::isDetached(WebCore::AccessibilityObject *this)
{
  return *((_QWORD *)this + 3) == 0;
}

uint64_t WebCore::AccessibilityObject::computeAncestorFlags(WebCore::AccessibilityObject *this)
{
  int v2;
  uint64_t v3;
  int v4;

  v2 = *((unsigned __int8 *)this + 58);
  v3 = 2;
  if ((~v2 & 3) != 0)
  {
    v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
    if (v4 == 28 || v4 == 39)
      v3 = 2;
    else
      v3 = 0;
    v2 = *((unsigned __int8 *)this + 58);
  }
  if ((~v2 & 5) == 0
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 137)
  {
    v3 = v3 | 4;
  }
  if ((~*((unsigned __int8 *)this + 58) & 9) == 0
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 24)
  {
    v3 = v3 | 8;
  }
  if ((~*((unsigned __int8 *)this + 58) & 0x11) == 0
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 25)
  {
    v3 = v3 | 0x10;
  }
  if ((~*((unsigned __int8 *)this + 58) & 0x21) == 0
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 13)
  {
    v3 = v3 | 0x20;
  }
  if ((~*((unsigned __int8 *)this + 58) & 0x41) == 0
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 92)
  {
    return v3 | 0x40;
  }
  return v3;
}

BOOL WebCore::AccessibilityObject::hasDocumentRoleAncestor(WebCore::AccessibilityObject *this)
{
  unsigned int v1;
  uint64_t (*i)(void);
  _BYTE *v3;
  _BYTE *v4;
  int v5;

  v1 = *((unsigned __int8 *)this + 58);
  if ((v1 & 1) != 0)
    return (v1 >> 1) & 1;
  for (i = *(uint64_t (**)(void))(*(_QWORD *)this + 1232); ; i = *(uint64_t (**)(void))(*(_QWORD *)v4 + 1232))
  {
    v3 = (_BYTE *)i();
    v4 = v3;
    if (!v3)
      break;
    if ((v3[58] & 1) != 0)
    {
      if ((v3[58] & 2) != 0)
        return v4 != 0;
    }
    else
    {
      v5 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 1456))(v3);
      if (v5 == 28 || v5 == 39)
        return v4 != 0;
    }
  }
  return v4 != 0;
}

BOOL WebCore::AccessibilityObject::hasWebApplicationAncestor(WebCore::AccessibilityObject *this)
{
  unsigned int v1;
  uint64_t (*i)(void);
  _BYTE *v3;
  _BYTE *v4;

  v1 = *((unsigned __int8 *)this + 58);
  if ((v1 & 1) != 0)
    return (v1 >> 2) & 1;
  for (i = *(uint64_t (**)(void))(*(_QWORD *)this + 1232); ; i = *(uint64_t (**)(void))(*(_QWORD *)v4 + 1232))
  {
    v3 = (_BYTE *)i();
    v4 = v3;
    if (!v3)
      break;
    if ((v3[58] & 1) != 0)
    {
      if ((v3[58] & 4) != 0)
        return v4 != 0;
    }
    else if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v3 + 1456))(v3) == 137)
    {
      return v4 != 0;
    }
  }
  return v4 != 0;
}

BOOL WebCore::AccessibilityObject::isInDescriptionListDetail(WebCore::AccessibilityObject *this)
{
  unsigned int v1;
  uint64_t (*i)(void);
  _BYTE *v3;
  _BYTE *v4;

  v1 = *((unsigned __int8 *)this + 58);
  if ((v1 & 1) != 0)
    return (v1 >> 3) & 1;
  for (i = *(uint64_t (**)(void))(*(_QWORD *)this + 1232); ; i = *(uint64_t (**)(void))(*(_QWORD *)v4 + 1232))
  {
    v3 = (_BYTE *)i();
    v4 = v3;
    if (!v3)
      break;
    if ((v3[58] & 1) != 0)
    {
      if ((v3[58] & 8) != 0)
        return v4 != 0;
    }
    else if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v3 + 1456))(v3) == 24)
    {
      return v4 != 0;
    }
  }
  return v4 != 0;
}

BOOL WebCore::AccessibilityObject::isInDescriptionListTerm(WebCore::AccessibilityObject *this)
{
  unsigned int v1;
  uint64_t (*i)(void);
  _BYTE *v3;
  _BYTE *v4;

  v1 = *((unsigned __int8 *)this + 58);
  if ((v1 & 1) != 0)
    return (v1 >> 4) & 1;
  for (i = *(uint64_t (**)(void))(*(_QWORD *)this + 1232); ; i = *(uint64_t (**)(void))(*(_QWORD *)v4 + 1232))
  {
    v3 = (_BYTE *)i();
    v4 = v3;
    if (!v3)
      break;
    if ((v3[58] & 1) != 0)
    {
      if ((v3[58] & 0x10) != 0)
        return v4 != 0;
    }
    else if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v3 + 1456))(v3) == 25)
    {
      return v4 != 0;
    }
  }
  return v4 != 0;
}

BOOL WebCore::AccessibilityObject::isInCell(WebCore::AccessibilityObject *this)
{
  unsigned int v1;
  uint64_t (*i)(void);
  _BYTE *v3;
  _BYTE *v4;

  v1 = *((unsigned __int8 *)this + 58);
  if ((v1 & 1) != 0)
    return (v1 >> 5) & 1;
  for (i = *(uint64_t (**)(void))(*(_QWORD *)this + 1232); ; i = *(uint64_t (**)(void))(*(_QWORD *)v4 + 1232))
  {
    v3 = (_BYTE *)i();
    v4 = v3;
    if (!v3)
      break;
    if ((v3[58] & 1) != 0)
    {
      if ((v3[58] & 0x20) != 0)
        return v4 != 0;
    }
    else if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v3 + 1456))(v3) == 13)
    {
      return v4 != 0;
    }
  }
  return v4 != 0;
}

BOOL WebCore::AccessibilityObject::accessibleNameDerivesFromContent(WebCore::AccessibilityObject *this)
{
  int v2;
  _BOOL8 result;
  BOOL v4;
  int v5;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2976))(this);
  result = 0;
  switch(v2)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 19:
    case 21:
    case 28:
    case 29:
    case 30:
    case 31:
    case 37:
    case 42:
    case 44:
    case 49:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 66:
    case 67:
      return result;
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 38:
    case 39:
    case 40:
    case 41:
    case 43:
    case 45:
    case 46:
    case 47:
    case 48:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 63:
    case 64:
    case 65:
      goto LABEL_8;
    default:
      v4 = (v2 - 81) > 0x38 || ((1 << (v2 - 81)) & 0x11332C002A80141) == 0;
      if (v4 && (v2 - 73) >= 2)
      {
LABEL_8:
        v5 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
        result = v5 != 102 && v5 != 67;
      }
      break;
  }
  return result;
}

WTF::StringImpl *WebCore::AccessibilityObject::computedLabel@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;

  if (this)
  {
    v4 = *((_QWORD *)this + 1);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_6:
    ++*(_QWORD *)(v4 + 8);
    v6 = __ldxr((unsigned __int8 *)v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
LABEL_11:
  (*(void (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2528))(this);
  v21 = 0;
  v22 = 0;
  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AccessibilityObject *, WTF **))(*(_QWORD *)this
                                                                                                + 1344))(this, &v21);
  v9 = HIDWORD(v22);
  v10 = v21;
  if (HIDWORD(v22))
  {
    v11 = *(_DWORD **)v21;
    if (*(_QWORD *)v21)
      *v11 += 2;
    *a2 = v11;
    v12 = 16 * v9;
    do
    {
      result = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      v10 = (WTF *)((char *)v10 + 16);
      v12 -= 16;
    }
    while (v12);
    v10 = v21;
    if (v21)
      goto LABEL_22;
  }
  else
  {
    *a2 = 0;
    if (v10)
    {
LABEL_22:
      v21 = 0;
      LODWORD(v22) = 0;
      result = (WTF::StringImpl *)WTF::fastFree(v10, v8);
    }
  }
  v13 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_29;
  }
  result = (WTF::StringImpl *)MEMORY[0x19AEA534C](v13);
LABEL_29:
  v15 = *(_QWORD *)(v13 + 8);
  v16 = v15 - 1;
  *(_QWORD *)(v13 + 8) = v15 - 1;
  if (v15 == 1)
  {
    v20 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    v18 = v20 != 0;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  v19 = __ldxr((unsigned __int8 *)v13);
  if (v19 != 1)
  {
    __clrex();
LABEL_36:
    result = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      return result;
    goto LABEL_37;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
    goto LABEL_36;
  if (v16)
    return result;
LABEL_37:
  if (v17)
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (!v18)
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v13, v8);
  return result;
}

uint64_t WebCore::AccessibilityObject::isNonNativeTextControl(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  WebCore::Element *v3;
  uint64_t result;

  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2976))(this) == 125)
    return (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 120))(this) ^ 1;
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2976))(this) == 126)
    return (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 120))(this) ^ 1;
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2976))(this) == 101)
    return (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 120))(this) ^ 1;
  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 832))(this);
  result = WebCore::AccessibilityObject::contentEditableAttributeIsEnabled(v2, v3);
  if ((_DWORD)result)
    return (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 120))(this) ^ 1;
  return result;
}

void WebCore::AccessibilityObject::spellCheckerResultRanges(WebCore::AccessibilityObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::Document *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WebCore::Editor *v32;
  void *v33;
  WebCore::Editor *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unsigned int v41;

  if (!(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this))
    goto LABEL_17;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this)
                                         + 40)
                             + 8)
                 + 528);
  if (!v4)
    goto LABEL_17;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_17;
  v6 = *(WebCore::Document **)(v5 + 296);
  v7 = *((_QWORD *)v6 + 382);
  if (!v7)
  {
    v37 = v5;
    v32 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v32, v6);
    v34 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v32;
    if (v34)
    {
      WebCore::Editor::~Editor(v34, v33);
      if (*(_DWORD *)v35)
      {
        *(_QWORD *)(v35 + 496) = 0;
        *(_OWORD *)(v35 + 464) = 0u;
        *(_OWORD *)(v35 + 480) = 0u;
        *(_OWORD *)(v35 + 432) = 0u;
        *(_OWORD *)(v35 + 448) = 0u;
        *(_OWORD *)(v35 + 400) = 0u;
        *(_OWORD *)(v35 + 416) = 0u;
        *(_OWORD *)(v35 + 368) = 0u;
        *(_OWORD *)(v35 + 384) = 0u;
        *(_OWORD *)(v35 + 336) = 0u;
        *(_OWORD *)(v35 + 352) = 0u;
        *(_OWORD *)(v35 + 304) = 0u;
        *(_OWORD *)(v35 + 320) = 0u;
        *(_OWORD *)(v35 + 272) = 0u;
        *(_OWORD *)(v35 + 288) = 0u;
        *(_OWORD *)(v35 + 240) = 0u;
        *(_OWORD *)(v35 + 256) = 0u;
        *(_OWORD *)(v35 + 208) = 0u;
        *(_OWORD *)(v35 + 224) = 0u;
        *(_OWORD *)(v35 + 176) = 0u;
        *(_OWORD *)(v35 + 192) = 0u;
        *(_OWORD *)(v35 + 144) = 0u;
        *(_OWORD *)(v35 + 160) = 0u;
        *(_OWORD *)(v35 + 112) = 0u;
        *(_OWORD *)(v35 + 128) = 0u;
        *(_OWORD *)(v35 + 80) = 0u;
        *(_OWORD *)(v35 + 96) = 0u;
        *(_OWORD *)(v35 + 48) = 0u;
        *(_OWORD *)(v35 + 64) = 0u;
        *(_OWORD *)(v35 + 16) = 0u;
        *(_OWORD *)(v35 + 32) = 0u;
        *(_OWORD *)v35 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v35, v36);
      }
    }
    v7 = *((_QWORD *)v6 + 382);
    v5 = v37;
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8
    || (v9 = *(_QWORD *)(v8 + 8)) == 0
    || (v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 584))(v9)) == 0)
  {
LABEL_17:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return;
  }
  v11 = v10;
  if ((*(_QWORD *)(*(_QWORD *)(v5 + 136) + 696) & 0x2000000000000000) == 0)
  {
    v38 = 0;
    LODWORD(v39) = -1;
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)this + 1384))(&v40, this);
    if (v40)
    {
      v12 = *((_QWORD *)v40 + 1);
      v13 = *((unsigned int *)v40 + 1) | ((unint64_t)((*((_DWORD *)v40 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v12 = 0;
      v13 = 0x100000000;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t *, int *))(*(_QWORD *)v11 + 40))(v11, v12, v13, &v39, &v38);
    v15 = v40;
    v40 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v39;
    if ((v39 & 0x80000000) == 0)
    {
      v17 = v38;
      if (v38 >= 1)
      {
        v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)a2 = v18;
        *v18 = v16;
        v18[1] = v17;
        *(_QWORD *)(a2 + 8) = 0x100000001;
        return;
      }
    }
    goto LABEL_17;
  }
  (*(void (**)(uint64_t *__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)this + 1384))(&v39, this);
  if (v39)
  {
    v19 = *(_QWORD *)(v39 + 8);
    v20 = *(unsigned int *)(v39 + 4) | ((unint64_t)((*(_DWORD *)(v39 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v19 = 0;
    v20 = 0x100000000;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 56))(&v40, v11, v19, v20, 1, *(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064) + 56);
  v22 = (WTF::StringImpl *)v39;
  v23 = v40;
  v24 = v41;
  v39 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if ((_DWORD)v24)
  {
    if (v24 >> 28)
    {
      __break(0xC471u);
      return;
    }
    v25 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v24));
    *(_DWORD *)(a2 + 8) = v24;
    *(_QWORD *)a2 = v25;
    v26 = (__int128 *)((char *)v23 + 8);
    v27 = v24;
    do
    {
      v28 = *v26;
      v26 += 3;
      *v25++ = v28;
      --v27;
    }
    while (v27);
    *(_DWORD *)(a2 + 12) = v24;
    v29 = 48 * v24;
    v30 = (uint64_t)v23 + 24;
    do
    {
      v31 = *(WTF::StringImpl **)(v30 + 16);
      *(_QWORD *)(v30 + 16) = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v21);
        else
          *(_DWORD *)v31 -= 2;
      }
      WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, v21);
      v30 += 48;
      v29 -= 48;
    }
    while (v29);
  }
  if (v23)
    WTF::fastFree(v23, v21);
}

void WebCore::AccessibilityObject::misspellingRange(WTF *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  WebCore::Node **v4;
  WTF *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Document *v11;
  WebCore::Editor *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WebCore::Node *v25;
  WTF *v26;
  WebCore::Node *v27;
  WTF *v28;
  WTF *v29;
  WebCore::Node *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WebCore::Editor *v35;
  void *v36;
  WebCore::Editor *v37;
  void *v38;
  WTF *v39;
  int v40;
  unsigned int v41;
  WebCore::Node *v42;
  int v43;
  unsigned __int8 v44;
  WTF::StringImpl *v45;

  LODWORD(v4) = a3;
  v6 = a1;
  v8 = (*(uint64_t (**)(WTF *))(*(_QWORD *)a1 + 840))(a1);
  if (!v8
    || (v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 528)) == 0
    || (v10 = *(_QWORD *)(v9 + 8)) == 0
    || (*(_QWORD *)(*(_QWORD *)(v10 + 136) + 696) & 0x2000000000000000) == 0)
  {
LABEL_32:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 32) = 0;
    return;
  }
  v11 = *(WebCore::Document **)(v10 + 296);
  v12 = (WebCore::Editor *)*((_QWORD *)v11 + 382);
  if (!v12)
  {
    v35 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v35, v11);
    v37 = (WebCore::Editor *)*((_QWORD *)v11 + 382);
    *((_QWORD *)v11 + 382) = v35;
    if (v37)
    {
      WebCore::Editor::~Editor(v37, v36);
      if (*(_DWORD *)v23)
        goto LABEL_81;
      WTF::fastFree((WTF *)v23, v38);
    }
    goto LABEL_79;
  }
  while (2)
  {
    v13 = *((_QWORD *)v12 + 1);
    if (!v13)
      goto LABEL_32;
    v14 = *(_QWORD *)(v13 + 8);
    if (!v14)
      goto LABEL_32;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 584))(v14);
    if (!v15)
      goto LABEL_32;
    v16 = v15;
    (*(void (**)(WTF::StringImpl **__return_ptr, WTF *))(*(_QWORD *)v6 + 1384))(&v45, v6);
    v17 = v45;
    if (v45)
    {
      v18 = *((_QWORD *)v45 + 1);
      v17 = *((_DWORD *)v45 + 1);
      v19 = ((unint64_t)*((unsigned int *)v45 + 4) >> 2) & 1;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
    (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 56))(&v39, v16, v18, v17 | (v19 << 32), 1, *(_QWORD *)(*(_QWORD *)(v10 + 296) + 3064) + 56);
    v6 = v39;
    v10 = v41;
    v21 = v45;
    v45 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    if ((_DWORD)v4 == 1)
    {
      if ((_DWORD)v10)
      {
        v4 = &v42;
        a2 += 16;
        v22 = 48 * v10;
        v11 = v6;
        do
        {
          WebCore::Editor::rangeForTextCheckingResult(v12, (uint64_t)v11, (uint64_t)&v39);
          if (v44)
          {
            v23 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v42, a2);
            v24 = v44;
            if ((char)v23 >= 1)
              goto LABEL_53;
            if (v44)
            {
              v25 = v42;
              v42 = 0;
              if (v25)
              {
                if (*((_DWORD *)v25 + 6) == 2)
                {
                  if ((*((_WORD *)v25 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v25, v20);
                }
                else
                {
                  *((_DWORD *)v25 + 6) -= 2;
                }
              }
              v26 = v39;
              v39 = 0;
              if (v26)
              {
                if (*((_DWORD *)v26 + 6) == 2)
                {
                  if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v26, v20);
                }
                else
                {
                  *((_DWORD *)v26 + 6) -= 2;
                }
              }
            }
          }
          v11 = (WebCore::Document *)((char *)v11 + 48);
          v22 -= 48;
        }
        while (v22);
      }
LABEL_52:
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 32) = 0;
      goto LABEL_59;
    }
    if (!(_DWORD)v10)
      goto LABEL_52;
    v4 = (WebCore::Node **)(48 * v10);
    v11 = (WTF *)((char *)v6 - 48);
    while (1)
    {
      WebCore::Editor::rangeForTextCheckingResult(v12, (uint64_t)v4 + (_QWORD)v11, (uint64_t)&v39);
      if (v44)
        break;
LABEL_46:
      v4 -= 6;
      if (!v4)
        goto LABEL_52;
    }
    v23 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v39, a2);
    v24 = v44;
    if (v23 == 129 || ((char)v23 & 0x80000000) == 0)
    {
      if (v44)
      {
        v27 = v42;
        v42 = 0;
        if (v27)
        {
          if (*((_DWORD *)v27 + 6) == 2)
          {
            if ((*((_WORD *)v27 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v27, v20);
          }
          else
          {
            *((_DWORD *)v27 + 6) -= 2;
          }
        }
        v28 = v39;
        v39 = 0;
        if (v28)
        {
          if (*((_DWORD *)v28 + 6) == 2)
          {
            if ((*((_WORD *)v28 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v28, v20);
          }
          else
          {
            *((_DWORD *)v28 + 6) -= 2;
          }
        }
      }
      goto LABEL_46;
    }
LABEL_53:
    if (!v24)
    {
      __break(1u);
LABEL_81:
      *(_QWORD *)(v23 + 496) = 0;
      *(_OWORD *)(v23 + 464) = 0u;
      *(_OWORD *)(v23 + 480) = 0u;
      *(_OWORD *)(v23 + 432) = 0u;
      *(_OWORD *)(v23 + 448) = 0u;
      *(_OWORD *)(v23 + 400) = 0u;
      *(_OWORD *)(v23 + 416) = 0u;
      *(_OWORD *)(v23 + 368) = 0u;
      *(_OWORD *)(v23 + 384) = 0u;
      *(_OWORD *)(v23 + 336) = 0u;
      *(_OWORD *)(v23 + 352) = 0u;
      *(_OWORD *)(v23 + 304) = 0u;
      *(_OWORD *)(v23 + 320) = 0u;
      *(_OWORD *)(v23 + 272) = 0u;
      *(_OWORD *)(v23 + 288) = 0u;
      *(_OWORD *)(v23 + 240) = 0u;
      *(_OWORD *)(v23 + 256) = 0u;
      *(_OWORD *)(v23 + 208) = 0u;
      *(_OWORD *)(v23 + 224) = 0u;
      *(_OWORD *)(v23 + 176) = 0u;
      *(_OWORD *)(v23 + 192) = 0u;
      *(_OWORD *)(v23 + 144) = 0u;
      *(_OWORD *)(v23 + 160) = 0u;
      *(_OWORD *)(v23 + 112) = 0u;
      *(_OWORD *)(v23 + 128) = 0u;
      *(_OWORD *)(v23 + 80) = 0u;
      *(_OWORD *)(v23 + 96) = 0u;
      *(_OWORD *)(v23 + 48) = 0u;
      *(_OWORD *)(v23 + 64) = 0u;
      *(_OWORD *)(v23 + 16) = 0u;
      *(_OWORD *)(v23 + 32) = 0u;
      *(_OWORD *)v23 = 0u;
LABEL_79:
      v12 = (WebCore::Editor *)*((_QWORD *)v11 + 382);
      continue;
    }
    break;
  }
  v29 = v39;
  *((_DWORD *)v39 + 6) += 2;
  *(_QWORD *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v40;
  v30 = v42;
  v31 = *((_DWORD *)v42 + 6);
  *((_DWORD *)v42 + 6) = v31 + 2;
  *(_QWORD *)(a4 + 16) = v30;
  *(_DWORD *)(a4 + 24) = v43;
  *(_BYTE *)(a4 + 32) = 1;
  v42 = 0;
  if (v31)
  {
    *((_DWORD *)v30 + 6) = v31;
    goto LABEL_56;
  }
  if ((*((_WORD *)v30 + 15) & 0x400) != 0)
  {
LABEL_56:
    v39 = 0;
LABEL_57:
    if (*((_DWORD *)v29 + 6) == 2)
    {
      if ((*((_WORD *)v29 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v29, v20);
    }
    else
    {
      *((_DWORD *)v29 + 6) -= 2;
    }
  }
  else
  {
    WebCore::Node::removedLastRef(v30, v20);
    v29 = v39;
    v39 = 0;
    if (v29)
      goto LABEL_57;
  }
LABEL_59:
  if ((_DWORD)v10)
  {
    v32 = 48 * v10;
    v33 = (uint64_t)v6 + 24;
    do
    {
      v34 = *(WTF::StringImpl **)(v33 + 16);
      *(_QWORD *)(v33 + 16) = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v20);
        else
          *(_DWORD *)v34 -= 2;
      }
      WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v33, v20);
      v33 += 48;
      v32 -= 48;
    }
    while (v32);
  }
  if (v6)
    WTF::fastFree(v6, v20);
}

double WebCore::AccessibilityObject::textInputMarkedTextMarkerRange@<D0>(WebCore::AccessibilityObject *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Document *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  WebCore::Node *v20;
  WebCore::Node *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  WebCore::Document *v26;
  WebCore::Editor *v27;
  void *v28;
  WebCore::Editor *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WebCore::Node *v33[2];
  WebCore::Node *v34;
  char v35;

  v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (v4
    && (v5 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4)) != 0)
  {
    v7 = v5;
    do
      v8 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v8 + 1, (unsigned int *)v5));
    v9 = *(_QWORD *)(v5 + 8);
    if (!v9)
      goto LABEL_23;
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 528);
    if (!v10)
      goto LABEL_23;
    v11 = *(_QWORD *)(v10 + 8);
    if (!v11)
      goto LABEL_23;
    v12 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
    if (!v12)
      goto LABEL_23;
    v13 = *(WebCore::Document **)(v11 + 296);
    v14 = *((_QWORD *)v13 + 382);
    if (!v14)
    {
      v32 = v12;
      v26 = v13;
      v27 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v27, v26);
      v29 = (WebCore::Editor *)*((_QWORD *)v26 + 382);
      *((_QWORD *)v26 + 382) = v27;
      if (v29)
      {
        WebCore::Editor::~Editor(v29, v28);
        if (*(_DWORD *)v30)
        {
          *(_QWORD *)(v30 + 496) = 0;
          *(_OWORD *)(v30 + 464) = 0u;
          *(_OWORD *)(v30 + 480) = 0u;
          *(_OWORD *)(v30 + 432) = 0u;
          *(_OWORD *)(v30 + 448) = 0u;
          *(_OWORD *)(v30 + 400) = 0u;
          *(_OWORD *)(v30 + 416) = 0u;
          *(_OWORD *)(v30 + 368) = 0u;
          *(_OWORD *)(v30 + 384) = 0u;
          *(_OWORD *)(v30 + 336) = 0u;
          *(_OWORD *)(v30 + 352) = 0u;
          *(_OWORD *)(v30 + 304) = 0u;
          *(_OWORD *)(v30 + 320) = 0u;
          *(_OWORD *)(v30 + 272) = 0u;
          *(_OWORD *)(v30 + 288) = 0u;
          *(_OWORD *)(v30 + 240) = 0u;
          *(_OWORD *)(v30 + 256) = 0u;
          *(_OWORD *)(v30 + 208) = 0u;
          *(_OWORD *)(v30 + 224) = 0u;
          *(_OWORD *)(v30 + 176) = 0u;
          *(_OWORD *)(v30 + 192) = 0u;
          *(_OWORD *)(v30 + 144) = 0u;
          *(_OWORD *)(v30 + 160) = 0u;
          *(_OWORD *)(v30 + 112) = 0u;
          *(_OWORD *)(v30 + 128) = 0u;
          *(_OWORD *)(v30 + 80) = 0u;
          *(_OWORD *)(v30 + 96) = 0u;
          *(_OWORD *)(v30 + 48) = 0u;
          *(_OWORD *)(v30 + 64) = 0u;
          *(_OWORD *)(v30 + 16) = 0u;
          *(_OWORD *)(v30 + 32) = 0u;
          *(_OWORD *)v30 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v30, v31);
        }
      }
      v12 = v32;
      v14 = *((_QWORD *)v26 + 382);
    }
    if ((v6 = *(void **)(v14 + 32)) != 0
      && (v15 = WebCore::AXObjectCache::getOrCreate(v12, (uint64_t)v6, 0)) != 0
      && ((v16 = v15, (v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 2960))(v15)) != 0)
        ? (v18 = v17)
        : (v18 = v16),
          *(_QWORD *)(v18 + 16) == *((_QWORD *)this + 2)))
    {
      WebCore::Editor::compositionRange(v14, (uint64_t)v33);
      WebCore::AXTextMarkerRange::AXTextMarkerRange(a2, (const WebCore::SimpleRange *)v33);
      if (v35)
      {
        v20 = v34;
        v34 = 0;
        if (v20)
        {
          if (*((_DWORD *)v20 + 6) == 2)
          {
            if ((*((_WORD *)v20 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v20, v6);
          }
          else
          {
            *((_DWORD *)v20 + 6) -= 2;
          }
        }
        v21 = v33[0];
        v33[0] = 0;
        if (v21)
        {
          if (*((_DWORD *)v21 + 6) == 2)
          {
            if ((*((_WORD *)v21 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v21, v6);
          }
          else
          {
            *((_DWORD *)v21 + 6) -= 2;
          }
        }
      }
    }
    else
    {
LABEL_23:
      result = 0.0;
      a2[2] = 0u;
      a2[3] = 0u;
      *a2 = 0u;
      a2[1] = 0u;
    }
    do
    {
      v22 = __ldaxr((unsigned int *)v7);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v7));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v7);
      v24 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v24)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v24));
      v25 = *(WTF **)(v7 + 16);
      if (v25)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        WTF::fastFree(v25, v6);
      }
      WTF::fastFree((WTF *)v7, v6);
    }
  }
  else
  {
    result = 0.0;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::blockquoteLevel(WebCore::AccessibilityObject *this)
{
  uint64_t result;
  uint64_t v2;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v2 = result;
    result = 0;
    do
    {
      if ((*(_WORD *)(v2 + 28) & 0x10) != 0)
        result = result
               + (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24));
      v2 = *(_QWORD *)(v2 + 32);
    }
    while (v2);
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::parentObjectUnignored(WebCore::AccessibilityObject *this)
{
  uint64_t (*i)(void);
  uint64_t v2;
  uint64_t v3;

  for (i = *(uint64_t (**)(void))(*(_QWORD *)this + 1232); ; i = *(uint64_t (**)(void))(*(_QWORD *)v3 + 1232))
  {
    v2 = i();
    v3 = v2;
    if (!v2 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 856))(v2))
      break;
  }
  return v3;
}

uint64_t WebCore::AccessibilityObject::displayContentsParent(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t v6;

  if (!(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this))
    return 0;
  v2 = *(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this) + 32);
  if (!v2 || (*(_WORD *)(v2 + 28) & 8) == 0)
    return 0;
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v5 = *(_QWORD *)((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
    || (*(_QWORD *)(v5 + 16) & 0x1FLL) != 0x12)
  {
    if (v3)
    {
      *(_DWORD *)(v2 + 24) = v3;
    }
    else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    return 0;
  }
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = v3;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  v6 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
  if (!v6)
    return 0;
  return WebCore::AXObjectCache::getOrCreate(v6, v2, 0);
}

WebCore::AccessibilityObject *WebCore::AccessibilityObject::nextSiblingUnignored(WebCore::AccessibilityObject *this, int a2)
{
  WebCore::AccessibilityObject *v3;
  void *v4;
  WebCore::AccessibilityObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int v12;
  WebCore::AccessibilityObject *v14;
  WebCore::AccessibilityObject *v16;
  uint64_t v17;

  v3 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this
                                                                                                 + 2936))(this);
  if (!v3)
  {
    v16 = 0;
    v17 = 0;
    if (a2)
      goto LABEL_24;
    goto LABEL_30;
  }
  v5 = v3;
  v6 = WebCore::AccessibilityObject::displayContentsParent(v3);
  v7 = *((_QWORD *)v5 + 1);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_8:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v16 = v5;
  if (!v6)
    goto LABEL_23;
  v10 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_18:
  ++*(_QWORD *)(v10 + 8);
  v12 = __ldxr((unsigned __int8 *)v10);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_23:
  v17 = v6;
  if (a2)
  {
LABEL_24:
    do
    {
      if (!(v16
           ? WTF::RefPtr<WebCore::AccessibilityObject const,WTF::RawPtrTraits<WebCore::AccessibilityObject const>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject const>>::unspecifiedBoolTypeInstance
           : 0))
        break;
      if (((*(uint64_t (**)(void))(*(_QWORD *)v16 + 856))() & 1) == 0)
      {
        v14 = v16;
        goto LABEL_32;
      }
      --a2;
      WebCore::AccessibilityObject::iterator::operator++(&v16);
    }
    while (a2);
  }
LABEL_30:
  v14 = 0;
LABEL_32:
  WebCore::AccessibilityObject::iterator::~iterator((WebCore::AccessibilityObject::iterator *)&v16, v4);
  return v14;
}

WebCore::AccessibilityObject *WebCore::AccessibilityObject::previousSiblingUnignored(WebCore::AccessibilityObject *this, int a2)
{
  WebCore::AccessibilityObject *v3;
  void *v4;
  WebCore::AccessibilityObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int v12;
  WebCore::AccessibilityObject *v14;
  WebCore::AccessibilityObject *v16;
  uint64_t v17;

  v3 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this
                                                                                                 + 2928))(this);
  if (!v3)
  {
    v16 = 0;
    v17 = 0;
    if (a2)
      goto LABEL_24;
    goto LABEL_30;
  }
  v5 = v3;
  v6 = WebCore::AccessibilityObject::displayContentsParent(v3);
  v7 = *((_QWORD *)v5 + 1);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_8:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v16 = v5;
  if (!v6)
    goto LABEL_23;
  v10 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_18:
  ++*(_QWORD *)(v10 + 8);
  v12 = __ldxr((unsigned __int8 *)v10);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_23:
  v17 = v6;
  if (a2)
  {
LABEL_24:
    do
    {
      if (!(v16
           ? WTF::RefPtr<WebCore::AccessibilityObject const,WTF::RawPtrTraits<WebCore::AccessibilityObject const>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject const>>::unspecifiedBoolTypeInstance
           : 0))
        break;
      if (((*(uint64_t (**)(void))(*(_QWORD *)v16 + 856))() & 1) == 0)
      {
        v14 = v16;
        goto LABEL_32;
      }
      --a2;
      WebCore::AccessibilityObject::iterator::operator--(&v16);
    }
    while (a2);
  }
LABEL_30:
  v14 = 0;
LABEL_32:
  WebCore::AccessibilityObject::iterator::~iterator((WebCore::AccessibilityObject::iterator *)&v16, v4);
  return v14;
}

WebCore::AccessibilityObject **WebCore::AccessibilityObject::iterator::operator--(WebCore::AccessibilityObject **a1)
{
  uint64_t v2;
  void *v3;
  WebCore::AccessibilityObject *v4;
  uint64_t v5;
  int v7;
  WebCore::AccessibilityObject *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v17;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)*a1 + 2928))(*a1);
  v4 = (WebCore::AccessibilityObject *)v2;
  if (v2)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_6:
    ++*(_QWORD *)(v5 + 8);
    v7 = __ldxr((unsigned __int8 *)v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
LABEL_11:
  v8 = *a1;
  *a1 = v4;
  if (!v8)
    goto LABEL_28;
  v9 = *((_QWORD *)v8 + 1);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_16:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v17 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v17 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v9))
    {
      if (v12)
        goto LABEL_28;
      goto LABEL_24;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
  if (v12)
    goto LABEL_28;
LABEL_24:
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (!v14)
    WTF::fastFree((WTF *)v9, v3);
LABEL_28:
  WebCore::AccessibilityObject::iterator::ensureContentsParentValidity(a1);
  return a1;
}

float WebCore::AccessibilityObject::convertFrameToSpace(uint64_t a1, float *a2, int a3)
{
  uint64_t (*i)(void);
  WebCore::ScrollView *v7;
  __n128 v8;
  WebCore::ScrollView *v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  int v19;
  float v20;
  int v21;
  float v22;
  float v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;

  for (i = *(uint64_t (**)(void))(*(_QWORD *)a1 + 1232); ; i = *(uint64_t (**)(void))(v11 + 1232))
  {
    v7 = (WebCore::ScrollView *)i();
    v9 = v7;
    if (!v7)
    {
      v12 = 1;
      goto LABEL_16;
    }
    v10 = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v7 + 2688))(v7);
    v11 = *(_QWORD *)v9;
    if ((v10 & 1) != 0)
      break;
  }
  if (((*(uint64_t (**)(WebCore::ScrollView *))(v11 + 2688))(v9) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19560D208);
  }
  v13 = *((_QWORD *)v9 + 30);
  if (v13 && (v7 = *(WebCore::ScrollView **)(v13 + 8)) != 0)
  {
    v12 = 0;
  }
  else
  {
    v14 = *((_QWORD *)v9 + 31);
    if (v14
      && (v15 = *(_QWORD *)(v14 + 8)) != 0
      && (v16 = *(_QWORD *)(v15 + 112)) != 0
      && (v17 = *(_QWORD *)(v16 + 8)) != 0
      && !*(_BYTE *)(v17 + 144)
      && (v49 = *(_QWORD *)(v17 + 296)) != 0
      && (v50 = *(_QWORD *)(v49 + 528)) != 0
      && (v51 = *(_QWORD *)(v50 + 8)) != 0)
    {
      v12 = 0;
      v7 = *(WebCore::ScrollView **)(v51 + 288);
    }
    else
    {
      v12 = 0;
      v7 = 0;
    }
  }
LABEL_16:
  v18 = *a2;
  if (*a2 >= 2147500000.0)
  {
    v19 = 0x7FFFFFFF;
  }
  else if (v18 <= -2147500000.0)
  {
    v19 = 0x80000000;
  }
  else
  {
    v19 = (int)v18;
  }
  v20 = a2[1];
  if (v20 >= 2147500000.0)
  {
    v21 = 0x7FFFFFFF;
  }
  else if (v20 <= -2147500000.0)
  {
    v21 = 0x80000000;
  }
  else
  {
    v21 = (int)v20;
  }
  v22 = a2[2];
  v23 = a2[3];
  v8.n128_u64[0] = 0x4F0000004F000000;
  if (v22 > -2147500000.0)
    v24 = (int)v22;
  else
    v24 = 0x80000000;
  if (v22 < 2147500000.0)
    v25 = v24;
  else
    v25 = 0x7FFFFFFF;
  v26 = (int)v23;
  if (v23 <= -2147500000.0)
    v26 = 0x80000000;
  if (v23 >= 2147500000.0)
    v26 = 0x7FFFFFFF;
  v27 = v19 << 6;
  if (v19 < -33554432)
    v27 = 0x80000000;
  v28 = v25 << 6;
  if (v25 < -33554432)
    v28 = 0x80000000;
  v29 = (v26 << 6);
  if (v19 <= 0x1FFFFFF)
    v30 = v27;
  else
    v30 = 0x7FFFFFFF;
  if (v21 >= -33554432)
    v31 = v21 << 6;
  else
    v31 = 0x80000000;
  if (v21 <= 0x1FFFFFF)
    v32 = v31;
  else
    v32 = 0x7FFFFFFF;
  v33 = v30 / 64;
  v34 = v30 - (v31 & 0xFFFFFFC0);
  v35 = v32 / 64;
  v36 = v32 - (v31 & 0xFFFFFFC0);
  if (v25 <= 0x1FFFFFF)
    v37 = v28;
  else
    v37 = 0x7FFFFFFF;
  if (v26 >= -33554432)
    v38 = v26 << 6;
  else
    v38 = 0x80000000;
  if (v26 > 0x1FFFFFF)
    v38 = 0x7FFFFFFF;
  v39 = __OFADD__(v34, v37);
  v40 = v34 + v37;
  if (v39)
    v40 = (v34 >> 31) + 0x7FFFFFFF;
  v39 = __OFADD__(v36, v38);
  v41 = v36 + v38;
  v42 = (v36 >> 31) + 0x7FFFFFFF;
  if (!v39)
    v42 = v41;
  v43 = v36 + 32;
  v44 = v34 + 32;
  LODWORD(v45) = v33 + (v44 >> 6);
  v52 = v45 | ((unint64_t)(v35 + (v43 >> 6)) << 32);
  v53 = (v40 / 64 - (v44 >> 6) + ((int)(v40 - (v41 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v42 / 64 - (v43 >> 6) + ((int)(v42 - (v40 & 0xFFFFFFC0) + 32) >> 6)) << 32);
  if (v7)
  {
    v45 = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)&v52);
    v52 = v45;
    v53 = v29;
  }
  if (!a3)
  {
    v46 = (*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)a1 + 1704))(a1, v29, v8);
    if (v46)
    {
      v47 = v46;
      if ((v12 & 1) == 0
        && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v46 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v46 + 48) + 16)))
      {
        v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v9 + 1712))(v9)
                                                            + 528)
                                                + 8)
                                    + 24)
                        + 8);
      }
      LODWORD(v45) = (*(uint64_t (**)(_QWORD, unint64_t *))(**(_QWORD **)(v47 + 48) + 112))(*(_QWORD *)(v47 + 48), &v52);
    }
  }
  return (float)(int)v45;
}

uint64_t WebCore::AccessibilityScrollView::scrollView(WebCore::AccessibilityScrollView *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 30);
  if (!v2 || (result = *(_QWORD *)(v2 + 8)) == 0)
  {
    v4 = *((_QWORD *)this + 31);
    if (v4
      && (v5 = *(_QWORD *)(v4 + 8)) != 0
      && (v6 = *(_QWORD *)(v5 + 112)) != 0
      && (v7 = *(_QWORD *)(v6 + 8)) != 0
      && !*(_BYTE *)(v7 + 144)
      && (v8 = *(_QWORD *)(v7 + 296)) != 0
      && (v9 = *(_QWORD *)(v8 + 528)) != 0
      && (v10 = *(_QWORD *)(v9 + 8)) != 0)
    {
      return *(_QWORD *)(v10 + 288);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::page(WebCore::AccessibilityObject *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (result)
  {
    v2 = *(_QWORD *)(result + 528);
    if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 24)) != 0)
      return *(_QWORD *)(v4 + 8);
    else
      return 0;
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::relativeFrame(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  int32x4_t v12;
  float32x4_t v14;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1512))(this);
  v4 = v3;
  v5 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1528))(this);
  v6 = (_DWORD)v5 << 6;
  if ((int)v5 < -33554432)
    v6 = 0x80000000;
  if ((int)v5 > 0x1FFFFFF)
    v6 = 0x7FFFFFFF;
  if (SHIDWORD(v5) >= -33554432)
    v7 = HIDWORD(v5) << 6;
  else
    v7 = 0x80000000;
  if (SHIDWORD(v5) <= 0x1FFFFFF)
    v8 = v7;
  else
    v8 = 0x7FFFFFFF;
  v9 = __OFADD__((_DWORD)v2, v6);
  v10 = v2 + v6;
  if (v9)
    v10 = (v2 >> 31) + 0x7FFFFFFF;
  v9 = __OFADD__(HIDWORD(v2), v8);
  v11 = HIDWORD(v2) + v8;
  if (v9)
    v11 = (HIDWORD(v2) >> 31) + 0x7FFFFFFF;
  v12.i64[0] = __PAIR64__(v11, v10);
  v12.i64[1] = v4;
  v14 = vmulq_f32(vcvtq_f32_s32(v12), (float32x4_t)vdupq_n_s32(0x3C800000u));
  return (*(uint64_t (**)(WebCore::AccessibilityObject *, float32x4_t *, uint64_t))(*(_QWORD *)this + 1536))(this, &v14, 1);
}

uint64_t WebCore::firstAccessibleObjectFromNode(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  BOOL v11;
  WebCore::AXObjectCache *v12;
  WebCore::Document *v13;
  WebCore::AXObjectCache **v14;
  WebCore::AXObjectCache *v15;
  WebCore::RenderObject *v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  WebCore::RenderObject *v20;
  _QWORD *v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::AXObjectCache *v27;
  uint64_t v28;

  if (result)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
    v3 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
    if ((v3 & 1) == 0)
      return 0;
    v4 = (_QWORD *)result;
    v5 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
    if (*(_BYTE *)(v2 + 3362) || *(_BYTE *)(v2 + 3405))
    {
      for (i = *(_QWORD *)(v2 + 528); i; i = *(_QWORD *)(v5 + 528))
      {
        v23 = *(_QWORD *)(i + 8);
        if (!v23)
          break;
        v24 = *(_QWORD *)(v23 + 120);
        if (!v24)
          break;
        v25 = *(_QWORD *)(v24 + 8);
        if (!v25)
          break;
        v5 = *(_QWORD *)(*(_QWORD *)(v25 + 40) + 8);
      }
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 528);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8);
          if (v8 && *(_BYTE *)(v8 + 144) == 0)
          {
            v10 = *(_QWORD *)(v8 + 296);
            if (v10)
              v5 = v10;
          }
        }
      }
    }
    *(_DWORD *)(v5 + 24) += 2;
    v28 = v5;
    if (*(_QWORD *)(v5 + 1944))
      v11 = *(_BYTE *)(v5 + 3405) == 0;
    else
      v11 = 0;
    if (!v11)
    {
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v28);
      return 0;
    }
    v12 = *(WebCore::AXObjectCache **)(v5 + 1488);
    if (v12)
    {
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v28);
    }
    else
    {
      v13 = (WebCore::Document *)v5;
      v14 = (WebCore::AXObjectCache **)(v5 + 1488);
      v15 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
      v27 = WebCore::AXObjectCache::AXObjectCache(v15, v13);
      std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v14, &v27);
      std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v27);
      WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
      v12 = (WebCore::AXObjectCache *)*((_QWORD *)v13 + 186);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v28);
      if (!v12)
        return 0;
    }
    v16 = (WebCore::RenderObject *)(v4[8] & 0xFFFFFFFFFFFFLL);
    if (!v16)
      return 0;
    result = WebCore::AXObjectCache::getOrCreate(v12, v16);
    if (result)
    {
      v17 = result;
      do
      {
        v18 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v17);
        result = v17;
        if ((v18 & 1) != 0)
          break;
        if ((*((_WORD *)v4 + 14) & 4) != 0)
        {
          v19 = (_QWORD *)v4[10];
          if (v19)
            continue;
        }
        while (1)
        {
          v19 = (_QWORD *)v4[7];
          if (v19)
            break;
          if (!v4[4])
            return 0;
          v4 = (_QWORD *)v4[4];
        }
        v20 = (WebCore::RenderObject *)(v19[8] & 0xFFFFFFFFFFFFLL);
        if (!v20)
        {
          do
          {
            while (1)
            {
              v21 = (_QWORD *)v19[7];
              if (v21)
                break;
              v19 = (_QWORD *)v19[4];
              if (!v19)
                return 0;
            }
            v19 = (_QWORD *)v19[7];
            v20 = (WebCore::RenderObject *)(v21[8] & 0xFFFFFFFFFFFFLL);
          }
          while (!v20);
          v19 = v21;
        }
        v17 = WebCore::AXObjectCache::getOrCreate(v12, v20);
        result = 0;
        v4 = v19;
      }
      while (v17);
    }
  }
  return result;
}

BOOL WebCore::AccessibilityObject::isDescendantOfRole(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1232))(a1);
  if (!v3)
    return 0;
  v4 = v3;
  do
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1456))(v4);
    v6 = v5 == a2;
    if (v5 == a2)
      break;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1232))(v4);
  }
  while (v4);
  return v6;
}

uint64_t WebCore::AccessibilityObject::insertChild(uint64_t result, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char isARIAHidden;
  BOOL v12;
  char v13;
  uint64_t v14;
  WebCore::AccessibilityObject *v15;
  char v16;
  int v17;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v36;
  void *v37;
  uint64_t v38;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  int v52;
  uint64_t v53;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  _QWORD *v78;
  uint64_t v79;
  int v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;

  if (!a2)
    return result;
  v7 = result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  if (!(_DWORD)result)
    return result;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 3112))(a2) & 1) == 0 && !*(_BYTE *)(v7 + 233))
  {
    v21 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 1896))(a2, 0);
    v22 = *(unsigned int *)(v21 + 12);
    if (!(_DWORD)v22)
      goto LABEL_8;
    v23 = *(_QWORD **)v21;
    v24 = 8 * v22;
    v8 = 388;
    while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v23 + 1920))(*v23))
    {
      ++v23;
      v24 -= 8;
      if (!v24)
        goto LABEL_8;
    }
    goto LABEL_7;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 3104))(a2);
  if (*(_BYTE *)(v7 + 233))
  {
    v8 = 387;
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8 * v8))(a2);
  }
LABEL_8:
  v9 = WebCore::AccessibilityObject::displayContentsParent((WebCore::AccessibilityObject *)a2);
  if (!v9
    || v9 == v7
    || ((*(void (**)(uint64_t))(*(_QWORD *)v9 + 3088))(v9),
        ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 376))(v7) & 1) != 0)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1456))(v7), (_DWORD)result == 123))
  {
    v10 = WebCore::AccessibilityObject::computeAncestorFlags((WebCore::AccessibilityObject *)v7);
    *(_BYTE *)(a2 + 58) |= v10 | 1;
    v85 = a3;
    if (*(_QWORD *)(v7 + 216))
    {
      if (*(_BYTE *)(v7 + 224) || WebCore::AccessibilityObject::isARIAHidden((WebCore::AccessibilityObject *)a2))
        isARIAHidden = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 552))(a2) ^ 1;
      else
        isARIAHidden = 0;
      if (*(_BYTE *)(v7 + 225))
      {
        v12 = 1;
      }
      else
      {
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 2976))(v7);
        v12 = 1;
        if (((v20 - 49) > 0x37 || ((1 << (v20 - 49)) & 0xA0004000000001) == 0)
          && v20 != 10)
        {
          v12 = 0;
        }
      }
      if (*(_BYTE *)(v7 + 226))
        v16 = 1;
      else
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 3080))(v7) ^ 1;
    }
    else
    {
      isARIAHidden = WebCore::AccessibilityObject::isARIAHidden((WebCore::AccessibilityObject *)a2);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 552))(a2);
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1232))(a2);
      if (v14)
      {
        v15 = (WebCore::AccessibilityObject *)v14;
        v16 = 0;
        if ((v13 & 1) != 0)
        {
          v12 = 0;
          do
          {
            if (v12)
            {
              v12 = 1;
            }
            else
            {
              v17 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v15 + 2976))(v15);
              v12 = (v17 - 49) <= 0x37 && ((1 << (v17 - 49)) & 0xA0004000000001) != 0
                 || v17 == 10;
            }
            if (v16)
              v16 = 1;
            else
              v16 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v15 + 3080))(v15) ^ 1;
            v15 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v15 + 1232))(v15);
          }
          while (v15);
        }
        else
        {
          v12 = 0;
          do
          {
            if (!isARIAHidden)
              isARIAHidden = WebCore::AccessibilityObject::isARIAHidden(v15);
            if (v12)
            {
              v12 = 1;
            }
            else
            {
              v25 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v15 + 2976))(v15);
              v12 = (v25 - 49) <= 0x37 && ((1 << (v25 - 49)) & 0xA0004000000001) != 0
                 || v25 == 10;
            }
            if (v16)
              v16 = 1;
            else
              v16 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v15 + 3080))(v15) ^ 1;
            v15 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v15 + 1232))(v15);
          }
          while (v15);
        }
      }
      else
      {
        v12 = 0;
        v16 = 0;
      }
    }
    *(_QWORD *)(a2 + 216) = v7;
    *(_BYTE *)(a2 + 224) = isARIAHidden;
    *(_BYTE *)(a2 + 225) = v12;
    *(_BYTE *)(a2 + 226) = v16;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 856))(a2);
    v84 = v7;
    v82 = a2 + 216;
    if ((_DWORD)result)
    {
      v28 = v85;
      if (a4)
      {
        v29 = WebCore::AccessibilityObject::computeAncestorFlags((WebCore::AccessibilityObject *)a2);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 1896))(a2, 1);
        v30 = *(unsigned int *)(result + 12);
        if ((_DWORD)v30)
        {
          v31 = *(uint64_t **)result;
          v32 = 8 * v30;
          v83 = v29 | v10;
          while (1)
          {
            v33 = *v31;
            if (!*v31)
            {
              v86 = v28;
              goto LABEL_154;
            }
            v34 = *(_QWORD *)(v33 + 8);
            if (__ldaxr((unsigned __int8 *)v34))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v34))
            {
              goto LABEL_78;
            }
            MEMORY[0x19AEA534C](v34);
LABEL_78:
            ++*(_QWORD *)(v34 + 8);
            v36 = __ldxr((unsigned __int8 *)v34);
            if (v36 != 1)
            {
              __clrex();
LABEL_82:
              WTF::Lock::unlockSlow((WTF::Lock *)v34);
              goto LABEL_83;
            }
            if (__stlxr(0, (unsigned __int8 *)v34))
              goto LABEL_82;
LABEL_83:
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 48))(v33);
            if (!(_DWORD)result)
            {
              v42 = 5;
              v86 = v28;
              goto LABEL_136;
            }
            v38 = *(_QWORD *)(v33 + 8);
            if (__ldaxr((unsigned __int8 *)v38))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v38))
            {
              goto LABEL_88;
            }
            result = MEMORY[0x19AEA534C](v38);
LABEL_88:
            ++*(_QWORD *)(v38 + 8);
            v40 = __ldxr((unsigned __int8 *)v38);
            if (v40 != 1)
            {
              __clrex();
LABEL_92:
              result = WTF::Lock::unlockSlow((WTF::Lock *)v38);
              goto LABEL_93;
            }
            if (__stlxr(0, (unsigned __int8 *)v38))
              goto LABEL_92;
LABEL_93:
            *(_BYTE *)(v33 + 58) |= v83 | 1;
            v41 = *(unsigned int *)(v7 + 52);
            if (v41 < v28)
            {
              v42 = 4;
              v86 = v28;
              goto LABEL_117;
            }
            if ((_DWORD)v41 == *(_DWORD *)(v7 + 48))
            {
              v43 = v41 + (v41 >> 2);
              if (v43 >= 0x10)
                v44 = v43 + 1;
              else
                v44 = 16;
              if (v44 <= v41 + 1)
                v45 = v41 + 1;
              else
                v45 = v44;
              if (v45 >> 29)
                goto LABEL_184;
              v46 = *(void **)(v7 + 40);
              v47 = (void *)WTF::fastMalloc((WTF *)(8 * v45));
              *(_DWORD *)(v7 + 48) = v45;
              *(_QWORD *)(v7 + 40) = v47;
              memcpy(v47, v46, 8 * v41);
              if (v46)
              {
                if (*(void **)(v7 + 40) == v46)
                {
                  *(_QWORD *)(v7 + 40) = 0;
                  *(_DWORD *)(v7 + 48) = 0;
                }
                WTF::fastFree((WTF *)v46, v48);
              }
            }
            v49 = (_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * v28);
            result = (uint64_t)memmove(v49 + 1, v49, 8 * *(unsigned int *)(v7 + 52) - 8 * v28);
            v50 = *(_QWORD *)(v33 + 8);
            if (__ldaxr((unsigned __int8 *)v50))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v50))
            {
              goto LABEL_111;
            }
            result = MEMORY[0x19AEA534C](v50);
LABEL_111:
            ++*(_QWORD *)(v50 + 8);
            v52 = __ldxr((unsigned __int8 *)v50);
            if (v52 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v50))
                goto LABEL_116;
            }
            else
            {
              __clrex();
            }
            result = WTF::Lock::unlockSlow((WTF::Lock *)v50);
LABEL_116:
            v42 = 0;
            *v49 = v33;
            ++*(_DWORD *)(v7 + 52);
            v86 = v28 + 1;
LABEL_117:
            v53 = *(_QWORD *)(v33 + 8);
            if (__ldaxr((unsigned __int8 *)v53))
            {
              v55 = v28;
              __clrex();
            }
            else
            {
              v55 = v28;
              if (!__stxr(1u, (unsigned __int8 *)v53))
                goto LABEL_121;
            }
            result = MEMORY[0x19AEA534C](v53);
LABEL_121:
            v56 = *(_QWORD *)(v53 + 8);
            v57 = v56 - 1;
            *(_QWORD *)(v53 + 8) = v56 - 1;
            if (v56 == 1)
            {
              v69 = *(_QWORD *)(v53 + 16);
              v58 = *(_QWORD *)(v53 + 24);
              *(_QWORD *)(v53 + 24) = 0;
              v59 = v69 != 0;
            }
            else
            {
              v58 = 0;
              v59 = 1;
            }
            v60 = __ldxr((unsigned __int8 *)v53);
            if (v60 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v53))
              {
                if (!v57)
                  goto LABEL_129;
                goto LABEL_133;
              }
            }
            else
            {
              __clrex();
            }
            result = WTF::Lock::unlockSlow((WTF::Lock *)v53);
            if (!v57)
            {
LABEL_129:
              if (v58)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
              if (!v59)
                result = WTF::fastFree((WTF *)v53, v37);
            }
LABEL_133:
            if (v41 >= v55)
              v42 = 0;
            v7 = v84;
LABEL_136:
            v61 = *(_QWORD *)(v33 + 8);
            if (__ldaxr((unsigned __int8 *)v61))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v61))
            {
              goto LABEL_140;
            }
            result = MEMORY[0x19AEA534C](v61);
LABEL_140:
            v63 = *(_QWORD *)(v61 + 8);
            v64 = v63 - 1;
            *(_QWORD *)(v61 + 8) = v63 - 1;
            if (v63 == 1)
            {
              v68 = *(_QWORD *)(v61 + 16);
              v65 = *(_QWORD *)(v61 + 24);
              *(_QWORD *)(v61 + 24) = 0;
              v66 = v68 != 0;
            }
            else
            {
              v65 = 0;
              v66 = 1;
            }
            v67 = __ldxr((unsigned __int8 *)v61);
            if (v67 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v61))
              {
                if (v64)
                  goto LABEL_152;
                goto LABEL_148;
              }
            }
            else
            {
              __clrex();
            }
            result = WTF::Lock::unlockSlow((WTF::Lock *)v61);
            if (v64)
              goto LABEL_152;
LABEL_148:
            if (v65)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
            if (!v66)
              result = WTF::fastFree((WTF *)v61, v37);
LABEL_152:
            if (v42 != 5 && v42)
              goto LABEL_182;
LABEL_154:
            ++v31;
            v28 = v86;
            v32 -= 8;
            if (!v32)
              goto LABEL_182;
          }
        }
      }
      goto LABEL_182;
    }
    v70 = *(unsigned int *)(v7 + 52);
    v71 = v7;
    if ((_DWORD)v70 == *(_DWORD *)(v7 + 48))
    {
      v72 = v70 + (v70 >> 2);
      if (v72 >= 0x10)
        v73 = v72 + 1;
      else
        v73 = 16;
      if (v73 <= v70 + 1)
        v74 = v70 + 1;
      else
        v74 = v73;
      if (v74 >> 29)
      {
LABEL_184:
        __break(0xC471u);
        JUMPOUT(0x19560DF14);
      }
      v71 = v7;
      v75 = *(void **)(v7 + 40);
      v76 = (void *)WTF::fastMalloc((WTF *)(8 * v74));
      *(_DWORD *)(v7 + 48) = v74;
      *(_QWORD *)(v7 + 40) = v76;
      memcpy(v76, v75, 8 * v70);
      if (v75)
      {
        if (*(void **)(v7 + 40) == v75)
        {
          *(_QWORD *)(v7 + 40) = 0;
          *(_DWORD *)(v7 + 48) = 0;
        }
        WTF::fastFree((WTF *)v75, v77);
        v71 = v7;
      }
    }
    v78 = (_QWORD *)(*(_QWORD *)(v71 + 40) + 8 * v85);
    result = (uint64_t)memmove(v78 + 1, v78, 8 * *(unsigned int *)(v71 + 52) - 8 * v85);
    v79 = *(_QWORD *)(a2 + 8);
    if (__ldaxr((unsigned __int8 *)v79))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v79))
    {
      goto LABEL_176;
    }
    result = MEMORY[0x19AEA534C](v79);
LABEL_176:
    ++*(_QWORD *)(v79 + 8);
    v81 = __ldxr((unsigned __int8 *)v79);
    if (v81 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v79))
        goto LABEL_181;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v79);
LABEL_181:
    *v78 = a2;
    ++*(_DWORD *)(v71 + 52);
LABEL_182:
    *(_DWORD *)(v82 + 7) = 0;
    *(_QWORD *)v82 = 0;
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::findMatchingObjects@<X0>(WebCore::AXCoreObject *a1@<X0>, WebCore::AXCoreObject **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  WTF *v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;

  v6 = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)a1 + 1488))(a1);
  if (v6)
  {
    v7 = v6;
    if (!*(_QWORD *)(v6 + 88))
    {
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v8 = 0;
      v10 = *(WTF **)(v7 + 88);
      *(_QWORD *)(v7 + 88) = v8;
      if (v10)
      {
        if (*(_QWORD *)v10)
          WTF::fastFree((WTF *)(*(_QWORD *)v10 - 16), v9);
        WTF::fastFree(v10, v9);
      }
    }
  }
  *a2 = a1;
  v17 = 0;
  result = WebCore::AXSearchManager::findMatchingObjectsInternal(&v17, a2, a3);
  v13 = v17;
  if (v17)
  {
    v14 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v14)
    {
      v15 = v17 + 8;
      do
      {
        if (*(_QWORD *)(v15 - 8) != -1)
        {
          v16 = *(WTF **)v15;
          if (*(_QWORD *)v15)
          {
            *(_QWORD *)v15 = 0;
            *(_DWORD *)(v15 + 8) = 0;
            WTF::fastFree(v16, v12);
          }
        }
        v15 += 24;
        --v14;
      }
      while (v14);
    }
    return WTF::fastFree((WTF *)(v13 - 16), v12);
  }
  return result;
}

WebCore::Node *WebCore::AccessibilityObject::rangeOfStringClosestToRangeInDirection(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char **a5)
{
  WebCore::Node *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int16 v14;
  uint64_t i;
  WebCore::Document *v16;
  unsigned int *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  void *v20;
  WebCore::Node *v21;
  void *v22;
  WebCore::Node *v23;
  WebCore::Editor *v24;
  WebCore::Editor *v25;
  void *v26;
  WebCore::Editor *v27;
  void *v28;
  WTF *v29;
  WebCore::Node *v30;
  int v31;
  WebCore::Node *v32;
  int v33;
  char v34;
  WebCore::Node *v35[2];
  WebCore::Node *v36;
  char v37;

  result = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result
    && (v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 5) + 8) + 528)) != 0
    && (v11 = *(_QWORD *)(v10 + 8)) != 0)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v12 = *((unsigned int *)a5 + 3);
    if ((_DWORD)v12)
    {
      v13 = *a5;
      if (a4 == 2)
        v14 = 171;
      else
        v14 = 163;
      for (i = 8 * v12; i; i -= 8)
      {
        v16 = *(WebCore::Document **)(v11 + 296);
        v17 = (unsigned int *)*((_QWORD *)v16 + 382);
        if (!v17)
        {
          v24 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          v25 = WebCore::Editor::Editor(v24, v16);
          v27 = (WebCore::Editor *)*((_QWORD *)v16 + 382);
          *((_QWORD *)v16 + 382) = v25;
          if (v27)
          {
            v29 = v27;
            WebCore::Editor::~Editor(v27, v26);
            if (*(_DWORD *)v29)
            {
              *((_QWORD *)v29 + 62) = 0;
              *((_OWORD *)v29 + 29) = 0u;
              *((_OWORD *)v29 + 30) = 0u;
              *((_OWORD *)v29 + 27) = 0u;
              *((_OWORD *)v29 + 28) = 0u;
              *((_OWORD *)v29 + 25) = 0u;
              *((_OWORD *)v29 + 26) = 0u;
              *((_OWORD *)v29 + 23) = 0u;
              *((_OWORD *)v29 + 24) = 0u;
              *((_OWORD *)v29 + 21) = 0u;
              *((_OWORD *)v29 + 22) = 0u;
              *((_OWORD *)v29 + 19) = 0u;
              *((_OWORD *)v29 + 20) = 0u;
              *((_OWORD *)v29 + 17) = 0u;
              *((_OWORD *)v29 + 18) = 0u;
              *((_OWORD *)v29 + 15) = 0u;
              *((_OWORD *)v29 + 16) = 0u;
              *((_OWORD *)v29 + 13) = 0u;
              *((_OWORD *)v29 + 14) = 0u;
              *((_OWORD *)v29 + 11) = 0u;
              *((_OWORD *)v29 + 12) = 0u;
              *((_OWORD *)v29 + 9) = 0u;
              *((_OWORD *)v29 + 10) = 0u;
              *((_OWORD *)v29 + 7) = 0u;
              *((_OWORD *)v29 + 8) = 0u;
              *((_OWORD *)v29 + 5) = 0u;
              *((_OWORD *)v29 + 6) = 0u;
              *((_OWORD *)v29 + 3) = 0u;
              *((_OWORD *)v29 + 4) = 0u;
              *((_OWORD *)v29 + 1) = 0u;
              *((_OWORD *)v29 + 2) = 0u;
              *(_OWORD *)v29 = 0u;
            }
            else
            {
              WTF::fastFree(v29, v28);
            }
          }
          v17 = (unsigned int *)*((_QWORD *)v16 + 382);
        }
        v18 = *(WebCore::Node **)a3;
        *((_DWORD *)v18 + 6) = *(_DWORD *)(*(_QWORD *)a3 + 24) + 2;
        v30 = v18;
        v31 = *(_DWORD *)(a3 + 8);
        v19 = *(WebCore::Node **)(a3 + 16);
        *((_DWORD *)v19 + 6) += 2;
        v32 = v19;
        v33 = *(_DWORD *)(a3 + 24);
        v34 = 1;
        result = (WebCore::Node *)WebCore::Editor::rangeOfString(v17, v13, (unsigned __int8 *)&v30, v14, (uint64_t)v35);
        if (v34)
        {
          v21 = v32;
          v32 = 0;
          if (v21)
          {
            if (*((_DWORD *)v21 + 6) == 2)
            {
              if ((*((_WORD *)v21 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v21, v20);
            }
            else
            {
              *((_DWORD *)v21 + 6) -= 2;
            }
          }
          result = v30;
          v30 = 0;
          if (result)
          {
            if (*((_DWORD *)result + 6) == 2)
            {
              if ((*((_WORD *)result + 15) & 0x400) == 0)
                result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v20);
            }
            else
            {
              *((_DWORD *)result + 6) -= 2;
            }
          }
        }
        if (!v37)
          goto LABEL_33;
        if (!*(_BYTE *)(a1 + 32))
          goto LABEL_25;
        if (a4 == 2)
        {
          result = (WebCore::Node *)WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v36, a1 + 16);
          if ((char)result > 0)
            goto LABEL_24;
        }
        else
        {
          result = (WebCore::Node *)WebCore::treeOrder<(WebCore::TreeType)2>((int *)v35, a1);
          if (result != 129 && (char)result < 0)
          {
LABEL_24:
            if (!v37)
            {
              __break(1u);
              return result;
            }
LABEL_25:
            result = (WebCore::Node *)std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange&,void>((uint64_t *)a1, (uint64_t *)v35);
          }
        }
        if (v37)
        {
          v23 = v36;
          v36 = 0;
          if (v23)
          {
            if (*((_DWORD *)v23 + 6) == 2)
            {
              if ((*((_WORD *)v23 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v23, v22);
            }
            else
            {
              *((_DWORD *)v23 + 6) -= 2;
            }
          }
          result = v35[0];
          v35[0] = 0;
          if (result)
          {
            if (*((_DWORD *)result + 6) == 2)
            {
              if ((*((_WORD *)result + 15) & 0x400) == 0)
                result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v22);
            }
            else
            {
              *((_DWORD *)result + 6) -= 2;
            }
          }
        }
LABEL_33:
        v13 += 8;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t *std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange&,void>(uint64_t *a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((unsigned __int8 *)a1 + 32);
  v5 = *a2;
  *(_DWORD *)(*a2 + 24) += 2;
  if (v4)
  {
    v6 = *a1;
    *a1 = v5;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    v7 = a2[2];
    *(_DWORD *)(v7 + 24) += 2;
    v8 = a1[2];
    a1[2] = v7;
    if (v8)
    {
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
  }
  else
  {
    *a1 = v5;
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    v9 = a2[2];
    *(_DWORD *)(v9 + 24) += 2;
    a1[2] = v9;
    *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
    *((_BYTE *)a1 + 32) = 1;
  }
  return a1;
}

uint64_t WebCore::AccessibilityObject::selection@<X0>(WebCore::AccessibilityObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (result && (v4 = *(_QWORD *)(result + 528)) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064);
    v7 = *(_QWORD *)(v6 + 56);
    if (v7)
      *(_DWORD *)(v7 + 24) += 2;
    *(_QWORD *)a2 = v7;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v6 + 64);
    *(_BYTE *)(a2 + 12) = *(_BYTE *)(v6 + 68);
    v8 = *(_QWORD *)(v6 + 72);
    if (v8)
      *(_DWORD *)(v8 + 24) += 2;
    *(_QWORD *)(a2 + 16) = v8;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(v6 + 80);
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 88);
    if (v9)
      *(_DWORD *)(v9 + 24) += 2;
    *(_QWORD *)(a2 + 32) = v9;
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(v6 + 96);
    *(_BYTE *)(a2 + 44) = *(_BYTE *)(v6 + 100);
    v10 = *(_QWORD *)(v6 + 104);
    if (v10)
      *(_DWORD *)(v10 + 24) += 2;
    *(_QWORD *)(a2 + 48) = v10;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)(v6 + 112);
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(v6 + 116);
    v11 = *(_QWORD *)(v6 + 120);
    if (v11)
      *(_DWORD *)(v11 + 24) += 2;
    *(_QWORD *)(a2 + 64) = v11;
    *(_DWORD *)(a2 + 72) = *(_DWORD *)(v6 + 128);
    *(_BYTE *)(a2 + 76) = *(_BYTE *)(v6 + 132);
    v12 = *(_QWORD *)(v6 + 136);
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
    *(_QWORD *)(a2 + 80) = v12;
    *(_DWORD *)(a2 + 88) = *(_DWORD *)(v6 + 144);
    *(_BYTE *)(a2 + 92) = *(_BYTE *)(v6 + 148);
    *(_WORD *)(a2 + 96) = *(_WORD *)(v6 + 152);
    v13 = *(_BYTE *)(v6 + 154);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) &= 0xF0u;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 28) &= 0xF0u;
    *(_QWORD *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 44) &= 0xF0u;
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 56) = 0;
    *(_BYTE *)(a2 + 60) &= 0xF0u;
    *(_QWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 72) = 0;
    *(_BYTE *)(a2 + 76) &= 0xF0u;
    *(_QWORD *)(a2 + 80) = 0;
    *(_DWORD *)(a2 + 88) = 0;
    *(_BYTE *)(a2 + 92) &= 0xF0u;
    *(_WORD *)(a2 + 96) = 1;
    v13 = *(_BYTE *)(a2 + 98) & 0xFC | 1;
  }
  *(_BYTE *)(a2 + 98) = v13;
  return result;
}

unsigned int *WebCore::AccessibilityObject::simpleRange@<X0>(WebCore::AccessibilityObject *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *result;
  WebCore::Node *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  result = (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    result = WebCore::AXObjectCache::rangeForNodeContents((WebCore::AXObjectCache *)result, v4, (uint64_t)&v6);
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v8;
    *(_DWORD *)(a2 + 24) = v9;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 32) = v5;
  return result;
}

unsigned int *WebCore::AccessibilityObject::textMarkerRange@<X0>(WebCore::AccessibilityObject *this@<X0>, _OWORD *a2@<X8>)
{
  unsigned int *result;
  void *v4;
  WebCore::Node *v5;
  WebCore::Node *v6[2];
  WebCore::Node *v7;
  char v8;

  (*(void (**)(WebCore::Node **__return_ptr))(*(_QWORD *)this + 1960))(v6);
  result = (unsigned int *)WebCore::AXTextMarkerRange::AXTextMarkerRange(a2, (const WebCore::SimpleRange *)v6);
  if (v8)
  {
    v5 = v7;
    v7 = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 6) == 2)
      {
        if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v5, v4);
      }
      else
      {
        *((_DWORD *)v5 + 6) -= 2;
      }
    }
    result = (unsigned int *)v6[0];
    v6[0] = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

void WebCore::AccessibilityObject::previousLineStartPositionInternal(VisiblePosition *a1@<X1>, uint64_t a2@<X8>)
{
  void *v4;
  WebCore::Node *v5;
  Node *var0;
  void *v7;
  Node *v8;
  Node *v9;
  Node *v10;
  WebCore::Node *v11;
  void *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  Node *v16;
  Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  unsigned int v20;
  char v21;
  VisiblePosition v22;
  WebCore::Node *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Node *v26;
  unsigned int v27;
  char v28;
  BOOL v29;
  WebCore::Node *v30[2];

  if (!a1->var0.var0.var0)
    goto LABEL_18;
  WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)a1, (uint64_t)&v22);
  if (WebCore::Position::atStartOfTree((WebCore::Position *)&v22))
  {
    v5 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v22, (uint64_t)&v26);
    v5 = v26;
    v23 = v26;
    LODWORD(v24) = v27;
    BYTE4(v24) = v28;
  }
  LOBYTE(v25) = 1;
  var0 = v22.var0.var0.var0;
  v22.var0.var0.var0 = 0;
  if (var0)
  {
    if (*((_DWORD *)var0 + 6) == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)var0, v4);
        v5 = v23;
      }
    }
    else
    {
      *((_DWORD *)var0 + 6) -= 2;
    }
  }
  if (!v5)
  {
LABEL_18:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
  WebCore::startOfLine((uint64_t)&v22, (WebCore::VisiblePosition *)&v23, (WebCore::Node *)1, 0);
  if (!v22.var0.var0.var0)
  {
    while (1)
    {
      if (v23)
        v10 = (Node *)WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v10 = 0;
      if (!v10)
        goto LABEL_15;
      WebCore::previousVisuallyDistinctCandidate(&v23, (uint64_t)v30);
      if (WebCore::Position::atStartOfTree((WebCore::Position *)v30))
      {
        v13 = 0;
        v21 = 0;
        v20 = 0;
      }
      else
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v30, (uint64_t)&v26);
        v13 = v26;
        v20 = v27;
        v21 = v28;
      }
      v14 = v30[0];
      v30[0] = 0;
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v14, v12);
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
      v15 = v23;
      v23 = v13;
      if (v15)
      {
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v15, v12);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
      LODWORD(v24) = v20;
      BYTE4(v24) = v21;
      LOBYTE(v25) = 1;
      WebCore::startOfLine((uint64_t)&v26, (WebCore::VisiblePosition *)&v23, (WebCore::Node *)1, 0);
      v16 = (Node *)v26;
      v26 = 0;
      v17 = v22.var0.var0.var0;
      v22.var0.var0.var0 = v16;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v17, v7);
            v18 = v26;
            v22.var0.var1 = v27;
            *((_BYTE *)&v22.var0 + 12) = v28;
            v22.var1 = v29;
            v26 = 0;
            if (v18)
            {
              if (*((_DWORD *)v18 + 6) == 2)
              {
                if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v18, v7);
              }
              else
              {
                *((_DWORD *)v18 + 6) -= 2;
              }
            }
            goto LABEL_37;
          }
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
      v22.var0.var1 = v27;
      *((_BYTE *)&v22.var0 + 12) = v28;
      v22.var1 = v29;
LABEL_37:
      v10 = v22.var0.var0.var0;
      if (v22.var0.var0.var0)
        goto LABEL_15;
    }
  }
  WebCore::updateAXLineStartForVisiblePosition((WebCore *)&v26, &v22);
  v8 = (Node *)v26;
  v26 = 0;
  v9 = v22.var0.var0.var0;
  v22.var0.var0.var0 = v8;
  if (!v9)
  {
LABEL_13:
    v22.var0.var1 = v27;
    *((_BYTE *)&v22.var0 + 12) = v28;
    v22.var1 = v29;
    goto LABEL_14;
  }
  if (*((_DWORD *)v9 + 6) != 2)
  {
    *((_DWORD *)v9 + 6) -= 2;
    goto LABEL_13;
  }
  if ((*((_WORD *)v9 + 15) & 0x400) != 0)
    goto LABEL_13;
  WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
  v19 = v26;
  v22.var0.var1 = v27;
  *((_BYTE *)&v22.var0 + 12) = v28;
  v22.var1 = v29;
  v26 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v7);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
LABEL_14:
  v10 = v22.var0.var0.var0;
LABEL_15:
  *(_QWORD *)a2 = v10;
  *(_DWORD *)(a2 + 8) = v22.var0.var1;
  *(_BYTE *)(a2 + 12) = *((_BYTE *)&v22.var0 + 12);
  *(_BYTE *)(a2 + 16) = v22.var1;
  *(_BYTE *)(a2 + 24) = 1;
  v11 = v23;
  v23 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v7);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
}

BOOL WebCore::AccessibilityObject::boundaryPointsContainedInRect(WebCore::AccessibilityObject *this, const WebCore::BoundaryPoint *a2, const WebCore::BoundaryPoint *a3, const WebCore::FloatRect *a4, int a5, float *a6)
{
  void *v7;
  unint64_t v8;
  unint64_t v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  float v12;
  float v13;
  float v14;
  WebCore::Node *v16;
  int v17;
  WebCore::Node *v18;
  int v19;

  *((_DWORD *)a2 + 6) += 2;
  v16 = a2;
  v17 = (int)a3;
  *((_DWORD *)a4 + 6) += 2;
  v18 = a4;
  v19 = a5;
  v8 = WebCore::AccessibilityObject::boundsForRange(this, (const WebCore::SimpleRange *)&v16);
  v9 = (unint64_t)v7;
  v10 = v18;
  v18 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v7);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v7);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  v12 = (float)((int)v9 + (int)v8);
  if (*a6 <= v12
    && (float)(*a6 + a6[2]) >= v12
    && (v13 = (float)(int)(((v9 & 0xFFFFFFFF00000000) + v8) >> 32), v14 = a6[1], v14 <= v13))
  {
    return (float)(v14 + a6[3]) >= v13;
  }
  else
  {
    return 0;
  }
}

unint64_t WebCore::AccessibilityObject::boundsForRange(WebCore::AccessibilityObject *this, const WebCore::SimpleRange *a2)
{
  WebCore::AXObjectCache *v3;
  WebCore::AXObjectCache *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const WebCore::SimpleRange *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  Node *var0;
  Node *v18;
  void *v19;
  Node *v20;
  Node *v21;
  void *v22;
  Node *v23;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  void *v30;
  Node *v31;
  Node *v32;
  void *v34;
  uint64_t v35;
  int8x16_t v36;
  int v37;
  int8x16_t v38;
  CharacterOffset v39;
  CharacterOffset v40;

  v3 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
  if (!v3)
    return 0;
  v4 = v3;
  WebCore::AXObjectCache::startOrEndCharacterOffsetForRange(v3, a2, 1, 0, (uint64_t)&v40);
  WebCore::AXObjectCache::startOrEndCharacterOffsetForRange(v4, a2, 0, 0, (uint64_t)&v39);
  v5 = WebCore::AXObjectCache::absoluteCaretBoundsForCharacterOffset(v4, &v40);
  v7 = v6;
  v8 = WebCore::AXObjectCache::absoluteCaretBoundsForCharacterOffset(v4, &v39);
  v10 = v8;
  v12 = v11;
  v13 = HIDWORD(v8);
  if (HIDWORD(v8) != HIDWORD(v5))
  {
    WebCore::AXObjectCache::endCharacterOffsetOfLine((unsigned int *)v4, &v40, (uint64_t)&v38);
    var0 = v40.var0.var0;
    v18 = (Node *)v38.i64[0];
    if (!v40.var0.var0 || !v38.i64[0] || v40.var0.var0 != (Node *)v38.i64[0])
    {
      var0 = (Node *)v38.i64[0];
      goto LABEL_15;
    }
    if (*(_QWORD *)&v40.var1 != v38.i64[1])
    {
LABEL_15:
      if (v39.var0.var0 && var0 && v39.var0.var0 == var0)
      {
        if (*(_QWORD *)&v39.var1 != v38.i64[1])
        {
          v38.i64[0] = 0;
          goto LABEL_27;
        }
        WebCore::AXObjectCache::previousCharacterOffset((unsigned int *)v4, &v39, 0, (uint64_t)&v36);
        v23 = v39.var0.var0;
        v39.var0.var0 = (Node *)v36.i64[0];
        if (v23)
        {
          if (*((_DWORD *)v23 + 6) == 2)
          {
            if ((*((_WORD *)v23 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v23, v22);
          }
          else
          {
            *((_DWORD *)v23 + 6) -= 2;
          }
        }
        *(_QWORD *)&v39.var1 = v36.i64[1];
        v39.var3 = v37;
        v10 = WebCore::AXObjectCache::absoluteCaretBoundsForCharacterOffset(v4, &v39);
        v12 = (uint64_t)v16;
      }
      else
      {
        v18 = var0;
      }
      v38.i64[0] = 0;
      var0 = v18;
      if (!v18)
      {
LABEL_29:
        v14 = HIDWORD(v5);
        v13 = HIDWORD(v10);
        goto LABEL_30;
      }
LABEL_27:
      if (*((_DWORD *)var0 + 6) == 2)
      {
        if ((*((_WORD *)var0 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)var0, v16);
      }
      else
      {
        *((_DWORD *)var0 + 6) -= 2;
      }
      goto LABEL_29;
    }
    WebCore::AXObjectCache::nextCharacterOffset((unint64_t)v4, &v40, 0, (uint64_t)&v36);
    v20 = (Node *)v36.i64[0];
    v36.i64[0] = 0;
    v21 = v40.var0.var0;
    v40.var0.var0 = v20;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v21, v19);
          *(_QWORD *)&v40.var1 = v36.i64[1];
          v35 = v36.i64[0];
          v40.var3 = v37;
          v36.i64[0] = 0;
          if (v35)
          {
            if (*(_DWORD *)(v35 + 24) == 2)
            {
              if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v35, v34);
            }
            else
            {
              *(_DWORD *)(v35 + 24) -= 2;
            }
          }
          goto LABEL_13;
        }
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    *(_QWORD *)&v40.var1 = v36.i64[1];
    v40.var3 = v37;
LABEL_13:
    v5 = WebCore::AXObjectCache::absoluteCaretBoundsForCharacterOffset(v4, &v40);
    v7 = (uint64_t)v16;
    goto LABEL_15;
  }
  v14 = HIDWORD(v8);
LABEL_30:
  v24.i64[0] = __PAIR64__(v14, v5);
  v24.i64[1] = v7;
  v25.i64[0] = 0xFE000000FE000000;
  v25.i64[1] = 0xFE000000FE000000;
  v26 = (int8x16_t)vcgtq_s32(v24, v25);
  v27.i64[0] = 0xFE000000FE000000;
  v27.i64[1] = 0xFE000000FE000000;
  v28.i64[0] = 0x8000000080000000;
  v28.i64[1] = 0x8000000080000000;
  v38 = vorrq_s8((int8x16_t)(*(_OWORD *)&v26 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v27, v24), v28, (int8x16_t)vshlq_n_s32(v24, 6uLL)), v26));
  v26.i64[0] = __PAIR64__(v13, v10);
  v26.i64[1] = v12;
  v29 = (int8x16_t)vcgtq_s32((int32x4_t)v26, v25);
  v36 = vorrq_s8((int8x16_t)(*(_OWORD *)&v29 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v27, (int32x4_t)v26), v28, (int8x16_t)vshlq_n_s32((int32x4_t)v26, 6uLL)), v29));
  v15 = WebCore::boundsForRects((WebCore *)&v38, (const WebCore::LayoutRect *)&v36, a2, v9);
  v31 = v39.var0.var0;
  v39.var0.var0 = 0;
  if (v31)
  {
    if (*((_DWORD *)v31 + 6) == 2)
    {
      if ((*((_WORD *)v31 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v31, v30);
    }
    else
    {
      *((_DWORD *)v31 + 6) -= 2;
    }
  }
  v32 = v40.var0.var0;
  v40.var0.var0 = 0;
  if (v32)
  {
    if (*((_DWORD *)v32 + 6) == 2)
    {
      if ((*((_WORD *)v32 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v32, v30);
    }
    else
    {
      *((_DWORD *)v32 + 6) -= 2;
    }
  }
  return v15;
}

unsigned int *WebCore::AccessibilityObject::visibleCharacterRange@<X0>(WebCore::AccessibilityObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  WebCore::AccessibilityObject *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  unsigned int *result;
  void *v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  uint64_t v37;
  WebCore::Node *v38;
  WebCore::Node **v39;
  WebCore::Node **v40;
  void *v41;
  Node *var0;
  WebCore::Node *v43;
  void *v44;
  unsigned __int8 v45;
  uint64_t v46;
  unsigned __int8 v47;
  WebCore::Node **v48;
  WebCore::Node *v49;
  void *v50;
  uint64_t v51;
  Node *v52;
  WebCore::Node *v53;
  WebCore::Node *v54;
  void *v55;
  Node *v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  WebCore::Node **v59;
  WebCore::Node *v60;
  unint64_t v61;
  uint64_t v62;
  Node *v63;
  Node *v64;
  WebCore::Node *v65;
  WebCore::Node *v66;
  unsigned int v67;
  WebCore::Node *v68;
  unint64_t v69;
  uint64_t v70;
  Node *v71;
  float v72;
  __int16 v73;
  uint64_t v74;
  WebCore::Node *v75;
  int v76;
  int v77;
  void *v78;
  WTF *v79;
  int v80;
  uint64_t v81;
  void *v82;
  _DWORD *v83;
  uint64_t v84;
  void *v85;
  unint64_t v86;
  uint64_t v87;
  Node *v88;
  char v89;
  float v90;
  float v91;
  Node *v92;
  unsigned int v93;
  int v94;
  Node *v95;
  Node *v96;
  Node *v97;
  Node *v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  _BOOL4 v101;
  unint64_t v102;
  int v103;
  char *v104;
  uint64_t v105;
  char *v106;
  WebCore::Node *v107;
  WebCore::Node *v108;
  Node *v109;
  WebCore::Node *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  Node *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  _DWORD *v130;
  BOOL v132;
  _DWORD *v134;
  _BOOL4 v135;
  const WebCore::FloatRect *v136;
  _DWORD *v137;
  WebCore::Node *v138;
  void *v139;
  Node *v140;
  WebCore::Node *v141;
  void *v142;
  int v143;
  WebCore::Node *v144;
  unsigned int v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  Node *v149;
  float v150;
  float v151;
  WebCore::Node *v152;
  uint64_t v153;
  WTF *v154;
  uint64_t v155;
  __int128 v156;
  WebCore::Node *v157;
  __int128 v158;
  WebCore::Node *v159;
  unsigned int v160;
  uint64_t v161;
  WebCore::Node *v162;
  unint64_t v163;
  uint64_t v164;
  Node *v165;
  int v166;
  int v167;
  unsigned int v168;
  WebCore::Node *v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  WebCore::Node *v173;
  unsigned int v175;
  uint64_t v176;
  WebCore::AccessibilityObject *v177;
  uint64_t v178;
  WebCore::Node *v179;
  unsigned int v180;
  WebCore::Node *v181;
  unsigned int v182;
  unsigned __int8 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  WebCore::Node *v187;
  unsigned int v188;
  WebCore::Node *v189;
  unsigned int v190;
  unsigned __int8 v191;
  WebCore::Node *v192;
  int v193;
  char v194;
  WebCore::AccessibilityObject *v195;
  uint64_t v196;
  WebCore::Node *v197;
  unsigned int v198;
  char v199;
  unsigned __int8 v200;
  WebCore::Node *v201;
  unsigned int v202;
  char v203;
  char v204;
  char v205;
  WebCore::Node *v206;
  unsigned int v207;
  char v208;
  BOOL v209;
  unsigned __int8 v210;
  VisiblePosition v211;
  int v212;
  Node *v213;
  unsigned int var1;
  char v215;

  v3 = this;
  (*(void (**)(WebCore::Node **__return_ptr))(*(_QWORD *)this + 1960))(&v187);
  v4 = (*(float (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v3 + 1560))(v3);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  *(_QWORD *)&v186 = __PAIR64__(LODWORD(v5), LODWORD(v4));
  *((_QWORD *)&v186 + 1) = __PAIR64__(LODWORD(v9), LODWORD(v7));
  result = (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v3 + 1512))(v3);
  v14 = (_DWORD)result - (v13 & 0xFFFFFFC0);
  v16 = HIDWORD(result) - (v15 & 0xFFFFFFC0);
  v17 = v14 + (_DWORD)v12;
  if (__OFADD__(v14, (_DWORD)v12))
    v17 = (v14 >> 31) + 0x7FFFFFFF;
  v18 = (v16 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v16, HIDWORD(v12)))
    v18 = v16 + HIDWORD(v12);
  v19 = v16 + 32;
  v20 = (SHIDWORD(result) / 64 + ((int)(v16 + 32) >> 6));
  v21 = ((int)result / 64 + ((int)(v14 + 32) >> 6));
  v22 = (v17 / 64 - ((int)(v14 + 32) >> 6) + ((int)(v17 - (v14 & 0xFFFFFFC0) + 32) >> 6));
  v23 = (v18 / 64 - (v19 >> 6) + ((int)(v18 - (v14 & 0xFFFFFFC0) + 32) >> 6));
  LOBYTE(v179) = 0;
  v183 = 0;
  v24 = v191;
  if (v191)
  {
    v25 = v187;
    *((_DWORD *)v187 + 6) += 2;
    v179 = v25;
    v170 = v188;
    v180 = v188;
    v26 = v189;
    *((_DWORD *)v189 + 6) += 2;
    v169 = v26;
    v181 = v26;
    v168 = v190;
    v182 = v190;
    v27 = 1;
    v183 = 1;
  }
  else
  {
    v27 = 0;
  }
  v184 = v186;
  *(_QWORD *)&v185 = v21 | (v20 << 32);
  *((_QWORD *)&v185 + 1) = v22 | (v23 << 32);
  v172 = v24;
  if (*((_BYTE *)v3 + 176))
  {
    if (v24 && *((_BYTE *)v3 + 136))
    {
      if (*((WebCore::Node **)v3 + 13) != v179
        || *((_DWORD *)v3 + 28) != v170
        || *((WebCore::Node **)v3 + 15) != v169
        || *((_DWORD *)v3 + 32) != v168)
      {
        goto LABEL_29;
      }
    }
    else if ((v24 != 0) != (*((_BYTE *)v3 + 136) != 0))
    {
      goto LABEL_28;
    }
    if (*((float *)v3 + 36) == *(float *)&v184
      && *((float *)v3 + 37) == *((float *)&v184 + 1)
      && *((float *)v3 + 38) == *((float *)&v184 + 2)
      && *((float *)v3 + 39) == *((float *)&v184 + 3)
      && *((_DWORD *)v3 + 40) == (_DWORD)v21
      && *((_DWORD *)v3 + 41) == (_DWORD)v20
      && *((_DWORD *)v3 + 42) == (_DWORD)v22
      && *((_DWORD *)v3 + 43) == (_DWORD)v23)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 32) = 0;
      if (*((_BYTE *)v3 + 96))
      {
        v28 = *((_QWORD *)v3 + 8);
        *(_DWORD *)(v28 + 24) += 2;
        *(_QWORD *)a2 = v28;
        *(_DWORD *)(a2 + 8) = *((_DWORD *)v3 + 18);
        v29 = *((_QWORD *)v3 + 10);
        *(_DWORD *)(v29 + 24) += 2;
        *(_QWORD *)(a2 + 16) = v29;
        *(_DWORD *)(a2 + 24) = *((_DWORD *)v3 + 22);
        *(_BYTE *)(a2 + 32) = 1;
      }
      goto LABEL_388;
    }
  }
LABEL_28:
  if (!v24)
  {
LABEL_47:
    v37 = a2;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    goto LABEL_382;
  }
LABEL_29:
  if (v8 <= 0.0 || v10 <= 0.0)
    goto LABEL_47;
  v30 = (float)(int)v21;
  v31 = (float)(int)v20;
  v32 = (int)v22 < 1 || (int)v23 < 1;
  v33 = v32 || (float)(v8 + v4) <= v30;
  v34 = !v33 && v4 < (float)(v30 + (float)(int)v22);
  v35 = !v34 || (float)(v10 + v6) <= v31;
  if (v35 || v6 >= (float)(v31 + (float)(int)v23))
    goto LABEL_47;
  v38 = v187;
  *((_DWORD *)v187 + 6) += 2;
  v39 = (WebCore::Node **)v188;
  v173 = v189;
  *((_DWORD *)v189 + 6) += 2;
  v171 = v190;
  v40 = (WebCore::Node **)&v207;
  do
  {
    if (*(float *)&v186 <= (float)(int)v21
      && (float)(*(float *)&v186 + *((float *)&v186 + 2)) >= (float)(int)v21
      && *((float *)&v186 + 1) <= (float)(int)v20
      && (float)(*((float *)&v186 + 1) + *((float *)&v186 + 3)) >= (float)(int)v20)
    {
      break;
    }
    *((_DWORD *)v38 + 6) += 2;
    v201 = v38;
    v202 = v39;
    v203 &= 0xF0u;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v201, (uint64_t)&v211);
    v211.var1 = 1;
    (*(void (**)(WebCore::Node **__return_ptr, WebCore::AccessibilityObject *, VisiblePosition *))(*(_QWORD *)v3 + 2088))(&v206, v3, &v211);
    var0 = v211.var0.var0.var0;
    v211.var0.var0.var0 = 0;
    if (var0)
    {
      if (*((_DWORD *)var0 + 6) == 2)
      {
        if ((*((_WORD *)var0 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)var0, v41);
      }
      else
      {
        *((_DWORD *)var0 + 6) -= 2;
      }
    }
    v201 = 0;
    if (*((_DWORD *)v38 + 6) == 2)
    {
      if ((*((_WORD *)v38 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v38, v41);
    }
    else
    {
      *((_DWORD *)v38 + 6) -= 2;
    }
    v43 = v206;
    if (v206)
    {
      *((_DWORD *)v206 + 6) += 2;
      v211.var0.var0.var0 = (Node *)v43;
      v211.var0.var1 = v207;
      *((_BYTE *)&v211.var0 + 12) = v208;
      WebCore::makeBoundaryPoint((uint64_t *)&v211, (uint64_t)&v201);
      if (*((_DWORD *)v43 + 6) == 2)
      {
        if ((*((_WORD *)v43 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v43, v44);
      }
      else
      {
        *((_DWORD *)v43 + 6) -= 2;
      }
    }
    else
    {
      v211.var0.var0.var0 = 0;
      v211.var0.var1 = v207;
      *((_BYTE *)&v211.var0 + 12) = v208;
      WebCore::makeBoundaryPoint((uint64_t *)&v211, (uint64_t)&v201);
    }
    if (v204)
    {
      if (!v191)
        goto LABEL_441;
      v45 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v187, (uint64_t)&v201);
      LODWORD(v46) = 3;
      if (v45 == 129
        || (char)v45 > 0
        || (v47 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v201, (uint64_t)&v189), v47 == 129)
        || (char)v47 > 0)
      {
        v2 = (uint64_t)v38;
      }
      else
      {
        if (!v204)
          goto LABEL_441;
        v2 = (uint64_t)v201;
        *((_DWORD *)v201 + 6) += 2;
        if (*((_DWORD *)v38 + 6) == 2)
        {
          if ((*((_WORD *)v38 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v38, v44);
        }
        else
        {
          *((_DWORD *)v38 + 6) -= 2;
        }
        if (!v191)
          goto LABEL_441;
        v48 = (WebCore::Node **)v202;
        *(_DWORD *)(v2 + 24) += 2;
        v211.var0.var0.var0 = (Node *)v2;
        v39 = v48;
        v211.var0.var1 = v48;
        v49 = v189;
        *((_DWORD *)v189 + 6) += 2;
        *(_QWORD *)&v211.var1 = v49;
        v212 = v190;
        v21 = WebCore::AccessibilityObject::boundsForRange(v3, (const WebCore::SimpleRange *)&v211);
        v50 = v44;
        v51 = *(_QWORD *)&v211.var1;
        *(_QWORD *)&v211.var1 = 0;
        if (v51)
        {
          if (*(_DWORD *)(v51 + 24) == 2)
          {
            if ((*(_WORD *)(v51 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v51, v44);
          }
          else
          {
            *(_DWORD *)(v51 + 24) -= 2;
          }
        }
        v52 = v211.var0.var0.var0;
        v211.var0.var0.var0 = 0;
        if (v52)
        {
          if (*((_DWORD *)v52 + 6) == 2)
          {
            if ((*((_WORD *)v52 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v52, v44);
          }
          else
          {
            *((_DWORD *)v52 + 6) -= 2;
          }
        }
        v20 = HIDWORD(v21);
        if ((int)v50 >= 1 && SHIDWORD(v50) >= 1 && (v21 & 0x80000000) == 0)
          v46 = (v21 >> 63) & 3;
      }
      if (v204)
      {
        v53 = v201;
        v201 = 0;
        if (v53)
        {
          if (*((_DWORD *)v53 + 6) == 2)
          {
            if ((*((_WORD *)v53 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v53, v44);
          }
          else
          {
            *((_DWORD *)v53 + 6) -= 2;
          }
        }
      }
      v38 = (WebCore::Node *)v2;
    }
    else
    {
      LODWORD(v46) = 3;
    }
    v54 = v206;
    v206 = 0;
    if (v54)
    {
      if (*((_DWORD *)v54 + 6) == 2)
      {
        if ((*((_WORD *)v54 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v54, v44);
      }
      else
      {
        *((_DWORD *)v54 + 6) -= 2;
      }
    }
  }
  while (!(_DWORD)v46);
  *((_DWORD *)v38 + 6) += 2;
  v206 = v38;
  v40 = v39;
  v207 = v39;
  v208 &= 0xF0u;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v206, (uint64_t)&v211);
  v211.var1 = 1;
  WebCore::AccessibilityObject::previousLineStartPositionInternal(&v211, (uint64_t)&v201);
  v56 = v211.var0.var0.var0;
  v211.var0.var0.var0 = 0;
  v2 = (uint64_t)v173;
  if (v56)
  {
    if (*((_DWORD *)v56 + 6) == 2)
    {
      if ((*((_WORD *)v56 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v56, v55);
    }
    else
    {
      *((_DWORD *)v56 + 6) -= 2;
    }
  }
  v206 = 0;
  if (*((_DWORD *)v38 + 6) == 2)
  {
    if ((*((_WORD *)v38 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v38, v55);
  }
  else
  {
    *((_DWORD *)v38 + 6) -= 2;
  }
  if (!v205)
    goto LABEL_134;
  v57 = v201;
  if (v201)
  {
    *((_DWORD *)v201 + 6) += 2;
    v211.var0.var0.var0 = (Node *)v57;
    v211.var0.var1 = v202;
    *((_BYTE *)&v211.var0 + 12) = v203;
    WebCore::makeBoundaryPoint((uint64_t *)&v211, (uint64_t)&v206);
    if (*((_DWORD *)v57 + 6) == 2)
    {
      if ((*((_WORD *)v57 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v57, v44);
    }
    else
    {
      *((_DWORD *)v57 + 6) -= 2;
    }
  }
  else
  {
    v211.var0.var0.var0 = 0;
    v211.var0.var1 = v202;
    *((_BYTE *)&v211.var0 + 12) = v203;
    WebCore::makeBoundaryPoint((uint64_t *)&v211, (uint64_t)&v206);
  }
  if (!v209)
    goto LABEL_134;
  if (!v191)
    goto LABEL_441;
  v58 = v206;
  *((_DWORD *)v206 + 6) += 2;
  v211.var0.var0.var0 = (Node *)v58;
  v59 = (WebCore::Node **)v207;
  v211.var0.var1 = v207;
  v60 = v189;
  *((_DWORD *)v189 + 6) += 2;
  *(_QWORD *)&v211.var1 = v60;
  v212 = v190;
  v61 = WebCore::AccessibilityObject::boundsForRange(v3, (const WebCore::SimpleRange *)&v211);
  v62 = *(_QWORD *)&v211.var1;
  *(_QWORD *)&v211.var1 = 0;
  if (v62)
  {
    if (*(_DWORD *)(v62 + 24) == 2)
    {
      if ((*(_WORD *)(v62 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v62, v44);
    }
    else
    {
      *(_DWORD *)(v62 + 24) -= 2;
    }
  }
  v63 = v211.var0.var0.var0;
  v211.var0.var0.var0 = 0;
  if (v63)
  {
    if (*((_DWORD *)v63 + 6) == 2)
    {
      if ((*((_WORD *)v63 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v63, v44);
    }
    else
    {
      *((_DWORD *)v63 + 6) -= 2;
    }
  }
  if (v58 != v38
    || *(float *)&v186 > (float)(int)v61
    || (float)(*(float *)&v186 + *((float *)&v186 + 2)) < (float)(int)v61
    || *((float *)&v186 + 1) > (float)SHIDWORD(v61)
    || (float)(*((float *)&v186 + 1) + *((float *)&v186 + 3)) < (float)SHIDWORD(v61))
  {
    if (*((_DWORD *)v58 + 6) == 2)
    {
      if ((*((_WORD *)v58 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v58, v44);
    }
    else
    {
      *((_DWORD *)v58 + 6) -= 2;
    }
LABEL_134:
    *((_DWORD *)v38 + 6) += 2;
    v197 = v38;
    v198 = v39;
    v199 &= 0xF0u;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v197, (uint64_t)&v211);
    v211.var1 = 1;
    WebCore::startOfLine((uint64_t)&v206, (WebCore::VisiblePosition *)&v211, (WebCore::Node *)1, 0);
    v64 = v211.var0.var0.var0;
    v211.var0.var0.var0 = 0;
    if (v64)
    {
      if (*((_DWORD *)v64 + 6) == 2)
      {
        if ((*((_WORD *)v64 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v64, v44);
      }
      else
      {
        *((_DWORD *)v64 + 6) -= 2;
      }
    }
    v197 = 0;
    if (*((_DWORD *)v38 + 6) == 2)
      goto LABEL_442;
    *((_DWORD *)v38 + 6) -= 2;
    while (1)
    {
      v65 = v206;
      if (v206)
      {
        *((_DWORD *)v206 + 6) += 2;
        v211.var0.var0.var0 = (Node *)v65;
        v211.var0.var1 = v207;
        *((_BYTE *)&v211.var0 + 12) = v208;
        WebCore::makeBoundaryPoint((uint64_t *)&v211, (uint64_t)&v197);
        if (*((_DWORD *)v65 + 6) == 2)
        {
          if ((*((_WORD *)v65 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v65, v44);
        }
        else
        {
          *((_DWORD *)v65 + 6) -= 2;
        }
      }
      else
      {
        v211.var0.var0.var0 = 0;
        v211.var0.var1 = v207;
        *((_BYTE *)&v211.var0 + 12) = v208;
        WebCore::makeBoundaryPoint((uint64_t *)&v211, (uint64_t)&v197);
      }
      if (!v200)
        goto LABEL_163;
      v66 = v197;
      if (v197 != v38)
        goto LABEL_144;
      if (v191)
      {
        *((_DWORD *)v38 + 6) += 2;
        v211.var0.var0.var0 = (Node *)v38;
        v67 = v198;
        v211.var0.var1 = v198;
        v68 = v189;
        *((_DWORD *)v189 + 6) += 2;
        *(_QWORD *)&v211.var1 = v68;
        v212 = v190;
        v69 = WebCore::AccessibilityObject::boundsForRange(v3, (const WebCore::SimpleRange *)&v211);
        v70 = *(_QWORD *)&v211.var1;
        *(_QWORD *)&v211.var1 = 0;
        if (v70)
        {
          if (*(_DWORD *)(v70 + 24) == 2)
          {
            if ((*(_WORD *)(v70 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v70, v44);
          }
          else
          {
            *(_DWORD *)(v70 + 24) -= 2;
          }
        }
        v71 = v211.var0.var0.var0;
        v211.var0.var0.var0 = 0;
        if (v71)
        {
          if (*((_DWORD *)v71 + 6) == 2)
          {
            if ((*((_WORD *)v71 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v71, v44);
          }
          else
          {
            *((_DWORD *)v71 + 6) -= 2;
          }
        }
        v72 = *(float *)&v186;
        if (*(float *)&v186 <= (float)(int)v69
          && (float)(*(float *)&v186 + *((float *)&v186 + 2)) >= (float)(int)v69
          && *((float *)&v186 + 1) <= (float)SHIDWORD(v69)
          && (float)(*((float *)&v186 + 1) + *((float *)&v186 + 3)) >= (float)SHIDWORD(v69))
        {
          goto LABEL_436;
        }
        v73 = *((_WORD *)v38 + 14);
        if ((v73 & 1) != 0)
        {
          v161 = *((_QWORD *)v38 + 10);
          if (!v161)
            goto LABEL_160;
          v160 = *(_DWORD *)(v161 + 4);
        }
        else
        {
          if ((v73 & 4) == 0)
            goto LABEL_160;
          v74 = *((_QWORD *)v38 + 10);
          if (!v74)
            goto LABEL_160;
          v160 = 0;
          do
          {
            ++v160;
            v74 = *(_QWORD *)(v74 + 56);
          }
          while (v74);
        }
        if (v67 >= v160)
        {
          v66 = v38;
          goto LABEL_144;
        }
        v198 = v67 + 1;
        if (v191)
          break;
      }
LABEL_441:
      __break(1u);
LABEL_442:
      if ((*((_WORD *)v38 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v38, v44);
    }
    *((_DWORD *)v38 + 6) += 2;
    v211.var0.var0.var0 = (Node *)v38;
    v211.var0.var1 = v67 + 1;
    v162 = v189;
    *((_DWORD *)v189 + 6) += 2;
    *(_QWORD *)&v211.var1 = v162;
    v212 = v190;
    v163 = WebCore::AccessibilityObject::boundsForRange(v3, (const WebCore::SimpleRange *)&v211);
    v164 = *(_QWORD *)&v211.var1;
    *(_QWORD *)&v211.var1 = 0;
    if (v164)
    {
      if (*(_DWORD *)(v164 + 24) == 2)
      {
        if ((*(_WORD *)(v164 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v164, v44);
      }
      else
      {
        *(_DWORD *)(v164 + 24) -= 2;
      }
    }
    v165 = v211.var0.var0.var0;
    v211.var0.var0.var0 = 0;
    if (v165)
    {
      if (*((_DWORD *)v165 + 6) == 2)
      {
        if ((*((_WORD *)v165 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v165, v44);
      }
      else
      {
        *((_DWORD *)v165 + 6) -= 2;
      }
    }
    v198 = v67;
    if (v72 > (float)(int)v163
      || (float)(v72 + *((float *)&v186 + 2)) < (float)(int)v163
      || *((float *)&v186 + 1) > (float)SHIDWORD(v163))
    {
LABEL_160:
      v66 = v38;
      goto LABEL_161;
    }
    v66 = v38;
    if ((float)(*((float *)&v186 + 1) + *((float *)&v186 + 3)) < (float)SHIDWORD(v163))
    {
LABEL_161:
      if (*((_DWORD *)v66 + 6) == 2)
      {
        if ((*((_WORD *)v66 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v66, v44);
      }
      else
      {
        *((_DWORD *)v66 + 6) -= 2;
      }
      goto LABEL_163;
    }
LABEL_436:
    v166 = *((_DWORD *)v38 + 6);
    *((_DWORD *)v38 + 6) = v166 + 2;
    if (v166)
    {
      *((_DWORD *)v38 + 6) = v166;
    }
    else if ((*((_WORD *)v38 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v38, v44);
    }
    v40 = (WebCore::Node **)v198;
    if (v200)
    {
      v66 = v197;
LABEL_144:
      if (!v66)
        goto LABEL_163;
      goto LABEL_161;
    }
LABEL_163:
    v75 = v206;
    v206 = 0;
    if (!v75)
      goto LABEL_167;
    v76 = *((_DWORD *)v75 + 6);
    goto LABEL_165;
  }
  *((_DWORD *)v58 + 6) += 2;
  v76 = *((_DWORD *)v38 + 6) - 2;
  if (*((_DWORD *)v38 + 6) != 2)
  {
    *((_DWORD *)v38 + 6) = v76;
LABEL_482:
    v206 = 0;
    v40 = v59;
    v75 = v38;
    goto LABEL_165;
  }
  if ((*((_WORD *)v38 + 15) & 0x400) != 0)
  {
    v76 = 2;
    v2 = (uint64_t)v173;
    goto LABEL_482;
  }
  WebCore::Node::removedLastRef(v38, v44);
  v40 = (WebCore::Node **)v207;
  if (v209)
  {
    v75 = v206;
    v206 = 0;
    if (v75)
    {
      v76 = *((_DWORD *)v75 + 6);
      v2 = (uint64_t)v173;
LABEL_165:
      v77 = v76 - 2;
      if (v77)
      {
        *((_DWORD *)v75 + 6) = v77;
      }
      else if ((*((_WORD *)v75 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v75, v44);
      }
      goto LABEL_167;
    }
  }
  v2 = (uint64_t)v173;
LABEL_167:
  *(_DWORD *)(v2 + 24) += 2;
  v79 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v80 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v80 + 2;
  *(_QWORD *)v79 = v2;
  *((_DWORD *)v79 + 2) = v171;
  if (v80)
  {
    *(_DWORD *)(v2 + 24) = v80;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2, v78);
  }
  v81 = 1;
  v175 = v40;
  v177 = v3;
  do
  {
    if (WebCore::AccessibilityObject::boundaryPointsContainedInRect(v3, v38, (const WebCore::BoundaryPoint *)v40, *(const WebCore::FloatRect **)v79, *((_DWORD *)v79 + 2), (float *)&v186))
    {
      v138 = *(WebCore::Node **)v79;
      *(_DWORD *)(*(_QWORD *)v79 + 24) += 2;
      if (v173)
      {
        if (*((_DWORD *)v173 + 6) == 2)
        {
          if ((*((_WORD *)v173 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v173, v82);
        }
        else
        {
          *((_DWORD *)v173 + 6) -= 2;
        }
      }
      v171 = *((_DWORD *)v79 + 2);
      v173 = v138;
      break;
    }
    v178 = v81;
    v176 = v81;
    v83 = (_DWORD *)((char *)v79 + 16 * v81);
    v84 = *((_QWORD *)v83 - 2);
    *(_DWORD *)(v84 + 24) += 2;
    v2 = *(v83 - 2);
    *((_DWORD *)v38 + 6) += 2;
    v211.var0.var0.var0 = (Node *)v38;
    v211.var0.var1 = v40;
    *(_DWORD *)(v84 + 24) += 2;
    *(_QWORD *)&v211.var1 = v84;
    v212 = v2;
    v3 = (WebCore::AccessibilityObject *)WebCore::AccessibilityObject::boundsForRange(v3, (const WebCore::SimpleRange *)&v211);
    v86 = (unint64_t)v85;
    v87 = *(_QWORD *)&v211.var1;
    *(_QWORD *)&v211.var1 = 0;
    if (v87)
    {
      if (*(_DWORD *)(v87 + 24) == 2)
      {
        if ((*(_WORD *)(v87 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v87, v85);
      }
      else
      {
        *(_DWORD *)(v87 + 24) -= 2;
      }
    }
    v88 = v211.var0.var0.var0;
    v211.var0.var0.var0 = 0;
    if (v88)
    {
      if (*((_DWORD *)v88 + 6) == 2)
      {
        if ((*((_WORD *)v88 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v88, v85);
      }
      else
      {
        *((_DWORD *)v88 + 6) -= 2;
      }
    }
    v89 = 1;
    if ((int)v86 < 1 || SHIDWORD(v86) < 1)
    {
      v3 = v177;
      v81 = v178;
      goto LABEL_276;
    }
    v90 = (float)((int)v86 + (int)v3);
    if (*(float *)&v186 <= v90 && (float)(*(float *)&v186 + *((float *)&v186 + 2)) >= v90)
    {
      v91 = (float)(int)(((unint64_t)v3 + (v86 & 0xFFFFFFFF00000000)) >> 32);
      if (*((float *)&v186 + 1) <= v91 && (float)(*((float *)&v186 + 1) + *((float *)&v186 + 3)) >= v91)
      {
        v122 = (v178 - 1);
        if ((int)v178 - 1 < 0)
        {
LABEL_309:
          *(_DWORD *)(v84 + 24) += 2;
          v136 = (const WebCore::FloatRect *)v84;
        }
        else
        {
          v123 = 0;
          while (1)
          {
            while (1)
            {
              v124 = v122;
              v125 = v122 - v123;
              if ((int)v122 >= (int)v123)
                v126 = v122 - v123;
              else
                v126 = v125 + 1;
              v127 = v123;
              v128 = v123 + (v126 >> 1);
              if (v178 <= (unint64_t)v128)
              {
                __break(0xC471u);
                JUMPOUT(0x195610A74);
              }
              v129 = v128;
              v130 = (_DWORD *)((char *)v79 + 16 * v128);
              if (!WebCore::AccessibilityObject::boundaryPointsContainedInRect(v177, v38, (const WebCore::BoundaryPoint *)v175, *(const WebCore::FloatRect **)v130, v130[2], (float *)&v186))break;
              v122 = (v129 - 1);
              if ((int)v129 >= 1 && v178 > v122)
              {
                v132 = WebCore::AccessibilityObject::boundaryPointsContainedInRect(v177, v38, (const WebCore::BoundaryPoint *)v175, *((const WebCore::FloatRect **)v79 + 2 * v122), *((_DWORD *)v79 + 4 * v122 + 2), (float *)&v186);
                v122 = (v129 - 1);
                if (!v132)
                {
                  v136 = *(const WebCore::FloatRect **)v130;
                  *(_DWORD *)(*(_QWORD *)v130 + 24) += 2;
                  v137 = (_DWORD *)((char *)v79 + 16 * v129);
                  goto LABEL_322;
                }
              }
              v123 = v127;
              if (v125 <= 1)
                goto LABEL_309;
            }
            v123 = (v129 + 1);
            if ((int)v129 >= -1 && v178 > v123)
            {
              v134 = (_DWORD *)((char *)v79 + 16 * v123);
              v135 = WebCore::AccessibilityObject::boundaryPointsContainedInRect(v177, v38, (const WebCore::BoundaryPoint *)v175, *(const WebCore::FloatRect **)v134, v134[2], (float *)&v186);
              v123 = (v129 + 1);
              if (v135)
                break;
            }
            v122 = v124;
            if ((int)v129 >= (int)v124)
              goto LABEL_309;
          }
          v136 = *(const WebCore::FloatRect **)v134;
          *(_DWORD *)(*(_QWORD *)v134 + 24) += 2;
          v137 = (_DWORD *)((char *)v79 + 16 * (v129 + 1));
LABEL_322:
          LODWORD(v2) = v137[2];
        }
        v40 = (WebCore::Node **)v175;
        if (v173)
        {
          if (*((_DWORD *)v173 + 6) == 2)
          {
            if ((*((_WORD *)v173 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v173, v85);
          }
          else
          {
            *((_DWORD *)v173 + 6) -= 2;
          }
        }
        v89 = 1;
        v173 = v136;
        v171 = v2;
        v3 = v177;
        v81 = v178;
        if (v84)
          goto LABEL_276;
        continue;
      }
    }
    *(_DWORD *)(v84 + 24) += 2;
    v192 = (WebCore::Node *)v84;
    v193 = v2;
    v194 &= 0xF0u;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v192, (uint64_t)&v197);
    v200 = 1;
    v40 = &v189;
    if (!v191)
      goto LABEL_441;
    v196 = 64;
    v3 = (WebCore::AccessibilityObject *)WTF::fastMalloc((WTF *)0x400);
    v195 = v3;
    v92 = (Node *)v197;
    if (v197)
      *((_DWORD *)v197 + 6) += 2;
    v93 = 0;
    v211.var0.var0.var0 = v92;
    v211.var0.var1 = v198;
    *((_BYTE *)&v211.var0 + 12) = v199;
    v211.var1 = 1;
    LOBYTE(v212) = 1;
    v2 = 64;
    while (1)
    {
      WebCore::AccessibilityObject::previousLineStartPositionInternal(&v211, (uint64_t)&v206);
      v94 = v210;
      if (v212 != v210)
      {
        if ((_BYTE)v212)
        {
          v97 = v211.var0.var0.var0;
          v211.var0.var0.var0 = 0;
          if (v97)
          {
            if (*((_DWORD *)v97 + 6) == 2)
            {
              if ((*((_WORD *)v97 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v97, v44);
            }
            else
            {
              *((_DWORD *)v97 + 6) -= 2;
            }
          }
          LOBYTE(v212) = 0;
LABEL_199:
          if (!v94)
            goto LABEL_203;
        }
        else
        {
          v109 = (Node *)v206;
          v206 = 0;
          v211.var0.var0.var0 = v109;
          v211.var0.var1 = v207;
          *((_BYTE *)&v211.var0 + 12) = v208;
          v211.var1 = v209;
          LOBYTE(v212) = 1;
          if (!v210)
            goto LABEL_203;
        }
LABEL_200:
        if (v206)
        {
          if (*((_DWORD *)v206 + 6) == 2)
          {
            if ((*((_WORD *)v206 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v206, v44);
          }
          else
          {
            *((_DWORD *)v206 + 6) -= 2;
          }
        }
        goto LABEL_203;
      }
      if (!(_BYTE)v212)
        goto LABEL_199;
      v95 = (Node *)v206;
      v206 = 0;
      v96 = v211.var0.var0.var0;
      v211.var0.var0.var0 = v95;
      if (v96)
      {
        if (*((_DWORD *)v96 + 6) == 2)
        {
          if ((*((_WORD *)v96 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v96, v44);
        }
        else
        {
          *((_DWORD *)v96 + 6) -= 2;
        }
      }
      v211.var0.var1 = v207;
      *((_BYTE *)&v211.var0 + 12) = v208;
      v211.var1 = v209;
      if (v94)
        goto LABEL_200;
LABEL_203:
      if (!(_BYTE)v212)
        goto LABEL_242;
      v98 = v211.var0.var0.var0;
      if (v211.var0.var0.var0)
      {
        *((_DWORD *)v211.var0.var0.var0 + 6) += 2;
        v213 = v98;
        var1 = v211.var0.var1;
        v215 = *((_BYTE *)&v211.var0 + 12);
        WebCore::makeBoundaryPoint((uint64_t *)&v213, (uint64_t)&v206);
        if (*((_DWORD *)v98 + 6) == 2)
        {
          if ((*((_WORD *)v98 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v98, v44);
        }
        else
        {
          *((_DWORD *)v98 + 6) -= 2;
        }
      }
      else
      {
        v213 = 0;
        var1 = v211.var0.var1;
        v215 = *((_BYTE *)&v211.var0 + 12);
        WebCore::makeBoundaryPoint((uint64_t *)&v213, (uint64_t)&v206);
      }
      if (!v209)
        goto LABEL_242;
      v99 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v187, (uint64_t)&v206);
      if (v99 == 129 || (char)v99 >= 1)
        break;
      v100 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v206, (uint64_t)&v189);
      v101 = v209;
      if (v100 == 129 || (char)v100 > 0)
        goto LABEL_238;
      if (!v209)
        goto LABEL_441;
      if (v93 == (_DWORD)v196)
      {
        v102 = WTF::Vector<WebCore::BoundaryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v195, v93 + 1, (unint64_t)&v206);
        v103 = HIDWORD(v196);
        v3 = v195;
        v104 = (char *)v195 + 16 * HIDWORD(v196);
        v105 = *(_QWORD *)v102;
        *(_QWORD *)v102 = 0;
        *(_QWORD *)v104 = v105;
        *((_DWORD *)v104 + 2) = *(_DWORD *)(v102 + 8);
        v93 = v103 + 1;
        HIDWORD(v196) = v103 + 1;
        if (!v209)
          goto LABEL_220;
      }
      else
      {
        v106 = (char *)v3 + 16 * v93;
        v107 = v206;
        v206 = 0;
        *(_QWORD *)v106 = v107;
        *((_DWORD *)v106 + 2) = v207;
        HIDWORD(v196) = ++v93;
      }
      v108 = v206;
      v206 = 0;
      if (v108)
      {
        if (*((_DWORD *)v108 + 6) == 2)
        {
          if ((*((_WORD *)v108 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v108, v44);
        }
        else
        {
          *((_DWORD *)v108 + 6) -= 2;
        }
      }
LABEL_220:
      v2 = (v2 - 1);
      if (!(_DWORD)v2)
        goto LABEL_242;
      if (!(_BYTE)v212)
        goto LABEL_441;
    }
    v101 = v209;
LABEL_238:
    if (v101)
    {
      v110 = v206;
      v206 = 0;
      if (v110)
      {
        if (*((_DWORD *)v110 + 6) == 2)
        {
          if ((*((_WORD *)v110 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v110, v44);
        }
        else
        {
          *((_DWORD *)v110 + 6) -= 2;
        }
      }
    }
LABEL_242:
    if (v196 > v93)
    {
      if (!v93)
        goto LABEL_254;
      if (v93 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x195610A6CLL);
      }
      v111 = WTF::fastMalloc((WTF *)(16 * v93));
      LODWORD(v196) = v93;
      v195 = (WebCore::AccessibilityObject *)v111;
      if ((WebCore::AccessibilityObject *)v111 == v3)
      {
LABEL_254:
        v195 = 0;
        LODWORD(v196) = 0;
        goto LABEL_256;
      }
      v112 = v111;
      v113 = 0;
      v114 = (_QWORD *)((char *)v3 + 16 * v93);
      do
      {
        v115 = v112 + v113;
        v116 = (_QWORD *)((char *)v3 + v113);
        v117 = *(_QWORD *)((char *)v3 + v113);
        *v116 = 0;
        *(_QWORD *)v115 = v117;
        *(_DWORD *)(v115 + 8) = *(_DWORD *)((char *)v3 + v113 + 8);
        v118 = *(_QWORD *)((char *)v3 + v113);
        *v116 = 0;
        if (v118)
        {
          if (*(_DWORD *)(v118 + 24) == 2)
          {
            if ((*(_WORD *)(v118 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v118, v44);
          }
          else
          {
            *(_DWORD *)(v118 + 24) -= 2;
          }
        }
        v113 += 16;
      }
      while (v116 + 2 != v114);
      if (v3)
LABEL_256:
        WTF::fastFree(v3, v44);
    }
    v3 = v177;
    if ((_BYTE)v212)
    {
      v119 = v211.var0.var0.var0;
      v211.var0.var0.var0 = 0;
      if (v119)
      {
        if (*((_DWORD *)v119 + 6) == 2)
        {
          if ((*((_WORD *)v119 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v119, v44);
        }
        else
        {
          *((_DWORD *)v119 + 6) -= 2;
        }
      }
    }
    v120 = 0;
    do
    {
      v121 = *(_QWORD *)((char *)v79 + v120);
      *(_QWORD *)((char *)v79 + v120) = 0;
      if (v121)
      {
        if (*(_DWORD *)(v121 + 24) == 2)
        {
          if ((*(_WORD *)(v121 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v121, v44);
        }
        else
        {
          *(_DWORD *)(v121 + 24) -= 2;
        }
      }
      v120 += 16;
    }
    while (16 * v176 != v120);
    WTF::fastFree(v79, v44);
    v79 = v195;
    v81 = HIDWORD(v196);
    v40 = (WebCore::Node **)v175;
    if (v197)
    {
      if (*((_DWORD *)v197 + 6) == 2)
      {
        if ((*((_WORD *)v197 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v197, v85);
      }
      else
      {
        *((_DWORD *)v197 + 6) -= 2;
      }
    }
    if (v192)
    {
      if (*((_DWORD *)v192 + 6) == 2)
      {
        if ((*((_WORD *)v192 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v192, v85);
      }
      else
      {
        *((_DWORD *)v192 + 6) -= 2;
      }
    }
    v89 = 0;
    if (v84)
    {
LABEL_276:
      if (*(_DWORD *)(v84 + 24) == 2)
      {
        if ((*(_WORD *)(v84 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v84, v85);
      }
      else
      {
        *(_DWORD *)(v84 + 24) -= 2;
      }
    }
  }
  while ((v89 & 1) == 0 && (_DWORD)v81);
  *((_DWORD *)v173 + 6) += 2;
  v197 = v173;
  v198 = v171;
  v199 &= 0xF0u;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v197, (uint64_t)&v211);
  v211.var1 = 1;
  (*(void (**)(WebCore::Node **__return_ptr, WebCore::AccessibilityObject *, VisiblePosition *))(*(_QWORD *)v3 + 2088))(&v206, v3, &v211);
  v140 = v211.var0.var0.var0;
  v211.var0.var0.var0 = 0;
  if (v140)
  {
    if (*((_DWORD *)v140 + 6) == 2)
    {
      if ((*((_WORD *)v140 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v140, v139);
    }
    else
    {
      *((_DWORD *)v140 + 6) -= 2;
    }
  }
  v197 = 0;
  if (*((_DWORD *)v173 + 6) == 2)
  {
    if ((*((_WORD *)v173 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v173, v139);
  }
  else
  {
    *((_DWORD *)v173 + 6) -= 2;
  }
  v141 = v206;
  if (v206)
  {
    *((_DWORD *)v206 + 6) += 2;
    v211.var0.var0.var0 = (Node *)v141;
    v211.var0.var1 = v207;
    *((_BYTE *)&v211.var0 + 12) = v208;
    WebCore::makeBoundaryPoint((uint64_t *)&v211, (uint64_t)&v197);
    if (*((_DWORD *)v141 + 6) == 2)
    {
      if ((*((_WORD *)v141 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v141, v142);
    }
    else
    {
      *((_DWORD *)v141 + 6) -= 2;
    }
  }
  else
  {
    v211.var0.var0.var0 = 0;
    v211.var0.var1 = v207;
    *((_BYTE *)&v211.var0 + 12) = v208;
    WebCore::makeBoundaryPoint((uint64_t *)&v211, (uint64_t)&v197);
  }
  v143 = v200;
  if (v200)
  {
    v144 = v173;
    v37 = a2;
    if (v197 != v173)
      goto LABEL_342;
    *((_DWORD *)v38 + 6) += 2;
    v211.var0.var0.var0 = (Node *)v38;
    v211.var0.var1 = v175;
    *((_DWORD *)v173 + 6) += 2;
    *(_QWORD *)&v211.var1 = v173;
    v145 = v198;
    v212 = v198;
    v146 = WebCore::AccessibilityObject::boundsForRange(v3, (const WebCore::SimpleRange *)&v211);
    v147 = (unint64_t)v142;
    v148 = *(_QWORD *)&v211.var1;
    *(_QWORD *)&v211.var1 = 0;
    if (v148)
    {
      if (*(_DWORD *)(v148 + 24) == 2)
      {
        if ((*(_WORD *)(v148 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v148, v142);
      }
      else
      {
        *(_DWORD *)(v148 + 24) -= 2;
      }
    }
    v149 = v211.var0.var0.var0;
    v211.var0.var0.var0 = 0;
    if (v149)
    {
      if (*((_DWORD *)v149 + 6) == 2)
      {
        if ((*((_WORD *)v149 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v149, v142);
      }
      else
      {
        *((_DWORD *)v149 + 6) -= 2;
      }
    }
    v150 = (float)((int)v147 + (int)v146);
    if (*(float *)&v186 > v150
      || (float)(*(float *)&v186 + *((float *)&v186 + 2)) < v150
      || (v151 = (float)(int)(((v147 & 0xFFFFFFFF00000000) + v146) >> 32), *((float *)&v186 + 1) > v151))
    {
      v143 = 1;
      goto LABEL_353;
    }
    v37 = a2;
    v144 = v173;
    if ((float)(*((float *)&v186 + 1) + *((float *)&v186 + 3)) < v151)
    {
LABEL_342:
      v143 = 1;
    }
    else
    {
      v167 = *((_DWORD *)v173 + 6);
      *((_DWORD *)v173 + 6) = v167 + 2;
      if (v167)
      {
        *((_DWORD *)v173 + 6) = v167;
        goto LABEL_463;
      }
      if ((*((_WORD *)v173 + 15) & 0x400) != 0)
      {
LABEL_463:
        v143 = 1;
        v171 = v145;
      }
      else
      {
        WebCore::Node::removedLastRef(v173, v142);
        v171 = v198;
        v143 = v200;
      }
    }
  }
  else
  {
LABEL_353:
    v37 = a2;
    v144 = v173;
  }
  *((_DWORD *)v38 + 6) += 2;
  *((_DWORD *)v144 + 6) += 2;
  *(_QWORD *)v37 = v38;
  *(_DWORD *)(v37 + 8) = v175;
  *(_QWORD *)(v37 + 16) = v144;
  *(_DWORD *)(v37 + 24) = v171;
  *(_BYTE *)(v37 + 32) = 1;
  if (v143 && v197)
  {
    if (*((_DWORD *)v197 + 6) == 2)
    {
      if ((*((_WORD *)v197 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v197, v142);
    }
    else
    {
      *((_DWORD *)v197 + 6) -= 2;
    }
  }
  v152 = v206;
  v206 = 0;
  if (v152)
  {
    if (*((_DWORD *)v152 + 6) == 2)
    {
      if ((*((_WORD *)v152 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v152, v142);
    }
    else
    {
      *((_DWORD *)v152 + 6) -= 2;
    }
  }
  if ((_DWORD)v81)
  {
    v153 = 16 * v81;
    v154 = v79;
    do
    {
      v155 = *(_QWORD *)v154;
      *(_QWORD *)v154 = 0;
      if (v155)
      {
        if (*(_DWORD *)(v155 + 24) == 2)
        {
          if ((*(_WORD *)(v155 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v155, v142);
        }
        else
        {
          *(_DWORD *)(v155 + 24) -= 2;
        }
      }
      v154 = (WTF *)((char *)v154 + 16);
      v153 -= 16;
    }
    while (v153);
  }
  if (v79)
    WTF::fastFree(v79, v142);
  if (v205 && v201)
  {
    if (*((_DWORD *)v201 + 6) == 2)
    {
      if ((*((_WORD *)v201 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v201, v142);
    }
    else
    {
      *((_DWORD *)v201 + 6) -= 2;
    }
  }
  if (v144)
  {
    if (*((_DWORD *)v144 + 6) == 2)
    {
      if ((*((_WORD *)v144 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v144, v142);
    }
    else
    {
      *((_DWORD *)v144 + 6) -= 2;
    }
  }
  if (v38)
  {
    if (*((_DWORD *)v38 + 6) == 2)
    {
      if ((*((_WORD *)v38 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v38, v142);
    }
    else
    {
      *((_DWORD *)v38 + 6) -= 2;
    }
  }
LABEL_382:
  if (*((_BYTE *)v3 + 176))
  {
    std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::SimpleRange,false> const&>((unsigned int *)v3 + 26, (uint64_t *)&v179);
    v156 = v185;
    *((_OWORD *)v3 + 9) = v184;
    *((_OWORD *)v3 + 10) = v156;
  }
  else
  {
    *((_BYTE *)v3 + 104) = 0;
    *((_BYTE *)v3 + 136) = 0;
    if (v172)
    {
      v157 = v179;
      *((_DWORD *)v179 + 6) += 2;
      *((_QWORD *)v3 + 13) = v157;
      *((_DWORD *)v3 + 28) = v170;
      *((_DWORD *)v169 + 6) += 2;
      *((_QWORD *)v3 + 15) = v169;
      *((_DWORD *)v3 + 32) = v168;
      *((_BYTE *)v3 + 136) = 1;
    }
    v158 = v185;
    *((_OWORD *)v3 + 9) = v184;
    *((_OWORD *)v3 + 10) = v158;
    *((_BYTE *)v3 + 176) = 1;
  }
  result = std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::SimpleRange,false> const&>((unsigned int *)v3 + 16, (uint64_t *)v37);
  v27 = v183;
LABEL_388:
  if (v27)
  {
    if (v181)
    {
      if (*((_DWORD *)v181 + 6) == 2)
      {
        if ((*((_WORD *)v181 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v181, v12);
      }
      else
      {
        *((_DWORD *)v181 + 6) -= 2;
      }
    }
    result = (unsigned int *)v179;
    if (v179)
    {
      if (*((_DWORD *)v179 + 6) == 2)
      {
        if ((*((_WORD *)v179 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(v179, v12);
      }
      else
      {
        *((_DWORD *)v179 + 6) -= 2;
      }
    }
  }
  if (v191)
  {
    v159 = v189;
    v189 = 0;
    if (v159)
    {
      if (*((_DWORD *)v159 + 6) == 2)
      {
        if ((*((_WORD *)v159 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v159, v12);
      }
      else
      {
        *((_DWORD *)v159 + 6) -= 2;
      }
    }
    result = (unsigned int *)v187;
    v187 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v12);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::findTextRange(uint64_t result, uint64_t a2, char **a3, uint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int *v11;
  WebCore::Node **v12;
  int *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  void *v16;
  unint64_t v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  void *v21;
  unint64_t v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::Node **v25;
  char *v26;
  void *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  void *v33;
  uint64_t v34;
  const WebCore::Node ***v35;
  const WebCore::Node ***v36;
  int v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  int v40;
  WebCore::Node *v41;
  int v42;
  char v43;
  WebCore::Node *v44;
  uint64_t v45;
  WebCore::Node *v46;
  int v47;
  char v48;
  WebCore::Node *v49;
  int v50;
  WebCore::Node *v51;
  uint64_t v52;
  char v53;
  WebCore::Node *v54;
  int v55;
  WebCore::Node *v56;
  int v57;
  unsigned __int8 v58;

  v8 = result;
  LOBYTE(v54) = 0;
  v58 = 0;
  if (a5 == 2)
  {
    v11 = (int *)&v52;
    v12 = &v51;
    v13 = &v50;
    WebCore::AccessibilityObject::rangeOfStringClosestToRangeInDirection((uint64_t)&v49, a2, a4, 1, a3);
    WebCore::AccessibilityObject::rangeOfStringClosestToRangeInDirection((uint64_t)&v44, a2, a4, 2, a3);
    if (v48)
    {
      if (v53)
      {
        v14 = v46;
        *((_DWORD *)v46 + 6) += 2;
        v39 = v14;
        v40 = v47;
        v15 = *(WebCore::Node **)a4;
        *((_DWORD *)v15 + 6) = *(_DWORD *)(*(_QWORD *)a4 + 24) + 2;
        v41 = v15;
        v42 = *(_DWORD *)(a4 + 8);
        v17 = WebCore::characterCount((int *)&v39, 0);
        v18 = v41;
        v41 = 0;
        if (v18)
        {
          if (*((_DWORD *)v18 + 6) == 2)
          {
            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v18, v16);
          }
          else
          {
            *((_DWORD *)v18 + 6) -= 2;
          }
        }
        result = (uint64_t)v39;
        v39 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v16);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        if (!v53)
          goto LABEL_100;
        v19 = v49;
        *((_DWORD *)v49 + 6) += 2;
        v39 = v19;
        v40 = v50;
        v20 = *(WebCore::Node **)(a4 + 16);
        *((_DWORD *)v20 + 6) += 2;
        v41 = v20;
        v42 = *(_DWORD *)(a4 + 24);
        v22 = WebCore::characterCount((int *)&v39, 0);
        v23 = v41;
        v41 = 0;
        if (v23)
        {
          if (*((_DWORD *)v23 + 6) == 2)
          {
            if ((*((_WORD *)v23 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v23, v21);
          }
          else
          {
            *((_DWORD *)v23 + 6) -= 2;
          }
        }
        v24 = v39;
        v39 = 0;
        if (v24)
        {
          if (*((_DWORD *)v24 + 6) == 2)
          {
            if ((*((_WORD *)v24 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v24, v21);
          }
          else
          {
            *((_DWORD *)v24 + 6) -= 2;
          }
        }
        if (v17 <= v22)
          v25 = &v44;
        else
          v25 = &v49;
        if (v17 <= v22)
        {
          v11 = &v47;
          v12 = &v46;
          v13 = (int *)&v45;
        }
        LOBYTE(v39) = 0;
        v43 = 0;
        v26 = &v48;
        if (v17 > v22)
          v26 = &v53;
        if (!*v26)
          goto LABEL_35;
      }
      else
      {
        v25 = &v44;
        v13 = (int *)&v45;
        v12 = &v46;
        v11 = &v47;
      }
    }
    else
    {
      LOBYTE(v39) = 0;
      v43 = 0;
      if (!v53)
      {
LABEL_35:
        result = std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)&v54, (uint64_t *)&v39);
        if (v43)
        {
          v30 = v41;
          v41 = 0;
          if (v30)
          {
            if (*((_DWORD *)v30 + 6) == 2)
            {
              if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v30, v27);
            }
            else
            {
              *((_DWORD *)v30 + 6) -= 2;
            }
          }
          result = (uint64_t)v39;
          v39 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v27);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
        }
        if (v48)
        {
          v31 = v46;
          v46 = 0;
          if (v31)
          {
            if (*((_DWORD *)v31 + 6) == 2)
            {
              if ((*((_WORD *)v31 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v31, v27);
            }
            else
            {
              *((_DWORD *)v31 + 6) -= 2;
            }
          }
          result = (uint64_t)v44;
          v44 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v27);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
        }
        goto LABEL_49;
      }
      v25 = &v49;
    }
    v28 = *v25;
    *v25 = 0;
    v39 = v28;
    v40 = *v13;
    v29 = *v12;
    *v12 = 0;
    v41 = v29;
    v42 = *v11;
    v43 = 1;
    goto LABEL_35;
  }
  if (a5 == 1)
  {
    v9 = a4;
    v10 = 2;
  }
  else
  {
    if (a5)
    {
LABEL_67:
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 32) = 0;
      return result;
    }
    v9 = a4;
    v10 = 1;
  }
  WebCore::AccessibilityObject::rangeOfStringClosestToRangeInDirection((uint64_t)&v49, a2, v9, v10, a3);
  result = std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)&v54, (uint64_t *)&v49);
LABEL_49:
  if (v53)
  {
    v32 = v51;
    v51 = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v32, v27);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
    result = (uint64_t)v49;
    v49 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v27);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
  }
  if (!v58)
    goto LABEL_67;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 832))(a2);
  if (!result)
    goto LABEL_65;
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 832))(a2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 880))(v34);
  if (!(_DWORD)result)
    goto LABEL_65;
  if (!v58)
    goto LABEL_100;
  v35 = (const WebCore::Node ***)v54;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 832))(a2);
  if (!result)
    goto LABEL_68;
  result = WebCore::Node::isDescendantOrShadowDescendantOf(v35, (const WebCore::Node *)result);
  if (!(_DWORD)result)
    goto LABEL_68;
  if (!v58)
  {
LABEL_100:
    __break(1u);
    return result;
  }
  v36 = (const WebCore::Node ***)v56;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 832))(a2);
  if (result)
  {
    result = WebCore::Node::isDescendantOrShadowDescendantOf(v36, (const WebCore::Node *)result);
    if ((result & 1) != 0)
    {
LABEL_65:
      v37 = v58;
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 32) = 0;
      if (!v37)
        return result;
      *(_QWORD *)v8 = v54;
      *(_DWORD *)(v8 + 8) = v55;
      *(_QWORD *)(v8 + 16) = v56;
      *(_DWORD *)(v8 + 24) = v57;
      *(_BYTE *)(v8 + 32) = 1;
      v54 = 0;
      v56 = 0;
      goto LABEL_72;
    }
  }
LABEL_68:
  *(_BYTE *)v8 = 0;
  *(_BYTE *)(v8 + 32) = 0;
  if (!v58)
    return result;
  v38 = v56;
  v56 = 0;
  if (v38)
  {
    if (*((_DWORD *)v38 + 6) == 2)
    {
      if ((*((_WORD *)v38 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v38, v33);
    }
    else
    {
      *((_DWORD *)v38 + 6) -= 2;
    }
  }
LABEL_72:
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v33);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::AccessibilityObject::findTextRanges@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *result;
  void *v14;
  uint64_t v15;
  WebCore::Node *v16;
  int v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Node **v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  int v32;
  WebCore::Node *v33;
  int v34;
  char v35;
  WebCore::Node *v36;
  int v37;
  WebCore::Node *v38;
  int v39;
  char v40;
  WebCore::Node **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;

  LOBYTE(v36) = 0;
  v40 = 0;
  if (*(_DWORD *)(a2 + 16) != 1)
  {
    (*(void (**)(WebCore::Node ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 1960))(&v41, a1);
    result = (unsigned int *)std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)&v36, (uint64_t *)&v41);
    if (v45)
    {
      v15 = v43;
      v43 = 0;
      if (v15)
      {
        if (*(_DWORD *)(v15 + 24) == 2)
        {
          if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v15, v14);
        }
        else
        {
          *(_DWORD *)(v15 + 24) -= 2;
        }
      }
      result = (unsigned int *)v41;
      v41 = 0;
      if (result)
        goto LABEL_23;
    }
    goto LABEL_25;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
  if (!v6
    || (v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 528)) == 0
    || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
    LOBYTE(v31) = 0;
    v35 = 0;
    goto LABEL_18;
  }
  WebCore::VisibleSelection::firstRange((WebCore::Node *)(*(_QWORD *)(*(_QWORD *)(v8 + 296) + 3064) + 56), &v41);
  if (!v45)
  {
    v30 = *(WebCore::Node **)(v8 + 296);
    *((_DWORD *)v30 + 6) += 4;
    v31 = v30;
    v32 = 0;
    v33 = v30;
    v34 = 0;
    v35 = 1;
    goto LABEL_18;
  }
  v10 = (uint64_t)v41;
  *((_DWORD *)v41 + 6) += 2;
  v31 = (WebCore::Node *)v10;
  v32 = v42;
  v11 = v43;
  v12 = *(_DWORD *)(v43 + 24);
  *(_DWORD *)(v43 + 24) = v12 + 2;
  v33 = (WebCore::Node *)v11;
  v34 = v44;
  v35 = 1;
  v43 = 0;
  if (v12)
  {
    *(_DWORD *)(v11 + 24) = v12;
  }
  else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
    v10 = (uint64_t)v41;
    v41 = 0;
    if (!v10)
      goto LABEL_18;
    goto LABEL_9;
  }
  v41 = 0;
LABEL_9:
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
LABEL_18:
  result = (unsigned int *)std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)&v36, (uint64_t *)&v31);
  if (v35)
  {
    v16 = v33;
    v33 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v14);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    result = (unsigned int *)v31;
    v31 = 0;
    if (result)
    {
LABEL_23:
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v14);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
LABEL_25:
  if (!v40)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return result;
  }
  v17 = *(_DWORD *)(a2 + 16);
  if (v17 == 2 || v17 && *(_DWORD *)(a2 + 20) == 1)
  {
    v18 = v38;
    result = (unsigned int *)v36;
    *((_DWORD *)v38 + 6) += 2;
    v36 = v18;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v14);
      }
      else
      {
        result[6] -= 2;
      }
    }
    v37 = v39;
  }
  else
  {
    v19 = v36;
    result = (unsigned int *)v38;
    *((_DWORD *)v36 + 6) += 2;
    v38 = v19;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v14);
      }
      else
      {
        result[6] -= 2;
      }
    }
    v39 = v37;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v20 = *(_DWORD *)(a2 + 20);
  if (v20 >= 3)
  {
    if (v20 == 3)
    {
      v41 = &v36;
      v42 = a1;
      v43 = a2;
      v44 = a3;
      WebCore::AccessibilityObject::findTextRanges(WebCore::AccessibilitySearchTextCriteria const&)const::$_0::operator()((unsigned int *)&v41, 0);
      result = WebCore::AccessibilityObject::findTextRanges(WebCore::AccessibilitySearchTextCriteria const&)const::$_0::operator()((unsigned int *)&v41, (void *)1);
    }
    goto LABEL_53;
  }
  if (!v40)
  {
    __break(1u);
    return result;
  }
  result = (unsigned int *)WebCore::AccessibilityObject::findTextRange((uint64_t)&v41, a1, (char **)a2, (uint64_t)&v36, v20);
  if (v45)
  {
    v21 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v21 != *(_DWORD *)(a3 + 8))
    {
      v27 = *(_QWORD *)a3 + 32 * v21;
      v28 = v41;
      *((_DWORD *)v41 + 6) += 2;
      *(_QWORD *)v27 = v28;
      *(_DWORD *)(v27 + 8) = v42;
      v26 = v43;
      *(_DWORD *)(v43 + 24) += 2;
      *(_QWORD *)(v27 + 16) = v26;
      *(_DWORD *)(v27 + 24) = v44;
      *(_DWORD *)(a3 + 12) = v21 + 1;
      v43 = 0;
      goto LABEL_48;
    }
    result = (unsigned int *)WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v21 + 1, (unint64_t)&v41);
    v22 = *(unsigned int *)(a3 + 12);
    v23 = *(_QWORD *)a3 + 32 * v22;
    v24 = *(_QWORD *)result;
    *(_DWORD *)(v24 + 24) = *(_DWORD *)(*(_QWORD *)result + 24) + 2;
    *(_QWORD *)v23 = v24;
    *(_DWORD *)(v23 + 8) = result[2];
    v25 = *((_QWORD *)result + 2);
    *(_DWORD *)(v25 + 24) += 2;
    *(_QWORD *)(v23 + 16) = v25;
    *(_DWORD *)(v23 + 24) = result[6];
    LODWORD(v23) = v45;
    *(_DWORD *)(a3 + 12) = v22 + 1;
    if ((_DWORD)v23)
    {
      v26 = v43;
      v43 = 0;
      if (!v26)
      {
LABEL_50:
        result = (unsigned int *)v41;
        v41 = 0;
        if (result)
        {
          if (result[6] == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)result, v14);
          }
          else
          {
            result[6] -= 2;
          }
        }
        goto LABEL_53;
      }
LABEL_48:
      if (*(_DWORD *)(v26 + 24) == 2)
      {
        if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v26, v14);
      }
      else
      {
        *(_DWORD *)(v26 + 24) -= 2;
      }
      goto LABEL_50;
    }
  }
LABEL_53:
  if (v40)
  {
    v29 = v38;
    v38 = 0;
    if (v29)
    {
      if (*((_DWORD *)v29 + 6) == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v29, v14);
      }
      else
      {
        *((_DWORD *)v29 + 6) -= 2;
      }
    }
    result = (unsigned int *)v36;
    v36 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v14);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebCore::AccessibilityObject::findTextRanges(WebCore::AccessibilitySearchTextCriteria const&)const::$_0::operator()(unsigned int *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int *v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  int v8;
  WebCore::Node *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v19[2];
  WebCore::Node *v20;
  char v21;
  WebCore::Node *v22;
  int v23;
  WebCore::Node *v24;
  int v25;
  unsigned __int8 v26;

  v2 = *(_QWORD *)result;
  v3 = *((_QWORD *)result + 1);
  LOBYTE(v22) = 0;
  v26 = 0;
  if (!*(_BYTE *)(v2 + 32))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v4 = (int)a2;
  v5 = result;
  v6 = *(WebCore::Node **)v2;
  *((_DWORD *)v6 + 6) = *(_DWORD *)(*(_QWORD *)v2 + 24) + 2;
  v22 = v6;
  v23 = *(_DWORD *)(v2 + 8);
  v7 = *(WebCore::Node **)(v2 + 16);
  *((_DWORD *)v7 + 6) += 2;
  v24 = v7;
  v25 = *(_DWORD *)(v2 + 24);
  v26 = 1;
  while (1)
  {
    WebCore::AccessibilityObject::findTextRange((uint64_t)v19, v3, *((char ***)v5 + 2), (uint64_t)&v22, v4);
    result = (unsigned int *)std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)&v22, (uint64_t *)v19);
    v8 = v26;
    if (v21)
    {
      v9 = v20;
      v20 = 0;
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9, a2);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
      }
      result = (unsigned int *)v19[0];
      v19[0] = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
    if (!v8)
      break;
    if (v26)
    {
      v10 = *((_QWORD *)v5 + 3);
      v11 = *(unsigned int *)(v10 + 12);
      if ((_DWORD)v11 == *(_DWORD *)(v10 + 8))
      {
        result = (unsigned int *)WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*((_QWORD *)v5 + 3), v11 + 1, (unint64_t)&v22);
        v11 = *(unsigned int *)(v10 + 12);
        v12 = *(_QWORD *)v10 + 32 * v11;
        v13 = *(_QWORD *)result;
        *(_DWORD *)(v13 + 24) = *(_DWORD *)(*(_QWORD *)result + 24) + 2;
        *(_QWORD *)v12 = v13;
        *(_DWORD *)(v12 + 8) = result[2];
        v14 = *((_QWORD *)result + 2);
        *(_DWORD *)(v14 + 24) += 2;
        *(_QWORD *)(v12 + 16) = v14;
        *(_DWORD *)(v12 + 24) = result[6];
        v15 = v26;
      }
      else
      {
        v16 = *(_QWORD *)v10 + 32 * v11;
        v17 = v22;
        *((_DWORD *)v22 + 6) += 2;
        *(_QWORD *)v16 = v17;
        *(_DWORD *)(v16 + 8) = v23;
        v18 = v24;
        *((_DWORD *)v24 + 6) += 2;
        *(_QWORD *)(v16 + 16) = v18;
        *(_DWORD *)(v16 + 24) = v25;
        v15 = 1;
      }
      *(_DWORD *)(v10 + 12) = v11 + 1;
      if (v15)
        continue;
    }
    goto LABEL_29;
  }
  if (v26)
  {
    result = (unsigned int *)v24;
    v24 = 0;
    if (!result)
      goto LABEL_25;
    if (result[6] != 2)
    {
      result[6] -= 2;
LABEL_25:
      result = (unsigned int *)v22;
      v22 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      return result;
    }
LABEL_30:
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    goto LABEL_25;
  }
  return result;
}

void WebCore::AccessibilityObject::performTextOperation(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  WebCore::Node *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  WebCore::Document *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WebCore::Editor *v44;
  void *v45;
  WebCore::Editor *v46;
  uint64_t v47;
  void *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  WebCore::Node *v52;
  int v53;
  char v54;
  WTF::StringImpl *v55[12];
  char v56;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (*(_DWORD *)(a2 + 12))
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
    if (v5)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 528);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v9)
          {
            v10 = *(_DWORD **)a2;
            for (i = 32 * v9; i; i -= 32)
            {
              v12 = *(_QWORD *)(*(_QWORD *)(v8 + 296) + 3064);
              v13 = *(_QWORD *)v10;
              *(_DWORD *)(v13 + 24) = *(_DWORD *)(*(_QWORD *)v10 + 24) + 2;
              v50 = (WTF::StringImpl *)v13;
              v51 = v10[2];
              v14 = *((_QWORD *)v10 + 2);
              *(_DWORD *)(v14 + 24) += 2;
              v52 = (WebCore::Node *)v14;
              v53 = v10[6];
              v54 = 1;
              if (*(_QWORD *)(*(_QWORD *)(v13 + 40) + 8) == *(_QWORD *)(*(_QWORD *)(v14 + 40) + 8))
              {
                WebCore::VisibleSelection::VisibleSelection((uint64_t)v55, (uint64_t)&v50, 1, 0);
                v15 = v56 != 0;
                if (v56)
                  WebCore::FrameSelection::setSelection(v12, (uint64_t)v55, 6u, 0, 0, 0, 0);
                WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v55);
                if (!v54)
                {
LABEL_24:
                  if (!v15)
                    goto LABEL_65;
                  goto LABEL_25;
                }
              }
              else
              {
                v15 = 0;
              }
              v16 = v52;
              v52 = 0;
              if (v16)
              {
                if (*((_DWORD *)v16 + 6) == 2)
                {
                  if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v16, v6);
                }
                else
                {
                  *((_DWORD *)v16 + 6) -= 2;
                }
              }
              v17 = v50;
              v50 = 0;
              if (!v17)
                goto LABEL_24;
              if (*((_DWORD *)v17 + 6) == 2)
              {
                if ((*((_WORD *)v17 + 15) & 0x400) != 0)
                  goto LABEL_24;
                WebCore::Node::removedLastRef(v17, v6);
                if (!v15)
                  goto LABEL_65;
              }
              else
              {
                *((_DWORD *)v17 + 6) -= 2;
                if (!v15)
                  goto LABEL_65;
              }
LABEL_25:
              WebCore::plainText(v10, 0, 0, (const WTF::String *)v55);
              v18 = *(WTF::StringImpl **)(a2 + 24);
              if (v18)
                *(_DWORD *)v18 += 2;
              v50 = v18;
              switch(*(_DWORD *)(a2 + 16))
              {
                case 1:
                  if (!v55[0] || !v18 || !*((_DWORD *)v55[0] + 1) || *((_DWORD *)v18 + 1) < 3u)
                    goto LABEL_50;
                  WTF::String::convertToUppercaseWithoutLocale((WTF::String *)&v50);
                  v21 = WTF::equal(v50, v49, v19);
                  v22 = v49;
                  v49 = 0;
                  if (!v22)
                    goto LABEL_35;
                  if (*(_DWORD *)v22 == 2)
                  {
                    WTF::StringImpl::destroy(v22, v20);
                    if ((v21 & 1) != 0)
                      goto LABEL_50;
                  }
                  else
                  {
                    *(_DWORD *)v22 -= 2;
LABEL_35:
                    if ((v21 & 1) != 0)
                      goto LABEL_50;
                  }
                  if (v55[0] && *((_DWORD *)v55[0] + 1))
                  {
                    v23 = (unsigned __int8 *)*((_QWORD *)v55[0] + 1);
                    if ((*((_BYTE *)v55[0] + 16) & 4) != 0)
                      v24 = *v23;
                    else
                      v24 = *(unsigned __int16 *)v23;
                  }
                  else
                  {
                    v24 = 0;
                  }
                  if (MEMORY[0x19AEA861C](v24) == (_DWORD)v24)
                  {
                    v25 = &v50;
                    goto LABEL_45;
                  }
                  v26 = &v50;
                  goto LABEL_43;
                case 2:
                  v25 = v55;
LABEL_45:
                  WebCore::capitalize(v25, 32, &v49);
                  goto LABEL_47;
                case 3:
                  v26 = v55;
LABEL_43:
                  WTF::String::convertToLowercaseWithoutLocale((WTF::String *)v26);
                  goto LABEL_47;
                case 4:
                  WTF::String::convertToUppercaseWithoutLocale((WTF::String *)v55);
LABEL_47:
                  v29 = v49;
                  v28 = v50;
                  v49 = 0;
                  v50 = v29;
                  if (!v28)
                    goto LABEL_50;
                  v30 = *(_DWORD *)v28 - 2;
                  if (*(_DWORD *)v28 != 2)
                    goto LABEL_49;
                  WTF::StringImpl::destroy(v28, v27);
                  v28 = v49;
                  v49 = 0;
                  if (v28)
                  {
                    v30 = *(_DWORD *)v28 - 2;
                    if (*(_DWORD *)v28 == 2)
                      WTF::StringImpl::destroy(v28, v43);
                    else
LABEL_49:
                      *(_DWORD *)v28 = v30;
                  }
LABEL_50:
                  v31 = *(WebCore::Document **)(v8 + 296);
                  v32 = *((_QWORD *)v31 + 382);
                  if (!v32)
                  {
                    v44 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                    WebCore::Editor::Editor(v44, v31);
                    v46 = (WebCore::Editor *)*((_QWORD *)v31 + 382);
                    *((_QWORD *)v31 + 382) = v44;
                    if (v46)
                    {
                      WebCore::Editor::~Editor(v46, v45);
                      if (*(_DWORD *)v47)
                      {
                        *(_QWORD *)(v47 + 496) = 0;
                        *(_OWORD *)(v47 + 464) = 0u;
                        *(_OWORD *)(v47 + 480) = 0u;
                        *(_OWORD *)(v47 + 432) = 0u;
                        *(_OWORD *)(v47 + 448) = 0u;
                        *(_OWORD *)(v47 + 400) = 0u;
                        *(_OWORD *)(v47 + 416) = 0u;
                        *(_OWORD *)(v47 + 368) = 0u;
                        *(_OWORD *)(v47 + 384) = 0u;
                        *(_OWORD *)(v47 + 336) = 0u;
                        *(_OWORD *)(v47 + 352) = 0u;
                        *(_OWORD *)(v47 + 304) = 0u;
                        *(_OWORD *)(v47 + 320) = 0u;
                        *(_OWORD *)(v47 + 272) = 0u;
                        *(_OWORD *)(v47 + 288) = 0u;
                        *(_OWORD *)(v47 + 240) = 0u;
                        *(_OWORD *)(v47 + 256) = 0u;
                        *(_OWORD *)(v47 + 208) = 0u;
                        *(_OWORD *)(v47 + 224) = 0u;
                        *(_OWORD *)(v47 + 176) = 0u;
                        *(_OWORD *)(v47 + 192) = 0u;
                        *(_OWORD *)(v47 + 144) = 0u;
                        *(_OWORD *)(v47 + 160) = 0u;
                        *(_OWORD *)(v47 + 112) = 0u;
                        *(_OWORD *)(v47 + 128) = 0u;
                        *(_OWORD *)(v47 + 80) = 0u;
                        *(_OWORD *)(v47 + 96) = 0u;
                        *(_OWORD *)(v47 + 48) = 0u;
                        *(_OWORD *)(v47 + 64) = 0u;
                        *(_OWORD *)(v47 + 16) = 0u;
                        *(_OWORD *)(v47 + 32) = 0u;
                        *(_OWORD *)v47 = 0u;
                      }
                      else
                      {
                        WTF::fastFree((WTF *)v47, v48);
                      }
                    }
                    v32 = *((_QWORD *)v31 + 382);
                  }
                  WebCore::Editor::replaceSelectionWithText(v32, (const WebCore::SimpleRange *)&v50, 1, 1, 0xEu);
                  v33 = *(unsigned int *)(a3 + 12);
                  if ((_DWORD)v33 == *(_DWORD *)(a3 + 8))
                  {
                    v34 = v33 + 1;
                    v35 = &v50;
                    goto LABEL_53;
                  }
                  v39 = *(_QWORD *)a3;
                  v40 = v50;
                  if (v50)
                    *(_DWORD *)v50 += 2;
                  *(_QWORD *)(v39 + 8 * v33) = v40;
                  goto LABEL_59;
                default:
                  v33 = *(unsigned int *)(a3 + 12);
                  if ((_DWORD)v33 == *(_DWORD *)(a3 + 8))
                  {
                    v34 = v33 + 1;
                    v35 = v55;
LABEL_53:
                    v36 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v34, (unint64_t)v35);
                    v33 = *(unsigned int *)(a3 + 12);
                    v37 = *(_QWORD *)a3;
                    v38 = *v36;
                    if (*v36)
LABEL_54:
                      *(_DWORD *)v38 += 2;
                  }
                  else
                  {
                    v37 = *(_QWORD *)a3;
                    v38 = v55[0];
                    if (v55[0])
                      goto LABEL_54;
                  }
                  *(_QWORD *)(v37 + 8 * v33) = v38;
LABEL_59:
                  *(_DWORD *)(a3 + 12) = v33 + 1;
                  v41 = v50;
                  v50 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v6);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v42 = v55[0];
                  v55[0] = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v6);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                  break;
              }
LABEL_65:
              v10 += 8;
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::AccessibilityObject::isARIAControl(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if ((a1 - 84) > 0x30 || ((1 << (a1 - 84)) & 0x1060020060011) == 0)
  {
    v3 = a1 - 10;
    if (v3 > 0x39 || ((1 << v3) & 0x200000000000211) == 0)
      return 0;
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::isMeter(WebCore::AccessibilityObject *this)
{
  uint64_t result;

  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2976))(this) == 81)
    return 1;
  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 848))(this);
  if (result)
    return *(unsigned __int8 *)(result + 46) == 23;
  return result;
}

void *WebCore::AccessibilityRenderObject::boundsForVisiblePositionRange(uint64_t a1, uint64_t a2, WebCore::RenderBlock **a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  BOOL *v8;
  int32x4_t v9;
  uint64_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int8x16_t v14;
  WebCore::RenderBlock **v15;
  uint64_t v16;
  BOOL *v17;
  int32x4_t v18;
  uint64_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int8x16_t v23;
  WebCore::RenderBlock **v24;
  uint64_t v25;
  BOOL *v26;
  int32x4_t v27;
  uint64_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int8x16_t v32;
  void *v33;
  WebCore::RenderBlock **v34;
  uint64_t v35;
  BOOL *v36;
  int32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int32x4_t v40;
  int8x16_t v41;
  WebCore::Node *v42;
  void *result;
  const WebCore::SimpleRange *v44;
  void *v45;
  WebCore::Node *v46;
  WebCore::Node *v47;
  uint64_t v48;
  uint64_t v49;
  int32x4_t v50;
  WebCore::Node *v51;
  uint64_t v52;
  WebCore::Node *v53;
  char v54;
  int32x4_t v55;
  int8x16_t v56;
  uint64_t v57;
  int v58;
  char v59;
  char v60;
  uint64_t v61;
  int v62;
  char v63;
  char v64;
  VisiblePosition v65;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)a2)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  *(_DWORD *)(v3 + 24) += 2;
  v57 = v3;
  v58 = *(_DWORD *)(a2 + 8);
  v59 = *(_BYTE *)(a2 + 12);
  v60 = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(v4 + 24) += 2;
  v61 = v4;
  v62 = *(_DWORD *)(a2 + 32);
  v63 = *(_BYTE *)(a2 + 36);
  v64 = *(_BYTE *)(a2 + 40);
  v65.var0.var0.var0 = 0;
  v51 = WebCore::localCaretRectInRendererForCaretPainting((WebCore *)&v57, &v65, a3);
  v52 = v7;
  v9.i64[0] = WebCore::absoluteBoundsForLocalCaretRect((WebCore *)v65.var0.var0.var0, (WebCore::RenderBlock *)&v51, 0, v8);
  v9.i64[1] = v10;
  v11.i64[0] = 0xFE000000FE000000;
  v11.i64[1] = 0xFE000000FE000000;
  v12 = (int8x16_t)vcgtq_s32(v9, v11);
  v13.i64[0] = 0xFE000000FE000000;
  v13.i64[1] = 0xFE000000FE000000;
  v14.i64[0] = 0x8000000080000000;
  v14.i64[1] = 0x8000000080000000;
  v50 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&v12 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v13, v9), v14, (int8x16_t)vshlq_n_s32(v9, 6uLL)), v12));
  v56 = (int8x16_t)v50;
  v65.var0.var0.var0 = 0;
  v51 = WebCore::localCaretRectInRendererForCaretPainting((WebCore *)&v61, &v65, v15);
  v52 = v16;
  v18.i64[0] = WebCore::absoluteBoundsForLocalCaretRect((WebCore *)v65.var0.var0.var0, (WebCore::RenderBlock *)&v51, 0, v17);
  v18.i64[1] = v19;
  v20.i64[0] = 0xFE000000FE000000;
  v20.i64[1] = 0xFE000000FE000000;
  v21 = (int8x16_t)vcgtq_s32(v18, v20);
  v22.i64[0] = 0xFE000000FE000000;
  v22.i64[1] = 0xFE000000FE000000;
  v23.i64[0] = 0x8000000080000000;
  v23.i64[1] = 0x8000000080000000;
  v55 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&v21 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v22, v18), v23, (int8x16_t)vshlq_n_s32(v18, 6uLL)), v21));
  if ((vmovn_s32(vceqq_s32(v55, v50)).i8[2] & 1) == 0)
  {
    WebCore::endOfLine((uint64_t *)&v51, (uint64_t)&v57, 1, 0);
    if (WebCore::operator==(&v57, (uint64_t *)&v51))
    {
      v60 = 1;
      *(_QWORD *)&v65.var1 = 0;
      v65.var0.var0.var0 = (Node *)WebCore::localCaretRectInRendererForCaretPainting((WebCore *)&v57, (VisiblePosition *)&v65.var1, v24);
      *(_QWORD *)&v65.var0.var1 = v25;
      v27.i64[0] = WebCore::absoluteBoundsForLocalCaretRect(*(WebCore **)&v65.var1, (WebCore::RenderBlock *)&v65, 0, v26);
      v27.i64[1] = v28;
      v29.i64[0] = 0xFE000000FE000000;
      v29.i64[1] = 0xFE000000FE000000;
      v30 = (int8x16_t)vcgtq_s32(v27, v29);
      v31.i64[0] = 0xFE000000FE000000;
      v31.i64[1] = 0xFE000000FE000000;
      v32.i64[0] = 0x8000000080000000;
      v32.i64[1] = 0x8000000080000000;
      v56 = vorrq_s8((int8x16_t)(*(_OWORD *)&v30 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v31, v27), v32, (int8x16_t)vshlq_n_s32(v27, 6uLL)), v30));
    }
    if (WebCore::operator==(&v61, (uint64_t *)&v51))
    {
      v64 = 0;
      *(_QWORD *)&v65.var1 = 0;
      v65.var0.var0.var0 = (Node *)WebCore::localCaretRectInRendererForCaretPainting((WebCore *)&v61, (VisiblePosition *)&v65.var1, v34);
      *(_QWORD *)&v65.var0.var1 = v35;
      v37.i64[0] = WebCore::absoluteBoundsForLocalCaretRect(*(WebCore **)&v65.var1, (WebCore::RenderBlock *)&v65, 0, v36);
      v37.i64[1] = (uint64_t)v33;
      v38.i64[0] = 0xFE000000FE000000;
      v38.i64[1] = 0xFE000000FE000000;
      v39 = (int8x16_t)vcgtq_s32(v37, v38);
      v40.i64[0] = 0xFE000000FE000000;
      v40.i64[1] = 0xFE000000FE000000;
      v41.i64[0] = 0x8000000080000000;
      v41.i64[1] = 0x8000000080000000;
      v55 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&v39 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v40, v37), v41, (int8x16_t)vshlq_n_s32(v37, 6uLL)), v39));
    }
    v42 = v51;
    v51 = 0;
    if (v42)
    {
      if (*((_DWORD *)v42 + 6) == 2)
      {
        if ((*((_WORD *)v42 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v42, v33);
      }
      else
      {
        *((_DWORD *)v42 + 6) -= 2;
      }
    }
  }
  result = WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>(&v57, (uint64_t)&v61, (uint64_t)&v51);
  if (v54)
  {
    v6 = WebCore::boundsForRects((WebCore *)&v56, (const WebCore::LayoutRect *)&v55, (const WebCore::LayoutRect *)&v51, v44);
    if (v54)
    {
      v46 = v53;
      v53 = 0;
      if (v46)
      {
        if (*((_DWORD *)v46 + 6) == 2)
        {
          if ((*((_WORD *)v46 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v46, v45);
        }
        else
        {
          *((_DWORD *)v46 + 6) -= 2;
        }
      }
      v47 = v51;
      v51 = 0;
      if (v47)
      {
        if (*((_DWORD *)v47 + 6) == 2)
        {
          if ((*((_WORD *)v47 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v47, v45);
        }
        else
        {
          *((_DWORD *)v47 + 6) -= 2;
        }
      }
    }
    v48 = v61;
    v61 = 0;
    if (v48)
    {
      if (*(_DWORD *)(v48 + 24) == 2)
      {
        if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v48, v45);
      }
      else
      {
        *(_DWORD *)(v48 + 24) -= 2;
      }
    }
    v49 = v57;
    v57 = 0;
    if (v49)
    {
      if (*(_DWORD *)(v49 + 24) == 2)
      {
        if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v49, v45);
      }
      else
      {
        *(_DWORD *)(v49 + 24) -= 2;
      }
    }
    return (void *)v6;
  }
  __break(1u);
  return result;
}

unint64_t WebCore::boundsForRects(WebCore *this, const WebCore::LayoutRect *a2, const WebCore::LayoutRect *a3, const WebCore::SimpleRange *a4)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  unsigned int v21;
  int64_t v22;
  uint64_t v23;
  int v24;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  WTF *v36;
  int v37;
  unsigned int v38;

  v6 = *(_DWORD *)this;
  v5 = *((_DWORD *)this + 1);
  v7 = *((_QWORD *)this + 1);
  v8 = *((_DWORD *)a2 + 3);
  if (*((int *)a2 + 2) < 1 || v8 < 1)
  {
    v12 = *((_DWORD *)this + 1);
  }
  else if ((int)v7 < 1 || SHIDWORD(v7) <= 0)
  {
    v6 = *(_DWORD *)a2;
    v12 = *((_DWORD *)a2 + 1);
  }
  else
  {
    if (*(_DWORD *)a2 >= v6)
      v11 = *(_DWORD *)this;
    else
      v11 = *(_DWORD *)a2;
    if (*((_DWORD *)a2 + 1) >= (signed int)v5)
      v12 = *((_DWORD *)this + 1);
    else
      v12 = *((_DWORD *)a2 + 1);
    v6 = v11;
  }
  v13 = __OFADD__(v5, HIDWORD(v7));
  v14 = v5 + HIDWORD(v7);
  LODWORD(v15) = (v5 >> 31) + 0x7FFFFFFF;
  if (!v13)
    LODWORD(v15) = v14;
  v16 = *((_DWORD *)a2 + 1);
  v13 = __OFADD__(v16, v8);
  v17 = v16 + v8;
  LODWORD(v18) = (v16 >> 31) + 0x7FFFFFFF;
  if (v13)
    v17 = v18;
  if ((_DWORD)v15 != v17 && (unint64_t)WebCore::characterCount((int *)a3, 0) >= 2)
  {
    WebCore::RenderObject::absoluteTextRects((uint64_t)a3, 0, (uint64_t)&v36);
    v20 = v36;
    if (v38)
    {
      v21 = 0;
      v18 = 0;
      v22 = 0;
      v15 = (char *)v36 + 8;
      v23 = 16 * v38;
      do
      {
        v24 = *((_DWORD *)v15 + 1);
        if (*(int *)v15 >= 1 && v24 >= 1)
        {
          if ((int)v22 < 1 || v22 <= 0)
          {
            v21 = *((_DWORD *)v15 - 2);
            v18 = *((unsigned int *)v15 - 1);
            v22 = *(_QWORD *)v15;
          }
          else
          {
            v26 = *((_DWORD *)v15 - 2);
            v27 = *((_DWORD *)v15 - 1);
            v28 = v21 + v22;
            if (v26 < (int)v21)
              v21 = *((_DWORD *)v15 - 2);
            v29 = v18 + HIDWORD(v22);
            if (v27 >= (int)v18)
              v18 = v18;
            else
              v18 = v27;
            v30 = v26 + *(_DWORD *)v15;
            if (v28 > v30)
              v30 = v28;
            v31 = v27 + v24;
            if (v29 > v31)
              v31 = v29;
            v22 = (v30 - v21) | ((unint64_t)(v31 - v18) << 32);
          }
        }
        v15 += 16;
        v23 -= 16;
      }
      while (v23);
      v32 = v21 | (unint64_t)(v18 << 32);
      if (!v36)
        goto LABEL_45;
    }
    else
    {
      v22 = 0;
      v32 = 0;
      if (!v36)
        goto LABEL_45;
    }
    v36 = 0;
    v37 = 0;
    WTF::fastFree(v20, v19);
LABEL_45:
    if ((int)v22 >= 1)
    {
      v15 = (char *)HIDWORD(v22);
      if (SHIDWORD(v22) >= 1)
      {
        v33 = (_DWORD)v32 << 6;
        if ((int)v32 < -33554432)
          v33 = 0x80000000;
        if ((int)v32 <= 0x1FFFFFF)
          v6 = v33;
        else
          v6 = 0x7FFFFFFF;
        v34 = HIDWORD(v32) << 6;
        if (SHIDWORD(v32) < -33554432)
          v34 = 0x80000000;
        if (SHIDWORD(v32) <= 0x1FFFFFF)
          v12 = v34;
        else
          v12 = 0x7FFFFFFF;
        LODWORD(v18) = 0;
        LODWORD(v15) = 0;
        if (!(HIDWORD(v22) >> 25))
          LODWORD(v15) = 0;
      }
    }
  }
  return (v6 / 64 + ((int)(v6 - (v15 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v12 / 64 + ((int)(v12 - (v18 & 0xFFFFFFC0) + 32) >> 6)) << 32);
}

_DWORD *WebCore::AccessibilityObject::clickPoint(WebCore::AccessibilityObject *this)
{
  uint64_t v1;
  _DWORD *result;
  unint64_t v4;
  WebCore::Node *v5;
  void *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  WebCore::Node *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  char v17;
  int v18;
  int v19;
  const WebCore::VisiblePosition *v20;
  const WebCore::VisiblePosition *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  BOOL v38;
  signed int v39;
  unint64_t v40;
  int v41;
  int v42;
  WebCore::Node *v43;
  void *v44;
  uint64_t v45;
  WebCore::Node *v46;
  void *v47;
  uint64_t v48;
  WebCore::Node *v49;
  int v50;
  WebCore::Node *v51;
  char v52;
  uint64_t v53;
  _BYTE v54[24];
  WebCore::Node *v55;
  int v56;
  char v57;
  WebCore::Node *v58;
  WebCore::Node *v59;
  int v60;
  char v61;
  char v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  int v67;
  char v68;
  WebCore::Node *v69;
  int v70;
  char v71;
  char v72;

  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 45
    && *(_DWORD *)((*(uint64_t (**)(WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)this + 1896))(this, 1)+ 12) == 1)
  {
    result = (_DWORD *)(*(uint64_t (**)(WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
    if (result[3])
      return (_DWORD *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)result + 1576))(**(_QWORD **)result);
    __break(0xC471u);
    goto LABEL_131;
  }
  if (!(*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 104))(this))
  {
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 138
      && ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 808))(this) & 1) != 0)
    {
      WebCore::AccessibilityObject::selection(this, (uint64_t)&v49);
      v18 = v54[17];
      v19 = v54[16];
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v53, (uint64_t)&v55);
      LOBYTE(v58) = 1;
      if (v18 != 2 && !v19)
      {
        v43 = v55;
        if (v55)
        {
          *((_DWORD *)v55 + 6) += 2;
          v69 = v43;
          v70 = v56;
          v71 = v57;
          v72 = 0;
          if (!WebCore::inSameLine((WebCore *)&v55, (const WebCore::VisiblePosition *)&v69, v20))
            LOBYTE(v58) = 0;
          v45 = (uint64_t)v69;
          v69 = 0;
          if (v45)
          {
            if (*(_DWORD *)(v45 + 24) == 2)
            {
              if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v45, v44);
            }
            else
            {
              *(_DWORD *)(v45 + 24) -= 2;
            }
          }
        }
      }
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v54, (uint64_t)&v59);
      v62 = 1;
      if (v18 == 2 || !v19)
      {
        v46 = v59;
        if (v59)
        {
          *((_DWORD *)v59 + 6) += 2;
          v69 = v46;
          v70 = v60;
          v71 = v61;
          v72 = 0;
          if (!WebCore::inSameLine((WebCore *)&v59, (const WebCore::VisiblePosition *)&v69, v21))
            v62 = 0;
          v48 = (uint64_t)v69;
          v69 = 0;
          if (v48)
          {
            if (*(_DWORD *)(v48 + 24) == 2)
            {
              if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v48, v47);
            }
            else
            {
              *(_DWORD *)(v48 + 24) -= 2;
            }
          }
        }
      }
      v22 = (*(uint64_t (**)(WebCore::AccessibilityObject *, WebCore::Node **))(*(_QWORD *)this + 3128))(this, &v55);
      if ((v23 & 0x80000000) == 0)
        v24 = v23;
      else
        v24 = v23 + 1;
      v25 = (v22 + (v24 >> 1));
      v26 = HIDWORD(v23);
      if ((v23 & 0x8000000000000000) != 0)
        LODWORD(v26) = HIDWORD(v23) + 1;
      v27 = (HIDWORD(v22) + ((int)v26 >> 1));
      v28 = v59;
      v59 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28, (void *)v23);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
      v1 = v25 | (v27 << 32);
      v29 = v55;
      v55 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29, (void *)v23);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
      }
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v49);
      return (_DWORD *)v1;
    }
LABEL_89:
    v35 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1512))(this);
    if ((v36 & 0x80000000) == 0)
      v37 = v36;
    else
      v37 = v36 + 1;
    v38 = __OFADD__((_DWORD)v35, v37 >> 1);
    v39 = v35 + (v37 >> 1);
    if (v38)
      v39 = (v35 >> 31) + 0x7FFFFFFF;
    v40 = HIDWORD(v36);
    if ((v36 & 0x8000000000000000) != 0)
      LODWORD(v40) = HIDWORD(v36) + 1;
    v38 = __OFADD__(HIDWORD(v35), (int)v40 >> 1);
    v41 = HIDWORD(v35) + ((int)v40 >> 1);
    v42 = (HIDWORD(v35) >> 31) + 0x7FFFFFFF;
    if (!v38)
      v42 = v41;
    return (_DWORD *)((((int)(v39 - (HIDWORD(v35) & 0xFFFFFFC0) + 32) >> 6) + v39 / 64) | ((unint64_t)(((int)(v42 - (HIDWORD(v35) & 0xFFFFFFC0) + 32) >> 6) + v42 / 64) << 32));
  }
  (*(void (**)(WebCore::Node **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)this + 1960))(&v49, this);
  if (!v52)
    goto LABEL_80;
  v5 = v49;
  *((_DWORD *)v49 + 6) += 2;
  v55 = v5;
  v56 = v50;
  v57 = 0;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v55, (uint64_t)&v69);
  v72 = 1;
  if (*((_DWORD *)v5 + 6) == 2)
  {
    if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v5, v6);
  }
  else
  {
    *((_DWORD *)v5 + 6) -= 2;
  }
  result = WebCore::VisiblePosition::next((unsigned __int8 *)&v69, 0, 0, (uint64_t)&v63);
  if (!v52)
    goto LABEL_131;
  v1 = v63;
  if (v63)
  {
    *(_DWORD *)(v63 + 24) += 2;
    v66 = v1;
    v67 = v64;
    v68 = v65;
    WebCore::makeBoundaryPoint(&v66, (uint64_t)&v55);
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1, (void *)v4);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  else
  {
    v66 = 0;
    v67 = v64;
    v68 = v65;
    WebCore::makeBoundaryPoint(&v66, (uint64_t)&v55);
  }
  if (!(_BYTE)v58)
    goto LABEL_71;
  v7 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v49, (uint64_t)&v55);
  v1 = 0;
  if (v7 != 129 && (char)v7 <= 0)
  {
    v8 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v55, (uint64_t)&v51);
    v1 = v8 != 129 && (char)v8 < 1;
  }
  if (!(_BYTE)v58)
    goto LABEL_70;
  v10 = v55;
  v55 = 0;
  if (!v10)
    goto LABEL_70;
  if (*((_DWORD *)v10 + 6) != 2)
  {
    *((_DWORD *)v10 + 6) -= 2;
    if ((v1 & 1) != 0)
      goto LABEL_26;
LABEL_71:
    v17 = 0;
    goto LABEL_72;
  }
  if ((*((_WORD *)v10 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v10, (void *)v4);
    if ((v1 & 1) == 0)
      goto LABEL_71;
  }
  else
  {
LABEL_70:
    if (!(_DWORD)v1)
      goto LABEL_71;
  }
LABEL_26:
  result = WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v69, (uint64_t)&v63, (uint64_t)&v55);
  if ((_BYTE)v60)
  {
    v11 = WebCore::AccessibilityObject::boundsForRange(this, (const WebCore::SimpleRange *)&v55);
    if ((v4 & 0x80000000) == 0)
      v12 = v4;
    else
      v12 = v4 + 1;
    v13 = (v11 + (v12 >> 1));
    v14 = HIDWORD(v4);
    if ((v4 & 0x8000000000000000) != 0)
      LODWORD(v14) = HIDWORD(v4) + 1;
    v1 = v13 | ((unint64_t)(HIDWORD(v11) + ((int)v14 >> 1)) << 32);
    if ((_BYTE)v60)
    {
      v15 = v58;
      v58 = 0;
      if (v15)
      {
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v15, (void *)v4);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
      v16 = v55;
      v55 = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 2)
        {
          if ((*((_WORD *)v16 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v16, (void *)v4);
        }
        else
        {
          *((_DWORD *)v16 + 6) -= 2;
        }
      }
    }
    v17 = 1;
LABEL_72:
    v30 = v63;
    v63 = 0;
    if (v30)
    {
      if (*(_DWORD *)(v30 + 24) == 2)
      {
        if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v30, (void *)v4);
      }
      else
      {
        *(_DWORD *)(v30 + 24) -= 2;
      }
    }
    v31 = (uint64_t)v69;
    v69 = 0;
    if (v31)
    {
      if (*(_DWORD *)(v31 + 24) == 2)
      {
        if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v31, (void *)v4);
      }
      else
      {
        *(_DWORD *)(v31 + 24) -= 2;
      }
    }
    if ((v17 & 1) != 0)
    {
      v32 = 0;
      goto LABEL_81;
    }
LABEL_80:
    v32 = 1;
LABEL_81:
    if (v52)
    {
      v33 = v51;
      v51 = 0;
      if (v33)
      {
        if (*((_DWORD *)v33 + 6) == 2)
        {
          if ((*((_WORD *)v33 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v33, (void *)v4);
        }
        else
        {
          *((_DWORD *)v33 + 6) -= 2;
        }
      }
      v34 = v49;
      v49 = 0;
      if (v34)
      {
        if (*((_DWORD *)v34 + 6) == 2)
        {
          if ((*((_WORD *)v34 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v34, (void *)v4);
        }
        else
        {
          *((_DWORD *)v34 + 6) -= 2;
        }
      }
    }
    if (!v32)
      return (_DWORD *)v1;
    goto LABEL_89;
  }
LABEL_131:
  __break(1u);
  return result;
}

unint64_t WebCore::AccessibilityObject::boundingBoxForQuads(unint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  float *v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v28;
  float v29;
  float v31;
  float v32;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  int v44;
  float v45;
  int v46;
  float v47;
  int v48;
  float v49;
  float v50;
  unint64_t v51;
  void (**v52)(WebCore::RenderThemeIOS *__hidden);
  float v53;
  float v54;
  float v55;
  float v56;
  double v57;
  int v58;
  double v59;
  int v60;
  float v61;
  float v62;
  float v63;
  float v64;

  if (result)
  {
    v3 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v3)
    {
      v4 = result;
      v5 = *(float **)a2;
      v6 = *(_QWORD *)a2 + 32 * v3;
      v7 = 0.0;
      v8 = 0.0;
      v9 = 0.0;
      v10 = 0.0;
      do
      {
        v12 = v5[4];
        v11 = v5[5];
        v14 = v5[6];
        v13 = v5[7];
        if (v14 >= v12)
          v15 = v5[4];
        else
          v15 = v5[6];
        v17 = *v5;
        v16 = v5[1];
        v19 = v5[2];
        v18 = v5[3];
        if (v19 >= *v5)
          v20 = *v5;
        else
          v20 = v5[2];
        if (v15 >= v20)
          v15 = v20;
        v21 = fabsf(v15);
        v22 = v21 != INFINITY && v21 <= 2147500000.0;
        v23 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
        if (v22)
          v23 = v15;
        if (v13 >= v11)
          v24 = v5[5];
        else
          v24 = v5[7];
        if (v18 >= v16)
          v25 = v5[1];
        else
          v25 = v5[3];
        if (v24 >= v25)
          v24 = v25;
        v26 = fabsf(v24);
        if (v26 == INFINITY || v26 > 2147500000.0)
          v24 = (float)((SLODWORD(v24) >> 31) ^ 0x7FFFFFFF);
        if (v17 < v19)
          v17 = v5[2];
        if (v12 < v14)
          v12 = v5[6];
        if (v17 >= v12)
          v28 = v17;
        else
          v28 = v12;
        v29 = fabsf(v28);
        if (v29 == INFINITY || v29 > 2147500000.0)
          v28 = (float)((SLODWORD(v28) >> 31) ^ 0x7FFFFFFF);
        if (v16 >= v18)
          v31 = v5[1];
        else
          v31 = v5[3];
        if (v11 < v13)
          v11 = v5[7];
        if (v31 < v11)
          v31 = v11;
        v32 = fabsf(v31);
        if (v32 == INFINITY || v32 > 2147500000.0)
          v31 = (float)((SLODWORD(v31) >> 31) ^ 0x7FFFFFFF);
        v34 = floorf(v23);
        v35 = (float)(int)v34;
        if (v34 <= -2147500000.0)
          v35 = -2147500000.0;
        if (v34 >= 2147500000.0)
          v35 = 2147500000.0;
        v36 = floorf(v24);
        v37 = (float)(int)v36;
        if (v36 <= -2147500000.0)
          v37 = -2147500000.0;
        if (v36 < 2147500000.0)
          v38 = v37;
        else
          v38 = 2147500000.0;
        v39 = ceilf(v23 + (float)(v28 - v23));
        v40 = 2147500000.0;
        if (v39 < 2147500000.0)
        {
          v40 = -2147500000.0;
          if (v39 > -2147500000.0)
            v40 = (float)(int)v39;
        }
        v41 = ceilf(v24 + (float)(v31 - v24));
        v42 = 2147500000.0;
        if (v41 < 2147500000.0)
        {
          v42 = -2147500000.0;
          if (v41 > -2147500000.0)
            v42 = (float)(int)v41;
        }
        if (v35 >= 2147500000.0)
        {
          v43 = 0x7FFFFFFF;
        }
        else if (v35 <= -2147500000.0)
        {
          v43 = 0x80000000;
        }
        else
        {
          v43 = (int)v35;
        }
        if (v38 >= 2147500000.0)
        {
          v44 = 0x7FFFFFFF;
        }
        else if (v38 <= -2147500000.0)
        {
          v44 = 0x80000000;
        }
        else
        {
          v44 = (int)v38;
        }
        v45 = v40 - v35;
        if (v45 >= 2147500000.0)
        {
          v46 = 0x7FFFFFFF;
        }
        else if (v45 <= -2147500000.0)
        {
          v46 = 0x80000000;
        }
        else
        {
          v46 = (int)v45;
        }
        v47 = v42 - v38;
        if (v47 >= 2147500000.0)
        {
          v48 = 0x7FFFFFFF;
        }
        else if (v47 <= -2147500000.0)
        {
          v48 = 0x80000000;
        }
        else
        {
          v48 = (int)v47;
        }
        v49 = (float)v46;
        v61 = (float)v43;
        v62 = (float)v44;
        v50 = (float)v48;
        v63 = (float)v46;
        v64 = (float)v48;
        if (v46 < 1 || v48 < 1)
          goto LABEL_102;
        v51 = v4;
        if ((*(_BYTE *)(v4 + 45) & 2) != 0)
          v51 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8);
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 88) + 32) + 148) & 0x1FC000) != 0)
        {
          {
            v52 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
          }
          else
          {
            WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
            unk_1ECE88AD0 = 0u;
            unk_1ECE88AC0 = 0u;
            WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
            v52 = &off_1E335BC30;
          }
          ((void (*)(uint64_t *, unint64_t, float *))v52[21])(&WebCore::RenderTheme::singleton(void)::theme, v4, &v61);
          v49 = v63;
          v50 = v64;
        }
        if (v49 <= 0.0 || v50 <= 0.0)
        {
LABEL_102:
          v49 = v7;
          v50 = v8;
          v53 = v10;
        }
        else
        {
          v53 = v61;
          if (v7 <= 0.0 || v8 <= 0.0)
          {
            v9 = v62;
          }
          else
          {
            v54 = v49 + v61;
            if (v61 >= v10)
              v53 = v10;
            v55 = v8 + v9;
            if (v62 < v9)
              v9 = v62;
            if ((float)(v7 + v10) >= v54)
              v54 = v7 + v10;
            v56 = v50 + v62;
            if (v55 >= v56)
              v56 = v55;
            v49 = v54 - v53;
            v50 = v56 - v9;
          }
        }
        v5 += 8;
        v7 = v49;
        v8 = v50;
        v10 = v53;
      }
      while (v5 != (float *)v6);
    }
    else
    {
      v9 = 0.0;
      v53 = 0.0;
    }
    v57 = v53 * 64.0;
    if (v57 >= 2147483650.0)
    {
      v58 = 0x7FFFFFFF;
    }
    else if (v57 <= -2147483650.0)
    {
      v58 = 0x80000000;
    }
    else
    {
      v58 = (int)v57;
    }
    v59 = v9 * 64.0;
    if (v59 >= 2147483650.0)
    {
      v60 = 0x7FFFFFFF;
    }
    else if (v59 <= -2147483650.0)
    {
      v60 = 0x80000000;
    }
    else
    {
      v60 = (int)v59;
    }
    return (v58 / 64 + ((int)(v58 - (v2 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v60 / 64 + ((int)(v60 - (v2 & 0xFFFFFFC0) + 32) >> 6)) << 32);
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::press(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int8x8_t v9;
  void *v10;
  WebCore::Node *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Node *v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v24;
  WebCore::Node *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  int32x2_t v47[4];
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  __int16 v56;
  WebCore::Node *v57;
  uint64_t v58;
  int32x2_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  __int128 v65;
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1504))(this);
  if (!v2)
    return 0;
  v3 = v2;
  *(_DWORD *)(v2 + 24) += 2;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 528);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      WebCore::FrameLoader::resetMultipleFormSubmissionProtection(*(WebCore::FrameLoader **)(v5 + 280));
  }
  v6 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  v7 = v6;
  if (v6)
  {
    *(_DWORD *)(v6 + 24) += 2;
    v8 = WebCore::AccessibilityObject::clickPoint(this);
    v9 = (int8x8_t)vcgt_s32((int32x2_t)v8, (int32x2_t)0xFE000000FE000000);
    v47[2] = (int32x2_t)0x4000000040;
    v47[0] = (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v9 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v8), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v8, 6uLL)), v9));
    v47[1] = (int32x2_t)(v47[0].i32[0] & 0xFFFFFFC0 | ((unint64_t)((v47[0].i32[1] & 0xFFFFFFC0) >> 6) << 38));
    v47[3] = (int32x2_t)vmul_f32(vcvt_f32_s32(v47[0]), (float32x2_t)vdup_n_s32(0x3C800000u));
    v48 = (float)(int)(v47[0].i32[0] & 0xFFFFFFC0) * 0.015625;
    v49 = (float)(int)(v47[0].i32[1] & 0xFFFFFFC0) * 0.015625;
    v50 = v48 + 1.0;
    v51 = v49;
    v52 = v48 + 1.0;
    v53 = v49 + 1.0;
    v54 = v48;
    v55 = v49 + 1.0;
    v56 = 256;
    v57 = 0;
    v58 = 0;
    v64 = 0;
    v59 = v47[0];
    v60 = 0;
    v63 = 0;
    v61 = 0;
    v62 = 0;
    v45 = 16387;
    v46 = 1;
    WebCore::Document::hitTest(v7, &v45, (WebCore::HitTestingTransformState *)v47, (uint64_t)v47);
    v11 = v57;
    if (!v57)
    {
      v15 = 0;
LABEL_18:
      WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v47, v10);
      goto LABEL_19;
    }
    v12 = *((_DWORD *)v57 + 6) + 2;
    *((_DWORD *)v57 + 6) = v12;
    v13 = **((_QWORD **)v11 + 5);
    if (v13)
    {
      if ((*(_WORD *)(v13 + 28) & 0x80) != 0)
      {
        v14 = *(_QWORD *)(v13 + 200);
        if (v14)
        {
          v15 = *(WebCore::Node **)(v14 + 8);
          if (v15)
            goto LABEL_15;
        }
      }
    }
    v15 = v11;
    if ((*((_WORD *)v11 + 14) & 8) != 0)
      goto LABEL_15;
    v15 = (WebCore::Node *)*((_QWORD *)v11 + 4);
    if (!v15)
      goto LABEL_16;
    if ((*((_WORD *)v15 + 14) & 8) != 0)
    {
LABEL_15:
      *((_DWORD *)v15 + 6) += 2;
      v12 = *((_DWORD *)v11 + 6);
    }
    else
    {
      v15 = 0;
    }
LABEL_16:
    v16 = v12 - 2;
    if (v16)
    {
      *((_DWORD *)v11 + 6) = v16;
    }
    else if ((*((_WORD *)v11 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v11, v10);
    }
    goto LABEL_18;
  }
  v15 = 0;
LABEL_19:
  v17 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 832))(this);
  if (!v17)
  {
LABEL_33:
    v19 = v3;
    v3 = 0;
    goto LABEL_34;
  }
  v19 = v17;
  v20 = *(_DWORD *)(v17 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 2;
  v21 = *(_WORD *)(v17 + 28);
  if ((v21 & 0xF000) == 0x9000)
  {
    if (**(_QWORD **)(v3 + 40) == v17 && (*(_WORD *)(v3 + 28) & 0xF000) != 0x9000 && (*(_BYTE *)(v3 + 22) & 8) != 0)
      goto LABEL_31;
  }
  else if ((v21 & 4) != 0
         && *(_QWORD *)(v17 + 80)
         && ((*(unsigned __int8 *)(v3 + 22) ^ *(unsigned __int8 *)(v17 + 22)) & 8) == 0)
  {
    v22 = v3;
    do
      v22 = *(_QWORD *)(v22 + 32);
    while (v22 != v17 && v22 != 0);
    if (v22)
    {
LABEL_31:
      if (v20)
      {
        *(_DWORD *)(v17 + 24) = v20;
      }
      else if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v17, v18);
      }
      goto LABEL_33;
    }
  }
LABEL_34:
  if (v15)
  {
    v24 = *(_WORD *)(v19 + 28);
    if ((v24 & 0xF000) == 0x9000)
    {
      if (**((_QWORD **)v15 + 5) == v19 && (*((_WORD *)v15 + 14) & 0xF000) != 0x9000 && (*((_BYTE *)v15 + 22) & 8) != 0)
      {
LABEL_46:
        if (*(_DWORD *)(v19 + 24) == 2)
        {
          if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v19, v18);
        }
        else
        {
          *(_DWORD *)(v19 + 24) -= 2;
        }
        v19 = (uint64_t)v15;
        v15 = 0;
      }
    }
    else if ((v24 & 4) != 0
           && *(_QWORD *)(v19 + 80)
           && ((*((unsigned __int8 *)v15 + 22) ^ *(unsigned __int8 *)(v19 + 22)) & 8) == 0)
    {
      v25 = v15;
      do
        v25 = (WebCore::Node *)*((_QWORD *)v25 + 4);
      while (v25 != (WebCore::Node *)v19 && v25 != 0);
      if (v25)
        goto LABEL_46;
    }
  }
  LOBYTE(v65) = 0;
  v66 = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator((uint64_t *)v47, 257, v7, 1, 0, &v65, 1);
  if (!(*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2520))(this)
    || !(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this))
  {
    goto LABEL_67;
  }
  v27 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (*(_BYTE *)(v27 + 3362) || *(_BYTE *)(v27 + 3405))
  {
    while (1)
    {
      v41 = *(_QWORD *)(v27 + 528);
      if (!v41)
        break;
      v42 = *(_QWORD *)(v41 + 8);
      if (!v42)
        break;
      v43 = *(_QWORD *)(v42 + 120);
      if (!v43)
        break;
      v44 = *(_QWORD *)(v43 + 8);
      if (!v44)
        break;
      v27 = *(_QWORD *)(*(_QWORD *)(v44 + 40) + 8);
    }
  }
  else
  {
    v28 = *(_QWORD *)(v27 + 528);
    if (v28)
    {
      v29 = *(_QWORD *)(v28 + 8);
      if (v29)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v29 + 128) + 8);
        if (v30 && *(_BYTE *)(v30 + 144) == 0)
        {
          v32 = *(_QWORD *)(v30 + 296);
          if (v32)
            v27 = v32;
        }
      }
    }
  }
  v33 = *(_QWORD *)(v27 + 528);
  if (v33
    && (v34 = *(_QWORD *)(v33 + 8)) != 0
    && (v35 = *(_QWORD *)(*(_QWORD *)(v34 + 128) + 8), !*(_BYTE *)(v35 + 144))
    && (v36 = *(_QWORD *)(v35 + 640),
        v37 = WebCore::AccessibilityObject::clickPoint(this),
        (WebCore::EventHandler::dispatchSimulatedTouchEvent(v36, (uint64_t)v37) & 1) != 0))
  {
    v38 = 1;
  }
  else
  {
LABEL_67:
    v38 = 1;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 592))(v19, 1) & 1) == 0)
      v38 = WebCore::simulateClick((WebCore *)v19, 0, 1, 1, 1);
  }
  WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v47);
  if (*(_DWORD *)(v19 + 24) == 2)
  {
    if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v19, v39);
  }
  else
  {
    *(_DWORD *)(v19 + 24) -= 2;
  }
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v39);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, v39);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v39);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return v38;
}

uint64_t WebCore::AccessibilityObject::mainFrame(WebCore::AccessibilityObject *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (result)
  {
    v3 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
    if (*(_BYTE *)(v3 + 3362) || *(_BYTE *)(v3 + 3405))
    {
      while (1)
      {
        v12 = *(_QWORD *)(v3 + 528);
        if (!v12)
          break;
        v13 = *(_QWORD *)(v12 + 8);
        if (!v13)
          break;
        v14 = *(_QWORD *)(v13 + 120);
        if (!v14)
          break;
        v15 = *(_QWORD *)(v14 + 8);
        if (!v15)
          break;
        v3 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8);
      }
    }
    else
    {
      v4 = *(_QWORD *)(v3 + 528);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8);
          if (v6 && *(_BYTE *)(v6 + 144) == 0)
          {
            v8 = *(_QWORD *)(v6 + 296);
            if (v8)
              v3 = v8;
          }
        }
      }
    }
    v9 = *(_QWORD *)(v3 + 528);
    if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v10 + 128) + 8);
      if (*(_BYTE *)(v11 + 144))
        return 0;
      else
        return v11;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *WebCore::AccessibilityObject::language@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v5;
  uint64_t v6;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::langAttr);
  v5 = (_DWORD *)*result;
  if (*result && v5[1])
    goto LABEL_10;
  v6 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1232))(this);
  if (v6)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1736))(v6);
  result = (_QWORD *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (result)
  {
    v5 = (_DWORD *)result[214];
    if (!v5)
      goto LABEL_11;
    goto LABEL_10;
  }
  v5 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
LABEL_10:
    *v5 += 2;
LABEL_11:
  *a2 = v5;
  return result;
}

_QWORD *WebCore::AccessibilityObject::getAttribute(WebCore::AccessibilityObject *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::QualifiedName::QualifiedNameImpl *v10;
  _QWORD *v11;
  WebCore::QualifiedName::QualifiedNameImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::AccessibilityObject *v20;
  const WebCore::IntPoint *v21;
  _QWORD v22[2];
  _QWORD *v23;

  v3 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 832))(this);
  if (!v3)
    return (_QWORD *)MEMORY[0x1E0CBF2F8];
  v5 = v3;
  *(_DWORD *)(v3 + 24) += 2;
  v6 = *(_QWORD *)(v3 + 104);
  if (!v6)
    goto LABEL_13;
  v7 = *(_DWORD *)(v6 + 4);
  if ((v7 & 1) == 0)
  {
    v8 = v6 + 32;
    LODWORD(v9) = v7 >> 5;
    if ((_DWORD)v9)
      goto LABEL_5;
LABEL_13:
    v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_14;
  }
  v8 = *(_QWORD *)(v6 + 40);
  LODWORD(v9) = *(_DWORD *)(v6 + 52);
  if (!(_DWORD)v9)
    goto LABEL_13;
LABEL_5:
  v10 = *a2;
  v9 = v9;
  v11 = (_QWORD *)(v8 + 8);
  while (1)
  {
    v12 = (WebCore::QualifiedName::QualifiedNameImpl *)*(v11 - 1);
    if (v12 == v10 || *((_QWORD *)v12 + 3) == *((_QWORD *)v10 + 3) && *((_QWORD *)v12 + 4) == *((_QWORD *)v10 + 4))
      break;
    v11 += 2;
    if (!--v9)
    {
      v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_14:
  if (*v11)
    goto LABEL_26;
  v13 = *(_QWORD *)(v3 + 72);
  if ((v13 & 0x3000000000000000) != 0x2000000000000000
    && ((v13 & 0x3000000000000000) != 0x3000000000000000 || (*(_WORD *)(v3 + 28) & 0x100) != 0))
  {
    goto LABEL_25;
  }
  v14 = v13 & 0xFFFFFFFFFFFFLL;
  if (!v14)
    goto LABEL_25;
  v15 = *(_QWORD *)(v14 + 104);
  if (!v15)
    goto LABEL_25;
  v16 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v15 + 8), a2);
  v17 = *(_QWORD *)(v15 + 8);
  if (v17)
    v17 += 32 * *(unsigned int *)(v17 - 4);
  if (v17 == v16)
  {
LABEL_25:
    v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_26:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    return v11;
  }
  v22[0] = v5;
  v22[1] = v5;
  v18 = *(unsigned int *)(v16 + 24);
  if ((_DWORD)v18 != -1)
  {
    v23 = v22;
    v11 = (_QWORD *)((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore24CustomElementDefaultARIA17valueForAttributeERKNS8_7ElementERKNS8_13QualifiedNameEE3__0JZNKS9_17valueForAttributeESC_SF_E3__1ZNKS9_17valueForAttributeESC_SF_E3__2EEEEEJRKNS0_6__implIJNS6_10AtomStringENS6_7WeakPtrISA_NS8_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISO_EEEENS6_6VectorISR_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v18])(&v23, v16 + 8);
    goto LABEL_26;
  }
  v20 = (WebCore::AccessibilityObject *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_QWORD *)WebCore::AccessibilityObject::visiblePositionForPoint(v20, v21);
}

void WebCore::AccessibilityObject::visiblePositionForPoint(WebCore::AccessibilityObject *this@<X0>, int32x2_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v13;
  int8x8_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  char v26;
  int32x2_t v27[4];
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  int32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  if (!(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this))
    goto LABEL_23;
  v6 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
  {
    while (1)
    {
      v20 = *(_QWORD *)(v6 + 528);
      if (!v20)
        break;
      v21 = *(_QWORD *)(v20 + 8);
      if (!v21)
        break;
      v22 = *(_QWORD *)(v21 + 120);
      if (!v22)
        break;
      v23 = *(_QWORD *)(v22 + 8);
      if (!v23)
        break;
      v6 = *(_QWORD *)(*(_QWORD *)(v23 + 40) + 8);
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9)
          v10 = *(_BYTE *)(v9 + 144) == 0;
        else
          v10 = 0;
        if (v10)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
  }
  v12 = *(_QWORD *)(v6 + 1944);
  if (v12)
  {
    v13 = (float32x2_t)vdup_n_s32(0x3C800000u);
    while (1)
    {
      v14 = (int8x8_t)vcgt_s32(*a2, (int32x2_t)0xFE000000FE000000);
      v27[0] = (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v14 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a2, 6uLL)), v14));
      v27[1] = (int32x2_t)(v27[0].i32[0] & 0xFFFFFFC0 | ((unint64_t)((v27[0].i32[1] & 0xFFFFFFC0) >> 6) << 38));
      v27[2] = (int32x2_t)0x4000000040;
      v27[3] = (int32x2_t)vmul_f32(vcvt_f32_s32(v27[0]), v13);
      v28 = (float)(int)(v27[0].i32[0] & 0xFFFFFFC0) * 0.015625;
      v29 = (float)(int)(v27[0].i32[1] & 0xFFFFFFC0) * 0.015625;
      v30 = v28 + 1.0;
      v31 = v29;
      v32 = v28 + 1.0;
      v33 = v29 + 1.0;
      v34 = v28;
      v35 = v29 + 1.0;
      v36 = 256;
      v37 = 0;
      v38 = 0;
      v39 = v27[0];
      v44 = 0;
      v40 = 0;
      v41 = 0;
      v43 = 0;
      v42 = 0;
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40) + 8);
      v25 = 3;
      v26 = 1;
      WebCore::Document::hitTest(v15, &v25, (WebCore::HitTestingTransformState *)v27, (uint64_t)v27);
      v17 = v37;
      if (!v37)
        break;
      v18 = *(_QWORD *)(v37 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v18)
        break;
      v45 = v40;
      if ((*(_BYTE *)(v18 + 52) & 7) != 3
        || (*(_BYTE *)(v18 + 53) & 4) == 0
        || (v24 = *(_QWORD **)(v18 + 232)) == 0
        || !(*(unsigned int (**)(_QWORD *))(*v24 + 72))(v24)
        || (v19 = *(_QWORD *)(v24[41] + 296)) == 0)
      {
        WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v27, v16);
        (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL)
                                                                    + 352))(*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL, &v45, 1, 0);
        return;
      }
      v12 = *(_QWORD *)(v19 + 1944);
      WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v27, v16);
    }
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 16) = 1;
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v27, v16);
  }
  else
  {
LABEL_23:
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 16) = 1;
  }
}

void WebCore::AccessibilityObject::visiblePositionRangeForUnorderedPositions(VisiblePosition *a1@<X1>, VisiblePosition *a2@<X2>, uint64_t a3@<X8>)
{
  Node *var0;
  VisiblePosition *v6;
  Node *v7;
  void *v9;
  uint64_t v10;
  void *v11;
  char v12;
  Node *v13;
  unsigned int var1;
  char v15;
  BOOL v16;
  Node *v17;
  unsigned int v18;
  char v19;
  BOOL v20;
  int v21;
  _BYTE v22[104];

  var0 = a1->var0.var0.var0;
  if (!a1->var0.var0.var0)
    goto LABEL_15;
  v6 = a2;
  v7 = a2->var0.var0.var0;
  if (!a2->var0.var0.var0)
    goto LABEL_15;
  *((_DWORD *)var0 + 6) += 2;
  *((_DWORD *)v7 + 6) += 2;
  v10 = WebCore::commonTreeScope((WebCore *)var0, (WebCore::Node *)v7, (WebCore::Node *)a2);
  if (*((_DWORD *)v7 + 6) == 2)
  {
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
  if (*((_DWORD *)var0 + 6) == 2)
  {
    if ((*((_WORD *)var0 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)var0, v9);
  }
  else
  {
    *((_DWORD *)var0 + 6) -= 2;
  }
  if (!v10)
  {
LABEL_15:
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_BYTE *)(a3 + 16) = 1;
    *(_BYTE *)(a3 + 40) = 1;
    return;
  }
  if ((!WebCore::operator==((uint64_t *)a1, (uint64_t *)v6) || v6->var1)
    && (WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v22, (const WebCore::VisiblePosition *)a1, (const WebCore::VisiblePosition *)v6, 0), v12 = v22[98], WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v22), (v12 & 1) != 0))
  {
    v13 = a1->var0.var0.var0;
    if (a1->var0.var0.var0)
      *((_DWORD *)v13 + 6) += 2;
    var1 = a1->var0.var1;
    v15 = *((_BYTE *)&a1->var0 + 12);
    v16 = a1->var1;
    v17 = v6->var0.var0.var0;
    if (!v6->var0.var0.var0)
      goto LABEL_20;
  }
  else
  {
    v13 = v6->var0.var0.var0;
    if (v6->var0.var0.var0)
      *((_DWORD *)v13 + 6) += 2;
    var1 = v6->var0.var1;
    v15 = *((_BYTE *)&v6->var0 + 12);
    v16 = v6->var1;
    v17 = a1->var0.var0.var0;
    if (!a1->var0.var0.var0)
    {
      v6 = a1;
      goto LABEL_20;
    }
    v6 = a1;
  }
  *((_DWORD *)v17 + 6) += 2;
LABEL_20:
  v18 = v6->var0.var1;
  v19 = *((_BYTE *)&v6->var0 + 12);
  v20 = v6->var1;
  if (v13)
    *((_DWORD *)v13 + 6) += 2;
  *(_QWORD *)a3 = v13;
  *(_DWORD *)(a3 + 8) = var1;
  *(_BYTE *)(a3 + 12) = v15;
  *(_BYTE *)(a3 + 16) = v16;
  if (v17)
  {
    v21 = *((_DWORD *)v17 + 6);
    *((_DWORD *)v17 + 6) = v21 + 2;
    *(_QWORD *)(a3 + 24) = v17;
    *(_DWORD *)(a3 + 32) = v18;
    *(_BYTE *)(a3 + 36) = v19;
    *(_BYTE *)(a3 + 40) = v20;
    if (v21)
    {
      *((_DWORD *)v17 + 6) = v21;
    }
    else if ((*((_WORD *)v17 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v17, v11);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 32) = v18;
    *(_BYTE *)(a3 + 36) = v19;
    *(_BYTE *)(a3 + 40) = v20;
  }
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v11);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
}

void WebCore::AccessibilityObject::leftLineVisiblePositionRange(VisiblePosition *a1@<X1>, uint64_t a2@<X8>)
{
  void *v4;
  WebCore::Node *v5;
  Node *var0;
  void *v7;
  Node *v8;
  Node *v9;
  Node *v10;
  void *v11;
  Node *v12;
  WebCore::Node *v13;
  void *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  void *v18;
  Node *v19;
  Node *v20;
  void *v21;
  WebCore::Node *v22;
  void *v23;
  WebCore::Node *v24;
  unsigned int v25;
  char v26;
  VisiblePosition v27;
  WebCore::Node *v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::Node *v31;
  unsigned int v32;
  char v33;
  BOOL v34;
  WebCore::Node *v35[2];

  if (!a1->var0.var0.var0)
    goto LABEL_22;
  WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)a1, (uint64_t)&v27);
  if (WebCore::Position::atStartOfTree((WebCore::Position *)&v27))
  {
    v5 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v27, (uint64_t)&v31);
    v5 = v31;
    v28 = v31;
    LODWORD(v29) = v32;
    BYTE4(v29) = v33;
  }
  LOBYTE(v30) = 1;
  var0 = v27.var0.var0.var0;
  v27.var0.var0.var0 = 0;
  if (var0)
  {
    if (*((_DWORD *)var0 + 6) == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)var0, v4);
        v5 = v28;
      }
    }
    else
    {
      *((_DWORD *)var0 + 6) -= 2;
    }
  }
  if (!v5)
  {
LABEL_22:
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_BYTE *)(a2 + 16) = 1;
    *(_BYTE *)(a2 + 40) = 1;
    return;
  }
  WebCore::startOfLine((uint64_t)&v27, (WebCore::VisiblePosition *)&v28, (WebCore::Node *)1, 0);
  if (!v27.var0.var0.var0)
  {
    while (1)
    {
      if (v28)
        v10 = (Node *)WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v10 = 0;
      if (!v10)
        goto LABEL_16;
      WebCore::previousVisuallyDistinctCandidate(&v28, (uint64_t)v35);
      if (WebCore::Position::atStartOfTree((WebCore::Position *)v35))
      {
        v15 = 0;
        v26 = 0;
        v25 = 0;
      }
      else
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v35, (uint64_t)&v31);
        v15 = v31;
        v25 = v32;
        v26 = v33;
      }
      v16 = v35[0];
      v35[0] = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 2)
        {
          if ((*((_WORD *)v16 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v16, v14);
        }
        else
        {
          *((_DWORD *)v16 + 6) -= 2;
        }
      }
      v17 = v28;
      v28 = v15;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17, v14);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
      LODWORD(v29) = v25;
      BYTE4(v29) = v26;
      LOBYTE(v30) = 1;
      WebCore::startOfLine((uint64_t)&v31, (WebCore::VisiblePosition *)&v28, (WebCore::Node *)1, 0);
      v19 = (Node *)v31;
      v31 = 0;
      v20 = v27.var0.var0.var0;
      v27.var0.var0.var0 = v19;
      if (v20)
      {
        if (*((_DWORD *)v20 + 6) == 2)
        {
          if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v20, v18);
            v22 = v31;
            v27.var0.var1 = v32;
            *((_BYTE *)&v27.var0 + 12) = v33;
            v27.var1 = v34;
            v31 = 0;
            if (v22)
            {
              if (*((_DWORD *)v22 + 6) == 2)
              {
                if ((*((_WORD *)v22 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v22, v21);
              }
              else
              {
                *((_DWORD *)v22 + 6) -= 2;
              }
            }
            goto LABEL_41;
          }
        }
        else
        {
          *((_DWORD *)v20 + 6) -= 2;
        }
      }
      v27.var0.var1 = v32;
      *((_BYTE *)&v27.var0 + 12) = v33;
      v27.var1 = v34;
LABEL_41:
      v10 = v27.var0.var0.var0;
      if (v27.var0.var0.var0)
        goto LABEL_15;
    }
  }
  WebCore::updateAXLineStartForVisiblePosition((WebCore *)&v31, &v27);
  v8 = (Node *)v31;
  v31 = 0;
  v9 = v27.var0.var0.var0;
  v27.var0.var0.var0 = v8;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
        v24 = v31;
        v27.var0.var1 = v32;
        *((_BYTE *)&v27.var0 + 12) = v33;
        v27.var1 = v34;
        v31 = 0;
        if (v24)
        {
          if (*((_DWORD *)v24 + 6) == 2)
          {
            if ((*((_WORD *)v24 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v24, v23);
          }
          else
          {
            *((_DWORD *)v24 + 6) -= 2;
          }
        }
        goto LABEL_14;
      }
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  v27.var0.var1 = v32;
  *((_BYTE *)&v27.var0 + 12) = v33;
  v27.var1 = v34;
LABEL_14:
  v10 = v27.var0.var0.var0;
  if (v27.var0.var0.var0)
LABEL_15:
    *((_DWORD *)v10 + 6) += 2;
LABEL_16:
  *(_QWORD *)a2 = v10;
  *(_DWORD *)(a2 + 8) = v27.var0.var1;
  *(_BYTE *)(a2 + 12) = *((_BYTE *)&v27.var0 + 12);
  *(_BYTE *)(a2 + 16) = v27.var1;
  WebCore::endOfLine((uint64_t *)(a2 + 24), (uint64_t)&v28, 1, 0);
  v12 = v27.var0.var0.var0;
  v27.var0.var0.var0 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v11);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  v13 = v28;
  v28 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v11);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
}

uint64_t WebCore::updateAXLineStartForVisiblePosition(WebCore *this, const VisiblePosition *a2)
{
  Node *var0;
  WTF *v4;
  WTF *v5;
  void *v6;
  char v7;
  int v8;
  uint64_t result;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  char v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  char v31;

  var0 = a2->var0.var0.var0;
  if (a2->var0.var0.var0)
    *((_DWORD *)var0 + 6) += 2;
  v4 = 0;
  *(_QWORD *)this = var0;
  *((_DWORD *)this + 2) = a2->var0.var1;
  *((_BYTE *)this + 12) = *((_BYTE *)&a2->var0 + 12);
  *((_BYTE *)this + 16) = a2->var1;
  while (1)
  {
    v5 = v4;
    WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)this, (uint64_t)&v29);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)&v29))
    {
      v4 = 0;
      v7 = 0;
      v8 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v29, (uint64_t)&v19);
      v4 = v19;
      v8 = v20;
      v7 = v21;
    }
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    if (v5)
    {
      if (*((_DWORD *)v5 + 6) == 2)
      {
        if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef(v5, v6);
      }
      else
      {
        *((_DWORD *)v5 + 6) -= 2;
      }
    }
    if (!v4)
      return result;
    v10 = *((_DWORD *)v4 + 6);
    v11 = v10 + 2;
    *((_DWORD *)v4 + 6) = v10 + 2;
    if ((*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x40) == 0)
        goto LABEL_28;
      if ((v7 & 8) == 0 && ((v7 & 7) == 4 || (v7 & 7) == 2))
      {
        v12 = v10 + 4;
        *((_DWORD *)v4 + 6) = v12;
        v13 = *((_WORD *)v4 + 14);
        if ((v13 & 1) != 0)
        {
          v18 = *((_QWORD *)v4 + 10);
          v15 = v18 ? *(_DWORD *)(v18 + 4) : 0;
        }
        else if ((v13 & 4) != 0 && (v14 = *((_QWORD *)v4 + 10)) != 0)
        {
          v15 = 0;
          do
          {
            ++v15;
            v14 = *(_QWORD *)(v14 + 56);
          }
          while (v14);
        }
        else
        {
          result = (*(uint64_t (**)(WTF *))(*(_QWORD *)v4 + 208))(v4);
          v15 = result ^ 1;
          v12 = *((_DWORD *)v4 + 6);
          v11 = v12 - 2;
        }
        if (v11)
        {
          *((_DWORD *)v4 + 6) = v11;
        }
        else if ((*((_WORD *)v4 + 15) & 0x400) != 0)
        {
          v11 = v12;
        }
        else
        {
          result = (uint64_t)WebCore::Node::removedLastRef(v4, v6);
          v11 = *((_DWORD *)v4 + 6);
        }
      }
      else
      {
        v15 = v8;
      }
      if (v15)
      {
LABEL_28:
        *((_DWORD *)v4 + 6) = v11 + 2;
        v29 = (uint64_t)v4;
        v30 = v8;
        v31 = v7;
        WebCore::RenderedPosition::RenderedPosition((uint64_t)&v19, (WebCore::Position *)&v29, (const WebCore::Node *)1);
        v16 = v29;
        v29 = 0;
        if (v16)
        {
          if (*(_DWORD *)(v16 + 24) == 2)
          {
            if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v16, v6);
          }
          else
          {
            *(_DWORD *)(v16 + 24) -= 2;
          }
        }
        if (v19)
          v15 = *((_QWORD *)v19 + 1) == 0;
        else
          v15 = 1;
        if (v28)
        {
          if (v27 != -1)
            ((void (*)(uint64_t *, uint64_t *))off_1E3385000[v27])(&v29, &v26);
          v27 = -1;
        }
        if (v25)
        {
          if (v24 != -1)
            ((void (*)(uint64_t *, uint64_t *))off_1E3385000[v24])(&v29, &v23);
          v24 = -1;
        }
        if (v22 != -1)
          ((void (*)(uint64_t *, int *))off_1E3385000[v22])(&v29, &v20);
        v22 = -1;
        result = (uint64_t)v19;
        v19 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = WTF::fastFree((WTF *)result, v6);
          else
            --*(_DWORD *)result;
        }
        v11 = *((_DWORD *)v4 + 6);
        if (v15)
        {
          *((_DWORD *)v4 + 6) = v11 + 2;
          result = *(_QWORD *)this;
          *(_QWORD *)this = v4;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          *((_DWORD *)this + 2) = v8;
          *((_BYTE *)this + 12) = v7;
          LOBYTE(v15) = 1;
          *((_BYTE *)this + 16) = 1;
          v11 = *((_DWORD *)v4 + 6);
        }
      }
    }
    else
    {
      LOBYTE(v15) = 0;
    }
    v17 = v11 - 2;
    if (v17)
    {
      *((_DWORD *)v4 + 6) = v17;
    }
    else if ((*((_WORD *)v4 + 15) & 0x400) == 0)
    {
      result = (uint64_t)WebCore::Node::removedLastRef(v4, v6);
    }
    if ((v15 & 1) == 0)
    {
      if (*((_DWORD *)v4 + 6) == 2)
      {
        if ((*((_WORD *)v4 + 15) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef(v4, v6);
      }
      else
      {
        *((_DWORD *)v4 + 6) -= 2;
      }
      return result;
    }
  }
}

void WebCore::AccessibilityObject::rightLineVisiblePositionRange(VisiblePosition *a1@<X1>, uint64_t a2@<X8>)
{
  void *v5;
  Node *v6;
  Node *var0;
  Node *v8;
  void *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  void *v12;
  WebCore::Node *v13;
  _BOOL4 v14;
  Node *v15;
  int v16;
  WebCore::Node *v17;
  void *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  void *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  void *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  unsigned int v29;
  char v30;
  BOOL v31;
  WebCore::Node *v32;
  unsigned int v33;
  char v34;
  BOOL v35;
  VisiblePosition v36;
  WebCore::Node *v37;
  unsigned int v38;
  char v39;
  BOOL v40;

  if (!a1->var0.var0.var0 || (WebCore::VisiblePosition::next((unsigned __int8 *)a1, 0, 0, (uint64_t)&v37), !v37))
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_BYTE *)(a2 + 16) = 1;
    *(_BYTE *)(a2 + 40) = 1;
    return;
  }
  WebCore::startOfLine((uint64_t)&v36, (WebCore::VisiblePosition *)&v37, (WebCore::Node *)1, 0);
  if (v36.var0.var0.var0)
  {
    WebCore::updateAXLineStartForVisiblePosition((WebCore *)&v32, &v36);
    v6 = (Node *)v32;
    v32 = 0;
    var0 = v36.var0.var0.var0;
    v36.var0.var0.var0 = v6;
    if (!var0)
    {
LABEL_7:
      v36.var0.var1 = v33;
      *((_BYTE *)&v36.var0 + 12) = v34;
      v36.var1 = v35;
      goto LABEL_15;
    }
    if (*((_DWORD *)var0 + 6) != 2)
    {
      *((_DWORD *)var0 + 6) -= 2;
      goto LABEL_7;
    }
    if ((*((_WORD *)var0 + 15) & 0x400) != 0)
      goto LABEL_7;
    WebCore::Node::removedLastRef((WebCore::Node *)var0, v5);
    v27 = v32;
    v36.var0.var1 = v33;
    *((_BYTE *)&v36.var0 + 12) = v34;
    v36.var1 = v35;
    goto LABEL_65;
  }
  v8 = a1->var0.var0.var0;
  if (a1->var0.var0.var0)
    *((_DWORD *)v8 + 6) += 2;
  v36.var0.var0.var0 = v8;
  v36.var0.var1 = a1->var0.var1;
  *((_BYTE *)&v36.var0 + 12) = *((_BYTE *)&a1->var0 + 12);
  v36.var1 = a1->var1;
  WebCore::VisiblePosition::next((unsigned __int8 *)&v37, 0, 0, (uint64_t)&v32);
  v10 = v32;
  v32 = 0;
  v11 = v37;
  v37 = v10;
  if (!v11)
  {
LABEL_14:
    v38 = v33;
    v39 = v34;
    v40 = v35;
    goto LABEL_15;
  }
  if (*((_DWORD *)v11 + 6) != 2)
  {
    *((_DWORD *)v11 + 6) -= 2;
    goto LABEL_14;
  }
  if ((*((_WORD *)v11 + 15) & 0x400) != 0)
    goto LABEL_14;
  WebCore::Node::removedLastRef(v11, v9);
  v27 = v32;
  v38 = v33;
  v39 = v34;
  v40 = v35;
LABEL_65:
  v32 = 0;
  if (v27)
  {
    if (*((_DWORD *)v27 + 6) == 2)
    {
      if ((*((_WORD *)v27 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v27, v26);
    }
    else
    {
      *((_DWORD *)v27 + 6) -= 2;
    }
  }
LABEL_15:
  WebCore::endOfLine((uint64_t *)&v32, (uint64_t)&v37, 1, 0);
  v13 = v32;
  if (!v32)
  {
    while (1)
    {
      if (v37)
        v13 = (WebCore::Node *)WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v13 = 0;
      v14 = v13 == 0;
      if (!v13)
        goto LABEL_17;
      WebCore::VisiblePosition::next((unsigned __int8 *)&v37, 0, 0, (uint64_t)&v28);
      v19 = v28;
      v28 = 0;
      v20 = v37;
      v37 = v19;
      if (!v20)
        goto LABEL_36;
      if (*((_DWORD *)v20 + 6) != 2)
        break;
      if ((*((_WORD *)v20 + 15) & 0x400) != 0)
        goto LABEL_36;
      WebCore::Node::removedLastRef(v20, v18);
      v24 = v28;
      v38 = v29;
      v39 = v30;
      v40 = v31;
      v28 = 0;
      if (v24)
      {
        if (*((_DWORD *)v24 + 6) == 2)
        {
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v24, v23);
        }
        else
        {
          *((_DWORD *)v24 + 6) -= 2;
        }
      }
LABEL_37:
      WebCore::endOfLine((uint64_t *)&v28, (uint64_t)&v37, 1, 0);
      v21 = v28;
      v28 = 0;
      v22 = v32;
      v32 = v21;
      if (v22)
      {
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v22, v12);
            v25 = v28;
            v33 = v29;
            v34 = v30;
            v35 = v31;
            v28 = 0;
            if (v25)
            {
              if (*((_DWORD *)v25 + 6) == 2)
              {
                if ((*((_WORD *)v25 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v25, v12);
              }
              else
              {
                *((_DWORD *)v25 + 6) -= 2;
              }
            }
            goto LABEL_41;
          }
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
      v33 = v29;
      v34 = v30;
      v35 = v31;
LABEL_41:
      v13 = v32;
      if (v32)
        goto LABEL_17;
    }
    *((_DWORD *)v20 + 6) -= 2;
LABEL_36:
    v38 = v29;
    v39 = v30;
    v40 = v31;
    goto LABEL_37;
  }
  v14 = 0;
LABEL_17:
  v15 = v36.var0.var0.var0;
  if (v36.var0.var0.var0)
    *((_DWORD *)v36.var0.var0.var0 + 6) += 2;
  *(_QWORD *)a2 = v15;
  *(_DWORD *)(a2 + 8) = v36.var0.var1;
  *(_BYTE *)(a2 + 12) = *((_BYTE *)&v36.var0 + 12);
  *(_BYTE *)(a2 + 16) = v36.var1;
  if (v14)
  {
    *(_QWORD *)(a2 + 24) = v13;
    *(_DWORD *)(a2 + 32) = v33;
    *(_BYTE *)(a2 + 36) = v34;
    *(_BYTE *)(a2 + 40) = v35;
  }
  else
  {
    v16 = *((_DWORD *)v13 + 6);
    *((_DWORD *)v13 + 6) = v16 + 2;
    *(_QWORD *)(a2 + 24) = v13;
    *(_DWORD *)(a2 + 32) = v33;
    *(_BYTE *)(a2 + 36) = v34;
    *(_BYTE *)(a2 + 40) = v35;
    v32 = 0;
    if (v16)
    {
      *((_DWORD *)v13 + 6) = v16;
    }
    else if ((*((_WORD *)v13 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v13, v12);
      v15 = v36.var0.var0.var0;
    }
  }
  v36.var0.var0.var0 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v12);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  v17 = v37;
  v37 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, v12);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
}

unsigned int *WebCore::AccessibilityObject::styleRangeForPosition@<X0>(VisiblePosition *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int *result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WebCore::Node *v20;
  Node *var0;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::Node *v44;
  int v45;
  char v46;

  result = (unsigned int *)a1->var0.var0.var0;
  if (a1->var0.var0.var0)
  {
    v6 = result[6];
    result[6] = v6 + 2;
    v7 = *((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      result[6] = v6;
    }
    else if ((*((_WORD *)result + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)result, a1);
    }
    v8 = v7;
    if ((*(_BYTE *)(v7 + 45) & 2) != 0)
    {
      v42 = *(_QWORD *)(v7 + 32);
      if (v42)
        v8 = *(_QWORD *)(v42 + 8);
      else
        v8 = 0;
    }
    v9 = *(unsigned int *)(v7 + 40);
    if (v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 44) << 32))
    {
      v10 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 44) << 32)) + 8);
      if (v10)
      {
        do
        {
          v12 = v10;
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10);
        }
        while (v10);
        while (1)
        {
LABEL_11:
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 112))(v12))
          {
            v13 = v7;
          }
          else
          {
            v14 = v12;
            if ((*(_BYTE *)(v12 + 45) & 2) != 0)
            {
              v14 = *(_QWORD *)(v12 + 32);
              if (v14)
                v14 = *(_QWORD *)(v14 + 8);
            }
            v13 = v12;
            if (v14 != v8)
              goto LABEL_27;
          }
          v15 = *(unsigned int *)(v12 + 40);
          if (v15 | ((unint64_t)*(unsigned __int8 *)(v12 + 44) << 32)
            && (v16 = *(_QWORD *)((v15 | ((unint64_t)*(unsigned __int8 *)(v12 + 44) << 32)) + 8)) != 0)
          {
            do
            {
              v12 = v16;
              v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 120))(v16);
            }
            while (v16);
          }
          else
          {
            v17 = *(_QWORD *)(v12 + 32);
            if (!v17)
            {
              v7 = v13;
              goto LABEL_27;
            }
            v12 = *(_QWORD *)(v17 + 8);
          }
          v7 = v13;
          if (!v12)
            goto LABEL_27;
        }
      }
    }
    v11 = *(_QWORD *)(v7 + 32);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        goto LABEL_11;
    }
LABEL_27:
    if ((*(_BYTE *)(v7 + 45) & 1) != 0)
      v18 = 0;
    else
      v18 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
    WebCore::firstPositionInOrBeforeNode(v18, (WebCore::Node *)a1, (uint64_t)&v44);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v44, a2);
    *(_BYTE *)(a2 + 16) = 1;
    v20 = v44;
    v44 = 0;
    if (v20)
    {
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v20, v19);
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
    }
    var0 = a1->var0.var0.var0;
    if (a1->var0.var0.var0)
    {
      v22 = *((_DWORD *)var0 + 6);
      *((_DWORD *)var0 + 6) = v22 + 2;
    }
    else
    {
      v22 = MEMORY[0x18] - 2;
    }
    v23 = *((_QWORD *)var0 + 8) & 0xFFFFFFFFFFFFLL;
    if (v22)
    {
      *((_DWORD *)var0 + 6) = v22;
    }
    else if ((*((_WORD *)var0 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)var0, v19);
    }
    v24 = v23;
    if ((*(_BYTE *)(v23 + 45) & 2) != 0)
    {
      v43 = *(_QWORD *)(v23 + 32);
      if (v43)
        v24 = *(_QWORD *)(v43 + 8);
      else
        v24 = 0;
    }
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 112))(v23);
    if (v25
      || (v38 = *(unsigned int *)(v23 + 47), v38 | ((unint64_t)*(unsigned __int8 *)(v23 + 51) << 32))
      && (v25 = *(_QWORD *)((v38 | ((unint64_t)*(unsigned __int8 *)(v23 + 51) << 32)) + 8)) != 0)
    {
      while (1)
      {
LABEL_38:
        v26 = v25;
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 112))(v25))
        {
          v27 = v23;
        }
        else
        {
          v28 = v26;
          if ((*(_BYTE *)(v26 + 45) & 2) != 0)
          {
            v28 = *(_QWORD *)(v26 + 32);
            if (v28)
              v28 = *(_QWORD *)(v28 + 8);
          }
          v27 = v26;
          if (v28 != v24)
            goto LABEL_55;
        }
        v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 112))(v26);
        v23 = v27;
        if (!v25)
        {
          v29 = *(unsigned int *)(v26 + 47);
          if (!(v29 | ((unint64_t)*(unsigned __int8 *)(v26 + 51) << 32)))
            break;
          v25 = *(_QWORD *)((v29 | ((unint64_t)*(unsigned __int8 *)(v26 + 51) << 32)) + 8);
          v23 = v27;
          if (!v25)
            break;
        }
      }
      for (i = *(_QWORD *)(v26 + 32); i; i = *(_QWORD *)(v31 + 32))
      {
        v31 = *(_QWORD *)(i + 8);
        if (!v31)
          break;
        v32 = *(unsigned int *)(v31 + 47);
        if (v32 | ((unint64_t)*(unsigned __int8 *)(v31 + 51) << 32))
        {
          v25 = *(_QWORD *)((v32 | ((unint64_t)*(unsigned __int8 *)(v31 + 51) << 32)) + 8);
          if (v25)
          {
            v23 = v27;
            goto LABEL_38;
          }
        }
      }
      v23 = v27;
    }
    else
    {
      for (j = *(_QWORD *)(v23 + 32); j; j = *(_QWORD *)(v40 + 32))
      {
        v40 = *(_QWORD *)(j + 8);
        if (!v40)
          break;
        v41 = *(unsigned int *)(v40 + 47);
        if (v41 | ((unint64_t)*(unsigned __int8 *)(v40 + 51) << 32))
        {
          v25 = *(_QWORD *)((v41 | ((unint64_t)*(unsigned __int8 *)(v40 + 51) << 32)) + 8);
          if (v25)
            goto LABEL_38;
        }
      }
    }
LABEL_55:
    if ((*(_BYTE *)(v23 + 45) & 1) != 0 || (v33 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8)) == 0)
    {
      v33 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
    }
    else
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 208))(v33) & 1) != 0)
      {
        v34 = *(_WORD *)(v33 + 28);
        *(_DWORD *)(v33 + 24) += 2;
        if ((v34 & 1) != 0)
        {
          v36 = *(_QWORD *)(v33 + 80);
          if (v36)
            LODWORD(v36) = *(_DWORD *)(v36 + 4);
          v44 = (WebCore::Node *)v33;
          v45 = v36;
          v35 = v46 & 0xF0;
        }
        else
        {
          v44 = (WebCore::Node *)v33;
          v45 = 0;
          v35 = v46 & 0xF0 | 4;
        }
      }
      else
      {
        *(_DWORD *)(v33 + 24) += 2;
        v44 = (WebCore::Node *)v33;
        v45 = 0;
        v35 = v46 & 0xF0 | 2;
      }
      v46 = v35;
    }
    result = (unsigned int *)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v44, a2 + 24);
    *(_BYTE *)(a2 + 40) = 1;
    if (v33)
    {
      if (*(_DWORD *)(v33 + 24) == 2)
      {
        if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v33, v37);
      }
      else
      {
        *(_DWORD *)(v33 + 24) -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 40) = 1;
  }
  return result;
}

unsigned int *WebCore::AccessibilityObject::rangeForCharacterRange@<X0>(const WebCore::AXCoreObject *a1@<X0>, unsigned int *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *v6;
  unsigned int *result;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  void *v11;
  Node *var0;
  CharacterOffset v13;
  CharacterOffset v14;

  (*(void (**)(CharacterOffset *__return_ptr))(*(_QWORD *)a1 + 1400))(&v14);
  result = (unsigned int *)v14.var0.var0;
  if (v14.var0.var0)
  {
    v8 = *((_DWORD *)v14.var0.var0 + 1);
    v14.var0.var0 = 0;
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
    else
      *result -= 2;
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_QWORD *)a2 + 1);
  if (v9 + *(_QWORD *)a2 <= (unint64_t)v8
    && (*(_QWORD *)a2 || v8 || v9)
    && (result = (unsigned int *)(*(uint64_t (**)(const WebCore::AXCoreObject *))(*(_QWORD *)a1 + 1488))(a1)) != 0)
  {
    v10 = result;
    WebCore::AXObjectCache::characterOffsetForIndex(result, a1, (WebCore::Node *)*a2, (WebCore::Node **)&v14);
    WebCore::AXObjectCache::characterOffsetForIndex(v10, a1, (WebCore::Node *)(a2[2] + *a2), (WebCore::Node **)&v13);
    WebCore::AXObjectCache::rangeForUnorderedCharacterOffsets(&v14, &v13, (uint64_t)a3);
    var0 = v13.var0.var0;
    v13.var0.var0 = 0;
    if (var0)
    {
      if (*((_DWORD *)var0 + 6) == 2)
      {
        if ((*((_WORD *)var0 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)var0, v11);
      }
      else
      {
        *((_DWORD *)var0 + 6) -= 2;
      }
    }
    result = (unsigned int *)v14.var0.var0;
    v14.var0.var0 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
  return result;
}

unsigned int *WebCore::AccessibilityObject::lineRangeForPosition@<X0>(WebCore::AccessibilityObject *this@<X0>, VisiblePosition *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  unsigned int *result;
  WebCore::Node *v7;
  int v8;
  WebCore::Node *v9;
  int v10;
  char v11;
  char v12;
  WebCore::Node *v13;
  int v14;
  char v15;
  char v16;

  WebCore::startOfLine((uint64_t)&v13, (WebCore::VisiblePosition *)a2, (WebCore::Node *)1, 0);
  (*(void (**)(WebCore::Node **__return_ptr, WebCore::AccessibilityObject *, WebCore::Node **))(*(_QWORD *)this + 2088))(&v9, this, &v13);
  result = (unsigned int *)v13;
  if (v13)
    *((_DWORD *)v13 + 6) += 2;
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = v14;
  *(_BYTE *)(a3 + 12) = v15;
  *(_BYTE *)(a3 + 16) = v16;
  v7 = v9;
  if (v9)
  {
    v8 = *((_DWORD *)v9 + 6);
    *((_DWORD *)v9 + 6) = v8 + 2;
    *(_QWORD *)(a3 + 24) = v7;
    *(_DWORD *)(a3 + 32) = v10;
    *(_BYTE *)(a3 + 36) = v11;
    *(_BYTE *)(a3 + 40) = v12;
    v9 = 0;
    if (v8)
    {
      *((_DWORD *)v7 + 6) = v8;
    }
    else if ((*((_WORD *)v7 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v7, v5);
      result = (unsigned int *)v13;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 32) = v10;
    *(_BYTE *)(a3 + 36) = v11;
    *(_BYTE *)(a3 + 40) = v12;
  }
  v13 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::replacedNodeNeedsCharacter(uint64_t this, WebCore::Node *a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  WebCore::Document *v12;
  WebCore::AXObjectCache **v13;
  WebCore::AXObjectCache *v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::AXObjectCache *v20;
  uint64_t v21;

  if (this)
  {
    v2 = this;
    this = WebCore::isRendererReplacedElement(*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL);
    if ((_DWORD)this)
    {
      if ((*(_WORD *)(v2 + 28) & 2) != 0)
      {
        return 0;
      }
      else
      {
        v3 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
        if ((v3 & 1) == 0)
          return 1;
        v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8)
                                   + 40)
                       + 8);
        if (*(_BYTE *)(v4 + 3362) || *(_BYTE *)(v4 + 3405))
        {
          for (i = *(_QWORD *)(v4 + 528); i; i = *(_QWORD *)(v4 + 528))
          {
            v17 = *(_QWORD *)(i + 8);
            if (!v17)
              break;
            v18 = *(_QWORD *)(v17 + 120);
            if (!v18)
              break;
            v19 = *(_QWORD *)(v18 + 8);
            if (!v19)
              break;
            v4 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8);
          }
        }
        else
        {
          v5 = *(_QWORD *)(v4 + 528);
          if (v5)
          {
            v6 = *(_QWORD *)(v5 + 8);
            if (v6)
            {
              v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
              if (v7 && *(_BYTE *)(v7 + 144) == 0)
              {
                v9 = *(_QWORD *)(v7 + 296);
                if (v9)
                  v4 = v9;
              }
            }
          }
        }
        *(_DWORD *)(v4 + 24) += 2;
        v21 = v4;
        if (*(_QWORD *)(v4 + 1944))
          v10 = *(_BYTE *)(v4 + 3405) == 0;
        else
          v10 = 0;
        if (!v10)
        {
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v21);
          return 1;
        }
        v11 = *(_QWORD *)(v4 + 1488);
        if (v11)
        {
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v21);
        }
        else
        {
          v12 = (WebCore::Document *)v4;
          v13 = (WebCore::AXObjectCache **)(v4 + 1488);
          v14 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
          v20 = WebCore::AXObjectCache::AXObjectCache(v14, v12);
          std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v13, &v20);
          std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v20);
          WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
          v11 = *((_QWORD *)v12 + 186);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v21);
          if (!v11)
            return 1;
        }
        v15 = WebCore::AXObjectCache::getOrCreate(v11, v2, 0);
        if (!v15)
          return 1;
        return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 856))(v15) ^ 1;
      }
    }
  }
  return this;
}

unsigned int *WebCore::AccessibilityObject::modelElementChildren@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *result;
  void *v4;
  uint64_t v5;
  __int16 v6;
  int v7;

  result = (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (result
    && (v5 = (uint64_t)result, v6 = *((_WORD *)result + 14), (v6 & 0x10) != 0)
    && (v6 & 0x110) != 0x110
    && *(_QWORD *)(*((_QWORD *)result + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::modelTag + 24))
  {
    v7 = result[6];
    result[6] = v7 + 2;
    result = (unsigned int *)*((_QWORD *)result + 31);
    if (result)
    {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 232))(result);
      v7 = *(_DWORD *)(v5 + 24) - 2;
      if (*(_DWORD *)(v5 + 24) != 2)
      {
LABEL_7:
        *(_DWORD *)(v5 + 24) = v7;
        return result;
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      if (v7)
        goto LABEL_7;
    }
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::listMarkerTextForNodeAndPosition(uint64_t a1, WebCore::VisiblePosition *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  WebCore::Node *v12;
  _QWORD v13[2];
  char v14;
  WebCore::Node *v15[2];
  char v16;

  if (!a1)
    return 0;
  while (1)
  {
    v2 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
    if (v2)
    {
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) != 0
        && *(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 19)
      {
        break;
      }
    }
    a1 = *(_QWORD *)(a1 + 32);
    if (!a1)
      return 0;
  }
  v5 = *(_QWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0xF8);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 200);
  if (!v7)
    return 0;
  v8 = *(unsigned int *)(v7 + 4);
  if (!(_DWORD)v8)
    return 0;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v8 | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  WebCore::VisiblePosition::canonicalPosition(a2, (uint64_t)v15);
  v16 = 1;
  v13[0] = v9;
  v13[1] = v10;
  v14 = 1;
  v3 = WebCore::listMarkerText(v2, (WebCore::VisiblePosition *)v15, (uint64_t)v13);
  v12 = v15[0];
  v15[0] = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, v11);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  return v3;
}

uint64_t WebCore::listMarkerText(uint64_t result, WebCore::VisiblePosition *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  void *v11;
  _BOOL4 v12;
  WebCore::Node *v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  const WebCore::VisiblePosition *v17;
  void *v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  char v22;
  WebCore::Node *v23[2];
  char v24;

  if (result)
  {
    v5 = result;
    if (*(_BYTE *)(a3 + 16))
    {
      if (!*(_DWORD *)(a3 + 8))
        return 0;
    }
    else
    {
      v6 = *(_QWORD *)(result + 248);
      if (v6 && (v6 = *(_QWORD *)(v6 + 8)) != 0)
      {
        v7 = *(_QWORD *)(v6 + 200);
        if (v7)
        {
          v6 = *(_QWORD *)(v7 + 8);
          v8 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v6 = 0;
          v8 = 0x100000000;
        }
        v9 = v8 & 0x100000000;
        v8 = v8;
      }
      else
      {
        v8 = 0;
        v9 = 0x100000000;
      }
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v8 | v9;
      *(_BYTE *)(a3 + 16) = 1;
      if (!(_DWORD)v8)
        return 0;
    }
    if (*(_QWORD *)a2)
      v10 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v10 = 0;
    if (!v10)
      return 0;
    WebCore::startOfLine((uint64_t)v23, a2, (WebCore::Node *)1, 0);
    v12 = WebCore::operator==((uint64_t *)a2, (uint64_t *)v23);
    v13 = v23[0];
    v23[0] = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v13, v11);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
    if (!v12)
      return 0;
    v14 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
    v15 = *(_WORD *)(v14 + 28);
    if ((v15 & 8) != 0)
    {
      *(_DWORD *)(v14 + 24) += 2;
      v20 = v14;
      v21 = 0;
      if ((v15 & 1) != 0)
        v16 = 0;
      else
        v16 = 3;
      v22 = v16;
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v20, (uint64_t)v23);
      v24 = 1;
      v19 = WebCore::inSameLine(a2, (const WebCore::VisiblePosition *)v23, v17);
      result = (uint64_t)v23[0];
      v23[0] = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v18);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v14, v18);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
      if (!v19)
        return 0;
      if (*(_BYTE *)(a3 + 16))
        return *(_QWORD *)a3;
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
    __break(1u);
  }
  return result;
}

void WebCore::AccessibilityObject::stringForRange(const WebCore::SimpleRange *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  WebCore::Node *v18;
  uint64_t v19;
  unsigned int i;
  uint64_t v21;
  uint64_t v22;
  __int32 v23;
  char v24;
  char v25;
  uint64_t v26;
  void *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  WebCore::Document *v39;
  WebCore::AXObjectCache **v40;
  WebCore::AXObjectCache *v41;
  uint64_t v42;
  uint64_t j;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  __int32 v52;
  char v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unsigned int v56;
  char v57;
  int32x2_t v58[12];
  uint64_t v59;
  WebCore::Node *v60;
  int32x2_t v61;
  unsigned __int16 v62[12];
  unsigned __int8 *v63;
  uint64_t v64;
  WebCore::AXObjectCache *v65[2];

  WebCore::TextIterator::TextIterator((uint64_t)v58, a1, 0);
  if (!v59)
  {
    *a2 = 0;
    goto LABEL_97;
  }
  v50 = a2;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 1;
  do
  {
    if ((_DWORD)v64)
    {
      if ((_DWORD)v64 == 1)
      {
        v5 = (v64 & 0xFF00000000) != 0 ? *v63 : *(unsigned __int16 *)v63;
        v13 = v5 > 0x20;
        v14 = (1 << v5) & 0x100003600;
        if (!v13 && v14 != 0)
          goto LABEL_44;
      }
      v17 = WebCore::TextIterator::node(v58);
      v18 = v60;
      if (v60)
      {
        v19 = *((_QWORD *)v60 + 6);
        for (i = 0; ; ++i)
        {
          v21 = v19 & 0xFFFFFFFFFFFFLL;
          if (!v21)
            break;
          v19 = *(_QWORD *)(v21 + 48);
        }
        v61 = vadd_s32(v61, vdup_n_s32(i));
        v60 = 0;
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v18, v16);
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
      v22 = v59;
      v23 = v61.i32[0];
      *(_DWORD *)(v59 + 24) += 6;
      v51 = v22;
      v52 = v23;
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 208))(v22);
      if (v23)
        v25 = 10;
      else
        v25 = 9;
      if ((v24 & 1) != 0)
        v25 = 8;
      v53 = v53 & 0xF0 | v25;
      WebCore::AccessibilityObject::listMarkerTextForNodeAndPosition(v17, (WebCore::VisiblePosition *)&v51);
      if ((v26 & 0xFF00000000) != 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
      v28 = *(_DWORD *)(v22 + 24) - 2;
      if (*(_DWORD *)(v22 + 24) == 2)
      {
        if ((*(_WORD *)(v22 + 30) & 0x400) != 0)
          goto LABEL_51;
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v27);
        v28 = *(_DWORD *)(v22 + 24);
      }
      else
      {
        *(_DWORD *)(v22 + 24) = v28;
      }
      v29 = v28 - 2;
      if (v29)
      {
        *(_DWORD *)(v22 + 24) = v29;
        goto LABEL_42;
      }
LABEL_51:
      if ((*(_WORD *)(v22 + 30) & 0x400) != 0)
        goto LABEL_53;
      WebCore::Node::removedLastRef((WebCore::Node *)v22, v27);
      v29 = *(_DWORD *)(v22 + 24);
LABEL_42:
      v30 = v29 - 2;
      if (v30)
      {
        *(_DWORD *)(v22 + 24) = v30;
LABEL_44:
        WebCore::TextIteratorCopyableText::appendToStringBuilder(v62, (WTF::StringBuilder *)&v54);
        goto LABEL_45;
      }
LABEL_53:
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v27);
      goto LABEL_44;
    }
    v6 = WebCore::TextIterator::node(v58);
    if (v6)
    {
      v8 = v6;
      if (WebCore::isRendererReplacedElement(*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL))
      {
        if ((*(_WORD *)(v8 + 28) & 2) == 0)
        {
          v9 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
          if ((v9 & 1) != 0)
          {
            v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8)
                                        + 40)
                            + 8);
            if (*(_BYTE *)(v31 + 3362) || *(_BYTE *)(v31 + 3405))
            {
              for (j = *(_QWORD *)(v31 + 528); j; j = *(_QWORD *)(v31 + 528))
              {
                v44 = *(_QWORD *)(j + 8);
                if (!v44)
                  break;
                v45 = *(_QWORD *)(v44 + 120);
                if (!v45)
                  break;
                v46 = *(_QWORD *)(v45 + 8);
                if (!v46)
                  break;
                v31 = *(_QWORD *)(*(_QWORD *)(v46 + 40) + 8);
              }
            }
            else
            {
              v32 = *(_QWORD *)(v31 + 528);
              if (v32)
              {
                v33 = *(_QWORD *)(v32 + 8);
                if (v33)
                {
                  v34 = *(_QWORD *)(*(_QWORD *)(v33 + 128) + 8);
                  if (v34 && *(_BYTE *)(v34 + 144) == 0)
                  {
                    v36 = *(_QWORD *)(v34 + 296);
                    if (v36)
                      v31 = v36;
                  }
                }
              }
            }
            *(_DWORD *)(v31 + 24) += 2;
            v51 = v31;
            if (*(_QWORD *)(v31 + 1944))
              v37 = *(_BYTE *)(v31 + 3405) == 0;
            else
              v37 = 0;
            if (v37)
            {
              v38 = *(_QWORD *)(v31 + 1488);
              if (v38)
              {
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v51);
              }
              else
              {
                v39 = (WebCore::Document *)v31;
                v40 = (WebCore::AXObjectCache **)(v31 + 1488);
                v41 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
                v65[0] = WebCore::AXObjectCache::AXObjectCache(v41, v39);
                std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v40, v65);
                std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](v65);
                WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
                v38 = *((_QWORD *)v39 + 186);
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v51);
                if (!v38)
                  goto LABEL_11;
              }
              v42 = WebCore::AXObjectCache::getOrCreate(v38, v8, 0);
              if (v42 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 856))(v42) & 1) != 0)
                goto LABEL_45;
              goto LABEL_11;
            }
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v51);
          }
LABEL_11:
          LOWORD(v51) = -4;
          if (v55
            && ((v10 = v56, v56 < *((_DWORD *)v55 + 1)) ? (v11 = v54 == 0) : (v11 = 0),
                v11 && (*((_BYTE *)v55 + 16) & 4) == 0))
          {
            v12 = *((_QWORD *)v55 + 1);
            ++v56;
            *(_WORD *)(v12 + 2 * v10) = -4;
          }
          else
          {
            WTF::StringBuilder::append();
          }
        }
      }
    }
LABEL_45:
    WebCore::TextIterator::advance((WebCore::TextIterator *)v58, v7);
  }
  while (v59);
  v47 = v54;
  if (v54)
  {
    v48 = v50;
    goto LABEL_90;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v54);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v54);
  v47 = v54;
  v48 = v50;
  if (v54)
LABEL_90:
    *(_DWORD *)v47 += 2;
  *v48 = v47;
  v49 = v55;
  v55 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::destroy(v49, v4);
      v47 = v54;
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v54 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v4);
    else
      *(_DWORD *)v47 -= 2;
  }
LABEL_97:
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v58, v4);
}

unsigned int *WebCore::AccessibilityObject::stringForVisiblePositionRange@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *result;
  void *v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  WebCore::Document *v25;
  WebCore::AXObjectCache **v26;
  WebCore::AXObjectCache *v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  _BYTE v37[24];
  int32x2_t v38[12];
  uint64_t v39;
  unsigned __int16 v40[16];
  int v41;
  _DWORD *v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  _QWORD v46[2];
  uint64_t v47;
  char v48;
  WebCore::AXObjectCache *v49;
  uint64_t v50;

  result = (unsigned int *)WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>(a1, (uint64_t)(a1 + 3), (uint64_t)v46);
  if (v48)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 1;
    WebCore::TextIterator::TextIterator((uint64_t)v38, v46, 0);
    while (v39)
    {
      v6 = v41;
      v7 = WebCore::TextIterator::node(v38);
      v9 = v7;
      if (v6)
      {
        if (v7)
        {
          while (1)
          {
            v10 = *(_QWORD *)(v9 + 64);
            v11 = v10 & 0xFFFFFFFFFFFFLL;
            if ((v10 & 0xFFFFFFFFFFFFLL) != 0
              && (*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) != 0
              && *(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2E) == 19)
            {
              break;
            }
            v9 = *(_QWORD *)(v9 + 32);
            if (!v9)
              goto LABEL_9;
          }
        }
        else
        {
LABEL_9:
          v11 = 0;
        }
        v37[0] = 0;
        v37[16] = 0;
        WebCore::listMarkerText(v11, (WebCore::VisiblePosition *)a1, (uint64_t)v37);
        if ((v12 & 0xFF00000000) != 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
        WebCore::TextIteratorCopyableText::appendToStringBuilder(v40, (WTF::StringBuilder *)&v42);
        goto LABEL_13;
      }
      if (v7
        && WebCore::isRendererReplacedElement(*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL)
        && (*(_WORD *)(v9 + 28) & 2) == 0)
      {
        v13 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
        if ((v13 & 1) == 0)
          goto LABEL_19;
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8)
                                    + 40)
                        + 8);
        if (*(_BYTE *)(v17 + 3362) || *(_BYTE *)(v17 + 3405))
        {
          for (i = *(_QWORD *)(v17 + 528); i; i = *(_QWORD *)(v17 + 528))
          {
            v30 = *(_QWORD *)(i + 8);
            if (!v30)
              break;
            v31 = *(_QWORD *)(v30 + 120);
            if (!v31)
              break;
            v32 = *(_QWORD *)(v31 + 8);
            if (!v32)
              break;
            v17 = *(_QWORD *)(*(_QWORD *)(v32 + 40) + 8);
          }
        }
        else
        {
          v18 = *(_QWORD *)(v17 + 528);
          if (v18)
          {
            v19 = *(_QWORD *)(v18 + 8);
            if (v19)
            {
              v20 = *(_QWORD *)(*(_QWORD *)(v19 + 128) + 8);
              if (v20 && *(_BYTE *)(v20 + 144) == 0)
              {
                v22 = *(_QWORD *)(v20 + 296);
                if (v22)
                  v17 = v22;
              }
            }
          }
        }
        *(_DWORD *)(v17 + 24) += 2;
        v50 = v17;
        if (*(_QWORD *)(v17 + 1944))
          v23 = *(_BYTE *)(v17 + 3405) == 0;
        else
          v23 = 0;
        if (!v23)
        {
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v50);
LABEL_19:
          LOWORD(v50) = -4;
          if (v43
            && ((v14 = v44, v44 < *(_DWORD *)(v43 + 4)) ? (v15 = v42 == 0) : (v15 = 0),
                v15 && (*(_BYTE *)(v43 + 16) & 4) == 0))
          {
            v16 = *(_QWORD *)(v43 + 8);
            ++v44;
            *(_WORD *)(v16 + 2 * v14) = -4;
          }
          else
          {
            WTF::StringBuilder::append();
          }
          goto LABEL_13;
        }
        v24 = *(_QWORD *)(v17 + 1488);
        if (v24)
        {
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v50);
        }
        else
        {
          v25 = (WebCore::Document *)v17;
          v26 = (WebCore::AXObjectCache **)(v17 + 1488);
          v27 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
          v49 = WebCore::AXObjectCache::AXObjectCache(v27, v25);
          std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v26, &v49);
          std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v49);
          WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
          v24 = *((_QWORD *)v25 + 186);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v50);
          if (!v24)
            goto LABEL_19;
        }
        v28 = WebCore::AXObjectCache::getOrCreate(v24, v9, 0);
        if (!v28 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 856))(v28) & 1) == 0)
          goto LABEL_19;
      }
LABEL_13:
      WebCore::TextIterator::advance((WebCore::TextIterator *)v38, v8);
    }
    WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v38, v5);
    v34 = v42;
    if (v42
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v42),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v42),
          (v34 = v42) != 0))
    {
      *v34 += 2;
    }
    *a2 = v34;
    v35 = (WTF::StringImpl *)v43;
    v43 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v33);
      else
        *(_DWORD *)v35 -= 2;
    }
    result = v42;
    v42 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v33);
      else
        *result -= 2;
    }
    if (v48)
    {
      v36 = v47;
      v47 = 0;
      if (v36)
      {
        if (*(_DWORD *)(v36 + 24) == 2)
        {
          if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v36, v33);
        }
        else
        {
          *(_DWORD *)(v36 + 24) -= 2;
        }
      }
      result = (unsigned int *)v46[0];
      v46[0] = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, v33);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void WebCore::AccessibilityObject::nextLineEndPosition(VisiblePosition *a1@<X1>, uint64_t a2@<X8>)
{
  void *v5;
  _DWORD *v6;
  WebCore::Node *v7;
  uint64_t (*v8)();
  void *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  uint64_t v13;
  void *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  int v18;
  char v19;
  char v20;
  WebCore::Node *v21;
  int v22;
  char v23;
  char v24;

  if (!a1->var0.var0.var0 || (WebCore::VisiblePosition::next((unsigned __int8 *)a1, 0, 0, (uint64_t)&v21), !v21))
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 1;
    return;
  }
  WebCore::endOfLine((uint64_t *)a2, (uint64_t)&v21, 1, 0);
  v6 = (_DWORD *)(a2 + 8);
  while (!*(_QWORD *)a2 || WebCore::operator==((uint64_t *)a2, (uint64_t *)a1))
  {
    v7 = v21;
    if (v21)
      v8 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_32;
    WebCore::VisiblePosition::next((unsigned __int8 *)&v21, 0, 0, (uint64_t)&v17);
    v10 = v17;
    v17 = 0;
    v11 = v21;
    v21 = v10;
    if (!v11)
      goto LABEL_13;
    if (*((_DWORD *)v11 + 6) != 2)
    {
      *((_DWORD *)v11 + 6) -= 2;
LABEL_13:
      v22 = v18;
      v23 = v19;
      v24 = v20;
      goto LABEL_14;
    }
    if ((*((_WORD *)v11 + 15) & 0x400) != 0)
      goto LABEL_13;
    WebCore::Node::removedLastRef(v11, v9);
    v15 = v17;
    v22 = v18;
    v23 = v19;
    v24 = v20;
    v17 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v14);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
LABEL_14:
    WebCore::endOfLine((uint64_t *)&v17, (uint64_t)&v21, 1, 0);
    v12 = v17;
    v17 = 0;
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v12;
    if (!v13)
      goto LABEL_17;
    if (*(_DWORD *)(v13 + 24) != 2)
    {
      *(_DWORD *)(v13 + 24) -= 2;
      goto LABEL_17;
    }
    if ((*(_WORD *)(v13 + 30) & 0x400) != 0)
    {
LABEL_17:
      *v6 = v18;
      *(_BYTE *)(a2 + 12) = v19;
      *(_BYTE *)(a2 + 16) = v20;
    }
    else
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v13, v5);
      v16 = v17;
      *v6 = v18;
      *(_BYTE *)(a2 + 12) = v19;
      *(_BYTE *)(a2 + 16) = v20;
      v17 = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 2)
        {
          if ((*((_WORD *)v16 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v16, v5);
        }
        else
        {
          *((_DWORD *)v16 + 6) -= 2;
        }
      }
    }
  }
  v7 = v21;
LABEL_32:
  v21 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v5);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
}

uint64_t WebCore::AccessibilityObject::insideLink(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  _BYTE v8[8];
  WTF::StringImpl *v9;
  char v10;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 848))(this);
  if (!v2)
  {
    result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 832))(this);
    if (!result)
      return result;
    v8[0] = 0;
    v10 = 0;
    v3 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)result + 264))(result, v8);
    if (v10)
    {
      v6 = v9;
      v9 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
        {
          WTF::StringImpl::destroy(v6, v5);
          if (!v3)
            return 0;
          goto LABEL_4;
        }
        *(_DWORD *)v6 -= 2;
      }
    }
    if (!v3)
      return 0;
    goto LABEL_4;
  }
  if ((*(_BYTE *)(v2 + 45) & 2) != 0)
  {
    v7 = *(_QWORD *)(v2 + 32);
    if (v7)
      v2 = *(_QWORD *)(v7 + 8);
    else
      v2 = 0;
  }
  v3 = v2 + 80;
LABEL_4:
  if ((*(_BYTE *)(v3 + 21) & 4) == 0)
    return 0;
  return (*(_DWORD *)(v3 + 44) >> 10) & 3;
}

BOOL WebCore::AccessibilityObject::contentEditableAttributeIsEnabled(_BOOL8 this, WebCore::Element *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (this)
  {
    v2 = *(_QWORD *)(this + 104);
    if (v2)
    {
      v3 = *(_DWORD *)(v2 + 4);
      if ((v3 & 1) != 0)
      {
        v4 = *(_QWORD *)(v2 + 40);
        LODWORD(v5) = *(_DWORD *)(v2 + 52);
        if ((_DWORD)v5)
        {
LABEL_5:
          v5 = v5;
          v6 = (uint64_t *)(v4 + 8);
          while (1)
          {
            v7 = *(v6 - 1);
            if (v7 == WebCore::HTMLNames::contenteditableAttr
              || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::contenteditableAttr + 24)
              && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::contenteditableAttr + 32))
            {
              goto LABEL_14;
            }
            v6 += 2;
            if (!--v5)
            {
              v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              goto LABEL_14;
            }
          }
        }
      }
      else
      {
        v4 = v2 + 32;
        LODWORD(v5) = v3 >> 5;
        if ((_DWORD)v5)
          goto LABEL_5;
      }
    }
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_14:
    v8 = *v6;
    if (!*v6)
      return 0;
    v9 = *(_DWORD *)(v8 + 4);
    if (!v9)
      return 1;
    if (v9 != 4)
      return 0;
    v10 = *(_QWORD *)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v10 & 0xDF) == 0x54
        && (*(_BYTE *)(v10 + 1) & 0xDF) == 0x52
        && (*(_BYTE *)(v10 + 2) & 0xDF) == 0x55)
      {
        v11 = *(unsigned __int8 *)(v10 + 3);
        return (v11 & 0xFFFFFFDF) == 69;
      }
    }
    else if ((*(_WORD *)v10 & 0xFFDF) == 0x54
           && (*(_WORD *)(v10 + 2) & 0xFFDF) == 0x52
           && (*(_WORD *)(v10 + 4) & 0xFFDF) == 0x55)
    {
      v11 = *(unsigned __int16 *)(v10 + 6);
      return (v11 & 0xFFFFFFDF) == 69;
    }
    return 0;
  }
  return this;
}

uint64_t WebCore::AccessibilityObject::dependsOnTextUnderElement(WebCore::AccessibilityObject *this)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
  result = 1;
  v4 = (v2 - 75);
  if (v4 > 0x39)
    goto LABEL_10;
  if (((1 << (v2 - 75)) & 0x20040500000200FLL) != 0)
    return result;
  if (v4 == 9)
  {
    v5 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
    if (!v5 || (*(_WORD *)(v5 + 28) & 8) == 0)
      return 1;
    v6 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v6 + 2;
    v7 = *(_QWORD *)(v5 + 96);
    if (v7 == WebCore::HTMLNames::selectTag)
    {
      if (v6)
      {
        *(_DWORD *)(v5 + 24) = v6;
      }
      else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    else
    {
      if (*(_QWORD *)(v7 + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
      {
        if (v6)
        {
          *(_DWORD *)(v5 + 24) = v6;
        }
        else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
        }
        return 1;
      }
      v12 = *(_QWORD *)(v7 + 32);
      v13 = *(_QWORD *)(WebCore::HTMLNames::selectTag + 32);
      if (v6)
      {
        *(_DWORD *)(v5 + 24) = v6;
      }
      else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      if (v12 != v13)
        return 1;
    }
  }
  else
  {
LABEL_10:
    v8 = v2 - 10;
    v9 = v8 > 0x3A;
    v10 = (1 << v8) & 0x400000000000011;
    if (!v9 && v10 != 0)
      return result;
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 45
    || ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 104))(this) & 1) != 0)
  {
    return 1;
  }
  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (result)
    return (*(_WORD *)(result + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::outputTag + 24);
  return result;
}

uint64_t WebCore::AccessibilityObject::readOnlyValue@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::String *Attribute;
  uint64_t result;
  int v6;
  BOOL v7;
  BOOL v8;

  if (WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_readonlyAttr))
  {
    Attribute = (WTF::String *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_readonlyAttr);
    return WTF::String::convertToASCIILowercase(Attribute);
  }
  else
  {
    result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2976))(this);
    if ((_DWORD)result == 134
      || ((v6 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this),
           (v6 - 77) <= 0x35)
        ? (v7 = ((1 << (v6 - 77)) & 0x2200100B005003) == 0)
        : (v7 = 1),
          v7
       && ((v6 - 14) <= 0x35
         ? (v8 = ((1 << (v6 - 14)) & 0x20000030000031) == 0)
         : (v8 = 1),
           v8
        && (result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 112))(this),
            !(_DWORD)result))))
    {
      *a2 = 0;
    }
    else
    {
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
  }
  return result;
}

BOOL WebCore::AccessibilityObject::hasAttribute(WebCore::AccessibilityObject *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  WebCore::QualifiedName::QualifiedNameImpl **v9;
  uint64_t v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  WebCore::QualifiedName::QualifiedNameImpl *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 832))(this);
  if (!v3)
    return 0;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v6 + 2;
  v7 = *(_QWORD *)(v3 + 104);
  if (!v7)
    goto LABEL_14;
  v8 = *(_DWORD *)(v7 + 4);
  if ((v8 & 1) != 0)
  {
    v9 = *(WebCore::QualifiedName::QualifiedNameImpl ***)(v7 + 40);
    LODWORD(v10) = *(_DWORD *)(v7 + 52);
    if (!(_DWORD)v10)
      goto LABEL_14;
LABEL_7:
    v11 = *a2;
    v10 = v10;
    while (1)
    {
      v12 = *v9;
      if (*v9 == v11 || *((_QWORD *)v12 + 3) == *((_QWORD *)v11 + 3) && *((_QWORD *)v12 + 4) == *((_QWORD *)v11 + 4))
        break;
      v9 += 2;
      if (!--v10)
        goto LABEL_14;
    }
    v13 = 1;
    goto LABEL_23;
  }
  v9 = (WebCore::QualifiedName::QualifiedNameImpl **)(v7 + 32);
  LODWORD(v10) = v8 >> 5;
  if ((_DWORD)v10)
    goto LABEL_7;
LABEL_14:
  v14 = *(_QWORD *)(v3 + 72);
  if (((v14 & 0x3000000000000000) == 0x2000000000000000
     || (v14 & 0x3000000000000000) == 0x3000000000000000 && (*(_WORD *)(v3 + 28) & 0x100) == 0)
    && (v15 = v14 & 0xFFFFFFFFFFFFLL) != 0
    && (v16 = *(_QWORD *)(v15 + 104)) != 0)
  {
    v17 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v16 + 8), a2);
    v18 = *(_QWORD *)(v16 + 8);
    if (v18)
      v18 += 32 * *(unsigned int *)(v18 - 4);
    v13 = v18 != v17;
    v6 = *(_DWORD *)(v5 + 24) - 2;
  }
  else
  {
    v13 = 0;
  }
LABEL_23:
  if (v6)
  {
    *(_DWORD *)(v5 + 24) = v6;
  }
  else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
  }
  return v13;
}

BOOL WebCore::AccessibilityObject::supportsCheckedState(WebCore::AccessibilityObject *this)
{
  int v2;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 14
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 88)
  {
    return 1;
  }
  return (v2 - 77) <= 0x24 && ((1 << (v2 - 77)) & 0x1000000003) != 0
      || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 132;
}

uint64_t *WebCore::AccessibilityObject::autoCompleteValue@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_autocompleteAttr);
  v4 = *result;
  if (!*result)
    return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = *(_DWORD *)(v4 + 4);
  if (v5 == 6)
  {
    v9 = *(_QWORD *)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v9 & 0xDF) != 0x49
        || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x4E
        || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x4C
        || (*(_BYTE *)(v9 + 3) & 0xDF) != 0x49
        || (*(_BYTE *)(v9 + 4) & 0xDF) != 0x4E)
      {
        return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      v10 = *(unsigned __int8 *)(v9 + 5);
    }
    else
    {
      if ((*(_WORD *)v9 & 0xFFDF) != 0x49
        || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x4E
        || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x49
        || (*(_WORD *)(v9 + 8) & 0xFFDF) != 0x4E)
      {
        return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      v10 = *(unsigned __int16 *)(v9 + 10);
    }
    if ((v10 & 0xFFFFFFDF) == 0x45)
      goto LABEL_20;
    return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  if (v5 != 4)
    return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) == 0)
  {
    v12 = *(_WORD *)v6 & 0xFFDF;
    if (v12 == 76)
    {
      if ((*(_WORD *)(v6 + 2) & 0xFFDF) != 0x49 || (*(_WORD *)(v6 + 4) & 0xFFDF) != 0x53)
        return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      v8 = *(unsigned __int16 *)(v6 + 6);
      goto LABEL_10;
    }
    if (v12 != 66 || (*(_WORD *)(v6 + 2) & 0xFFDF) != 0x4F || (*(_WORD *)(v6 + 4) & 0xFFDF) != 0x54)
      return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = *(unsigned __int16 *)(v6 + 6);
LABEL_25:
    if ((v11 & 0xFFFFFFDF) != 0x48)
      return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_20;
  }
  v7 = *(_BYTE *)v6 & 0xDF;
  if (v7 != 76)
  {
    if (v7 != 66 || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x4F || (*(_BYTE *)(v6 + 2) & 0xDF) != 0x54)
      return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = *(unsigned __int8 *)(v6 + 3);
    goto LABEL_25;
  }
  if ((*(_BYTE *)(v6 + 1) & 0xDF) != 0x49 || (*(_BYTE *)(v6 + 2) & 0xDF) != 0x53)
    return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = *(unsigned __int8 *)(v6 + 3);
LABEL_10:
  if ((v8 & 0xFFFFFFDF) != 0x54)
    return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_20:
  *(_DWORD *)v4 += 2;
  *a2 = v4;
  return result;
}

uint64_t WebCore::AccessibilityObject::lineForPosition(WebCore::AccessibilityObject *this, const VisiblePosition *a2)
{
  void *v4;
  Node *var0;
  int v6;
  unsigned int v7;
  Node *v8;
  uint64_t i;
  void *v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  Node **v17;
  Node *v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  const WebCore::VisiblePosition *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  uint64_t (*v27)();
  _BOOL4 v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v33;
  unsigned int v34;
  char v35;
  BOOL v36;
  WebCore::Node *v37;
  unsigned int v38;
  char v39;
  char v40;
  WebCore::Node *v41;
  unsigned int var1;
  char v43;
  BOOL v44;

  if (!a2->var0.var0.var0
    || !(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this))
  {
    return 0xFFFFFFFFLL;
  }
  var0 = a2->var0.var0.var0;
  if (a2->var0.var0.var0)
  {
    v6 = *((_DWORD *)var0 + 6);
    *((_DWORD *)var0 + 6) = v6 + 2;
    v7 = *((_BYTE *)&a2->var0 + 12) & 7;
    if (v7 > 4)
    {
      v8 = 0;
    }
    else
    {
      v8 = var0;
      if (((1 << v7) & 0x19) == 0)
        v8 = (Node *)*((_QWORD *)var0 + 4);
    }
    if (v6)
    {
      *((_DWORD *)var0 + 6) = v6;
    }
    else if ((*((_WORD *)var0 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)var0, v4);
    }
  }
  else
  {
    v8 = 0;
  }
  for (i = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
        (Node *)i != v8 && i != 0;
        i = *v12)
  {
    if ((*(_WORD *)(i + 28) & 0x80) != 0)
    {
      v13 = *(_QWORD *)(i + 200);
      if (!v13)
        goto LABEL_20;
      v12 = (uint64_t *)(v13 + 8);
    }
    else
    {
      v12 = (uint64_t *)(i + 32);
    }
  }
  if (i)
    goto LABEL_35;
LABEL_20:
  v14 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  v15 = v8 != 0;
  if (v8 && v8 != (Node *)v14)
  {
    do
    {
      if ((*((_WORD *)v8 + 14) & 0x80) != 0)
      {
        v16 = *((_QWORD *)v8 + 25);
        if (!v16)
          return 0xFFFFFFFFLL;
        v17 = (Node **)(v16 + 8);
      }
      else
      {
        v17 = (Node **)((char *)v8 + 32);
      }
      v8 = *v17;
      v15 = *v17 != 0;
    }
    while (v8 != (Node *)v14 && v8 != 0);
  }
  if (!v15)
    return 0xFFFFFFFFLL;
LABEL_35:
  v19 = a2->var0.var0.var0;
  if (a2->var0.var0.var0)
    *((_DWORD *)v19 + 6) += 2;
  v20 = 0;
  v41 = (WebCore::Node *)v19;
  var1 = a2->var0.var1;
  v43 = *((_BYTE *)&a2->var0 + 12);
  v44 = a2->var1;
  v37 = 0;
  v38 = 0;
  v40 = 1;
  v39 = 0;
  do
  {
    v21 = v20;
    v22 = v41;
    if (v41)
      *((_DWORD *)v41 + 6) += 2;
    v23 = v37;
    v37 = v22;
    if (v23)
    {
      if (*((_DWORD *)v23 + 6) == 2)
      {
        if ((*((_WORD *)v23 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v23, v10);
      }
      else
      {
        *((_DWORD *)v23 + 6) -= 2;
      }
    }
    v38 = var1;
    v39 = v43;
    v40 = v44;
    WebCore::previousLinePosition((uint64_t)&v41, 0, 1, &v33);
    v25 = v33;
    v33 = 0;
    v26 = v41;
    v41 = v25;
    if (!v26)
      goto LABEL_46;
    if (*((_DWORD *)v26 + 6) != 2)
    {
      *((_DWORD *)v26 + 6) -= 2;
LABEL_46:
      var1 = v34;
      v43 = v35;
      v44 = v36;
      goto LABEL_47;
    }
    if ((*((_WORD *)v26 + 15) & 0x400) != 0)
      goto LABEL_46;
    WebCore::Node::removedLastRef(v26, v10);
    v29 = v33;
    var1 = v34;
    v43 = v35;
    v44 = v36;
    v33 = 0;
    if (v29)
    {
      if (*((_DWORD *)v29 + 6) == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v29, v10);
      }
      else
      {
        *((_DWORD *)v29 + 6) -= 2;
      }
    }
LABEL_47:
    if (v41)
      v27 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v27 = 0;
    if (!v27)
      break;
    v28 = WebCore::inSameLine((WebCore *)&v41, (const WebCore::VisiblePosition *)&v37, v24);
    v20 = (v21 + 1);
  }
  while (!v28);
  v30 = v37;
  v37 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 2)
    {
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30, v10);
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
  }
  v31 = v41;
  v41 = 0;
  if (v31)
  {
    if (*((_DWORD *)v31 + 6) == 2)
    {
      if ((*((_WORD *)v31 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v31, v10);
    }
    else
    {
      *((_DWORD *)v31 + 6) -= 2;
    }
  }
  return v21;
}

uint64_t WebCore::AccessibilityObject::characterRangeForPoint(WebCore::AccessibilityObject *this, int32x2_t *a2)
{
  void *v3;
  int v4;
  WebCore::Node *v5;
  WebCore::Node *v7[3];

  WebCore::AccessibilityObject::visiblePositionForPoint(this, a2, v7);
  v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *, WebCore::Node **))(*(_QWORD *)this + 3136))(this, v7);
  v5 = v7[0];
  v7[0] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v3);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  return v4 & ~(v4 >> 31);
}

uint64_t WebCore::AccessibilityObject::doAXStyleRangeForIndex(WebCore::AccessibilityObject *this)
{
  void *v2;
  WebCore::Node *v3;
  unsigned int v4;
  void *v5;
  int v6;
  WebCore::Node *v7;
  WebCore::Node *v8;
  WebCore::Node *v12[3];
  WebCore::Node *v13[3];
  WebCore::Node *v14;

  (*(void (**)(WebCore::Node **__return_ptr))(*(_QWORD *)this + 2080))(v12);
  (*(void (**)(WebCore::Node **__return_ptr, WebCore::AccessibilityObject *, WebCore::Node **))(*(_QWORD *)this + 2016))(v13, this, v12);
  v3 = v12[0];
  v12[0] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v3, v2);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
  }
  v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *, WebCore::Node **))(*(_QWORD *)this + 3136))(this, v13);
  v6 = (*(uint64_t (**)(WebCore::AccessibilityObject *, WebCore::Node **))(*(_QWORD *)this + 3136))(this, &v14);
  v7 = v14;
  v14 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v5);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  v8 = v13[0];
  v13[0] = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v5);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  if (((v4 | v6) & 0x80000000) != 0 || v6 < (int)v4)
    return 0;
  else
    return v4;
}

uint64_t WebCore::AccessibilityObject::doAXLineForIndex(WebCore::AccessibilityObject *this)
{
  void *v2;
  uint64_t v3;
  WebCore::Node *v4;
  WebCore::Node *v6[3];

  (*(void (**)(WebCore::Node **__return_ptr))(*(_QWORD *)this + 2080))(v6);
  v3 = (*(uint64_t (**)(WebCore::AccessibilityObject *, WebCore::Node **))(*(_QWORD *)this + 2120))(this, v6);
  v4 = v6[0];
  v6[0] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v4, v2);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
  }
  return v3;
}

uint64_t WebCore::AccessibilityObject::updateBackingStore(WebCore::AccessibilityObject *this)
{
  uint64_t result;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
  if (!result)
    return result;
  v3 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  ++*(_QWORD *)(v3 + 8);
  v5 = __ldxr((unsigned __int8 *)v3);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_11:
  v6 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (v6)
  {
    if (!(*(unsigned __int8 *)(v6 + 3391) | *(unsigned __int8 *)(v6 + 3392)))
    {
      v7 = *(_QWORD *)(v6 + 528);
      if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0 || (v9 = *(_QWORD *)(v8 + 288)) == 0 || *(_BYTE *)(v9 + 480) != 2)
        WebCore::Document::updateLayout(v6, 2u, 0);
    }
  }
  v10 = (WebCore::Node *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
  if (v10)
    WebCore::AXObjectCache::performDeferredCacheUpdate(v10, (void *)1);
  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1904))(this);
  v12 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_24;
  }
  result = MEMORY[0x19AEA534C](v12);
LABEL_24:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v19 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v19 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 != 1)
  {
    __clrex();
LABEL_31:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      return result;
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
    goto LABEL_31;
  if (v15)
    return result;
LABEL_32:
  if (v16)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v17)
    return WTF::fastFree((WTF *)v12, v11);
  return result;
}

uint64_t WebCore::AccessibilityObject::remoteParentObject(WebCore::AccessibilityObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (v1 && (v2 = *(_QWORD *)(v1 + 528)) != 0 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 280) + 16) + 920))(*(_QWORD *)(*(_QWORD *)(v3 + 280) + 16));
  else
    return 0;
}

unint64_t WebCore::AccessibilityObject::remoteFrameOffset(WebCore::AccessibilityObject *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (!v1)
  {
    v2 = 0;
LABEL_6:
    v4 = 0;
    return v4 | v2;
  }
  v2 = *(_QWORD *)(v1 + 528);
  if (!v2)
    goto LABEL_6;
  v2 = *(_QWORD *)(v2 + 8);
  if (!v2)
    goto LABEL_6;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 280) + 16) + 928))(*(_QWORD *)(*(_QWORD *)(v2 + 280) + 16));
  v2 = v3 & 0xFFFFFFFF00000000;
  v4 = v3;
  return v4 | v2;
}

uint64_t WebCore::AccessibilityObject::document(WebCore::AccessibilityObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1720))(this);
  if (result)
    return *(_QWORD *)(*(_QWORD *)(result + 328) + 296);
  return result;
}

uint64_t WebCore::AccessibilityObject::documentFrameView(WebCore::AccessibilityObject *this)
{
  WebCore::AccessibilityObject *v1;
  char v2;
  uint64_t v3;

  if (!this)
    return 0;
  v1 = this;
  while (1)
  {
    v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v1 + 56))(v1);
    v3 = *(_QWORD *)v1;
    if ((v2 & 1) != 0)
      break;
    v1 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(v3 + 1232))(v1);
    if (!v1)
      return 0;
  }
  return (*(uint64_t (**)(WebCore::AccessibilityObject *))(v3 + 1720))(v1);
}

uint64_t WebCore::AccessibilityObject::children(WebCore::AccessibilityObject *this, int a2)
{
  if (a2)
    (*(void (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1904))(this);
  return (uint64_t)this + 40;
}

_BYTE *WebCore::AccessibilityObject::updateChildrenIfNecessary(_BYTE *this)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  WTF *v6;
  void *v7;
  WTF *v8;

  if (!this[56])
  {
    v1 = this;
    v2 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 1488))(this);
    if (v2 && (v3 = v2, !*(_QWORD *)(v2 + 88)))
    {
      v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v4 = 0;
      v6 = *(WTF **)(v3 + 88);
      *(_QWORD *)(v3 + 88) = v4;
      if (v6)
      {
        if (*(_QWORD *)v6)
          WTF::fastFree((WTF *)(*(_QWORD *)v6 - 16), v5);
        WTF::fastFree(v6, v5);
      }
      this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 3064))(v1);
      v8 = *(WTF **)(v3 + 88);
      *(_QWORD *)(v3 + 88) = 0;
      if (v8)
      {
        if (*(_QWORD *)v8)
          WTF::fastFree((WTF *)(*(_QWORD *)v8 - 16), v7);
        return (_BYTE *)WTF::fastFree(v8, v7);
      }
    }
    else
    {
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 3064))(v1);
    }
  }
  return this;
}

WTF *WebCore::AccessibilityObject::clearChildren(WebCore::AccessibilityObject *this)
{
  WTF *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *result;

  v2 = (WebCore::AccessibilityObject *)((char *)this + 40);
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *v3++;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1912))(v6);
      v5 -= 8;
    }
    while (v5);
  }
  result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v2, 0);
  *((_BYTE *)this + 56) = 0;
  return result;
}

uint64_t WebCore::AccessibilityObject::ariaTreeRows(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  int v76;
  uint64_t v78;
  _QWORD *v79;
  unsigned int v80;

  (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 984))(&v79, a1, 18);
  v6 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a3 + 8))
  {
    v7 = v6 + (v6 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= v6 + 1)
      v9 = v6 + 1;
    else
      v9 = v8;
    if (v9 >> 29)
      goto LABEL_135;
    v10 = *(_QWORD **)a3;
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(a3 + 8) = v9;
    *(_QWORD *)a3 = v11;
    memcpy(v11, v10, 8 * v6);
    if (v10)
    {
      if (*(_QWORD **)a3 == v10)
      {
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v10, v12);
    }
    v13 = *(unsigned int *)(a3 + 12);
    v14 = *(_QWORD **)a3;
    v15 = a1[1];
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
      goto LABEL_26;
    }
    MEMORY[0x19AEA534C](v15);
LABEL_26:
    ++*(_QWORD *)(v15 + 8);
    v21 = __ldxr((unsigned __int8 *)v15);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
        goto LABEL_31;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_31:
    v17 = &v14[v13];
    goto LABEL_32;
  }
  v17 = (_QWORD *)(*(_QWORD *)a3 + 8 * v6);
  v18 = a1[1];
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v18);
LABEL_19:
  ++*(_QWORD *)(v18 + 8);
  v20 = __ldxr((unsigned __int8 *)v18);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_32:
  *v17 = a1;
  ++*(_DWORD *)(a3 + 12);
  v22 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 1896))(a1, 1);
  v24 = *(unsigned int *)(v22 + 12);
  if ((_DWORD)v24)
  {
    v25 = *(_QWORD **)v22;
    v26 = *(_QWORD *)v22 + 8 * v24;
    while (1)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v25 + 1456))(*v25) != 131)
        goto LABEL_57;
      v27 = v80;
      if (v80)
      {
        v28 = v79;
        while (*v28 != *v25)
        {
          ++v28;
          if (!--v27)
            goto LABEL_39;
        }
        goto LABEL_59;
      }
LABEL_39:
      v29 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v29)
      {
        v30 = *(char **)a2;
        v31 = *(unsigned int *)(a2 + 12);
        while (*(_QWORD *)v30 != *v25)
        {
          v30 += 8;
          if (!--v31)
            goto LABEL_43;
        }
        goto LABEL_59;
      }
LABEL_43:
      if ((_DWORD)v29 == *(_DWORD *)(a2 + 8))
      {
        v32 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v29 + 1, (unint64_t)v25);
        v29 = *(unsigned int *)(a2 + 12);
        v33 = *(char **)a2;
        v34 = *(_QWORD *)v32;
        if (!*(_QWORD *)v32)
          goto LABEL_56;
      }
      else
      {
        v33 = *(char **)a2;
        v34 = *v25;
        if (!*v25)
          goto LABEL_56;
      }
      v35 = *(_QWORD *)(v34 + 8);
      if (__ldaxr((unsigned __int8 *)v35))
        break;
      if (__stxr(1u, (unsigned __int8 *)v35))
        goto LABEL_50;
LABEL_51:
      ++*(_QWORD *)(v35 + 8);
      v37 = __ldxr((unsigned __int8 *)v35);
      if (v37 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v35))
          goto LABEL_56;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v35);
LABEL_56:
      *(_QWORD *)&v33[8 * v29] = v34;
      ++*(_DWORD *)(a2 + 12);
LABEL_57:
      v38 = *v25;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v25 + 48))(*v25))
        WebCore::AccessibilityObject::ariaTreeRows(v38, a2, a3);
LABEL_59:
      if (++v25 == (_QWORD *)v26)
        goto LABEL_60;
    }
    __clrex();
LABEL_50:
    MEMORY[0x19AEA534C](v35);
    goto LABEL_51;
  }
LABEL_60:
  if (v80)
  {
    v39 = v79;
    v40 = &v79[v80];
    while (1)
    {
      v41 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v41)
      {
        v42 = *(_QWORD **)a3;
        while (*v42 != *v39)
        {
          ++v42;
          if (!--v41)
            goto LABEL_66;
        }
        goto LABEL_112;
      }
LABEL_66:
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v39 + 1456))(*v39) == 131)
        break;
LABEL_110:
      v65 = *v39;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v39 + 48))(*v39))
        WebCore::AccessibilityObject::ariaTreeRows(v65, a2, a3);
LABEL_112:
      if (++v39 == v40)
        goto LABEL_115;
    }
    v44 = *(unsigned int *)(a2 + 12);
    if (!(_DWORD)v44)
    {
LABEL_96:
      v58 = v44;
      if ((_DWORD)v44 == *(_DWORD *)(a2 + 8))
      {
        v59 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v44 + 1, (unint64_t)v39);
        v58 = *(unsigned int *)(a2 + 12);
        v60 = *(char **)a2;
        v61 = *(_QWORD *)v59;
        if (!*(_QWORD *)v59)
          goto LABEL_109;
      }
      else
      {
        v60 = *(char **)a2;
        v61 = *v39;
        if (!*v39)
          goto LABEL_109;
      }
      v62 = *(_QWORD *)(v61 + 8);
      if (__ldaxr((unsigned __int8 *)v62))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v62))
      {
LABEL_104:
        ++*(_QWORD *)(v62 + 8);
        v64 = __ldxr((unsigned __int8 *)v62);
        if (v64 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v62))
            goto LABEL_109;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v62);
LABEL_109:
        *(_QWORD *)&v60[8 * v58] = v61;
        ++*(_DWORD *)(a2 + 12);
        goto LABEL_110;
      }
      MEMORY[0x19AEA534C](v62);
      goto LABEL_104;
    }
    v45 = 0;
    v46 = *(char **)a2;
    v47 = *v39;
    while (*(_QWORD *)&v46[v45] != v47)
    {
      v45 += 8;
      if (8 * v44 == v45)
        goto LABEL_96;
    }
    if (*(_QWORD *)v46 != v47)
    {
      v48 = 0;
      while (v44 - 1 != v48)
      {
        v49 = *(_QWORD *)&v46[8 * v48++ + 8];
        if (v49 == v47)
          goto LABEL_78;
      }
      goto LABEL_96;
    }
    v48 = 0;
LABEL_78:
    v50 = &v46[8 * v48];
    *(_QWORD *)v50 = 0;
    if (!v47)
      goto LABEL_95;
    v51 = *(_QWORD *)(v47 + 8);
    if (__ldaxr((unsigned __int8 *)v51))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v51))
    {
      goto LABEL_83;
    }
    MEMORY[0x19AEA534C](v51);
LABEL_83:
    v53 = *(_QWORD *)(v51 + 8);
    v54 = v53 - 1;
    *(_QWORD *)(v51 + 8) = v53 - 1;
    if (v53 == 1)
    {
      v66 = *(_QWORD *)(v51 + 16);
      v55 = *(_QWORD *)(v51 + 24);
      *(_QWORD *)(v51 + 24) = 0;
      v56 = v66 != 0;
    }
    else
    {
      v55 = 0;
      v56 = 1;
    }
    v57 = __ldxr((unsigned __int8 *)v51);
    if (v57 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v51))
      {
        if (!v54)
          goto LABEL_91;
        goto LABEL_95;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v51);
    if (!v54)
    {
LABEL_91:
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      if (!v56)
        WTF::fastFree((WTF *)v51, v43);
    }
LABEL_95:
    memmove(v50, v50 + 8, *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 12) - (_QWORD)(v50 + 8));
    LODWORD(v44) = *(_DWORD *)(a2 + 12) - 1;
    *(_DWORD *)(a2 + 12) = v44;
    goto LABEL_96;
  }
LABEL_115:
  v67 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v67)
  {
LABEL_135:
    __break(0xC471u);
    JUMPOUT(0x1956179D0);
  }
  v68 = v67 - 1;
  v69 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (v67 - 1));
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v68) = 0;
  if (!v69)
    goto LABEL_133;
  v70 = *(_QWORD *)(v69 + 8);
  if (__ldaxr((unsigned __int8 *)v70))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v70))
  {
    goto LABEL_121;
  }
  MEMORY[0x19AEA534C](v70);
LABEL_121:
  v72 = *(_QWORD *)(v70 + 8);
  v73 = v72 - 1;
  *(_QWORD *)(v70 + 8) = v72 - 1;
  if (v72 == 1)
  {
    v78 = *(_QWORD *)(v70 + 16);
    v74 = *(_QWORD *)(v70 + 24);
    *(_QWORD *)(v70 + 24) = 0;
    v75 = v78 != 0;
  }
  else
  {
    v74 = 0;
    v75 = 1;
  }
  v76 = __ldxr((unsigned __int8 *)v70);
  if (v76 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v70))
    {
      if (v73)
        goto LABEL_133;
      goto LABEL_129;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v70);
  if (v73)
    goto LABEL_133;
LABEL_129:
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  if (!v75)
    WTF::fastFree((WTF *)v70, v23);
LABEL_133:
  *(_DWORD *)(a3 + 12) = v68;
  return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v23);
}

uint64_t WebCore::AccessibilityObject::ariaTreeRows@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  _QWORD v4[2];

  *a2 = 0;
  a2[1] = 0;
  v4[0] = 0;
  v4[1] = 0;
  WebCore::AccessibilityObject::ariaTreeRows(this, (uint64_t)a2, (uint64_t)v4);
  return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

_QWORD *WebCore::AccessibilityObject::disclosedRows@<X0>(WebCore::AccessibilityObject *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t *v27;
  unsigned int v28;

  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)(*(uint64_t (**)(WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
  v4 = *((unsigned int *)result + 3);
  if ((_DWORD)v4)
  {
    v5 = (_QWORD *)*result;
    v6 = *result + 8 * v4;
    while (1)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 1456))(*v5);
      if ((_DWORD)result == 131)
        break;
      result = (*(_QWORD *(**)(uint64_t **__return_ptr))(*(_QWORD *)*v5 + 2216))(&v27);
      v11 = *((unsigned int *)a2 + 2);
      v12 = *((unsigned int *)a2 + 3);
      v13 = v28 + v12;
      if (v13 > v11)
      {
        v14 = v11 + (v11 >> 2);
        if (v14 >= 0x10)
          v15 = v14 + 1;
        else
          v15 = 16;
        if (v15 <= v13)
          v16 = v28 + v12;
        else
          v16 = v15;
        if (v16 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v17 = (void *)*a2;
        v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
        *((_DWORD *)a2 + 2) = v16;
        *a2 = (uint64_t)v18;
        memcpy(v18, v17, 8 * v12);
        if (v17)
        {
          if ((void *)*a2 == v17)
          {
            *a2 = 0;
            *((_DWORD *)a2 + 2) = 0;
          }
          WTF::fastFree((WTF *)v17, v10);
        }
      }
      if (v28)
      {
        v19 = v27;
        v20 = *((_DWORD *)a2 + 3);
        v21 = 8 * v28;
        do
        {
          v22 = *a2;
          v23 = *v19;
          *v19++ = 0;
          *(_QWORD *)(v22 + 8 * v20++) = v23;
          v21 -= 8;
        }
        while (v21);
        *((_DWORD *)a2 + 3) = v20;
      }
      result = (_QWORD *)WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v10);
LABEL_35:
      if (++v5 == (_QWORD *)v6)
        return result;
    }
    v7 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v7 == *((_DWORD *)a2 + 2))
    {
      result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v7 + 1, (unint64_t)v5);
      v7 = *((unsigned int *)a2 + 3);
      v8 = (char *)*a2;
      v9 = (_QWORD *)*result;
      if (!*result)
        goto LABEL_34;
    }
    else
    {
      v8 = (char *)*a2;
      v9 = (_QWORD *)*v5;
      if (!*v5)
        goto LABEL_34;
    }
    v24 = v9[1];
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
LABEL_29:
      ++*(_QWORD *)(v24 + 8);
      v26 = __ldxr((unsigned __int8 *)v24);
      if (v26 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
          goto LABEL_34;
      }
      else
      {
        __clrex();
      }
      result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_34:
      *(_QWORD *)&v8[8 * v7] = v9;
      ++*((_DWORD *)a2 + 3);
      goto LABEL_35;
    }
    result = (_QWORD *)MEMORY[0x19AEA534C](v24);
    goto LABEL_29;
  }
  return result;
}

void WebCore::AccessibilityObject::localizedActionVerb(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v2 += 2;
  *a1 = v2;
}

void WebCore::AccessibilityObject::actionVerb(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

WTF::StringImpl *WebCore::AccessibilityObject::invalidStatus@<X0>(WebCore::AccessibilityObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  _WORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *result;
  const WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v20;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v20;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v20;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v20;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v20;
  WebCore::AccessibilityObject::getAttributeTrimmed(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_invalidAttr, &v20);
  if (!v20 || !*((_DWORD *)v20 + 1))
  {
    v10 = (_WORD *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
    if (v10)
    {
      if ((v10[14] & 0x10) != 0)
      {
        v12 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v10 + 464))(v10);
        if (v12)
        {
          v13 = v12;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 272))(v12))
          {
            if ((*(_BYTE *)(v13 + 48) & 1) == 0)
            {
              v14 = v7;
              v7 = 0;
              goto LABEL_12;
            }
          }
        }
      }
    }
    goto LABEL_11;
  }
  if ((WTF::equal(v20, v5, v9) & 1) != 0 || (WTF::equal(v20, v8, v15) & 1) != 0)
  {
LABEL_11:
    v14 = v5;
    v5 = 0;
    goto LABEL_12;
  }
  if ((WTF::equal(v20, v4, v16) & 1) != 0)
  {
    v14 = v4;
    v4 = 0;
  }
  else
  {
    v19 = WTF::equal(v20, v6, v18);
    if (v19)
      v14 = v6;
    else
      v14 = v7;
    if (v19)
      v6 = 0;
    else
      v7 = 0;
  }
LABEL_12:
  *a2 = v14;
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      if (!v8)
        goto LABEL_18;
      goto LABEL_16;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v8)
    goto LABEL_18;
LABEL_16:
  if (*(_DWORD *)v8 == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v11);
  else
    *(_DWORD *)v8 -= 2;
LABEL_18:
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v11);
      if (!v6)
        goto LABEL_24;
      goto LABEL_22;
    }
    *(_DWORD *)v7 -= 2;
  }
  if (!v6)
    goto LABEL_24;
LABEL_22:
  if (*(_DWORD *)v6 == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v11);
  else
    *(_DWORD *)v6 -= 2;
LABEL_24:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v11);
      if (!v4)
        return result;
      goto LABEL_28;
    }
    *(_DWORD *)v5 -= 2;
  }
  if (!v4)
    return result;
LABEL_28:
  if (*(_DWORD *)v4 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v11);
  *(_DWORD *)v4 -= 2;
  return result;
}

WTF::StringImpl **WebCore::AccessibilityObject::getAttributeTrimmed@<X0>(WebCore::AccessibilityObject *this@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl **result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  result = (WTF::StringImpl **)WebCore::AccessibilityObject::getAttribute(this, a2);
  v5 = *result;
  if (*result && *((_DWORD *)v5 + 1))
  {
    *(_DWORD *)v5 += 2;
    v8 = v5;
    WTF::String::trim();
    WTF::String::simplifyWhiteSpace();
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = (WTF::StringImpl **)v8;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        return (WTF::StringImpl **)WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

BOOL WebCore::AccessibilityObject::supportsCurrent(WebCore::AccessibilityObject *this)
{
  return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_currentAttr);
}

uint64_t WebCore::AccessibilityObject::currentState(WebCore::AccessibilityObject *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  WTF::StringImpl *v10;

  WebCore::AccessibilityObject::getAttributeTrimmed(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_currentAttr, &v10);
  v2 = v10;
  if (!v10)
    return 0;
  if (!*((_DWORD *)v10 + 1))
  {
    v3 = 0;
    v10 = 0;
LABEL_20:
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v1);
    else
      *(_DWORD *)v2 -= 2;
    return v3;
  }
  v4 = MEMORY[0x19AEA53F4]();
  v2 = v10;
  if ((v4 & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    v5 = MEMORY[0x19AEA53F4](v10, "page", 4);
    v2 = v10;
    if ((v5 & 1) != 0)
    {
      v3 = 2;
    }
    else
    {
      v6 = MEMORY[0x19AEA53F4](v10, "step", 4);
      v2 = v10;
      if ((v6 & 1) != 0)
      {
        v3 = 3;
      }
      else
      {
        v7 = MEMORY[0x19AEA53F4](v10, "location", 8);
        v2 = v10;
        if ((v7 & 1) != 0)
        {
          v3 = 4;
        }
        else
        {
          v8 = MEMORY[0x19AEA53F4](v10, "date", 4);
          v2 = v10;
          if ((v8 & 1) != 0)
          {
            v3 = 5;
          }
          else
          {
            if (MEMORY[0x19AEA53F4](v10, "time", 4))
              v3 = 6;
            else
              v3 = 1;
            v2 = v10;
          }
        }
      }
    }
  }
  v10 = 0;
  if (v2)
    goto LABEL_20;
  return v3;
}

WebCore::AXObjectCache *WebCore::AccessibilityObject::isModalNode(WebCore::AccessibilityObject *this)
{
  WebCore::AXObjectCache *result;
  uint64_t v3;
  WebCore::Element *v4;
  uint64_t v5;
  WebCore::Node *v6;
  uint64_t v7;
  uint64_t v8;

  result = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
  if (result)
  {
    v3 = (uint64_t)result;
    result = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this
                                                                                                 + 840))(this);
    if (result)
    {
      if (!*(_BYTE *)(v3 + 360))
        result = (WebCore::AXObjectCache *)WebCore::AXObjectCache::findModalNodes(v3, v4);
      if (!*(_DWORD *)(v3 + 356))
        goto LABEL_12;
      v5 = *(_QWORD *)(v3 + 336);
      v6 = v5 ? *(WebCore::Node **)(v5 + 8) : 0;
      if (!WebCore::AXObjectCache::isNodeVisible(result, v6))
        WebCore::AXObjectCache::updateCurrentModalNode((WebCore::AXObjectCache *)v3, 0);
      v7 = *(_QWORD *)(v3 + 336);
      if (v7)
        v8 = *(_QWORD *)(v7 + 8);
      else
LABEL_12:
        v8 = 0;
      return (WebCore::AXObjectCache *)(v8 == (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this));
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::ignoredFromModalPresence(WebCore::AccessibilityObject *this)
{
  uint64_t result;
  WebCore::Element *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Node *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    if (!*(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this) + 32))
      return 0;
    result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
    if (!result)
      return result;
    v4 = result;
    if (!*(_BYTE *)(result + 360))
      result = WebCore::AXObjectCache::findModalNodes(result, v3);
    if (!*(_DWORD *)(v4 + 356))
      return 0;
    v5 = *(_QWORD *)(v4 + 336);
    if (v5)
      v6 = *(WebCore::Node **)(v5 + 8);
    else
      v6 = 0;
    if (WebCore::AXObjectCache::isNodeVisible((WebCore::AXObjectCache *)result, v6))
    {
      v7 = *(_QWORD *)(v4 + 336);
      if (!v7)
        return 0;
    }
    else
    {
      WebCore::AXObjectCache::updateCurrentModalNode((WebCore::AXObjectCache *)v4, 0);
      result = 0;
      v7 = *(_QWORD *)(v4 + 336);
      if (!v7)
        return result;
    }
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 528);
    v10 = v9 ? *(_QWORD *)(v9 + 8) : 0;
    v11 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
    if (v11)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 8) + 528);
      if (v12)
        v12 = *(_QWORD *)(v12 + 8);
    }
    else
    {
      v12 = 0;
    }
    if (v10 != v12)
      return 0;
    if ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this))
    {
      v13 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
      result = v13 == 0;
      if (v13 && v13 != v8)
      {
        do
        {
          v15 = (uint64_t *)(v13 + 32);
          v14 = *(_QWORD *)(v13 + 32);
          if (!v14
            || (*(_WORD *)(v14 + 28) & 8) == 0
            || (v16 = *(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) == 0
            || (v19 = *(_QWORD *)(v16 + 88)) == 0
            || (v20 = *(_QWORD *)(v19 + 224)) == 0
            || (v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v13),
                v15 = (uint64_t *)(v13 + 32),
                (v17 = v21) == 0))
          {
            if ((*(_WORD *)(v13 + 28) & 0x80) != 0)
            {
              v22 = *(_QWORD *)(v13 + 200);
              if (!v22)
                return 1;
              v15 = (uint64_t *)(v22 + 8);
            }
            v17 = *v15;
          }
          result = v17 == 0;
          if (v17)
            v18 = v17 == v8;
          else
            v18 = 1;
          v13 = v17;
        }
        while (!v18);
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

_QWORD *WebCore::AccessibilityObject::nameAttribute@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v4;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::nameAttr);
  v4 = (_DWORD *)*result;
  if (*result)
    *v4 += 2;
  *a2 = v4;
  return result;
}

uint64_t WebCore::AccessibilityObject::replaceTextInRange(uint64_t a1, const WebCore::SimpleRange *a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WebCore::Document *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  WebCore::Editor *v36;
  void *v37;
  WebCore::Editor *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  char v43;
  char v44[8];
  WTF::StringImpl *v45;
  char v46;
  WebCore::Node *v47[2];
  WebCore::Node *v48;
  char v49;
  _BYTE v50[104];

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
  if (!v6 || (v7 = v6, (*(_WORD *)(v6 + 28) & 0xF000) != 0x9000))
  {
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1))
      return 0;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
    if (!v14 || (*(_WORD *)(v14 + 28) & 8) == 0)
      return 0;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1);
    if ((*(_BYTE *)(v15 + 45) & 1) != 0)
      v16 = 0;
    else
      v16 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8);
    if ((*(_WORD *)(v16 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1956187B0);
    }
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1)
                                                                    + 24)
                                                        + 8)
                                            + 40)
                                + 8)
                    + 528);
    if (v17)
      v18 = *(_QWORD *)(v17 + 8);
    else
      v18 = 0;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 576))(v16))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v18 + 296) + 3064);
      (*(void (**)(WebCore::Node **__return_ptr, uint64_t, unsigned int *))(*(_QWORD *)a1 + 2032))(v47, a1, a3);
      if (v49)
      {
        if (*(_QWORD *)(*((_QWORD *)v47[0] + 5) + 8) != *(_QWORD *)(*((_QWORD *)v48 + 5) + 8))
          goto LABEL_34;
        WebCore::VisibleSelection::VisibleSelection((uint64_t)v50, (uint64_t)v47, 1, 0);
        if (v50[97])
          WebCore::FrameSelection::setSelection(v19, (uint64_t)v50, 6u, 0, 0, 0, 0);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v50);
        if (v49)
        {
LABEL_34:
          v21 = v48;
          v48 = 0;
          if (v21)
          {
            if (*((_DWORD *)v21 + 6) == 2)
            {
              if ((*((_WORD *)v21 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v21, v20);
            }
            else
            {
              *((_DWORD *)v21 + 6) -= 2;
            }
          }
          v22 = v47[0];
          v47[0] = 0;
          if (v22)
          {
            if (*((_DWORD *)v22 + 6) == 2)
            {
              if ((*((_WORD *)v22 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v22, v20);
            }
            else
            {
              *((_DWORD *)v22 + 6) -= 2;
            }
          }
        }
      }
      v23 = *(WebCore::Document **)(v18 + 296);
      v24 = *((_QWORD *)v23 + 382);
      if (!v24)
      {
        v36 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v36, v23);
        v38 = (WebCore::Editor *)*((_QWORD *)v23 + 382);
        *((_QWORD *)v23 + 382) = v36;
        if (v38)
        {
          WebCore::Editor::~Editor(v38, v37);
          if (*(_DWORD *)v39)
          {
            *(_QWORD *)(v39 + 496) = 0;
            *(_OWORD *)(v39 + 464) = 0u;
            *(_OWORD *)(v39 + 480) = 0u;
            *(_OWORD *)(v39 + 432) = 0u;
            *(_OWORD *)(v39 + 448) = 0u;
            *(_OWORD *)(v39 + 400) = 0u;
            *(_OWORD *)(v39 + 416) = 0u;
            *(_OWORD *)(v39 + 368) = 0u;
            *(_OWORD *)(v39 + 384) = 0u;
            *(_OWORD *)(v39 + 336) = 0u;
            *(_OWORD *)(v39 + 352) = 0u;
            *(_OWORD *)(v39 + 304) = 0u;
            *(_OWORD *)(v39 + 320) = 0u;
            *(_OWORD *)(v39 + 272) = 0u;
            *(_OWORD *)(v39 + 288) = 0u;
            *(_OWORD *)(v39 + 240) = 0u;
            *(_OWORD *)(v39 + 256) = 0u;
            *(_OWORD *)(v39 + 208) = 0u;
            *(_OWORD *)(v39 + 224) = 0u;
            *(_OWORD *)(v39 + 176) = 0u;
            *(_OWORD *)(v39 + 192) = 0u;
            *(_OWORD *)(v39 + 144) = 0u;
            *(_OWORD *)(v39 + 160) = 0u;
            *(_OWORD *)(v39 + 112) = 0u;
            *(_OWORD *)(v39 + 128) = 0u;
            *(_OWORD *)(v39 + 80) = 0u;
            *(_OWORD *)(v39 + 96) = 0u;
            *(_OWORD *)(v39 + 48) = 0u;
            *(_OWORD *)(v39 + 64) = 0u;
            *(_OWORD *)(v39 + 16) = 0u;
            *(_OWORD *)(v39 + 32) = 0u;
            *(_OWORD *)v39 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v39, v40);
          }
        }
        v24 = *((_QWORD *)v23 + 382);
      }
      WebCore::Editor::replaceSelectionWithText(v24, a2, 0, 0, 0xEu);
      return 1;
    }
    if ((*(_WORD *)(v16 + 28) & 0x10) != 0)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24);
      if (v25 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        *(_DWORD *)(v16 + 24) += 2;
        v26 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v27 = *(char **)(v26 + 8);
          v28 = *(unsigned int *)(v26 + 4) | ((unint64_t)((*(_DWORD *)(v26 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v27 = 0;
          v28 = 0x100000000;
        }
        v30 = *(_QWORD *)a3;
        v29 = *((_QWORD *)a3 + 1);
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 240) + 824))(*(_QWORD *)(v16 + 240)) & 1) != 0)
        {
          WebCore::HTMLTextFormControlElement::setRangeText((WTF::StringImpl *)v16, v27, v28, v30, v29, MEMORY[0x1E0CBF738], (uint64_t)v44);
          if (!v46)
            goto LABEL_53;
        }
        else
        {
          v44[0] = 8;
          v45 = 0;
          v46 = 1;
        }
        v32 = v45;
        v45 = 0;
        if (!v32)
          goto LABEL_53;
        goto LABEL_51;
      }
      if (v25 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
      {
        *(_DWORD *)(v16 + 24) += 2;
        v33 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v34 = *(char **)(v33 + 8);
          v35 = *(unsigned int *)(v33 + 4) | ((unint64_t)((*(_DWORD *)(v33 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v34 = 0;
          v35 = 0x100000000;
        }
        WebCore::HTMLTextFormControlElement::setRangeText((WTF::StringImpl *)v16, v34, v35, *a3, a3[2], MEMORY[0x1E0CBF738], (uint64_t)&v41);
        if (!v43 || (v32 = v42, v42 = 0, !v32))
        {
LABEL_53:
          if (*(_DWORD *)(v16 + 24) == 2)
          {
            if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v16, v31);
          }
          else
          {
            *(_DWORD *)(v16 + 24) -= 2;
          }
          return 1;
        }
LABEL_51:
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v31);
        else
          *(_DWORD *)v32 -= 2;
        goto LABEL_53;
      }
    }
    return 0;
  }
  *(_DWORD *)(v6 + 24) += 2;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1488))(a1);
  v10 = *(_QWORD *)(v7 + 1272);
  if (!v10)
    goto LABEL_13;
  if ((*(_WORD *)(v10 + 28) & 0x10) == 0)
    goto LABEL_13;
  if (*(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    goto LABEL_13;
  v9 = *(_QWORD *)(v10 + 80);
  if (!v9)
    goto LABEL_13;
  while ((*(_WORD *)(v9 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    v9 = *(_QWORD *)(v9 + 56);
    if (!v9)
      goto LABEL_13;
  }
  v11 = WebCore::AXObjectCache::getOrCreate(v8, v9, 0);
  if (v11)
    v12 = (*(uint64_t (**)(uint64_t, const WebCore::SimpleRange *, unsigned int *))(*(_QWORD *)v11 + 1800))(v11, a2, a3);
  else
LABEL_13:
    v12 = 0;
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, (void *)v9);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return v12;
}

uint64_t WebCore::AccessibilityObject::insertText(WebCore::AccessibilityObject *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  WebCore::Document *v9;
  uint64_t v10;
  WebCore::Editor *v11;
  void *v12;
  WebCore::Editor *v13;
  uint64_t v14;
  void *v15;

  if (!(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 848))(this))
    return 0;
  v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (!v4)
    return 0;
  v5 = v4;
  if ((*(_WORD *)(v4 + 28) & 8) == 0)
    return 0;
  *(_DWORD *)(v4 + 24) += 2;
  if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 112))(this) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 576))(v5))
  {
    v9 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 848))(this) + 24)
                                                                                           + 8)
                                                                               + 40)
                                                                   + 8)
                                                       + 528)
                                           + 8)
                               + 296);
    v10 = *((_QWORD *)v9 + 382);
    if (!v10)
    {
      v11 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v11, v9);
      v13 = (WebCore::Editor *)*((_QWORD *)v9 + 382);
      *((_QWORD *)v9 + 382) = v11;
      if (v13)
      {
        WebCore::Editor::~Editor(v13, v12);
        if (*(_DWORD *)v14)
        {
          *(_QWORD *)(v14 + 496) = 0;
          *(_OWORD *)(v14 + 464) = 0u;
          *(_OWORD *)(v14 + 480) = 0u;
          *(_OWORD *)(v14 + 432) = 0u;
          *(_OWORD *)(v14 + 448) = 0u;
          *(_OWORD *)(v14 + 400) = 0u;
          *(_OWORD *)(v14 + 416) = 0u;
          *(_OWORD *)(v14 + 368) = 0u;
          *(_OWORD *)(v14 + 384) = 0u;
          *(_OWORD *)(v14 + 336) = 0u;
          *(_OWORD *)(v14 + 352) = 0u;
          *(_OWORD *)(v14 + 304) = 0u;
          *(_OWORD *)(v14 + 320) = 0u;
          *(_OWORD *)(v14 + 272) = 0u;
          *(_OWORD *)(v14 + 288) = 0u;
          *(_OWORD *)(v14 + 240) = 0u;
          *(_OWORD *)(v14 + 256) = 0u;
          *(_OWORD *)(v14 + 208) = 0u;
          *(_OWORD *)(v14 + 224) = 0u;
          *(_OWORD *)(v14 + 176) = 0u;
          *(_OWORD *)(v14 + 192) = 0u;
          *(_OWORD *)(v14 + 144) = 0u;
          *(_OWORD *)(v14 + 160) = 0u;
          *(_OWORD *)(v14 + 112) = 0u;
          *(_OWORD *)(v14 + 128) = 0u;
          *(_OWORD *)(v14 + 80) = 0u;
          *(_OWORD *)(v14 + 96) = 0u;
          *(_OWORD *)(v14 + 48) = 0u;
          *(_OWORD *)(v14 + 64) = 0u;
          *(_OWORD *)(v14 + 16) = 0u;
          *(_OWORD *)(v14 + 32) = 0u;
          *(_OWORD *)v14 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v14, v15);
        }
      }
      v10 = *((_QWORD *)v9 + 382);
    }
    v6 = WebCore::EventHandler::handleTextInputEvent(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 528) + 8) + 640), a2, 0, 0);
  }
  else
  {
    v6 = 0;
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v8);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v6;
}

uint64_t WebCore::AccessibilityObject::orientation(WebCore::AccessibilityObject *this)
{
  uint64_t v1;

  (*(void (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1512))(this);
  if ((int)v1 > SHIDWORD(v1))
    return 1;
  else
    return 2 * (SHIDWORD(v1) <= (int)v1);
}

uint64_t WebCore::AccessibilityObject::ariaRoleToWebCoreRole(WebCore::AccessibilityObject *this, const WTF::String *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  WTF::StringImpl *v38;
  unsigned __int8 **v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  __int16 v45;
  char v46;
  WTF::StringImpl *v47;
  unsigned __int8 *v48[2];

  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
    return 134;
  WTF::String::simplifyWhiteSpace();
  if (v47)
  {
    v2 = *((_QWORD *)v47 + 1);
    v3 = *((unsigned int *)v47 + 1) | ((unint64_t)((*((_DWORD *)v47 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v2 = 0;
    v3 = 0x100000000;
  }
  v43 = v2;
  v44 = v3;
  v45 = 32;
  v46 = 0;
  v39 = (unsigned __int8 **)&v43;
  v40 = 0;
  v42 = (_DWORD)v3 == 0;
  result = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v39);
  v6 = v44;
  v7 = v40;
  if (v40 == (_DWORD)v44 && v42)
  {
LABEL_45:
    v30 = 134;
LABEL_46:
    v38 = v47;
    v47 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v5);
      else
        *(_DWORD *)v38 -= 2;
    }
    return v30;
  }
  v8 = MEMORY[0x1E0CBF868];
  while (1)
  {
    v9 = *((unsigned int *)v39 + 2);
    if (v9 <= v7)
    {
      v12 = 0x100000000;
      v14 = "";
      goto LABEL_17;
    }
    v10 = v41;
    if (v9 - v7 <= v41)
    {
      if (!v7)
      {
        v14 = *v39;
        v12 = (uint64_t)v39[1];
        goto LABEL_17;
      }
      v10 = v9 - v7;
    }
    v11 = v7;
    v12 = v10;
    v13 = v9 - v7;
    if (!*((_BYTE *)v39 + 12))
      break;
    if (v13 < v10)
      goto LABEL_52;
    v14 = &(*v39)[v11];
    v12 = v10 | 0x100000000;
LABEL_17:
    WebCore::initializeRoleMap((WebCore *)result);
    v15 = *(_QWORD *)qword_1ECE82180;
    if (!*(_QWORD *)qword_1ECE82180)
      goto LABEL_32;
    v16 = -1640531527;
    if ((v12 & 0xFF00000000) != 0)
    {
      if (v12 >= 2uLL)
      {
        v17 = 0;
        do
        {
          v18 = v16 + *(unsigned __int8 *)(v8 + v14[v17]);
          v19 = (v18 << 16) ^ (*(unsigned __int8 *)(v8 + v14[v17 + 1]) << 11) ^ v18;
          v16 = v19 + (v19 >> 11);
          v20 = v17 + 3;
          v17 += 2;
        }
        while (v20 < v12);
      }
      if ((v12 & 1) == 0)
        goto LABEL_25;
      v21 = *(unsigned __int8 *)(v8 + v14[v12 - 1]);
    }
    else
    {
      if (v12 >= 2uLL)
      {
        v32 = 0;
        do
        {
          v33 = &v14[2 * v32];
          v34 = *(unsigned __int16 *)v33 | (32 * (*(unsigned __int16 *)v33 - 65 < 0x1A));
          v35 = (((*((unsigned __int16 *)v33 + 1) - 65 < 0x1A) << 16) | (*((unsigned __int16 *)v33 + 1) << 11)) ^ ((v16 + v34) << 16) ^ (v16 + v34);
          v16 = v35 + (v35 >> 11);
          v36 = v32 + 3;
          v32 += 2;
        }
        while (v36 < v12);
      }
      if ((v12 & 1) == 0)
        goto LABEL_25;
      v37 = *(unsigned __int16 *)&v14[2 * v12 - 2];
      v21 = v37 | (32 * ((v37 - 65) < 0x1A));
    }
    v16 = ((v16 + v21) ^ ((v16 + v21) << 11)) + (((v16 + v21) ^ ((v16 + v21) << 11)) >> 17);
LABEL_25:
    v22 = 0;
    v23 = *(_DWORD *)(v15 - 8);
    v24 = (v16 ^ (8 * v16)) + ((v16 ^ (8 * v16)) >> 5);
    v25 = (v24 ^ (4 * v24)) + ((v24 ^ (4 * v24)) >> 15);
    v26 = (v25 ^ (v25 << 10)) & 0xFFFFFF;
    if (!v26)
      v26 = 0x800000;
    while (1)
    {
      v27 = v26 & v23;
      v28 = (uint64_t *)(v15 + 16 * v27);
      if (*v28 != -1)
      {
        if (!*v28)
          goto LABEL_32;
        v48[0] = v14;
        v48[1] = (unsigned __int8 *)v12;
        if (WTF::equalIgnoringASCIICaseCommon<WTF::String,WTF::StringView>(v28, v48))
          break;
      }
      v26 = ++v22 + v27;
    }
    v29 = v15 + 16 * v27;
    v30 = *(unsigned __int8 *)(v29 + 8);
    if (*(_BYTE *)(v29 + 8))
      goto LABEL_46;
LABEL_32:
    result = WTF::StringView::SplitResult::Iterator::operator++();
    v7 = v40;
    if (v40 == v6 && v42)
      goto LABEL_45;
  }
  if (v13 >= v10)
  {
    v14 = &(*v39)[2 * v11];
    goto LABEL_17;
  }
LABEL_52:
  __break(1u);
  return result;
}

void WebCore::AccessibilityObject::computedRoleString(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  WebCore *v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  WebCore *v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  _DWORD *v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;

  v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
  if (v4 == 49)
  {
    v5 = (WebCore *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 856))(this);
    if ((_DWORD)v5)
    {
      WebCore::initializeRoleMap(v5);
      v6 = *(_DWORD **)qword_1ECE82188;
      if (!*(_QWORD *)qword_1ECE82188)
        goto LABEL_62;
      v7 = *(v6 - 2);
      v8 = *(_QWORD *)&v7 & 0x13FCBLL;
      v9 = v6[4 * (*(_QWORD *)&v7 & 0x13FCBLL)];
      if (v9 != 86)
      {
        v10 = 1;
        while (v9 != 0x7FFFFFFF)
        {
          v8 = ((_DWORD)v8 + v10) & v7;
          v9 = v6[4 * v8];
          ++v10;
          if (v9 == 86)
            goto LABEL_58;
        }
LABEL_61:
        v6 = 0;
        goto LABEL_62;
      }
      goto LABEL_58;
    }
  }
  v11 = (WebCore *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2976))(this);
  if ((_DWORD)v11 == 127)
  {
LABEL_10:
    WebCore::initializeRoleMap(v11);
    v6 = *(_DWORD **)qword_1ECE82188;
    if (!*(_QWORD *)qword_1ECE82188)
      goto LABEL_62;
    v12 = *(v6 - 2);
    v8 = v12 & 0xFF455007;
    v13 = v6[4 * v8];
    if (v13 != 44)
    {
      v14 = 1;
      while (v13 != 0x7FFFFFFF)
      {
        v8 = ((_DWORD)v8 + v14) & v12;
        v13 = v6[4 * v8];
        ++v14;
        if (v13 == 44)
          goto LABEL_58;
      }
      goto LABEL_61;
    }
    goto LABEL_58;
  }
  if (v4 <= 57)
  {
    switch(v4)
    {
      case '$':
      case '(':
        goto LABEL_10;
      case '\'':
        WebCore::initializeRoleMap(v11);
        v6 = *(_DWORD **)qword_1ECE82188;
        if (!*(_QWORD *)qword_1ECE82188)
          goto LABEL_62;
        v15 = *(v6 - 2);
        v8 = v15 & 0xD50DB3F8;
        v16 = v6[4 * v8];
        if (v16 == 28)
          goto LABEL_58;
        v17 = 1;
        while (v16 != 0x7FFFFFFF)
        {
          v8 = ((_DWORD)v8 + v17) & v15;
          v16 = v6[4 * v8];
          ++v17;
          if (v16 == 28)
            goto LABEL_58;
        }
        goto LABEL_61;
      case ')':
        WebCore::initializeRoleMap(v11);
        v6 = *(_DWORD **)qword_1ECE82188;
        if (!*(_QWORD *)qword_1ECE82188)
          goto LABEL_62;
        v28 = *(v6 - 2);
        v8 = v28 & 0xCB9A7AEA;
        v29 = v6[4 * v8];
        if (v29 == 49)
          goto LABEL_58;
        v30 = 1;
        while (v29 != 0x7FFFFFFF)
        {
          v8 = ((_DWORD)v8 + v30) & v28;
          v29 = v6[4 * v8];
          ++v30;
          if (v29 == 49)
            goto LABEL_58;
        }
        goto LABEL_61;
      case '.':
        WebCore::initializeRoleMap(v11);
        v6 = *(_DWORD **)qword_1ECE82188;
        if (!*(_QWORD *)qword_1ECE82188)
          goto LABEL_62;
        v31 = *(v6 - 2);
        v8 = v31 & 0xE4B3615E;
        v32 = v6[4 * v8];
        if (v32 == 106)
          goto LABEL_58;
        v33 = 1;
        break;
      default:
        goto LABEL_27;
    }
    while (v32 != 0x7FFFFFFF)
    {
      v8 = ((_DWORD)v8 + v33) & v31;
      v32 = v6[4 * v8];
      ++v33;
      if (v32 == 106)
        goto LABEL_58;
    }
    goto LABEL_61;
  }
  if (v4 > 126)
  {
    if (v4 == 127)
    {
      v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (!*MEMORY[0x1E0CBF738])
        goto LABEL_62;
      goto LABEL_60;
    }
    if (v4 != 132)
      goto LABEL_27;
LABEL_35:
    WebCore::initializeRoleMap(v11);
    v6 = *(_DWORD **)qword_1ECE82188;
    if (!*(_QWORD *)qword_1ECE82188)
      goto LABEL_62;
    v25 = *(v6 - 2);
    v8 = v25 & 0x23E53D21;
    v26 = v6[4 * v8];
    if (v26 != 10)
    {
      v27 = 1;
      while (v26 != 0x7FFFFFFF)
      {
        v8 = ((_DWORD)v8 + v27) & v25;
        v26 = v6[4 * v8];
        ++v27;
        if (v26 == 10)
          goto LABEL_58;
      }
      goto LABEL_61;
    }
    goto LABEL_58;
  }
  if (v4 != 58)
  {
    if (v4 != 84)
    {
LABEL_27:
      WebCore::initializeRoleMap(v11);
      v6 = *(_DWORD **)qword_1ECE82188;
      if (!*(_QWORD *)qword_1ECE82188)
        goto LABEL_62;
      v18 = *(v6 - 2);
      v19 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
      v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
      v21 = v18 & (v20 ^ HIWORD(v20));
      v22 = v6[4 * v21];
      if (v22 != v4)
      {
        v23 = 1;
        while (v22 != 0x7FFFFFFF)
        {
          v21 = ((_DWORD)v21 + v23) & v18;
          v22 = v6[4 * v21];
          ++v23;
          if (v22 == v4)
            goto LABEL_32;
        }
        goto LABEL_61;
      }
LABEL_32:
      v24 = &v6[4 * v21];
      goto LABEL_59;
    }
    goto LABEL_35;
  }
  WebCore::initializeRoleMap(v11);
  v6 = *(_DWORD **)qword_1ECE82188;
  if (!*(_QWORD *)qword_1ECE82188)
    goto LABEL_62;
  v34 = *(v6 - 2);
  v8 = v34 & 0xB18A4245;
  v35 = v6[4 * v8];
  if (v35 != 61)
  {
    v36 = 1;
    while (v35 != 0x7FFFFFFF)
    {
      v8 = ((_DWORD)v8 + v36) & v34;
      v35 = v6[4 * v8];
      ++v36;
      if (v35 == 61)
        goto LABEL_58;
    }
    goto LABEL_61;
  }
LABEL_58:
  v24 = &v6[4 * v8];
LABEL_59:
  v6 = (_DWORD *)*((_QWORD *)v24 + 1);
  if (v6)
LABEL_60:
    *v6 += 2;
LABEL_62:
  *a2 = v6;
}

double WebCore::AccessibilityObject::updateRole(WebCore::AccessibilityObject *this)
{
  int v2;
  int v3;
  double result;
  WebCore::AXObjectCache *v5;

  v2 = *((unsigned __int8 *)this + 57);
  v3 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 3016))(this);
  *((_BYTE *)this + 57) = v3;
  if (v2 != v3)
  {
    v5 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
    if (v5)
      return WebCore::AXObjectCache::handleRoleChanged(v5, this);
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::hasHighlighting(WebCore::AccessibilityObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    while ((*(_WORD *)(result + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::markTag + 24))
    {
      result = *(_QWORD *)(result + 32);
      if (!result)
        return result;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::colorValue(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::rolePlatformString@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
  *a2 = 0;
  return result;
}

void WebCore::AccessibilityObject::subrolePlatformString(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::AccessibilityObject::embeddedImageDescription@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 848))(this);
  if (result && (v4 = result, (((*(_BYTE *)(result + 52) & 7) == 3) & *(_BYTE *)(result + 53)) != 0))
  {
    ++*(_DWORD *)(result + 16);
    v5 = *(_QWORD *)(result + 224);
    v7 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v5 + 32))(&v8, v5, &v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 232))(v8);
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
    v6 = *(_DWORD *)(v4 + 16);
    if (v6)
    {
      *(_DWORD *)(v4 + 16) = v6 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void WebCore::AccessibilityObject::roleDescription(WebCore::AccessibilityObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
  if (v4 != 38 && v4 != 134)
  {
    WebCore::AccessibilityObject::getAttributeTrimmed(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_roledescriptionAttr, a2);
    v6 = *a2;
    if (*a2)
    {
      if (*((_DWORD *)v6 + 1))
        return;
      *a2 = 0;
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    else
    {
      *a2 = 0;
    }
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 34)
  {
    WebCore::AXFigureText((uint64_t)a2);
  }
  else if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 110)
  {
    WebCore::AXSuggestionRoleDescriptionText((uint64_t)a2);
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t WebCore::AccessibilityObject::supportsPressAction(WebCore::AccessibilityObject *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  char *v15;
  uint64_t v16;
  int v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  void *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
  v3 = 1;
  if (v2 == 10
    || v2 == 84
    || v2 == 132
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 26)
  {
    return v3;
  }
  v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1504))(this);
  if (!v4)
    return 0;
  v5 = v4;
  *(_DWORD *)(v4 + 24) += 2;
  if ((WebCore::nodeHasRole(v4, (int16x8_t *)"presentation", 0x10000000CLL) & 1) != 0
    || (WebCore::nodeHasRole(v5, (int16x8_t *)"none", 0x100000004) & 1) != 0)
  {
    v3 = 0;
    goto LABEL_9;
  }
  v8 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
  if (!v8)
  {
LABEL_9:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    return v3;
  }
  v9 = v8;
  if (v5 == (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 832))(this)
    || (v10 = WebCore::AXObjectCache::getOrCreate(v9, v5, 0)) == 0)
  {
    v3 = 1;
    goto LABEL_9;
  }
  v11 = v10;
  v52 = 0;
  v12 = *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 1896))(v10, 1) + 12);
  if (v12 >= 0x1FF)
    v12 = 511;
  v13 = v12 + 1;
  v15 = (char *)WTF::fastMalloc((WTF *)(8 * (v12 + 1)));
  LODWORD(v52) = v13;
  v51 = v15;
  v16 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEA534C](v16);
LABEL_24:
  ++*(_QWORD *)(v16 + 8);
  v18 = __ldxr((unsigned __int8 *)v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v16))
      goto LABEL_29;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v16);
LABEL_29:
  *(_QWORD *)v15 = v11;
  v19 = __CFADD__(HIDWORD(v52), 1);
  LODWORD(v20) = ++HIDWORD(v52);
  if (v19)
  {
LABEL_31:
    v3 = 1;
LABEL_32:
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v14);
    goto LABEL_9;
  }
  v21 = 0;
  v22 = 0;
  while (1)
  {
    v20 = v20 - 1;
    v23 = v51;
    v24 = *(_QWORD **)&v51[8 * v20];
    *(_QWORD *)&v51[8 * v20] = 0;
    HIDWORD(v52) = v20;
    if (!v24)
      goto LABEL_60;
    if (((*(unsigned int (**)(_QWORD *))(*v24 + 1456))(v24) == 107
       || ((*(uint64_t (**)(_QWORD *))(*v24 + 144))(v24) & 1) != 0
       || (*(unsigned int (**)(_QWORD *))(*v24 + 1456))(v24) == 49
       || (*(unsigned int (**)(_QWORD *))(*v24 + 1456))(v24) == 45
       || (*(unsigned int (**)(_QWORD *))(*v24 + 104))(v24))
      && (++v22, v22 > 1)
      || (++v21, v21 > 0x1FF))
    {
      v25 = 0;
      goto LABEL_42;
    }
    v33 = v20 + v21;
    v19 = v33 <= 0x200;
    v34 = 512 - v33;
    if (v19)
      v35 = v34;
    else
      v35 = 0;
    v25 = 1;
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v24 + 1896))(v24, 1);
    v36 = 256;
    if (v35 < 0x100)
      v36 = v35;
    if (v36)
    {
      v37 = v36 >= *(unsigned int *)(result + 12) ? *(unsigned int *)(result + 12) : v36;
      if (v37)
        break;
    }
LABEL_42:
    v26 = v24[1];
    if (__ldaxr((unsigned __int8 *)v26))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v26))
    {
      goto LABEL_46;
    }
    MEMORY[0x19AEA534C](v26);
LABEL_46:
    v28 = *(_QWORD *)(v26 + 8);
    v29 = v28 - 1;
    *(_QWORD *)(v26 + 8) = v28 - 1;
    if (v28 == 1)
    {
      v50 = *(_QWORD *)(v26 + 16);
      v30 = *(_QWORD *)(v26 + 24);
      *(_QWORD *)(v26 + 24) = 0;
      v31 = v50 != 0;
    }
    else
    {
      v30 = 0;
      v31 = 1;
    }
    v32 = __ldxr((unsigned __int8 *)v26);
    if (v32 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v26))
        goto LABEL_53;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_53:
    if (!v29)
    {
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      if (!v31)
        WTF::fastFree((WTF *)v26, v14);
    }
    if (!v25)
    {
      v3 = 0;
      goto LABEL_32;
    }
    LODWORD(v20) = HIDWORD(v52);
LABEL_60:
    if (!(_DWORD)v20)
      goto LABEL_31;
  }
  v38 = *(uint64_t **)result;
  v39 = v37 + v20;
  if (v37 + v20 <= v52)
    goto LABEL_82;
  v40 = v52 + ((unint64_t)v52 >> 2);
  if (v40 >= 0x10)
    v41 = v40 + 1;
  else
    v41 = 16;
  if (v41 > v39)
    v39 = v41;
  if (!(v39 >> 29))
  {
    v42 = (char *)WTF::fastMalloc((WTF *)(8 * v39));
    LODWORD(v52) = v39;
    v51 = v42;
    memcpy(v42, v23, 8 * v20);
    if (v42 == v23)
    {
      v42 = 0;
      v51 = 0;
      LODWORD(v52) = 0;
    }
    WTF::fastFree((WTF *)v23, v43);
    v23 = v42;
    LODWORD(v39) = v37 + v20;
LABEL_82:
    v44 = 8 * v37;
    v45 = &v23[8 * v20];
    while (2)
    {
      v46 = *v38;
      if (*v38)
      {
        v47 = *(_QWORD *)(v46 + 8);
        if (__ldaxr((unsigned __int8 *)v47))
        {
          __clrex();
          goto LABEL_87;
        }
        if (__stxr(1u, (unsigned __int8 *)v47))
LABEL_87:
          MEMORY[0x19AEA534C](v47);
        ++*(_QWORD *)(v47 + 8);
        v49 = __ldxr((unsigned __int8 *)v47);
        if (v49 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v47))
            goto LABEL_93;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v47);
      }
LABEL_93:
      *(_QWORD *)v45 = v46;
      v45 += 8;
      ++v38;
      v44 -= 8;
      if (!v44)
      {
        HIDWORD(v52) = v39;
        v25 = 1;
        goto LABEL_42;
      }
      continue;
    }
  }
  __break(0xC471u);
  return result;
}

BOOL WebCore::AccessibilityObject::supportsDatetimeAttribute(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BOOL8 v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (v2 && (*(_WORD *)(v2 + 28) & 8) != 0)
  {
    v4 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v4 + 2;
    v5 = *(_QWORD *)(v2 + 96);
    if (v5 == WebCore::HTMLNames::insTag)
      goto LABEL_22;
    if (*(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::insTag + 24))
    {
      v13 = *(_QWORD *)(v5 + 32);
      v14 = *(_QWORD *)(WebCore::HTMLNames::insTag + 32);
      if (v4)
      {
        *(_DWORD *)(v2 + 24) = v4;
      }
      else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
      }
      if (v13 == v14)
        return 1;
    }
    else if (v4)
    {
      *(_DWORD *)(v2 + 24) = v4;
    }
    else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
    }
  }
  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (v2 && (*(_WORD *)(v2 + 28) & 8) != 0)
  {
    v4 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v4 + 2;
    v6 = *(_QWORD *)(v2 + 96);
    if (v6 != WebCore::HTMLNames::delTag)
    {
      if (*(_QWORD *)(v6 + 24) != *(_QWORD *)(WebCore::HTMLNames::delTag + 24))
      {
        if (v4)
        {
          *(_DWORD *)(v2 + 24) = v4;
        }
        else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
        }
        goto LABEL_13;
      }
      v15 = *(_QWORD *)(v6 + 32);
      v16 = *(_QWORD *)(WebCore::HTMLNames::delTag + 32);
      if (v4)
      {
        *(_DWORD *)(v2 + 24) = v4;
      }
      else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
      }
      if (v15 != v16)
        goto LABEL_13;
      return 1;
    }
LABEL_22:
    if (v4)
    {
      *(_DWORD *)(v2 + 24) = v4;
    }
    else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
    }
    return 1;
  }
LABEL_13:
  v7 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (!v7 || (*(_WORD *)(v7 + 28) & 8) == 0)
    return 0;
  v10 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v10 + 2;
  v11 = *(_QWORD *)(v7 + 96);
  if (v11 == WebCore::HTMLNames::timeTag)
    v9 = 1;
  else
    v9 = *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::timeTag + 24)
      && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::timeTag + 32);
  if (v10)
  {
    *(_DWORD *)(v7 + 24) = v10;
  }
  else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
  }
  return v9;
}

_QWORD *WebCore::AccessibilityObject::datetimeAttributeValue@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v4;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::datetimeAttr);
  v4 = (_DWORD *)*result;
  if (*result)
    *v4 += 2;
  *a2 = v4;
  return result;
}

_QWORD *WebCore::AccessibilityObject::linkRelValue@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v4;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::relAttr);
  v4 = (_DWORD *)*result;
  if (*result)
    *v4 += 2;
  *a2 = v4;
  return result;
}

uint64_t WebCore::AccessibilityObject::isLoaded(WebCore::AccessibilityObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (result)
    return *(_QWORD *)(result + 728) == 0;
  return result;
}

uint64_t WebCore::AccessibilityObject::isInlineText(WebCore::AccessibilityObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 848))(this);
  if (result)
    return (*(unsigned __int8 *)(result + 45) >> 5) & 1;
  return result;
}

BOOL WebCore::AccessibilityObject::supportsKeyShortcuts(WebCore::AccessibilityObject *this)
{
  return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_keyshortcutsAttr);
}

_QWORD *WebCore::AccessibilityObject::keyShortcuts@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v4;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_keyshortcutsAttr);
  v4 = (_DWORD *)*result;
  if (*result)
    *v4 += 2;
  *a2 = v4;
  return result;
}

uint64_t WebCore::AccessibilityObject::element(WebCore::AccessibilityObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    if ((*(_WORD *)(result + 28) & 8) == 0)
      return 0;
  }
  return result;
}

BOOL WebCore::AccessibilityObject::isValueAutofillAvailable(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  void *v3;
  int v4;
  _BOOL8 v5;

  if (!(*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 120))(this))
    return 0;
  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (!v2
    || (*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return 0;
  }
  v4 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v4 + 2;
  v5 = (*(_WORD *)(v2 + 232) & 8) != 0 || (*(_WORD *)(v2 + 230) & 0x3800) != 0;
  if (v4)
  {
    *(_DWORD *)(v2 + 24) = v4;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  return v5;
}

uint64_t WebCore::AccessibilityObject::valueAutofillButtonType(WebCore::AccessibilityObject *this)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2200))(this);
  if ((_DWORD)result)
  {
    v3 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
    if ((*(_WORD *)(v3 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      return (*(unsigned __int16 *)(v3 + 230) >> 11) & 7;
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

BOOL WebCore::AccessibilityObject::isSelected(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Node *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  const WebCore::Page *v9;
  WebCore::AXObjectCache *v10;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _BOOL8 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  WebCore::AccessibilityObject *v26;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::Node *v41;
  uint64_t v42;
  WTF *v43;
  WTF *v44;
  int v45;
  unsigned int v46;

  if (!(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 848))(this)
    && !(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this))
  {
    return 0;
  }
  v2 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_selectedAttr);
  if (!v2 || *(_DWORD *)(v2 + 4) != 4)
    goto LABEL_4;
  v28 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v28 & 0xDF) == 0x54 && (*(_BYTE *)(v28 + 1) & 0xDF) == 0x52 && (*(_BYTE *)(v28 + 2) & 0xDF) == 0x55)
    {
      v29 = *(unsigned __int8 *)(v28 + 3);
      goto LABEL_45;
    }
  }
  else if ((*(_WORD *)v28 & 0xFFDF) == 0x54
         && (*(_WORD *)(v28 + 2) & 0xFFDF) == 0x52
         && (*(_WORD *)(v28 + 4) & 0xFFDF) == 0x55)
  {
    v29 = *(unsigned __int16 *)(v28 + 6);
LABEL_45:
    if ((v29 & 0xFFFFFFDF) == 0x45)
      return 1;
  }
LABEL_4:
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) != 121
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) != 121
    || !(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 848))(this)
    && !(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this))
  {
    goto LABEL_23;
  }
  v3 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (!v3)
    goto LABEL_23;
  v4 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v3);
  if (!v4)
    goto LABEL_23;
  v6 = v4;
  do
    v7 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v7 + 1, (unsigned int *)v4));
  v8 = *(_QWORD *)(v4 + 8);
  if (!v8 || (*(_WORD *)(v8 + 28) & 8) == 0)
    goto LABEL_19;
  v9 = (const WebCore::Page *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1704))(this);
  v10 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
  if (!v9 || v10 == 0)
    goto LABEL_19;
  v32 = WebCore::AXObjectCache::focusedObjectForPage(v10, v9);
  v12 = v32;
  if (!v32)
    goto LABEL_20;
  v33 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
  if (!v33)
  {
LABEL_19:
    LOBYTE(v12) = 0;
    goto LABEL_20;
  }
  v34 = v33;
  WebCore::AccessibilityObject::elementsFromAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_controlsAttr, (WTF::StringImpl *)&v44);
  v35 = v44;
  if (!v46)
  {
    LOBYTE(v12) = 0;
    goto LABEL_76;
  }
  v36 = (WTF *)((char *)v44 + 8 * v46);
  while (1)
  {
    v5 = *(WebCore::Node **)v35;
    if (*(_QWORD *)v35)
    {
      v37 = WebCore::AXObjectCache::getOrCreate(v34, (uint64_t)v5, 0);
      if (v37)
      {
        v38 = v37;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 1456))(v37) == 120)
          break;
      }
    }
LABEL_63:
    v35 = (WTF *)((char *)v35 + 8);
    if (v35 == v36)
    {
      LOBYTE(v12) = 0;
      goto LABEL_66;
    }
  }
  v39 = v12;
  while (v38 != v39)
  {
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 1232))(v39);
    if (!v39)
      goto LABEL_63;
  }
  LOBYTE(v12) = 1;
LABEL_66:
  v35 = v44;
  if (!v46)
  {
LABEL_76:
    if (!v35)
      goto LABEL_20;
    goto LABEL_77;
  }
  v40 = 8 * v46;
  do
  {
    v41 = *(WebCore::Node **)v35;
    *(_QWORD *)v35 = 0;
    if (v41)
    {
      if (*((_DWORD *)v41 + 6) == 2)
      {
        if ((*((_WORD *)v41 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v41, v5);
      }
      else
      {
        *((_DWORD *)v41 + 6) -= 2;
      }
    }
    v35 = (WTF *)((char *)v35 + 8);
    v40 -= 8;
  }
  while (v40);
  v35 = v44;
  if (v44)
  {
LABEL_77:
    v44 = 0;
    v45 = 0;
    WTF::fastFree(v35, v5);
    goto LABEL_20;
  }
  do
  {
LABEL_20:
    v13 = __ldaxr((unsigned int *)v6);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v6));
  if (v14)
  {
    if ((v12 & 1) != 0)
      return 1;
  }
  else
  {
    atomic_store(1u, (unsigned int *)v6);
    v42 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v42)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v42));
    v43 = *(WTF **)(v6 + 16);
    if (v43)
    {
      *(_QWORD *)(v6 + 16) = 0;
      *(_DWORD *)(v6 + 24) = 0;
      WTF::fastFree(v43, v5);
    }
    WTF::fastFree((WTF *)v6, v5);
    if ((v12 & 1) != 0)
      return 1;
  }
LABEL_23:
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) - 76 > 2)
    return 0;
  if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 552))(this) & 1) != 0)
    return 1;
  v16 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1240))(this);
  if (!v16)
    return 0;
  v18 = v16;
  v19 = *(_QWORD *)(v16 + 32);
  if (!v19)
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = v18;
    v20 = *(unsigned int **)(v18 + 32);
    *(_QWORD *)(v18 + 32) = v19;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v17);
      }
      v19 = *(_QWORD *)(v18 + 32);
      if (!v19)
        return 0;
    }
  }
  do
    v23 = __ldaxr((unsigned int *)v19);
  while (__stlxr(v23 + 1, (unsigned int *)v19));
  v24 = *(_QWORD *)(v19 + 8);
  if (v24)
  {
    (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v24 + 984))(&v44, v24, 1);
    if (v46)
      v26 = *(WebCore::AccessibilityObject **)v44;
    else
      v26 = 0;
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v25);
    v15 = v26 == this;
  }
  else
  {
    v15 = 0;
  }
  do
  {
    v30 = __ldaxr((unsigned int *)v19);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, (unsigned int *)v19));
  if (!v31)
  {
    atomic_store(1u, (unsigned int *)v19);
    WTF::fastFree((WTF *)v19, v17);
  }
  return v15;
}

uint64_t WebCore::AccessibilityObject::focusedUIElement(WebCore::AccessibilityObject *this)
{
  const WebCore::Page *v2;
  WebCore::AXObjectCache *v3;
  BOOL v4;

  v2 = (const WebCore::Page *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1704))(this);
  v3 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  else
    return WebCore::AXObjectCache::focusedObjectForPage(v3, v2);
}

unsigned int *WebCore::AccessibilityObject::elementsFromAttribute@<X0>(WebCore::AccessibilityObject *this@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, WTF::StringImpl *a3@<X8>)
{
  unsigned int *result;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::String *v10;
  __n128 v11;
  WebCore::QualifiedName::QualifiedNameImpl *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  const WebCore::TreeScope *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const WTF::AtomString *v32;
  uint64_t v33;
  unsigned int *v34;
  void *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  unsigned int *v38;
  WebCore::Node *v39;
  uint64_t *v40;
  unsigned int *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::Node *v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  WebCore::Node *v54;
  uint64_t v55;
  WTF *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unsigned int *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  unsigned int *v62;
  WebCore::Node *v63;

  result = (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (!result || (v7 = result, (result[7] & 8) == 0))
  {
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    return result;
  }
  result[6] += 2;
  v8 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  v12 = *a2;
  if (*a2 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_activedescendantAttr
    || (v13 = *(_QWORD *)(v8 + 680), (*(_QWORD *)(v13 + 688) & 0x20000000) != 0)
    && v12 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::popovertargetAttr
    || (*(_QWORD *)(v13 + 680) & 0x80000000) != 0
    && v12 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::invoketargetAttr)
  {
    WebCore::Element::getElementAttribute((WebCore::Element *)v7, a2, (uint64_t *)&v57);
    v49 = v57;
    if (v57)
    {
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v63 = v49;
      v57 = 0;
      v50 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, 1uLL, (unint64_t)&v63);
      v51 = *((unsigned int *)a3 + 3);
      v52 = *(unsigned int **)a3;
      v53 = *v50;
      *v50 = 0;
      *(_QWORD *)&v52[2 * v51] = v53;
      v54 = v63;
      *((_DWORD *)a3 + 3) = v51 + 1;
      v63 = 0;
      if (v54)
      {
        if (*((_DWORD *)v54 + 6) == 2)
        {
          if ((*((_WORD *)v54 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v54, v43);
        }
        else
        {
          *((_DWORD *)v54 + 6) -= 2;
        }
      }
      result = (unsigned int *)v57;
      v57 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, v43);
        }
        else
        {
          result[6] -= 2;
        }
      }
      goto LABEL_36;
    }
    goto LABEL_14;
  }
  v14 = *((unsigned __int16 *)v12 + 5) - 307;
  v15 = v14 > 0x19;
  v16 = (1 << v14) & 0x2040295;
  v17 = v15 || v16 == 0;
  if (v17
    || (result = (unsigned int *)WebCore::Element::getElementsArrayAttribute((WebCore::Element *)v7, a2, v9, v10, (uint64_t)&v57, v11), !(_BYTE)v59))
  {
LABEL_14:
    result = (unsigned int *)WebCore::AccessibilityObject::getAttribute(this, a2);
    v18 = *(WTF::StringImpl **)result;
    if (*(_QWORD *)result && *((_DWORD *)v18 + 1))
    {
      v24 = (const WebCore::TreeScope *)*((_QWORD *)v7 + 5);
      *(_DWORD *)v18 += 2;
      v57 = v18;
      WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v57, (const WTF::AtomString *)v43, &v56);
      v26 = v57;
      v57 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = v56;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      if (!v27)
        goto LABEL_32;
      v28 = *((unsigned int *)v27 + 3);
      if (!(_DWORD)v28)
        goto LABEL_32;
      if (!(v28 >> 29))
      {
        v30 = WTF::fastMalloc((WTF *)(8 * v28));
        *((_DWORD *)a3 + 2) = v28;
        *(_QWORD *)a3 = v30;
        if (v56)
        {
          v31 = *((unsigned int *)v56 + 3);
          if ((_DWORD)v31)
          {
            v32 = (WTF *)((char *)v56 + 16);
            v33 = 8 * v31;
            do
            {
              if (*(_QWORD *)v32)
              {
                if (*(_DWORD *)(*(_QWORD *)v32 + 4))
                {
                  v34 = (unsigned int *)*((_QWORD *)v24 + 3);
                  if (v34)
                  {
                    WebCore::TreeScopeOrderedMap::getElementById(v34, v32, v24, (uint64_t *)&v57);
                    v36 = v57;
                    if (v57)
                    {
                      v63 = v57;
                      v57 = 0;
                      v37 = *((unsigned int *)a3 + 3);
                      if ((_DWORD)v37 == *((_DWORD *)a3 + 2))
                      {
                        v40 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, v37 + 1, (unint64_t)&v63);
                        v37 = *((unsigned int *)a3 + 3);
                        v41 = *(unsigned int **)a3;
                        v42 = *v40;
                        *v40 = 0;
                        *(_QWORD *)&v41[2 * v37] = v42;
                      }
                      else
                      {
                        v38 = *(unsigned int **)a3;
                        v63 = 0;
                        *(_QWORD *)&v38[2 * v37] = v36;
                      }
                      *((_DWORD *)a3 + 3) = v37 + 1;
                      v39 = v63;
                      v63 = 0;
                      if (v39)
                      {
                        if (*((_DWORD *)v39 + 6) == 2)
                        {
                          if ((*((_WORD *)v39 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v39, v35);
                        }
                        else
                        {
                          *((_DWORD *)v39 + 6) -= 2;
                        }
                      }
                    }
                  }
                }
              }
              v32 = (const WTF::AtomString *)((char *)v32 + 8);
              v33 -= 8;
            }
            while (v33);
            v29 = *((unsigned int *)a3 + 3);
            goto LABEL_33;
          }
        }
LABEL_32:
        v29 = 0;
LABEL_33:
        WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a3, v29);
        result = (unsigned int *)v56;
        v56 = 0;
        if (result)
        {
          if (result[2] == 1)
            result = (unsigned int *)WebCore::SpaceSplitStringData::destroy((WTF *)result, (WTF::StringImpl *)v43);
          else
            --result[2];
        }
        goto LABEL_36;
      }
      __break(0xC471u);
LABEL_97:
      JUMPOUT(0x19561A7FCLL);
    }
    v19 = *((_QWORD *)v7 + 9);
    if ((v19 & 0x3000000000000000) != 0x2000000000000000
      && ((v19 & 0x3000000000000000) != 0x3000000000000000 || (v7[7] & 0x100) != 0)
      || (v20 = v19 & 0xFFFFFFFFFFFFLL) == 0
      || (v21 = *(_QWORD *)(v20 + 104)) == 0)
    {
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      goto LABEL_36;
    }
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    result = (unsigned int *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v21 + 8), a2);
    v22 = *(unsigned int **)(v21 + 8);
    if (v22)
      v22 += 8 * *(v22 - 1);
    if (v22 == result)
      goto LABEL_36;
    v57 = (WTF::StringImpl *)v7;
    v58 = a3;
    v59 = v7;
    v60 = a3;
    v61 = a3;
    v62 = v7;
    v23 = result[6];
    if ((_DWORD)v23 != -1)
    {
      v63 = (WebCore::Node *)&v57;
      result = (unsigned int *)((uint64_t (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore24CustomElementDefaultARIA20elementsForAttributeERKNS8_7ElementERKNS8_13QualifiedNameEE3__0JZNKS9_20elementsForAttributeESC_SF_E3__1ZNKS9_20elementsForAttributeESC_SF_E3__2EEEEEJRKNS0_6__implIJNS6_10AtomStringENS6_7WeakPtrISA_NS8_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISO_EEEENS6_6VectorISR_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v23])(&v63, result + 2);
      goto LABEL_36;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_81;
  }
  v44 = HIDWORD(v58);
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_DWORD *)a3 + 3) = v44;
  if ((_DWORD)v44)
  {
    if (v44 >> 29)
    {
      __break(0xC471u);
      goto LABEL_97;
    }
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v44));
    *((_DWORD *)a3 + 2) = v44;
    *(_QWORD *)a3 = result;
    v45 = HIDWORD(v58);
    if (HIDWORD(v58))
    {
      v46 = v57;
      v47 = 8 * HIDWORD(v58);
      do
      {
        v48 = *(_QWORD *)v46;
        v46 = (WTF::StringImpl *)((char *)v46 + 8);
        *(_DWORD *)(v48 + 24) += 2;
        *(_QWORD *)result = v48;
        result += 2;
        v47 -= 8;
      }
      while (v47);
    }
  }
  else
  {
    v45 = 0;
  }
  if ((_BYTE)v59)
  {
    a3 = v57;
    if (!v45)
    {
      if (!v57)
        goto LABEL_36;
      goto LABEL_71;
    }
LABEL_81:
    v55 = 8 * v45;
    do
    {
      result = *(unsigned int **)a3;
      *(_QWORD *)a3 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, v43);
        }
        else
        {
          result[6] -= 2;
        }
      }
      a3 = (WTF::StringImpl *)((char *)a3 + 8);
      v55 -= 8;
    }
    while (v55);
    a3 = v57;
    if (!v57)
      goto LABEL_36;
LABEL_71:
    v57 = 0;
    LODWORD(v58) = 0;
    result = (unsigned int *)WTF::fastFree(a3, v43);
  }
LABEL_36:
  if (v7[6] == 2)
  {
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v7, v43);
  }
  else
  {
    v7[6] -= 2;
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::textLength(WebCore::AccessibilityObject *this)
{
  WTF::StringImpl *v1;
  unsigned int *v2;
  uint64_t v3;
  WTF::StringImpl *v5;

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 1400))(&v5);
  v2 = (unsigned int *)v5;
  if (!v5)
    return 0;
  v5 = 0;
  v3 = v2[1];
  if (*v2 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, v1);
  else
    *v2 -= 2;
  return v3;
}

unsigned int *WebCore::AccessibilityObject::textContent@<X0>(WebCore::AccessibilityObject *this@<X0>, _BYTE *a2@<X8>)
{
  int v4;
  BOOL v5;
  int v7;
  BOOL v8;
  WTF::StringImpl *v10;
  void *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  void *v14;
  int v15;
  uint64_t v16;
  void *v17;
  WebCore::Node *v18;
  unsigned int *result;
  WTF::StringImpl *v20;
  _QWORD v21[2];
  WebCore::Node *v22[2];
  WebCore::Node *v23;
  char v24;
  _QWORD v25[2];
  uint64_t v26;
  unsigned __int8 v27;

  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) != 107
    && (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) != 139)
  {
    v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
    v5 = (v4 - 101) > 0x19 || ((1 << (v4 - 101)) & 0x3000001) == 0;
    if (v5 && v4 != 19)
    {
      result = (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
      if ((_DWORD)result != 121)
        goto LABEL_48;
    }
  }
  LOBYTE(v25[0]) = 0;
  v27 = 0;
  v7 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
  v8 = (v7 - 101) > 0x19 || ((1 << (v7 - 101)) & 0x3000001) == 0;
  if (!v8 || v7 == 19)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)this + 1400))(&v20, this);
    v10 = v20;
    if (v20)
      v10 = (WTF::StringImpl *)*((unsigned int *)v20 + 1);
    v21[0] = 0;
    v21[1] = v10;
    (*(void (**)(WebCore::Node **__return_ptr, WebCore::AccessibilityObject *, _QWORD *))(*(_QWORD *)this + 2032))(v22, this, v21);
    std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)v25, (uint64_t *)v22);
    if (v24)
    {
      v12 = v23;
      v23 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, v11);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      v13 = v22[0];
      v22[0] = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13, v11);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
    }
    result = (unsigned int *)v20;
    v20 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v11);
      else
        *result -= 2;
    }
  }
  else
  {
    (*(void (**)(WebCore::Node **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)this + 1960))(v22, this);
    result = (unsigned int *)std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)v25, (uint64_t *)v22);
    if (v24)
    {
      v18 = v23;
      v23 = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v18, v17);
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
      result = (unsigned int *)v22[0];
      v22[0] = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, v17);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
  }
  if (v27)
  {
    result = (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityObject *, _QWORD *))(*(_QWORD *)this
                                                                                                 + 2048))(this, v25);
    v15 = v27;
    a2[8] = 1;
    if (v15)
    {
      v16 = v26;
      v26 = 0;
      if (v16)
      {
        if (*(_DWORD *)(v16 + 24) == 2)
        {
          if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v16, v14);
        }
        else
        {
          *(_DWORD *)(v16 + 24) -= 2;
        }
      }
      result = (unsigned int *)v25[0];
      v25[0] = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, v14);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
  }
  else
  {
LABEL_48:
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_QWORD *WebCore::AccessibilityObject::placeholderValue@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v5;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::placeholderAttr);
  v5 = (_DWORD *)*result;
  if (*result && v5[1]
    || (result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_placeholderAttr), (v5 = (_DWORD *)*result) != 0)&& v5[1]|| (v5 = (_DWORD *)*MEMORY[0x1E0CBF2F8]) != 0)
  {
    *v5 += 2;
  }
  *a2 = v5;
  return result;
}

BOOL WebCore::AccessibilityObject::supportsARIAAttributes(WebCore::AccessibilityObject *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  BOOL IsEnabled;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 2232))(&v9);
  v3 = v9;
  if (v9)
  {
    if ((*((_BYTE *)v9 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v9 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v9, v2);
      v3 = v10;
    }
  }
  v10 = v3;
  IsEnabled = WebCore::AXCoreObject::liveRegionStatusIsEnabled((uint64_t *)&v10);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v9;
  v9 = 0;
  if (!v7)
  {
LABEL_10:
    if (IsEnabled)
      return 1;
    goto LABEL_11;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v7, v4);
  if (IsEnabled)
    return 1;
LABEL_11:
  if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1176))(this) & 1) == 0
    && ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1168))(this) & 1) == 0
    && ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 976))(this) & 1) == 0
    && !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_atomicAttr)&& !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_busyAttr)&& !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_controlsAttr)&& !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_currentAttr)&& !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_describedbyAttr)&& !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_detailsAttr)&& !WebCore::AccessibilityObject::hasAttribute(this,
          (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_disabledAttr)
    && !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_errormessageAttr)&& !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_flowtoAttr)&& !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_haspopupAttr)&& !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_invalidAttr)&& !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr)&& !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelledbyAttr))
  {
    return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_relevantAttr);
  }
  return 1;
}

WebCore::AccessibilityObject *WebCore::AccessibilityObject::elementAccessibilityHitTest(WebCore::AccessibilityObject *this, const WebCore::IntPoint *a2)
{
  WebCore::AccessibilityObject *v3;
  uint64_t v4;
  WebCore::Widget *v5;
  WebCore::AXObjectCache *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *i;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  signed int v20;
  signed int v21;
  int v23;
  const CGRect *v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  void *v30;
  CGRect v31;

  v3 = this;
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 128))(this))
  {
    v4 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v3 + 1688))(v3);
    if (v4)
    {
      v5 = (WebCore::Widget *)v4;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4))
      {
        v6 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v3 + 1488))(v3);
        if (v6)
        {
          v7 = WebCore::AXObjectCache::getOrCreate(v6, v5);
          v8 = (void *)*((_QWORD *)v5 + 5);
          if (v8)
          {
            v30 = (void *)*((_QWORD *)v5 + 5);
            if (objc_msgSend(v8, "conformsToProtocol:", &unk_1EE342188))
              objc_msgSend((id)objc_msgSend(v30, "superview"), "frame");
            else
              objc_msgSend(v30, "frame");
            v31.origin.x = v26;
            v31.origin.y = v27;
            v31.size.width = v28;
            v31.size.height = v29;
            v9 = WebCore::enclosingIntRect(&v31, v25);
          }
          else
          {
            v9 = *((_QWORD *)v5 + 6);
          }
          v10 = *((_DWORD *)a2 + 1);
          LODWORD(v31.origin.x) = *(_DWORD *)a2 - v9;
          HIDWORD(v31.origin.x) = v10 - HIDWORD(v9);
          return (WebCore::AccessibilityObject *)(*(uint64_t (**)(uint64_t, CGRect *))(*(_QWORD *)v7 + 1208))(v7, &v31);
        }
      }
    }
  }
  v11 = *((unsigned int *)v3 + 13);
  if (!(_DWORD)v11)
    return v3;
  v12 = 8 * v11;
  for (i = (_QWORD *)*((_QWORD *)v3 + 5); ; ++i)
  {
    v14 = *i;
    if (*i && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v14 + 472))(*i))
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 1512))(v14);
      v18 = *((_DWORD *)a2 + 1);
      v19 = *(_DWORD *)a2 << 6;
      if (*(int *)a2 < -33554432)
        v19 = 0x80000000;
      if (*(int *)a2 > 0x1FFFFFF)
        v19 = 0x7FFFFFFF;
      v20 = v18 << 6;
      if (v18 < -33554432)
        v20 = 0x80000000;
      if (v18 > 0x1FFFFFF)
        v20 = 0x7FFFFFFF;
      if (v19 >= (int)v15)
      {
        v21 = v15 + v16;
        if (__OFADD__((_DWORD)v15, v16))
          v21 = (v15 >> 31) + 0x7FFFFFFF;
        if (v21 > v19 && v20 >= SHIDWORD(v15))
        {
          v23 = (HIDWORD(v15) >> 31) + 0x7FFFFFFF;
          if (!__OFADD__(HIDWORD(v15), v17))
            v23 = HIDWORD(v15) + v17;
          if (v23 > v20)
            break;
        }
      }
    }
    v12 -= 8;
    if (!v12)
      return v3;
  }
  return (WebCore::AccessibilityObject *)(*(uint64_t (**)(uint64_t, const WebCore::IntPoint *))(*(_QWORD *)v14 + 2904))(v14, a2);
}

uint64_t WebCore::AccessibilityObject::axObjectCache(WebCore::AccessibilityObject *this)
{
  uint64_t result;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  WebCore::AXObjectCache *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::AXObjectCache *v16;
  uint64_t v17;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (result)
  {
    v2 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
    if ((v2 & 1) != 0)
    {
      v3 = result;
      if (*(_BYTE *)(result + 3362) || *(_BYTE *)(result + 3405))
      {
        for (i = *(_QWORD *)(result + 528); i; i = *(_QWORD *)(v3 + 528))
        {
          v13 = *(_QWORD *)(i + 8);
          if (!v13)
            break;
          v14 = *(_QWORD *)(v13 + 120);
          if (!v14)
            break;
          v15 = *(_QWORD *)(v14 + 8);
          if (!v15)
            break;
          v3 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8);
        }
      }
      else
      {
        v4 = *(_QWORD *)(result + 528);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 8);
          if (v5)
          {
            v6 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8);
            if (v6 && *(_BYTE *)(v6 + 144) == 0)
            {
              v8 = *(_QWORD *)(v6 + 296);
              if (v8)
                v3 = v8;
            }
          }
        }
      }
      *(_DWORD *)(v3 + 24) += 2;
      v17 = v3;
      if (*(_QWORD *)(v3 + 1944))
        v9 = *(_BYTE *)(v3 + 3405) == 0;
      else
        v9 = 0;
      if (v9)
      {
        v10 = *(_QWORD *)(v3 + 1488);
        if (!v10)
        {
          v11 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
          v16 = (WebCore::AXObjectCache *)WebCore::AXObjectCache::AXObjectCache(v11, (WebCore::Document *)v3);
          std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)(v3 + 1488), &v16);
          std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v16);
          WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
          v10 = *(_QWORD *)(v3 + 1488);
        }
      }
      else
      {
        v10 = 0;
      }
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v17);
      return v10;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::setSelectedRows(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1456))(a1);
  v5 = (result - 122) > 8 || ((1 << (result - 122)) & 0x181) == 0;
  if (!v5 || (_DWORD)result == 42)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 576))(a1);
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(uint64_t **)a2;
      if ((result & 1) != 0)
      {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v7 + 1832))(*v7, 1);
      }
      else
      {
        v8 = 8 * v6;
        do
        {
          v9 = *v7++;
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 1832))(v9, 1);
          v8 -= 8;
        }
        while (v8);
      }
    }
  }
  return result;
}

_QWORD *WebCore::AccessibilityObject::setFocused(_QWORD *this, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;

  if (a2)
  {
    v2 = this;
    if (!(*(uint64_t (**)(_QWORD *))(*this + 1712))(this))
      goto LABEL_36;
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 1712))(v2);
    v3 = this[66];
    if (!v3
      || (v4 = *(_QWORD *)(v3 + 8)) == 0
      || (v5 = *(_QWORD *)(*(_QWORD *)(v4 + 296) + 3064), (*(_WORD *)(v5 + 256) & 4) == 0)
      || (v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 528)) == 0
      || (v7 = *(_QWORD *)(v6 + 8)) == 0
      || (v8 = *(_QWORD *)(v7 + 24)) == 0
      || (v9 = *(_QWORD *)(v8 + 8)) == 0
      || (*(_WORD *)(*(_QWORD *)(v9 + 72) + 26) & 1) == 0)
    {
LABEL_36:
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 1712))(v2);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 1712))(v2);
        v10 = this[66];
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 24);
            if (v12)
            {
              v13 = *(_QWORD *)(v12 + 8);
              if (v13)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 48) + 16) + 32))(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 16));
                this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 1712))(v2);
                if (this)
                {
                  this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 1712))(v2);
                  v14 = this[66];
                  if (v14)
                  {
                    v15 = *(_QWORD *)(v14 + 8);
                    if (v15)
                    {
                      v16 = *(_QWORD *)(v15 + 24);
                      if (v16)
                      {
                        v17 = *(_QWORD *)(v16 + 8);
                        if (v17)
                        {
                          v18 = *(_QWORD *)(v17 + 72);
                          v19 = *(_WORD *)(v18 + 26);
                          if ((v19 & 2) == 0)
                          {
                            v20 = *(_DWORD **)(*(_QWORD *)(v18 + 8) + 8);
                            ++*v20;
                            WebCore::Page::setActivityState((uint64_t)v20, v19 | 2);
                            if (*v20 == 1)
                            {
                              WebCore::Page::~Page((uint64_t)v20);
                              WTF::fastFree(v25, v26);
                            }
                            else
                            {
                              --*v20;
                            }
                          }
                          this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 1712))(v2);
                          if (this)
                          {
                            this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 1712))(v2);
                            v21 = this[66];
                            if (v21)
                            {
                              v22 = *(_QWORD *)(v21 + 8);
                              if (v22)
                              {
                                v23 = *(_QWORD *)(v22 + 24);
                                if (v23)
                                {
                                  v24 = *(_QWORD *)(v23 + 8);
                                  if (v24)
                                  {
                                    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 1720))(v2);
                                    if (this)
                                    {
                                      if (this[5])
                                        return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v24 + 48) + 16)
                                                                                           + 1224))(*(_QWORD *)(*(_QWORD *)(v24 + 48) + 16));
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::AccessibilityObject::sortDirection(WebCore::AccessibilityObject *this)
{
  int v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  while (1)
  {
    v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
    if (v2 == 18 || v2 == 91)
      break;
    this = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1232))(this);
    if (!this)
      return 4;
  }
  v4 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_sortAttr);
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(v4 + 4);
  if (v5 == 9)
  {
    v6 = *(_QWORD *)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v6 & 0xDF) != 0x41
        || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x53
        || (*(_BYTE *)(v6 + 2) & 0xDF) != 0x43
        || (*(_BYTE *)(v6 + 3) & 0xDF) != 0x45
        || (*(_BYTE *)(v6 + 4) & 0xDF) != 0x4E
        || (*(_BYTE *)(v6 + 5) & 0xDF) != 0x44
        || (*(_BYTE *)(v6 + 6) & 0xDF) != 0x49
        || (*(_BYTE *)(v6 + 7) & 0xDF) != 0x4E)
      {
        return 0;
      }
      v7 = *(unsigned __int8 *)(v6 + 8);
    }
    else
    {
      if ((*(_WORD *)v6 & 0xFFDF) != 0x41
        || (*(_WORD *)(v6 + 2) & 0xFFDF) != 0x53
        || (*(_WORD *)(v6 + 4) & 0xFFDF) != 0x43
        || (*(_WORD *)(v6 + 6) & 0xFFDF) != 0x45
        || (*(_WORD *)(v6 + 8) & 0xFFDF) != 0x4E
        || (*(_WORD *)(v6 + 10) & 0xFFDF) != 0x44
        || (*(_WORD *)(v6 + 12) & 0xFFDF) != 0x49
        || (*(_WORD *)(v6 + 14) & 0xFFDF) != 0x4E)
      {
        return 0;
      }
      v7 = *(unsigned __int16 *)(v6 + 16);
    }
    return (v7 & 0xFFFFFFDF) == 0x47;
  }
  if (v5 == 10)
  {
    v8 = *(_QWORD *)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v8 & 0xDF) != 0x44
        || (*(_BYTE *)(v8 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(v8 + 2) & 0xDF) != 0x53
        || (*(_BYTE *)(v8 + 3) & 0xDF) != 0x43
        || (*(_BYTE *)(v8 + 4) & 0xDF) != 0x45
        || (*(_BYTE *)(v8 + 5) & 0xDF) != 0x4E
        || (*(_BYTE *)(v8 + 6) & 0xDF) != 0x44
        || (*(_BYTE *)(v8 + 7) & 0xDF) != 0x49
        || (*(_BYTE *)(v8 + 8) & 0xDF) != 0x4E)
      {
        return 0;
      }
      v9 = *(unsigned __int8 *)(v8 + 9);
    }
    else
    {
      if ((*(_WORD *)v8 & 0xFFDF) != 0x44
        || (*(_WORD *)(v8 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v8 + 4) & 0xFFDF) != 0x53
        || (*(_WORD *)(v8 + 6) & 0xFFDF) != 0x43
        || (*(_WORD *)(v8 + 8) & 0xFFDF) != 0x45
        || (*(_WORD *)(v8 + 10) & 0xFFDF) != 0x4E
        || (*(_WORD *)(v8 + 12) & 0xFFDF) != 0x44
        || (*(_WORD *)(v8 + 14) & 0xFFDF) != 0x49
        || (*(_WORD *)(v8 + 16) & 0xFFDF) != 0x4E)
      {
        return 0;
      }
      v9 = *(unsigned __int16 *)(v8 + 18);
    }
    if ((v9 & 0xFFFFFFDF) == 0x47)
      return 2;
    return 0;
  }
  if (v5 != 5)
    return 0;
  v10 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v10 & 0xDF) != 0x4F
      || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x54
      || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x48
      || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x45)
    {
      return 0;
    }
    v11 = *(unsigned __int8 *)(v10 + 4);
  }
  else
  {
    if ((*(_WORD *)v10 & 0xFFDF) != 0x4F
      || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x54
      || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x48
      || (*(_WORD *)(v10 + 6) & 0xFFDF) != 0x45)
    {
      return 0;
    }
    v11 = *(unsigned __int16 *)(v10 + 8);
  }
  if ((v11 & 0xFFFFFFDF) != 0x52)
    return 0;
  return 3;
}

uint64_t WebCore::AccessibilityObject::supportsRangeValue(WebCore::AccessibilityObject *this)
{
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 87
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 81
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 102
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 100
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 104
    || (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 106
    && ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 800))(this) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2736))(this);
  }
}

BOOL WebCore::AccessibilityObject::supportsHasPopup(WebCore::AccessibilityObject *this)
{
  return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_haspopupAttr)|| (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 19;
}

const char *WebCore::AccessibilityObject::popupValue@<X0>(WebCore::AccessibilityObject *this@<X0>, int **a2@<X8>)
{
  uint64_t v4;
  void *v5;
  int *v6;
  int v7;
  uint64_t v8;
  const WebCore::TreeScope *v9;
  unsigned int *v10;
  unint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unint64_t v14;
  const char *result;
  char **v16;
  int v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  char *v41;
  int *v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  int v51;
  WebCore::Node *v52;
  int *v53;

  v4 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_haspopupAttr);
  if (!v4 || (v11 = *(unsigned int *)(v4 + 4), !(_DWORD)v11))
  {
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 19)
      return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = (int *)*WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::listAttr);
    if (!v6)
      return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = *v6;
    *v6 += 2;
    v53 = v6;
    if (v6[1])
    {
      v8 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 832))(this);
      if (v8)
      {
        if (v6[1])
        {
          v9 = *(const WebCore::TreeScope **)(v8 + 40);
          v10 = (unsigned int *)*((_QWORD *)v9 + 3);
          if (v10)
          {
            WebCore::TreeScopeOrderedMap::getElementById(v10, (const WTF::AtomString *)&v53, v9, (uint64_t *)&v52);
            if (v52)
            {
              if (*((_DWORD *)v52 + 6) == 2)
              {
                if ((*((_WORD *)v52 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v52, v5);
              }
              else
              {
                *((_DWORD *)v52 + 6) -= 2;
              }
            }
          }
        }
        if (*v6 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v6, (WTF::StringImpl *)v5);
        else
          *v6 -= 2;
        return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      v7 = *v6 - 2;
      if (*v6 == 2)
        goto LABEL_26;
    }
    else if (!v7)
    {
LABEL_26:
      WTF::StringImpl::destroy((WTF::StringImpl *)v6, (WTF::StringImpl *)v5);
      return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    *v6 = v7;
    return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  switch((_DWORD)v11)
  {
    case 4:
      v19 = *(_DWORD *)(v4 + 16);
      v20 = *(unsigned __int8 **)(v4 + 8);
      if ((v19 & 4) != 0)
      {
        v21 = *v20;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
        {
          v22 = 1u;
          result = "menu";
          v16 = &off_1E337E770;
          while (v11 != v22)
          {
            v23 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v20[v22]);
            v24 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aMenu[v22++]);
            if (v23 != v24)
            {
              if (v22 - 1 >= v11)
                goto LABEL_69;
              goto LABEL_37;
            }
          }
          break;
        }
      }
      else
      {
        LODWORD(v21) = *(unsigned __int16 *)v20;
        if ((v21 | (32 * ((v21 - 65) < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 109))
        {
          v38 = 1u;
          do
          {
            v39 = v38;
            if (v11 == v38)
              break;
            v40 = *(unsigned __int16 *)&v20[2 * v38] | (32
                                                      * (*(unsigned __int16 *)&v20[2 * v38] - 65 < 0x1A));
            ++v38;
          }
          while (v40 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aMenu[v39]));
          if (v39 >= v11)
          {
LABEL_69:
            result = "menu";
            v16 = &off_1E337E770;
            break;
          }
        }
      }
LABEL_37:
      if ((v19 & 4) != 0)
      {
        v25 = MEMORY[0x1E0CBF868];
        v26 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21);
        if (v26 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
        {
          v27 = 0;
          result = "tree";
          v16 = &off_1E337E790;
          while (v11 - 1 != v27)
          {
            v28 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v20[v27 + 1]);
            v29 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aTree_0[++v27]);
            if (v28 != v29)
              goto LABEL_42;
          }
          break;
        }
      }
      else
      {
        LODWORD(v21) = *(unsigned __int16 *)v20;
        if ((v21 | (32 * ((v21 - 65) < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 116))
        {
          v47 = 1u;
          do
          {
            v27 = v47;
            if (v11 == v47)
              break;
            v48 = *(unsigned __int16 *)&v20[2 * v47] | (32
                                                      * (*(unsigned __int16 *)&v20[2 * v47] - 65 < 0x1A));
            ++v47;
          }
          while (v48 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aTree_0[v27]));
LABEL_42:
          if (v27 >= v11)
          {
            result = "tree";
            v16 = &off_1E337E790;
            break;
          }
        }
        if ((v19 & 4) == 0)
        {
          v49 = *(unsigned __int16 *)v20;
          if ((v49 | (32 * ((v49 - 65) < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103))
            return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          v50 = 1u;
          do
          {
            v30 = v50;
            if (v11 == v50)
              break;
            v51 = *(unsigned __int16 *)&v20[2 * v50] | (32
                                                      * (*(unsigned __int16 *)&v20[2 * v50] - 65 < 0x1A));
            ++v50;
          }
          while (v51 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aGrid[v30]));
LABEL_49:
          if (v30 < v11)
            return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          result = "grid";
          v16 = &off_1E337E7A0;
          break;
        }
        v25 = MEMORY[0x1E0CBF868];
        v26 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21);
      }
      if (v26 == *(unsigned __int8 *)(v25 + 103))
      {
        v30 = 0;
        result = "grid";
        v16 = &off_1E337E7A0;
        while (v11 - 1 != v30)
        {
          v31 = *(unsigned __int8 *)(v25 + v20[v30 + 1]);
          v32 = *(unsigned __int8 *)(v25 + aGrid[++v30]);
          if (v31 != v32)
            goto LABEL_49;
        }
        break;
      }
      return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    case 7:
      v33 = *(_DWORD *)(v4 + 16);
      v34 = *(unsigned __int8 **)(v4 + 8);
      if ((v33 & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v34) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
        {
          v35 = 0;
          result = "listbox";
          v16 = &off_1E337E780;
          while (v11 - 1 != v35)
          {
            v36 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v34[v35 + 1]);
            v37 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aListbox_0[++v35]);
            if (v36 != v37)
              goto LABEL_56;
          }
          break;
        }
        return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      if ((*(unsigned __int16 *)v34 | (32 * (*(unsigned __int16 *)v34 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
        return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      v43 = 1u;
      do
      {
        v35 = v43;
        if (v11 == v43)
          break;
        v44 = *(unsigned __int16 *)&v34[2 * v43] | (32 * (*(unsigned __int16 *)&v34[2 * v43] - 65 < 0x1A));
        ++v43;
      }
      while (v44 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aListbox_0[v35]));
LABEL_56:
      if (v35 < v11)
        return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      result = "listbox";
      v16 = &off_1E337E780;
      break;
    case 6:
      v12 = *(_DWORD *)(v4 + 16);
      v13 = *(unsigned __int8 **)(v4 + 8);
      if ((v12 & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v13) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
        {
          v14 = 0;
          result = "dialog";
          v16 = &off_1E337E7B0;
          while (v11 - 1 != v14)
          {
            v17 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[v14 + 1]);
            v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aDialog[++v14]);
            if (v17 != v18)
              goto LABEL_20;
          }
          break;
        }
        return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      if ((*(unsigned __int16 *)v13 | (32 * (*(unsigned __int16 *)v13 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
        return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      v45 = 1u;
      do
      {
        v14 = v45;
        if (v11 == v45)
          break;
        v46 = *(unsigned __int16 *)&v13[2 * v45] | (32 * (*(unsigned __int16 *)&v13[2 * v45] - 65 < 0x1A));
        ++v45;
      }
      while (v46 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aDialog[v14]));
LABEL_20:
      if (v14 < v11)
        return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      result = "dialog";
      v16 = &off_1E337E7B0;
      break;
    default:
      return (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  v41 = v16[1];
  if (v41)
  {
    if (v41 == (char *)1)
    {
      v42 = (int *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      result = (const char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      v42 = v53;
    }
    *a2 = v42;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

BOOL WebCore::AccessibilityObject::supportsSetSize(WebCore::AccessibilityObject *this)
{
  return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_setsizeAttr);
}

BOOL WebCore::AccessibilityObject::supportsPosInSet(WebCore::AccessibilityObject *this)
{
  return WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_posinsetAttr);
}

uint64_t WebCore::AccessibilityObject::setSize(WebCore::AccessibilityObject *this)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v5;

  v1 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_setsizeAttr);
  if (v1)
  {
    v2 = *(uint64_t **)(v1 + 8);
    v3 = *(unsigned int *)(v1 + 4) | ((unint64_t)((*(_DWORD *)(v1 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v2 = 0;
    v3 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v2, v3, &v5);
  if (HIDWORD(v5))
    return 0;
  else
    return v5;
}

uint64_t WebCore::AccessibilityObject::posInSet(WebCore::AccessibilityObject *this)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v5;

  v1 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_posinsetAttr);
  if (v1)
  {
    v2 = *(uint64_t **)(v1 + 8);
    v3 = *(unsigned int *)(v1 + 4) | ((unint64_t)((*(_DWORD *)(v1 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v2 = 0;
    v3 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v2, v3, &v5);
  if (HIDWORD(v5))
    return 0;
  else
    return v5;
}

_QWORD *WebCore::AccessibilityObject::identifierAttribute@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v4;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::idAttr);
  v4 = (_DWORD *)*result;
  if (*result)
    *v4 += 2;
  *a2 = v4;
  return result;
}

unsigned int *WebCore::AccessibilityObject::classList@<X0>(WebCore::AccessibilityObject *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *result;
  WebCore::Element **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;

  result = (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 832))(this);
  if (result)
  {
    v4 = (WebCore::Element **)WebCore::Element::classList((WebCore::Element *)result);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    result = (unsigned int *)WebCore::DOMTokenList::tokens(v4);
    v5 = result[3];
    if ((_DWORD)v5)
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v6 = WTF::fastMalloc((WTF *)(8 * v5));
        v7 = 0;
        v8 = 0;
        *(_DWORD *)(a2 + 8) = v5;
        *(_QWORD *)a2 = v6;
        v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        do
        {
          result = (unsigned int *)WebCore::DOMTokenList::tokens(v4);
          if (v8 >= result[3])
            v10 = v9;
          else
            v10 = (_QWORD *)(*(_QWORD *)result + v7);
          v11 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v11 == *(_DWORD *)(a2 + 8))
          {
            result = (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v11 + 1, (unint64_t)v10);
            v11 = *(unsigned int *)(a2 + 12);
            v14 = *(_QWORD *)a2;
            v15 = *(_DWORD **)result;
            if (*(_QWORD *)result)
              *v15 += 2;
            *(_QWORD *)(v14 + 8 * v11) = v15;
          }
          else
          {
            v12 = *(_QWORD *)a2;
            v13 = (_DWORD *)*v10;
            if (*v10)
              *v13 += 2;
            *(_QWORD *)(v12 + 8 * v11) = v13;
          }
          *(_DWORD *)(a2 + 12) = v11 + 1;
          ++v8;
          v7 += 8;
        }
        while (v5 != v8);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::AccessibilityObject::extendedDescription@<X0>(WebCore::AccessibilityObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 3008))(&v7);
  if (v7 && *((_DWORD *)v7 + 1))
  {
    *a2 = v7;
  }
  else
  {
    v6 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_descriptionAttr);
    if (v6)
      *(_DWORD *)v6 += 2;
    *a2 = v6;
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

BOOL WebCore::AccessibilityObject::supportsPressed(WebCore::AccessibilityObject *this)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  v1 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_pressedAttr);
  if (!v1)
    return 0;
  v3 = *(_DWORD *)(v1 + 4);
  if (v3 == 4)
  {
    v6 = *(_QWORD *)(v1 + 8);
    if ((*(_BYTE *)(v1 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v6 & 0xDF) != 0x54 || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x52 || (*(_BYTE *)(v6 + 2) & 0xDF) != 0x55)
        return 0;
      v7 = *(unsigned __int8 *)(v6 + 3);
    }
    else
    {
      if ((*(_WORD *)v6 & 0xFFDF) != 0x54
        || (*(_WORD *)(v6 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(v6 + 4) & 0xFFDF) != 0x55)
      {
        return 0;
      }
      v7 = *(unsigned __int16 *)(v6 + 6);
    }
    if ((v7 & 0xFFFFFFDF) == 0x45)
      return 1;
  }
  else if (v3 == 5)
  {
    v4 = *(_QWORD *)(v1 + 8);
    if ((*(_BYTE *)(v1 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v4 & 0xDF) == 0x46
        && (*(_BYTE *)(v4 + 1) & 0xDF) == 0x41
        && (*(_BYTE *)(v4 + 2) & 0xDF) == 0x4C
        && (*(_BYTE *)(v4 + 3) & 0xDF) == 0x53)
      {
        v5 = *(unsigned __int8 *)(v4 + 4);
        return (v5 & 0xFFFFFFDF) == 69;
      }
    }
    else if ((*(_WORD *)v4 & 0xFFDF) == 0x46
           && (*(_WORD *)(v4 + 2) & 0xFFDF) == 0x41
           && (*(_WORD *)(v4 + 4) & 0xFFDF) == 0x4C
           && (*(_WORD *)(v4 + 6) & 0xFFDF) == 0x53)
    {
      v5 = *(unsigned __int16 *)(v4 + 8);
      return (v5 & 0xFFFFFFDF) == 69;
    }
  }
  return 0;
}

BOOL WebCore::AccessibilityObject::supportsExpanded(WebCore::AccessibilityObject *this)
{
  void *v2;
  WebCore::Node *v3;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  WebCore::Node *v15;

  (*(void (**)(WebCore::Node **__return_ptr))(*(_QWORD *)this + 3032))(&v15);
  v3 = v15;
  v15 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v3, v2);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
    return 1;
  }
  v5 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (v5
    && (*(_WORD *)(v5 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24))
  {
    return 1;
  }
  v6 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
  if ((v6 - 76) <= 0x3D && ((1 << (v6 - 76)) & 0x2080202000018007) != 0)
    goto LABEL_18;
  v8 = (v6 - 10);
  if (v8 > 0x37)
    return 0;
  if (((1 << (v6 - 10)) & 0x80000200000311) == 0)
  {
    if (v8 != 16)
      return 0;
  }
  else
  {
LABEL_18:
    v9 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_expandedAttr);
    if (!v9)
      return 0;
    v10 = *(_DWORD *)(v9 + 4);
    if (v10 != 4)
    {
      if (v10 == 5)
      {
        v11 = *(_QWORD *)(v9 + 8);
        if ((*(_BYTE *)(v9 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v11 & 0xDF) != 0x46
            || (*(_BYTE *)(v11 + 1) & 0xDF) != 0x41
            || (*(_BYTE *)(v11 + 2) & 0xDF) != 0x4C
            || (*(_BYTE *)(v11 + 3) & 0xDF) != 0x53)
          {
            return 0;
          }
          v12 = *(unsigned __int8 *)(v11 + 4);
        }
        else
        {
          if ((*(_WORD *)v11 & 0xFFDF) != 0x46
            || (*(_WORD *)(v11 + 2) & 0xFFDF) != 0x41
            || (*(_WORD *)(v11 + 4) & 0xFFDF) != 0x4C
            || (*(_WORD *)(v11 + 6) & 0xFFDF) != 0x53)
          {
            return 0;
          }
          v12 = *(unsigned __int16 *)(v11 + 8);
        }
        return (v12 & 0xFFFFFFDF) == 69;
      }
      return 0;
    }
    v13 = *(_QWORD *)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v13 & 0xDF) != 0x54
        || (*(_BYTE *)(v13 + 1) & 0xDF) != 0x52
        || (*(_BYTE *)(v13 + 2) & 0xDF) != 0x55)
      {
        return 0;
      }
      v14 = *(unsigned __int8 *)(v13 + 3);
    }
    else
    {
      if ((*(_WORD *)v13 & 0xFFDF) != 0x54
        || (*(_WORD *)(v13 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x55)
      {
        return 0;
      }
      v14 = *(unsigned __int16 *)(v13 + 6);
    }
    if ((v14 & 0xFFFFFFDF) != 0x45)
      return 0;
  }
  return 1;
}

double WebCore::AccessibilityObject::loadingProgress(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (v2 && !*(_QWORD *)(v2 + 728))
    return 1.0;
  v3 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1704))(this);
  if (v3)
    return *(double *)(*(_QWORD *)(v3 + 128) + 128);
  else
    return 0.0;
}

uint64_t WebCore::AccessibilityObject::isExpanded(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::String *v4;
  __n128 v5;
  uint64_t v6;
  void *v7;
  _BOOL8 hasAttribute;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (v2)
  {
    v6 = v2;
    if ((*(_WORD *)(v2 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24))
    {
      *(_DWORD *)(v2 + 24) += 2;
      hasAttribute = WebCore::Element::hasAttribute((WebCore::Element *)v2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::openAttr, v3, v4, v5);
      if (*(_DWORD *)(v6 + 24) != 2)
      {
        *(_DWORD *)(v6 + 24) -= 2;
        return hasAttribute;
      }
      if ((*(_WORD *)(v6 + 30) & 0x400) != 0)
        return hasAttribute;
      v13 = v6;
      goto LABEL_22;
    }
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) != 111
    || (v10 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1232))(this)) == 0)
  {
LABEL_14:
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1040))(this))
    {
      (*(void (**)(uint64_t *__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)this + 3032))(&v18, this);
      v13 = v18;
      if (v18)
      {
        hasAttribute = (*(_QWORD *)(v18 + 72) & 0xFFFFFFFFFFFFLL) != 0
                    && (v17 = *(_QWORD *)((*(_QWORD *)(v18 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
                    && *(unsigned __int8 *)(v17 + 1) != 0;
        v18 = 0;
        if (*(_DWORD *)(v13 + 24) != 2)
        {
          *(_DWORD *)(v13 + 24) -= 2;
          return hasAttribute;
        }
        if ((*(_WORD *)(v13 + 30) & 0x400) != 0)
          return hasAttribute;
LABEL_22:
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v7);
        return hasAttribute;
      }
      v14 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_expandedAttr);
      if (v14)
      {
        if (*(_DWORD *)(v14 + 4) == 4)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if ((*(_BYTE *)(v14 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v15 & 0xDF) == 0x54
              && (*(_BYTE *)(v15 + 1) & 0xDF) == 0x52
              && (*(_BYTE *)(v15 + 2) & 0xDF) == 0x55)
            {
              v16 = *(unsigned __int8 *)(v15 + 3);
              return (v16 & 0xFFFFFFDF) == 69;
            }
          }
          else if ((*(_WORD *)v15 & 0xFFDF) == 0x54
                 && (*(_WORD *)(v15 + 2) & 0xFFDF) == 0x52
                 && (*(_WORD *)(v15 + 4) & 0xFFDF) == 0x55)
          {
            v16 = *(unsigned __int16 *)(v15 + 6);
            return (v16 & 0xFFFFFFDF) == 69;
          }
        }
      }
    }
    return 0;
  }
  v11 = v10;
  while (1)
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 840))(v11);
    if (v12)
    {
      if ((*(_WORD *)(v12 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24))
      {
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 632))(v11);
      }
    }
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1232))(v11);
    if (!v11)
      goto LABEL_14;
  }
}

BOOL WebCore::AccessibilityObject::supportsChecked(WebCore::AccessibilityObject *this)
{
  int v1;

  v1 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
  return (v1 - 77) <= 0x24 && ((1 << (v1 - 77)) & 0x1000000803) != 0 || v1 == 14;
}

uint64_t WebCore::AccessibilityObject::checkboxOrRadioValue(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;

  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 132)
  {
    v2 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_pressedAttr);
    if (!v2)
      return 0;
    v3 = *(_DWORD *)(v2 + 4);
    if (v3 != 4)
    {
      if (v3 == 5)
      {
        v4 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v4 & 0xDF) == 0x4D
            && (*(_BYTE *)(v4 + 1) & 0xDF) == 0x49
            && (*(_BYTE *)(v4 + 2) & 0xDF) == 0x58
            && (*(_BYTE *)(v4 + 3) & 0xDF) == 0x45)
          {
            v5 = *(unsigned __int8 *)(v4 + 4);
            goto LABEL_11;
          }
        }
        else if ((*(_WORD *)v4 & 0xFFDF) == 0x4D
               && (*(_WORD *)(v4 + 2) & 0xFFDF) == 0x49
               && (*(_WORD *)(v4 + 4) & 0xFFDF) == 0x58
               && (*(_WORD *)(v4 + 6) & 0xFFDF) == 0x45)
        {
          v5 = *(unsigned __int16 *)(v4 + 8);
LABEL_11:
          if ((v5 & 0xFFFFFFDF) == 0x44)
            return 2;
          return 0;
        }
      }
      return 0;
    }
  }
  else
  {
    v2 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_checkedAttr);
    if (!v2)
      return 0;
    v7 = *(_DWORD *)(v2 + 4);
    if (v7 != 4)
    {
      if (v7 == 5)
      {
        v8 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v8 & 0xDF) != 0x4D
            || (*(_BYTE *)(v8 + 1) & 0xDF) != 0x49
            || (*(_BYTE *)(v8 + 2) & 0xDF) != 0x58
            || (*(_BYTE *)(v8 + 3) & 0xDF) != 0x45)
          {
            return 0;
          }
          v9 = *(unsigned __int8 *)(v8 + 4);
        }
        else
        {
          if ((*(_WORD *)v8 & 0xFFDF) != 0x4D
            || (*(_WORD *)(v8 + 2) & 0xFFDF) != 0x49
            || (*(_WORD *)(v8 + 4) & 0xFFDF) != 0x58
            || (*(_WORD *)(v8 + 6) & 0xFFDF) != 0x45)
          {
            return 0;
          }
          v9 = *(unsigned __int16 *)(v8 + 8);
        }
        if ((v9 & 0xFFFFFFDF) == 0x44)
        {
          v10 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2976))(this) - 78;
          if (v10 > 0x23 || ((1 << v10) & 0x800000401) == 0)
            return 2;
        }
        return 0;
      }
      return 0;
    }
  }
  v11 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v11 & 0xDF) != 0x54 || (*(_BYTE *)(v11 + 1) & 0xDF) != 0x52 || (*(_BYTE *)(v11 + 2) & 0xDF) != 0x55)
      return 0;
    v12 = *(unsigned __int8 *)(v11 + 3);
  }
  else
  {
    if ((*(_WORD *)v11 & 0xFFDF) != 0x54
      || (*(_WORD *)(v11 + 2) & 0xFFDF) != 0x52
      || (*(_WORD *)(v11 + 4) & 0xFFDF) != 0x55)
    {
      return 0;
    }
    v12 = *(unsigned __int16 *)(v11 + 6);
  }
  return (v12 & 0xFFFFFFDF) == 0x45;
}

WebCore::Document *WebCore::AccessibilityObject::resolvedEditingStyles@<X0>(WebCore::AccessibilityObject *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::Document *result;
  WebCore::Document *v4;
  WebCore::EditingStyle *v5;
  WebCore::EditingStyle *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WebCore::EditingStyle *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebCore::EditingStyle *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int i;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  WTF *v39;
  void *v40;
  WTF::StringImpl *v41[3];
  WTF::StringImpl *v42;
  BOOL hasStyle;
  WTF::StringImpl *v44;
  WebCore::EditingStyle *v45;

  result = (WebCore::Document *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (!result)
  {
    *a2 = 0;
    return result;
  }
  v4 = result;
  result = (WebCore::Document *)WebCore::EditingStyle::styleAtSelectionStart((unsigned int *)(*((_QWORD *)result + 383) + 56), 0, (uint64_t *)&v45);
  v5 = v45;
  *a2 = 0;
  if (v5)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = v45;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v42 = v41[0];
    hasStyle = WebCore::EditingStyle::hasStyle((uint64_t)v6, 28, (uint64_t)&v42);
    WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,int>>,WTF::HashTableTraits>::add<BOOL>((uint64_t)v41, a2, &v44, &hasStyle);
    v8 = v42;
    v42 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v44;
    v44 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = v45;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    hasStyle = WebCore::EditingStyle::hasStyle((uint64_t)v10, 16, (uint64_t)&v42);
    WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,int>>,WTF::HashTableTraits>::add<BOOL>((uint64_t)v41, a2, &v44, &hasStyle);
    v12 = v42;
    v42 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v44;
    v44 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = v45;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    hasStyle = WebCore::EditingStyle::hasStyle((uint64_t)v14, 341, (uint64_t)&v42);
    WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,int>>,WTF::HashTableTraits>::add<BOOL>((uint64_t)v41, a2, &v44, &hasStyle);
    v16 = v42;
    v42 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v44;
    v44 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = WebCore::EditingStyle::legacyFontSize(v45, v4);
    v21 = *a2;
    if (*a2
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v21 = *a2) != 0))
    {
      v22 = *(_DWORD *)(v21 - 8);
    }
    else
    {
      v22 = 0;
    }
    v23 = *((_DWORD *)v41[0] + 4);
    if (v23 < 0x100)
      v24 = WTF::StringImpl::hashSlowCase(v41[0]);
    else
      v24 = v23 >> 8;
    v25 = 0;
    for (i = 1; ; ++i)
    {
      v27 = v24 & v22;
      v28 = v21 + 24 * (v24 & v22);
      v29 = *(WTF **)v28;
      if (*(_QWORD *)v28 == -1)
      {
        v25 = v21 + 24 * v27;
      }
      else
      {
        if (!v29)
        {
          if (v25)
          {
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = 0;
            *(_DWORD *)(v25 + 16) = 0;
            --*(_DWORD *)(v21 - 16);
            v28 = v25;
          }
          v30 = v41[0];
          v41[0] = 0;
          v31 = *(WTF::StringImpl **)v28;
          *(_QWORD *)v28 = v30;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v18);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = *(unsigned int *)(v28 + 16);
          if ((_DWORD)v32 != -1)
          {
            v18 = (WTF::StringImpl *)(v28 + 8);
            if ((_DWORD)v32 == 2)
            {
              *(_DWORD *)v18 = v20;
              goto LABEL_45;
            }
            ((void (*)(WTF::StringImpl **, WTF::StringImpl *))off_1E3385010[v32])(&v44, v18);
          }
          *(_DWORD *)(v28 + 8) = v20;
          *(_DWORD *)(v28 + 16) = 2;
LABEL_45:
          v33 = *a2;
          if (*a2)
            v34 = *(_DWORD *)(v33 - 12) + 1;
          else
            v34 = 1;
          *(_DWORD *)(v33 - 12) = v34;
          v35 = (*(_DWORD *)(v33 - 16) + v34);
          v36 = *(unsigned int *)(v33 - 4);
          if (v36 > 0x400)
          {
            if (v36 <= 2 * v35)
            {
LABEL_51:
              v37 = (_DWORD)v36 << (6 * v34 >= (2 * v36));
              goto LABEL_54;
            }
          }
          else if (3 * v36 <= 4 * v35)
          {
            if ((_DWORD)v36)
              goto LABEL_51;
            v37 = 8;
LABEL_54:
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v37, (WTF::StringImpl **)v28);
          }
LABEL_55:
          v38 = v41[0];
          v41[0] = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v18);
            else
              *(_DWORD *)v38 -= 2;
          }
          result = v45;
          v45 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 1)
            {
              WebCore::EditingStyle::~EditingStyle(result, v18);
              return (WebCore::Document *)WTF::fastFree(v39, v40);
            }
            else
            {
              --*(_DWORD *)result;
            }
          }
          return result;
        }
        if ((WTF::equal(v29, v41[0], v19) & 1) != 0)
          goto LABEL_55;
      }
      v24 = i + v27;
    }
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,int>>,WTF::HashTableTraits>::add<BOOL>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, _BYTE *a4)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int i;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  char v32;

  v7 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v7 = *a2) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v10 = v9 >> 8;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF::StringImpl *)(v7 + 24 * (v10 & v8));
    v15 = *(WTF **)v14;
    if (*(_QWORD *)v14 != -1)
      break;
    v11 = v7 + 24 * v13;
LABEL_13:
    v10 = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      *(_DWORD *)(v11 + 16) = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = (WTF::StringImpl *)v11;
    }
    v17 = *a3;
    *a3 = 0;
    result = *(WTF::StringImpl **)v14;
    *(_QWORD *)v14 = v17;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v18 = *((unsigned int *)v14 + 4);
    if ((_DWORD)v18 != -1)
    {
      v19 = (char *)v14 + 8;
      if ((_DWORD)v18 == 1)
      {
        *v19 = *a4;
        goto LABEL_28;
      }
      result = (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E3385010[v18])(&v32, v19);
    }
    *((_BYTE *)v14 + 8) = *a4;
    *((_DWORD *)v14 + 4) = 1;
LABEL_28:
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v26 = *a2;
    if (*a2)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
        goto LABEL_37;
    }
    else if (3 * v29 <= 4 * v28)
    {
      if (!(_DWORD)v29)
      {
        v30 = 8;
LABEL_40:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v30, (WTF::StringImpl **)v14);
        v14 = result;
        v26 = *a2;
        if (*a2)
          LODWORD(v29) = *(_DWORD *)(v26 - 4);
        else
          LODWORD(v29) = 0;
        goto LABEL_44;
      }
LABEL_37:
      v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
      goto LABEL_40;
    }
LABEL_44:
    v23 = v26 + 24 * v29;
    v22 = 1;
    goto LABEL_45;
  }
  result = (WTF::StringImpl *)WTF::equal(v15, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 4);
  else
    v21 = 0;
  v22 = 0;
  v23 = v20 + 24 * v21;
LABEL_45:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = v22;
  return result;
}

BOOL WebCore::AccessibilityObject::isOnScreen(WebCore::AccessibilityObject *this)
{
  char *v2;
  int v3;
  char *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v53;
  int v55;
  WebCore::AccessibilityObject *v58;
  char *v59;
  unint64_t v60;

  v59 = 0;
  v60 = 0;
  v58 = this;
  v2 = WTF::Vector<WebCore::AccessibilityObject const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v59, (unint64_t)&v58);
  v3 = HIDWORD(v60);
  v4 = v59;
  *(_QWORD *)&v59[8 * HIDWORD(v60)] = *(_QWORD *)v2;
  v5 = v3 + 1;
  HIDWORD(v60) = v3 + 1;
  v6 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1232))(this);
  if (v6)
  {
    v8 = v6;
    LODWORD(v9) = v60;
    do
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 3256))(v8))
      {
        v10 = v5;
        if (v5 == (_DWORD)v9)
        {
          v11 = v5 + ((unint64_t)v5 >> 2);
          if (v11 >= 0x10)
            v12 = v11 + 1;
          else
            v12 = 16;
          if (v12 <= (unint64_t)v5 + 1)
            v9 = v5 + 1;
          else
            v9 = v12;
          if (v9 >> 29)
          {
LABEL_67:
            __break(0xC471u);
            JUMPOUT(0x19561D710);
          }
          v13 = (char *)WTF::fastMalloc((WTF *)(8 * v9));
          memcpy(v13, v4, 8 * v5);
          if (v4)
          {
            if (v13 == v4)
            {
              v13 = 0;
              LODWORD(v9) = 0;
            }
            WTF::fastFree((WTF *)v4, v14);
          }
          v4 = v13;
        }
        ++v5;
        *(_QWORD *)&v4[8 * v10] = v8;
      }
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1232))(v8);
    }
    while (v8);
    v60 = __PAIR64__(v5, v9);
    v59 = v4;
  }
  v15 = &v4[8 * v5 - 8];
  v16 = v5 - 1;
  do
  {
    v17 = v16;
    if (!v16)
      break;
    if (!v5)
      goto LABEL_67;
    v18 = *((_QWORD *)v15 - 1);
    v19 = **(_QWORD **)v15;
    if (v17 >= (unint64_t)v5 - 1)
    {
      v34 = (*(uint64_t (**)(void))(v19 + 3256))();
      v32 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v34 + 832))(v34, 0, 1);
      v33 = v35;
    }
    else
    {
      v20 = (*(uint64_t (**)(void))(v19 + 3040))();
      v22 = (int)v20 / 64;
      v24 = v20 - (v23 & 0xFFFFFFC0);
      v26 = HIDWORD(v20) - (v25 & 0xFFFFFFC0);
      v28 = v24 + v27;
      if (__OFADD__(v24, v27))
        v28 = (v24 >> 31) + 0x7FFFFFFF;
      v29 = v26 + v21;
      if (__OFADD__(v26, v21))
        v29 = (v26 >> 31) + 0x7FFFFFFF;
      v30 = v26 + 32;
      v31 = v24 + 32;
      v32 = (v22 + (v31 >> 6)) | ((unint64_t)(SHIDWORD(v20) / 64 + (v30 >> 6)) << 32);
      v33 = (v28 / 64 - (v31 >> 6) + ((int)(v28 - (v22 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v29 / 64 - (v30 >> 6) + ((int)(v29 - (v22 & 0xFFFFFFC0) + 32) >> 6)) << 32);
    }
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1456))(v18);
    v37 = *(_QWORD *)v18;
    if (v36 == 99)
    {
      v18 = (*(uint64_t (**)(uint64_t))(v37 + 1232))(v18);
      v37 = *(_QWORD *)v18;
    }
    v38 = (*(uint64_t (**)(uint64_t))(v37 + 3040))(v18);
    if ((int)v38 >= 0)
      v39 = v38;
    else
      v39 = v38 + 63;
    v40 = v38 - (v39 & 0xFFFFFFC0);
    v41 = HIDWORD(v38) + 63;
    if (v38 >= 0)
      v41 = HIDWORD(v38);
    v42 = HIDWORD(v38) - (v41 & 0xFFFFFFC0);
    v43 = v40 + (_DWORD)v7;
    if (__OFADD__(v40, (_DWORD)v7))
      v43 = (v40 >> 31) + 0x7FFFFFFF;
    v44 = v42 + HIDWORD(v7);
    v45 = (v42 >> 31) + 0x7FFFFFFF;
    if (__OFADD__(v42, HIDWORD(v7)))
      v44 = (v42 >> 31) + 0x7FFFFFFF;
    v46 = v42 + 32;
    v47 = v40 + 32;
    v48 = v43 / 64 - (v47 >> 6) + ((int)(v43 - (v45 & 0xFFFFFFC0) + 32) >> 6);
    v49 = v44 / 64 - (v46 >> 6) + ((int)(v44 - (v45 & 0xFFFFFFC0) + 32) >> 6);
    if ((int)v33 < 1 || SHIDWORD(v33) < 1 || v48 < 1 || v49 < 1)
      goto LABEL_65;
    v53 = (v39 >> 6) + (v47 >> 6);
    if (v48 + v53 <= (int)v32 || v53 >= (int)v33 + (int)v32)
      break;
    v55 = (v41 >> 6) + (v46 >> 6);
    v15 -= 8;
    v16 = v17 - 1;
  }
  while (v49 + v55 > SHIDWORD(v32) && v55 < HIDWORD(v33) + HIDWORD(v32));
  if (!v4)
    return v17 == 0;
LABEL_65:
  v59 = 0;
  LODWORD(v60) = 0;
  WTF::fastFree((WTF *)v4, v7);
  return v17 == 0;
}

uint64_t WebCore::AccessibilityObject::scrollToMakeVisible(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int *v6[3];
  __int16 v7;
  char v8;
  char v9;
  __int128 v10;

  LOBYTE(v6[0]) = 0;
  v6[1] = (int *)&WebCore::ScrollAlignment::alignCenterIfNeeded;
  v6[2] = (int *)&WebCore::ScrollAlignment::alignCenterIfNeeded;
  v7 = 1;
  v8 = 0;
  v9 = 0;
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 99
    && (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1232))(this))
  {
    v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1232))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 2272))(v2);
  }
  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 848))(this);
  if (result)
  {
    v4 = result;
    *(_QWORD *)&v10 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 3040))(this);
    *((_QWORD *)&v10 + 1) = v5;
    return WebCore::LocalFrameView::scrollRectToVisible(&v10, v4, 0, v6);
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::scrollToMakeVisibleWithSubFocus(uint64_t a1, int *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  signed int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  signed int v37;
  int v38;
  int v39;
  signed int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v46;
  int v47;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  signed int v68;
  int v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  _DWORD v74[2];

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1232))(a1);
  if (!result)
    return result;
  v5 = result;
  while (1)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 3256))(v5);
    if (v6)
      break;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1232))(v5);
    v5 = result;
    if (!result)
      return result;
  }
  v7 = v6;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 3040))(a1);
  v10 = v9;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 416))(v7);
  v12 = v11;
  v13 = HIDWORD(v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 832))(v7, 0, 1);
  v15 = v14;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 1456))(v5) != 99)
  {
    v16 = v12 << 6;
    if (v12 < -33554432)
      v16 = 0x80000000;
    if (v12 <= 0x1FFFFFF)
      v17 = v16;
    else
      v17 = 0x7FFFFFFF;
    v18 = (_DWORD)v13 << 6;
    if ((int)v13 < -33554432)
      v18 = 0x80000000;
    if ((int)v13 > 0x1FFFFFF)
      v18 = 0x7FFFFFFF;
    v19 = v8 + v17;
    if (__OFADD__((_DWORD)v8, v17))
      v19 = (v8 >> 31) + 0x7FFFFFFF;
    v20 = HIDWORD(v8);
    LODWORD(v8) = HIDWORD(v8) + v18;
    if (__OFADD__(HIDWORD(v8), v18))
      LODWORD(v8) = (v20 >> 31) + 0x7FFFFFFF;
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1512))(v5);
    v22 = v21 & 0x3F;
    if ((int)v21 <= 0)
      v22 = -(-(int)v21 & 0x3F);
    v23 = HIDWORD(v21) & 0x3F;
    if (SHIDWORD(v21) <= 0)
      LODWORD(v23) = -(-HIDWORD(v21) & 0x3F);
    v24 = -((int)v21 / 64 + ((v22 + 32) >> 6));
    v25 = v24 << 6;
    if (v24 > 0x1FFFFFF)
      v25 = 0x7FFFFFFF;
    v26 = -64 * (SHIDWORD(v21) / 64 + (((int)v23 + 32) >> 6));
    if (-(SHIDWORD(v21) / 64 + (((int)v23 + 32) >> 6)) > 0x1FFFFFF)
      v26 = 0x7FFFFFFF;
    v27 = v19 + v25;
    if (__OFADD__(v19, v25))
      v27 = (v19 >> 31) + 0x7FFFFFFF;
    v28 = __OFADD__((_DWORD)v8, v26);
    v29 = (v8 + v26);
    if (v28)
      v29 = (v8 >> 31) + 0x7FFFFFFF;
    v8 = v27 | (unint64_t)(v29 << 32);
  }
  v30 = *a2;
  v31 = *a2 << 6;
  if (*a2 < -33554432)
    v31 = 0x80000000;
  if (v30 > 0x1FFFFFF)
    v31 = 0x7FFFFFFF;
  v28 = __OFADD__((_DWORD)v8, v31);
  v32 = v8 + v31;
  if (v28)
    v32 = (v8 >> 31) + 0x7FFFFFFF;
  v33 = v32 + (v32 < 0 ? 0x3F : 0);
  v34 = a2[2] + v30;
  if (v34 >= -33554432)
    v35 = v34 << 6;
  else
    v35 = 0x80000000;
  if (v34 <= 0x1FFFFFF)
    v36 = v35;
  else
    v36 = 0x7FFFFFFF;
  v28 = __OFADD__((_DWORD)v8, v36);
  v37 = v8 + v36;
  if (v28)
    v37 = (v8 >> 31) + 0x7FFFFFFF;
  if (v37 >= 0)
    v38 = v37;
  else
    v38 = v37 + 63;
  v39 = (int)v8 / 64;
  v40 = v8 + v10;
  if (__OFADD__((_DWORD)v8, (_DWORD)v10))
    v40 = (v8 >> 31) + 0x7FFFFFFF;
  v41 = v40 / 64;
  if (v41 - v39 > (int)v15)
  {
    v42 = v33 >> 6;
    v43 = v38 >> 6;
    v44 = (v38 >> 6) - v12;
    if (v42 >= v12 && v44 <= (int)v15)
      goto LABEL_73;
    if (v42 <= v39)
      v46 = (int)v8 / 64;
    else
      v46 = v42;
    if (v41 < v43)
      v43 = v41;
    if (v43 - v46 > (int)v15)
      v43 = v46 + v15;
    v47 = (v46 - (int)v15 + v43) / 2;
    if (v47 > v39)
      v39 = v47;
    if ((int)v15 + v47 < v41)
      v41 = v15 + v47;
  }
  if (v39 < v12 || v41 - v12 > (int)v15)
    v12 = (v39 - (int)v15 + v41) / 2;
LABEL_73:
  v49 = a2[1];
  v50 = v49 << 6;
  if (v49 < -33554432)
    v50 = 0x80000000;
  if (v49 > 0x1FFFFFF)
    v50 = 0x7FFFFFFF;
  v28 = __OFADD__(HIDWORD(v8), v50);
  v51 = HIDWORD(v8) + v50;
  if (v28)
    v51 = (HIDWORD(v8) >> 31) + 0x7FFFFFFF;
  v52 = v51 + (v51 < 0 ? 0x3F : 0);
  v53 = a2[3] + v49;
  if (v53 >= -33554432)
    v54 = v53 << 6;
  else
    v54 = 0x80000000;
  if (v53 <= 0x1FFFFFF)
    v55 = v54;
  else
    v55 = 0x7FFFFFFF;
  v28 = __OFADD__(HIDWORD(v8), v55);
  v56 = HIDWORD(v8) + v55;
  if (v28)
    v56 = (HIDWORD(v8) >> 31) + 0x7FFFFFFF;
  if (v56 >= 0)
    v57 = v56;
  else
    v57 = v56 + 63;
  v58 = SHIDWORD(v8) / 64;
  v59 = HIDWORD(v8) + HIDWORD(v10);
  if (__OFADD__(HIDWORD(v8), HIDWORD(v10)))
    v59 = (HIDWORD(v8) >> 31) + 0x7FFFFFFF;
  v60 = v59 / 64;
  if (v59 / 64 - v58 <= SHIDWORD(v15))
    goto LABEL_106;
  v61 = v52 >> 6;
  v62 = v57 >> 6;
  if (v61 < (int)v13 || v62 - (int)v13 > SHIDWORD(v15))
  {
    if (v61 <= v58)
      v63 = SHIDWORD(v8) / 64;
    else
      v63 = v61;
    if (v60 < v62)
      v62 = v59 / 64;
    if (v62 - v63 > SHIDWORD(v15))
      v62 = v63 + HIDWORD(v15);
    v64 = (v63 - HIDWORD(v15) + v62) / 2;
    if (v64 > v58)
      v58 = v64;
    if (HIDWORD(v15) + v64 < v60)
      v60 = HIDWORD(v15) + v64;
LABEL_106:
    if (v58 < (int)v13 || v60 - (int)v13 > SHIDWORD(v15))
      LODWORD(v13) = (v58 - HIDWORD(v15) + v60) / 2;
  }
  v74[0] = v12;
  v74[1] = v13;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v5 + 3264))(v5, v74);
  v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1512))(a1);
  if ((int)v65 >= 0)
    v66 = v65;
  else
    v66 = v65 + 63;
  if (v65 >= 0)
    v67 = HIDWORD(v65);
  else
    v67 = HIDWORD(v65) + 63;
  v68 = HIDWORD(v65) - (v67 & 0xFFFFFFC0) + 32;
  v69 = v65 - (v66 & 0xFFFFFFC0) + 32;
  v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1512))(v5);
  v71 = v70 & 0x3F;
  if ((int)v70 <= 0)
    v71 = -(-(int)v70 & 0x3F);
  v72 = HIDWORD(v70) & 0x3F;
  if (SHIDWORD(v70) <= 0)
    LODWORD(v72) = -(-HIDWORD(v70) & 0x3F);
  v73 = a2[1] + (v67 >> 6) + (v68 >> 6);
  *a2 = *a2 + (v66 >> 6) + (v69 >> 6) - (int)v70 / 64 - ((v71 + 32) >> 6);
  a2[1] = v73 - SHIDWORD(v70) / 64 - (((int)v72 + 32) >> 6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1232))(v5);
  if (result)
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v5 + 2280))(v5, a2);
  return result;
}

float WebCore::AccessibilityObject::unobscuredContentRect(WebCore::AccessibilityObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float result;
  uint64_t v6;
  signed int v7;
  unsigned int v8;

  v1 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1712))(this);
  if (!v1)
    return 0.0;
  v2 = *(_QWORD *)(v1 + 528);
  if (!v2)
    return 0.0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0.0;
  v4 = *(_QWORD *)(v3 + 288);
  result = 0.0;
  if (v4)
  {
    v6 = WebCore::ScrollView::unobscuredContentRect(v4, 0);
    v7 = (_DWORD)v6 << 6;
    if ((int)v6 < -33554432)
      v7 = 0x80000000;
    v8 = HIDWORD(v6) << 6;
    if ((int)v6 > 0x1FFFFFF)
      v7 = 0x7FFFFFFF;
    if (SHIDWORD(v6) < -33554432)
      v8 = 0x80000000;
    return (float)(v7 / 64 + ((int)(v7 - (v8 & 0xFFFFFFC0) + 32) >> 6));
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::scrollToGlobalPoint(unint64_t a1, int *a2)
{
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  int v56;
  int v58;
  int v59;
  int v60;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  WTF *v81;
  int *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;

  v89 = 0;
  v90 = 0;
  v88 = a1;
  v4 = WTF::Vector<WebCore::AccessibilityObject const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v89, (unint64_t)&v88);
  v5 = HIDWORD(v90);
  v6 = v89;
  *(_QWORD *)&v89[8 * HIDWORD(v90)] = *(_QWORD *)v4;
  LODWORD(v7) = v5 + 1;
  HIDWORD(v90) = v5 + 1;
  result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 1232))(a1);
  if (result)
  {
    v10 = result;
    LODWORD(v11) = v90;
    do
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 3256))(v10))
      {
        v12 = v7;
        if ((_DWORD)v7 == (_DWORD)v11)
        {
          v13 = v7 + ((unint64_t)v7 >> 2);
          if (v13 >= 0x10)
            v14 = v13 + 1;
          else
            v14 = 16;
          if (v14 <= (unint64_t)v7 + 1)
            v11 = v7 + 1;
          else
            v11 = v14;
          if (v11 >> 29)
          {
LABEL_150:
            __break(0xC471u);
            JUMPOUT(0x19561E4D4);
          }
          v15 = (char *)WTF::fastMalloc((WTF *)(8 * v11));
          memcpy(v15, v6, 8 * v7);
          if (v6)
          {
            if (v15 == v6)
            {
              v15 = 0;
              LODWORD(v11) = 0;
            }
            WTF::fastFree((WTF *)v6, v16);
          }
          v6 = v15;
        }
        LODWORD(v7) = v7 + 1;
        *(_QWORD *)&v6[8 * v12] = v10;
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1232))(v10);
      v10 = result;
    }
    while (result);
    v90 = __PAIR64__(v7, v11);
    v89 = v6;
  }
  v17 = (v7 - 1);
  if (v7 > 1)
  {
    v19 = 0;
    v18 = v7;
    do
    {
      if (8 * v7 == v19)
      {
        __break(0xC471u);
        JUMPOUT(0x19561E4E4);
      }
      if (v17 >= v7)
      {
        __break(0xC471u);
        JUMPOUT(0x19561E4ECLL);
      }
      v20 = *(_QWORD *)&v6[v19];
      *(_QWORD *)&v6[v19] = *(_QWORD *)&v6[8 * v17];
      *(_QWORD *)&v6[8 * v17--] = v20;
      v19 += 8;
    }
    while (8 * (v7 >> 1) != v19);
    v6 = v89;
  }
  else
  {
    v18 = v7;
  }
  v21 = v18 - 1;
  v81 = (WTF *)v6;
  if (v18 != 1)
  {
    v22 = 0;
    v87 = 0;
    v7 = v7;
    if (v7 <= 1uLL)
      v23 = 1;
    else
      v23 = v7;
    v24 = v23 - 1;
    v25 = (uint64_t **)(v6 + 8);
    v82 = a2;
    while (1)
    {
      if (!v7)
        goto LABEL_150;
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x19561E4DCLL);
      }
      v85 = v24;
      v27 = (uint64_t)*(v25 - 1);
      v26 = *v25;
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 3256))(v27);
      v29 = (*(uint64_t (**)(uint64_t *))(*v26 + 1456))(v26);
      v30 = *v26;
      v86 = v21;
      if (v29 == 99)
      {
        v31 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v30 + 1232))(v26);
        v30 = *v31;
      }
      else
      {
        v31 = v26;
      }
      v32 = (*(uint64_t (**)(uint64_t *))(v30 + 3040))(v31);
      v83 = v33;
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 416))(v28);
      v35 = v22 << 6;
      if (v22 < -33554432)
        v35 = 0x80000000;
      v84 = v22;
      if (v22 > 0x1FFFFFF)
        v35 = 0x7FFFFFFF;
      v36 = __OFADD__((_DWORD)v32, v35);
      v37 = v32 + v35;
      if (v36)
        v38 = (v32 >> 31) + 0x7FFFFFFF;
      else
        v38 = v37;
      v39 = v87 << 6;
      if (v87 < -33554432)
        v39 = 0x80000000;
      if (v87 > 0x1FFFFFF)
        v39 = 0x7FFFFFFF;
      v36 = __OFADD__(HIDWORD(v32), v39);
      v40 = HIDWORD(v32) + v39;
      if (v36)
        v41 = (HIDWORD(v32) >> 31) + 0x7FFFFFFF;
      else
        v41 = v40;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 1456))(v27) == 99)
      {
        v42 = v82;
      }
      else
      {
        v43 = (_DWORD)v34 << 6;
        if ((int)v34 < -33554432)
          v43 = 0x80000000;
        if ((int)v34 > 0x1FFFFFF)
          v43 = 0x7FFFFFFF;
        v36 = __OFADD__(v38, v43);
        v44 = v38 + v43;
        if (v36)
          v38 = (v38 >> 31) + 0x7FFFFFFF;
        else
          v38 = v44;
        v45 = HIDWORD(v34) << 6;
        if (SHIDWORD(v34) < -33554432)
          v45 = 0x80000000;
        if (SHIDWORD(v34) <= 0x1FFFFFF)
          v46 = v45;
        else
          v46 = 0x7FFFFFFF;
        v36 = __OFADD__(v41, v46);
        v47 = v41 + v46;
        if (v36)
          v41 = (v41 >> 31) + 0x7FFFFFFF;
        else
          v41 = v47;
        v42 = v82;
      }
      v48 = (int)v38 / 64;
      v49 = v38 + v83;
      if (__OFADD__(v38, (_DWORD)v83))
        v49 = (v38 >> 31) + 0x7FFFFFFF;
      v51 = v49 / 64;
      v52 = *v42;
      if (v51 <= v48)
      {
        v22 = v84;
      }
      else
      {
        v53 = v48 >= v52 && v51 <= v52;
        v22 = v84;
        if (v53)
        {
          v58 = 0;
          goto LABEL_96;
        }
        if (v51 >= v48)
          v54 = v48;
        else
          v54 = v51;
        v36 = __OFADD__(v54, v48);
        v55 = v54 + v48;
        if (v55 < 0 != v36)
          ++v55;
        v56 = v55 >> 1;
        if (v56 > v48)
          v48 = v56;
        if (v56 < v51)
          v51 = v56;
      }
      if (v48 >= v52 && v51 <= v52)
        v58 = 0;
      else
        v58 = (v48 - 2 * v52 + v51) / 2;
LABEL_96:
      v59 = (int)v41 / 64;
      v60 = v41 + HIDWORD(v83);
      if (__OFADD__(v41, HIDWORD(v83)))
        v60 = (v41 >> 31) + 0x7FFFFFFF;
      v62 = v60 / 64;
      v63 = v42[1];
      if (v62 <= v59)
      {
        v64 = v86;
      }
      else
      {
        v64 = v86;
        if (v59 >= v63 && v62 <= v63)
        {
LABEL_117:
          v68 = 0;
          goto LABEL_119;
        }
        if (v62 >= v59)
          v65 = v59;
        else
          v65 = v62;
        v36 = __OFADD__(v65, v59);
        v66 = v65 + v59;
        if (v66 < 0 != v36)
          ++v66;
        v67 = v66 >> 1;
        if (v67 > v59)
          v59 = v67;
        if (v67 < v62)
          v62 = v67;
      }
      if (v59 >= v63 && v62 <= v63)
        goto LABEL_117;
      v68 = (v59 - 2 * v63 + v62) / 2;
LABEL_119:
      v88 = __PAIR64__(v68, v58);
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v27 + 3264))(v27, &v88);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 1456))(v27) == 99
        && (*(unsigned int (**)(uint64_t *))(*v26 + 1456))(v26) != 99)
      {
        v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 416))(v28);
        v72 = v42[1];
        v22 = v22 - *v42 - v71;
        v87 = v87 - v72 - HIDWORD(v71);
        v73 = (_DWORD)v71 << 6;
        if ((int)v71 < -33554432)
          v73 = 0x80000000;
        if ((int)v71 > 0x1FFFFFF)
          v73 = 0x7FFFFFFF;
        v36 = __OFSUB__(v73, (_DWORD)v32);
        v74 = v73 - v32;
        v75 = (v73 >> 31) + 0x7FFFFFFF;
        if (!v36)
          v75 = v74;
        v76 = v75 / 64;
        v77 = HIDWORD(v71) << 6;
        if (SHIDWORD(v71) < -33554432)
          v77 = 0x80000000;
        if (SHIDWORD(v71) <= 0x1FFFFFF)
          v78 = v77;
        else
          v78 = 0x7FFFFFFF;
        v36 = __OFSUB__(v78, HIDWORD(v32));
        v79 = v78 - HIDWORD(v32);
        v80 = (v78 >> 31) + 0x7FFFFFFF;
        if (!v36)
          v80 = v79;
        *v42 += v76;
        v42[1] = v72 + v80 / 64;
      }
      else
      {
        v69 = (*(uint64_t (**)(uint64_t *))(*v26 + 1456))(v26);
        v70 = v87;
        if (v69 == 99)
          v70 = 0;
        v87 = v70;
        if (v69 == 99)
          v22 = 0;
      }
      v24 = v85 - 1;
      --v7;
      ++v25;
      v21 = v64 - 1;
      if (!v21)
        goto LABEL_144;
    }
  }
  if (v6)
  {
LABEL_144:
    v89 = 0;
    LODWORD(v90) = 0;
    return WTF::fastFree(v81, v9);
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::scrollByPage(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1232))(a1);
  if (!v4)
    return 0;
  v5 = v4;
  while (1)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 3256))(v5);
    if (v6)
      break;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1232))(v5);
    if (!v5)
      return 0;
  }
  v9 = v6;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 416))(v6);
  v18 = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 496))(v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 832))(v9, 0, 1);
  v14 = v10;
  v15 = a2;
  switch(a2)
  {
    case 0:
      v15 = (HIDWORD(v10) - v13) & ~((HIDWORD(v10) - v13) >> 31);
      goto LABEL_11;
    case 1:
      v15 = HIDWORD(v11) - v13;
      if (HIDWORD(v11) - v13 >= v13 + HIDWORD(v10))
        v15 = v13 + HIDWORD(v10);
LABEL_11:
      HIDWORD(v18) = v15;
      v14 = v10;
      break;
    case 2:
      v14 = v11 - v12;
      if ((int)v11 - v12 >= v12 + (int)v10)
        v14 = v12 + v10;
      goto LABEL_15;
    case 3:
      v14 = (v10 - v12) & ~(((int)v10 - v12) >> 31);
LABEL_15:
      LODWORD(v18) = v14;
      v15 = HIDWORD(v10);
      break;
    default:
      break;
  }
  v16 = v14 == (_DWORD)v10 && v15 == HIDWORD(v10);
  v7 = !v16;
  if (!v16)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 3264))(v5, &v18);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1712))(a1);
    WebCore::Document::updateLayout(v17, 2u, 0);
  }
  return v7;
}

BOOL WebCore::AccessibilityObject::pressedIsPresent(WebCore::AccessibilityObject *this)
{
  _QWORD *Attribute;

  Attribute = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_pressedAttr);
  return *Attribute && *(_DWORD *)(*Attribute + 4) != 0;
}

uint64_t WebCore::AccessibilityObject::buttonRoleType(WebCore::AccessibilityObject *this)
{
  if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1024))(this) & 1) != 0)
    return 132;
  if (WebCore::AXCoreObject::hasPopup(this))
    return 84;
  return 10;
}

BOOL WebCore::AccessibilityObject::isFileUploadButton(WebCore::AccessibilityObject *this)
{
  uint64_t v1;
  void *v2;
  int v3;
  _BOOL8 v4;

  v1 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (!v1
    || (*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return 0;
  }
  v3 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v3 + 2;
  v4 = *(_DWORD *)(*(_QWORD *)(v1 + 240) + 12) == 64;
  if (v3)
  {
    *(_DWORD *)(v1 + 24) = v3;
  }
  else if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
  }
  return v4;
}

uint64_t WebCore::AccessibilityObject::defaultObjectInclusion(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v13;
  uint64_t v14;
  WebCore::AccessibilityObject *v15;
  int v16;
  BOOL v17;
  BOOL v18;
  int v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  _BYTE v23[8];
  WTF::StringImpl *v24;
  char v25;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 848))(this);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 45) & 2) != 0)
    {
      v22 = *(_QWORD *)(v2 + 32);
      if (v22)
        v2 = *(_QWORD *)(v22 + 8);
      else
        v2 = 0;
    }
    v3 = v2 + 80;
  }
  else
  {
    v9 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 832))(this);
    if (!v9)
      goto LABEL_23;
    v23[0] = 0;
    v25 = 0;
    v3 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 264))(v9, v23);
    if (v25)
    {
      v11 = v24;
      v24 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::destroy(v11, v10);
          if (!v3)
            goto LABEL_23;
          goto LABEL_4;
        }
        *(_DWORD *)v11 -= 2;
      }
    }
    if (!v3)
      goto LABEL_23;
  }
LABEL_4:
  v4 = *(_DWORD *)(*(_QWORD *)(v3 + 24) + 236);
  if ((v4 & 0x1000000) != 0)
    return 1;
  if ((v4 & 0x4000000) != 0 || (*(_BYTE *)(v3 + 40) & 0x30) != 0)
  {
    v5 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_hiddenAttr);
    if (!v5 || *(_DWORD *)(v5 + 4) != 5)
      return 1;
    v6 = *(_QWORD *)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v6 & 0xDF) != 0x46
        || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x41
        || (*(_BYTE *)(v6 + 2) & 0xDF) != 0x4C
        || (*(_BYTE *)(v6 + 3) & 0xDF) != 0x53)
      {
        return 1;
      }
      v7 = *(unsigned __int8 *)(v6 + 4);
    }
    else
    {
      if ((*(_WORD *)v6 & 0xFFDF) != 0x46
        || (*(_WORD *)(v6 + 2) & 0xFFDF) != 0x41
        || (*(_WORD *)(v6 + 4) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v6 + 6) & 0xFFDF) != 0x53)
      {
        return 1;
      }
      v7 = *(unsigned __int16 *)(v6 + 8);
    }
    if ((v7 & 0xFFFFFFDF) == 0x45)
      return 2;
    return 1;
  }
LABEL_23:
  if (*((_QWORD *)this + 27) && (*((_BYTE *)this + 224) || *((_BYTE *)this + 225))
    || WebCore::AccessibilityObject::isARIAHidden(this))
  {
    return 1;
  }
  v13 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 552))(this);
  v14 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1232))(this);
  if (v14)
  {
    v15 = (WebCore::AccessibilityObject *)v14;
    if ((v13 & 1) != 0)
    {
      while (1)
      {
        v16 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v15 + 2976))(v15);
        v17 = (v16 - 49) > 0x37 || ((1 << (v16 - 49)) & 0xA0004000000001) == 0;
        v18 = !v17 || v16 == 10;
        if (v18 || !(*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v15 + 3080))(v15))
          break;
        v15 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v15 + 1232))(v15);
        if (!v15)
          goto LABEL_51;
      }
    }
    else
    {
      while (!WebCore::AccessibilityObject::isARIAHidden(v15))
      {
        v19 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v15 + 2976))(v15);
        v20 = (v19 - 49) > 0x37 || ((1 << (v19 - 49)) & 0xA0004000000001) == 0;
        v21 = !v20 || v19 == 10;
        if (v21 || !(*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v15 + 3080))(v15))
          break;
        v15 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v15 + 1232))(v15);
        if (!v15)
          goto LABEL_51;
      }
    }
    return 1;
  }
LABEL_51:
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 3)
  {
    return 0;
  }
  else if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 134)
  {
    return 1;
  }
  else
  {
    return 2;
  }
}

BOOL WebCore::AccessibilityObject::isARIAHidden(WebCore::AccessibilityObject *this)
{
  _BOOL8 v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  char v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;

  if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 552))(this) & 1) != 0)
    return 0;
  v3 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  v4 = (WTF::StringImpl *)v3;
  if (v3 && (*(_WORD *)(v3 + 28) & 8) != 0)
  {
    v7 = 0;
    v6 = (WTF::StringImpl **)(*(_QWORD *)(v3 + 96) + 24);
    v5 = v3;
  }
  else
  {
    v5 = 0;
    v6 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    v7 = 1;
  }
  v8 = *v6;
  if (*v6)
    *(_DWORD *)v8 += 2;
  if (v8 == *(WTF::StringImpl **)(WebCore::HTMLNames::bodyTag + 24)
    || v8 == *(WTF::StringImpl **)(WebCore::HTMLNames::htmlTag + 24)
    || v8 == *(WTF::StringImpl **)(WebCore::SVGNames::svgTag + 24) && !*(_QWORD *)(v5 + 32))
  {
    goto LABEL_50;
  }
  if (!v3)
    goto LABEL_16;
  v9 = *(_QWORD *)(v3 + 32);
  if (!v9)
    goto LABEL_16;
  if ((*(_WORD *)(v9 + 28) & 8) == 0)
    goto LABEL_16;
  v10 = *(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL;
  if (!v10)
    goto LABEL_16;
  v28 = *(_QWORD *)(v10 + 88);
  if (!v28)
    goto LABEL_16;
  v29 = *(_QWORD *)(v28 + 224);
  if (!v29)
    goto LABEL_16;
  v50 = v7;
  v30 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v29 + 16))(v29, v4);
  v7 = v50;
  if (!v30)
    goto LABEL_16;
  v31 = v30;
  v32 = *(_QWORD *)(v30 + 104);
  if (v32
    && ((v33 = *(_DWORD *)(v32 + 4), (v33 & 1) != 0)
      ? (v34 = *(_QWORD *)(v32 + 40), LODWORD(v35) = *(_DWORD *)(v32 + 52))
      : (v34 = v32 + 32, LODWORD(v35) = v33 >> 5),
        (_DWORD)v35))
  {
    v35 = v35;
    v36 = (uint64_t *)(v34 + 8);
    while (1)
    {
      v37 = *(v36 - 1);
      if (v37 == WebCore::HTMLNames::aria_hiddenAttr
        || *(_QWORD *)(v37 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_hiddenAttr + 24)
        && *(_QWORD *)(v37 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_hiddenAttr + 32))
      {
        break;
      }
      v36 += 2;
      if (!--v35)
      {
        v36 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v36 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v38 = *v36;
  if (!*v36)
  {
    v43 = *(_QWORD *)(v30 + 72);
    if ((v43 & 0x3000000000000000) != 0x2000000000000000
      && ((v43 & 0x3000000000000000) != 0x3000000000000000 || (*(_WORD *)(v30 + 28) & 0x100) != 0))
    {
      goto LABEL_98;
    }
    v44 = v43 & 0xFFFFFFFFFFFFLL;
    if (!v44)
      goto LABEL_98;
    v45 = *(_QWORD *)(v44 + 104);
    if (!v45)
      goto LABEL_98;
    v46 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v45 + 8), (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_hiddenAttr);
    v47 = *(_QWORD *)(v45 + 8);
    if (v47)
      v47 += 32 * *(unsigned int *)(v47 - 4);
    if (v47 != v46)
    {
      v51 = v31;
      v52 = v31;
      v48 = *(unsigned int *)(v46 + 24);
      if ((_DWORD)v48 == -1)
        goto LABEL_101;
      v53 = &v51;
      v49 = (uint64_t *)((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore24CustomElementDefaultARIA17valueForAttributeERKNS8_7ElementERKNS8_13QualifiedNameEE3__0JZNKS9_17valueForAttributeESC_SF_E3__1ZNKS9_17valueForAttributeESC_SF_E3__2EEEEEJRKNS0_6__implIJNS6_10AtomStringENS6_7WeakPtrISA_NS8_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISO_EEEENS6_6VectorISR_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v48])(&v53, v46 + 8);
    }
    else
    {
LABEL_98:
      v49 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v38 = *v49;
    if (!*v49)
      goto LABEL_100;
  }
  if (*(_DWORD *)(v38 + 4) != 4)
    goto LABEL_100;
  v39 = *(_QWORD *)(v38 + 8);
  if ((*(_BYTE *)(v38 + 16) & 4) == 0)
    goto LABEL_102;
  if ((*(_BYTE *)v39 & 0xDF) != 0x54 || (*(_BYTE *)(v39 + 1) & 0xDF) != 0x52 || (*(_BYTE *)(v39 + 2) & 0xDF) != 0x55)
    goto LABEL_100;
  v40 = *(unsigned __int8 *)(v39 + 3);
LABEL_83:
  v41 = (v40 & 0xFFFFFFDF) == 69;
  v2 = v41;
  v42 = v50;
  if (v41)
    v42 = 1;
  if ((v42 & 1) != 0)
    goto LABEL_51;
  while (1)
  {
    v11 = *(_QWORD *)(v5 + 104);
    if (!v11)
    {
LABEL_29:
      v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      goto LABEL_30;
    }
    v12 = *(_DWORD *)(v11 + 4);
    if ((v12 & 1) != 0)
    {
      v13 = *(_QWORD *)(v11 + 40);
      LODWORD(v14) = *(_DWORD *)(v11 + 52);
      if (!(_DWORD)v14)
        goto LABEL_29;
    }
    else
    {
      v13 = v11 + 32;
      LODWORD(v14) = v12 >> 5;
      if (!(_DWORD)v14)
        goto LABEL_29;
    }
    v14 = v14;
    v15 = (uint64_t *)(v13 + 8);
    while (1)
    {
      v16 = *(v15 - 1);
      if (v16 == WebCore::HTMLNames::aria_hiddenAttr
        || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_hiddenAttr + 24)
        && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_hiddenAttr + 32))
      {
        break;
      }
      v15 += 2;
      if (!--v14)
      {
        v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
LABEL_30:
    v17 = *v15;
    if (*v15)
      goto LABEL_31;
    v20 = *(_QWORD *)(v5 + 72);
    if ((v20 & 0x3000000000000000) != 0x2000000000000000
      && ((v20 & 0x3000000000000000) != 0x3000000000000000 || (*(_WORD *)(v5 + 28) & 0x100) != 0))
    {
      break;
    }
    v21 = v20 & 0xFFFFFFFFFFFFLL;
    if (!v21)
      break;
    v22 = *(_QWORD *)(v21 + 104);
    if (!v22)
      break;
    v23 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v22 + 8), (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_hiddenAttr);
    v24 = *(_QWORD *)(v22 + 8);
    if (v24)
      v24 += 32 * *(unsigned int *)(v24 - 4);
    if (v24 == v23)
      break;
    v51 = v5;
    v52 = v5;
    v25 = *(unsigned int *)(v23 + 24);
    if ((_DWORD)v25 != -1)
    {
      v53 = &v51;
      v26 = (uint64_t *)((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore24CustomElementDefaultARIA17valueForAttributeERKNS8_7ElementERKNS8_13QualifiedNameEE3__0JZNKS9_17valueForAttributeESC_SF_E3__1ZNKS9_17valueForAttributeESC_SF_E3__2EEEEEJRKNS0_6__implIJNS6_10AtomStringENS6_7WeakPtrISA_NS8_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISO_EEEENS6_6VectorISR_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v25])(&v53, v23 + 8);
      goto LABEL_49;
    }
LABEL_101:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_102:
    if ((*(_WORD *)v39 & 0xFFDF) == 0x54
      && (*(_WORD *)(v39 + 2) & 0xFFDF) == 0x52
      && (*(_WORD *)(v39 + 4) & 0xFFDF) == 0x55)
    {
      v40 = *(unsigned __int16 *)(v39 + 6);
      goto LABEL_83;
    }
LABEL_100:
    v7 = v50;
LABEL_16:
    if ((v7 & 1) != 0)
      goto LABEL_50;
  }
  v26 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_49:
  v17 = *v26;
  if (*v26)
  {
LABEL_31:
    if (*(_DWORD *)(v17 + 4) != 4)
      goto LABEL_50;
    v18 = *(_QWORD *)(v17 + 8);
    if ((*(_BYTE *)(v17 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v18 & 0xDF) != 0x54
        || (*(_BYTE *)(v18 + 1) & 0xDF) != 0x52
        || (*(_BYTE *)(v18 + 2) & 0xDF) != 0x55)
      {
        goto LABEL_50;
      }
      v19 = *(unsigned __int8 *)(v18 + 3);
    }
    else
    {
      if ((*(_WORD *)v18 & 0xFFDF) != 0x54
        || (*(_WORD *)(v18 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(v18 + 4) & 0xFFDF) != 0x55)
      {
        goto LABEL_50;
      }
      v19 = *(unsigned __int16 *)(v18 + 6);
    }
    v2 = (v19 & 0xFFFFFFDF) == 69;
    goto LABEL_51;
  }
LABEL_50:
  v2 = 0;
LABEL_51:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v2;
}

BOOL WebCore::AccessibilityObject::isDOMHidden(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _BYTE v9[8];
  WTF::StringImpl *v10;
  char v11;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 848))(this);
  if (!v2)
  {
    v5 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 832))(this);
    if (!v5)
      return 1;
    v9[0] = 0;
    v11 = 0;
    v3 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 264))(v5, v9);
    if (v11)
    {
      v7 = v10;
      v10 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
        {
          WTF::StringImpl::destroy(v7, v6);
          if (!v3)
            return 1;
          goto LABEL_4;
        }
        *(_DWORD *)v7 -= 2;
      }
    }
    if (!v3)
      return 1;
    goto LABEL_4;
  }
  if ((*(_BYTE *)(v2 + 45) & 2) != 0)
  {
    v8 = *(_QWORD *)(v2 + 32);
    if (v8)
      v2 = *(_QWORD *)(v8 + 8);
    else
      v2 = 0;
  }
  v3 = v2 + 80;
LABEL_4:
  if ((*(_QWORD *)(v3 + 16) & 0x1FLL) != 0x1A && (*(_BYTE *)(*(_QWORD *)(v3 + 24) + 239) & 4) == 0)
    return (*(_BYTE *)(v3 + 40) & 0x30) != 0;
  return 1;
}

uint64_t WebCore::AccessibilityObject::accessibilityIsIgnored(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  WebCore::AXObjectCache *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  WebCore::AccessibilityObject *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BYTE v32[31];
  char v33;
  uint64_t v34;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
  v3 = (WebCore::AXObjectCache *)v2;
  if (v2)
  {
    v4 = *(uint64_t **)(v2 + 88);
    if (v4)
    {
      v5 = *v4;
      if (v5)
      {
        v6 = *((_QWORD *)this + 2);
        v7 = *(_DWORD *)(v5 - 8);
        v8 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
        v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
        v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
        v11 = v7 & ((v10 >> 31) ^ v10);
        v12 = *(_QWORD *)(v5 + 16 * v11);
        if (v12 != v6)
        {
          v13 = 1;
          while (v12)
          {
            v11 = ((_DWORD)v11 + v13) & v7;
            v12 = *(_QWORD *)(v5 + 16 * v11);
            ++v13;
            if (v12 == v6)
              goto LABEL_10;
          }
          v11 = *(unsigned int *)(v5 - 4);
        }
LABEL_10:
        if (v11 != *(_DWORD *)(v5 - 4))
        {
          v14 = *(unsigned __int8 *)(v5 + 16 * v11 + 8);
          if (v14 == 1)
            return 1;
          if (!v14)
            return 0;
        }
      }
    }
    if (*(_BYTE *)(v2 + 361))
      goto LABEL_17;
  }
  if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2896))(this) & 1) == 0)
LABEL_17:
    v15 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2872))(this);
  else
    v15 = 1;
  v16 = *((unsigned __int8 *)this + 59);
  *((_BYTE *)this + 59) = v15;
  if (v3)
  {
    v17 = v16 == 1 ? v15 : 1;
    v18 = v16 ? 0 : v15;
    if (v17 != 1 || v18 != 0)
    {
      v20 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1232))(this);
      WebCore::AXObjectCache::childrenChanged(v3, v20);
    }
    v21 = (uint64_t *)*((_QWORD *)v3 + 11);
    if (v21)
    {
      v22 = *((_QWORD *)this + 2);
      v34 = v22;
      v23 = *v21;
      if (!*v21)
        goto LABEL_39;
      v24 = *(_DWORD *)(v23 - 8);
      v25 = (v22 + ~(v22 << 32)) ^ ((unint64_t)(v22 + ~(v22 << 32)) >> 22);
      v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
      v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
      v28 = v24 & ((v27 >> 31) ^ v27);
      v29 = *(_QWORD *)(v23 + 16 * v28);
      if (v29 != v22)
      {
        v30 = 1;
        while (v29)
        {
          v28 = ((_DWORD)v28 + v30) & v24;
          v29 = *(_QWORD *)(v23 + 16 * v28);
          ++v30;
          if (v29 == v22)
            goto LABEL_38;
        }
        v28 = *(unsigned int *)(v23 - 4);
      }
LABEL_38:
      if (v28 != *(_DWORD *)(v23 - 4))
      {
        *(_BYTE *)(v23 + 16 * v28 + 8) = v15;
      }
      else
      {
LABEL_39:
        v33 = v15;
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::AXComputedObjectAttributeCache::CachedAXObjectAttributes&>(v21, &v34, &v33, (uint64_t)v32);
      }
    }
  }
  return v15;
}

uint64_t WebCore::AccessibilityObject::preventKeyboardDOMEventDispatch(WebCore::AccessibilityObject *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 528);
    if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
      return HIDWORD(*(_QWORD *)(*(_QWORD *)(v3 + 136) + 688)) & 1;
    else
      return 0;
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::setPreventKeyboardDOMEventDispatch(WebCore::AccessibilityObject *this, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 136);
        v7 = 0x100000000;
        if (!a2)
          v7 = 0;
        *(_QWORD *)(v6 + 688) = *(_QWORD *)(v6 + 688) & 0xFFFFFFFEFFFFFFFFLL | v7;
      }
    }
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::isKeyboardFocusable(WebCore::AccessibilityObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 832))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 552))(result);
  return result;
}

uint64_t WebCore::AccessibilityObject::isContainedBySecureField(WebCore::AccessibilityObject *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v7;
  int v8;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 840))(this);
  if (v2)
  {
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2976))(this) == 134
      && ((v3 = **(_QWORD **)(v2 + 40)) != 0 ? (v4 = (*(_WORD *)(v3 + 28) & 0x80) == 0) : (v4 = 1),
          !v4
       && (v5 = *(_QWORD *)(v3 + 200)) != 0
       && (v7 = *(_QWORD *)(v5 + 8)) != 0
       && (*(_WORD *)(v7 + 28) & 0x10) != 0
       && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)))
    {
      v8 = *(_DWORD *)(v7 + 24);
      *(_DWORD *)(v7 + 24) = v8 + 2;
      if (*(_DWORD *)(*(_QWORD *)(v7 + 240) + 12) == 2048)
        v2 = 1;
      else
        v2 = (*(unsigned __int16 *)(v7 + 230) >> 10) & 1;
      if (v8)
      {
        *(_DWORD *)(v7 + 24) = v8;
      }
      else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t WebCore::AccessibilityObject::ariaSelectedRows(void)::$_0::operator()<WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int v19;

  if (a3)
  {
    v3 = a2;
    v4 = result;
    v5 = &a2[a3];
    do
    {
      v17 = 0;
      v6 = *v3;
      if (*v3)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(*v3);
        if ((_DWORD)result)
        {
          v17 = (_QWORD *)v6;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 544))(v6);
          if ((result & 1) != 0)
            goto LABEL_12;
          (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*v17 + 984))(&v18, v17, 2);
          if (v19)
          {
            v8 = v18;
            v9 = 8 * v19;
            while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 552))(*v8) & 1) == 0)
            {
              ++v8;
              v9 -= 8;
              if (!v9)
                goto LABEL_10;
            }
            result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v7);
LABEL_12:
            v10 = *(uint64_t **)v4;
            v11 = *(unsigned int *)(*(_QWORD *)v4 + 12);
            if ((_DWORD)v11 == *(_DWORD *)(*(_QWORD *)v4 + 8))
            {
              result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AXCoreObject*>(*(_QWORD *)v4, (uint64_t *)&v17);
              goto LABEL_25;
            }
            v12 = *v10;
            v13 = v17;
            if (v17)
            {
              v14 = v17[1];
              if (__ldaxr((unsigned __int8 *)v14))
              {
                __clrex();
                goto LABEL_18;
              }
              if (__stxr(1u, (unsigned __int8 *)v14))
LABEL_18:
                result = MEMORY[0x19AEA534C](v14);
              ++*(_QWORD *)(v14 + 8);
              v16 = __ldxr((unsigned __int8 *)v14);
              if (v16 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v14))
                  goto LABEL_24;
              }
              else
              {
                __clrex();
              }
              result = WTF::Lock::unlockSlow((WTF::Lock *)v14);
            }
LABEL_24:
            *(_QWORD *)(v12 + 8 * v11) = v13;
            ++*((_DWORD *)v10 + 3);
LABEL_25:
            if (!**(_BYTE **)(v4 + 8))
              return result;
            goto LABEL_26;
          }
LABEL_10:
          result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v7);
        }
      }
LABEL_26:
      ++v3;
    }
    while (v3 != v5);
  }
  return result;
}

uint64_t WebCore::AccessibilityObject::selectedChildren@<X0>(WebCore::AccessibilityObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  char v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t **v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  int v45;
  int v46;
  const WebCore::Page *v47;
  uint64_t v48;
  uint64_t v49;
  char *v51;
  int v52;
  uint64_t v53;
  int v55;
  void *v56;
  char *v57;
  uint64_t v58;
  int v60;
  int v61;
  int v62;
  char *v63;
  void *v64;
  uint64_t v65;
  int v66;
  void *v67;
  char *v68;
  uint64_t v69;
  int v71;
  int v72;
  int v73;
  char *v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD v86[2];
  uint64_t v87;
  char v88;
  char *v89;
  uint64_t v90;

  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
  if (((result - 19) > 0x37 || ((1 << (result - 19)) & 0xC1800000800001) == 0)
    && ((result - 119) > 0xB || ((1 << (result - 119)) & 0xC01) == 0))
  {
    goto LABEL_108;
  }
  result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
  if ((int)result > 72)
  {
    if ((result - 73) >= 2)
    {
      if ((result - 129) >= 2)
      {
        if ((_DWORD)result != 119)
          goto LABEL_108;
        result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this);
        if ((_DWORD)result != 119)
          goto LABEL_108;
        result = (*(uint64_t (**)(WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
        v7 = *(unsigned int *)(result + 12);
        if (!(_DWORD)v7)
          goto LABEL_108;
        v8 = *(_QWORD **)result;
        v9 = 8 * v7;
        while (1)
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 1456))(*v8);
          if ((_DWORD)result == 121)
          {
            result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 528))(*v8);
            if ((result & 1) != 0)
              break;
            result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 544))(*v8);
            if ((result & 1) != 0)
              break;
          }
          ++v8;
          v9 -= 8;
          if (!v9)
            goto LABEL_108;
        }
        v28 = *v8;
        if (!*v8)
          goto LABEL_108;
        goto LABEL_106;
      }
      goto LABEL_25;
    }
    (*(void (**)(char **__return_ptr, WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)this + 984))(&v89, this, 1);
    if (HIDWORD(v90))
    {
      v28 = *(_QWORD *)v89;
      WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v27);
      if (v28)
        goto LABEL_106;
    }
    else
    {
      WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v27);
    }
    v47 = (const WebCore::Page *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1704))(this);
    result = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1488))(this);
    if (!v47)
      goto LABEL_108;
    if (!result)
      goto LABEL_108;
    result = WebCore::AXObjectCache::focusedObjectForPage((WebCore::AXObjectCache *)result, v47);
    if (!result)
      goto LABEL_108;
    v48 = result;
    v49 = *(_QWORD *)(result + 8);
    if (__ldaxr((unsigned __int8 *)v49))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v49))
    {
      goto LABEL_129;
    }
    MEMORY[0x19AEA534C](v49);
LABEL_129:
    ++*(_QWORD *)(v49 + 8);
    v66 = __ldxr((unsigned __int8 *)v49);
    if (v66 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v49))
      {
LABEL_134:
        v90 = 1;
        v68 = (char *)WTF::fastMalloc((WTF *)8);
        v89 = v68;
        v69 = *(_QWORD *)(v48 + 8);
        if (__ldaxr((unsigned __int8 *)v69))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v69))
        {
          goto LABEL_138;
        }
        MEMORY[0x19AEA534C](v69);
LABEL_138:
        ++*(_QWORD *)(v69 + 8);
        v71 = __ldxr((unsigned __int8 *)v69);
        if (v71 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v69))
            goto LABEL_143;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v69);
LABEL_143:
        *(_QWORD *)v68 = v48;
        v72 = v90;
        v73 = HIDWORD(v90) + 1;
        v74 = v89;
        v89 = 0;
        v90 = 0;
        *(_QWORD *)a2 = v74;
        *(_DWORD *)(a2 + 8) = v72;
        *(_DWORD *)(a2 + 12) = v73;
        *(_BYTE *)(a2 + 16) = 1;
        result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v67);
        v65 = *(_QWORD *)(v48 + 8);
LABEL_144:
        if (__ldaxr((unsigned __int8 *)v65))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v65))
        {
          goto LABEL_148;
        }
        result = MEMORY[0x19AEA534C](v65);
LABEL_148:
        v76 = *(_QWORD *)(v65 + 8);
        v77 = v76 - 1;
        *(_QWORD *)(v65 + 8) = v76 - 1;
        if (v76 == 1)
        {
          v81 = *(_QWORD *)(v65 + 16);
          v78 = *(_QWORD *)(v65 + 24);
          *(_QWORD *)(v65 + 24) = 0;
          v79 = v81 != 0;
        }
        else
        {
          v78 = 0;
          v79 = 1;
        }
        v80 = __ldxr((unsigned __int8 *)v65);
        if (v80 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v65))
          {
LABEL_155:
            if (!v77)
            {
              if (v78)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
              if (!v79)
                return WTF::fastFree((WTF *)v65, v64);
            }
            return result;
          }
        }
        else
        {
          __clrex();
        }
        result = WTF::Lock::unlockSlow((WTF::Lock *)v65);
        goto LABEL_155;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v49);
    goto LABEL_134;
  }
  if ((int)result <= 65)
  {
    if ((_DWORD)result == 19)
    {
      (*(void (**)(char **__return_ptr, WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)this + 984))(&v89, this, 1);
      if (!HIDWORD(v90))
        goto LABEL_93;
      v28 = *(_QWORD *)v89;
      result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v13);
      if (!v28)
        goto LABEL_108;
LABEL_106:
      v53 = *(_QWORD *)(v28 + 8);
      if (__ldaxr((unsigned __int8 *)v53))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v53))
      {
        goto LABEL_112;
      }
      MEMORY[0x19AEA534C](v53);
LABEL_112:
      ++*(_QWORD *)(v53 + 8);
      v55 = __ldxr((unsigned __int8 *)v53);
      if (v55 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v53))
        {
LABEL_117:
          v90 = 1;
          v57 = (char *)WTF::fastMalloc((WTF *)8);
          v89 = v57;
          v58 = *(_QWORD *)(v28 + 8);
          if (__ldaxr((unsigned __int8 *)v58))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v58))
          {
            goto LABEL_121;
          }
          MEMORY[0x19AEA534C](v58);
LABEL_121:
          ++*(_QWORD *)(v58 + 8);
          v60 = __ldxr((unsigned __int8 *)v58);
          if (v60 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v58))
              goto LABEL_126;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v58);
LABEL_126:
          *(_QWORD *)v57 = v28;
          v61 = v90;
          v62 = HIDWORD(v90) + 1;
          v63 = v89;
          v89 = 0;
          v90 = 0;
          *(_QWORD *)a2 = v63;
          *(_DWORD *)(a2 + 8) = v61;
          *(_DWORD *)(a2 + 12) = v62;
          *(_BYTE *)(a2 + 16) = 1;
          result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v56);
          v65 = *(_QWORD *)(v28 + 8);
          goto LABEL_144;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v53);
      goto LABEL_117;
    }
    if ((_DWORD)result != 42)
      goto LABEL_108;
LABEL_25:
    v10 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 576))(this);
    v88 = v10;
    v82 = 0;
    v83 = 0;
    (*(void (**)(char **__return_ptr, WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)this + 984))(&v89, this, 1);
    if (HIDWORD(v90))
    {
      v12 = *(_QWORD *)v89;
      WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v11);
      v87 = v12;
      if (v12
        && ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 1456))(v12) == 131
         || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 400))(v12)))
      {
        WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AXCoreObject*>((uint64_t)&v82, &v87);
        if (!v10)
          goto LABEL_68;
      }
    }
    else
    {
      WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v11);
      v87 = 0;
    }
    v86[0] = &v82;
    v86[1] = &v88;
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1456))(this) == 129)
    {
      v84 = 0;
      v85 = 0;
      v89 = 0;
      v90 = 0;
      WebCore::AccessibilityObject::ariaTreeRows(this, (uint64_t)&v84, (uint64_t)&v89);
      WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v29);
      WebCore::AccessibilityObject::ariaSelectedRows(void)::$_0::operator()<WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v86, v84, SHIDWORD(v85));
      v31 = &v84;
    }
    else
    {
      if (!(*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 64))(this)
        || !(*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 192))(this)
        || !*((_BYTE *)this + 312))
      {
        goto LABEL_68;
      }
      (*(void (**)(char **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)this + 208))(&v89, this);
      WebCore::AccessibilityObject::ariaSelectedRows(void)::$_0::operator()<WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v86, (uint64_t *)v89, SHIDWORD(v90));
      v31 = (uint64_t **)&v89;
    }
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v30);
LABEL_68:
    *(_QWORD *)a2 = v82;
    v32 = v83;
    v82 = 0;
    v83 = 0;
    *(_QWORD *)(a2 + 8) = v32;
    *(_BYTE *)(a2 + 16) = 1;
    v33 = (char **)&v82;
    return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v13);
  }
  if ((_DWORD)result == 66)
  {
    v89 = 0;
    v90 = 0;
    v34 = (*(uint64_t (**)(WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
    v35 = *(unsigned int *)(v34 + 12);
    if (!(_DWORD)v35)
      goto LABEL_93;
    v36 = *(_QWORD **)v34;
    v37 = 8 * v35;
    while (1)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v36 + 1456))(*v36) != 69
        || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v36 + 544))(*v36))
      {
        goto LABEL_90;
      }
      v38 = HIDWORD(v90);
      if (HIDWORD(v90) == (_DWORD)v90)
      {
        v39 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v89, HIDWORD(v90) + 1, (unint64_t)v36);
        v38 = HIDWORD(v90);
        v40 = v89;
        v41 = *(_QWORD *)v39;
        if (!*(_QWORD *)v39)
          goto LABEL_89;
      }
      else
      {
        v40 = v89;
        v41 = *v36;
        if (!*v36)
          goto LABEL_89;
      }
      v42 = *(_QWORD *)(v41 + 8);
      if (__ldaxr((unsigned __int8 *)v42))
        break;
      if (__stxr(1u, (unsigned __int8 *)v42))
        goto LABEL_83;
LABEL_84:
      ++*(_QWORD *)(v42 + 8);
      v44 = __ldxr((unsigned __int8 *)v42);
      if (v44 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v42))
          goto LABEL_89;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v42);
LABEL_89:
      *(_QWORD *)&v40[8 * v38] = v41;
      ++HIDWORD(v90);
LABEL_90:
      ++v36;
      v37 -= 8;
      if (!v37)
      {
        v45 = HIDWORD(v90);
        if (HIDWORD(v90))
        {
          *(_QWORD *)a2 = v89;
          v46 = v90;
          v89 = 0;
          v90 = 0;
          *(_DWORD *)(a2 + 8) = v46;
          *(_DWORD *)(a2 + 12) = v45;
          *(_BYTE *)(a2 + 16) = 1;
          goto LABEL_103;
        }
LABEL_93:
        result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v13);
LABEL_108:
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 16) = 0;
        return result;
      }
    }
    __clrex();
LABEL_83:
    MEMORY[0x19AEA534C](v42);
    goto LABEL_84;
  }
  if ((_DWORD)result != 67)
    goto LABEL_108;
  v89 = 0;
  v90 = 0;
  v14 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 576))(this);
  v15 = (*(uint64_t (**)(WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
  v16 = *(unsigned int *)(v15 + 12);
  if (!(_DWORD)v16)
  {
    v52 = 0;
    v51 = 0;
    goto LABEL_102;
  }
  v17 = *(_QWORD **)v15;
  v18 = *(_QWORD *)v15 + 8 * v16;
  do
  {
    while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v17 + 1456))(*v17) == 68
         && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v17 + 544))(*v17))
    {
      v19 = HIDWORD(v90);
      if (HIDWORD(v90) == (_DWORD)v90)
      {
        v20 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v89, HIDWORD(v90) + 1, (unint64_t)v17);
        v19 = HIDWORD(v90);
        v21 = v89;
        v22 = *(_QWORD *)v20;
        if (!*(_QWORD *)v20)
          goto LABEL_52;
      }
      else
      {
        v21 = v89;
        v22 = *v17;
        if (!*v17)
          goto LABEL_52;
      }
      v23 = *(_QWORD *)(v22 + 8);
      if (__ldaxr((unsigned __int8 *)v23))
      {
        __clrex();
LABEL_46:
        MEMORY[0x19AEA534C](v23);
        goto LABEL_47;
      }
      if (__stxr(1u, (unsigned __int8 *)v23))
        goto LABEL_46;
LABEL_47:
      ++*(_QWORD *)(v23 + 8);
      v25 = __ldxr((unsigned __int8 *)v23);
      if (v25 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v23))
          goto LABEL_52;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
LABEL_52:
      *(_QWORD *)&v21[8 * v19] = v22;
      LODWORD(v16) = ++HIDWORD(v90);
      if (++v17 == (_QWORD *)v18)
        v26 = 0;
      else
        v26 = v14;
      if ((v26 & 1) == 0)
        goto LABEL_100;
    }
    ++v17;
  }
  while (v17 != (_QWORD *)v18);
  LODWORD(v16) = HIDWORD(v90);
LABEL_100:
  v51 = v89;
  v52 = v90;
LABEL_102:
  v89 = 0;
  v90 = 0;
  *(_QWORD *)a2 = v51;
  *(_DWORD *)(a2 + 8) = v52;
  *(_DWORD *)(a2 + 12) = v16;
  *(_BYTE *)(a2 + 16) = 1;
LABEL_103:
  v33 = &v89;
  return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v13);
}

WTF *WebCore::AccessibilityObject::relatedObjects@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  WTF *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  void *v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  char v42;
  uint64_t v43;

  result = (WTF *)(*(uint64_t (**)(_QWORD *))(*a1 + 1488))(a1);
  if (result
    && (v7 = result,
        result = (WTF *)WebCore::AXObjectCache::relatedObjectIDsFor((uint64_t *)result, a1, a2, 1, (uint64_t)&v40),
        v42))
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if (v40)
    {
      v9 = *(unsigned int *)(v40 - 12);
      if ((_DWORD)v9)
      {
        if (v9 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v10 = WTF::fastMalloc((WTF *)(8 * v9));
        *(_DWORD *)(a3 + 8) = v9;
        *(_QWORD *)a3 = v10;
      }
    }
    v11 = v41;
    if (v41)
    {
      v12 = *((_QWORD *)v7 + 7);
      if (v12)
      {
LABEL_9:
        v13 = *(_DWORD *)(v12 - 8);
        v14 = *(_QWORD *)v11 + ~(*(_QWORD *)v11 << 32);
        v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
        v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
        v17 = v13 & (((v16 + ~(v16 << 27)) >> 31) ^ ((_DWORD)v16 + ~((_DWORD)v16 << 27)));
        v18 = *(_QWORD *)(v12 + 16 * v17);
        if (v18 != *(_QWORD *)v11)
        {
          v19 = 1;
          do
          {
            if (!v18)
              goto LABEL_43;
            v17 = ((_DWORD)v17 + v19) & v13;
            v18 = *(_QWORD *)(v12 + 16 * v17);
            ++v19;
          }
          while (v18 != *(_QWORD *)v11);
        }
        v20 = *(_QWORD *)(v12 + 16 * v17 + 8);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 8);
          if (__ldaxr((unsigned __int8 *)v21))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v21))
          {
            goto LABEL_18;
          }
          MEMORY[0x19AEA534C](v21);
LABEL_18:
          ++*(_QWORD *)(v21 + 8);
          v23 = __ldxr((unsigned __int8 *)v21);
          if (v23 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v21))
            {
LABEL_23:
              v43 = v20;
              v24 = *(unsigned int *)(a3 + 12);
              if ((_DWORD)v24 == *(_DWORD *)(a3 + 8))
              {
                v25 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v24 + 1, (unint64_t)&v43);
                v24 = *(unsigned int *)(a3 + 12);
                v26 = *(char **)a3;
                v27 = *(_QWORD *)v25;
                *(_QWORD *)v25 = 0;
                *(_QWORD *)&v26[8 * v24] = v27;
              }
              else
              {
                v28 = *(char **)a3;
                v43 = 0;
                *(_QWORD *)&v28[8 * v24] = v20;
              }
              *(_DWORD *)(a3 + 12) = v24 + 1;
              v29 = v43;
              v43 = 0;
              if (!v29)
                goto LABEL_43;
              v30 = *(_QWORD *)(v29 + 8);
              if (__ldaxr((unsigned __int8 *)v30))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v30))
              {
                goto LABEL_31;
              }
              MEMORY[0x19AEA534C](v30);
LABEL_31:
              v32 = *(_QWORD *)(v30 + 8);
              v33 = v32 - 1;
              *(_QWORD *)(v30 + 8) = v32 - 1;
              if (v32 == 1)
              {
                v37 = *(_QWORD *)(v30 + 16);
                v34 = *(_QWORD *)(v30 + 24);
                *(_QWORD *)(v30 + 24) = 0;
                v35 = v37 != 0;
              }
              else
              {
                v34 = 0;
                v35 = 1;
              }
              v36 = __ldxr((unsigned __int8 *)v30);
              if (v36 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v30))
                {
                  if (v33)
                    goto LABEL_43;
LABEL_39:
                  if (v34)
                    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
                  if (!v35)
                    WTF::fastFree((WTF *)v30, v8);
                  goto LABEL_43;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v30);
              if (v33)
                goto LABEL_43;
              goto LABEL_39;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v21);
          goto LABEL_23;
        }
LABEL_43:
        while (1)
        {
          v11 = (WTF *)*((_QWORD *)v11 + 2);
          if (!v11)
            break;
          v12 = *((_QWORD *)v7 + 7);
          if (v12)
            goto LABEL_9;
        }
      }
      else
      {
        do
          v11 = (WTF *)*((_QWORD *)v11 + 2);
        while (v11);
      }
    }
    result = WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)a3, *(unsigned int *)(a3 + 12));
    if (v42)
    {
      result = v41;
      if (v41)
      {
        do
        {
          v39 = (WTF *)*((_QWORD *)result + 2);
          WTF::fastFree(result, v38);
          result = v39;
        }
        while (v39);
      }
      if (v40)
        return (WTF *)WTF::fastFree((WTF *)(v40 - 16), v38);
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

WebCore::Element *WebCore::AccessibilityObject::innerHTML@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::Element *result;

  result = (WebCore::Element *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 832))(this);
  if (result)
    return WebCore::Element::innerHTML(result, a2);
  *a2 = 0;
  return result;
}

WebCore::Element *WebCore::AccessibilityObject::outerHTML@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::Element *result;

  result = (WebCore::Element *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 832))(this);
  if (result)
    return WebCore::Element::outerHTML(result, a2);
  *a2 = 0;
  return result;
}

WebCore::AccessibilityRenderObject *WebCore::AccessibilityRenderObject::AccessibilityRenderObject(WebCore::AccessibilityRenderObject *this, WebCore::RenderObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  void *v10;
  WTF *v11;

  if ((*((_BYTE *)a2 + 45) & 1) != 0)
    v4 = 0;
  else
    v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  *(_OWORD *)((char *)this + 218) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v5 = 0;
  *(_OWORD *)(v5 + 8) = xmmword_19689B170;
  *(_QWORD *)(v5 + 24) = this;
  *(_OWORD *)((char *)this + 41) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_WORD *)((char *)this + 57) = 134;
  *((_BYTE *)this + 59) = 2;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_WORD *)this + 116) = 0;
  *(_OWORD *)((char *)this + 211) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_QWORD *)this = off_1E337CD98;
  *((_QWORD *)this + 1) = v5;
  *((_BYTE *)this + 234) = -122;
  if (v4)
  {
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  else
  {
    v6 = 0;
  }
  *((_QWORD *)this + 30) = v6;
  *(_QWORD *)this = off_1E337F4E0;
  v8 = *((_QWORD *)a2 + 1);
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a2;
    v11 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v8;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WTF::fastFree(v11, v10);
        v8 = *((_QWORD *)a2 + 1);
        if (!v8)
          goto LABEL_10;
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
  }
  ++*(_DWORD *)v8;
LABEL_10:
  *((_QWORD *)this + 31) = v8;
  return this;
}

uint64_t WebCore::AccessibilityProgressIndicator::create@<X0>(WebCore::AccessibilityProgressIndicator *this@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  void *v12;
  WTF *v13;

  v5 = (_OWORD *)WTF::fastMalloc((WTF *)0x100);
  v6 = v5;
  if ((*((_BYTE *)this + 45) & 1) != 0)
    v7 = 0;
  else
    v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  *(_OWORD *)((char *)v5 + 218) = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = v6;
  *(_OWORD *)((char *)v6 + 41) = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *(_WORD *)((char *)v6 + 57) = 134;
  *((_BYTE *)v6 + 59) = 2;
  *((_BYTE *)v6 + 64) = 0;
  *((_BYTE *)v6 + 96) = 0;
  *((_BYTE *)v6 + 104) = 0;
  *((_BYTE *)v6 + 176) = 0;
  *((_WORD *)v6 + 116) = 0;
  *(_OWORD *)((char *)v6 + 211) = 0u;
  *(_OWORD *)((char *)v6 + 200) = 0u;
  *(_OWORD *)((char *)v6 + 184) = 0u;
  *(_QWORD *)v6 = off_1E337CD98;
  *((_QWORD *)v6 + 1) = v8;
  *((_BYTE *)v6 + 234) = -122;
  if (v7)
  {
    v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  else
  {
    v9 = 0;
  }
  *((_QWORD *)v6 + 30) = v9;
  *(_QWORD *)v6 = off_1E337F4E0;
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = this;
    v13 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = result;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        WTF::fastFree(v13, v12);
        result = *((_QWORD *)this + 1);
        if (!result)
          goto LABEL_10;
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
  }
  ++*(_DWORD *)result;
LABEL_10:
  *((_QWORD *)v6 + 31) = result;
  *(_QWORD *)v6 = off_1E337E7D0;
  *a2 = v6;
  return result;
}

BOOL WebCore::AccessibilityProgressIndicator::computeAccessibilityIsIgnored(WebCore::AccessibilityProgressIndicator *this)
{
  return WebCore::AccessibilityObject::defaultObjectInclusion(this) == 1;
}

void WebCore::AccessibilityProgressIndicator::valueDescription(WebCore::AccessibilityProgressIndicator *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  int v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringBuilder *v16;
  __n128 v17;
  WebCore::AccessibilityNodeObject *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  BOOL v50;
  WebCore::AXObjectCache *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;

  v4 = (*(uint64_t (**)(WebCore::AccessibilityProgressIndicator *))(*(_QWORD *)this + 1456))(this);
  switch(v4)
  {
    case 'd':
    case 'f':
    case 'h':
      goto LABEL_6;
    case 'e':
    case 'g':
    case 'i':
      goto LABEL_9;
    case 'j':
      if (!(*(unsigned int (**)(WebCore::AccessibilityProgressIndicator *))(*(_QWORD *)this + 800))(this))
        goto LABEL_9;
      goto LABEL_6;
    default:
      if (v4 != 81 && v4 != 87)
        goto LABEL_9;
LABEL_6:
      v5 = (WTF::StringImpl *)*WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_valuetextAttr);
      if (v5)
      {
        v6 = *((_DWORD *)v5 + 1);
        *(_DWORD *)v5 += 2;
        *a2 = v5;
        if (v6)
          return;
      }
      else
      {
LABEL_9:
        *a2 = 0;
      }
      v7 = *((_QWORD *)this + 31);
      if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
      {
        if (*(_BYTE *)(v8 + 46) == 49)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40);
        }
        else
        {
          if ((*(_BYTE *)(v8 + 45) & 1) != 0)
            return;
          v9 = *(_QWORD *)(v8 + 24);
        }
      }
      else
      {
        v9 = *((_QWORD *)this + 30);
        if (!v9)
          return;
      }
      v10 = *(_QWORD *)(v9 + 8);
      if (!v10
        || (*(_WORD *)(v10 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))
      {
        return;
      }
      *(_DWORD *)(v10 + 24) += 2;
      v11 = (*(uint64_t (**)(WebCore::AccessibilityProgressIndicator *))(*(_QWORD *)this + 1712))(this);
      if (v11 && (v12 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled), (v12 & 1) != 0))
      {
        v44 = v11;
        if (*(_BYTE *)(v11 + 3362) || *(_BYTE *)(v11 + 3405))
        {
          while (1)
          {
            v52 = *(_QWORD *)(v44 + 528);
            if (!v52)
              break;
            v53 = *(_QWORD *)(v52 + 8);
            if (!v53)
              break;
            v54 = *(_QWORD *)(v53 + 120);
            if (!v54)
              break;
            v55 = *(_QWORD *)(v54 + 8);
            if (!v55)
              break;
            v44 = *(_QWORD *)(*(_QWORD *)(v55 + 40) + 8);
          }
        }
        else
        {
          v45 = *(_QWORD *)(v11 + 528);
          if (v45)
          {
            v46 = *(_QWORD *)(v45 + 8);
            if (v46)
            {
              v47 = *(_QWORD *)(*(_QWORD *)(v46 + 128) + 8);
              if (v47 && *(_BYTE *)(v47 + 144) == 0)
              {
                v49 = *(_QWORD *)(v47 + 296);
                if (v49)
                  v44 = v49;
              }
            }
          }
        }
        *(_DWORD *)(v44 + 24) += 2;
        v57 = (WTF::StringImpl *)v44;
        if (*(_QWORD *)(v44 + 1944))
          v50 = *(_BYTE *)(v44 + 3405) == 0;
        else
          v50 = 0;
        if (v50)
        {
          v13 = *(_QWORD *)(v44 + 1488);
          if (!v13)
          {
            v51 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
            v56 = WebCore::AXObjectCache::AXObjectCache(v51, (WebCore::Document *)v44);
            std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)(v44 + 1488), &v56);
            std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v56);
            WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
            v13 = *(_QWORD *)(v44 + 1488);
          }
        }
        else
        {
          v13 = 0;
        }
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v57);
      }
      else
      {
        v13 = 0;
      }
      v14 = WebCore::AXObjectCache::getOrCreate(v13, v10, 0);
      if (!v14)
        goto LABEL_27;
      v18 = (WebCore::AccessibilityNodeObject *)v14;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 2672))(v14))
        goto LABEL_27;
      WebCore::AccessibilityNodeObject::accessibilityDescriptionForChildren(v18, &v57);
      v19 = v57;
      v57 = 0;
      v20 = *a2;
      *a2 = v19;
      if (!v20)
        goto LABEL_27;
      v21 = *(_DWORD *)v20 - 2;
      if (*(_DWORD *)v20 != 2)
        goto LABEL_26;
      WTF::StringImpl::destroy(v20, v15);
      v20 = v57;
      v57 = 0;
      if (v20)
      {
        v21 = *(_DWORD *)v20 - 2;
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v15);
        else
LABEL_26:
          *(_DWORD *)v20 = v21;
      }
LABEL_27:
      v22 = (uint64_t)*a2;
      if (!*a2)
      {
        WebCore::Node::textContent((WebCore::Node *)v10, 0, v16, &v57, v17);
        v23 = v57;
        *a2 = v57;
LABEL_29:
        v22 = (uint64_t)v23;
        goto LABEL_30;
      }
      if (!*(_DWORD *)(v22 + 4))
      {
        WebCore::Node::textContent((WebCore::Node *)v10, 0, v16, &v57, v17);
        v23 = v57;
        *a2 = v57;
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v22, v15);
        else
          *(_DWORD *)v22 -= 2;
        goto LABEL_29;
      }
LABEL_30:
      v24 = *((_QWORD *)this + 31);
      if (v24 && (v25 = *(_QWORD *)(v24 + 8)) != 0)
      {
        if (*(_BYTE *)(v25 + 46) == 49)
        {
          v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 24) + 8) + 40);
        }
        else
        {
          if ((*(_BYTE *)(v25 + 45) & 1) != 0)
            goto LABEL_84;
          v26 = *(_QWORD *)(v25 + 24);
        }
      }
      else
      {
        v26 = *((_QWORD *)this + 30);
        if (!v26)
          goto LABEL_84;
      }
      v27 = *(_QWORD *)(v26 + 8);
      if (!v27
        || (*(_WORD *)(v27 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::meterTag + 24)
        || !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::lowAttr)&& !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::highAttr)&& !WebCore::AccessibilityObject::hasAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::optimumAttr))
      {
        goto LABEL_84;
      }
      WebCore::HTMLMeterElement::low((WebCore::HTMLMeterElement *)v27);
      v29 = v28;
      WebCore::HTMLMeterElement::high((WebCore::HTMLMeterElement *)v27);
      v31 = v30;
      WebCore::HTMLMeterElement::value((WebCore::HTMLMeterElement *)v27);
      v33 = v32;
      WebCore::HTMLMeterElement::optimum((WebCore::HTMLMeterElement *)v27);
      if (v34 < v29)
      {
        if (v33 > v29)
        {
          if (v33 <= v31)
            goto LABEL_56;
LABEL_52:
          WebCore::AXMeterGaugeRegionLessGoodText((uint64_t)&v57);
          goto LABEL_57;
        }
LABEL_55:
        WebCore::AXMeterGaugeRegionOptimumText((uint64_t)&v57);
        goto LABEL_57;
      }
      if (v31 >= v34)
      {
        if (v29 > v33 || v33 > v31)
          goto LABEL_56;
        goto LABEL_55;
      }
      if (v31 <= v33)
        goto LABEL_55;
      if (v29 > v33)
        goto LABEL_52;
LABEL_56:
      WebCore::AXMeterGaugeRegionSuboptimalText((uint64_t)&v57);
LABEL_57:
      v35 = (unsigned __int8 *)v57;
      if (!v57)
        goto LABEL_84;
      v36 = *((_DWORD *)v57 + 1);
      if (!v36)
      {
        v57 = 0;
        goto LABEL_82;
      }
      if (!v22)
      {
        *(_DWORD *)v57 += 2;
        *a2 = (WTF::StringImpl *)v35;
        goto LABEL_81;
      }
      v37 = *(_DWORD *)(v22 + 4);
      if (!v37)
      {
        *(_DWORD *)v57 += 2;
        v56 = 0;
        *a2 = (WTF::StringImpl *)v35;
        v42 = *(_DWORD *)v22 - 2;
        if (*(_DWORD *)v22 != 2)
        {
LABEL_80:
          *(_DWORD *)v22 = v42;
          goto LABEL_81;
        }
        goto LABEL_91;
      }
      *(_DWORD *)v22 += 2;
      *(_DWORD *)v35 += 2;
      if (v36 < 0 || (v38 = __OFADD__(v36, 2), v39 = v36 + 2, v38) || v37 < 0 || __OFADD__(v37, v39))
      {
        v56 = 0;
        goto LABEL_128;
      }
      if ((*(_BYTE *)(v22 + 16) & 4) != 0)
        v40 = (v35[16] >> 2) & 1;
      else
        v40 = 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((v37 + v39), v40, v22, (int8x16_t *)", ", 2u, (uint64_t)v35, &v56);
      v41 = v56;
      if (!v56)
      {
LABEL_128:
        __break(0xC471u);
        JUMPOUT(0x195620C00);
      }
      v56 = 0;
      *a2 = v41;
      if (*(_DWORD *)v22 != 2)
      {
        *(_DWORD *)v22 -= 2;
        goto LABEL_72;
      }
LABEL_91:
      WTF::StringImpl::destroy((WTF::StringImpl *)v22, v15);
      v43 = v56;
      v56 = 0;
      if (!v43)
        goto LABEL_94;
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_94:
        if (!v37)
          goto LABEL_81;
LABEL_72:
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v35, v15);
        else
          *(_DWORD *)v35 -= 2;
        v42 = *(_DWORD *)v22 - 2;
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::destroy((WTF::StringImpl *)v22, v15);
          goto LABEL_81;
        }
        goto LABEL_80;
      }
      WTF::StringImpl::destroy(v43, v15);
      if (v37)
        goto LABEL_72;
LABEL_81:
      v35 = (unsigned __int8 *)v57;
      v57 = 0;
      if (v35)
      {
LABEL_82:
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v35, v15);
        else
          *(_DWORD *)v35 -= 2;
      }
LABEL_84:
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v15);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      return;
  }
}

uint64_t WebCore::AccessibilityProgressIndicator::isIndeterminate(WebCore::AccessibilityProgressIndicator *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *((_QWORD *)this + 31);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    if (*(_BYTE *)(v6 + 46) == 49)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v6 + 45) & 1) != 0)
        return 0;
      v7 = *(_QWORD *)(v6 + 24);
    }
  }
  else
  {
    v7 = *((_QWORD *)this + 30);
    if (!v7)
      return 0;
  }
  result = *(_QWORD *)(v7 + 8);
  if (!result)
    return result;
  if ((*(_WORD *)(result + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::progressTag + 24))
  {
    return !WebCore::Element::hasAttribute((WebCore::Element *)result, (const WebCore::QualifiedName *)&WebCore::HTMLNames::valueAttr, a4, a5, a2);
  }
  return 0;
}

float WebCore::AccessibilityProgressIndicator::valueForRange(WebCore::AccessibilityProgressIndicator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  float result;
  double v10;

  v2 = *((_QWORD *)this + 31);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    if (*(_BYTE *)(v3 + 46) == 49)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v3 + 45) & 1) != 0)
        goto LABEL_14;
      v4 = *(_QWORD *)(v3 + 24);
    }
  }
  else
  {
    v4 = *((_QWORD *)this + 30);
    if (!v4)
      goto LABEL_12;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if (v5
    && (*(_WORD *)(v5 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::progressTag + 24))
  {
    WebCore::HTMLProgressElement::position((WebCore::HTMLProgressElement *)v5);
    if (v6 >= 0.0)
    {
      WebCore::HTMLProgressElement::value((WebCore::HTMLProgressElement *)v5);
      return v10;
    }
    v2 = *((_QWORD *)this + 31);
  }
LABEL_12:
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
  {
    v7 = *((_QWORD *)this + 30);
    if (v7)
      goto LABEL_18;
    return 0.0;
  }
LABEL_14:
  if (*(_BYTE *)(v3 + 46) == 49)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40);
    goto LABEL_18;
  }
  if ((*(_BYTE *)(v3 + 45) & 1) != 0)
    return 0.0;
  v7 = *(_QWORD *)(v3 + 24);
LABEL_18:
  v8 = *(_QWORD *)(v7 + 8);
  result = 0.0;
  if (v8
    && (*(_WORD *)(v8 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))
  {
    WebCore::HTMLMeterElement::value((WebCore::HTMLMeterElement *)v8);
    return v10;
  }
  return result;
}

float WebCore::AccessibilityProgressIndicator::maxValueForRange(WebCore::AccessibilityProgressIndicator *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  float result;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    if (*(_BYTE *)(v2 + 46) == 49)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v2 + 45) & 1) != 0)
        goto LABEL_13;
      v3 = *(_QWORD *)(v2 + 24);
    }
  }
  else
  {
    v3 = *((_QWORD *)this + 30);
    if (!v3)
      goto LABEL_11;
  }
  v4 = *(_QWORD *)(v3 + 8);
  if (v4
    && (*(_WORD *)(v4 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::progressTag + 24))
  {
    return WebCore::HTMLProgressElement::max((WebCore::HTMLProgressElement *)v4);
  }
LABEL_11:
  if (!v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0)
  {
    v6 = *((_QWORD *)this + 30);
    if (v6)
      goto LABEL_17;
    return 0.0;
  }
LABEL_13:
  if (*(_BYTE *)(v2 + 46) == 49)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
    goto LABEL_17;
  }
  if ((*(_BYTE *)(v2 + 45) & 1) != 0)
    return 0.0;
  v6 = *(_QWORD *)(v2 + 24);
LABEL_17:
  v7 = *(_QWORD *)(v6 + 8);
  result = 0.0;
  if (v7
    && (*(_WORD *)(v7 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))
  {
    WebCore::HTMLMeterElement::max((WebCore::HTMLMeterElement *)v7);
    return v5;
  }
  return result;
}

float WebCore::AccessibilityProgressIndicator::minValueForRange(WebCore::AccessibilityProgressIndicator *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 31);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 46) == 49)
      {
        v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
      }
      else
      {
        if ((*(_BYTE *)(v2 + 45) & 1) != 0)
          goto LABEL_13;
        v3 = *(_QWORD *)(v2 + 24);
      }
      goto LABEL_7;
    }
  }
  v3 = *((_QWORD *)this + 30);
  if (v3)
  {
LABEL_7:
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if ((*(_WORD *)(v4 + 28) & 0x10) != 0)
      {
        result = 0.0;
        if (*(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::progressTag + 24))
          return result;
      }
    }
  }
  if (!v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0)
  {
    v6 = *((_QWORD *)this + 30);
    if (v6)
      goto LABEL_16;
    return 0.0;
  }
  if (*(_BYTE *)(v2 + 46) == 49)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
    goto LABEL_16;
  }
LABEL_13:
  if ((*(_BYTE *)(v2 + 45) & 1) != 0)
    return 0.0;
  v6 = *(_QWORD *)(v2 + 24);
LABEL_16:
  v7 = *(_QWORD *)(v6 + 8);
  result = 0.0;
  if (v7
    && (*(_WORD *)(v7 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))
  {
    return WebCore::HTMLMeterElement::min((WebCore::HTMLMeterElement *)v7);
  }
  return result;
}

uint64_t WebCore::AccessibilityProgressIndicator::determineAccessibilityRole(WebCore::AccessibilityProgressIndicator *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    if (*(_BYTE *)(v2 + 46) != 49)
    {
      if ((*(_BYTE *)(v2 + 45) & 1) == 0)
      {
        v3 = *(_QWORD *)(v2 + 24);
        goto LABEL_7;
      }
      return 87;
    }
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
  }
  else
  {
    v3 = *((_QWORD *)this + 30);
    if (!v3)
      return 87;
  }
LABEL_7:
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 87;
  result = 87;
  if ((*(_WORD *)(v4 + 28) & 0x10) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))
      return 81;
    else
      return 87;
  }
  return result;
}

uint64_t WebCore::AccessibilityRenderObject::node(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    if (*(_BYTE *)(v2 + 46) == 49)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
      return *(_QWORD *)(v3 + 8);
    }
    if ((*(_BYTE *)(v2 + 45) & 1) == 0)
    {
      v3 = *(_QWORD *)(v2 + 24);
      return *(_QWORD *)(v3 + 8);
    }
  }
  else
  {
    v3 = *((_QWORD *)this + 30);
    if (v3)
      return *(_QWORD *)(v3 + 8);
  }
  return 0;
}

void WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(WebCore::AccessibilityRenderObject *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E337F4E0;
  v3 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E337CD98;
  v4 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E337F4E0;
  v3 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E337CD98;
  v4 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
}

{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E337F4E0;
  v3 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E337CD98;
  v4 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v9 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v9)
      {
        v12 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v9));
        v4 = v12;
      }
      v10 = *(WTF **)(v4 + 16);
      if (v10)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v11 = v4;
        WTF::fastFree(v10, a2);
        v4 = v11;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::AccessibilityObject::~AccessibilityObject(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v7, v8);
}

uint64_t WebCore::AccessibilityRenderObject::create@<X0>(WebCore::AccessibilityRenderObject *this@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  void *v12;
  WTF *v13;

  v5 = (_OWORD *)WTF::fastMalloc((WTF *)0x100);
  v6 = v5;
  if ((*((_BYTE *)this + 45) & 1) != 0)
    v7 = 0;
  else
    v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  *(_OWORD *)((char *)v5 + 218) = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = v6;
  *(_OWORD *)((char *)v6 + 41) = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *(_WORD *)((char *)v6 + 57) = 134;
  *((_BYTE *)v6 + 59) = 2;
  *((_BYTE *)v6 + 64) = 0;
  *((_BYTE *)v6 + 96) = 0;
  *((_BYTE *)v6 + 104) = 0;
  *((_BYTE *)v6 + 176) = 0;
  *((_WORD *)v6 + 116) = 0;
  *(_OWORD *)((char *)v6 + 211) = 0u;
  *(_OWORD *)((char *)v6 + 200) = 0u;
  *(_OWORD *)((char *)v6 + 184) = 0u;
  *(_QWORD *)v6 = off_1E337CD98;
  *((_QWORD *)v6 + 1) = v8;
  *((_BYTE *)v6 + 234) = -122;
  if (v7)
  {
    v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  else
  {
    v9 = 0;
  }
  *((_QWORD *)v6 + 30) = v9;
  *(_QWORD *)v6 = off_1E337F4E0;
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = this;
    v13 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = result;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        WTF::fastFree(v13, v12);
        result = *((_QWORD *)this + 1);
        if (!result)
          goto LABEL_10;
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
  }
  ++*(_DWORD *)result;
LABEL_10:
  *((_QWORD *)v6 + 31) = result;
  *a2 = v6;
  return result;
}

WTF *WebCore::AccessibilityRenderObject::detachRemoteParts(_QWORD *a1, int a2, __n128 a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *result;

  WebCore::AccessibilityNodeObject::detachRemoteParts(a1, a2, a3);
  v4 = WebCore::AccessibilityRenderObject::remoteSVGRootElement(a1, 1);
  if (v4)
  {
    v6 = v4;
    v7 = *(unsigned int **)(v4 + 264);
    *(_QWORD *)(v6 + 264) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  result = (WTF *)a1[31];
  a1[31] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v5);
    else
      --*(_DWORD *)result;
  }
  return result;
}

WebCore::AXObjectCache *WebCore::AccessibilityRenderObject::firstChild(WebCore::AccessibilityRenderObject *this, WebCore::RenderObject *a2)
{
  uint64_t v3;
  WebCore *v4;
  uint64_t ChildConsideringContinuation;
  uint64_t v6;
  WebCore::RenderObject *v7;
  WebCore::AXObjectCache *result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)this + 31);
  if (v3)
  {
    v4 = *(WebCore **)(v3 + 8);
    if (v4)
    {
      ChildConsideringContinuation = WebCore::firstChildConsideringContinuation(v4, a2);
      v6 = *(_QWORD *)this;
      if (ChildConsideringContinuation)
      {
        v7 = (WebCore::RenderObject *)ChildConsideringContinuation;
        result = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(v6 + 1488))(this);
        if (result)
          return (WebCore::AXObjectCache *)WebCore::AXObjectCache::getOrCreate(result, v7);
        return result;
      }
      if (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(v6 + 3080))(this) & 1) == 0)
      {
        result = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
        if (!result)
          return result;
        v13 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
        if (v13 && (*(_WORD *)(v13 + 28) & 4) != 0)
        {
          v15 = *(_QWORD *)(v13 + 80);
          if (v15)
          {
            result = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
            if (result)
            {
              v16 = (uint64_t)result;
              while (1)
              {
                result = (WebCore::AXObjectCache *)WebCore::AXObjectCache::getOrCreate(v16, v15, 0);
                if (result)
                  break;
                v15 = *(_QWORD *)(v15 + 56);
                if (!v15)
                  return 0;
              }
            }
            return result;
          }
        }
      }
      return 0;
    }
  }
  result = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
  if (!result)
    return result;
  v9 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
  if (v9)
    v10 = (*(_WORD *)(v9 + 28) & 4) == 0;
  else
    v10 = 1;
  if (v10)
    return 0;
  v11 = *(_QWORD *)(v9 + 80);
  if (!v11)
    return 0;
  result = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
  if (result)
  {
    v12 = (uint64_t)result;
    while (1)
    {
      result = (WebCore::AXObjectCache *)WebCore::AXObjectCache::getOrCreate(v12, v11, 0);
      if (result)
        break;
      v11 = *(_QWORD *)(v11 + 56);
      if (!v11)
        return 0;
    }
  }
  return result;
}

uint64_t WebCore::firstChildConsideringContinuation(WebCore *this, WebCore::RenderObject *a2)
{
  uint64_t result;
  void *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  uint64_t v45;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;

  result = (*(uint64_t (**)(WebCore *, WebCore::RenderObject *))(*(_QWORD *)this + 112))(this, a2);
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    if (result && ((*(_BYTE *)(result + 45) & 0x20) == 0 || (*(_WORD *)(result + 69) & 0x20) == 0))
      return result;
  }
  else if (result)
  {
    return result;
  }
  if ((*((_BYTE *)this + 45) & 0x20) == 0 || (*(_WORD *)((_BYTE *)this + 69) & 0x10) == 0)
    return 0;
  v5 = dword_1ECE91378++;
  v6 = *((_QWORD *)this + 1);
  v7 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v8 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = (v10 >> 31) ^ v10;
  v12 = v7 & v11;
  v13 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v12);
  if (v13 == -1 || v13 != v6)
  {
    v15 = 1;
    do
    {
      v12 = ((_DWORD)v12 + v15) & v7;
      v16 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v12);
      ++v15;
    }
    while (v16 == -1 || v16 != v6);
  }
  v18 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v12 + 8) + 16);
  if (!v18)
    return 0;
  v19 = *v18;
  if (!v19 || !*(_QWORD *)(v19 + 8))
    return 0;
  dword_1ECE91378 = v5 + 2;
  v20 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v21 = v20 & v11;
  v22 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v21);
  if (v22 == -1 || v22 != v6)
  {
    v24 = 1;
    do
    {
      v21 = ((_DWORD)v21 + v24) & v20;
      v25 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v21);
      ++v24;
    }
    while (v25 == -1 || v25 != v6);
  }
  v27 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v21 + 8) + 16);
  if (!v27)
    return 0;
  v28 = *v27;
  if (!v28)
    return 0;
  v29 = *(_QWORD *)(v28 + 8);
  if (!v29)
    return 0;
  v30 = *(WTF **)(v29 + 8);
  if (v30)
    goto LABEL_39;
  v30 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v30 = 1;
  *((_QWORD *)v30 + 1) = v29;
  v51 = *(WTF **)(v29 + 8);
  *(_QWORD *)(v29 + 8) = v30;
  if (!v51)
    goto LABEL_39;
  if (*(_DWORD *)v51 == 1)
  {
    WTF::fastFree(v51, v4);
    v30 = *(WTF **)(v29 + 8);
    if (v30)
      goto LABEL_39;
    return 0;
  }
  --*(_DWORD *)v51;
LABEL_39:
  ++*(_DWORD *)v30;
  while (1)
  {
    v31 = *((_QWORD *)v30 + 1);
    v32 = v31;
    if (!v31 || (*(_BYTE *)(v31 + 45) & 0x40) != 0)
      break;
    v33 = *(unsigned __int8 *)(v31 + 68);
    if (*(unsigned int *)(v31 + 64) | (unint64_t)(v33 << 32))
    {
      v34 = *(_QWORD *)((*(unsigned int *)(v31 + 64) | (unint64_t)(v33 << 32)) + 8);
      if (v34)
      {
        v32 = v34;
        break;
      }
    }
    if ((*(_WORD *)(v32 + 69) & 0x10) == 0)
      goto LABEL_45;
    ++dword_1ECE91378;
    v36 = *(_QWORD *)(v32 + 8);
    v37 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v38 = (~(v36 << 32) + v36) ^ ((unint64_t)(~(v36 << 32) + v36) >> 22);
    v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
    v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
    v41 = v37 & ((v40 >> 31) ^ v40);
    v42 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v41);
    if (v42 == -1 || v42 != v36)
    {
      v44 = 1;
      do
      {
        v41 = ((_DWORD)v41 + v44) & v37;
        v45 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v41);
        ++v44;
      }
      while (v45 == -1 || v45 != v36);
    }
    v47 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v41 + 8) + 16);
    if (v47 && (v48 = *v47) != 0 && (v49 = *(_QWORD *)(v48 + 8)) != 0)
    {
      v35 = *(_QWORD *)(v49 + 8);
      if (!v35)
      {
        v35 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v35 = 1;
        *(_QWORD *)(v35 + 8) = v49;
        v50 = *(WTF **)(v49 + 8);
        *(_QWORD *)(v49 + 8) = v35;
        if (v50)
        {
          if (*(_DWORD *)v50 == 1)
          {
            WTF::fastFree(v50, v4);
            v35 = *(_QWORD *)(v49 + 8);
            if (!v35)
              goto LABEL_46;
          }
          else
          {
            --*(_DWORD *)v50;
          }
        }
      }
      ++*(_DWORD *)v35;
    }
    else
    {
LABEL_45:
      v35 = 0;
    }
LABEL_46:
    if (*(_DWORD *)v30 == 1)
      WTF::fastFree(v30, v4);
    else
      --*(_DWORD *)v30;
    result = 0;
    v30 = (WTF *)v35;
    if (!v35)
      return result;
  }
  if (*(_DWORD *)v30 == 1)
    WTF::fastFree(v30, v4);
  else
    --*(_DWORD *)v30;
  return v32;
}

uint64_t WebCore::AccessibilityRenderObject::lastChild(WebCore::AccessibilityRenderObject *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  uint64_t v19;
  uint64_t v20;
  WTF *v22;
  _QWORD *v23;
  WebCore::AXObjectCache *v24;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;

  v3 = *((_QWORD *)this + 31);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
LABEL_46:
    if ((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this))
    {
      v26 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
      if (v26 && (*(_WORD *)(v26 + 28) & 4) != 0)
      {
        v28 = *(_QWORD *)(v26 + 88);
        if (v28)
        {
          v29 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
          if (v29)
            return WebCore::AXObjectCache::getOrCreate(v29, v28, 0);
        }
      }
    }
    return 0;
  }
  if ((*(_BYTE *)(v4 + 45) & 0x60) == 0)
    goto LABEL_42;
  v5 = *(unsigned int *)(v4 + 71);
  if (v5 | ((unint64_t)*(unsigned __int8 *)(v4 + 75) << 32)
    && (v6 = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(v4 + 75) << 32)) + 8)) != 0)
  {
    v7 = *(_QWORD **)(v6 + 8);
    if (!v7)
    {
      v7 = (_QWORD *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v7 = 1;
      v7[1] = v6;
      v30 = *(WTF **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = v7;
      if (v30)
      {
        if (*(_DWORD *)v30 == 1)
        {
          WTF::fastFree(v30, a2);
          v7 = *(_QWORD **)(v6 + 8);
          if (!v7)
            goto LABEL_7;
        }
        else
        {
          --*(_DWORD *)v30;
        }
      }
    }
    ++*(_DWORD *)v7;
  }
  else
  {
    v7 = 0;
  }
LABEL_7:
  v8 = *(unsigned int *)(v4 + 71);
  if (!(v8 | ((unint64_t)*(unsigned __int8 *)(v4 + 75) << 32))
    || (v9 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(v4 + 75) << 32)) + 8)) == 0)
  {
    v10 = v7;
    goto LABEL_15;
  }
  v10 = *(_QWORD **)(v9 + 8);
  if (v10)
    goto LABEL_10;
  v10 = (_QWORD *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  v10[1] = v9;
  v22 = *(WTF **)(v9 + 8);
  *(_QWORD *)(v9 + 8) = v10;
  if (!v22)
    goto LABEL_10;
  if (*(_DWORD *)v22 != 1)
  {
    --*(_DWORD *)v22;
LABEL_10:
    ++*(_DWORD *)v10;
    goto LABEL_11;
  }
  WTF::fastFree(v22, a2);
  v10 = *(_QWORD **)(v9 + 8);
  if (v10)
    goto LABEL_10;
LABEL_11:
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree((WTF *)v7, a2);
    else
      --*(_DWORD *)v7;
  }
LABEL_15:
  if ((*(_WORD *)(v4 + 69) & 0x10) != 0)
  {
    {
      v11 = dword_1ECE91378 + 1;
    }
    else
    {
      WebCore::continuationChainNodeMap(void)::map = 0;
      *(_QWORD *)&dword_1ECE91378 = 0;
      v11 = 1;
    }
    dword_1ECE91378 = v11;
    v12 = *(_QWORD *)(v4 + 8);
    v13 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v14 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    for (i = 1; ; ++i)
    {
      v19 = v17;
      v20 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v17);
      if (v20 != -1 && v20 == v12)
        break;
      v17 = (v19 + i) & v13;
    }
    v23 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * v19 + 8);
    while (1)
    {
      v23 = (_QWORD *)v23[2];
      if (!v23)
        break;
      if (*v23)
        v4 = *(_QWORD *)(*v23 + 8);
      else
        v4 = 0;
      if (v4 && (*(_BYTE *)(v4 + 45) & 0x20) != 0)
      {
        v7 = v10;
        goto LABEL_7;
      }
    }
  }
  if (v10)
  {
    v4 = v10[1];
    if (*(_DWORD *)v10 == 1)
    {
      WTF::fastFree((WTF *)v10, a2);
      if (v4)
      {
LABEL_42:
        v24 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
        if (v24)
          return WebCore::AXObjectCache::getOrCreate(v24, (WebCore::RenderObject *)v4);
        return 0;
      }
    }
    else
    {
      --*(_DWORD *)v10;
      if (v4)
        goto LABEL_42;
    }
  }
  if (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 3080))(this) & 1) == 0)
    goto LABEL_46;
  return 0;
}

uint64_t WebCore::AccessibilityRenderObject::previousSibling(WebCore::AccessibilityRenderObject *this, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  WebCore::RenderObject *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int i;
  uint64_t v39;
  _QWORD *v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::AXObjectCache *v48;
  uint64_t v49;
  WebCore *v50;
  WTF *v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v66;
  uint64_t v67;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  int j;
  uint64_t v79;
  _QWORD *v81;
  WTF *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v90;

  v3 = *((_QWORD *)this + 31);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if ((*(_BYTE *)(v4 + 45) & 0x40) == 0)
      {
        v5 = 0;
LABEL_5:
        v6 = 1;
        goto LABEL_70;
      }
      v5 = *(WTF **)(v4 + 8);
      if (!v5)
      {
        v5 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v5 = 1;
        *((_QWORD *)v5 + 1) = v4;
        v45 = *(WTF **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = v5;
        if (v45)
        {
          if (*(_DWORD *)v45 == 1)
          {
            WTF::fastFree(v45, (void *)a2);
            v5 = *(WTF **)(v4 + 8);
            if (!v5)
              goto LABEL_5;
          }
          else
          {
            --*(_DWORD *)v45;
          }
        }
      }
      ++*(_DWORD *)v5;
      if (!*((_QWORD *)v5 + 1))
        goto LABEL_69;
      v11 = WebCore::startOfContinuations(*(WebCore **)(*((_QWORD *)this + 31) + 8), (WebCore::RenderObject *)a2);
      if (v11)
      {
        v12 = (WTF *)*((_QWORD *)this + 31);
        if (v12)
          v12 = (WTF *)*((_QWORD *)v12 + 1);
        v13 = 0;
        while (1)
        {
          if ((*((_BYTE *)v11 + 45) & 0x20) != 0)
          {
            v15 = *((unsigned int *)v11 + 16);
            if (v15 | ((unint64_t)*((unsigned __int8 *)v11 + 68) << 32))
            {
              v16 = *(_QWORD *)((v15 | ((unint64_t)*((unsigned __int8 *)v11 + 68) << 32)) + 8);
              if (v16)
              {
                if ((WTF *)v16 == v12)
                  goto LABEL_126;
                while (1)
                {
                  v13 = (WebCore::RenderObject *)v16;
                  v17 = *(unsigned int *)(v16 + 47) | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32);
                  if (!v17)
                    break;
                  v16 = *(_QWORD *)(v17 + 8);
                  if (!v16)
                    break;
                  if ((WTF *)v16 == v12)
                  {
                    v6 = 0;
                    goto LABEL_72;
                  }
                }
              }
            }
            if ((*(_WORD *)((_BYTE *)v11 + 69) & 0x10) == 0)
              goto LABEL_166;
            ++dword_1ECE91378;
            v18 = *((_QWORD *)v11 + 1);
            v19 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
            v20 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
            v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
            v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
            v23 = v19 & ((v22 >> 31) ^ v22);
            v24 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v23);
            if (v24 == -1 || v24 != v18)
            {
              v26 = 1;
              do
              {
                v23 = ((_DWORD)v23 + v26) & v19;
                v27 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v23);
                ++v26;
              }
              while (v27 == -1 || v27 != v18);
            }
            v29 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v23 + 8) + 16);
            if (!v29)
              goto LABEL_166;
            v30 = *v29;
            if (!v30)
              goto LABEL_166;
            v11 = *(WTF **)(v30 + 8);
            v14 = 1;
          }
          else if ((*((_BYTE *)v11 + 45) & 0x40) != 0)
          {
            if (v11 == v12)
            {
LABEL_126:
              v6 = 0;
              goto LABEL_127;
            }
            if ((*(_WORD *)((_BYTE *)v11 + 69) & 0x10) == 0)
              goto LABEL_166;
            if ((v14 & 1) != 0)
            {
              v31 = dword_1ECE91378 + 1;
            }
            else
            {
              WebCore::continuationChainNodeMap(void)::map = 0;
              *(_QWORD *)&dword_1ECE91378 = 0;
              v31 = 1;
            }
            dword_1ECE91378 = v31;
            v32 = *((_QWORD *)v11 + 1);
            v33 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
            v34 = (~(v32 << 32) + v32) ^ ((unint64_t)(~(v32 << 32) + v32) >> 22);
            v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
            v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
            v37 = v33 & ((v36 >> 31) ^ v36);
            for (i = 1; ; ++i)
            {
              a2 = v37;
              v39 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v37);
              if (v39 != -1 && v39 == v32)
                break;
              v37 = (a2 + i) & v33;
            }
            v41 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * a2 + 8);
            while (1)
            {
              v41 = (_QWORD *)v41[2];
              if (!v41)
                goto LABEL_166;
              if (*v41)
                v42 = *(WTF **)(*v41 + 8);
              else
                v42 = 0;
              if (v42)
              {
                v14 = 1;
                if ((*((_BYTE *)v42 + 45) & 0x20) != 0)
                  break;
              }
            }
            v13 = v11;
            v11 = v42;
          }
          if (!v11)
            goto LABEL_166;
        }
      }
      if (!*((_QWORD *)v5 + 1)
        || ((v43 = *((_QWORD *)this + 31)) == 0 ? (v44 = 0) : (v44 = *(_QWORD *)(v43 + 8)),
            (*(_BYTE *)(v44 + 45) & 1) == 0))
      {
LABEL_69:
        v6 = 0;
LABEL_70:
        v46 = *(_QWORD *)(*((_QWORD *)this + 31) + 8);
        v47 = *(unsigned int *)(v46 + 40);
        if (v47 | ((unint64_t)*(unsigned __int8 *)(v46 + 44) << 32))
        {
          v13 = *(WebCore::RenderObject **)((v47 | ((unint64_t)*(unsigned __int8 *)(v46 + 44) << 32)) + 8);
          if (v13)
            goto LABEL_72;
        }
        v49 = *(_QWORD *)(v46 + 32);
        if (!v49)
          goto LABEL_128;
        v50 = *(WebCore **)(v49 + 8);
        if (!v50)
          goto LABEL_128;
        if ((*((_BYTE *)v50 + 45) & 0x20) == 0)
          goto LABEL_128;
        v51 = WebCore::startOfContinuations(v50, (WebCore::RenderObject *)a2);
        if (!v51)
          goto LABEL_128;
        v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 32) + 8);
        v53 = *(unsigned int *)(v52 + 64) | ((unint64_t)*(unsigned __int8 *)(v52 + 68) << 32);
        if (v53)
          v53 = *(_QWORD *)(v53 + 8);
        v13 = 0;
        while (1)
        {
          if ((*((_BYTE *)v51 + 45) & 0x20) != 0)
          {
            v55 = *((unsigned int *)v51 + 16);
            if (v55 | ((unint64_t)*((unsigned __int8 *)v51 + 68) << 32))
            {
              v56 = *(_QWORD *)((v55 | ((unint64_t)*((unsigned __int8 *)v51 + 68) << 32)) + 8);
              if (v56)
              {
                if (v56 == v53)
                  goto LABEL_127;
                while (1)
                {
                  v13 = (WebCore::RenderObject *)v56;
                  v57 = *(unsigned int *)(v56 + 47) | ((unint64_t)*(unsigned __int8 *)(v56 + 51) << 32);
                  if (!v57)
                    break;
                  v56 = *(_QWORD *)(v57 + 8);
                  if (!v56)
                    break;
                  if (v56 == v53)
                    goto LABEL_72;
                }
              }
            }
            if ((*(_WORD *)((_BYTE *)v51 + 69) & 0x10) == 0)
              goto LABEL_128;
            ++dword_1ECE91378;
            v58 = *((_QWORD *)v51 + 1);
            v59 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
            v60 = (~(v58 << 32) + v58) ^ ((unint64_t)(~(v58 << 32) + v58) >> 22);
            v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
            v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
            v63 = v59 & ((v62 >> 31) ^ v62);
            v64 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v63);
            if (v64 == -1 || v64 != v58)
            {
              v66 = 1;
              do
              {
                v63 = ((_DWORD)v63 + v66) & v59;
                v67 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v63);
                ++v66;
              }
              while (v67 == -1 || v67 != v58);
            }
            v69 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v63 + 8) + 16);
            if (!v69)
              goto LABEL_128;
            v70 = *v69;
            if (!v70)
              goto LABEL_128;
            v51 = *(WTF **)(v70 + 8);
            v54 = 1;
          }
          else if ((*((_BYTE *)v51 + 45) & 0x40) != 0)
          {
            if (v51 != (WTF *)v53)
            {
              if ((*(_WORD *)((_BYTE *)v51 + 69) & 0x10) != 0)
              {
                if ((v54 & 1) != 0)
                {
                  v71 = dword_1ECE91378 + 1;
                }
                else
                {
                  WebCore::continuationChainNodeMap(void)::map = 0;
                  *(_QWORD *)&dword_1ECE91378 = 0;
                  v71 = 1;
                }
                dword_1ECE91378 = v71;
                v72 = *((_QWORD *)v51 + 1);
                v73 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
                v74 = (~(v72 << 32) + v72) ^ ((unint64_t)(~(v72 << 32) + v72) >> 22);
                v75 = 9 * ((v74 + ~(v74 << 13)) ^ ((v74 + ~(v74 << 13)) >> 8));
                v76 = (v75 ^ (v75 >> 15)) + ~((v75 ^ (v75 >> 15)) << 27);
                v77 = v73 & ((v76 >> 31) ^ v76);
                for (j = 1; ; ++j)
                {
                  a2 = v77;
                  v79 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v77);
                  if (v79 != -1 && v79 == v72)
                    break;
                  v77 = (a2 + j) & v73;
                }
                v81 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * a2 + 8);
                while (1)
                {
                  v81 = (_QWORD *)v81[2];
                  if (!v81)
                    break;
                  if (*v81)
                    v82 = *(WTF **)(*v81 + 8);
                  else
                    v82 = 0;
                  if (v82)
                  {
                    v54 = 1;
                    if ((*((_BYTE *)v82 + 45) & 0x20) != 0)
                    {
                      v13 = v51;
                      v51 = v82;
                      goto LABEL_84;
                    }
                  }
                }
              }
LABEL_128:
              v10 = 0;
              if ((v6 & 1) != 0)
                return v10;
LABEL_167:
              if (*(_DWORD *)v5 == 1)
                WTF::fastFree(v5, (void *)a2);
              else
                --*(_DWORD *)v5;
              return v10;
            }
LABEL_127:
            if (!v13)
              goto LABEL_128;
LABEL_72:
            v48 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
            if (!v48)
              goto LABEL_128;
            v10 = WebCore::AXObjectCache::getOrCreate(v48, v13);
            if ((v6 & 1) != 0)
              return v10;
            goto LABEL_167;
          }
LABEL_84:
          if (!v51)
            goto LABEL_128;
        }
      }
      if ((*(_BYTE *)(v44 + 45) & 2) != 0)
      {
        v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 32) + 8) + 96);
        if ((v83 & 0x1F) != 1 && (v83 & 0x1F) != 14)
          goto LABEL_69;
      }
      else
      {
        v83 = *(_QWORD *)(v44 + 96);
        if ((v83 & 0x1F) != 1 && (v83 & 0x1F) != 0xE)
          goto LABEL_69;
      }
      v6 = 0;
      if ((*(_BYTE *)(v44 + 45) & 0x40) == 0 || (v83 & 0xF80000000000) != 0)
        goto LABEL_70;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 176))(v44) & 1) != 0)
        goto LABEL_69;
      v84 = *(unsigned __int8 *)(v44 + 46);
      if (v84 == 20)
        goto LABEL_69;
      if ((*(_BYTE *)(v44 + 52) & 7) == 1)
      {
        if ((*(_BYTE *)(v44 + 53) & 2) != 0)
          goto LABEL_69;
        v6 = 0;
        if (v84 == 26 || v84 == 49)
          goto LABEL_70;
      }
      else
      {
        v6 = 0;
        if (v84 == 49 || v84 == 26)
          goto LABEL_70;
      }
      if (*(unsigned int *)(*((_QWORD *)v5 + 1) + 64) | ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v5 + 1)
                                                                                                 + 68) << 32))
      {
        v85 = *(_QWORD *)((*(unsigned int *)(*((_QWORD *)v5 + 1) + 64) | ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v5 + 1) + 68) << 32))
                        + 8);
        if (v85)
        {
          if ((*(_BYTE *)(v85 + 45) & 0x20) != 0 && (*(_WORD *)(v85 + 69) & 0x20) != 0)
          {
            while (1)
            {
              v86 = *((_QWORD *)WebCore::startOfContinuations((WebCore *)v85, (WebCore::RenderObject *)a2) + 4);
              if (v86)
                v86 = *(_QWORD *)(v86 + 8);
              v87 = *(unsigned int *)(v86 + 64);
              if (!(v87 | ((unint64_t)*(unsigned __int8 *)(v86 + 68) << 32)))
                break;
              v88 = *(_QWORD *)((v87 | ((unint64_t)*(unsigned __int8 *)(v86 + 68) << 32)) + 8);
              if (!v88 || (*(_BYTE *)(v88 + 45) & 0x20) == 0 || (*(_WORD *)(v88 + 69) & 0x20) == 0)
                break;
              v85 = *(_QWORD *)((*(unsigned int *)(v86 + 64) | ((unint64_t)*(unsigned __int8 *)(v86 + 68) << 32))
                              + 8);
            }
            v90 = *(unsigned int *)(v86 + 40) | ((unint64_t)*(unsigned __int8 *)(v86 + 44) << 32);
            if (v90)
            {
              v6 = 0;
              v13 = *(WebCore::RenderObject **)(v90 + 8);
              if (!v13)
                goto LABEL_128;
              goto LABEL_72;
            }
LABEL_166:
            v10 = 0;
            goto LABEL_167;
          }
        }
      }
      goto LABEL_69;
    }
  }
  if (!(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this))
    return 0;
  v7 = *(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this) + 48) & 0xFFFFFFFFFFFFLL;
  if (!v7)
    return 0;
  v8 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
  if (!v8)
    return 0;
  return WebCore::AXObjectCache::getOrCreate(v8, v7, 0);
}

WTF *WebCore::startOfContinuations(WebCore *this, WebCore::RenderObject *a2)
{
  WTF *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  WTF *v7;
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int j;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  if ((*((_BYTE *)this + 45) & 2) != 0)
    return 0;
  result = (WTF *)*((_QWORD *)this + 1);
  if (!result)
  {
    result = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *((_QWORD *)result + 1) = this;
    v7 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = result;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WTF::fastFree(v7, a2);
        result = (WTF *)*((_QWORD *)this + 1);
        if (!result)
          return result;
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  ++*(_DWORD *)result;
  v3 = *((_QWORD *)result + 1);
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 45) & 0x20) != 0 && (*(_WORD *)(v3 + 69) & 0x20) != 0)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
      if ((*(_WORD *)(v4 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195622818);
      }
      v5 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
      if (v5)
      {
        v6 = *(_BYTE *)(v5 + 45);
        if ((v6 & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195622838);
        }
        if ((v6 & 0x20) != 0)
        {
          v34 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL;
          goto LABEL_14;
        }
      }
    }
    if ((*(_BYTE *)(v3 + 45) & 0x40) != 0 && (*(_WORD *)(v3 + 69) & 0x10) != 0)
    {
      {
        v8 = dword_1ECE91378 + 1;
      }
      else
      {
        WebCore::continuationChainNodeMap(void)::map = 0;
        *(_QWORD *)&dword_1ECE91378 = 0;
        v8 = 1;
      }
      dword_1ECE91378 = v8;
      v9 = *(_QWORD *)(v3 + 8);
      v10 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
      v11 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      for (i = 1; ; ++i)
      {
        v16 = v14;
        v17 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v14);
        if (v17 != -1 && v17 == v9)
          break;
        v14 = (v16 + i) & v10;
      }
      v19 = *(uint64_t **)(WebCore::continuationChainNodeMap(void)::map + 16 * v16 + 8);
      while (1)
      {
        v19 = (uint64_t *)v19[2];
        if (!v19)
          break;
        v20 = *v19;
        if (*v19)
          v20 = *(_QWORD *)(v20 + 8);
        if (v20 && (*(_BYTE *)(v20 + 45) & 0x20) != 0)
        {
          dword_1ECE91378 = v8 + 1;
          v21 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
          v22 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          for (j = 1; ; ++j)
          {
            v27 = v25;
            v28 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v25);
            if (v28 != -1 && v28 == v9)
              break;
            v25 = (v27 + j) & v21;
          }
          v30 = *(uint64_t **)(WebCore::continuationChainNodeMap(void)::map + 16 * v27 + 8);
          do
          {
            v30 = (uint64_t *)v30[2];
            v31 = *v30;
            if (*v30)
              v31 = *(_QWORD *)(v31 + 8);
          }
          while (!v31 || (*(_BYTE *)(v31 + 45) & 0x20) == 0);
          v32 = *(_QWORD *)(*(_QWORD *)(v31 + 24) + 8);
          if ((*(_WORD *)(v32 + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195622858);
          }
          v34 = *(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL;
          if (v34 && (*(_BYTE *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1956227F8);
          }
          goto LABEL_14;
        }
      }
    }
  }
  v34 = 0;
LABEL_14:
  if (*(_DWORD *)result == 1)
    WTF::fastFree(result, a2);
  else
    --*(_DWORD *)result;
  return (WTF *)v34;
}

uint64_t WebCore::AccessibilityRenderObject::nextSibling(WebCore::AccessibilityRenderObject *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ChildConsideringContinuation;
  WebCore::AXObjectCache *v17;
  WebCore::AXObjectCache *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::RenderObject *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::RenderObject *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int i;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  WebCore *v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v56;
  uint64_t v57;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  int m;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v83;
  uint64_t v84;
  uint64_t *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  int v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v107;
  uint64_t v108;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v127;
  uint64_t v128;
  uint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t *v134;
  BOOL v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned int v140;
  int k;
  uint64_t v142;
  unint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v148;
  int v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unsigned int v153;
  int j;
  uint64_t v155;
  uint64_t v156;
  unint64_t *v158;

  v3 = *((_QWORD *)this + 31);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    if ((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this))
    {
      v7 = *(_QWORD *)((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this)
                     + 56);
      if (v7)
      {
        v8 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
        if (v8)
          return WebCore::AXObjectCache::getOrCreate(v8, v7, 0);
      }
    }
    return 0;
  }
  if (*(_BYTE *)(v4 + 46) == 49)
    return 0;
  if ((*(_BYTE *)(v4 + 45) & 0x40) == 0)
  {
    v5 = 0;
LABEL_6:
    v6 = 1;
    goto LABEL_20;
  }
  v5 = *(WTF **)(v4 + 8);
  if (!v5)
  {
    v5 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *((_QWORD *)v5 + 1) = v4;
    v31 = *(WTF **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v5;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
      {
        WTF::fastFree(v31, a2);
        v5 = *(WTF **)(v4 + 8);
        if (!v5)
          goto LABEL_6;
      }
      else
      {
        --*(_DWORD *)v31;
      }
    }
  }
  ++*(_DWORD *)v5;
  v11 = *((_QWORD *)v5 + 1);
  if (v11)
  {
    if ((*(_WORD *)(v11 + 69) & 0x10) == 0)
      goto LABEL_15;
    {
      v34 = dword_1ECE91378 + 1;
    }
    else
    {
      WebCore::continuationChainNodeMap(void)::map = 0;
      *(_QWORD *)&dword_1ECE91378 = 0;
      v34 = 1;
    }
    dword_1ECE91378 = v34;
    v35 = *(_QWORD *)(v11 + 8);
    v36 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v37 = (~(v35 << 32) + v35) ^ ((unint64_t)(~(v35 << 32) + v35) >> 22);
    v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
    v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
    v40 = v36 & ((v39 >> 31) ^ v39);
    for (i = 1; ; v40 = (v42 + i++) & v36)
    {
      v42 = v40;
      v43 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v40);
      if (v43 != -1 && v43 == v35)
        break;
    }
    v45 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * v42 + 8);
    while (1)
    {
      v45 = (_QWORD *)v45[2];
      if (!v45)
        break;
      if (*v45)
        v46 = *(WebCore **)(*v45 + 8);
      else
        v46 = 0;
      if (v46 && (*((_BYTE *)v46 + 45) & 0x20) != 0)
      {
        ChildConsideringContinuation = WebCore::firstChildConsideringContinuation(v46, (WebCore::RenderObject *)a2);
        v6 = 0;
        goto LABEL_218;
      }
    }
    if (*((_QWORD *)v5 + 1))
    {
LABEL_15:
      v12 = *((_QWORD *)this + 31);
      v13 = v12 ? *(_QWORD *)(v12 + 8) : 0;
      if ((*(_BYTE *)(v13 + 45) & 1) != 0)
      {
        if ((*(_BYTE *)(v13 + 45) & 2) != 0)
        {
          v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 8) + 96);
          if ((v32 & 0x1F) != 1 && (v32 & 0x1F) != 14)
            goto LABEL_19;
        }
        else
        {
          v32 = *(_QWORD *)(v13 + 96);
          if ((v32 & 0x1F) != 1 && (v32 & 0x1F) != 0xE)
            goto LABEL_19;
        }
        v6 = 0;
        if ((*(_BYTE *)(v13 + 45) & 0x40) == 0 || (v32 & 0xF80000000000) != 0)
          goto LABEL_20;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 176))(v13) & 1) != 0)
          goto LABEL_19;
        v33 = *(unsigned __int8 *)(v13 + 46);
        if (v33 == 20)
          goto LABEL_19;
        if ((*(_BYTE *)(v13 + 52) & 7) == 1)
        {
          if ((*(_BYTE *)(v13 + 53) & 2) != 0)
            goto LABEL_19;
          v6 = 0;
          if (v33 == 26 || v33 == 49)
            goto LABEL_20;
        }
        else
        {
          v6 = 0;
          if (v33 == 49 || v33 == 26)
            goto LABEL_20;
        }
        v95 = *((_QWORD *)v5 + 1);
        v96 = *(unsigned int *)(v95 + 71);
        if (v96 | ((unint64_t)*(unsigned __int8 *)(v95 + 75) << 32))
        {
          v97 = *(_QWORD *)((v96 | ((unint64_t)*(unsigned __int8 *)(v95 + 75) << 32)) + 8);
          if (v97)
          {
            if ((*(_BYTE *)(v97 + 45) & 0x20) != 0 && (*(_WORD *)(v97 + 69) & 0x10) != 0)
            {
              v98 = ++dword_1ECE91378;
              v99 = *(_QWORD *)(v97 + 8);
              v100 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
              v101 = (~(v99 << 32) + v99) ^ ((unint64_t)(~(v99 << 32) + v99) >> 22);
              v102 = 9 * ((v101 + ~(v101 << 13)) ^ ((v101 + ~(v101 << 13)) >> 8));
              v103 = (v102 ^ (v102 >> 15)) + ~((v102 ^ (v102 >> 15)) << 27);
              v104 = v100 & ((v103 >> 31) ^ v103);
              v105 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v104);
              if (v105 == -1 || v105 != v99)
              {
                v107 = 1;
                do
                {
                  v104 = ((_DWORD)v104 + v107) & v100;
                  v108 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v104);
                  ++v107;
                }
                while (v108 == -1 || v108 != v99);
              }
              v110 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v104 + 8) + 16);
              if (v110)
              {
                v111 = *v110;
                if (v111)
                {
                  if (*(_QWORD *)(v111 + 8))
                  {
                    v112 = *(unsigned int *)(v95 + 71) | ((unint64_t)*(unsigned __int8 *)(v95 + 75) << 32);
                    if (v112)
                      v112 = *(_QWORD *)(v112 + 8);
                    if ((*(_BYTE *)(v112 + 45) & 0x60) != 0 && (*(_WORD *)(v112 + 69) & 0x10) != 0)
                    {
LABEL_231:
                      ++v98;
                      v148 = *(_QWORD *)(v112 + 8);
                      dword_1ECE91378 = v98;
                      v149 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
                      v150 = (~(v148 << 32) + v148) ^ ((unint64_t)(~(v148 << 32) + v148) >> 22);
                      v151 = 9 * ((v150 + ~(v150 << 13)) ^ ((v150 + ~(v150 << 13)) >> 8));
                      v152 = (v151 ^ (v151 >> 15)) + ~((v151 ^ (v151 >> 15)) << 27);
                      v153 = v149 & ((v152 >> 31) ^ v152);
                      for (j = 1; ; ++j)
                      {
                        v155 = v153;
                        v156 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v153);
                        if (v156 != -1 && v156 == v148)
                          break;
                        v153 = (v155 + j) & v149;
                      }
                      v158 = *(unint64_t **)(WebCore::continuationChainNodeMap(void)::map + 16 * v155 + 8);
                      while (1)
                      {
                        v158 = (unint64_t *)v158[2];
                        if (!v158)
                          break;
                        v113 = *v158;
                        if (*v158)
                          v113 = *(_QWORD *)(v113 + 8);
                        if (v113 && (*(_BYTE *)(v113 + 45) & 0x20) != 0)
                        {
                          v112 = v113;
                          if ((*(_WORD *)(v113 + 69) & 0x10) == 0)
                            goto LABEL_164;
                          goto LABEL_231;
                        }
                      }
                    }
                    v113 = v112;
LABEL_164:
                    v114 = *(_QWORD *)(v113 + 32);
                    if (v114)
                      v115 = *(_QWORD *)(v114 + 8);
                    else
                      v115 = 0;
                    v116 = *(unsigned int *)(v115 + 71) | ((unint64_t)*(unsigned __int8 *)(v115 + 75) << 32);
                    if (v116)
                    {
                      v117 = WebCore::continuationChainNodeMap(void)::map;
                      do
                      {
                        v118 = *(_QWORD *)(v116 + 8);
                        if (!v118 || (*(_BYTE *)(v118 + 45) & 0x20) == 0 || (*(_WORD *)(v118 + 69) & 0x10) == 0)
                          break;
                        dword_1ECE91378 = ++v98;
                        v119 = *(_QWORD *)(v118 + 8);
                        v120 = *(_DWORD *)(v117 - 8);
                        v121 = (~(v119 << 32) + v119) ^ ((unint64_t)(~(v119 << 32) + v119) >> 22);
                        v122 = 9 * ((v121 + ~(v121 << 13)) ^ ((v121 + ~(v121 << 13)) >> 8));
                        v123 = (v122 ^ (v122 >> 15)) + ~((v122 ^ (v122 >> 15)) << 27);
                        v124 = v120 & ((v123 >> 31) ^ v123);
                        v125 = *(_QWORD *)(v117 + 16 * v124);
                        if (v125 == -1 || v125 != v119)
                        {
                          v127 = 1;
                          do
                          {
                            v124 = ((_DWORD)v124 + v127) & v120;
                            v128 = *(_QWORD *)(v117 + 16 * v124);
                            ++v127;
                          }
                          while (v128 == -1 || v128 != v119);
                        }
                        v130 = *(uint64_t **)(*(_QWORD *)(v117 + 16 * v124 + 8) + 16);
                        if (!v130)
                          break;
                        v131 = *v130;
                        if (!v131 || !*(_QWORD *)(v131 + 8))
                          break;
                        v132 = *(unsigned int *)(v115 + 71) | ((unint64_t)*(unsigned __int8 *)(v115 + 75) << 32);
                        if (v132)
                          v132 = *(_QWORD *)(v132 + 8);
                        if ((*(_BYTE *)(v132 + 45) & 0x60) != 0 && (*(_WORD *)(v132 + 69) & 0x10) != 0)
                        {
LABEL_195:
                          ++v98;
                          v134 = *(unint64_t **)(v132 + 8);
                          dword_1ECE91378 = v98;
                          if (!v134)
                            goto LABEL_207;
                          if (v134[1])
                          {
                            v117 = 0;
                            v135 = WebCore::continuationChainNodeMap(void)::map == 0;
                          }
                          else
                          {
                            v135 = 1;
                          }
                          if (v135)
                          {
                            v134 = 0;
                            goto LABEL_207;
                          }
                          v136 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
                          v137 = ((unint64_t)v134 + ~((_QWORD)v134 << 32)) ^ (((unint64_t)v134
                                                                                    + ~((_QWORD)v134 << 32)) >> 22);
                          v138 = 9 * ((v137 + ~(v137 << 13)) ^ ((v137 + ~(v137 << 13)) >> 8));
                          v139 = (v138 ^ (v138 >> 15)) + ~((v138 ^ (v138 >> 15)) << 27);
                          v140 = v136 & ((v139 >> 31) ^ v139);
                          for (k = 1; ; ++k)
                          {
                            v142 = v140;
                            v143 = *(unint64_t **)(WebCore::continuationChainNodeMap(void)::map + 16 * v140);
                            if (v143 != (unint64_t *)-1)
                            {
                              if (!v143)
                              {
                                v134 = 0;
                                goto LABEL_206;
                              }
                              if (v143 == v134)
                                break;
                            }
                            v140 = (v142 + k) & v136;
                          }
                          v134 = *(unint64_t **)(WebCore::continuationChainNodeMap(void)::map + 16 * v142 + 8);
LABEL_206:
                          v117 = WebCore::continuationChainNodeMap(void)::map;
LABEL_207:
                          while (1)
                          {
                            v134 = (unint64_t *)v134[2];
                            if (!v134)
                              break;
                            v133 = *v134;
                            if (*v134)
                              v133 = *(_QWORD *)(v133 + 8);
                            if (v133 && (*(_BYTE *)(v133 + 45) & 0x20) != 0)
                            {
                              v132 = v133;
                              if ((*(_WORD *)(v133 + 69) & 0x10) == 0)
                                goto LABEL_189;
                              goto LABEL_195;
                            }
                          }
                        }
                        v133 = v132;
LABEL_189:
                        v115 = *(_QWORD *)(v133 + 32);
                        if (v115)
                          v115 = *(_QWORD *)(v115 + 8);
                        v116 = *(unsigned int *)(v115 + 71) | ((unint64_t)*(unsigned __int8 *)(v115 + 75) << 32);
                      }
                      while (v116);
                    }
                    v144 = *(unsigned __int8 *)(v115 + 51);
                    v145 = *(unsigned int *)(v115 + 47);
                    v6 = 0;
                    goto LABEL_216;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_19:
  v6 = 0;
LABEL_20:
  v14 = *(_QWORD *)(*((_QWORD *)this + 31) + 8);
  v15 = *(unsigned int *)(v14 + 47);
  if (v15 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32))
  {
    ChildConsideringContinuation = *(_QWORD *)((v15 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32)) + 8);
    if (ChildConsideringContinuation)
      goto LABEL_22;
  }
  v26 = *(_BYTE *)(v14 + 45);
  if ((v26 & 0x20) == 0 || (*(_WORD *)(v14 + 69) & 0x10) == 0)
    goto LABEL_38;
  v47 = ++dword_1ECE91378;
  v48 = *(_QWORD *)(v14 + 8);
  v49 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v50 = (~(v48 << 32) + v48) ^ ((unint64_t)(~(v48 << 32) + v48) >> 22);
  v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
  v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
  v53 = v49 & ((v52 >> 31) ^ v52);
  v54 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v53);
  if (v54 == -1 || v54 != v48)
  {
    v56 = 1;
    do
    {
      v53 = ((_DWORD)v53 + v56) & v49;
      v57 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v53);
      ++v56;
    }
    while (v57 == -1 || v57 != v48);
  }
  v59 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v53 + 8) + 16);
  if (!v59)
    goto LABEL_38;
  v60 = *v59;
  if (!v60 || !*(_QWORD *)(v60 + 8))
    goto LABEL_38;
  if ((v26 & 0x60) != 0)
  {
LABEL_98:
    ++v47;
    v61 = *(_QWORD *)(v14 + 8);
    dword_1ECE91378 = v47;
    v62 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v63 = (~(v61 << 32) + v61) ^ ((unint64_t)(~(v61 << 32) + v61) >> 22);
    v64 = 9 * ((v63 + ~(v63 << 13)) ^ ((v63 + ~(v63 << 13)) >> 8));
    v65 = (v64 ^ (v64 >> 15)) + ~((v64 ^ (v64 >> 15)) << 27);
    v66 = v62 & ((v65 >> 31) ^ v65);
    for (m = 1; ; ++m)
    {
      v68 = v66;
      v69 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v66);
      if (v69 != -1 && v69 == v61)
        break;
      v66 = (v68 + m) & v62;
    }
    v71 = *(uint64_t **)(WebCore::continuationChainNodeMap(void)::map + 16 * v68 + 8);
    while (1)
    {
      v71 = (uint64_t *)v71[2];
      if (!v71)
        break;
      v72 = *v71;
      if (*v71)
        v72 = *(_QWORD *)(v72 + 8);
      if (v72 && (*(_BYTE *)(v72 + 45) & 0x20) != 0)
      {
        v14 = v72;
        if ((*(_WORD *)(v72 + 69) & 0x10) == 0)
          goto LABEL_215;
        goto LABEL_98;
      }
    }
  }
  v72 = v14;
LABEL_215:
  v144 = *(unsigned __int8 *)(v72 + 51);
  v145 = *(unsigned int *)(v72 + 47);
LABEL_216:
  v146 = v145 | (v144 << 32);
  if (v146)
  {
    ChildConsideringContinuation = *(_QWORD *)(v146 + 8);
LABEL_218:
    if (ChildConsideringContinuation)
    {
LABEL_22:
      v17 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
      if (v17)
      {
        v18 = v17;
        ++*((_DWORD *)v17 + 2);
        if ((*(_BYTE *)(ChildConsideringContinuation + 45) & 1) != 0)
          goto LABEL_29;
        v19 = *(_QWORD *)(*(_QWORD *)(ChildConsideringContinuation + 24) + 8);
        if (!v19)
          goto LABEL_29;
        v20 = *((_QWORD *)this + 31);
        if (v20)
          v20 = *(_QWORD *)(v20 + 8);
        if ((*(_BYTE *)(v20 + 45) & 1) == 0
          && v19 == *(_QWORD *)(*(_QWORD *)(v20 + 24) + 8)
          && (v29 = WebCore::AXObjectCache::getOrCreate(v17, (WebCore::RenderObject *)ChildConsideringContinuation)) != 0)
        {
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 2936))(v29);
        }
        else
        {
LABEL_29:
          v21 = WebCore::AXObjectCache::getOrCreate(v18, (WebCore::RenderObject *)ChildConsideringContinuation);
          v10 = v21;
          if (v21)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 56))(v21))
            {
              v22 = WebCore::AccessibilityRenderObject::renderParentObject(*(WTF **)(v10 + 248), (WebCore::RenderObject *)a2);
              if (v22)
              {
                v23 = WebCore::AXObjectCache::getOrCreate(v18, v22);
                if (v23)
                {
                  v24 = v23;
                  v25 = WebCore::AccessibilityRenderObject::renderParentObject(*((WTF **)this + 31), (WebCore::RenderObject *)a2);
                  if (!v25 || v24 != WebCore::AXObjectCache::getOrCreate(v18, v25))
                    v10 = 0;
                }
              }
            }
          }
        }
        v30 = *((_DWORD *)v18 + 2);
        if (!v30)
        {
          __break(0xC471u);
          JUMPOUT(0x195623284);
        }
        *((_DWORD *)v18 + 2) = v30 - 1;
        if ((v6 & 1) != 0)
          return v10;
        goto LABEL_48;
      }
      goto LABEL_42;
    }
  }
LABEL_38:
  v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 32);
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
    {
      if ((*(_BYTE *)(v28 + 45) & 0x20) != 0 && (*(_WORD *)(v28 + 69) & 0x10) != 0)
      {
        v73 = dword_1ECE91378++;
        v74 = *(_QWORD *)(v28 + 8);
        v75 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
        v76 = (~(v74 << 32) + v74) ^ ((unint64_t)(~(v74 << 32) + v74) >> 22);
        v77 = 9 * ((v76 + ~(v76 << 13)) ^ ((v76 + ~(v76 << 13)) >> 8));
        v78 = (v77 ^ (v77 >> 15)) + ~((v77 ^ (v77 >> 15)) << 27);
        v79 = (v78 >> 31) ^ v78;
        v80 = v75 & v79;
        v81 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v80);
        if (v81 == -1 || v81 != v74)
        {
          v83 = 1;
          do
          {
            v80 = ((_DWORD)v80 + v83) & v75;
            v84 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v80);
            ++v83;
          }
          while (v84 == -1 || v84 != v74);
        }
        v86 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v80 + 8) + 16);
        if (v86)
        {
          v87 = *v86;
          if (v87)
          {
            if (*(_QWORD *)(v87 + 8))
            {
              dword_1ECE91378 = v73 + 2;
              v88 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
              v89 = v88 & v79;
              v90 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v89);
              if (v90 == -1 || v90 != v74)
              {
                v92 = 1;
                do
                {
                  v89 = ((_DWORD)v89 + v92) & v88;
                  v93 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v89);
                  ++v92;
                }
                while (v93 == -1 || v93 != v74);
              }
              ChildConsideringContinuation = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map
                                                                                 + 16 * v89
                                                                                 + 8)
                                                                     + 16)
                                                       + 8);
              if ((*(_BYTE *)(ChildConsideringContinuation + 45) & 0x40) != 0)
                goto LABEL_22;
              ChildConsideringContinuation = WebCore::firstChildConsideringContinuation(*(WebCore **)(**(_QWORD **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map+ 16 * v89+ 8)+ 16)+ 8), (WebCore::RenderObject *)a2);
              if (ChildConsideringContinuation)
                goto LABEL_22;
            }
          }
        }
      }
    }
  }
LABEL_42:
  v10 = 0;
  if ((v6 & 1) == 0)
  {
LABEL_48:
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  return v10;
}

WTF *WebCore::AccessibilityRenderObject::renderParentObject(WTF *this, WebCore::RenderObject *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int i;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (this)
  {
    this = (WTF *)*((_QWORD *)this + 1);
    if (this)
    {
      v2 = *((_QWORD *)this + 4);
      v3 = v2 ? *(WTF **)(v2 + 8) : 0;
      if ((*((_BYTE *)this + 45) & 0x40) == 0 || (this = WebCore::startOfContinuations(this, a2)) == 0)
      {
        if (v3)
        {
          if ((*((_BYTE *)v3 + 45) & 0x20) == 0 || (this = WebCore::startOfContinuations(v3, a2)) == 0)
          {
            v4 = *((unsigned int *)v3 + 16);
            if (v4 | ((unint64_t)*((unsigned __int8 *)v3 + 68) << 32)
              && (v5 = *(_QWORD *)((v4 | ((unint64_t)*((unsigned __int8 *)v3 + 68) << 32)) + 8)) != 0
              && (*(_BYTE *)(v5 + 45) & 1) == 0
              && (v6 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8)) != 0)
            {
              this = v3;
              do
              {
                v8 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
                if (v5 == v8)
                  break;
                if (v8)
                {
                  v9 = v7;
                  v10 = v8;
                  while (1)
                  {
                    if (v10 == v5)
                    {
                      v36 = *(_QWORD *)(v8 + 32);
                      if (v36)
                        this = *(WTF **)(v36 + 8);
                      else
                        this = 0;
                      goto LABEL_56;
                    }
                    if ((*(_BYTE *)(v10 + 20) & 2) != 0 || (*(_BYTE *)(v10 + 45) & 0x20) == 0)
                      break;
                    if ((*(_WORD *)(v10 + 69) & 0x10) != 0)
                    {
                      ++dword_1ECE91378;
                      v11 = *(_QWORD *)(v10 + 8);
                      v12 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
                      v13 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
                      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
                      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
                      v16 = v12 & ((v15 >> 31) ^ v15);
                      v17 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v16);
                      if (v17 == -1 || v17 != v11)
                      {
                        v19 = 1;
                        do
                        {
                          v16 = ((_DWORD)v16 + v19) & v12;
                          v20 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v16);
                          ++v19;
                        }
                        while (v20 == -1 || v20 != v11);
                      }
                      v22 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v16 + 8) + 16);
                      if (v22)
                      {
                        v23 = *v22;
                        if (v23)
                        {
                          v10 = *(_QWORD *)(v23 + 8);
LABEL_51:
                          v9 = 1;
                          if (v10)
                            continue;
                        }
                      }
                    }
                    goto LABEL_56;
                  }
                  if ((*(_BYTE *)(v10 + 45) & 0x40) != 0 && (*(_WORD *)(v10 + 69) & 0x10) != 0)
                  {
                    if ((v9 & 1) != 0)
                    {
                      v24 = dword_1ECE91378 + 1;
                    }
                    else
                    {
                      WebCore::continuationChainNodeMap(void)::map = 0;
                      *(_QWORD *)&dword_1ECE91378 = 0;
                      v7 = 1;
                      v24 = 1;
                    }
                    dword_1ECE91378 = v24;
                    v25 = *(_QWORD *)(v10 + 8);
                    v26 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
                    v27 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
                    v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
                    v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
                    v30 = v26 & ((v29 >> 31) ^ v29);
                    for (i = 1; ; ++i)
                    {
                      v32 = v30;
                      v33 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v30);
                      if (v33 != -1 && v33 == v25)
                        break;
                      v30 = (v32 + i) & v26;
                    }
                    v35 = *(uint64_t **)(WebCore::continuationChainNodeMap(void)::map + 16 * v32 + 8);
                    while (1)
                    {
                      v35 = (uint64_t *)v35[2];
                      if (!v35)
                        break;
                      v10 = *v35;
                      if (*v35)
                        v10 = *(_QWORD *)(v10 + 8);
                      if (v10 && (*(_BYTE *)(v10 + 45) & 0x20) != 0)
                        goto LABEL_51;
                    }
                  }
                }
LABEL_56:
                v37 = *((unsigned int *)this + 16);
                v38 = v37 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
                    ? *(_QWORD *)((v37 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)
                    : 0;
                if (v5 == v38)
                  break;
                if ((*(_BYTE *)(v38 + 45) & 1) != 0)
                  break;
                v6 = *(_QWORD *)(*(_QWORD *)(v38 + 24) + 8);
                v5 = v38;
              }
              while (v6);
            }
            else
            {
              return v3;
            }
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::AccessibilityRenderObject::parentObjectIfExists(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v2;
  WebCore::AXObjectCache *v3;
  uint64_t v4;
  WebCore::Widget *v5;
  void *v7;
  uint64_t v8;
  WebCore::RenderObject *v9;
  WebCore::RenderObject *v10;
  uint64_t *v11;
  int v12;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
  if (!v2)
    return 0;
  v3 = (WebCore::AXObjectCache *)v2;
  v4 = *((_QWORD *)this + 31);
  if (v4
    && *(_QWORD *)(v4 + 8)
    && (*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this) == 138)
  {
    v5 = *(WebCore::Widget **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8)
                                                                                         + 24)
                                                                             + 8)
                                                                 + 40)
                                                     + 8)
                                         + 1944)
                             + 248);
    if (v5)
      return WebCore::AXObjectCache::get(v3, v5);
    return 0;
  }
  (*(void (**)(uint64_t **__return_ptr, WebCore::AccessibilityRenderObject *, uint64_t))(*(_QWORD *)this + 984))(&v11, this, 17);
  if (v12 && (v8 = *v11) != 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 48))(*v11))
  {
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v7);
  }
  else
  {
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v7);
    v8 = WebCore::AccessibilityObject::displayContentsParent(this);
    if (!v8)
    {
      v10 = WebCore::AccessibilityRenderObject::renderParentObject(*((WTF **)this + 31), v9);
      if (v10)
        return WebCore::AXObjectCache::get(v3, v10);
      return 0;
    }
  }
  return v8;
}

uint64_t WebCore::AccessibilityRenderObject::parentObject(WTF **this)
{
  void *v2;
  uint64_t v3;
  WTF *v5;
  uint64_t *v6;
  WTF *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t *v23;
  int v24;

  (*((void (**)(uint64_t **__return_ptr, WTF **, uint64_t))*this + 123))(&v23, this, 17);
  if (v24)
  {
    v3 = *v23;
    if (*v23)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 48))(*v23))
      {
        WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v2);
        return v3;
      }
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v2);
  v3 = WebCore::AccessibilityObject::displayContentsParent((WebCore::AccessibilityObject *)this);
  if (v3)
    return v3;
  v5 = this[31];
  if (v5 && *((_QWORD *)v5 + 1))
  {
    v6 = (uint64_t *)(*((uint64_t (**)(WTF **))*this + 186))(this);
    v3 = (uint64_t)v6;
    if (!v6)
      return v3;
    v8 = *v6;
    if (!*v6)
    {
      v8 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = v3;
      v9 = *(unsigned int **)v3;
      *(_QWORD *)v3 = v8;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, v7);
        }
        v8 = *(_QWORD *)v3;
        if (!*(_QWORD *)v3)
          return 0;
      }
    }
    do
      v12 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v12 + 1, (unsigned int *)v8));
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_35;
    if ((*((unsigned int (**)(WTF **))*this + 372))(this) == 74)
    {
      v13 = *(_QWORD *)(*((_QWORD *)this[31] + 1) + 32);
      if (!v13)
        goto LABEL_35;
      v7 = *(WTF **)(v13 + 8);
      if (!v7)
        goto LABEL_35;
    }
    else
    {
      if ((*((unsigned int (**)(WTF **))*this + 372))(this) == 73)
      {
        v14 = (*((uint64_t (**)(WTF **))*this + 186))(this);
        if (v14)
        {
          v15 = v14;
          if ((*((unsigned int (**)(WTF **))*this + 372))(this) == 73)
          {
            v16 = (*((uint64_t (**)(WTF **))*this + 105))(this);
            v17 = WebCore::siblingWithAriaRole(*(_QWORD *)(v16 + 32), "menuitem");
            if (v17)
            {
              v18 = WebCore::AXObjectCache::getOrCreate(v15, v17, 0);
              if (v18)
              {
                v3 = v18;
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 1456))(v18) == 75)
                {
                  do
                  {
LABEL_36:
                    v21 = __ldaxr((unsigned int *)v8);
                    v22 = v21 - 1;
                  }
                  while (__stlxr(v22, (unsigned int *)v8));
                  if (!v22)
                  {
                    atomic_store(1u, (unsigned int *)v8);
                    WTF::fastFree((WTF *)v8, v7);
                  }
                  return v3;
                }
              }
            }
          }
        }
      }
      v19 = WebCore::AccessibilityRenderObject::renderParentObject(this[31], v7);
      if (!v19)
      {
        if ((*((unsigned int (**)(WTF **))*this + 182))(this) != 138)
        {
LABEL_35:
          v3 = 0;
          goto LABEL_36;
        }
        v20 = WebCore::AXObjectCache::getOrCreate(*(WebCore::AXObjectCache **)(v8 + 8), *(WebCore::Widget **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[31]+ 1)+ 24)+ 8)+ 40)+ 8)+ 1944)+ 248));
        goto LABEL_32;
      }
      v7 = v19;
    }
    v20 = WebCore::AXObjectCache::getOrCreate(*(WebCore::AXObjectCache **)(v8 + 8), v7);
LABEL_32:
    v3 = v20;
    goto LABEL_36;
  }
  return WebCore::AccessibilityNodeObject::parentObject((WebCore::AccessibilityNodeObject *)this);
}

uint64_t WebCore::AccessibilityRenderObject::isAttachment(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1672))(this);
  if ((!v2 || (v3 = v2, !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2)) || *(_QWORD *)(v3 + 40))
    && (v4 = *((_QWORD *)this + 31)) != 0
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && (*(_BYTE *)(v5 + 52) & 7) == 3)
  {
    return (*(unsigned __int8 *)(v5 + 53) >> 2) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL WebCore::AccessibilityRenderObject::isOffScreen(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  signed int v18;
  int v19;
  signed int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
    return 1;
  v3 = *(_QWORD *)(v1 + 8);
  if (!v3)
    return 1;
  v4 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 440))(v3, 0, 0xE00000000);
  v6 = (int)v4 / 64;
  v8 = v4 - (v7 & 0xFFFFFFC0);
  v9 = SHIDWORD(v4) / 64;
  v11 = HIDWORD(v4) - (v10 & 0xFFFFFFC0);
  v13 = v8 + v12;
  if (__OFADD__(v8, v12))
    v13 = (v8 >> 31) + 0x7FFFFFFF;
  v14 = v11 + v5;
  if (__OFADD__(v11, v5))
    v14 = (v11 >> 31) + 0x7FFFFFFF;
  v15 = v9 + ((int)(v11 + 32) >> 6);
  v16 = v6 + ((int)(v8 + 32) >> 6);
  if (v13 >= 0)
    v17 = v13;
  else
    v17 = v13 + 63;
  v18 = v13 - (v17 & 0xFFFFFFC0) + 32;
  if (v14 >= 0)
    v19 = v14;
  else
    v19 = v14 + 63;
  v20 = v14 - (v19 & 0xFFFFFFC0) + 32;
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8)
                                                                              + 24)
                                                                  + 8)
                                                      + 40)
                                          + 8)
                              + 1944)
                  + 248);
  v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 + 64) + 832))(v21 + 64, 0, 1);
  if ((int)v22 <= v16)
    v25 = v16;
  else
    v25 = v22;
  if (SHIDWORD(v22) <= v15)
    v26 = v15;
  else
    v26 = HIDWORD(v22);
  v27 = v23 + v22;
  if (v6 + (v17 >> 6) + (v18 >> 6) < v23 + (int)v22)
    v27 = v6 + (v17 >> 6) + (v18 >> 6);
  v28 = v24 + HIDWORD(v22);
  if (v9 + (v19 >> 6) + (v20 >> 6) < v24 + HIDWORD(v22))
    v28 = v9 + (v19 >> 6) + (v20 >> 6);
  if (v25 >= v27 || v26 >= v28)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
  }
  return v27 <= v25 || v28 <= v26;
}

unsigned int **WebCore::AccessibilityRenderObject::anchorElement(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  uint64_t *v3;
  void *v4;
  unsigned int **v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::AXObjectCache *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v37;

  v1 = *((_QWORD *)this + 31);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  v3 = (uint64_t *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
  v5 = (unsigned int **)v3;
  if (!v3)
    return v5;
  v6 = *v3;
  if (!*v3)
  {
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = v5;
    v7 = *v5;
    *v5 = (unsigned int *)v6;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v4);
      }
      v6 = (uint64_t)*v5;
      if (!*v5)
        return 0;
    }
  }
  do
    v10 = __ldaxr((unsigned int *)v6);
  while (__stlxr(v10 + 1, (unsigned int *)v6));
  if (!*(_QWORD *)(v6 + 8) || (v11 = *((_QWORD *)this + 31)) == 0 || (v12 = *(_QWORD *)(v11 + 8)) == 0)
  {
LABEL_69:
    v5 = 0;
    goto LABEL_70;
  }
  while ((*(_BYTE *)(v12 + 45) & 1) != 0)
  {
    if ((*(_BYTE *)(v12 + 45) & 2) != 0)
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 8) + 96);
    else
      v15 = *(_QWORD *)(v12 + 96);
    if ((v15 & 0x1F) != 1 && (v15 & 0x1F) != 14)
      goto LABEL_16;
    if ((*(_BYTE *)(v12 + 45) & 0x40) == 0)
      goto LABEL_16;
    if ((v15 & 0xF80000000000) != 0)
      goto LABEL_16;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 176))(v12) & 1) != 0)
      goto LABEL_16;
    v17 = *(unsigned __int8 *)(v12 + 46);
    if (v17 == 20)
      goto LABEL_16;
    if ((*(_BYTE *)(v12 + 52) & 7) == 1)
    {
      if ((*(_BYTE *)(v12 + 53) & 2) != 0 || v17 == 26 || v17 == 49)
        goto LABEL_16;
    }
    else if (v17 == 49 || v17 == 26)
    {
      goto LABEL_16;
    }
    if ((*(_WORD *)(v12 + 69) & 0x10) != 0)
    {
      ++dword_1ECE91378;
      v18 = *(_QWORD *)(v12 + 8);
      v19 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
      v20 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v23);
      if (v24 == -1 || v24 != v18)
      {
        v26 = 1;
        do
        {
          v23 = ((_DWORD)v23 + v26) & v19;
          v27 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v23);
          ++v26;
        }
        while (v27 == -1 || v27 != v18);
      }
      v29 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v23 + 8) + 16);
      if (v29)
      {
        v30 = *v29;
        if (v30)
        {
          v4 = *(void **)(v30 + 8);
          if (v4)
          {
            v37 = WebCore::AXObjectCache::getOrCreate(*(WebCore::AXObjectCache **)(v6 + 8), (WebCore::RenderObject *)v4);
            v5 = (unsigned int **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 3024))(v37);
            goto LABEL_70;
          }
        }
      }
    }
LABEL_16:
    v14 = *(_QWORD *)(v12 + 32);
    if (v14)
    {
      v12 = *(_QWORD *)(v14 + 8);
      if (v12)
        continue;
    }
    goto LABEL_69;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8);
  if (!v13)
    goto LABEL_16;
  *(_DWORD *)(v13 + 24) += 2;
  while (1)
  {
    v31 = v13;
    if ((*(_WORD *)(v13 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
    {
      v5 = (unsigned int **)v13;
      goto LABEL_78;
    }
    v32 = *(WebCore::AXObjectCache **)(v6 + 8);
    if (v32)
    {
      v4 = (void *)(*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL);
      if (v4)
      {
        v33 = WebCore::AXObjectCache::getOrCreate(v32, (WebCore::RenderObject *)v4);
        if (v33)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 104))(v33))
            break;
        }
      }
    }
    v13 = *(_QWORD *)(v13 + 32);
    if (v13)
      *(_DWORD *)(v13 + 24) += 2;
    if (*(_DWORD *)(v31 + 24) == 2)
    {
      if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v31, v4);
    }
    else
    {
      *(_DWORD *)(v31 + 24) -= 2;
    }
    if (!v13)
      goto LABEL_69;
  }
  if ((*(_WORD *)(v13 + 28) & 8) != 0)
    v5 = (unsigned int **)v13;
  else
    v5 = 0;
LABEL_78:
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13, v4);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  do
  {
LABEL_70:
    v34 = __ldaxr((unsigned int *)v6);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, (unsigned int *)v6));
  if (!v35)
  {
    atomic_store(1u, (unsigned int *)v6);
    WTF::fastFree((WTF *)v6, v4);
  }
  return v5;
}

WTF::StringImpl *WebCore::AccessibilityRenderObject::helpText@<X0>(WebCore::AccessibilityRenderObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::String *v9;
  __n128 v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::Element *v13;
  uint64_t v14;
  WTF::String *v15;
  __n128 v16;
  const WTF::StringImpl **Attribute;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  WebCore::AXObjectCache *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v4 = *((_QWORD *)this + 31);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return (WTF::StringImpl *)WebCore::AccessibilityNodeObject::helpText(this, a2);
  result = (WTF::StringImpl *)WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_helpAttr);
  v6 = *(WTF::StringImpl **)result;
  if (*(_QWORD *)result && *((_DWORD *)v6 + 1))
  {
    *(_DWORD *)v6 += 2;
LABEL_35:
    *a2 = v6;
    return result;
  }
  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 3008))(&v27, this);
  v6 = v27;
  if (v27 && *((_DWORD *)v27 + 1))
    goto LABEL_35;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1368))(&v26, this);
  v11 = (const WTF::StringImpl *)*((_QWORD *)this + 31);
  if (v11)
  {
    v12 = *((_QWORD *)v11 + 1);
    if (v12)
    {
      while (1)
      {
        if ((*(_BYTE *)(v12 + 45) & 1) == 0)
        {
          v13 = *(WebCore::Element **)(*(_QWORD *)(v12 + 24) + 8);
          if (v13)
          {
            if ((*((_WORD *)v13 + 14) & 0x10) != 0)
            {
              v11 = *(const WTF::StringImpl **)WebCore::Element::getAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::summaryAttr, v8, v9, v10);
              if (v11 && *((_DWORD *)v11 + 1))
                goto LABEL_24;
              Attribute = (const WTF::StringImpl **)WebCore::Element::getAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::titleAttr, v14, v15, v16);
              v19 = *Attribute;
              if (*Attribute)
              {
                if (*((_DWORD *)v19 + 1))
                {
                  v24 = Attribute;
                  if ((WTF::equal(v26, v19, v18) & 1) == 0)
                    break;
                }
              }
            }
          }
        }
        v20 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
        v21 = WebCore::AXObjectCache::getOrCreate(v20, (WebCore::RenderObject *)v12);
        if (!v21
          || (v22 = v21, v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 1456))(v21), v23 == 44)
          || v23 == 127
          || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 1456))(v22) == 134)
        {
          v11 = *(const WTF::StringImpl **)(v12 + 32);
          if (!v11)
            goto LABEL_27;
          v12 = *((_QWORD *)v11 + 1);
          if (v12)
            continue;
        }
        goto LABEL_26;
      }
      v11 = *v24;
      if (!*v24)
        goto LABEL_27;
LABEL_24:
      *(_DWORD *)v11 += 2;
    }
    else
    {
LABEL_26:
      v11 = 0;
    }
  }
LABEL_27:
  *a2 = v11;
  v25 = v26;
  v26 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v7);
    else
      *(_DWORD *)v25 -= 2;
  }
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::AccessibilityRenderObject::textUnderElement@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  int v11;
  uint64_t v12;
  WebCore::Node *v13;
  unsigned __int16 *Child;
  unsigned __int16 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  BOOL v24;
  WebCore::Node *v25;
  uint64_t v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  WTF::StringImpl *v37;
  WebCore::Node *v38;
  WTF *v39;
  WTF *v40;
  unsigned int *v41;
  int v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF *v45;
  WebCore::Node *v46[2];
  WebCore::Node *v47[2];
  WebCore::Node *v48[2];
  WebCore::Node *v49;
  char v50;
  WebCore::Node *v51;
  int v52;
  WebCore::Node *v53;
  int v54;
  unsigned __int8 v55;

  v8 = *(_QWORD *)(a1 + 248);
  if (!v8)
    return WebCore::AccessibilityNodeObject::textUnderElement((unsigned int *)a1, a2, a3, a4);
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9 || (a2 & 0xFF0000) != 0 && (a2 & 0xFF000000) != 0)
    return WebCore::AccessibilityNodeObject::textUnderElement((unsigned int *)a1, a2, a3, a4);
  v11 = *(unsigned __int8 *)(v9 + 46);
  if (v11 == 8)
    return (unsigned int *)WebCore::RenderFileUploadControl::buttonValue(v9, a4);
  if (v11 == 17 && ((*(_BYTE *)(v9 + 52) & 7) != 2 || (*(_BYTE *)(v9 + 53) & 1) == 0))
    return (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((*(_BYTE *)(v9 + 45) & 1) != 0)
  {
    if ((v11 - 36) > 4)
    {
      if ((*(_BYTE *)(v9 + 45) & 2) != 0 || (*(_QWORD *)(v9 + 96) & 0xF00000000000) != 0x300000000000)
        goto LABEL_25;
    }
    else if (a2 != 1)
    {
      goto LABEL_25;
    }
    return WebCore::AccessibilityNodeObject::textUnderElement((unsigned int *)a1, a2, a3, a4);
  }
  if ((*(_BYTE *)(v9 + 45) & 2) == 0 && (*(_QWORD *)(v9 + 96) & 0xF00000000000) == 0x300000000000)
    return WebCore::AccessibilityNodeObject::textUnderElement((unsigned int *)a1, a2, a3, a4);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = *(WebCore::Node **)(v12 + 8);
  if (v13)
  {
    Child = (unsigned __int16 *)WebCore::Node::pseudoAwareFirstChild(*(WebCore::Node **)(v12 + 8));
    v15 = (unsigned __int16 *)WebCore::Node::pseudoAwareLastChild(v13);
    if (Child)
    {
      if ((~Child[14] & 0x408) == 0
        && (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)Child + 368))(Child))
      {
        return WebCore::AccessibilityNodeObject::textUnderElement((unsigned int *)a1, a2, a3, a4);
      }
    }
    if (v15
      && (~v15[14] & 0x408) == 0
      && (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v15 + 368))(v15))
    {
      return WebCore::AccessibilityNodeObject::textUnderElement((unsigned int *)a1, a2, a3, a4);
    }
  }
LABEL_25:
  result = *(unsigned int **)(*(_QWORD *)(a1 + 248) + 8);
  v16 = *((_BYTE *)result + 45);
  if ((v16 & 2) == 0 && a2 != 1)
    return WebCore::AccessibilityNodeObject::textUnderElement((unsigned int *)a1, a2, a3, a4);
  LOBYTE(v51) = 0;
  v55 = 0;
  if ((v16 & 1) != 0 || (v17 = *(_QWORD *)(*((_QWORD *)result + 3) + 8)) == 0)
  {
    v22 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 112))(result);
    result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 248) + 8) + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 8));
    if (!v22 || (*(_BYTE *)(v22 + 45) & 1) != 0)
      goto LABEL_69;
    v23 = result;
    result = *(unsigned int **)(*(_QWORD *)(v22 + 24) + 8);
    v24 = !result || v23 == 0;
    if (v24 || (*((_BYTE *)v23 + 45) & 1) != 0 || !*(_QWORD *)(*((_QWORD *)v23 + 3) + 8))
      goto LABEL_69;
    v18 = *(_QWORD *)(*((_QWORD *)result + 5) + 8);
    WebCore::positionInParentBeforeNode((WebCore *)result, (WebCore::Node *)a2, (uint64_t)v47);
    if ((*((_BYTE *)v23 + 45) & 1) != 0)
      v26 = 0;
    else
      v26 = *(_QWORD *)(*((_QWORD *)v23 + 3) + 8);
    WebCore::positionInParentAfterNode(v26, v25, (uint64_t)v46);
    WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>((uint64_t *)v47, (uint64_t *)v46, (uint64_t)v48);
    std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)&v51, (uint64_t *)v48);
    if (v50)
    {
      v27 = v49;
      v49 = 0;
      if (v27)
      {
        if (*((_DWORD *)v27 + 6) == 2)
        {
          if ((*((_WORD *)v27 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v27, (void *)a2);
        }
        else
        {
          *((_DWORD *)v27 + 6) -= 2;
        }
      }
      v28 = v48[0];
      v48[0] = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28, (void *)a2);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
    }
    v29 = v46[0];
    v46[0] = 0;
    if (v29)
    {
      if (*((_DWORD *)v29 + 6) == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v29, (void *)a2);
      }
      else
      {
        *((_DWORD *)v29 + 6) -= 2;
      }
    }
    result = (unsigned int *)v47[0];
    v47[0] = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, (void *)a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    v30 = v55;
  }
  else
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8);
    *(_DWORD *)(v17 + 24) += 4;
    v19 = *(_WORD *)(v17 + 28);
    if ((v19 & 1) != 0)
    {
      v21 = *(_QWORD *)(v17 + 80);
      if (v21)
        LODWORD(v21) = *(_DWORD *)(v21 + 4);
    }
    else if ((v19 & 4) != 0 && (v20 = *(_QWORD *)(v17 + 80)) != 0)
    {
      LODWORD(v21) = 0;
      do
      {
        LODWORD(v21) = v21 + 1;
        v20 = *(_QWORD *)(v20 + 56);
      }
      while (v20);
    }
    else
    {
      LODWORD(v21) = 0;
    }
    v51 = (WebCore::Node *)v17;
    v52 = 0;
    v53 = (WebCore::Node *)v17;
    v54 = v21;
    v30 = 1;
    v55 = 1;
  }
  if (!v18 || !v30 || (v31 = *(_QWORD *)(v18 + 528)) == 0 || (v32 = *(_QWORD *)(v31 + 8)) == 0)
  {
LABEL_69:
    v33 = *(_QWORD *)(a1 + 248);
    if (!v33)
      goto LABEL_75;
    v34 = *(_QWORD *)(v33 + 8);
    if (!v34 || (*(_BYTE *)(v34 + 45) & 2) == 0)
      goto LABEL_75;
    result = *(unsigned int **)(v34 + 8);
    if (!result)
    {
      result = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 1;
      *((_QWORD *)result + 1) = v34;
      v39 = *(WTF **)(v34 + 8);
      *(_QWORD *)(v34 + 8) = result;
      if (v39)
      {
        if (*(_DWORD *)v39 != 1)
        {
          --*(_DWORD *)v39;
          goto LABEL_77;
        }
        WTF::fastFree(v39, (void *)a2);
        result = *(unsigned int **)(v34 + 8);
        if (!result)
        {
LABEL_75:
          LODWORD(v36) = 0;
          goto LABEL_86;
        }
      }
    }
LABEL_77:
    ++*result;
    v36 = *((_QWORD *)result + 1);
    if (!v36)
    {
LABEL_82:
      if (*result == 1)
        result = (unsigned int *)WTF::fastFree((WTF *)result, (void *)a2);
      else
        --*result;
      goto LABEL_86;
    }
    if (*(_BYTE *)(v36 + 46) != 46)
    {
LABEL_79:
      v37 = *(WTF::StringImpl **)(*((_QWORD *)result + 1) + 104);
      if (v37)
        *(_DWORD *)v37 += 2;
      *a4 = v37;
      LODWORD(v36) = 1;
      goto LABEL_82;
    }
    v40 = *(WTF **)(v36 + 8);
    v41 = result;
    if (!v40)
    {
      v40 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v40 = 1;
      *((_QWORD *)v40 + 1) = v36;
      v45 = *(WTF **)(v36 + 8);
      *(_QWORD *)(v36 + 8) = v40;
      if (v45)
      {
        if (*(_DWORD *)v45 == 1)
        {
          WTF::fastFree(v45, (void *)a2);
          v40 = *(WTF **)(v36 + 8);
          result = v41;
          if (!v40)
            goto LABEL_79;
        }
        else
        {
          --*(_DWORD *)v45;
        }
      }
    }
    v42 = (*(_DWORD *)v40)++;
    v43 = *((_QWORD *)v40 + 1);
    if (v43)
    {
      v44 = *(WTF::StringImpl **)(v43 + 128);
      if (v44 || (v44 = *(WTF::StringImpl **)(v43 + 136)) != 0)
        *(_DWORD *)v44 += 2;
      *a4 = v44;
      if (v42)
        *(_DWORD *)v40 = v42;
      else
        WTF::fastFree(v40, (void *)a2);
      LODWORD(v36) = 1;
      result = v41;
      goto LABEL_82;
    }
    if (v42)
      *(_DWORD *)v40 = v42;
    else
      WTF::fastFree(v40, (void *)a2);
    result = v41;
    goto LABEL_79;
  }
  if (*(_QWORD *)(v32 + 296) == v18)
    result = (unsigned int *)WebCore::plainText(&v51, 8, 0, (const WTF::String *)a4);
  else
    *a4 = 0;
  LODWORD(v36) = 1;
LABEL_86:
  if (v55)
  {
    v38 = v53;
    v53 = 0;
    if (v38)
    {
      if (*((_DWORD *)v38 + 6) == 2)
      {
        if ((*((_WORD *)v38 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v38, (void *)a2);
      }
      else
      {
        *((_DWORD *)v38 + 6) -= 2;
      }
    }
    result = (unsigned int *)v51;
    v51 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, (void *)a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  if (!(_DWORD)v36)
    return WebCore::AccessibilityNodeObject::textUnderElement((unsigned int *)a1, a2, a3, a4);
  return result;
}

uint64_t WebCore::AccessibilityRenderObject::stringValue@<X0>(WebCore::AccessibilityRenderObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  WebCore::Node *v25;
  WTF::StringImpl **v26;

  v4 = *((_QWORD *)this + 31);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return WebCore::AccessibilityNodeObject::stringValue(this, a2);
  if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this) == 107
    || ((v5 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this),
         (v5 - 101) <= 0x19)
      ? (v6 = ((1 << (v5 - 101)) & 0x3000001) == 0)
      : (v6 = 1),
        v6 ? (v7 = v5 == 19) : (v7 = 1),
        v7 || (*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 112))(this)))
  {
    if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this) != 19)
      return (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1400))(this);
    return WebCore::AccessibilityNodeObject::stringValue(this, a2);
  }
  v9 = *((_QWORD *)this + 31);
  if (!v9)
    goto LABEL_18;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_18;
  if ((*(_BYTE *)(v10 + 45) & 2) != 0)
    return (*(uint64_t (**)(WebCore::AccessibilityRenderObject *, uint64_t, _QWORD))(*(_QWORD *)this + 1392))(this, 0x100010000, 0);
  v14 = *(unsigned __int8 *)(v10 + 46);
  if (v14 == 19)
    return (*(uint64_t (**)(WebCore::AccessibilityRenderObject *, uint64_t, _QWORD))(*(_QWORD *)this + 1392))(this, 0x100010000, 0);
  if (v14 == 20)
  {
    v21 = *(_QWORD *)(v10 + 200);
    if (v21 && *(_DWORD *)(v21 + 4) && (*(_BYTE *)(v21 + 16) & 4) == 0)
      return WTF::String::String();
    else
      return WTF::String::String();
  }
  if (v14 != 22)
  {
LABEL_18:
    result = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this);
    if ((_DWORD)result == 138)
    {
LABEL_19:
      *a2 = 0;
      return result;
    }
    result = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this);
    if ((_DWORD)result == 20)
    {
      v11 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
      if (v11
        && (v12 = v11, (*(_WORD *)(v11 + 28) & 0x10) != 0)
        && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        *(_DWORD *)(v11 + 24) += 2;
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 240) + 272))(*(_QWORD *)(v11 + 240));
        if (*(_DWORD *)(v12 + 24) != 2)
        {
          *(_DWORD *)(v12 + 24) -= 2;
          return result;
        }
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        {
          v25 = (WebCore::Node *)v12;
          return (uint64_t)WebCore::Node::removedLastRef(v25, v13);
        }
      }
      else
      {
        *a2 = 0;
        v26 = a2;
        result = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
        v22 = *(unsigned int *)(result + 12);
        if ((_DWORD)v22)
        {
          v23 = *(uint64_t **)result;
          v24 = 8 * v22;
          do
          {
            result = *v23;
            if (*v23)
              result = WebCore::Accessibility::enumerateDescendants<WebCore::AXCoreObject,WebCore::AccessibilityRenderObject::stringValue(void)::$_0>(result, &v26);
            ++v23;
            v24 -= 8;
          }
          while (v24);
        }
      }
    }
    else
    {
      v20 = *((_QWORD *)this + 31);
      if (!v20)
        goto LABEL_19;
      result = *(_QWORD *)(v20 + 8);
      if (!result || *(_BYTE *)(result + 46) != 8)
        goto LABEL_19;
      return (uint64_t)WebCore::RenderFileUploadControl::fileTextValue((WTF::StringImpl *)result, a2);
    }
    return result;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
  if ((*(_WORD *)(v15 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195624BB4);
  }
  result = WebCore::HTMLSelectElement::selectedIndex(*(WebCore::HTMLSelectElement **)(*(_QWORD *)(v10 + 24) + 8));
  v16 = result;
  if (*(_BYTE *)(v15 + 300))
  {
    result = (uint64_t)WebCore::HTMLSelectElement::recalcListItems(v15, (void *)1, 1u);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_35;
LABEL_42:
    v19 = *(WTF::StringImpl **)(v10 + 416);
    if (v19)
    {
      v19 = (WTF::StringImpl *)*((_QWORD *)v19 + 1);
      if (v19)
      {
        v19 = (WTF::StringImpl *)*((_QWORD *)v19 + 13);
        if (v19)
          *(_DWORD *)v19 += 2;
      }
    }
    *a2 = v19;
    return result;
  }
  if ((result & 0x80000000) != 0)
    goto LABEL_42;
LABEL_35:
  if (*(_DWORD *)(v15 + 196) <= v16)
    goto LABEL_42;
  v17 = *(_QWORD *)(*(_QWORD *)(v15 + 184) + 8 * v16);
  if (!v17)
    goto LABEL_42;
  v18 = *(_QWORD *)(v17 + 8);
  if (!v18)
    goto LABEL_42;
  *(_DWORD *)(v18 + 24) += 2;
  WebCore::Element::attributeTrimmedWithDefaultARIA((WTF::StringImpl *)v18, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr, a2);
  result = (uint64_t)*a2;
  if (!*a2)
  {
    *a2 = 0;
    goto LABEL_40;
  }
  if (!*(_DWORD *)(result + 4))
  {
    *a2 = 0;
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)result -= 2;
LABEL_40:
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v18, v13);
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
    goto LABEL_42;
  }
  if (*(_DWORD *)(v18 + 24) != 2)
  {
    *(_DWORD *)(v18 + 24) -= 2;
    return result;
  }
  if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
  {
    v25 = (WebCore::Node *)v18;
    return (uint64_t)WebCore::Node::removedLastRef(v25, v13);
  }
  return result;
}

unint64_t WebCore::AccessibilityRenderObject::boundingBoxRect(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  uint64_t v2;
  WTF *v3;
  unint64_t v4;
  void *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v16;
  char v17;
  int v18;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  WebCore::AccessibilityRenderObject *v38;
  _QWORD v39[2];
  WTF *v40;
  uint64_t v41;

  v1 = *((_QWORD *)this + 31);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0)
  {
    v3 = 0;
    goto LABEL_4;
  }
  v38 = this;
  v3 = *(WTF **)(v2 + 8);
  if (!v3)
  {
    v3 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *((_QWORD *)v3 + 1) = v2;
    v33 = *(WTF **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = v3;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
      {
        WTF::fastFree(v33, v32);
        v3 = *(WTF **)(v2 + 8);
        if (!v3)
          goto LABEL_74;
      }
      else
      {
        --*(_DWORD *)v33;
      }
    }
  }
  ++*(_DWORD *)v3;
  v9 = *((_QWORD *)v3 + 1);
  if (!v9)
  {
LABEL_74:
    this = v38;
LABEL_4:
    v4 = WebCore::AccessibilityNodeObject::boundingBoxRect(this);
    v6 = v4;
    v7 = HIDWORD(v4);
    if (!v3)
      return v6 | (v7 << 32);
    goto LABEL_5;
  }
  v10 = *(_BYTE *)(v9 + 45);
  if ((v10 & 1) != 0 || (v11 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8)) == 0)
  {
    v40 = 0;
    v41 = 0;
    goto LABEL_27;
  }
  v12 = *(_QWORD *)(v11 + 64);
  v13 = v12 & 0xFFFFFFFFFFFFLL;
  if ((v12 & 0xFFFFFFFFFFFFLL) != 0)
  {
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFLL) + 8);
    if (!v14)
    {
      v14 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = v13;
      v36 = *(WTF **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = v14;
      if (v36)
      {
        if (*(_DWORD *)v36 == 1)
        {
          WTF::fastFree(v36, (void *)v9);
          v14 = *(_QWORD *)(v13 + 8);
          if (!v14)
            goto LABEL_15;
        }
        else
        {
          --*(_DWORD *)v36;
        }
      }
    }
    ++*(_DWORD *)v14;
  }
  else
  {
    v14 = 0;
  }
LABEL_15:
  if (*(_DWORD *)v3 == 1)
    WTF::fastFree(v3, (void *)v9);
  else
    --*(_DWORD *)v3;
  v40 = 0;
  v41 = 0;
  if (!v14)
  {
    v3 = 0;
    v16 = MEMORY[0x2E] == 83 || MEMORY[0x2E] == 103;
    v17 = 1;
    goto LABEL_35;
  }
  v9 = *(_QWORD *)(v14 + 8);
  v10 = *(_BYTE *)(v9 + 45);
  v3 = (WTF *)v14;
LABEL_27:
  v18 = *(unsigned __int8 *)(v9 + 46);
  v16 = v18 == 83 || v18 == 103;
  if ((v10 & 2) != 0)
  {
    WebCore::collectAbsoluteQuads((uint64_t)v39, (WebCore::LayoutIntegration::LineLayout *)v9, 0, 1);
    v40 = (WTF *)v39[0];
    v41 = v39[1];
    goto LABEL_42;
  }
  v17 = 0;
LABEL_35:
  v20 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v38 + 1456))(v38);
  v21 = **((_QWORD **)v3 + 1);
  if (v20 == 138 || v16)
  {
    (*(void (**)(void))(v21 + 392))();
    v22 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_43;
  }
  else
  {
    (*(void (**)(void))(v21 + 400))();
    if ((v17 & 1) != 0)
    {
      v22 = 0;
      goto LABEL_43;
    }
  }
LABEL_42:
  v22 = *((_QWORD *)v3 + 1);
LABEL_43:
  v23 = WebCore::AccessibilityObject::boundingBoxForQuads(v22, (uint64_t)&v40);
  v24 = (_DWORD)v23 << 6;
  if ((int)v23 < -33554432)
    v24 = 0x80000000;
  if ((int)v23 <= 0x1FFFFFF)
    v6 = v24;
  else
    v6 = 0x7FFFFFFF;
  v25 = HIDWORD(v23) << 6;
  if (SHIDWORD(v23) < -33554432)
    v25 = 0x80000000;
  if (SHIDWORD(v23) <= 0x1FFFFFF)
    v26 = v25;
  else
    v26 = 0x7FFFFFFFLL;
  v37 = v26;
  v27 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v38 + 1712))(v38);
  if (v27)
  {
    if ((*(_WORD *)(v27 + 3358) & 0x20) != 0)
    {
      v28 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v38 + 1232))(v38);
      if (v28)
      {
        v29 = v28;
        while (1)
        {
          v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 2696))(v29);
          v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 1232))(v29);
          v29 = v31;
          if (v30)
            break;
          if (!v31)
            goto LABEL_68;
        }
        v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 3040))(v31);
        if (__OFADD__(v6, (_DWORD)v34))
          v6 = (v6 >> 31) + 0x7FFFFFFF;
        else
          v6 += v34;
        if (__OFADD__((_DWORD)v37, HIDWORD(v34)))
          v37 = (v37 >> 31) + 0x7FFFFFFF;
        else
          v37 = (v37 + HIDWORD(v34));
      }
    }
  }
LABEL_68:
  (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v38 + 1456))(v38);
  v35 = v40;
  if (v40)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    WTF::fastFree(v35, v5);
  }
  v7 = v37;
  if (v3)
  {
LABEL_5:
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, v5);
    else
      --*(_DWORD *)v3;
  }
  return v6 | (v7 << 32);
}

uint64_t WebCore::AccessibilityRenderObject::isNonLayerSVGObject(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  _BYTE *v2;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
    return 0;
  v2 = *(_BYTE **)(v1 + 8);
  if (!v2)
    return 0;
  if (v2[46] == 72)
    return 1;
  return ((v2[52] & 7) == 4) & v2[53];
}

uint64_t WebCore::AccessibilityRenderObject::supportsPath(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  _BYTE *v2;
  unsigned int v4;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
    return 0;
  v2 = *(_BYTE **)(v1 + 8);
  if (!v2)
    return 0;
  if ((v2[45] & 2) == 0)
  {
    if ((v2[52] & 7) != 4)
      return 0;
    v4 = v2[53];
    if ((v4 & 1) != 0)
      return (v4 >> 4) & 1;
    if ((v4 & 0x10) == 0)
      return 0;
  }
  return 1;
}

void WebCore::AccessibilityRenderObject::elementPath(WebCore::AccessibilityRenderObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  signed int v31;
  _BOOL4 v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  int v59;
  WTF *v60;
  double v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned __int32 v74;
  uint64_t v75;
  WTF *v76;
  __n128 v77;
  __n128 *v78;
  uint64_t v79;
  uint64_t v80;
  WebCore::AXObjectCache *v81;
  uint64_t j;
  uint64_t v83;
  WTF *v84;
  void *v85;
  WTF *v86;
  float v87;
  uint64_t i;
  uint64_t v89;
  uint64_t v90;
  float v91;
  float v92;
  BOOL v93;
  __n128 v94;
  __int128 v95;
  WTF *v96;
  uint64_t v97;
  WTF *v98[2];
  _BYTE v99[32];
  char v100;
  WTF *v101;
  WTF *v102;
  uint64_t v103;
  char v104;
  __int16 v105;
  int v106;
  int v107;

  v3 = *((_QWORD *)this + 31);
  if (!v3)
    goto LABEL_5;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_5;
  if ((*(_BYTE *)(v4 + 45) & 2) != 0)
  {
    v96 = 0;
    v97 = 0;
    v100 = 0;
    v102 = 0;
    v103 = 0;
    v101 = 0;
    v104 = 0;
    *(_OWORD *)v98 = 0u;
    memset(v99, 0, 25);
    v105 = 1;
    v106 = 0;
    v107 = 0;
    (*(void (**)(uint64_t, _QWORD, WTF **, uint64_t, _QWORD))(*(_QWORD *)v4 + 576))(v4, 0, v98, 4, 0);
    WebCore::TransformState::flatten((WebCore::TransformState *)v98, 0);
    v7 = v98[0];
    v8 = v102;
    v102 = 0;
    if (v8)
      WTF::fastFree(v8, v6);
    v9 = v101;
    v101 = 0;
    if (v9)
      WTF::fastFree(v9, v6);
    v10 = floorf(*(float *)&v7 * 64.0);
    v11 = 0x7FFFFFFFLL;
    v12 = 0x80000000;
    if (v10 > -2147500000.0)
      v12 = (int)v10;
    if (v10 < 2147500000.0)
      v11 = v12;
    v13 = floorf(*((float *)&v7 + 1) * 64.0);
    if (v13 >= 2147500000.0)
    {
      v14 = 0x7FFFFFFF00000000;
    }
    else if (v13 <= -2147500000.0)
    {
      v14 = 0x8000000000000000;
    }
    else
    {
      v14 = (unint64_t)(int)v13 << 32;
    }
    v98[0] = (WTF *)(v14 | v11);
    WebCore::RenderText::boundingRects((WebCore::LayoutIntegration::LineLayout *)v4, (WebCore::RenderObject *)&v96, v98);
    v16 = HIDWORD(v97);
    if (HIDWORD(v97) <= 1)
    {
LABEL_19:
      *(_QWORD *)(a2 + 64) = 0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
LABEL_20:
      v17 = v96;
      if (v96)
      {
        v96 = 0;
        LODWORD(v97) = 0;
        WTF::fastFree(v17, v15);
      }
      return;
    }
    v18 = *((_QWORD *)this + 31);
    if (v18)
      v19 = *(_QWORD *)(v18 + 8);
    else
      v19 = 0;
    if ((*(_BYTE *)(v19 + 45) & 2) != 0)
      v19 = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8);
    if ((_MergedGlobals_152 & 1) == 0)
    {
      dword_1ECE82174 = 320;
      _MergedGlobals_152 = 1;
    }
    if (byte_1ECE82171 == 1)
    {
      v23 = dword_1ECE82178;
    }
    else
    {
      v23 = 320;
      dword_1ECE82178 = 320;
      byte_1ECE82171 = 1;
    }
    v24 = v96;
    v25 = *(unsigned int *)v96;
    v15 = (void *)*((unsigned int *)v96 + 1);
    v27 = *((_DWORD *)v96 + 2);
    v26 = *((_DWORD *)v96 + 3);
    v28 = (unsigned int *)((char *)v96 + 16);
    v29 = HIDWORD(v97) - 1;
    while (1)
    {
      v30 = v28[1];
      v31 = (_DWORD)v15 + v26;
      v32 = __OFADD__((_DWORD)v15, v26);
      v33 = (v15 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__((_DWORD)v15, v26))
        v33 = (_DWORD)v15 + v26;
      v34 = __OFSUB__(v30, v33);
      v35 = v30 - v33;
      if (v34)
        v35 = (v30 >> 31) + 0x7FFFFFFF;
      if (v35 < 0)
        v35 = -v35;
      if (v35 < v23)
      {
        v36 = *v28;
        if ((*(_DWORD *)(v19 + 120) & 0x4000000) != 0)
        {
          v34 = __OFSUB__(v36, (_DWORD)v25);
          v38 = v36 - v25;
          v37 = (v36 >> 31) + 0x7FFFFFFF;
          if (!v34)
            v37 = v38;
        }
        else
        {
          v34 = __OFSUB__((_DWORD)v25, v36);
          v37 = v25 - v36;
          if (v34)
            v37 = (v25 >> 31) + 0x7FFFFFFF;
        }
        if (v37 > dword_1ECE82174)
          break;
      }
      v40 = v28[2];
      v39 = v28[3];
      if (v40 < 1 || v39 < 1)
      {
        v44 = (unint64_t)v15;
        v43 = v25;
      }
      else if (v27 < 1 || v26 <= 0)
      {
        v43 = *v28;
        v44 = v28[1];
        v26 = v28[3];
        v27 = v28[2];
      }
      else
      {
        v42 = *v28;
        if ((int)*v28 >= (int)v25)
          v43 = v25;
        else
          v43 = v42;
        if ((int)v30 >= (int)v15)
          v44 = v15;
        else
          v44 = v30;
        v34 = __OFADD__((_DWORD)v25, v27);
        v45 = v25 + v27;
        v46 = (v25 >> 31) + 0x7FFFFFFF;
        if (v34)
          v45 = v46;
        v34 = __OFADD__(v42, v40);
        v47 = v42 + v40;
        v48 = (v42 >> 31) + 0x7FFFFFFF;
        if (!v34)
          v48 = v47;
        if (v45 <= v48)
          v45 = v48;
        if (v32)
          v31 = (v15 >> 31) + 0x7FFFFFFF;
        v49 = v30 + v39;
        if (__OFADD__(v30, v39))
          v49 = (v30 >> 31) + 0x7FFFFFFF;
        if (v31 <= v49)
          v50 = v49;
        else
          v50 = v31;
        v34 = __OFSUB__(v45, (_DWORD)v43);
        v51 = v45 - v43;
        v27 = (v45 >> 31) + 0x7FFFFFFF;
        if (!v34)
          v27 = v51;
        v26 = v50 - v44;
        if (__OFSUB__(v50, (_DWORD)v44))
          v26 = (v50 >> 31) + 0x7FFFFFFF;
      }
      v28 += 4;
      v15 = (void *)v44;
      v25 = v43;
      if (!--v29)
        goto LABEL_19;
    }
    v52 = *(_QWORD *)(*(_QWORD *)(v19 + 88) + 16);
    v53 = *(float *)(v52 + 56);
    if ((*(_BYTE *)(v52 + 52) & 0x10) != 0)
    {
      v87 = -3.0;
      if ((*(_BYTE *)(v52 + 52) & 0xF) != 0)
      {
        v91 = *(float *)(v52 + 48);
        v92 = v91 + -3.0;
        v93 = v91 < 3.0;
        v87 = 0.0;
        if (!v93)
          v87 = v92;
      }
      if (v87 < 0.0)
        v87 = 0.0;
      v53 = v53 + v87;
    }
    v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 24) + 8) + 40) + 8)
                    + 528);
    v55 = 1.0;
    if (v54)
    {
      v56 = *(_QWORD *)(v54 + 8);
      if (v56)
      {
        v57 = *(_QWORD *)(v56 + 24);
        if (v57)
        {
          v58 = *(float **)(v57 + 8);
          if (v58)
          {
            v59 = (*(_DWORD *)v58)++;
            v55 = v58[91];
            if (!v59)
            {
              WebCore::Page::~Page((uint64_t)v58);
              WTF::fastFree(v84, v85);
              v24 = v96;
              v16 = HIDWORD(v97);
              v98[0] = 0;
              v98[1] = 0;
              if (!HIDWORD(v97))
              {
LABEL_131:
                v77.n128_u32[0] = 0;
                WebCore::PathUtilities::pathWithShrinkWrappedRects((uint64_t)v98, (WebCore::Path *)a2, v77);
                v86 = v98[0];
                if (v98[0])
                {
                  v98[0] = 0;
                  LODWORD(v98[1]) = 0;
                  WTF::fastFree(v86, v15);
                }
                goto LABEL_20;
              }
LABEL_97:
              v60 = (WTF *)((char *)v24 + 16 * v16);
              v61 = v53 * 64.0;
              v62 = (int)fmax(v61, -2147483650.0);
              if (v61 < 2147483650.0)
                v63 = v62;
              else
                v63 = 0x7FFFFFFF;
              do
              {
                v95 = *(_OWORD *)v24;
                v64 = (v95 >> 31) + 0x7FFFFFFF;
                if (!__OFSUB__((_DWORD)v95, v63))
                  v64 = v95 - v63;
                v65 = (DWORD2(v95) >> 31) + 0x7FFFFFFF;
                if (!__OFADD__(DWORD2(v95), v63))
                  v65 = DWORD2(v95) + v63;
                v34 = __OFADD__(v65, v63);
                v66 = v65 + v63;
                v67 = (v65 >> 31) + 0x7FFFFFFF;
                if (!v34)
                  v67 = v66;
                v68 = (DWORD1(v95) >> 31) + 0x7FFFFFFF;
                if (!__OFSUB__(DWORD1(v95), v63))
                  v68 = DWORD1(v95) - v63;
                *(_QWORD *)&v95 = __PAIR64__(v68, v64);
                v69 = HIDWORD(v95) + v63;
                if (__OFADD__(HIDWORD(v95), v63))
                  v69 = (HIDWORD(v95) >> 31) + 0x7FFFFFFF;
                v34 = __OFADD__(v69, v63);
                v70 = v69 + v63;
                v71 = (v69 >> 31) + 0x7FFFFFFF;
                if (!v34)
                  v71 = v70;
                *((_QWORD *)&v95 + 1) = __PAIR64__(v71, v67);
                v94.n128_u32[0] = WebCore::snapRectToDevicePixels((int *)&v95, v55);
                *(unint64_t *)((char *)v94.n128_u64 + 4) = __PAIR64__(v73, v72);
                v94.n128_u32[3] = v74;
                v75 = HIDWORD(v98[1]);
                if (HIDWORD(v98[1]) == LODWORD(v98[1]))
                {
                  v78 = (__n128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v98, HIDWORD(v98[1]) + 1, (unint64_t)&v94);
                  v75 = HIDWORD(v98[1]);
                  v76 = v98[0];
                  v77 = *v78;
                }
                else
                {
                  v76 = v98[0];
                  v77 = v94;
                }
                *((__n128 *)v76 + v75) = v77;
                ++HIDWORD(v98[1]);
                v24 = (WTF *)((char *)v24 + 16);
              }
              while (v24 != v60);
              goto LABEL_131;
            }
            *(_DWORD *)v58 = v59;
          }
        }
      }
    }
    v98[0] = 0;
    v98[1] = 0;
    goto LABEL_97;
  }
  if ((*(_BYTE *)(v4 + 52) & 7) != 4)
  {
LABEL_5:
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return;
  }
  v20 = *(unsigned __int8 *)(v4 + 53);
  if ((~v20 & 0x11) != 0 || (v21 = *(_QWORD *)(v4 + 264)) == 0)
  {
    if ((v20 & 1) != 0)
      goto LABEL_5;
    if ((v20 & 0x10) == 0)
      goto LABEL_5;
    v79 = *(_QWORD *)(v4 + 224);
    if (!v79)
      goto LABEL_5;
    *(_DWORD *)(a2 + 64) = 0;
    v80 = *(unsigned int *)(v79 + 64);
    if ((_DWORD)v80 == -1)
    {
      *(_DWORD *)(a2 + 64) = -1;
    }
    else
    {
      v98[0] = (WTF *)(a2 + 8);
      ((void (*)(WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v80])(v98);
    }
    v81 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
    if (v81)
    {
      for (i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 32); i; i = *(_QWORD *)(v83 + 32))
      {
        v83 = *(_QWORD *)(i + 8);
        if (!v83)
          break;
        if (*(_BYTE *)(v83 + 46) == 83)
        {
LABEL_144:
          v89 = WebCore::AXObjectCache::getOrCreate(v81, (WebCore::RenderObject *)v83);
          v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 1512))(v89);
          *(_OWORD *)v98 = xmmword_1968DF7E8;
          *(_OWORD *)v99 = unk_1968DF7F8;
          *(double *)&v99[16] = (double)(int)v90 * 0.015625 + 0.0;
          *(double *)&v99[24] = (double)SHIDWORD(v90) * 0.015625 + 0.0;
          WebCore::Path::transform((WebCore::Path *)a2, (float64x2_t *)v98);
          return;
        }
      }
    }
  }
  else
  {
    *(_DWORD *)(a2 + 64) = 0;
    v22 = *(unsigned int *)(v21 + 64);
    if ((_DWORD)v22 == -1)
    {
      *(_DWORD *)(a2 + 64) = -1;
    }
    else
    {
      v98[0] = (WTF *)(a2 + 8);
      ((void (*)(WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v22])(v98);
    }
    v81 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1488))(this);
    if (v81)
    {
      for (j = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 32); j; j = *(_QWORD *)(v83 + 32))
      {
        v83 = *(_QWORD *)(j + 8);
        if (!v83)
          break;
        if (*(_BYTE *)(v83 + 46) == 103)
          goto LABEL_144;
      }
    }
  }
}

unsigned int *WebCore::AccessibilityRenderObject::labelText(const WebCore::AccessibilityObject *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)a1 + 31);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 45) & 2) != 0)
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 88) + 32) + 148) & 0x1FC000) == 0x40000)
        {
          v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
LABEL_5:
          __asm { BR              X10 }
        }
      }
      else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 32) + 148) & 0x1FC000) == 0x40000)
      {
        goto LABEL_5;
      }
    }
  }
  return WebCore::AccessibilityNodeObject::labelText(a1, a2);
}

uint64_t WebCore::AccessibilityRenderObject::titleUIElement(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v2;
  WebCore::AXObjectCache *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;

  v2 = *((_QWORD *)this + 31);
  if (!v2
    || !*(_QWORD *)(v2 + 8)
    || !(*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 448))(this))
  {
    (*(void (**)(uint64_t **__return_ptr, WebCore::AccessibilityRenderObject *, uint64_t))(*(_QWORD *)this
                                                                                                  + 984))(&v15, this, 15);
    if (v16 == 1)
      v7 = *v15;
    else
      v7 = 0;
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v10);
    return v7;
  }
  v3 = (WebCore::AXObjectCache *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this
                                                                                                 + 1488))(this);
  v4 = *((_QWORD *)this + 31);
  if (v4)
    v4 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v4 + 45) & 0x40) == 0)
    v4 = 0;
  v5 = *(unsigned int *)(v4 + 64) | ((unint64_t)*(unsigned __int8 *)(v4 + 68) << 32);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  v7 = 0;
  while (1)
  {
    v8 = *(_BYTE *)(v6 + 45);
    if ((v8 & 4) != 0)
      break;
    v9 = *(unsigned int *)(v6 + 47);
    if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)))
      return 0;
    v6 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
    if (!v6)
      return v7;
  }
  while (1)
  {
    if ((v8 & 1) == 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8);
      if (v12)
      {
        if ((*(_WORD *)(v12 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
        {
          break;
        }
      }
    }
    v13 = *(unsigned int *)(v6 + 47);
    if (!(v13 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)))
      return 0;
    v6 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
    if (!v6)
      return 0;
    while (1)
    {
      v8 = *(_BYTE *)(v6 + 45);
      if ((v8 & 4) != 0)
        break;
      v14 = *(unsigned int *)(v6 + 47);
      if (!(v14 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)))
        return 0;
      v7 = 0;
      v6 = *(_QWORD *)((v14 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
      if (!v6)
        return v7;
    }
  }
  return WebCore::AXObjectCache::getOrCreate(v3, (WebCore::RenderObject *)v6);
}

uint64_t WebCore::AccessibilityRenderObject::computeAccessibilityIsIgnored(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  WTF *v20;
  int v21;
  WebCore::RenderText *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  WTF *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v45;
  WebCore *v46;
  WebCore::Element *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  int v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  void *v97;
  WTF *v98;
  uint64_t v99;
  WebCore::Element *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF *v124;
  int v125;
  uint64_t v126;
  WTF *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  WTF *v135;
  WebCore::LegacyLineLayout *v136;

  v2 = *((_QWORD *)this + 31);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return WebCore::AccessibilityNodeObject::computeAccessibilityIsIgnored(this);
  result = WebCore::AccessibilityObject::defaultObjectInclusion(this);
  if (result < 2)
    return result;
  if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this) == 47)
    return 1;
  if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this) == 86)
    return 1;
  if (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1336))(this) & 1) != 0)
    return 1;
  v4 = *((_QWORD *)this + 31);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 46) == 49)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8) + 528);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 120);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 8);
              if (v9)
              {
                if ((WebCore::nodeHasRole(*(_QWORD *)(v8 + 8), (int16x8_t *)"presentation", 0x10000000CLL) & 1) != 0
                  || (WebCore::nodeHasRole(v9, (int16x8_t *)"none", 0x100000004) & 1) != 0)
                {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  v10 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1232))(this);
  if (v10)
  {
    v11 = v10;
    v12 = 0;
    while (1)
    {
      v12 |= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 1456))(v11) == 131;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 1456))(v11) == 129)
        break;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1232))(v11);
      if (!v11)
        goto LABEL_27;
    }
    v13 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this);
    if (v13 != 107 && v13 != 131 && (v12 & 1) == 0)
      return 1;
  }
LABEL_27:
  if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 128))(this))
    return objc_msgSend((id)objc_msgSend(*((id *)this + 3), "attachmentView"), "accessibilityIsIgnored");
  if ((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1672))(this))
  {
    v15 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1672))(this);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 176))(v15))
      return 0;
  }
  v16 = *((_QWORD *)this + 31);
  if (!v16)
    return 1;
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
    return 1;
  for (i = *(_QWORD *)(v17 + 32); i; i = *(_QWORD *)(v19 + 32))
  {
    v19 = *(_QWORD *)(i + 8);
    if (!v19)
      break;
    if (*(_BYTE *)(v19 + 46) == 22)
      return 1;
  }
  if (*(_BYTE *)(v17 + 46) == 17 && ((*(_BYTE *)(v17 + 52) & 7) != 2 || (*(_BYTE *)(v17 + 53) & 1) == 0))
    return 1;
  if ((*(_BYTE *)(v17 + 45) & 2) != 0)
  {
    v20 = *(WTF **)(v17 + 8);
    if (!v20)
    {
      v20 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v20 = 1;
      *((_QWORD *)v20 + 1) = v17;
      v38 = *(WTF **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = v20;
      if (v38)
      {
        if (*(_DWORD *)v38 == 1)
        {
          WTF::fastFree(v38, v14);
          v20 = *(WTF **)(v17 + 8);
          if (!v20)
            goto LABEL_54;
        }
        else
        {
          --*(_DWORD *)v38;
        }
      }
    }
    v21 = (*(_DWORD *)v20)++;
    v22 = (WebCore::RenderText *)*((_QWORD *)v20 + 1);
    if (v22)
    {
      if (WebCore::RenderText::hasRenderedText(v22, (WebCore::RenderObject *)v14))
      {
        v24 = *((_QWORD *)v20 + 1);
        v25 = *(_QWORD *)(v24 + 104);
        if (!v25)
          goto LABEL_74;
        v26 = *(unsigned __int8 **)(v25 + 8);
        v27 = *(unsigned int *)(v25 + 4);
        if ((*(_BYTE *)(v25 + 16) & 4) != 0)
        {
          if (!(_DWORD)v27)
            goto LABEL_74;
          while (1)
          {
            v28 = *v26;
            v29 = v28 > 0x20;
            v30 = (1 << v28) & 0x100003600;
            v31 = v29 || v30 == 0;
            if (v31)
              break;
            ++v26;
            if (!--v27)
              goto LABEL_74;
          }
        }
        else
        {
          if (!(_DWORD)v27)
            goto LABEL_74;
          v34 = 2 * v27;
          while (1)
          {
            v35 = *(unsigned __int16 *)v26;
            v29 = v35 > 0x20;
            v36 = (1 << v35) & 0x100003600;
            if (v29 || v36 == 0)
              break;
            v26 += 2;
            v34 -= 2;
            if (!v34)
              goto LABEL_74;
          }
        }
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 8) + 69) & 0x40) != 0)
          goto LABEL_74;
        if (*(_BYTE *)(v24 + 46) == 46)
        {
          v39 = *(_QWORD *)(v24 + 128);
          if (v39)
          {
            v40 = *(unsigned __int8 **)(v39 + 8);
            v41 = *(unsigned int *)(v39 + 4);
            if ((*(_BYTE *)(v39 + 16) & 4) != 0)
            {
              if (!(_DWORD)v41)
                goto LABEL_74;
              result = 1;
              while (1)
              {
                v42 = *v40;
                v29 = v42 > 0x20;
                v43 = (1 << v42) & 0x100003600;
                if (v29 || v43 == 0)
                  break;
                ++v40;
                if (!--v41)
                  goto LABEL_75;
              }
            }
            else
            {
              if (!(_DWORD)v41)
                goto LABEL_74;
              v73 = 2 * v41;
              result = 1;
              while (1)
              {
                v74 = *(unsigned __int16 *)v40;
                v29 = v74 > 0x20;
                v75 = (1 << v74) & 0x100003600;
                if (v29 || v75 == 0)
                  break;
                v40 += 2;
                v73 -= 2;
                if (!v73)
                  goto LABEL_75;
              }
            }
            result = 0;
            goto LABEL_75;
          }
        }
        v50 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1232))(this);
        if (!v50)
        {
LABEL_156:
          result = *((_QWORD *)v20 + 1) == 0;
          goto LABEL_75;
        }
        v51 = (_QWORD *)v50;
        v52 = *(_QWORD *)(v50 + 8);
        if (__ldaxr((unsigned __int8 *)v52))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v52))
        {
          goto LABEL_112;
        }
        MEMORY[0x19AEA534C](v52);
LABEL_112:
        ++*(_QWORD *)(v52 + 8);
        v54 = __ldxr((unsigned __int8 *)v52);
        if (v54 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v52))
            goto LABEL_117;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v52);
LABEL_117:
        v55 = 1;
        while (1)
        {
          v56 = v51;
          if ((*(unsigned int (**)(_QWORD *))(*v51 + 1456))(v51) == 126)
          {
LABEL_154:
            v69 = v51[1];
            if (__ldaxr((unsigned __int8 *)v69))
            {
              __clrex();
              goto LABEL_176;
            }
            if (__stxr(1u, (unsigned __int8 *)v69))
LABEL_176:
              MEMORY[0x19AEA534C](v69);
            v77 = *(_QWORD *)(v69 + 8);
            v78 = v77 - 1;
            *(_QWORD *)(v69 + 8) = v77 - 1;
            if (v77 == 1)
            {
              v109 = *(_QWORD *)(v69 + 16);
              v79 = *(_QWORD *)(v69 + 24);
              *(_QWORD *)(v69 + 24) = 0;
              v80 = v109 != 0;
            }
            else
            {
              v79 = 0;
              v80 = 1;
            }
            v81 = __ldxr((unsigned __int8 *)v69);
            if (v81 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v69))
                goto LABEL_184;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v69);
LABEL_184:
            if (!v78)
            {
              if (v79)
                (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
              if (!v80)
                WTF::fastFree((WTF *)v69, (void *)v23);
            }
LABEL_74:
            result = 1;
LABEL_75:
            if (*(_DWORD *)v20 != 1)
            {
              --*(_DWORD *)v20;
              return result;
            }
            v45 = result;
LABEL_95:
            WTF::fastFree(v20, (void *)v23);
            return v45;
          }
          if ((v55 & 1) != 0)
          {
            if (((*(uint64_t (**)(_QWORD *))(*v51 + 856))(v51) & 1) != 0)
            {
              v55 = 1;
              goto LABEL_125;
            }
            if ((*(unsigned int (**)(_QWORD *))(*v51 + 1456))(v51) - 76 < 3
              || (*(unsigned int (**)(_QWORD *))(*v51 + 1456))(v51) == 75)
            {
              goto LABEL_154;
            }
          }
          v55 = 0;
LABEL_125:
          v57 = (*(uint64_t (**)(_QWORD *))(*v51 + 1232))(v51);
          v51 = (_QWORD *)v57;
          if (!v57)
            goto LABEL_135;
          v58 = *(_QWORD *)(v57 + 8);
          if (__ldaxr((unsigned __int8 *)v58))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v58))
          {
            goto LABEL_130;
          }
          MEMORY[0x19AEA534C](v58);
LABEL_130:
          ++*(_QWORD *)(v58 + 8);
          v60 = __ldxr((unsigned __int8 *)v58);
          if (v60 != 1)
          {
            __clrex();
LABEL_134:
            WTF::Lock::unlockSlow((WTF::Lock *)v58);
            goto LABEL_135;
          }
          if (__stlxr(0, (unsigned __int8 *)v58))
            goto LABEL_134;
LABEL_135:
          v61 = v56[1];
          if (__ldaxr((unsigned __int8 *)v61))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v61))
          {
            goto LABEL_139;
          }
          MEMORY[0x19AEA534C](v61);
LABEL_139:
          v63 = *(_QWORD *)(v61 + 8);
          v64 = v63 - 1;
          *(_QWORD *)(v61 + 8) = v63 - 1;
          if (v63 == 1)
          {
            v68 = *(_QWORD *)(v61 + 16);
            v65 = *(_QWORD *)(v61 + 24);
            *(_QWORD *)(v61 + 24) = 0;
            v66 = v68 != 0;
          }
          else
          {
            v65 = 0;
            v66 = 1;
          }
          v67 = __ldxr((unsigned __int8 *)v61);
          if (v67 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v61))
              goto LABEL_146;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v61);
LABEL_146:
          if (!v64)
          {
            if (v65)
              (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
            if (!v66)
              WTF::fastFree((WTF *)v61, (void *)v23);
          }
          if (!v51)
            goto LABEL_156;
        }
      }
      if (*(_DWORD *)v20 == 1)
        WTF::fastFree(v20, (void *)v23);
      else
        --*(_DWORD *)v20;
      return 1;
    }
    if (v21)
      *(_DWORD *)v20 = v21;
    else
      WTF::fastFree(v20, v14);
  }
LABEL_54:
  if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this) == 45)
    return 0;
  if (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 104))(this) & 1) != 0)
    return 0;
  if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this) - 55 < 8)
    return 0;
  if (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 144))(this) & 1) != 0)
    return 0;
  v32 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
  if (v32)
  {
    if ((*(_WORD *)(v32 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v32 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::figureTag + 24))
    {
      return 0;
    }
  }
  if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this) == 111)
    return 0;
  v33 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this);
  if ((v33 - 8) <= 0x3D && ((1 << (v33 - 8)) & 0x2020000008270001) != 0
    || v33 == 128)
  {
    return 0;
  }
  v31 = v33 == 136;
  result = 0;
  if (v31)
    return result;
  if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this) == 49)
  {
    if (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 800))(this) & 1) == 0)
    {
      v46 = (WebCore *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 832))(this);
      if (!v46 || !WebCore::hasAccNameAttribute(v46, v47))
      {
        v48 = *((_QWORD *)this + 31);
        if (v48)
          v49 = *(_QWORD *)(v48 + 8);
        else
          v49 = 0;
        if (v49 && (*(_BYTE *)(v49 + 52) & 7) == 3 && (*(_BYTE *)(v49 + 53) & 1) != 0)
        {
          v20 = *(WTF **)(v49 + 8);
          if (v20)
            goto LABEL_195;
          v20 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v20 = 1;
          *((_QWORD *)v20 + 1) = v49;
          v98 = *(WTF **)(v49 + 8);
          *(_QWORD *)(v49 + 8) = v20;
          if (!v98)
            goto LABEL_195;
          if (*(_DWORD *)v98 != 1)
          {
            --*(_DWORD *)v98;
LABEL_195:
            ++*(_DWORD *)v20;
            v23 = *((_QWORD *)v20 + 1);
            if (v23)
            {
              v82 = *(_QWORD *)(v23 + 216);
              if (v82)
              {
                v83 = *(unsigned __int8 **)(v82 + 8);
                v84 = *(unsigned int *)(v82 + 4);
                if ((*(_BYTE *)(v82 + 16) & 4) != 0)
                {
                  if ((_DWORD)v84)
                  {
                    do
                    {
                      v85 = *v83;
                      v29 = v85 > 0x20;
                      v86 = (1 << v85) & 0x100003600;
                      if (v29 || v86 == 0)
                        goto LABEL_348;
                      ++v83;
                    }
                    while (--v84);
                  }
                }
                else if ((_DWORD)v84)
                {
                  v93 = 2 * v84;
                  do
                  {
                    v94 = *(unsigned __int16 *)v83;
                    v29 = v94 > 0x20;
                    v95 = (1 << v94) & 0x100003600;
                    if (v29 || v95 == 0)
                      goto LABEL_348;
                    v83 += 2;
                    v93 -= 2;
                  }
                  while (v93);
                }
LABEL_224:
                result = 1;
                goto LABEL_294;
              }
LABEL_334:
              if (*(int *)(v23 + 164) < 65 || *(int *)(v23 + 160) < 65)
                goto LABEL_224;
              v128 = *(_QWORD *)(*(_QWORD *)(v23 + 224) + 24);
              if (v128)
              {
                result = *(_QWORD *)(v128 + 8);
                if (!result)
                  goto LABEL_294;
                v129 = WebCore::CachedImage::imageSizeForRenderer(result, v23, 0, *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 24) + 8)+ 40)+ 8)+ 1944)+ 248)+ 328)+ 592));
                if (SHIDWORD(v129) >= 65)
                {
                  result = (int)v129 < 65;
                  goto LABEL_294;
                }
                goto LABEL_224;
              }
LABEL_348:
              result = 0;
              goto LABEL_294;
            }
            v88 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::altAttr);
            if (!v88)
            {
              v23 = *((_QWORD *)v20 + 1);
              if (!v23)
                goto LABEL_348;
              goto LABEL_334;
            }
            v89 = 0;
LABEL_278:
            v110 = *(unsigned __int8 **)(v88 + 8);
            v111 = *(unsigned int *)(v88 + 4);
            if ((*(_BYTE *)(v88 + 16) & 4) != 0)
            {
              if ((_DWORD)v111)
              {
                do
                {
                  v112 = *v110;
                  v29 = v112 > 0x20;
                  v113 = (1 << v112) & 0x100003600;
                  if (v29 || v113 == 0)
                    goto LABEL_296;
                  ++v110;
                }
                while (--v111);
              }
            }
            else if ((_DWORD)v111)
            {
              v115 = 2 * v111;
              while (1)
              {
                v116 = *(unsigned __int16 *)v110;
                v29 = v116 > 0x20;
                v117 = (1 << v116) & 0x100003600;
                if (v29 || v117 == 0)
                  break;
                v110 += 2;
                v115 -= 2;
                if (!v115)
                  goto LABEL_293;
              }
LABEL_296:
              result = 0;
              if ((v89 & 1) != 0)
                return result;
              goto LABEL_294;
            }
LABEL_293:
            result = 1;
            if ((v89 & 1) != 0)
              return result;
            goto LABEL_294;
          }
          WTF::fastFree(v98, v97);
          v20 = *(WTF **)(v49 + 8);
          if (v20)
            goto LABEL_195;
        }
        v88 = *WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::altAttr);
        if (v88)
        {
          v20 = 0;
          v89 = 1;
          goto LABEL_278;
        }
      }
    }
    return 0;
  }
  if ((*((_BYTE *)this + 58) & 0x41) != 1
    && ((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 296))(this) & 1) == 0)
  {
    if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 3080))(this))
    {
      v71 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1232))(this);
      if (v71)
      {
        v72 = v71;
        while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 296))(v72) & 1) == 0
             && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 400))(v72) & 1) == 0
             && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 176))(v72) & 1) == 0)
        {
          v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 1232))(v72);
          if (!v72)
            goto LABEL_208;
        }
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 400))(v72) & 1) != 0)
          return 1;
      }
    }
  }
LABEL_208:
  if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 2976))(this) != 134
    || (*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this) == 46)
  {
    return 0;
  }
  v90 = *((_QWORD *)this + 31);
  if (v90)
    v90 = *(_QWORD *)(v90 + 8);
  if ((*(_BYTE *)(v90 + 45) & 1) != 0)
  {
    v91 = 0;
    goto LABEL_230;
  }
  v91 = *(_QWORD *)(*(_QWORD *)(v90 + 24) + 8);
  if (!v91)
  {
LABEL_230:
    v92 = 1;
    goto LABEL_231;
  }
  if ((*(_WORD *)(v91 + 28) & 0x10) != 0)
  {
    v92 = 0;
    result = 0;
    if (*(_QWORD *)(*(_QWORD *)(v91 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
      return result;
  }
  else
  {
    v92 = 0;
  }
LABEL_231:
  v99 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 832))(this);
  if (WebCore::AccessibilityObject::contentEditableAttributeIsEnabled(v99, v100)
    || WebCore::AccessibilityObject::supportsARIAAttributes(this))
  {
    return 0;
  }
  if (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 3312))(this) & 1) != 0)
    return 1;
  if (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 2296))(this) & 1) != 0)
    return 0;
  v101 = *((_QWORD *)this + 31);
  if (!v101)
  {
    v20 = 0;
    v103 = 1;
    goto LABEL_244;
  }
  v20 = 0;
  v102 = *(_QWORD *)(v101 + 8);
  v103 = 1;
  if (!v102 || (*(_BYTE *)(v102 + 52) & 7) != 1)
    goto LABEL_244;
  v20 = *(WTF **)(v102 + 8);
  if (!v20)
  {
    v20 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *((_QWORD *)v20 + 1) = v102;
    v135 = *(WTF **)(v102 + 8);
    *(_QWORD *)(v102 + 8) = v20;
    if (v135)
    {
      if (*(_DWORD *)v135 == 1)
      {
        WTF::fastFree(v135, v134);
        v20 = *(WTF **)(v102 + 8);
        if (!v20)
          goto LABEL_244;
      }
      else
      {
        --*(_DWORD *)v135;
      }
    }
  }
  ++*(_DWORD *)v20;
  if (!*((_QWORD *)v20 + 1)
    || (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 22) & 4) == 0
    || ((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 800))(this) & 1) != 0)
  {
    v103 = 0;
LABEL_244:
    if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this) == 11)
    {
      if (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 2888))(this) & 1) != 0)
        goto LABEL_268;
      v104 = *((_QWORD *)this + 31);
      if (v104)
      {
        v105 = *(_QWORD *)(v104 + 8);
        if (v105)
        {
          if ((*(_BYTE *)(v105 + 45) & 4) != 0)
          {
            v124 = *(WTF **)(v105 + 8);
            if (!v124)
            {
              v124 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v124 = 1;
              *((_QWORD *)v124 + 1) = v105;
              v127 = *(WTF **)(v105 + 8);
              *(_QWORD *)(v105 + 8) = v124;
              if (v127)
              {
                if (*(_DWORD *)v127 == 1)
                {
                  WTF::fastFree(v127, (void *)v23);
                  v124 = *(WTF **)(v105 + 8);
                  if (!v124)
                    goto LABEL_249;
                }
                else
                {
                  --*(_DWORD *)v127;
                }
              }
            }
            v125 = (*(_DWORD *)v124)++;
            v126 = *((_QWORD *)v124 + 1);
            if (v126 && (*(int *)(v126 + 164) < 65 || *(int *)(v126 + 160) < 65))
            {
              if (v125)
                *(_DWORD *)v124 = v125;
              else
                WTF::fastFree(v124, (void *)v23);
              goto LABEL_319;
            }
            if (v125)
              *(_DWORD *)v124 = v125;
            else
              WTF::fastFree(v124, (void *)v23);
          }
        }
      }
    }
LABEL_249:
    v106 = *(_QWORD *)this;
    if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 46) == 20)
    {
      result = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(v106 + 1240))(this);
      if (result)
        result = (*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 1456))(result) != 69;
LABEL_269:
      if ((v103 & 1) != 0)
        return result;
      goto LABEL_294;
    }
    if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(v106 + 1456))(this) == 138)
      goto LABEL_268;
    if ((v92 & 1) != 0
      || (*(_WORD *)(v91 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v91 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))
    {
      if ((WebCore::AccessibilityNodeObject::hasAttributesRequiredForInclusion(this) & 1) != 0)
        goto LABEL_268;
      if (WebCore::AccessibilityNodeObject::isGenericFocusableElement(this))
      {
        v107 = (*(_WORD *)(v91 + 28) & 4) != 0 ? v92 : 1;
        if ((v107 & 1) == 0 && *(_QWORD *)(v91 + 80))
          goto LABEL_268;
      }
      if ((v92 & 1) != 0 || (*(_WORD *)(v91 + 28) & 0x10) == 0)
      {
LABEL_267:
        if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this) != 15)
        {
          v119 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
          if (!v119
            || (*(_WORD *)(v119 + 28) & 0x10) == 0
            || (v120 = *(_QWORD *)(*(_QWORD *)(v119 + 96) + 24), v120 != *(_QWORD *)(WebCore::HTMLNames::kbdTag + 24))
            && v120 != *(_QWORD *)(WebCore::HTMLNames::codeTag + 24)
            && v120 != *(_QWORD *)(WebCore::HTMLNames::preTag + 24)
            && v120 != *(_QWORD *)(WebCore::HTMLNames::sampTag + 24)
            && v120 != *(_QWORD *)(WebCore::HTMLNames::varTag + 24)
            && v120 != *(_QWORD *)(WebCore::HTMLNames::citeTag + 24)
            && v120 != *(_QWORD *)(WebCore::HTMLNames::insTag + 24)
            && v120 != *(_QWORD *)(WebCore::HTMLNames::delTag + 24)
            && v120 != *(_QWORD *)(WebCore::HTMLNames::supTag + 24)
            && v120 != *(_QWORD *)(WebCore::HTMLNames::subTag + 24))
          {
            v121 = *((_QWORD *)this + 31);
            if (v121)
              v121 = *(_QWORD *)(v121 + 8);
            if ((*(_BYTE *)(v121 + 45) & 2) != 0)
              v121 = *(_QWORD *)(*(_QWORD *)(v121 + 32) + 8);
            if ((*(_BYTE *)(v121 + 96) & 0x1Eu) - 22 >= 4)
            {
              v122 = WebCore::AccessibilityNodeObject::controlForLabelElement(this);
              if (v122)
              {
                v123 = v122;
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v122 + 1456))(v122) == 14
                  || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v123 + 1456))(v123) == 88)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v123 + 1320))(v123);
                }
              }
              goto LABEL_319;
            }
          }
        }
LABEL_268:
        result = 0;
        goto LABEL_269;
      }
      v108 = *(_QWORD *)(*(_QWORD *)(v91 + 96) + 24);
      if (v108 != *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
      {
        if (v108 == *(_QWORD *)(WebCore::HTMLNames::dfnTag + 24))
          goto LABEL_268;
        goto LABEL_267;
      }
    }
LABEL_319:
    result = 1;
    goto LABEL_269;
  }
  v130 = *((_QWORD *)v20 + 1);
  if ((*(_BYTE *)(v130 + 22) & 4) != 0)
  {
    v131 = *(_DWORD *)(v130 + 240);
    if (v131 == 1)
    {
      v132 = *(_QWORD *)(v130 + 232);
      if (v132)
      {
        v133 = *(_QWORD *)(v132 + 80);
        if (v133)
        {
          if (*(_DWORD *)(v133 + 60) >= 2u && *(_DWORD *)(v133 + 44))
            goto LABEL_348;
        }
      }
    }
    else if (v131 == 2)
    {
      v136 = *(WebCore::LegacyLineLayout **)(v130 + 232);
      if (v136)
      {
        if (WebCore::LegacyLineLayout::lineCount(v136))
          goto LABEL_348;
      }
    }
  }
  result = WebCore::AccessibilityNodeObject::mouseButtonListener((uint64_t)this, 1) == 0;
LABEL_294:
  v45 = result;
  if (*(_DWORD *)v20 == 1)
    goto LABEL_95;
  --*(_DWORD *)v20;
  return v45;
}

uint64_t WebCore::AccessibilityRenderObject::layoutCount(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && *(_BYTE *)(v2 + 46) == 49)
    return *(unsigned int *)(*(_QWORD *)(v2 + 248) + 484);
  else
    return 0;
}

uint64_t WebCore::AccessibilityRenderObject::documentBasedSelectedTextRange(WebCore::AccessibilityRenderObject *this)
{
  void *v2;
  WebCore::Node *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::HTMLTextFormControlElement *v7;
  int v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  void *v11;
  uint64_t v12;
  WebCore::HTMLTextFormControlElement *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v18[3];
  WebCore::Node *v19[3];

  WebCore::AccessibilityNodeObject::selectedVisiblePositionRange(this, (uint64_t)v18);
  v3 = v19[0];
  if (v18[0])
    v4 = v19[0] == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = 0;
    goto LABEL_26;
  }
  v6 = *((_QWORD *)this + 31);
  if (v6
    && *(_QWORD *)(v6 + 8)
    && (*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 120))(this))
  {
    v7 = *(WebCore::HTMLTextFormControlElement **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 24) + 8);
    if ((*((_WORD *)v7 + 14) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 872))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8)
                                                                                            + 24)
                                                                                + 8)) & 1) == 0)
    {
      goto LABEL_43;
    }
    v8 = WebCore::HTMLTextFormControlElement::indexForVisiblePosition(v7, (const WebCore::VisiblePosition *)v18);
  }
  else
  {
    v9 = (WebCore::Node *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
    if (v9)
    {
      v10 = v9;
      *((_DWORD *)v9 + 6) += 2;
      v8 = WebCore::indexForVisiblePosition(v9, v18, 0);
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v11);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  v12 = *((_QWORD *)this + 31);
  if (!v12
    || !*(_QWORD *)(v12 + 8)
    || !(*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 120))(this))
  {
    v14 = (WebCore::Node *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
    if (v14)
    {
      v15 = v14;
      *((_DWORD *)v14 + 6) += 2;
      WebCore::indexForVisiblePosition(v14, v19, 0);
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v2);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    goto LABEL_25;
  }
  v13 = *(WebCore::HTMLTextFormControlElement **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 24) + 8);
  if ((*((_WORD *)v13 + 14) & 8) == 0
    || ((*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)v13 + 872))(v13) & 1) == 0)
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x19562701CLL);
  }
  WebCore::HTMLTextFormControlElement::indexForVisiblePosition(v13, (const WebCore::VisiblePosition *)v19);
LABEL_25:
  v5 = v8 & ~(v8 >> 31);
  v3 = v19[0];
LABEL_26:
  v19[0] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v3, v2);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
  }
  v16 = v18[0];
  v18[0] = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16, v2);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  return v5;
}

uint64_t WebCore::AccessibilityRenderObject::indexForVisiblePosition(WebCore::AccessibilityRenderObject *this, VisiblePosition *a2)
{
  uint64_t v4;
  WebCore::HTMLTextFormControlElement *v5;
  uint64_t result;
  WebCore::Node *v7;
  WebCore::Node *v8;
  void *v9;
  uint64_t v10;

  v4 = *((_QWORD *)this + 31);
  if (v4
    && *(_QWORD *)(v4 + 8)
    && (*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 120))(this))
  {
    v5 = *(WebCore::HTMLTextFormControlElement **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 24) + 8);
    if ((*((_WORD *)v5 + 14) & 8) != 0
      && ((*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)v5 + 872))(v5) & 1) != 0)
    {
      return WebCore::HTMLTextFormControlElement::indexForVisiblePosition(v5, (const WebCore::VisiblePosition *)a2);
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  else
  {
    v7 = (WebCore::Node *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
    if (!v7)
      return 0;
    v8 = v7;
    *((_DWORD *)v7 + 6) += 2;
    v10 = WebCore::indexForVisiblePosition(v7, a2, 0);
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v9);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
    return v10;
  }
  return result;
}

uint64_t WebCore::AccessibilityRenderObject::selectedText@<X0>(WebCore::AccessibilityRenderObject *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  WebCore::HTMLTextFormControlElement *v5;
  uint64_t v6;
  _QWORD v7[2];

  result = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 112))(this);
  if ((_DWORD)result)
  {
    *a2 = 0;
  }
  else if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 120))(this))
  {
    v5 = *(WebCore::HTMLTextFormControlElement **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 24) + 8);
    if ((*((_WORD *)v5 + 14) & 8) != 0
      && ((*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)v5 + 872))(v5) & 1) != 0)
    {
      return WebCore::HTMLTextFormControlElement::selectedText(v5, a2);
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  else
  {
    v7[0] = WebCore::AccessibilityRenderObject::documentBasedSelectedTextRange(this);
    v7[1] = v6;
    return (*(uint64_t (**)(WebCore::AccessibilityRenderObject *, _QWORD *))(*(_QWORD *)this + 2160))(this, v7);
  }
  return result;
}

uint64_t WebCore::AccessibilityRenderObject::selectedTextRange(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v2;
  WebCore::HTMLTextFormControlElement *v3;
  uint64_t result;

  if (((*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 112))(this) & 1) != 0)
    return 0;
  if (!(*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 120))(this))
    return WebCore::AccessibilityRenderObject::documentBasedSelectedTextRange(this);
  v3 = *(WebCore::HTMLTextFormControlElement **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 24) + 8);
  if ((*((_WORD *)v3 + 14) & 8) != 0
    && ((*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)v3 + 872))(v3) & 1) != 0)
  {
    v2 = WebCore::HTMLTextFormControlElement::selectionStart(v3);
    WebCore::HTMLTextFormControlElement::selectionEnd(v3);
    WebCore::HTMLTextFormControlElement::selectionStart(v3);
    return v2;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::AccessibilityRenderObject::insertionPointLineNumber(WebCore::AccessibilityRenderObject *this)
{
  WebCore::HTMLTextFormControlElement *v2;
  unsigned int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  int v11;
  char v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v16;
  int v17;
  char v18;
  WebCore::Node *v19[2];
  char v20;
  WebCore::Node *v21;
  int v22;
  WebCore::Node *v23;
  int v24;
  char v25;

  if ((*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 120))(this))
  {
    v2 = *(WebCore::HTMLTextFormControlElement **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 24) + 8);
    if ((*((_WORD *)v2 + 14) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 872))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8)
                                                                                            + 24)
                                                                                + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19562754CLL);
    }
    v3 = WebCore::HTMLTextFormControlElement::selectionStart(v2);
    if (v3 == WebCore::HTMLTextFormControlElement::selectionEnd(v2))
    {
      WebCore::HTMLTextFormControlElement::visiblePositionForIndex(v2, v3, (uint64_t)&v21);
      v5 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *, WebCore::Node **))(*(_QWORD *)this + 2120))(this, &v21);
LABEL_24:
      v14 = v21;
      v21 = 0;
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v14, v4);
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
      return v5;
    }
    return 0xFFFFFFFFLL;
  }
  v6 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
  if (!v6)
    return 0xFFFFFFFFLL;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 528);
  if (!v7)
    return 0xFFFFFFFFLL;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    return 0xFFFFFFFFLL;
  WebCore::VisibleSelection::firstRange((WebCore::Node *)(*(_QWORD *)(*(_QWORD *)(v8 + 296) + 3064) + 56), &v21);
  if (!v25)
    return 0xFFFFFFFFLL;
  v9 = v21;
  v10 = v23;
  v5 = 0xFFFFFFFFLL;
  if (v21 != v23 || (v11 = v22, v22 != v24))
  {
LABEL_21:
    v23 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v4);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    goto LABEL_24;
  }
  *((_DWORD *)v21 + 6) += 2;
  v16 = v9;
  v17 = v11;
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v9 + 208))(v9) & 1) != 0)
  {
    v12 = 8;
  }
  else if (v11)
  {
    v12 = 10;
  }
  else
  {
    v12 = 9;
  }
  v18 = v12;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v16, (uint64_t)v19);
  v20 = 1;
  v5 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *, WebCore::Node **))(*(_QWORD *)this + 2120))(this, v19);
  v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v4);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  if (*((_DWORD *)v9 + 6) == 2)
  {
    if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v9, v4);
  }
  else
  {
    *((_DWORD *)v9 + 6) -= 2;
  }
  if (v25)
  {
    v10 = v23;
    goto LABEL_21;
  }
  return v5;
}

uint64_t WebCore::AccessibilityRenderObject::setSelectedTextRange(_QWORD *a1, WebCore::Node *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Document *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  WebCore *v15;
  unsigned int v16;
  unsigned int v17;
  WebCore::Node *v18;
  void *v19;
  unsigned __int8 v20;
  void *v21;
  BOOL v22;
  unsigned __int8 v23;
  WebCore::Node *v25;
  uint64_t v26;
  void *v27;
  WebCore::Node *v28;
  void *v29;
  unsigned __int8 v30;
  void *v31;
  unsigned __int8 v32;
  WebCore::Node *v34;
  uint64_t v35;
  void *v36;
  WebCore::Node *v37;
  uint64_t v38;
  void *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  WebCore::Editor *v45;
  void *v46;
  WebCore::Editor *v47;
  uint64_t v48;
  void *v49;
  WebCore::Node *v50;
  uint64_t v51;
  char v52;
  WebCore::Node *v53;
  int v54;
  char v55;
  char v56;
  WebCore::Node *v57;
  int v58;
  char v59;
  char v60;
  uint64_t v61;
  int v62;
  _QWORD v63[2];
  char v64;
  WebCore::Node *v65;
  int v66;
  char v67;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 1488))(a1);
  if (v4)
  {
    if (*((_QWORD *)a2 + 1))
      v5 = 3;
    else
      v5 = 2;
    *(_DWORD *)(v4 + 424) = v5;
    *(_QWORD *)(v4 + 428) = 5;
    *(_DWORD *)(v4 + 436) = 0;
    *(_BYTE *)(v4 + 736) = 1;
  }
  v6 = a1[31];
  if (!v6)
    goto LABEL_12;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_12;
  v8 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8);
  v9 = *((_QWORD *)v8 + 382);
  if (!v9)
  {
    v45 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v45, v8);
    v47 = (WebCore::Editor *)*((_QWORD *)v8 + 382);
    *((_QWORD *)v8 + 382) = v45;
    if (v47)
    {
      WebCore::Editor::~Editor(v47, v46);
      if (*(_DWORD *)v48)
      {
        *(_QWORD *)(v48 + 496) = 0;
        *(_OWORD *)(v48 + 464) = 0u;
        *(_OWORD *)(v48 + 480) = 0u;
        *(_OWORD *)(v48 + 432) = 0u;
        *(_OWORD *)(v48 + 448) = 0u;
        *(_OWORD *)(v48 + 400) = 0u;
        *(_OWORD *)(v48 + 416) = 0u;
        *(_OWORD *)(v48 + 368) = 0u;
        *(_OWORD *)(v48 + 384) = 0u;
        *(_OWORD *)(v48 + 336) = 0u;
        *(_OWORD *)(v48 + 352) = 0u;
        *(_OWORD *)(v48 + 304) = 0u;
        *(_OWORD *)(v48 + 320) = 0u;
        *(_OWORD *)(v48 + 272) = 0u;
        *(_OWORD *)(v48 + 288) = 0u;
        *(_OWORD *)(v48 + 240) = 0u;
        *(_OWORD *)(v48 + 256) = 0u;
        *(_OWORD *)(v48 + 208) = 0u;
        *(_OWORD *)(v48 + 224) = 0u;
        *(_OWORD *)(v48 + 176) = 0u;
        *(_OWORD *)(v48 + 192) = 0u;
        *(_OWORD *)(v48 + 144) = 0u;
        *(_OWORD *)(v48 + 160) = 0u;
        *(_OWORD *)(v48 + 112) = 0u;
        *(_OWORD *)(v48 + 128) = 0u;
        *(_OWORD *)(v48 + 80) = 0u;
        *(_OWORD *)(v48 + 96) = 0u;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)(v48 + 64) = 0u;
        *(_OWORD *)(v48 + 16) = 0u;
        *(_OWORD *)(v48 + 32) = 0u;
        *(_OWORD *)v48 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v48, v49);
      }
    }
    v9 = *((_QWORD *)v8 + 382);
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
  {
LABEL_13:
    v12 = 1;
    goto LABEL_14;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 664))(v11);
  v12 = 0;
LABEL_14:
  v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  v14 = a1[31];
  if (v13)
  {
    v15 = *(WebCore **)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 24) + 8);
    if ((*((_WORD *)v15 + 14) & 8) == 0
      || ((*(uint64_t (**)(WebCore *))(*(_QWORD *)v15 + 872))(v15) & 1) == 0)
    {
      __break(0xC471u);
      goto LABEL_111;
    }
    v16 = *(_DWORD *)a2;
    v17 = *((_DWORD *)a2 + 2) + *(_DWORD *)a2;
    v50 = 0;
    v51 = 0;
    WebCore::HTMLTextFormControlElement::setSelectionRange((uint64_t)v15, v16, v17, 0, 3, (uint64_t *)&v50, 0);
    goto LABEL_81;
  }
  if (!v14 || !*(_QWORD *)(v14 + 8))
    goto LABEL_81;
  v15 = (WebCore *)(*(uint64_t (**)(_QWORD *))(*a1 + 840))(a1);
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 1960))(&v61, a1);
  WebCore::visiblePositionForIndexUsingCharacterIterator(v15, (WebCore::Node *)*(unsigned int *)a2, (uint64_t)&v57);
  if (v64)
  {
    v18 = v57;
    if (v57)
    {
      *((_DWORD *)v57 + 6) += 2;
      v53 = v18;
      v54 = v58;
      v55 = v59;
      WebCore::makeBoundaryPoint((uint64_t *)&v53, (uint64_t)&v50);
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18, v19);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
      goto LABEL_24;
    }
    goto LABEL_112;
  }
  while (1)
  {
LABEL_111:
    __break(1u);
LABEL_112:
    v53 = 0;
    v54 = v58;
    v55 = v59;
    WebCore::makeBoundaryPoint((uint64_t *)&v53, (uint64_t)&v50);
LABEL_24:
    if (v52)
    {
      v20 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v61, (uint64_t)&v50);
      v22 = 0;
      if (v20 != 129 && (char)v20 <= 0)
      {
        v23 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v50, (uint64_t)v63);
        v22 = v23 != 129 && (char)v23 < 1;
      }
      if (v52)
      {
        v25 = v50;
        v50 = 0;
        if (v25)
        {
          if (*((_DWORD *)v25 + 6) == 2)
          {
            if ((*((_WORD *)v25 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v25, v21);
          }
          else
          {
            *((_DWORD *)v25 + 6) -= 2;
          }
        }
      }
      if (v22)
        goto LABEL_44;
    }
    if (v64)
    {
      v26 = v61;
      *(_DWORD *)(v61 + 24) += 2;
      v53 = (WebCore::Node *)v26;
      v54 = v62;
      v55 = 0;
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v53, (uint64_t)&v50);
      v52 = 1;
      v28 = v57;
      v57 = v50;
      if (v28)
      {
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28, v27);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
      v58 = v51;
      v59 = BYTE4(v51);
      v60 = 1;
      if (*(_DWORD *)(v26 + 24) == 2)
      {
        if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v26, v27);
      }
      else
      {
        *(_DWORD *)(v26 + 24) -= 2;
      }
LABEL_44:
      WebCore::visiblePositionForIndexUsingCharacterIterator(v15, (WebCore::Node *)(*((_DWORD *)a2 + 2) + *(_DWORD *)a2), (uint64_t)&v53);
      if (v64)
      {
        a2 = v53;
        if (v53)
        {
          *((_DWORD *)v53 + 6) += 2;
          v65 = a2;
          v66 = v54;
          v67 = v55;
          WebCore::makeBoundaryPoint((uint64_t *)&v65, (uint64_t)&v50);
          if (*((_DWORD *)a2 + 6) == 2)
          {
            if ((*((_WORD *)a2 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(a2, v29);
          }
          else
          {
            *((_DWORD *)a2 + 6) -= 2;
          }
        }
        else
        {
          v65 = 0;
          v66 = v54;
          v67 = v55;
          WebCore::makeBoundaryPoint((uint64_t *)&v65, (uint64_t)&v50);
        }
        if (v52)
        {
          v30 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v61, (uint64_t)&v50);
          a2 = 0;
          if (v30 != 129 && (char)v30 <= 0)
          {
            v32 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v50, (uint64_t)v63);
            a2 = (WebCore::Node *)(v32 != 129 && (char)v32 < 1);
          }
          if (v52)
          {
            v34 = v50;
            v50 = 0;
            if (v34)
            {
              if (*((_DWORD *)v34 + 6) == 2)
              {
                if ((*((_WORD *)v34 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v34, v31);
              }
              else
              {
                *((_DWORD *)v34 + 6) -= 2;
              }
            }
          }
          if ((a2 & 1) != 0)
            goto LABEL_68;
        }
        if (v64)
          break;
      }
    }
  }
  v35 = v61;
  *(_DWORD *)(v61 + 24) += 2;
  v65 = (WebCore::Node *)v35;
  v66 = v62;
  v67 = 0;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v65, (uint64_t)&v50);
  v37 = v53;
  v53 = v50;
  if (v37)
  {
    if (*((_DWORD *)v37 + 6) == 2)
    {
      if ((*((_WORD *)v37 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v37, v36);
    }
    else
    {
      *((_DWORD *)v37 + 6) -= 2;
    }
  }
  v54 = v51;
  v55 = BYTE4(v51);
  v56 = 1;
  if (*(_DWORD *)(v35 + 24) == 2)
  {
    if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v35, v36);
  }
  else
  {
    *(_DWORD *)(v35 + 24) -= 2;
  }
LABEL_68:
  v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[31] + 8) + 24)
                                                                                          + 8)
                                                                              + 40)
                                                                  + 8)
                                                      + 528)
                                          + 8)
                              + 296)
                  + 3064);
  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v50, (const WebCore::VisiblePosition *)&v57, (const WebCore::VisiblePosition *)&v53, 0);
  WebCore::FrameSelection::setSelection(v38, (uint64_t)&v50, 0xC7u, 0, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v50);
  v40 = v53;
  v53 = 0;
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v40, v39);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
  v41 = v57;
  v57 = 0;
  if (v41)
  {
    if (*((_DWORD *)v41 + 6) == 2)
    {
      if ((*((_WORD *)v41 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v41, v39);
    }
    else
    {
      *((_DWORD *)v41 + 6) -= 2;
    }
  }
  if (v64)
  {
    v42 = v63[0];
    v63[0] = 0;
    if (v42)
    {
      if (*(_DWORD *)(v42 + 24) == 2)
      {
        if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v42, v39);
      }
      else
      {
        *(_DWORD *)(v42 + 24) -= 2;
      }
    }
    v43 = v61;
    v61 = 0;
    if (v43)
    {
      if (*(_DWORD *)(v43 + 24) == 2)
      {
        if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v43, v39);
      }
      else
      {
        *(_DWORD *)(v43 + 24) -= 2;
      }
    }
  }
LABEL_81:
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 1488))(a1);
  if (result)
  {
    *(_QWORD *)(result + 424) = 0;
    *(_QWORD *)(result + 432) = 0;
    *(_BYTE *)(result + 736) = 0;
  }
  if ((v12 & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 672))(v11);
  return result;
}

unsigned int *WebCore::AccessibilityRenderObject::url@<X0>(WebCore::AccessibilityRenderObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *result;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  __int128 v9;

  v4 = *((_QWORD *)this + 31);
  if (!v4)
    return WebCore::AccessibilityNodeObject::url(this, a2);
  if (!*(_QWORD *)(v4 + 8))
    return WebCore::AccessibilityNodeObject::url(this, a2);
  result = (unsigned int *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this);
  if ((_DWORD)result != 138)
    return WebCore::AccessibilityNodeObject::url(this, a2);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 24) + 8) + 40)
                 + 8);
  v7 = *(_DWORD **)(v6 + 736);
  if (v7)
    *v7 += 2;
  *(_QWORD *)a2 = v7;
  v8 = v6 + 736;
  v9 = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(a2 + 8) = v9;
  return result;
}

BOOL WebCore::AccessibilityRenderObject::setValue(WebCore::AccessibilityRenderObject *this, const WTF::String *a2, const WTF::StringImpl *a3, double a4, double a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  _BOOL8 v10;
  uint64_t v13;
  uint64_t v14;
  WebCore::Document *v15;
  uint64_t v16;
  WebCore::Node *v17;
  void *v18;
  WebCore::Node *v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WebCore::Editor *v26;
  void *v27;
  WebCore::Editor *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  char v33;
  WebCore::Node *v34;

  v6 = *((_QWORD *)this + 31);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return 0;
  if ((*(_BYTE *)(v7 + 45) & 1) != 0)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
  if (!v8)
    return 0;
  v9 = *(_WORD *)(v8 + 28);
  if ((v9 & 8) == 0)
    return 0;
  *(_DWORD *)(v8 + 24) += 2;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 528);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 8)) == 0)
  {
LABEL_17:
    if ((v9 & 0x10) != 0)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
      if (v20 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        v21 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v21 + 2;
        if ((*(_BYTE *)(v7 + 52) & 7) == 1 && (*(_BYTE *)(v7 + 53) & 4) != 0 && *(_BYTE *)(v7 + 46) != 44)
        {
          WebCore::HTMLInputElement::setValue(v8, (uint64_t)a2, 0, 0, (uint64_t)&v31);
          if (v33)
          {
            v24 = v32;
            v32 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, a2);
              else
                *(_DWORD *)v24 -= 2;
            }
          }
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
          goto LABEL_32;
        }
        if (v21)
        {
          *(_DWORD *)(v8 + 24) = v21;
        }
        else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
          if ((*(_WORD *)(v8 + 28) & 0x10) == 0)
            goto LABEL_36;
          v20 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
        }
      }
      if (v20 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
      {
        v22 = 0;
        *(_DWORD *)(v8 + 24) += 2;
        v23 = v8;
LABEL_37:
        v25 = *(unsigned __int8 *)(v7 + 46);
        v10 = v25 == 44;
        if (v25 == 44)
        {
          WebCore::HTMLTextAreaElement::setValueCommon((WebCore::HTMLTextFormControlElement *)v23, a2, a3, 0, a4, a5, a6);
          *(_BYTE *)(v23 + 233) = 1;
          WebCore::ValidatedFormListedElement::updateValidity(v23 + 112);
        }
        if ((v22 & 1) == 0)
        {
          if (*(_DWORD *)(v23 + 24) == 2)
          {
            if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v23, a2);
          }
          else
          {
            *(_DWORD *)(v23 + 24) -= 2;
          }
        }
        goto LABEL_42;
      }
    }
LABEL_36:
    v23 = 0;
    v22 = 1;
    goto LABEL_37;
  }
  v15 = *(WebCore::Document **)(v14 + 296);
  v16 = *((_QWORD *)v15 + 382);
  if (!v16)
  {
    v26 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v26, v15);
    v28 = (WebCore::Editor *)*((_QWORD *)v15 + 382);
    *((_QWORD *)v15 + 382) = v26;
    if (v28)
    {
      WebCore::Editor::~Editor(v28, v27);
      if (*(_DWORD *)v29)
      {
        *(_QWORD *)(v29 + 496) = 0;
        *(_OWORD *)(v29 + 464) = 0u;
        *(_OWORD *)(v29 + 480) = 0u;
        *(_OWORD *)(v29 + 432) = 0u;
        *(_OWORD *)(v29 + 448) = 0u;
        *(_OWORD *)(v29 + 400) = 0u;
        *(_OWORD *)(v29 + 416) = 0u;
        *(_OWORD *)(v29 + 368) = 0u;
        *(_OWORD *)(v29 + 384) = 0u;
        *(_OWORD *)(v29 + 336) = 0u;
        *(_OWORD *)(v29 + 352) = 0u;
        *(_OWORD *)(v29 + 304) = 0u;
        *(_OWORD *)(v29 + 320) = 0u;
        *(_OWORD *)(v29 + 272) = 0u;
        *(_OWORD *)(v29 + 288) = 0u;
        *(_OWORD *)(v29 + 240) = 0u;
        *(_OWORD *)(v29 + 256) = 0u;
        *(_OWORD *)(v29 + 208) = 0u;
        *(_OWORD *)(v29 + 224) = 0u;
        *(_OWORD *)(v29 + 176) = 0u;
        *(_OWORD *)(v29 + 192) = 0u;
        *(_OWORD *)(v29 + 144) = 0u;
        *(_OWORD *)(v29 + 160) = 0u;
        *(_OWORD *)(v29 + 112) = 0u;
        *(_OWORD *)(v29 + 128) = 0u;
        *(_OWORD *)(v29 + 80) = 0u;
        *(_OWORD *)(v29 + 96) = 0u;
        *(_OWORD *)(v29 + 48) = 0u;
        *(_OWORD *)(v29 + 64) = 0u;
        *(_OWORD *)(v29 + 16) = 0u;
        *(_OWORD *)(v29 + 32) = 0u;
        *(_OWORD *)v29 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v29, v30);
      }
    }
    v16 = *((_QWORD *)v15 + 382);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 576))(v8) & 1) == 0)
  {
    v9 = *(_WORD *)(v8 + 28);
    goto LABEL_17;
  }
  v17 = *(WebCore::Node **)(*(_QWORD *)(v16 + 16) + 8);
  *((_DWORD *)v17 + 6) += 2;
  v34 = v17;
  WebCore::ClearTextCommand::CreateAndApply((uint64_t *)&v34, a2);
  v19 = v34;
  v34 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v18);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  WebCore::EventHandler::handleTextInputEvent(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 16) + 8) + 528) + 8) + 640), a2, 0, 0);
LABEL_32:
  v10 = 1;
LABEL_42:
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::AccessibilityRenderObject::document(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *((_QWORD *)this + 31);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
  }
  else
  {
    result = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
    if (!result)
      return result;
    v4 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
  }
  return *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
}

BOOL WebCore::AccessibilityRenderObject::isWidget(WebCore::AccessibilityRenderObject *this)
{
  return (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1672))(this) != 0;
}

uint64_t WebCore::AccessibilityRenderObject::widget(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = (*(unsigned __int8 *)(v2 + 53) >> 2) & 1;
  if ((*(_BYTE *)(v2 + 52) & 7) != 3)
    v3 = 0;
  if (v3 == 1)
    return *(_QWORD *)(v2 + 232);
  else
    return 0;
}

uint64_t WebCore::AccessibilityRenderObject::associatedAXImage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  const WebCore::TreeScope *v9;
  unsigned int *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1488))(a1);
  if (!v3)
    return 0;
  v4 = v3;
  ++*(_DWORD *)(v3 + 8);
  v5 = *(_QWORD *)(a2 + 112);
  if (v5
    && *(_DWORD *)(v5 + 4)
    && (v9 = *(const WebCore::TreeScope **)(a2 + 40), (v10 = (unsigned int *)*((_QWORD *)v9 + 6)) != 0)
    && (WebCore::TreeScopeOrderedMap::getElementByUsemap(v10, (const WTF::AtomString *)(a2 + 112), v9, &v13),
        (v11 = v13) != 0))
  {
    v6 = WebCore::AXObjectCache::getOrCreate(v4, v13, 0);
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v4 + 8);
  if (v7)
  {
    *(_DWORD *)(v4 + 8) = v7 - 1;
    return v6;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::AccessibilityRenderObject::documentLinks@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::RenderObject *v10;
  unsigned __int8 v11;
  WebCore::AXObjectCache *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  const WTF::AtomString *v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t *v33;
  WebCore::AccessibilityImageMapLink *v34;
  unsigned int *v35;
  void *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  void *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  int v73;
  char *v74;
  uint64_t v75;
  const WebCore::TreeScope *v77;
  unsigned int *v78;
  WebCore::RenderObject *v79;
  unsigned __int8 v80;
  WebCore::AXObjectCache *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  int v97;
  int v98;
  char *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  uint64_t i;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  BOOL v111;
  WebCore::AXObjectCache *v112;
  uint64_t k;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  BOOL v119;
  WebCore::AXObjectCache *v120;
  uint64_t j;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  WebCore::AXObjectCache *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WebCore::AXObjectCache *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WebCore::Node *v155;
  uint64_t v156;
  WebCore::AXObjectCache *v157;
  uint64_t v158;

  v4 = *(_QWORD *)(this + 248);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = this;
    *a3 = 0;
    a3[1] = 0;
    v154 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8);
    WebCore::Document::ensureCachedCollection<(WebCore::CollectionType)4>((WebCore::Node *)v154, a2, &v156);
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v156 + 24))(v156, 0);
    if (v7)
    {
      v8 = v7;
      LODWORD(v9) = 0;
      while (1)
      {
        v10 = (WebCore::RenderObject *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL);
        if (!v10)
          break;
        if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          goto LABEL_272;
        v11 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
        if ((v11 & 1) != 0)
        {
          if (*(_BYTE *)(v154 + 3362) || *(_BYTE *)(v154 + 3405))
          {
            i = v154;
            v128 = *(_QWORD *)(v154 + 528);
            if (v128)
            {
              v129 = *(_QWORD *)(v128 + 8);
              i = v154;
              if (v129)
              {
                v130 = *(_QWORD *)(v129 + 120);
                i = v154;
                if (v130)
                {
                  v131 = *(_QWORD *)(v130 + 8);
                  for (i = v154; v131; v131 = *(_QWORD *)(v134 + 8))
                  {
                    i = *(_QWORD *)(*(_QWORD *)(v131 + 40) + 8);
                    v132 = *(_QWORD *)(i + 528);
                    if (!v132)
                      break;
                    v133 = *(_QWORD *)(v132 + 8);
                    if (!v133)
                      break;
                    v134 = *(_QWORD *)(v133 + 120);
                    if (!v134)
                      break;
                  }
                }
              }
            }
          }
          else
          {
            i = v154;
            v106 = *(_QWORD *)(v154 + 528);
            if (v106)
            {
              v107 = *(_QWORD *)(v106 + 8);
              i = v154;
              if (v107)
              {
                v108 = *(_QWORD *)(*(_QWORD *)(v107 + 128) + 8);
                v109 = v108 && *(_BYTE *)(v108 + 144) == 0;
                i = v154;
                if (v109)
                {
                  v110 = *(_QWORD *)(v108 + 296);
                  i = v154;
                  if (v110)
                    i = v110;
                }
              }
            }
          }
          *(_DWORD *)(i + 24) += 2;
          v158 = i;
          if (*(_QWORD *)(i + 1944))
            v111 = *(_BYTE *)(i + 3405) == 0;
          else
            v111 = 0;
          if (v111)
          {
            v12 = *(WebCore::AXObjectCache **)(i + 1488);
            if (!v12)
            {
              v112 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
              v157 = WebCore::AXObjectCache::AXObjectCache(v112, (WebCore::Document *)i);
              std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)(i + 1488), &v157);
              std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v157);
              WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
              v12 = *(WebCore::AXObjectCache **)(i + 1488);
            }
          }
          else
          {
            v12 = 0;
          }
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v158);
        }
        else
        {
          v12 = 0;
        }
        v13 = WebCore::AXObjectCache::getOrCreate(v12, v10);
        v14 = (_QWORD *)v13;
        if (!v13)
          goto LABEL_19;
        v15 = *(_QWORD *)(v13 + 8);
        if (__ldaxr((unsigned __int8 *)v15))
        {
          __clrex();
LABEL_13:
          MEMORY[0x19AEA534C](v15);
          goto LABEL_14;
        }
        if (__stxr(1u, (unsigned __int8 *)v15))
          goto LABEL_13;
LABEL_14:
        ++*(_QWORD *)(v15 + 8);
        v17 = __ldxr((unsigned __int8 *)v15);
        if (v17 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v15))
            goto LABEL_19;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_19:
        if (((*(uint64_t (**)(_QWORD *))(*v14 + 856))(v14) & 1) == 0
          && (*(unsigned int (**)(_QWORD *))(*v14 + 104))(v14))
        {
          v19 = *((unsigned int *)a3 + 3);
          if ((_DWORD)v19 == *((_DWORD *)a3 + 2))
          {
            v20 = v19 + (v19 >> 2);
            if (v20 >= 0x10)
              v21 = v20 + 1;
            else
              v21 = 16;
            if (v21 <= v19 + 1)
              v22 = v19 + 1;
            else
              v22 = v21;
            if (v22 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195628EA8);
            }
            v23 = (void *)*a3;
            v24 = (void *)WTF::fastMalloc((WTF *)(8 * v22));
            *((_DWORD *)a3 + 2) = v22;
            *a3 = (uint64_t)v24;
            memcpy(v24, v23, 8 * v19);
            if (v23)
            {
              if ((void *)*a3 == v23)
              {
                *a3 = 0;
                *((_DWORD *)a3 + 2) = 0;
              }
              WTF::fastFree((WTF *)v23, v18);
            }
            v25 = *((unsigned int *)a3 + 3);
            v26 = *a3;
            v27 = v14[1];
            if (__ldaxr((unsigned __int8 *)v27))
            {
              __clrex();
              goto LABEL_84;
            }
            if (__stxr(1u, (unsigned __int8 *)v27))
LABEL_84:
              MEMORY[0x19AEA534C](v27);
            ++*(_QWORD *)(v27 + 8);
            v66 = __ldxr((unsigned __int8 *)v27);
            if (v66 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v27))
              {
LABEL_90:
                v64 = (_QWORD *)(v26 + 8 * v25);
                goto LABEL_91;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v27);
            goto LABEL_90;
          }
          v61 = *a3;
          v62 = v14[1];
          if (__ldaxr((unsigned __int8 *)v62))
          {
            __clrex();
            goto LABEL_77;
          }
          if (__stxr(1u, (unsigned __int8 *)v62))
LABEL_77:
            MEMORY[0x19AEA534C](v62);
          v64 = (_QWORD *)(v61 + 8 * v19);
          ++*(_QWORD *)(v62 + 8);
          v65 = __ldxr((unsigned __int8 *)v62);
          if (v65 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v62))
              goto LABEL_91;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v62);
LABEL_91:
          *v64 = v14;
          ++*((_DWORD *)a3 + 3);
        }
        v67 = v14[1];
        if (__ldaxr((unsigned __int8 *)v67))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v67))
        {
          goto LABEL_96;
        }
        MEMORY[0x19AEA534C](v67);
LABEL_96:
        v69 = *(_QWORD *)(v67 + 8);
        v70 = v69 - 1;
        *(_QWORD *)(v67 + 8) = v69 - 1;
        if (v69 == 1)
        {
          v102 = *(_QWORD *)(v67 + 16);
          v71 = *(_QWORD *)(v67 + 24);
          *(_QWORD *)(v67 + 24) = 0;
          v72 = v102 != 0;
        }
        else
        {
          v71 = 0;
          v72 = 1;
        }
        v73 = __ldxr((unsigned __int8 *)v67);
        if (v73 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v67))
          {
            if (!v70)
              goto LABEL_104;
            goto LABEL_108;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v67);
        if (!v70)
        {
LABEL_104:
          if (v71)
            (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
          if (!v72)
            WTF::fastFree((WTF *)v67, v18);
        }
LABEL_108:
        v9 = (v9 + 1);
        v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v156 + 24))(v156, v9);
        if (!v8)
          goto LABEL_264;
      }
      v29 = *(_QWORD *)(v8 + 32);
      if (!v29
        || (*(_WORD *)(v29 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v29 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::mapTag + 24)
        || (*(_WORD *)(v8 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
      {
        goto LABEL_108;
      }
      v30 = (const WTF::AtomString *)(v29 + 112);
      v31 = *(_QWORD *)(v29 + 112);
      if (v31
        && *(_DWORD *)(v31 + 4)
        && (v77 = *(const WebCore::TreeScope **)(v29 + 40), (v78 = (unsigned int *)*((_QWORD *)v77 + 6)) != 0))
      {
        WebCore::TreeScopeOrderedMap::getElementByUsemap(v78, v30, v77, (uint64_t *)&v155);
        if (v155)
        {
          v79 = (WebCore::RenderObject *)(*((_QWORD *)v155 + 8) & 0xFFFFFFFFFFFFLL);
          if (v79)
          {
            if ((*(_BYTE *)((*((_QWORD *)v155 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195628EA0);
            }
            v80 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
            if ((v80 & 1) != 0)
            {
              if (*(_BYTE *)(v154 + 3362) || *(_BYTE *)(v154 + 3405))
              {
                j = v154;
                v143 = *(_QWORD *)(v154 + 528);
                if (v143)
                {
                  v144 = *(_QWORD *)(v143 + 8);
                  j = v154;
                  if (v144)
                  {
                    v145 = *(_QWORD *)(v144 + 120);
                    j = v154;
                    if (v145)
                    {
                      v146 = *(_QWORD *)(v145 + 8);
                      for (j = v154; v146; v146 = *(_QWORD *)(v149 + 8))
                      {
                        j = *(_QWORD *)(*(_QWORD *)(v146 + 40) + 8);
                        v147 = *(_QWORD *)(j + 528);
                        if (!v147)
                          break;
                        v148 = *(_QWORD *)(v147 + 8);
                        if (!v148)
                          break;
                        v149 = *(_QWORD *)(v148 + 120);
                        if (!v149)
                          break;
                      }
                    }
                  }
                }
              }
              else
              {
                j = v154;
                v122 = *(_QWORD *)(v154 + 528);
                if (v122)
                {
                  v123 = *(_QWORD *)(v122 + 8);
                  j = v154;
                  if (v123)
                  {
                    v124 = *(_QWORD *)(*(_QWORD *)(v123 + 128) + 8);
                    j = v154;
                    if (v124)
                    {
                      j = v154;
                      if (!*(_BYTE *)(v124 + 144))
                      {
                        v125 = *(_QWORD *)(v124 + 296);
                        j = v154;
                        if (v125)
                          j = v125;
                      }
                    }
                  }
                }
              }
              *(_DWORD *)(j + 24) += 2;
              v158 = j;
              if (*(_QWORD *)(j + 1944))
                v126 = *(_BYTE *)(j + 3405) == 0;
              else
                v126 = 0;
              if (v126)
              {
                v127 = *(WebCore::AXObjectCache **)(j + 1488);
                if (!v127)
                {
                  v135 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
                  v157 = WebCore::AXObjectCache::AXObjectCache(v135, (WebCore::Document *)j);
                  std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)(j + 1488), &v157);
                  std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v157);
                  WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
                  v127 = *(WebCore::AXObjectCache **)(j + 1488);
                }
              }
              else
              {
                v127 = 0;
              }
              WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v158);
              v81 = v127;
            }
            else
            {
              v81 = 0;
            }
            v82 = WebCore::AXObjectCache::getOrCreate(v81, v79);
            if (v82)
            {
              v83 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 1896))(v82, 1);
              v84 = *(unsigned int *)(v83 + 12);
              if ((_DWORD)v84)
              {
                v85 = *(_QWORD **)v83;
                v86 = *(_QWORD *)v83 + 8 * v84;
                while (1)
                {
                  v87 = *v85;
                  if (!*v85
                    || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v87 + 48))(*v85)
                    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v87 + 2792))(v87))
                  {
                    goto LABEL_153;
                  }
                  v88 = *((unsigned int *)a3 + 3);
                  if ((_DWORD)v88)
                  {
                    v89 = (_QWORD *)*a3;
                    v90 = *((unsigned int *)a3 + 3);
                    while (*v89 != *v85)
                    {
                      ++v89;
                      if (!--v90)
                        goto LABEL_129;
                    }
                    goto LABEL_153;
                  }
LABEL_129:
                  if ((_DWORD)v88 != *((_DWORD *)a3 + 2))
                  {
                    v151 = *a3;
                    v153 = *v85;
                    if (*v85)
                    {
                      v95 = *(_QWORD *)(v153 + 8);
                      if (__ldaxr((unsigned __int8 *)v95))
                      {
                        __clrex();
                        goto LABEL_145;
                      }
                      if (__stxr(1u, (unsigned __int8 *)v95))
LABEL_145:
                        MEMORY[0x19AEA534C](v95);
                      ++*(_QWORD *)(v95 + 8);
                      v98 = __ldxr((unsigned __int8 *)v95);
                      if (v98 == 1)
                      {
                        if (!__stlxr(0, (unsigned __int8 *)v95))
                          goto LABEL_151;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow((WTF::Lock *)v95);
                    }
LABEL_151:
                    *(_QWORD *)(v151 + 8 * v88) = v153;
                    goto LABEL_152;
                  }
                  v91 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v88 + 1, (unint64_t)v85);
                  v152 = *((unsigned int *)a3 + 3);
                  v150 = (char *)*a3;
                  v92 = *(_QWORD *)v91;
                  if (!*(_QWORD *)v91)
                    goto LABEL_143;
                  v93 = *(_QWORD *)(v92 + 8);
                  if (__ldaxr((unsigned __int8 *)v93))
                    break;
                  if (__stxr(1u, (unsigned __int8 *)v93))
                    goto LABEL_137;
LABEL_138:
                  ++*(_QWORD *)(v93 + 8);
                  v97 = __ldxr((unsigned __int8 *)v93);
                  if (v97 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v93))
                      goto LABEL_143;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v93);
LABEL_143:
                  *(_QWORD *)&v150[8 * v152] = v92;
LABEL_152:
                  ++*((_DWORD *)a3 + 3);
LABEL_153:
                  if (++v85 == (_QWORD *)v86)
                    goto LABEL_171;
                }
                __clrex();
LABEL_137:
                MEMORY[0x19AEA534C](v93);
                goto LABEL_138;
              }
LABEL_171:
              if (v155)
              {
                if (*((_DWORD *)v155 + 6) == 2)
                {
                  if ((*((_WORD *)v155 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v155, v42);
                }
                else
                {
                  *((_DWORD *)v155 + 6) -= 2;
                }
              }
              goto LABEL_108;
            }
LABEL_43:
            v33 = (uint64_t *)(*(uint64_t (**)(uint64_t, const WTF::AtomString *))(*(_QWORD *)v6 + 1488))(v6, v30);
            v34 = (WebCore::AccessibilityImageMapLink *)WebCore::AXObjectCache::create(v33, 51);
            WebCore::AccessibilityImageMapLink::setHTMLAreaElement(v34, (WebCore::HTMLAreaElement *)v8);
            v35 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v29);
            if (v35)
            {
              do
                v37 = __ldaxr(v35);
              while (__stlxr(v37 + 1, v35));
            }
            v38 = *((_QWORD *)v34 + 32);
            *((_QWORD *)v34 + 32) = v35;
            if (v38)
            {
              do
              {
                v39 = __ldaxr((unsigned int *)v38);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, (unsigned int *)v38));
              if (!v40)
              {
                atomic_store(1u, (unsigned int *)v38);
                v103 = *(unsigned int *)(v38 + 28);
                if ((_DWORD)v103)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v38 + 16), (WTF::StringImpl *)(*(_QWORD *)(v38 + 16) + 32 * v103));
                v104 = *(WTF **)(v38 + 16);
                if (v104)
                {
                  *(_QWORD *)(v38 + 16) = 0;
                  *(_DWORD *)(v38 + 24) = 0;
                  WTF::fastFree(v104, v36);
                }
                WTF::fastFree((WTF *)v38, v36);
              }
            }
            v41 = WebCore::AccessibilityRenderObject::associatedAXImage(v6, v29);
            if (v41)
            {
              v43 = v41;
              v41 = *(_QWORD *)(v41 + 32);
              if (v41)
                goto LABEL_278;
              v41 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v41 = 1;
              *(_QWORD *)(v41 + 8) = v43;
              v44 = *(unsigned int **)(v43 + 32);
              *(_QWORD *)(v43 + 32) = v41;
              if (!v44)
                goto LABEL_278;
              do
              {
                v45 = __ldaxr(v44);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, v44));
              if (!v46)
              {
                atomic_store(1u, v44);
                WTF::fastFree((WTF *)v44, v42);
              }
              v41 = *(_QWORD *)(v43 + 32);
              if (v41)
              {
LABEL_278:
                do
                  v47 = __ldaxr((unsigned int *)v41);
                while (__stlxr(v47 + 1, (unsigned int *)v41));
              }
            }
            v48 = (unsigned int *)*((_QWORD *)v34 + 30);
            *((_QWORD *)v34 + 30) = v41;
            if (v48)
            {
              do
              {
                v49 = __ldaxr(v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, v48));
              if (!v50)
              {
                atomic_store(1u, v48);
                WTF::fastFree((WTF *)v48, v42);
              }
            }
            v51 = *((unsigned int *)a3 + 3);
            if ((_DWORD)v51 == *((_DWORD *)a3 + 2))
            {
              v52 = v51 + (v51 >> 2);
              if (v52 >= 0x10)
                v53 = v52 + 1;
              else
                v53 = 16;
              if (v53 <= v51 + 1)
                v54 = v51 + 1;
              else
                v54 = v53;
              if (v54 >> 29)
              {
LABEL_272:
                __break(0xC471u);
                JUMPOUT(0x195628E80);
              }
              v55 = (char *)*a3;
              v56 = (void *)WTF::fastMalloc((WTF *)(8 * v54));
              *((_DWORD *)a3 + 2) = v54;
              *a3 = (uint64_t)v56;
              memcpy(v56, v55, 8 * v51);
              if (v55)
              {
                if ((char *)*a3 == v55)
                {
                  *a3 = 0;
                  *((_DWORD *)a3 + 2) = 0;
                }
                WTF::fastFree((WTF *)v55, v42);
              }
              v57 = *((unsigned int *)a3 + 3);
              v58 = (char *)*a3;
              v59 = *((_QWORD *)v34 + 1);
              if (__ldaxr((unsigned __int8 *)v59))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v59))
              {
                goto LABEL_164;
              }
              MEMORY[0x19AEA534C](v59);
LABEL_164:
              ++*(_QWORD *)(v59 + 8);
              v101 = __ldxr((unsigned __int8 *)v59);
              if (v101 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v59))
                  goto LABEL_169;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v59);
LABEL_169:
              v99 = &v58[8 * v57];
              goto LABEL_170;
            }
            v74 = (char *)*a3;
            v75 = *((_QWORD *)v34 + 1);
            if (__ldaxr((unsigned __int8 *)v75))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v75))
            {
LABEL_157:
              v99 = &v74[8 * v51];
              ++*(_QWORD *)(v75 + 8);
              v100 = __ldxr((unsigned __int8 *)v75);
              if (v100 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v75))
                  goto LABEL_170;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v75);
LABEL_170:
              *(_QWORD *)v99 = v34;
              ++*((_DWORD *)a3 + 3);
              goto LABEL_171;
            }
            MEMORY[0x19AEA534C](v75);
            goto LABEL_157;
          }
        }
      }
      else
      {
        v155 = 0;
      }
      v32 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
      if ((v32 & 1) != 0)
      {
        if (*(_BYTE *)(v154 + 3362) || *(_BYTE *)(v154 + 3405))
        {
          k = v154;
          v136 = *(_QWORD *)(v154 + 528);
          if (v136)
          {
            v137 = *(_QWORD *)(v136 + 8);
            k = v154;
            if (v137)
            {
              v138 = *(_QWORD *)(v137 + 120);
              k = v154;
              if (v138)
              {
                v139 = *(_QWORD *)(v138 + 8);
                for (k = v154; v139; v139 = *(_QWORD *)(v142 + 8))
                {
                  k = *(_QWORD *)(*(_QWORD *)(v139 + 40) + 8);
                  v140 = *(_QWORD *)(k + 528);
                  if (!v140)
                    break;
                  v141 = *(_QWORD *)(v140 + 8);
                  if (!v141)
                    break;
                  v142 = *(_QWORD *)(v141 + 120);
                  if (!v142)
                    break;
                }
              }
            }
          }
        }
        else
        {
          k = v154;
          v114 = *(_QWORD *)(v154 + 528);
          if (v114)
          {
            v115 = *(_QWORD *)(v114 + 8);
            k = v154;
            if (v115)
            {
              v116 = *(_QWORD *)(*(_QWORD *)(v115 + 128) + 8);
              v117 = v116 && *(_BYTE *)(v116 + 144) == 0;
              k = v154;
              if (v117)
              {
                v118 = *(_QWORD *)(v116 + 296);
                k = v154;
                if (v118)
                  k = v118;
              }
            }
          }
        }
        *(_DWORD *)(k + 24) += 2;
        v158 = k;
        if (*(_QWORD *)(k + 1944))
          v119 = *(_BYTE *)(k + 3405) == 0;
        else
          v119 = 0;
        if (v119 && !*(_QWORD *)(k + 1488))
        {
          v120 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
          v157 = WebCore::AXObjectCache::AXObjectCache(v120, (WebCore::Document *)k);
          std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100]((WebCore::AXObjectCache **)(k + 1488), &v157);
          std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v157);
          WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
        }
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v158);
      }
      goto LABEL_43;
    }
LABEL_264:
    this = v156;
    v156 = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      else
        --*(_DWORD *)(this + 16);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

WebCore::AccessibilityRenderObject *WebCore::AccessibilityRenderObject::documentFrameView(WebCore::AccessibilityRenderObject *this)
{
  WebCore::AccessibilityRenderObject *v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::AccessibilityRenderObject *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v1 = this;
  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      return *(WebCore::AccessibilityRenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8)
                                                                                        + 40)
                                                                            + 8)
                                                                + 1944)
                                                    + 248);
  }
  v5 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
  if (v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 528);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
      return *(WebCore::AccessibilityRenderObject **)(v7 + 288);
    else
      return 0;
  }
  else
  {
    while (1)
    {
      v8 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)v1 + 56))(v1);
      v9 = *(_QWORD *)v1;
      if ((v8 & 1) != 0)
        break;
      result = (WebCore::AccessibilityRenderObject *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(v9 + 1232))(v1);
      v1 = result;
      if (!result)
        return result;
    }
    return (WebCore::AccessibilityRenderObject *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(v9 + 1720))(v1);
  }
}

uint64_t WebCore::AccessibilityRenderObject::widgetForAttachmentView(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v2;

  if (!(*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 128))(this))
    return 0;
  v2 = *((_QWORD *)this + 31);
  if (v2)
    v2 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 52) & 7) != 3 || (*(_BYTE *)(v2 + 53) & 4) == 0)
    return 0;
  else
    return *(_QWORD *)(v2 + 232);
}

uint64_t WebCore::AccessibilityRenderObject::visiblePositionForIndex@<X0>(WebCore::AccessibilityRenderObject *this@<X0>, WebCore::Node *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  WebCore::HTMLTextFormControlElement *v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  void *v13;
  WTF::StringImpl *v14;

  v6 = *((_QWORD *)this + 31);
  if (v6
    && *(_QWORD *)(v6 + 8)
    && (*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 120))(this))
  {
    v7 = *(WebCore::HTMLTextFormControlElement **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 24) + 8);
    if ((*((_WORD *)v7 + 14) & 8) != 0
      && ((*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)v7 + 872))(v7) & 1) != 0)
    {
      result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, WebCore::HTMLTextFormControlElement *))(*(_QWORD *)v7 + 1392))(&v14, v7);
      v9 = (int)v14;
      if (!v14 || (v9 = *((_DWORD *)v14 + 1), (v9 & 0x80000000) == 0))
      {
        if (v9 >= (int)a2)
          v9 = (int)a2;
        if ((int)a2 >= 0)
          v10 = v9;
        else
          v10 = 0;
        WebCore::HTMLTextFormControlElement::visiblePositionForIndex(v7, v10, (uint64_t)a3);
        result = (uint64_t)v14;
        v14 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
      }
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
    __break(1u);
    return result;
  }
  result = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
  if (result)
  {
    v12 = result;
    *(_DWORD *)(result + 24) += 2;
    result = (uint64_t)WebCore::visiblePositionForIndexUsingCharacterIterator((WebCore *)result, a2, (uint64_t)a3);
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, v13);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  else
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 16) = 1;
  }
  return result;
}

WebCore::Node *WebCore::Position::rootEditableElement(WebCore::Position *this)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  WebCore::Node *v4;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v2 = *((_BYTE *)this + 12) & 7;
  if (v2 > 4)
    return 0;
  if (((1 << v2) & 0x19) == 0)
  {
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1)
      return 0;
  }
  *(_DWORD *)(v1 + 24) += 2;
  v4 = WebCore::Node::rootEditableElement((WebCore::Node *)v1);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return v4;
}

void WebCore::AccessibilityRenderObject::setSelectedVisiblePositionRange(_QWORD *a1, _QWORD *a2)
{
  const WebCore::VisiblePosition *v2;
  BOOL v3;
  const WebCore::VisiblePosition *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Document *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  WebCore::HTMLTextFormControlElement *v28;
  unsigned int v29;
  WebCore::AXObjectCache *v30;
  void *v31;
  unsigned int v32;
  WebCore::AXObjectCache *v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  WebCore::Node *v40;
  void *v41;
  unsigned __int8 v42;
  void *v43;
  unsigned __int8 v44;
  WTF::StringImpl *v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  void *v51;
  int v52;
  uint64_t v53;
  WebCore::Node *v54;
  WebCore::Node *v55;
  void *v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  WebCore::Node *v59;
  unsigned int v60;
  WTF::StringImpl *v61;
  WebCore::Node *v62;
  void *v63;
  const WebCore::VisiblePosition *v64;
  WebCore::Node *v65;
  WTF::StringImpl *v66;
  WebCore::Node *v67;
  WebCore::Node *v68;
  WTF::StringImpl *v69;
  const WebCore::VisiblePosition *v70;
  WTF::StringImpl *v71;
  unsigned __int8 v72;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WebCore::Node *v76;
  WebCore::Node *v77;
  WebCore::Node *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  WebCore::Node *v82;
  WebCore::Node *v83;
  WebCore::Editor *v84;
  void *v85;
  WebCore::Editor *v86;
  uint64_t v87;
  void *v88;
  WebCore::Node *v89;
  WebCore::Node *v90;
  WebCore::Node **v91;
  unsigned int v92;
  WebCore::Node *v93;
  int v94;
  char v95;
  WebCore::Node *v96;
  int v97;
  WTF::StringImpl *v98;
  int v99;
  char v100;
  WebCore::Node *v101;
  int v102;
  char v103;
  WebCore::Node *v104;
  int v105;
  char v106;
  WebCore::Node *v107;
  WebCore::Node *v108;
  char v109;
  WebCore::Node *v110;
  WebCore::Node *v111;
  uint64_t v112;
  WebCore::Node *v113;
  WebCore::Node *v114;
  uint64_t v115;
  char v116;

  v2 = (const WebCore::VisiblePosition *)(a2 + 3);
  if (*a2)
    v3 = a2[3] == 0;
  else
    v3 = 1;
  if (v3)
    return;
  v4 = (const WebCore::VisiblePosition *)a2;
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 1456))(a1) != 138
    || !(*(uint64_t (**)(_QWORD *))(*a1 + 1232))(a1))
  {
    goto LABEL_31;
  }
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 1232))(a1);
  v7 = !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 128))(v6) || *(_QWORD *)v4 == 0;
  if (v7 || *((_QWORD *)v4 + 3) == 0)
    goto LABEL_31;
  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v111, v4, v2, 0);
  if (!v115)
    goto LABEL_30;
  v9 = *(_QWORD *)(*(_QWORD *)(v115 + 40) + 8);
  if (!v9)
    goto LABEL_30;
  v10 = *(_QWORD *)(v9 + 528);
  if (!v10)
    goto LABEL_30;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    goto LABEL_30;
  v12 = v11 + 8;
  do
    v13 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v13 + 1, (unsigned int *)v12));
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 840))(a1);
  if (!v14
    || (v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 8) + 528)) == 0
    || (v16 = *(_QWORD *)(v15 + 8)) == 0
    || v11 != v16 && v9 != *(_QWORD *)(v16 + 296))
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v12);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v12));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v12);
      v82 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v82 = off_1E31FE290;
      *((_QWORD *)v82 + 1) = v12;
      v104 = v82;
      WTF::ensureOnMainThread();
      v83 = v104;
      v104 = 0;
      if (v83)
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v83 + 8))(v83);
    }
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v111);
    return;
  }
  do
  {
    v19 = __ldaxr((unsigned int *)v12);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)v12));
  if (!v20)
    goto LABEL_231;
  while (1)
  {
LABEL_30:
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v111);
    v21 = a1[31];
    if (!v21)
      goto LABEL_37;
    v22 = *(_QWORD *)(v21 + 8);
    if (!v22)
      goto LABEL_37;
LABEL_31:
    v23 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 24) + 8) + 40) + 8);
    v24 = *((_QWORD *)v23 + 382);
    if (!v24)
    {
      v84 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v84, v23);
      v86 = (WebCore::Editor *)*((_QWORD *)v23 + 382);
      *((_QWORD *)v23 + 382) = v84;
      if (v86)
      {
        WebCore::Editor::~Editor(v86, v85);
        if (*(_DWORD *)v87)
        {
          *(_QWORD *)(v87 + 496) = 0;
          *(_OWORD *)(v87 + 464) = 0u;
          *(_OWORD *)(v87 + 480) = 0u;
          *(_OWORD *)(v87 + 432) = 0u;
          *(_OWORD *)(v87 + 448) = 0u;
          *(_OWORD *)(v87 + 400) = 0u;
          *(_OWORD *)(v87 + 416) = 0u;
          *(_OWORD *)(v87 + 368) = 0u;
          *(_OWORD *)(v87 + 384) = 0u;
          *(_OWORD *)(v87 + 336) = 0u;
          *(_OWORD *)(v87 + 352) = 0u;
          *(_OWORD *)(v87 + 304) = 0u;
          *(_OWORD *)(v87 + 320) = 0u;
          *(_OWORD *)(v87 + 272) = 0u;
          *(_OWORD *)(v87 + 288) = 0u;
          *(_OWORD *)(v87 + 240) = 0u;
          *(_OWORD *)(v87 + 256) = 0u;
          *(_OWORD *)(v87 + 208) = 0u;
          *(_OWORD *)(v87 + 224) = 0u;
          *(_OWORD *)(v87 + 176) = 0u;
          *(_OWORD *)(v87 + 192) = 0u;
          *(_OWORD *)(v87 + 144) = 0u;
          *(_OWORD *)(v87 + 160) = 0u;
          *(_OWORD *)(v87 + 112) = 0u;
          *(_OWORD *)(v87 + 128) = 0u;
          *(_OWORD *)(v87 + 80) = 0u;
          *(_OWORD *)(v87 + 96) = 0u;
          *(_OWORD *)(v87 + 48) = 0u;
          *(_OWORD *)(v87 + 64) = 0u;
          *(_OWORD *)(v87 + 16) = 0u;
          *(_OWORD *)(v87 + 32) = 0u;
          *(_OWORD *)v87 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v87, v88);
        }
      }
      v24 = *((_QWORD *)v23 + 382);
    }
    v25 = *(_QWORD *)(v24 + 8);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 664))(v26);
        v12 = 0;
        goto LABEL_39;
      }
    }
    else
    {
LABEL_37:
      v26 = 0;
    }
    v12 = 1;
LABEL_39:
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 120))(a1))
    {
      v27 = v12;
      v28 = (WebCore::HTMLTextFormControlElement *)(*(uint64_t (**)(_QWORD *))(*a1 + 840))(a1);
      v29 = WebCore::HTMLTextFormControlElement::indexForVisiblePosition(v28, v4);
      v30 = v28;
      v32 = WebCore::HTMLTextFormControlElement::indexForVisiblePosition(v28, v2);
      v33 = *(WebCore::AXObjectCache **)v4;
      if (*(_QWORD *)v4)
        *((_DWORD *)v33 + 6) += 2;
      v91 = (WebCore::Node **)v2;
      v34 = *(_QWORD *)v2;
      if (v34)
        *(_DWORD *)(v34 + 24) += 2;
      v92 = v29;
      if (v33 == (WebCore::AXObjectCache *)v34)
      {
        if (v33)
        {
          v52 = *((_DWORD *)v33 + 6);
          *((_DWORD *)v33 + 6) = v52 + 2;
          if (v52)
          {
            *((_DWORD *)v33 + 6) = v52;
          }
          else if ((*((_WORD *)v33 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v33, v31);
          }
        }
        v35 = v26;
        v36 = v33 == v30;
        if (!v34)
          goto LABEL_95;
      }
      else
      {
        v35 = v26;
        v36 = 0;
        if (!v34)
        {
LABEL_95:
          v53 = (uint64_t)v30;
          if (v33)
          {
            if (*((_DWORD *)v33 + 6) == 2)
            {
              if ((*((_WORD *)v33 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v33, v31);
            }
            else
            {
              *((_DWORD *)v33 + 6) -= 2;
            }
          }
          if (v36
            && ((*(void (**)(WebCore::Node **__return_ptr, WebCore::AXObjectCache *))(*(_QWORD *)v30 + 1408))(&v110, v30), v110))
          {
            WebCore::AXObjectCache::rangeForNodeContents(v30, v54, (uint64_t)&v98);
            v104 = v98;
            v105 = v99;
            v55 = v101;
            v98 = 0;
            v101 = 0;
            v107 = v55;
            LODWORD(v108) = v102;
            v109 = 1;
            WebCore::makeVisiblePositionRange((unsigned int *)&v104, (uint64_t)&v111);
            if (v109)
            {
              v57 = v107;
              v107 = 0;
              if (v57)
              {
                if (*((_DWORD *)v57 + 6) == 2)
                {
                  if ((*((_WORD *)v57 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v57, v56);
                }
                else
                {
                  *((_DWORD *)v57 + 6) -= 2;
                }
              }
              v58 = v104;
              v104 = 0;
              if (v58)
              {
                if (*((_DWORD *)v58 + 6) == 2)
                {
                  if ((*((_WORD *)v58 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v58, v56);
                }
                else
                {
                  *((_DWORD *)v58 + 6) -= 2;
                }
              }
            }
            v59 = v101;
            v101 = 0;
            LOBYTE(v12) = v27;
            v26 = v35;
            v60 = v92;
            if (v59)
            {
              if (*((_DWORD *)v59 + 6) == 2)
              {
                if ((*((_WORD *)v59 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v59, v56);
              }
              else
              {
                *((_DWORD *)v59 + 6) -= 2;
              }
            }
            v61 = v98;
            v98 = 0;
            if (v61)
            {
              if (*((_DWORD *)v61 + 6) == 2)
              {
                if ((*((_WORD *)v61 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v61, v56);
              }
              else
              {
                *((_DWORD *)v61 + 6) -= 2;
              }
            }
            WebCore::AXObjectCache::rangeForNodeContents(v110, (WebCore::Node *)v56, (uint64_t)&v93);
            v98 = v93;
            v99 = v94;
            v62 = v96;
            v93 = 0;
            v96 = 0;
            v101 = v62;
            v102 = v97;
            v103 = 1;
            WebCore::makeVisiblePositionRange((unsigned int *)&v98, (uint64_t)&v104);
            if (v103)
            {
              v65 = v101;
              v101 = 0;
              if (v65)
              {
                if (*((_DWORD *)v65 + 6) == 2)
                {
                  if ((*((_WORD *)v65 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v65, v63);
                }
                else
                {
                  *((_DWORD *)v65 + 6) -= 2;
                }
              }
              v66 = v98;
              v98 = 0;
              if (v66)
              {
                if (*((_DWORD *)v66 + 6) == 2)
                {
                  if ((*((_WORD *)v66 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v66, v63);
                }
                else
                {
                  *((_DWORD *)v66 + 6) -= 2;
                }
              }
            }
            v67 = v96;
            v96 = 0;
            if (v67)
            {
              if (*((_DWORD *)v67 + 6) == 2)
              {
                if ((*((_WORD *)v67 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v67, v63);
              }
              else
              {
                *((_DWORD *)v67 + 6) -= 2;
              }
            }
            v68 = v93;
            v93 = 0;
            if (v68)
            {
              if (*((_DWORD *)v68 + 6) == 2)
              {
                if ((*((_WORD *)v68 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v68, v63);
              }
              else
              {
                *((_DWORD *)v68 + 6) -= 2;
              }
            }
            if ((*((_BYTE *)v4 + 16) == 0) == (v116 != 0)
              || !WebCore::Position::equals(v4, (const WebCore::Position *)&v114))
            {
              v72 = WebCore::documentOrder((WebCore::Node **)v4, &v104, v64);
              if ((char)v72 < 1 && v72 != 129)
                v60 = 0;
            }
            else
            {
              (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v53 + 1392))(&v98, v53);
              v71 = v98;
              if (v98)
              {
                v60 = *((_DWORD *)v98 + 1);
                v98 = 0;
                if (*(_DWORD *)v71 == 2)
                  WTF::StringImpl::destroy(v71, v69);
                else
                  *(_DWORD *)v71 -= 2;
              }
              else
              {
                v60 = 0;
              }
            }
            if ((WebCore::documentOrder(v91, &v108, v70) & 0x80) == 0
              || (*((_BYTE *)v4 + 40) == 0) != (v116 != 0)
              && WebCore::Position::equals((WebCore::Position *)v91, (const WebCore::Position *)&v114))
            {
              (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v53 + 1392))(&v98, v53);
              v75 = v98;
              if (v98)
              {
                v32 = *((_DWORD *)v98 + 1);
                v98 = 0;
                if (*(_DWORD *)v75 == 2)
                  WTF::StringImpl::destroy(v75, v74);
                else
                  *(_DWORD *)v75 -= 2;
              }
              else
              {
                v32 = 0;
              }
            }
            if (v108)
            {
              if (*((_DWORD *)v108 + 6) == 2)
              {
                if ((*((_WORD *)v108 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v108, v74);
              }
              else
              {
                *((_DWORD *)v108 + 6) -= 2;
              }
            }
            if (v104)
            {
              if (*((_DWORD *)v104 + 6) == 2)
              {
                if ((*((_WORD *)v104 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v104, v74);
              }
              else
              {
                *((_DWORD *)v104 + 6) -= 2;
              }
            }
            v76 = v114;
            v114 = 0;
            if (v76)
            {
              if (*((_DWORD *)v76 + 6) == 2)
              {
                if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v76, v74);
              }
              else
              {
                *((_DWORD *)v76 + 6) -= 2;
              }
            }
            v77 = v111;
            v111 = 0;
            if (v77)
            {
              if (*((_DWORD *)v77 + 6) == 2)
              {
                if ((*((_WORD *)v77 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v77, v74);
              }
              else
              {
                *((_DWORD *)v77 + 6) -= 2;
              }
            }
            v78 = v110;
            v110 = 0;
            if (v78)
            {
              if (*((_DWORD *)v78 + 6) == 2)
              {
                if ((*((_WORD *)v78 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v78, v74);
              }
              else
              {
                *((_DWORD *)v78 + 6) -= 2;
              }
            }
          }
          else
          {
            LOBYTE(v12) = v27;
            v26 = v35;
            v60 = v92;
          }
          v79 = (*(uint64_t (**)(_QWORD *))(*a1 + 1488))(a1);
          if (v79)
          {
            if (v60 == v32)
              v80 = 2;
            else
              v80 = 3;
            *(_DWORD *)(v79 + 424) = v80;
            *(_QWORD *)(v79 + 428) = 5;
            *(_DWORD *)(v79 + 436) = 0;
            *(_BYTE *)(v79 + 736) = 1;
          }
          v111 = 0;
          v112 = 0;
          WebCore::HTMLTextFormControlElement::setSelectionRange(v53, v60, v32, 0, 3, (uint64_t *)&v111, 0);
          goto LABEL_173;
        }
      }
      if (*(_DWORD *)(v34 + 24) == 2)
      {
        if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v34, v31);
      }
      else
      {
        *(_DWORD *)(v34 + 24) -= 2;
      }
      goto LABEL_95;
    }
    v37 = a1[31];
    if (!v37 || !*(_QWORD *)(v37 + 8))
      goto LABEL_173;
    v38 = WebCore::operator==((uint64_t *)v4, (uint64_t *)v2);
    v39 = (*(uint64_t (**)(_QWORD *))(*a1 + 1488))(a1);
    if (!v38)
    {
      if (v39)
      {
        *(_DWORD *)(v39 + 424) = 3;
        *(_QWORD *)(v39 + 428) = 5;
        *(_DWORD *)(v39 + 436) = 0;
        *(_BYTE *)(v39 + 736) = 1;
      }
      WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v111, v4, v2, 0);
      WebCore::FrameSelection::setSelection(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[31] + 8) + 24)+ 8)+ 40)+ 8)+ 528)+ 8)+ 296)+ 3064), (uint64_t)&v111, 0xC7u, 0, 0, 0, 0);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v111);
      goto LABEL_173;
    }
    if (v39)
    {
      *(_DWORD *)(v39 + 424) = 2;
      *(_QWORD *)(v39 + 428) = 5;
      *(_DWORD *)(v39 + 436) = 0;
      *(_BYTE *)(v39 + 736) = 1;
    }
    v40 = *(WebCore::Node **)v4;
    if (*(_QWORD *)v4)
      *((_DWORD *)v40 + 6) += 2;
    v104 = v40;
    v105 = *((_DWORD *)v4 + 2);
    v106 = *((_BYTE *)v4 + 12);
    LOBYTE(v107) = *((_BYTE *)v4 + 16);
    (*(void (**)(WebCore::Node **__return_ptr, _QWORD *))(*a1 + 1960))(&v111, a1);
    if (!(_BYTE)v115)
      goto LABEL_86;
    if (v40)
    {
      *((_DWORD *)v40 + 6) += 2;
      v93 = v40;
      v94 = v105;
      v95 = v106;
      WebCore::makeBoundaryPoint((uint64_t *)&v93, (uint64_t)&v98);
      if (*((_DWORD *)v40 + 6) == 2)
      {
        if ((*((_WORD *)v40 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v40, v41);
      }
      else
      {
        *((_DWORD *)v40 + 6) -= 2;
      }
    }
    else
    {
      v93 = 0;
      v94 = v105;
      v95 = v106;
      WebCore::makeBoundaryPoint((uint64_t *)&v93, (uint64_t)&v98);
    }
    if ((_BYTE)v101)
    {
      v42 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v111, (uint64_t)&v98);
      v4 = 0;
      if (v42 != 129 && (char)v42 <= 0)
      {
        v44 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v98, (uint64_t)&v113);
        v4 = (const WebCore::VisiblePosition *)(v44 != 129 && (char)v44 < 1);
      }
      if ((_BYTE)v101)
      {
        v46 = v98;
        v98 = 0;
        if (v46)
        {
          if (*((_DWORD *)v46 + 6) == 2)
          {
            if ((*((_WORD *)v46 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v46, v43);
          }
          else
          {
            *((_DWORD *)v46 + 6) -= 2;
          }
        }
      }
      if ((v4 & 1) != 0)
        goto LABEL_79;
    }
    if ((_BYTE)v115)
      break;
    __break(1u);
LABEL_231:
    atomic_store(1u, (unsigned int *)v12);
    v89 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v89 = off_1E31FE290;
    *((_QWORD *)v89 + 1) = v12;
    v104 = v89;
    WTF::ensureOnMainThread();
    v90 = v104;
    v104 = 0;
    if (v90)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v90 + 8))(v90);
  }
  v47 = v111;
  *((_DWORD *)v111 + 6) += 2;
  v93 = v47;
  v94 = v112;
  v95 &= 0xF0u;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v93, (uint64_t)&v98);
  LOBYTE(v101) = 1;
  v48 = v98;
  v98 = 0;
  v104 = v48;
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v40, v43);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
  v105 = v99;
  v106 = v100;
  LOBYTE(v107) = 1;
  if (*((_DWORD *)v47 + 6) == 2)
  {
    if ((*((_WORD *)v47 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v47, v43);
  }
  else
  {
    *((_DWORD *)v47 + 6) -= 2;
  }
  v40 = v48;
LABEL_79:
  if ((_BYTE)v115)
  {
    v49 = v113;
    v113 = 0;
    if (v49)
    {
      if (*((_DWORD *)v49 + 6) == 2)
      {
        if ((*((_WORD *)v49 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v49, v43);
      }
      else
      {
        *((_DWORD *)v49 + 6) -= 2;
      }
    }
    v50 = v111;
    v111 = 0;
    if (v50)
    {
      if (*((_DWORD *)v50 + 6) == 2)
      {
        if ((*((_WORD *)v50 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v50, v43);
      }
      else
      {
        *((_DWORD *)v50 + 6) -= 2;
      }
    }
  }
LABEL_86:
  WebCore::FrameSelection::moveTo(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[31] + 8)+ 24)+ 8)+ 40)+ 8)+ 528)+ 8)+ 296)+ 3064), (uint64_t *)&v104, 1, 0);
  v104 = 0;
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v40, v51);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
LABEL_173:
  v81 = (*(uint64_t (**)(_QWORD *))(*a1 + 1488))(a1);
  if (v81)
  {
    *(_QWORD *)(v81 + 424) = 0;
    *(_QWORD *)(v81 + 432) = 0;
    *(_BYTE *)(v81 + 736) = 0;
  }
  if ((v12 & 1) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 672))(v26);
}

WTF::StringImpl *WebCore::AccessibilityRenderObject::visiblePositionForIndex@<X0>(WebCore::AccessibilityRenderObject *this@<X0>, WebCore::Node *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  WTF::StringImpl *v15;

  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this);
  if ((((_DWORD)result - 101) > 0x19 || ((1 << ((_BYTE)result - 101)) & 0x3000001) == 0)
    && (_DWORD)result != 19)
  {
    goto LABEL_22;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1400))(&v15, this);
  result = v15;
  if (!v15
    || ((v12 = *((_DWORD *)v15 + 1), v15 = 0, *(_DWORD *)result == 2)
      ? (result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11))
      : (WTF::StringImpl *)(*(_DWORD *)result -= 2),
        v12 <= a2))
  {
    if (a3)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1400))(&v15, this);
      result = v15;
      if (v15)
      {
        v14 = *((_DWORD *)v15 + 1);
        v15 = 0;
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        else
          *(_DWORD *)result -= 2;
        if (v14 < a2)
          goto LABEL_22;
        goto LABEL_18;
      }
      if (!(_DWORD)a2)
        goto LABEL_18;
    }
LABEL_22:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_23;
  }
LABEL_18:
  result = (WTF::StringImpl *)WebCore::AccessibilityRenderObject::visiblePositionForIndex(this, a2, a4);
LABEL_23:
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

uint64_t WebCore::AccessibilityRenderObject::index(WebCore::AccessibilityRenderObject *this, VisiblePosition *a2)
{
  int v4;
  const WebCore::Position *v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  Node *var0;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  WebCore::Node *v15;
  uint64_t v16;
  WebCore::HTMLTextFormControlElement *v17;
  uint64_t v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  void *v21;
  uint64_t result;
  WebCore::Node *v23;
  unsigned int var1;
  char v25;

  if (!a2->var0.var0.var0)
    return 0xFFFFFFFFLL;
  v4 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this);
  v6 = (v4 - 101) > 0x19 || ((1 << (v4 - 101)) & 0x3000001) == 0;
  if (v6 && v4 != 19)
    return 0xFFFFFFFFLL;
  v8 = *((_QWORD *)this + 31);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  var0 = a2->var0.var0.var0;
  if (a2->var0.var0.var0)
    *((_DWORD *)var0 + 6) += 2;
  v23 = (WebCore::Node *)var0;
  var1 = a2->var0.var1;
  v25 = *((_BYTE *)&a2->var0 + 12);
  v11 = WebCore::rendererFromPosition((WebCore *)&v23, v5);
  if (v11)
  {
    while ((*(_BYTE *)(v11 + 45) & 1) == 0 && *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8))
    {
      if (v11 == v9)
      {
        v14 = 1;
        goto LABEL_22;
      }
      v13 = *(_QWORD *)(v11 + 32);
      if (v13)
      {
        v11 = *(_QWORD *)(v13 + 8);
        if (v11)
          continue;
      }
      break;
    }
  }
  v14 = 0;
LABEL_22:
  v15 = v23;
  v23 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, v12);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  if (!v14)
    return 0xFFFFFFFFLL;
  v16 = *((_QWORD *)this + 31);
  if (!v16
    || !*(_QWORD *)(v16 + 8)
    || !(*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 120))(this))
  {
    v19 = (WebCore::Node *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
    if (!v19)
      return 0;
    v20 = v19;
    *((_DWORD *)v19 + 6) += 2;
    v18 = WebCore::indexForVisiblePosition(v19, a2, 0);
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20, v21);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
    return v18;
  }
  v17 = *(WebCore::HTMLTextFormControlElement **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 24) + 8);
  if ((*((_WORD *)v17 + 14) & 8) != 0
    && ((*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)v17 + 872))(v17) & 1) != 0)
  {
    return WebCore::HTMLTextFormControlElement::indexForVisiblePosition(v17, (const WebCore::VisiblePosition *)a2);
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::AccessibilityRenderObject::doAXRangeForLine(WebCore::AccessibilityRenderObject *this, int a2)
{
  int v4;
  void *v7;
  _BOOL4 v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  uint64_t v11;
  WebCore::HTMLTextFormControlElement *v12;
  unsigned int v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  void *v16;
  uint64_t v17;
  WebCore::HTMLTextFormControlElement *v18;
  int v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  uint64_t (*v22)();
  _BOOL4 v23;
  WebCore::Node *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  WebCore::Node *v40[3];
  WebCore::Node *v41;
  int v42;
  char v43;
  char v44;
  WebCore::Node *v45;
  int v46;
  char v47;
  char v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  _QWORD v52[2];
  uint64_t v53;
  char v54;
  _QWORD v55[3];

  v4 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this);
  if (((v4 - 101) > 0x19 || ((1 << (v4 - 101)) & 0x3000001) == 0) && v4 != 19)
    return 0;
  WebCore::AccessibilityRenderObject::visiblePositionForIndex(this, 0, &v41);
  if (a2)
  {
    while (1)
    {
      WebCore::nextLinePosition((uint64_t)&v41, 0, 0, &v45);
      if (!v45)
        break;
      v8 = WebCore::operator==((uint64_t *)&v45, (uint64_t *)&v41);
      v9 = v45;
      if (v8)
      {
        v45 = 0;
        if (v9)
        {
          if (*((_DWORD *)v9 + 6) == 2)
          {
            if ((*((_WORD *)v9 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v9, v7);
          }
          else
          {
            *((_DWORD *)v9 + 6) -= 2;
          }
        }
        break;
      }
      if (v45)
        *((_DWORD *)v45 + 6) += 2;
      v10 = v41;
      v41 = v9;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v10, v7);
            v9 = v45;
          }
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
      v42 = v46;
      v43 = v47;
      v44 = v48;
      v45 = 0;
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9, v7);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
      }
      if (!--a2)
        goto LABEL_26;
    }
    v32 = 0;
    goto LABEL_105;
  }
LABEL_26:
  WebCore::endOfLine((uint64_t *)v40, (uint64_t)&v41, 1, 0);
  v11 = *((_QWORD *)this + 31);
  if (v11
    && *(_QWORD *)(v11 + 8)
    && (*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 120))(this))
  {
    v12 = *(WebCore::HTMLTextFormControlElement **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 24) + 8);
    if ((*((_WORD *)v12 + 14) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 872))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8)
                                                                                             + 24)
                                                                                 + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19562A63CLL);
    }
    v13 = WebCore::HTMLTextFormControlElement::indexForVisiblePosition(v12, (const WebCore::VisiblePosition *)&v41);
  }
  else
  {
    v14 = (WebCore::Node *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
    if (v14)
    {
      v15 = v14;
      *((_DWORD *)v14 + 6) += 2;
      v13 = WebCore::indexForVisiblePosition(v14, &v41, 0);
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v16);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    else
    {
      v13 = 0;
    }
  }
  v17 = *((_QWORD *)this + 31);
  if (v17
    && *(_QWORD *)(v17 + 8)
    && (*(unsigned int (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 120))(this))
  {
    v18 = *(WebCore::HTMLTextFormControlElement **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 24) + 8);
    if ((*((_WORD *)v18 + 14) & 8) == 0
      || ((*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)v18 + 872))(v18) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19562A65CLL);
    }
    v19 = WebCore::HTMLTextFormControlElement::indexForVisiblePosition(v18, (const WebCore::VisiblePosition *)v40);
  }
  else
  {
    v20 = (WebCore::Node *)(*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 840))(this);
    if (v20)
    {
      v21 = v20;
      *((_DWORD *)v20 + 6) += 2;
      v19 = WebCore::indexForVisiblePosition(v20, v40, 0);
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21, v7);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    else
    {
      v19 = 0;
    }
  }
  if (v40[0])
    v22 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v22 = 0;
  if (v22)
  {
    WebCore::endOfLine((uint64_t *)&v45, (uint64_t)v40, 1, 0);
    v23 = WebCore::operator==((uint64_t *)v40, (uint64_t *)&v45);
    v24 = v45;
    v45 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v24, v7);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
    if (v23)
    {
      WebCore::VisiblePosition::next((unsigned __int8 *)v40, 0, 0, (uint64_t)v55);
      WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)v40, (uint64_t)v55, (uint64_t)v52);
      if (!v54)
      {
        v33 = 0;
LABEL_95:
        v36 = v55[0];
        v55[0] = 0;
        if (v36)
        {
          if (*(_DWORD *)(v36 + 24) == 2)
          {
            if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v36, v7);
          }
          else
          {
            *(_DWORD *)(v36 + 24) -= 2;
          }
        }
        v19 += v33;
        goto LABEL_99;
      }
      WebCore::TextIterator::TextIterator((uint64_t)&v45, v52, 0);
      if (!v49)
        goto LABEL_87;
      v26 = WebCore::TextIterator::node((int32x2_t *)&v45);
      if (v26
        && (*(_WORD *)(v26 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v26 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
      {
        v33 = 1;
        goto LABEL_88;
      }
      v27 = WebCore::TextIterator::node((int32x2_t *)&v45);
      v28 = (WebCore::Node *)v27;
      v29 = v40[0];
      if (v40[0])
      {
        v30 = *((_DWORD *)v40[0] + 6);
        *((_DWORD *)v40[0] + 6) = v30 + 2;
        if (v30)
        {
          *((_DWORD *)v29 + 6) = v30;
        }
        else if ((*((_WORD *)v29 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v29, v25);
        }
        if (v28 != v29)
          goto LABEL_87;
      }
      else if (v27)
      {
        goto LABEL_87;
      }
      if ((_DWORD)v51 == 1)
      {
        if ((v51 & 0xFF00000000) != 0)
          v31 = *v50;
        else
          v31 = *(unsigned __int16 *)v50;
        v33 = v31 == 10;
LABEL_88:
        WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)&v45, v25);
        if (v54)
        {
          v34 = v53;
          v53 = 0;
          if (v34)
          {
            if (*(_DWORD *)(v34 + 24) == 2)
            {
              if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v34, v7);
            }
            else
            {
              *(_DWORD *)(v34 + 24) -= 2;
            }
          }
          v35 = v52[0];
          v52[0] = 0;
          if (v35)
          {
            if (*(_DWORD *)(v35 + 24) == 2)
            {
              if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v35, v7);
            }
            else
            {
              *(_DWORD *)(v35 + 24) -= 2;
            }
          }
        }
        goto LABEL_95;
      }
LABEL_87:
      v33 = 0;
      goto LABEL_88;
    }
  }
LABEL_99:
  if (((v13 | v19) & 0x80000000) == 0 && v19 > (int)v13)
    v32 = v13;
  else
    v32 = 0;
  v37 = v40[0];
  v40[0] = 0;
  if (v37)
  {
    if (*((_DWORD *)v37 + 6) == 2)
    {
      if ((*((_WORD *)v37 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v37, v7);
    }
    else
    {
      *((_DWORD *)v37 + 6) -= 2;
    }
  }
LABEL_105:
  v38 = v41;
  v41 = 0;
  if (v38)
  {
    if (*((_DWORD *)v38 + 6) == 2)
    {
      if ((*((_WORD *)v38 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v38, v7);
    }
    else
    {
      *((_DWORD *)v38 + 6) -= 2;
    }
  }
  return v32;
}

uint64_t WebCore::AccessibilityRenderObject::doAXRangeForIndex(WebCore::AccessibilityRenderObject *this, unsigned int a2)
{
  int v4;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  char v13;
  WTF::StringImpl *v15;

  v4 = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1456))(this);
  if (((v4 - 101) > 0x19 || ((1 << (v4 - 101)) & 0x3000001) == 0) && v4 != 19)
    return 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1400))(&v15, this);
  v8 = v15;
  if (v15)
  {
    v10 = *(_DWORD *)v15;
    v9 = *((_DWORD *)v15 + 1);
    v11 = v9 != 0;
    v12 = v9 - 1;
    v13 = v11;
    if ((v13 & (v12 >= a2)) == 0)
      a2 = 0;
    v15 = 0;
    if (v10 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 = v10 - 2;
  }
  else
  {
    return 0;
  }
  return a2;
}

WTF::StringImpl *WebCore::AccessibilityRenderObject::doAXStringForRange@<X0>(WTF::StringImpl *result@<X0>, unsigned int *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v5;
  BOOL v6;
  BOOL v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  if (!*((_QWORD *)a2 + 1)
    || ((v5 = result,
         result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 1456))(result),
         ((_DWORD)result - 101) <= 0x19)
      ? (v6 = ((1 << ((_BYTE)result - 101)) & 0x3000001) == 0)
      : (v6 = 1),
        v6 ? (v7 = (_DWORD)result == 19) : (v7 = 1),
        !v7
     || ((*(void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl *))(*(_QWORD *)v5 + 1400))(&v9, v5),
         (result = v9) == 0)))
  {
    *a3 = 0;
    return result;
  }
  v8 = (WTF::StringImpl *)*a2;
  if ((_DWORD)v8 || *((_DWORD *)v9 + 1) > a2[2])
  {
    WTF::StringImpl::substring(v9);
    result = v9;
    v9 = 0;
    if (!result)
      return result;
  }
  else
  {
    *(_DWORD *)v9 += 2;
    *a3 = result;
    v9 = 0;
  }
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
  *(_DWORD *)result -= 2;
  return result;
}

uint64_t WebCore::AccessibilityRenderObject::doAXBoundsForRange(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  WebCore::Node *v8;
  void *v9;
  WebCore::Node *v10;
  void *v11;
  uint64_t v12;
  WebCore::Node *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Node *v19[3];
  WebCore::Node *v20;
  int v21;
  char v22;
  char v23;

  v4 = a2[1] + *a2;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)a1 + 1400))(&v16);
  v6 = v16;
  if (v16)
  {
    v7 = *((_DWORD *)v16 + 1);
    v16 = 0;
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  else
  {
    v7 = 0;
  }
  if (v4 <= v7)
  {
    (*(void (**)(WebCore::Node **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 2104))(&v20, a1, *(unsigned int *)a2);
    v23 = 1;
    v8 = v20;
    if (v20)
      *((_DWORD *)v20 + 6) += 2;
    v16 = v8;
    LODWORD(v17) = v21;
    BYTE4(v17) = v22;
    LOBYTE(v18) = 1;
    (*(void (**)(WebCore::Node **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 2104))(v19, a1, (*((_DWORD *)a2 + 2) + *(_DWORD *)a2));
    v10 = v20;
    v20 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v9);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
  }
  else
  {
    v19[0] = 0;
    v16 = 0;
    v17 = 0;
    v18 = 1;
    v19[1] = 0;
    v19[2] = (WebCore::Node *)1;
  }
  v12 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 3128))(a1, &v16);
  v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v11);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14, v11);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  return v12;
}

unint64_t WebCore::AccessibilityRenderObject::doAXBoundsForRangeUsingCharacterOffset(WebCore::AccessibilityObject *a1)
{
  void *v2;
  unint64_t v3;
  WebCore::Node *v4;
  WebCore::Node *v5;
  WebCore::Node *v7[2];
  WebCore::Node *v8;
  char v9;

  (*(void (**)(WebCore::Node **__return_ptr))(*(_QWORD *)a1 + 2032))(v7);
  if (!v9)
    return 0;
  v3 = WebCore::AccessibilityObject::boundsForRange(a1, (const WebCore::SimpleRange *)v7);
  if (v9)
  {
    v4 = v8;
    v8 = 0;
    if (v4)
    {
      if (*((_DWORD *)v4 + 6) == 2)
      {
        if ((*((_WORD *)v4 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v4, v2);
      }
      else
      {
        *((_DWORD *)v4 + 6) -= 2;
      }
    }
    v5 = v7[0];
    v7[0] = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 6) == 2)
      {
        if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v5, v2);
      }
      else
      {
        *((_DWORD *)v5 + 6) -= 2;
      }
    }
  }
  return v3;
}

uint64_t WebCore::AccessibilityRenderObject::remoteSVGRootElement(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::RenderObject *v16;
  WebCore::AXObjectCache *v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25[2];

  v2 = a1[31];
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if ((((*(_BYTE *)(v3 + 52) & 7) == 3) & *(_BYTE *)(v3 + 53)) != 1)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 224) + 24);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  if ((*(_WORD *)(v5 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v5 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v25);
    v22 = (unsigned int *)v25[0];
    if (v25[0])
    {
      v8 = (WTF *)*((_QWORD *)v25[0] + 1);
      v25[0] = 0;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = *(WTF **)(v5 + 688);
    if (v8)
      goto LABEL_8;
    {
      v8 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v25);
      v8 = v25[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v25[0];
    }
  }
  if (!v8)
    return 0;
LABEL_8:
  if (!(*(unsigned int (**)(WTF *))(*(_QWORD *)v8 + 56))(v8))
    return 0;
  v10 = *((_QWORD *)v8 + 8);
  if (!v10)
    return 0;
  v11 = *(_QWORD *)(v10 + 160);
  if (!v11 || *(_BYTE *)(v11 + 144) != 0)
    return 0;
  v13 = *(_QWORD *)(v11 + 288);
  if (!v13)
    return 0;
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 328) + 296);
  if (!v14)
    return 0;
  if ((*(_WORD *)(v14 + 3358) & 0x20) == 0)
    return 0;
  v15 = *(_QWORD *)(v14 + 1272);
  if (!v15
    || (*(_WORD *)(v15 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    return 0;
  }
  *(_DWORD *)(v15 + 24) += 2;
  v16 = (WebCore::RenderObject *)(*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL);
  if (!v16)
    goto LABEL_31;
  if ((*(_BYTE *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19562ADF8);
  }
  v17 = (WebCore::AXObjectCache *)(*(uint64_t (**)(_QWORD *))(*a1 + 1488))(a1);
  if (v17)
  {
    if (a2)
      v18 = WebCore::AXObjectCache::get(v17, v16);
    else
      v18 = WebCore::AXObjectCache::getOrCreate(v17, v16);
    v19 = v18;
    if (v18 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 2696))(v18))
      v19 = 0;
  }
  else
  {
LABEL_31:
    v19 = 0;
  }
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, v9);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  return v19;
}

